/*
Copyright 2014 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg2_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelverValueTypeArray1234 = 10
	codecSelverValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 2 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			2, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg4_inf.Dec
		var v2 pkg5_labels.Selector
		var v3 pkg6_fields.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg2_util.Time
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *TypeMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyfirst2 bool
			var yyq2 [2]bool
			_, _, _, _ = yysep2, yyfirst2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					yyfirst2 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2 {
						r.EncodeMapKVSeparator()
					}
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yysep2 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					if yyfirst2 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2 {
						r.EncodeMapKVSeparator()
					}
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yysep2 {
				if yyr2 || yy2arr2 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *TypeMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym9 := z.DecBinary()
	_ = yym9
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl10 := r.ReadMapStart()
			if yyl10 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl10, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl10 := r.ReadArrayStart()
			if yyl10 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl10, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TypeMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys11Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys11Slc
	var yyhl11 bool = l >= 0
	for yyj11 := 0; ; yyj11++ {
		if yyhl11 {
			if yyj11 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj11 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys11Slc = r.DecodeBytes(yys11Slc, true, true)
		yys11 := string(yys11Slc)
		if !yyhl11 {
			r.ReadMapKVSeparator()
		}
		switch yys11 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys11)
		} // end switch yys11
	} // end for yyj11
	if !yyhl11 {
		r.ReadMapEnd()
	}
}

func (x *TypeMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		if yyj14 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ListMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym17 := z.EncBinary()
		_ = yym17
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep18 := !z.EncBinary()
			yy2arr18 := z.EncBasicHandle().StructToArray
			var yyfirst18 bool
			var yyq18 [2]bool
			_, _, _, _ = yysep18, yyfirst18, yyq18, yy2arr18
			const yyr18 bool = false
			yyq18[0] = x.SelfLink != ""
			yyq18[1] = x.ResourceVersion != ""
			if yyr18 || yy2arr18 {
				r.EncodeArrayStart(2)
			} else {
				var yynn18 int = 0
				for _, b := range yyq18 {
					if b {
						yynn18++
					}
				}
				r.EncodeMapStart(yynn18)
			}
			if yyr18 || yy2arr18 {
				if yyq18[0] {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq18[0] {
					yyfirst18 = true
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					if yysep18 {
						r.EncodeMapKVSeparator()
					}
					yym21 := z.EncBinary()
					_ = yym21
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr18 || yy2arr18 {
				if yysep18 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq18[1] {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq18[1] {
					if yyfirst18 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst18 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					if yysep18 {
						r.EncodeMapKVSeparator()
					}
					yym24 := z.EncBinary()
					_ = yym24
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yysep18 {
				if yyr18 || yy2arr18 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ListMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym25 := z.DecBinary()
	_ = yym25
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl26 := r.ReadMapStart()
			if yyl26 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl26, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl26 := r.ReadArrayStart()
			if yyl26 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl26, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys27Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys27Slc
	var yyhl27 bool = l >= 0
	for yyj27 := 0; ; yyj27++ {
		if yyhl27 {
			if yyj27 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj27 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys27Slc = r.DecodeBytes(yys27Slc, true, true)
		yys27 := string(yys27Slc)
		if !yyhl27 {
			r.ReadMapKVSeparator()
		}
		switch yys27 {
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys27)
		} // end switch yys27
	} // end for yyj27
	if !yyhl27 {
		r.ReadMapEnd()
	}
}

func (x *ListMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		if yyj30 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym33 := z.EncBinary()
		_ = yym33
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep34 := !z.EncBinary()
			yy2arr34 := z.EncBasicHandle().StructToArray
			var yyfirst34 bool
			var yyq34 [12]bool
			_, _, _, _ = yysep34, yyfirst34, yyq34, yy2arr34
			const yyr34 bool = false
			yyq34[0] = x.Name != ""
			yyq34[1] = x.GenerateName != ""
			yyq34[2] = x.Namespace != ""
			yyq34[3] = x.SelfLink != ""
			yyq34[4] = x.UID != ""
			yyq34[5] = x.ResourceVersion != ""
			yyq34[6] = x.Generation != 0
			yyq34[7] = true
			yyq34[8] = x.DeletionTimestamp != nil
			yyq34[9] = x.DeletionGracePeriodSeconds != nil
			yyq34[10] = len(x.Labels) != 0
			yyq34[11] = len(x.Annotations) != 0
			if yyr34 || yy2arr34 {
				r.EncodeArrayStart(12)
			} else {
				var yynn34 int = 0
				for _, b := range yyq34 {
					if b {
						yynn34++
					}
				}
				r.EncodeMapStart(yynn34)
			}
			if yyr34 || yy2arr34 {
				if yyq34[0] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[0] {
					yyfirst34 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[1] {
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[1] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[2] {
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[2] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym43 := z.EncBinary()
					_ = yym43
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[3] {
					yym45 := z.EncBinary()
					_ = yym45
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[3] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[4] {
					yym48 := z.EncBinary()
					_ = yym48
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[4] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[5] {
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq34[5] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym52 := z.EncBinary()
					_ = yym52
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[6] {
					yym54 := z.EncBinary()
					_ = yym54
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq34[6] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yym55 := z.EncBinary()
					_ = yym55
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[7] {
					yy57 := &x.CreationTimestamp
					yym58 := z.EncBinary()
					_ = yym58
					if false {
					} else if z.HasExtensions() && z.EncExt(yy57) {
					} else if yym58 {
						z.EncBinaryMarshal(yy57)
					} else if !yym58 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy57)
					} else {
						z.EncFallback(yy57)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[7] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					yy59 := &x.CreationTimestamp
					yym60 := z.EncBinary()
					_ = yym60
					if false {
					} else if z.HasExtensions() && z.EncExt(yy59) {
					} else if yym60 {
						z.EncBinaryMarshal(yy59)
					} else if !yym60 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy59)
					} else {
						z.EncFallback(yy59)
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym62 := z.EncBinary()
						_ = yym62
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym62 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym62 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[8] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym63 := z.EncBinary()
						_ = yym63
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym63 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym63 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy65 := *x.DeletionGracePeriodSeconds
						yym66 := z.EncBinary()
						_ = yym66
						if false {
						} else {
							r.EncodeInt(int64(yy65))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[9] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy67 := *x.DeletionGracePeriodSeconds
						yym68 := z.EncBinary()
						_ = yym68
						if false {
						} else {
							r.EncodeInt(int64(yy67))
						}
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym70 := z.EncBinary()
						_ = yym70
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[10] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym71 := z.EncBinary()
						_ = yym71
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr34 || yy2arr34 {
				if yysep34 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq34[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym73 := z.EncBinary()
						_ = yym73
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq34[11] {
					if yyfirst34 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst34 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if yysep34 {
						r.EncodeMapKVSeparator()
					}
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym74 := z.EncBinary()
						_ = yym74
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep34 {
				if yyr34 || yy2arr34 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym75 := z.DecBinary()
	_ = yym75
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl76 := r.ReadMapStart()
			if yyl76 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl76, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl76 := r.ReadArrayStart()
			if yyl76 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl76, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys77Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys77Slc
	var yyhl77 bool = l >= 0
	for yyj77 := 0; ; yyj77++ {
		if yyhl77 {
			if yyj77 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj77 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys77Slc = r.DecodeBytes(yys77Slc, true, true)
		yys77 := string(yys77Slc)
		if !yyhl77 {
			r.ReadMapKVSeparator()
		}
		switch yys77 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_util.Time{}
			} else {
				yyv85 := &x.CreationTimestamp
				yym86 := z.DecBinary()
				_ = yym86
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv85) {
				} else if yym86 {
					z.DecBinaryUnmarshal(yyv85)
				} else if !yym86 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv85)
				} else {
					z.DecFallback(yyv85, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_util.Time)
				}
				yym88 := z.DecBinary()
				_ = yym88
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym88 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym88 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym90 := z.DecBinary()
				_ = yym90
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv91 := &x.Labels
				yym92 := z.DecBinary()
				_ = yym92
				if false {
				} else {
					z.F.DecMapStringStringX(yyv91, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv93 := &x.Annotations
				yym94 := z.DecBinary()
				_ = yym94
				if false {
				} else {
					z.F.DecMapStringStringX(yyv93, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys77)
		} // end switch yys77
	} // end for yyj77
	if !yyhl77 {
		r.ReadMapEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj95 int
	var yyb95 bool
	var yyhl95 bool = l >= 0
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_util.Time{}
	} else {
		yyv103 := &x.CreationTimestamp
		yym104 := z.DecBinary()
		_ = yym104
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv103) {
		} else if yym104 {
			z.DecBinaryUnmarshal(yyv103)
		} else if !yym104 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv103)
		} else {
			z.DecFallback(yyv103, false)
		}
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_util.Time)
		}
		yym106 := z.DecBinary()
		_ = yym106
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym106 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym106 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym108 := z.DecBinary()
		_ = yym108
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv109 := &x.Labels
		yym110 := z.DecBinary()
		_ = yym110
		if false {
		} else {
			z.F.DecMapStringStringX(yyv109, false, d)
		}
	}
	yyj95++
	if yyhl95 {
		yyb95 = yyj95 > l
	} else {
		yyb95 = r.CheckBreak()
	}
	if yyb95 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv111 := &x.Annotations
		yym112 := z.DecBinary()
		_ = yym112
		if false {
		} else {
			z.F.DecMapStringStringX(yyv111, false, d)
		}
	}
	for {
		yyj95++
		if yyhl95 {
			yyb95 = yyj95 > l
		} else {
			yyb95 = r.CheckBreak()
		}
		if yyb95 {
			break
		}
		if yyj95 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj95-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym113 := z.EncBinary()
		_ = yym113
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep114 := !z.EncBinary()
			yy2arr114 := z.EncBasicHandle().StructToArray
			var yyfirst114 bool
			var yyq114 [15]bool
			_, _, _, _ = yysep114, yyfirst114, yyq114, yy2arr114
			const yyr114 bool = false
			yyq114[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq114[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq114[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq114[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq114[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq114[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq114[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq114[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq114[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq114[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq114[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq114[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq114[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq114[14] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			if yyr114 || yy2arr114 {
				r.EncodeArrayStart(15)
			} else {
				var yynn114 int = 1
				for _, b := range yyq114 {
					if b {
						yynn114++
					}
				}
				r.EncodeMapStart(yynn114)
			}
			if yyr114 || yy2arr114 {
				yym116 := z.EncBinary()
				_ = yym116
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst114 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep114 {
					r.EncodeMapKVSeparator()
				}
				yym117 := z.EncBinary()
				_ = yym117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn118 bool
			if x.VolumeSource.HostPath == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn118 {
					r.EncodeNil()
				} else {
					if yyq114[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[1] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn119 {
					r.EncodeNil()
				} else {
					if yyq114[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[2] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn120 {
					r.EncodeNil()
				} else {
					if yyq114[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[3] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn121 {
					r.EncodeNil()
				} else {
					if yyq114[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[4] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.GitRepo == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn122 {
					r.EncodeNil()
				} else {
					if yyq114[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[5] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.Secret == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn123 {
					r.EncodeNil()
				} else {
					if yyq114[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[6] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.NFS == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn124 {
					r.EncodeNil()
				} else {
					if yyq114[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[7] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.ISCSI == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn125 {
					r.EncodeNil()
				} else {
					if yyq114[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[8] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn126 {
					r.EncodeNil()
				} else {
					if yyq114[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[9] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn127 {
					r.EncodeNil()
				} else {
					if yyq114[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[10] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.RBD == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn128 {
					r.EncodeNil()
				} else {
					if yyq114[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[11] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn129 bool
			if x.VolumeSource.Cinder == nil {
				yyn129 = true
				goto LABEL129
			}
		LABEL129:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn129 {
					r.EncodeNil()
				} else {
					if yyq114[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[12] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn129 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn130 bool
			if x.VolumeSource.CephFS == nil {
				yyn130 = true
				goto LABEL130
			}
		LABEL130:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn130 {
					r.EncodeNil()
				} else {
					if yyq114[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[13] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn130 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn131 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn131 = true
				goto LABEL131
			}
		LABEL131:
			if yyr114 || yy2arr114 {
				if yysep114 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn131 {
					r.EncodeNil()
				} else {
					if yyq114[14] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq114[14] {
					if yyfirst114 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst114 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yysep114 {
						r.EncodeMapKVSeparator()
					}
					if yyn131 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep114 {
				if yyr114 || yy2arr114 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym132 := z.DecBinary()
	_ = yym132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl133 := r.ReadMapStart()
			if yyl133 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl133, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl133 := r.ReadArrayStart()
			if yyl133 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys134Slc
	var yyhl134 bool = l >= 0
	for yyj134 := 0; ; yyj134++ {
		if yyhl134 {
			if yyj134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj134 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys134Slc = r.DecodeBytes(yys134Slc, true, true)
		yys134 := string(yys134Slc)
		if !yyhl134 {
			r.ReadMapKVSeparator()
		}
		switch yys134 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys134)
		} // end switch yys134
	} // end for yyj134
	if !yyhl134 {
		r.ReadMapEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj150 int
	var yyb150 bool
	var yyhl150 bool = l >= 0
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj150++
	if yyhl150 {
		yyb150 = yyj150 > l
	} else {
		yyb150 = r.CheckBreak()
	}
	if yyb150 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	for {
		yyj150++
		if yyhl150 {
			yyb150 = yyj150 > l
		} else {
			yyb150 = r.CheckBreak()
		}
		if yyb150 {
			break
		}
		if yyj150 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj150-1, "")
	}
	r.ReadArrayEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym166 := z.EncBinary()
		_ = yym166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep167 := !z.EncBinary()
			yy2arr167 := z.EncBasicHandle().StructToArray
			var yyfirst167 bool
			var yyq167 [14]bool
			_, _, _, _ = yysep167, yyfirst167, yyq167, yy2arr167
			const yyr167 bool = false
			yyq167[0] = x.HostPath != nil
			yyq167[1] = x.EmptyDir != nil
			yyq167[2] = x.GCEPersistentDisk != nil
			yyq167[3] = x.AWSElasticBlockStore != nil
			yyq167[4] = x.GitRepo != nil
			yyq167[5] = x.Secret != nil
			yyq167[6] = x.NFS != nil
			yyq167[7] = x.ISCSI != nil
			yyq167[8] = x.Glusterfs != nil
			yyq167[9] = x.PersistentVolumeClaim != nil
			yyq167[10] = x.RBD != nil
			yyq167[11] = x.Cinder != nil
			yyq167[12] = x.CephFS != nil
			yyq167[13] = x.DownwardAPI != nil
			if yyr167 || yy2arr167 {
				r.EncodeArrayStart(14)
			} else {
				var yynn167 int = 0
				for _, b := range yyq167 {
					if b {
						yynn167++
					}
				}
				r.EncodeMapStart(yynn167)
			}
			if yyr167 || yy2arr167 {
				if yyq167[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[0] {
					yyfirst167 = true
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[1] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[2] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[3] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[4] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[5] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[6] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[7] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[8] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[9] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[10] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[11] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[12] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr167 || yy2arr167 {
				if yysep167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq167[13] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[13] {
					if yyfirst167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yysep167 {
						r.EncodeMapKVSeparator()
					}
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yysep167 {
				if yyr167 || yy2arr167 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym182 := z.DecBinary()
	_ = yym182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl183 := r.ReadMapStart()
			if yyl183 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl183, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl183 := r.ReadArrayStart()
			if yyl183 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys184Slc
	var yyhl184 bool = l >= 0
	for yyj184 := 0; ; yyj184++ {
		if yyhl184 {
			if yyj184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj184 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys184Slc = r.DecodeBytes(yys184Slc, true, true)
		yys184 := string(yys184Slc)
		if !yyhl184 {
			r.ReadMapKVSeparator()
		}
		switch yys184 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys184)
		} // end switch yys184
	} // end for yyj184
	if !yyhl184 {
		r.ReadMapEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj199 int
	var yyb199 bool
	var yyhl199 bool = l >= 0
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	for {
		yyj199++
		if yyhl199 {
			yyb199 = yyj199 > l
		} else {
			yyb199 = r.CheckBreak()
		}
		if yyb199 {
			break
		}
		if yyj199 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj199-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym214 := z.EncBinary()
		_ = yym214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep215 := !z.EncBinary()
			yy2arr215 := z.EncBasicHandle().StructToArray
			var yyfirst215 bool
			var yyq215 [9]bool
			_, _, _, _ = yysep215, yyfirst215, yyq215, yy2arr215
			const yyr215 bool = false
			yyq215[0] = x.GCEPersistentDisk != nil
			yyq215[1] = x.AWSElasticBlockStore != nil
			yyq215[2] = x.HostPath != nil
			yyq215[3] = x.Glusterfs != nil
			yyq215[4] = x.NFS != nil
			yyq215[5] = x.RBD != nil
			yyq215[6] = x.ISCSI != nil
			yyq215[7] = x.Cinder != nil
			yyq215[8] = x.CephFS != nil
			if yyr215 || yy2arr215 {
				r.EncodeArrayStart(9)
			} else {
				var yynn215 int = 0
				for _, b := range yyq215 {
					if b {
						yynn215++
					}
				}
				r.EncodeMapStart(yynn215)
			}
			if yyr215 || yy2arr215 {
				if yyq215[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq215[0] {
					yyfirst215 = true
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yysep215 {
						r.EncodeMapKVSeparator()
					}
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr215 || yy2arr215 {
				if yysep215 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq215[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq215[1] {
					if yyfirst215 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst215 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yysep215 {
						r.EncodeMapKVSeparator()
					}
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr215 || yy2arr215 {
				if yysep215 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq215[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq215[2] {
					if yyfirst215 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst215 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yysep215 {
						r.EncodeMapKVSeparator()
					}
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr215 || yy2arr215 {
				if yysep215 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq215[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq215[3] {
					if yyfirst215 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst215 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yysep215 {
						r.EncodeMapKVSeparator()
					}
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr215 || yy2arr215 {
				if yysep215 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq215[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq215[4] {
					if yyfirst215 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst215 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yysep215 {
						r.EncodeMapKVSeparator()
					}
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr215 || yy2arr215 {
				if yysep215 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq215[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq215[5] {
					if yyfirst215 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst215 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yysep215 {
						r.EncodeMapKVSeparator()
					}
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr215 || yy2arr215 {
				if yysep215 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq215[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq215[6] {
					if yyfirst215 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst215 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yysep215 {
						r.EncodeMapKVSeparator()
					}
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr215 || yy2arr215 {
				if yysep215 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq215[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq215[7] {
					if yyfirst215 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst215 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yysep215 {
						r.EncodeMapKVSeparator()
					}
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr215 || yy2arr215 {
				if yysep215 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq215[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq215[8] {
					if yyfirst215 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst215 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yysep215 {
						r.EncodeMapKVSeparator()
					}
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yysep215 {
				if yyr215 || yy2arr215 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym225 := z.DecBinary()
	_ = yym225
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl226 := r.ReadMapStart()
			if yyl226 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl226, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl226 := r.ReadArrayStart()
			if yyl226 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl226, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys227Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys227Slc
	var yyhl227 bool = l >= 0
	for yyj227 := 0; ; yyj227++ {
		if yyhl227 {
			if yyj227 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj227 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys227Slc = r.DecodeBytes(yys227Slc, true, true)
		yys227 := string(yys227Slc)
		if !yyhl227 {
			r.ReadMapKVSeparator()
		}
		switch yys227 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys227)
		} // end switch yys227
	} // end for yyj227
	if !yyhl227 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		if yyj237 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym247 := z.EncBinary()
		_ = yym247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep248 := !z.EncBinary()
			yy2arr248 := z.EncBasicHandle().StructToArray
			var yyfirst248 bool
			var yyq248 [2]bool
			_, _, _, _ = yysep248, yyfirst248, yyq248, yy2arr248
			const yyr248 bool = false
			yyq248[1] = x.ReadOnly != false
			if yyr248 || yy2arr248 {
				r.EncodeArrayStart(2)
			} else {
				var yynn248 int = 1
				for _, b := range yyq248 {
					if b {
						yynn248++
					}
				}
				r.EncodeMapStart(yynn248)
			}
			if yyr248 || yy2arr248 {
				yym250 := z.EncBinary()
				_ = yym250
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				yyfirst248 = true
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				if yysep248 {
					r.EncodeMapKVSeparator()
				}
				yym251 := z.EncBinary()
				_ = yym251
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr248 || yy2arr248 {
				if yysep248 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq248[1] {
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq248[1] {
					if yyfirst248 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst248 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep248 {
						r.EncodeMapKVSeparator()
					}
					yym254 := z.EncBinary()
					_ = yym254
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep248 {
				if yyr248 || yy2arr248 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym255 := z.DecBinary()
	_ = yym255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl256 := r.ReadMapStart()
			if yyl256 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl256, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl256 := r.ReadArrayStart()
			if yyl256 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys257Slc
	var yyhl257 bool = l >= 0
	for yyj257 := 0; ; yyj257++ {
		if yyhl257 {
			if yyj257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj257 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys257Slc = r.DecodeBytes(yys257Slc, true, true)
		yys257 := string(yys257Slc)
		if !yyhl257 {
			r.ReadMapKVSeparator()
		}
		switch yys257 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys257)
		} // end switch yys257
	} // end for yyj257
	if !yyhl257 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj260 int
	var yyb260 bool
	var yyhl260 bool = l >= 0
	yyj260++
	if yyhl260 {
		yyb260 = yyj260 > l
	} else {
		yyb260 = r.CheckBreak()
	}
	if yyb260 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj260++
	if yyhl260 {
		yyb260 = yyj260 > l
	} else {
		yyb260 = r.CheckBreak()
	}
	if yyb260 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj260++
		if yyhl260 {
			yyb260 = yyj260 > l
		} else {
			yyb260 = r.CheckBreak()
		}
		if yyb260 {
			break
		}
		if yyj260 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj260-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym263 := z.EncBinary()
		_ = yym263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep264 := !z.EncBinary()
			yy2arr264 := z.EncBasicHandle().StructToArray
			var yyfirst264 bool
			var yyq264 [5]bool
			_, _, _, _ = yysep264, yyfirst264, yyq264, yy2arr264
			const yyr264 bool = false
			yyq264[0] = x.Kind != ""
			yyq264[1] = x.APIVersion != ""
			yyq264[2] = true
			yyq264[3] = true
			yyq264[4] = true
			if yyr264 || yy2arr264 {
				r.EncodeArrayStart(5)
			} else {
				var yynn264 int = 0
				for _, b := range yyq264 {
					if b {
						yynn264++
					}
				}
				r.EncodeMapStart(yynn264)
			}
			if yyr264 || yy2arr264 {
				if yyq264[0] {
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq264[0] {
					yyfirst264 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep264 {
						r.EncodeMapKVSeparator()
					}
					yym267 := z.EncBinary()
					_ = yym267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr264 || yy2arr264 {
				if yysep264 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq264[1] {
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq264[1] {
					if yyfirst264 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst264 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep264 {
						r.EncodeMapKVSeparator()
					}
					yym270 := z.EncBinary()
					_ = yym270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr264 || yy2arr264 {
				if yysep264 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq264[2] {
					yy272 := &x.ObjectMeta
					yy272.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq264[2] {
					if yyfirst264 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst264 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep264 {
						r.EncodeMapKVSeparator()
					}
					yy273 := &x.ObjectMeta
					yy273.CodecEncodeSelf(e)
				}
			}
			if yyr264 || yy2arr264 {
				if yysep264 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq264[3] {
					yy275 := &x.Spec
					yy275.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq264[3] {
					if yyfirst264 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst264 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep264 {
						r.EncodeMapKVSeparator()
					}
					yy276 := &x.Spec
					yy276.CodecEncodeSelf(e)
				}
			}
			if yyr264 || yy2arr264 {
				if yysep264 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq264[4] {
					yy278 := &x.Status
					yy278.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq264[4] {
					if yyfirst264 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst264 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep264 {
						r.EncodeMapKVSeparator()
					}
					yy279 := &x.Status
					yy279.CodecEncodeSelf(e)
				}
			}
			if yysep264 {
				if yyr264 || yy2arr264 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym280 := z.DecBinary()
	_ = yym280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl281 := r.ReadMapStart()
			if yyl281 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl281, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl281 := r.ReadArrayStart()
			if yyl281 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl281, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys282Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys282Slc
	var yyhl282 bool = l >= 0
	for yyj282 := 0; ; yyj282++ {
		if yyhl282 {
			if yyj282 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj282 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys282Slc = r.DecodeBytes(yys282Slc, true, true)
		yys282 := string(yys282Slc)
		if !yyhl282 {
			r.ReadMapKVSeparator()
		}
		switch yys282 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv285 := &x.ObjectMeta
				yyv285.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv286 := &x.Spec
				yyv286.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv287 := &x.Status
				yyv287.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys282)
		} // end switch yys282
	} // end for yyj282
	if !yyhl282 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj288 int
	var yyb288 bool
	var yyhl288 bool = l >= 0
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv291 := &x.ObjectMeta
		yyv291.CodecDecodeSelf(d)
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv292 := &x.Spec
		yyv292.CodecDecodeSelf(d)
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv293 := &x.Status
		yyv293.CodecDecodeSelf(d)
	}
	for {
		yyj288++
		if yyhl288 {
			yyb288 = yyj288 > l
		} else {
			yyb288 = r.CheckBreak()
		}
		if yyb288 {
			break
		}
		if yyj288 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj288-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym294 := z.EncBinary()
		_ = yym294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep295 := !z.EncBinary()
			yy2arr295 := z.EncBasicHandle().StructToArray
			var yyfirst295 bool
			var yyq295 [13]bool
			_, _, _, _ = yysep295, yyfirst295, yyq295, yy2arr295
			const yyr295 bool = false
			yyq295[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq295[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq295[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq295[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq295[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq295[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq295[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq295[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq295[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq295[10] = len(x.AccessModes) != 0
			yyq295[11] = x.ClaimRef != nil
			yyq295[12] = x.PersistentVolumeReclaimPolicy != ""
			if yyr295 || yy2arr295 {
				r.EncodeArrayStart(13)
			} else {
				var yynn295 int = 1
				for _, b := range yyq295 {
					if b {
						yynn295++
					}
				}
				r.EncodeMapStart(yynn295)
			}
			if yyr295 || yy2arr295 {
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				yyfirst295 = true
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				if yysep295 {
					r.EncodeMapKVSeparator()
				}
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn297 {
					r.EncodeNil()
				} else {
					if yyq295[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[1] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn298 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn298 = true
				goto LABEL298
			}
		LABEL298:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn298 {
					r.EncodeNil()
				} else {
					if yyq295[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[2] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn298 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn299 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn299 = true
				goto LABEL299
			}
		LABEL299:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn299 {
					r.EncodeNil()
				} else {
					if yyq295[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[3] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn299 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn300 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn300 = true
				goto LABEL300
			}
		LABEL300:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn300 {
					r.EncodeNil()
				} else {
					if yyq295[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[4] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn300 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn301 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn301 = true
				goto LABEL301
			}
		LABEL301:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn301 {
					r.EncodeNil()
				} else {
					if yyq295[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[5] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn301 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn302 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn302 = true
				goto LABEL302
			}
		LABEL302:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn302 {
					r.EncodeNil()
				} else {
					if yyq295[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[6] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn302 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn303 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn303 = true
				goto LABEL303
			}
		LABEL303:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn303 {
					r.EncodeNil()
				} else {
					if yyq295[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[7] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn303 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn304 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn304 = true
				goto LABEL304
			}
		LABEL304:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn304 {
					r.EncodeNil()
				} else {
					if yyq295[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[8] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn304 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn305 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn305 = true
				goto LABEL305
			}
		LABEL305:
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn305 {
					r.EncodeNil()
				} else {
					if yyq295[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq295[9] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if yyn305 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq295[10] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym307 := z.EncBinary()
						_ = yym307
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq295[10] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym308 := z.EncBinary()
						_ = yym308
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq295[11] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq295[11] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr295 || yy2arr295 {
				if yysep295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq295[12] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq295[12] {
					if yyfirst295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					if yysep295 {
						r.EncodeMapKVSeparator()
					}
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep295 {
				if yyr295 || yy2arr295 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym311 := z.DecBinary()
	_ = yym311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl312 := r.ReadMapStart()
			if yyl312 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl312, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl312 := r.ReadArrayStart()
			if yyl312 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl312, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys313Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys313Slc
	var yyhl313 bool = l >= 0
	for yyj313 := 0; ; yyj313++ {
		if yyhl313 {
			if yyj313 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj313 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys313Slc = r.DecodeBytes(yys313Slc, true, true)
		yys313 := string(yys313Slc)
		if !yyhl313 {
			r.ReadMapKVSeparator()
		}
		switch yys313 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv314 := &x.Capacity
				yyv314.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv324 := &x.AccessModes
				yym325 := z.DecBinary()
				_ = yym325
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv324), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys313)
		} // end switch yys313
	} // end for yyj313
	if !yyhl313 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj328 int
	var yyb328 bool
	var yyhl328 bool = l >= 0
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv329 := &x.Capacity
		yyv329.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv339 := &x.AccessModes
		yym340 := z.DecBinary()
		_ = yym340
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv339), d)
		}
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj328++
	if yyhl328 {
		yyb328 = yyj328 > l
	} else {
		yyb328 = r.CheckBreak()
	}
	if yyb328 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj328++
		if yyhl328 {
			yyb328 = yyj328 > l
		} else {
			yyb328 = r.CheckBreak()
		}
		if yyb328 {
			break
		}
		if yyj328 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj328-1, "")
	}
	r.ReadArrayEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym343 := z.EncBinary()
	_ = yym343
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym344 := z.DecBinary()
	_ = yym344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym345 := z.EncBinary()
		_ = yym345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep346 := !z.EncBinary()
			yy2arr346 := z.EncBasicHandle().StructToArray
			var yyfirst346 bool
			var yyq346 [3]bool
			_, _, _, _ = yysep346, yyfirst346, yyq346, yy2arr346
			const yyr346 bool = false
			yyq346[0] = x.Phase != ""
			yyq346[1] = x.Message != ""
			yyq346[2] = x.Reason != ""
			if yyr346 || yy2arr346 {
				r.EncodeArrayStart(3)
			} else {
				var yynn346 int = 0
				for _, b := range yyq346 {
					if b {
						yynn346++
					}
				}
				r.EncodeMapStart(yynn346)
			}
			if yyr346 || yy2arr346 {
				if yyq346[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq346[0] {
					yyfirst346 = true
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					if yysep346 {
						r.EncodeMapKVSeparator()
					}
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr346 || yy2arr346 {
				if yysep346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq346[1] {
					yym349 := z.EncBinary()
					_ = yym349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq346[1] {
					if yyfirst346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep346 {
						r.EncodeMapKVSeparator()
					}
					yym350 := z.EncBinary()
					_ = yym350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr346 || yy2arr346 {
				if yysep346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq346[2] {
					yym352 := z.EncBinary()
					_ = yym352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq346[2] {
					if yyfirst346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep346 {
						r.EncodeMapKVSeparator()
					}
					yym353 := z.EncBinary()
					_ = yym353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep346 {
				if yyr346 || yy2arr346 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym354 := z.DecBinary()
	_ = yym354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl355 := r.ReadMapStart()
			if yyl355 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl355, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl355 := r.ReadArrayStart()
			if yyl355 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys356Slc
	var yyhl356 bool = l >= 0
	for yyj356 := 0; ; yyj356++ {
		if yyhl356 {
			if yyj356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj356 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys356Slc = r.DecodeBytes(yys356Slc, true, true)
		yys356 := string(yys356Slc)
		if !yyhl356 {
			r.ReadMapKVSeparator()
		}
		switch yys356 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys356)
		} // end switch yys356
	} // end for yyj356
	if !yyhl356 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj360 int
	var yyb360 bool
	var yyhl360 bool = l >= 0
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj360++
	if yyhl360 {
		yyb360 = yyj360 > l
	} else {
		yyb360 = r.CheckBreak()
	}
	if yyb360 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj360++
		if yyhl360 {
			yyb360 = yyj360 > l
		} else {
			yyb360 = r.CheckBreak()
		}
		if yyb360 {
			break
		}
		if yyj360 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj360-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym364 := z.EncBinary()
		_ = yym364
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep365 := !z.EncBinary()
			yy2arr365 := z.EncBasicHandle().StructToArray
			var yyfirst365 bool
			var yyq365 [4]bool
			_, _, _, _ = yysep365, yyfirst365, yyq365, yy2arr365
			const yyr365 bool = false
			yyq365[0] = x.Kind != ""
			yyq365[1] = x.APIVersion != ""
			yyq365[2] = true
			if yyr365 || yy2arr365 {
				r.EncodeArrayStart(4)
			} else {
				var yynn365 int = 1
				for _, b := range yyq365 {
					if b {
						yynn365++
					}
				}
				r.EncodeMapStart(yynn365)
			}
			if yyr365 || yy2arr365 {
				if yyq365[0] {
					yym367 := z.EncBinary()
					_ = yym367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq365[0] {
					yyfirst365 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep365 {
						r.EncodeMapKVSeparator()
					}
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr365 || yy2arr365 {
				if yysep365 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq365[1] {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq365[1] {
					if yyfirst365 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst365 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep365 {
						r.EncodeMapKVSeparator()
					}
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr365 || yy2arr365 {
				if yysep365 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq365[2] {
					yy373 := &x.ListMeta
					yy373.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq365[2] {
					if yyfirst365 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst365 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep365 {
						r.EncodeMapKVSeparator()
					}
					yy374 := &x.ListMeta
					yy374.CodecEncodeSelf(e)
				}
			}
			if yyr365 || yy2arr365 {
				if yysep365 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym376 := z.EncBinary()
					_ = yym376
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				if yyfirst365 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst365 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep365 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep365 {
				if yyr365 || yy2arr365 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym378 := z.DecBinary()
	_ = yym378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl379 := r.ReadMapStart()
			if yyl379 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl379, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl379 := r.ReadArrayStart()
			if yyl379 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys380Slc
	var yyhl380 bool = l >= 0
	for yyj380 := 0; ; yyj380++ {
		if yyhl380 {
			if yyj380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj380 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys380Slc = r.DecodeBytes(yys380Slc, true, true)
		yys380 := string(yys380Slc)
		if !yyhl380 {
			r.ReadMapKVSeparator()
		}
		switch yys380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv383 := &x.ListMeta
				yyv383.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv384 := &x.Items
				yym385 := z.DecBinary()
				_ = yym385
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv384), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys380)
		} // end switch yys380
	} // end for yyj380
	if !yyhl380 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj386 int
	var yyb386 bool
	var yyhl386 bool = l >= 0
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv389 := &x.ListMeta
		yyv389.CodecDecodeSelf(d)
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv390 := &x.Items
		yym391 := z.DecBinary()
		_ = yym391
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv390), d)
		}
	}
	for {
		yyj386++
		if yyhl386 {
			yyb386 = yyj386 > l
		} else {
			yyb386 = r.CheckBreak()
		}
		if yyb386 {
			break
		}
		if yyj386 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj386-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym392 := z.EncBinary()
		_ = yym392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep393 := !z.EncBinary()
			yy2arr393 := z.EncBasicHandle().StructToArray
			var yyfirst393 bool
			var yyq393 [5]bool
			_, _, _, _ = yysep393, yyfirst393, yyq393, yy2arr393
			const yyr393 bool = false
			yyq393[0] = x.Kind != ""
			yyq393[1] = x.APIVersion != ""
			yyq393[2] = true
			yyq393[3] = true
			yyq393[4] = true
			if yyr393 || yy2arr393 {
				r.EncodeArrayStart(5)
			} else {
				var yynn393 int = 0
				for _, b := range yyq393 {
					if b {
						yynn393++
					}
				}
				r.EncodeMapStart(yynn393)
			}
			if yyr393 || yy2arr393 {
				if yyq393[0] {
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq393[0] {
					yyfirst393 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep393 {
						r.EncodeMapKVSeparator()
					}
					yym396 := z.EncBinary()
					_ = yym396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr393 || yy2arr393 {
				if yysep393 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq393[1] {
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq393[1] {
					if yyfirst393 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst393 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep393 {
						r.EncodeMapKVSeparator()
					}
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr393 || yy2arr393 {
				if yysep393 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq393[2] {
					yy401 := &x.ObjectMeta
					yy401.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq393[2] {
					if yyfirst393 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst393 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep393 {
						r.EncodeMapKVSeparator()
					}
					yy402 := &x.ObjectMeta
					yy402.CodecEncodeSelf(e)
				}
			}
			if yyr393 || yy2arr393 {
				if yysep393 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq393[3] {
					yy404 := &x.Spec
					yy404.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq393[3] {
					if yyfirst393 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst393 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep393 {
						r.EncodeMapKVSeparator()
					}
					yy405 := &x.Spec
					yy405.CodecEncodeSelf(e)
				}
			}
			if yyr393 || yy2arr393 {
				if yysep393 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq393[4] {
					yy407 := &x.Status
					yy407.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq393[4] {
					if yyfirst393 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst393 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep393 {
						r.EncodeMapKVSeparator()
					}
					yy408 := &x.Status
					yy408.CodecEncodeSelf(e)
				}
			}
			if yysep393 {
				if yyr393 || yy2arr393 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym409 := z.DecBinary()
	_ = yym409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl410 := r.ReadMapStart()
			if yyl410 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl410, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl410 := r.ReadArrayStart()
			if yyl410 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys411Slc
	var yyhl411 bool = l >= 0
	for yyj411 := 0; ; yyj411++ {
		if yyhl411 {
			if yyj411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj411 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys411Slc = r.DecodeBytes(yys411Slc, true, true)
		yys411 := string(yys411Slc)
		if !yyhl411 {
			r.ReadMapKVSeparator()
		}
		switch yys411 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv414 := &x.ObjectMeta
				yyv414.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv415 := &x.Spec
				yyv415.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv416 := &x.Status
				yyv416.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys411)
		} // end switch yys411
	} // end for yyj411
	if !yyhl411 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj417 int
	var yyb417 bool
	var yyhl417 bool = l >= 0
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv420 := &x.ObjectMeta
		yyv420.CodecDecodeSelf(d)
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv421 := &x.Spec
		yyv421.CodecDecodeSelf(d)
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv422 := &x.Status
		yyv422.CodecDecodeSelf(d)
	}
	for {
		yyj417++
		if yyhl417 {
			yyb417 = yyj417 > l
		} else {
			yyb417 = r.CheckBreak()
		}
		if yyb417 {
			break
		}
		if yyj417 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj417-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym423 := z.EncBinary()
		_ = yym423
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep424 := !z.EncBinary()
			yy2arr424 := z.EncBasicHandle().StructToArray
			var yyfirst424 bool
			var yyq424 [4]bool
			_, _, _, _ = yysep424, yyfirst424, yyq424, yy2arr424
			const yyr424 bool = false
			yyq424[0] = x.Kind != ""
			yyq424[1] = x.APIVersion != ""
			yyq424[2] = true
			if yyr424 || yy2arr424 {
				r.EncodeArrayStart(4)
			} else {
				var yynn424 int = 1
				for _, b := range yyq424 {
					if b {
						yynn424++
					}
				}
				r.EncodeMapStart(yynn424)
			}
			if yyr424 || yy2arr424 {
				if yyq424[0] {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq424[0] {
					yyfirst424 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep424 {
						r.EncodeMapKVSeparator()
					}
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr424 || yy2arr424 {
				if yysep424 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq424[1] {
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq424[1] {
					if yyfirst424 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst424 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep424 {
						r.EncodeMapKVSeparator()
					}
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr424 || yy2arr424 {
				if yysep424 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq424[2] {
					yy432 := &x.ListMeta
					yy432.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq424[2] {
					if yyfirst424 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst424 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep424 {
						r.EncodeMapKVSeparator()
					}
					yy433 := &x.ListMeta
					yy433.CodecEncodeSelf(e)
				}
			}
			if yyr424 || yy2arr424 {
				if yysep424 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				if yyfirst424 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst424 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep424 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep424 {
				if yyr424 || yy2arr424 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym437 := z.DecBinary()
	_ = yym437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl438 := r.ReadMapStart()
			if yyl438 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl438, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl438 := r.ReadArrayStart()
			if yyl438 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys439Slc
	var yyhl439 bool = l >= 0
	for yyj439 := 0; ; yyj439++ {
		if yyhl439 {
			if yyj439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj439 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys439Slc = r.DecodeBytes(yys439Slc, true, true)
		yys439 := string(yys439Slc)
		if !yyhl439 {
			r.ReadMapKVSeparator()
		}
		switch yys439 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv442 := &x.ListMeta
				yyv442.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv443 := &x.Items
				yym444 := z.DecBinary()
				_ = yym444
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv443), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys439)
		} // end switch yys439
	} // end for yyj439
	if !yyhl439 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj445 int
	var yyb445 bool
	var yyhl445 bool = l >= 0
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv448 := &x.ListMeta
		yyv448.CodecDecodeSelf(d)
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj445++
		if yyhl445 {
			yyb445 = yyj445 > l
		} else {
			yyb445 = r.CheckBreak()
		}
		if yyb445 {
			break
		}
		if yyj445 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj445-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyfirst452 bool
			var yyq452 [3]bool
			_, _, _, _ = yysep452, yyfirst452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					yyfirst452 = true
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if yysep452 {
						r.EncodeMapKVSeparator()
					}
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yysep452 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					if yyfirst452 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst452 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					if yysep452 {
						r.EncodeMapKVSeparator()
					}
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yysep452 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					if yyfirst452 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst452 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					if yysep452 {
						r.EncodeMapKVSeparator()
					}
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				if yyr452 || yy2arr452 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj464 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		if !yyhl464 {
			r.ReadMapKVSeparator()
		}
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		if yyj469 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyfirst475 bool
			var yyq475 [3]bool
			_, _, _, _ = yysep475, yyfirst475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					yyfirst475 = true
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					if yysep475 {
						r.EncodeMapKVSeparator()
					}
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yysep475 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					if yyfirst475 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst475 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if yysep475 {
						r.EncodeMapKVSeparator()
					}
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yysep475 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					if yyfirst475 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst475 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if yysep475 {
						r.EncodeMapKVSeparator()
					}
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				if yyr475 || yy2arr475 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj483 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		if !yyhl483 {
			r.ReadMapKVSeparator()
		}
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadMapEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		if yyj488 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadArrayEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyfirst500 bool
			var yyq500 [1]bool
			_, _, _, _ = yysep500, yyfirst500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				yyfirst500 = true
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				if yysep500 {
					r.EncodeMapKVSeparator()
				}
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				if yyr500 || yy2arr500 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj506 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		if !yyhl506 {
			r.ReadMapKVSeparator()
		}
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadMapEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		if yyj508 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyfirst511 bool
			var yyq511 [1]bool
			_, _, _, _ = yysep511, yyfirst511, yyq511, yy2arr511
			const yyr511 bool = false
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 1
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				x.Medium.CodecEncodeSelf(e)
			} else {
				yyfirst511 = true
				r.EncodeString(codecSelferC_UTF81234, string("medium"))
				if yysep511 {
					r.EncodeMapKVSeparator()
				}
				x.Medium.CodecEncodeSelf(e)
			}
			if yysep511 {
				if yyr511 || yy2arr511 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj515 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		if !yyhl515 {
			r.ReadMapKVSeparator()
		}
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadMapEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		if yyj517 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadArrayEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyfirst524 bool
			var yyq524 [4]bool
			_, _, _, _ = yysep524, yyfirst524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[1] = x.FSType != ""
			yyq524[2] = x.Partition != 0
			yyq524[3] = x.ReadOnly != false
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(4)
			} else {
				var yynn524 int = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
			}
			if yyr524 || yy2arr524 {
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				yyfirst524 = true
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				if yysep524 {
					r.EncodeMapKVSeparator()
				}
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr524 || yy2arr524 {
				if yysep524 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq524[1] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[1] {
					if yyfirst524 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst524 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					if yysep524 {
						r.EncodeMapKVSeparator()
					}
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr524 || yy2arr524 {
				if yysep524 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq524[2] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq524[2] {
					if yyfirst524 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst524 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					if yysep524 {
						r.EncodeMapKVSeparator()
					}
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr524 || yy2arr524 {
				if yysep524 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq524[3] {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq524[3] {
					if yyfirst524 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst524 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep524 {
						r.EncodeMapKVSeparator()
					}
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep524 {
				if yyr524 || yy2arr524 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj539 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		if !yyhl539 {
			r.ReadMapKVSeparator()
		}
		switch yys539 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	if !yyhl539 {
		r.ReadMapEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		if yyj544 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyfirst550 bool
			var yyq550 [5]bool
			_, _, _, _ = yysep550, yyfirst550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.TargetPortal != ""
			yyq550[1] = x.IQN != ""
			yyq550[2] = x.Lun != 0
			yyq550[3] = x.FSType != ""
			yyq550[4] = x.ReadOnly != false
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(5)
			} else {
				var yynn550 int = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
			}
			if yyr550 || yy2arr550 {
				if yyq550[0] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					yyfirst550 = true
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					if yysep550 {
						r.EncodeMapKVSeparator()
					}
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yysep550 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq550[1] {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[1] {
					if yyfirst550 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst550 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					if yysep550 {
						r.EncodeMapKVSeparator()
					}
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yysep550 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq550[2] {
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq550[2] {
					if yyfirst550 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst550 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					if yysep550 {
						r.EncodeMapKVSeparator()
					}
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yysep550 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq550[3] {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[3] {
					if yyfirst550 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst550 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					if yysep550 {
						r.EncodeMapKVSeparator()
					}
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yysep550 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq550[4] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq550[4] {
					if yyfirst550 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst550 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep550 {
						r.EncodeMapKVSeparator()
					}
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep550 {
				if yyr550 || yy2arr550 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj568 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		if !yyhl568 {
			r.ReadMapKVSeparator()
		}
		switch yys568 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadMapEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj574 int
	var yyb574 bool
	var yyhl574 bool = l >= 0
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj574++
		if yyhl574 {
			yyb574 = yyj574 > l
		} else {
			yyb574 = r.CheckBreak()
		}
		if yyb574 {
			break
		}
		if yyj574 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj574-1, "")
	}
	r.ReadArrayEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym580 := z.EncBinary()
		_ = yym580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep581 := !z.EncBinary()
			yy2arr581 := z.EncBasicHandle().StructToArray
			var yyfirst581 bool
			var yyq581 [4]bool
			_, _, _, _ = yysep581, yyfirst581, yyq581, yy2arr581
			const yyr581 bool = false
			yyq581[1] = x.FSType != ""
			yyq581[2] = x.Partition != 0
			yyq581[3] = x.ReadOnly != false
			if yyr581 || yy2arr581 {
				r.EncodeArrayStart(4)
			} else {
				var yynn581 int = 1
				for _, b := range yyq581 {
					if b {
						yynn581++
					}
				}
				r.EncodeMapStart(yynn581)
			}
			if yyr581 || yy2arr581 {
				yym583 := z.EncBinary()
				_ = yym583
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				yyfirst581 = true
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				if yysep581 {
					r.EncodeMapKVSeparator()
				}
				yym584 := z.EncBinary()
				_ = yym584
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr581 || yy2arr581 {
				if yysep581 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq581[1] {
					yym586 := z.EncBinary()
					_ = yym586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq581[1] {
					if yyfirst581 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst581 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					if yysep581 {
						r.EncodeMapKVSeparator()
					}
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr581 || yy2arr581 {
				if yysep581 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq581[2] {
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq581[2] {
					if yyfirst581 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst581 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					if yysep581 {
						r.EncodeMapKVSeparator()
					}
					yym590 := z.EncBinary()
					_ = yym590
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr581 || yy2arr581 {
				if yysep581 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq581[3] {
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq581[3] {
					if yyfirst581 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst581 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep581 {
						r.EncodeMapKVSeparator()
					}
					yym593 := z.EncBinary()
					_ = yym593
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep581 {
				if yyr581 || yy2arr581 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym594 := z.DecBinary()
	_ = yym594
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl595 := r.ReadMapStart()
			if yyl595 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl595, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl595 := r.ReadArrayStart()
			if yyl595 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl595, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys596Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys596Slc
	var yyhl596 bool = l >= 0
	for yyj596 := 0; ; yyj596++ {
		if yyhl596 {
			if yyj596 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj596 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys596Slc = r.DecodeBytes(yys596Slc, true, true)
		yys596 := string(yys596Slc)
		if !yyhl596 {
			r.ReadMapKVSeparator()
		}
		switch yys596 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys596)
		} // end switch yys596
	} // end for yyj596
	if !yyhl596 {
		r.ReadMapEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj601 int
	var yyb601 bool
	var yyhl601 bool = l >= 0
	yyj601++
	if yyhl601 {
		yyb601 = yyj601 > l
	} else {
		yyb601 = r.CheckBreak()
	}
	if yyb601 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj601++
	if yyhl601 {
		yyb601 = yyj601 > l
	} else {
		yyb601 = r.CheckBreak()
	}
	if yyb601 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj601++
	if yyhl601 {
		yyb601 = yyj601 > l
	} else {
		yyb601 = r.CheckBreak()
	}
	if yyb601 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj601++
	if yyhl601 {
		yyb601 = yyj601 > l
	} else {
		yyb601 = r.CheckBreak()
	}
	if yyb601 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj601++
		if yyhl601 {
			yyb601 = yyj601 > l
		} else {
			yyb601 = r.CheckBreak()
		}
		if yyb601 {
			break
		}
		if yyj601 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj601-1, "")
	}
	r.ReadArrayEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym606 := z.EncBinary()
		_ = yym606
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep607 := !z.EncBinary()
			yy2arr607 := z.EncBasicHandle().StructToArray
			var yyfirst607 bool
			var yyq607 [2]bool
			_, _, _, _ = yysep607, yyfirst607, yyq607, yy2arr607
			const yyr607 bool = false
			if yyr607 || yy2arr607 {
				r.EncodeArrayStart(2)
			} else {
				var yynn607 int = 2
				for _, b := range yyq607 {
					if b {
						yynn607++
					}
				}
				r.EncodeMapStart(yynn607)
			}
			if yyr607 || yy2arr607 {
				yym609 := z.EncBinary()
				_ = yym609
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				yyfirst607 = true
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				if yysep607 {
					r.EncodeMapKVSeparator()
				}
				yym610 := z.EncBinary()
				_ = yym610
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr607 || yy2arr607 {
				if yysep607 {
					r.EncodeArrayEntrySeparator()
				}
				yym612 := z.EncBinary()
				_ = yym612
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				if yyfirst607 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst607 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				if yysep607 {
					r.EncodeMapKVSeparator()
				}
				yym613 := z.EncBinary()
				_ = yym613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep607 {
				if yyr607 || yy2arr607 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym614 := z.DecBinary()
	_ = yym614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl615 := r.ReadMapStart()
			if yyl615 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl615, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl615 := r.ReadArrayStart()
			if yyl615 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl615, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys616Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys616Slc
	var yyhl616 bool = l >= 0
	for yyj616 := 0; ; yyj616++ {
		if yyhl616 {
			if yyj616 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj616 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys616Slc = r.DecodeBytes(yys616Slc, true, true)
		yys616 := string(yys616Slc)
		if !yyhl616 {
			r.ReadMapKVSeparator()
		}
		switch yys616 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys616)
		} // end switch yys616
	} // end for yyj616
	if !yyhl616 {
		r.ReadMapEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj619 int
	var yyb619 bool
	var yyhl619 bool = l >= 0
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj619++
		if yyhl619 {
			yyb619 = yyj619 > l
		} else {
			yyb619 = r.CheckBreak()
		}
		if yyb619 {
			break
		}
		if yyj619 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj619-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym622 := z.EncBinary()
		_ = yym622
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep623 := !z.EncBinary()
			yy2arr623 := z.EncBasicHandle().StructToArray
			var yyfirst623 bool
			var yyq623 [1]bool
			_, _, _, _ = yysep623, yyfirst623, yyq623, yy2arr623
			const yyr623 bool = false
			if yyr623 || yy2arr623 {
				r.EncodeArrayStart(1)
			} else {
				var yynn623 int = 1
				for _, b := range yyq623 {
					if b {
						yynn623++
					}
				}
				r.EncodeMapStart(yynn623)
			}
			if yyr623 || yy2arr623 {
				yym625 := z.EncBinary()
				_ = yym625
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				yyfirst623 = true
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				if yysep623 {
					r.EncodeMapKVSeparator()
				}
				yym626 := z.EncBinary()
				_ = yym626
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep623 {
				if yyr623 || yy2arr623 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym627 := z.DecBinary()
	_ = yym627
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl628 := r.ReadMapStart()
			if yyl628 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl628, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl628 := r.ReadArrayStart()
			if yyl628 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl628, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys629Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys629Slc
	var yyhl629 bool = l >= 0
	for yyj629 := 0; ; yyj629++ {
		if yyhl629 {
			if yyj629 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj629 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys629Slc = r.DecodeBytes(yys629Slc, true, true)
		yys629 := string(yys629Slc)
		if !yyhl629 {
			r.ReadMapKVSeparator()
		}
		switch yys629 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys629)
		} // end switch yys629
	} // end for yyj629
	if !yyhl629 {
		r.ReadMapEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj631 int
	var yyb631 bool
	var yyhl631 bool = l >= 0
	yyj631++
	if yyhl631 {
		yyb631 = yyj631 > l
	} else {
		yyb631 = r.CheckBreak()
	}
	if yyb631 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj631++
		if yyhl631 {
			yyb631 = yyj631 > l
		} else {
			yyb631 = r.CheckBreak()
		}
		if yyb631 {
			break
		}
		if yyj631 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj631-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym633 := z.EncBinary()
		_ = yym633
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep634 := !z.EncBinary()
			yy2arr634 := z.EncBasicHandle().StructToArray
			var yyfirst634 bool
			var yyq634 [3]bool
			_, _, _, _ = yysep634, yyfirst634, yyq634, yy2arr634
			const yyr634 bool = false
			yyq634[2] = x.ReadOnly != false
			if yyr634 || yy2arr634 {
				r.EncodeArrayStart(3)
			} else {
				var yynn634 int = 2
				for _, b := range yyq634 {
					if b {
						yynn634++
					}
				}
				r.EncodeMapStart(yynn634)
			}
			if yyr634 || yy2arr634 {
				yym636 := z.EncBinary()
				_ = yym636
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				yyfirst634 = true
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				if yysep634 {
					r.EncodeMapKVSeparator()
				}
				yym637 := z.EncBinary()
				_ = yym637
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr634 || yy2arr634 {
				if yysep634 {
					r.EncodeArrayEntrySeparator()
				}
				yym639 := z.EncBinary()
				_ = yym639
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				if yyfirst634 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst634 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				if yysep634 {
					r.EncodeMapKVSeparator()
				}
				yym640 := z.EncBinary()
				_ = yym640
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr634 || yy2arr634 {
				if yysep634 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq634[2] {
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq634[2] {
					if yyfirst634 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst634 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep634 {
						r.EncodeMapKVSeparator()
					}
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep634 {
				if yyr634 || yy2arr634 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym644 := z.DecBinary()
	_ = yym644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl645 := r.ReadMapStart()
			if yyl645 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl645, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl645 := r.ReadArrayStart()
			if yyl645 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys646Slc
	var yyhl646 bool = l >= 0
	for yyj646 := 0; ; yyj646++ {
		if yyhl646 {
			if yyj646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj646 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys646Slc = r.DecodeBytes(yys646Slc, true, true)
		yys646 := string(yys646Slc)
		if !yyhl646 {
			r.ReadMapKVSeparator()
		}
		switch yys646 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys646)
		} // end switch yys646
	} // end for yyj646
	if !yyhl646 {
		r.ReadMapEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj650 int
	var yyb650 bool
	var yyhl650 bool = l >= 0
	yyj650++
	if yyhl650 {
		yyb650 = yyj650 > l
	} else {
		yyb650 = r.CheckBreak()
	}
	if yyb650 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj650++
	if yyhl650 {
		yyb650 = yyj650 > l
	} else {
		yyb650 = r.CheckBreak()
	}
	if yyb650 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj650++
	if yyhl650 {
		yyb650 = yyj650 > l
	} else {
		yyb650 = r.CheckBreak()
	}
	if yyb650 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj650++
		if yyhl650 {
			yyb650 = yyj650 > l
		} else {
			yyb650 = r.CheckBreak()
		}
		if yyb650 {
			break
		}
		if yyj650 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj650-1, "")
	}
	r.ReadArrayEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym654 := z.EncBinary()
		_ = yym654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep655 := !z.EncBinary()
			yy2arr655 := z.EncBasicHandle().StructToArray
			var yyfirst655 bool
			var yyq655 [3]bool
			_, _, _, _ = yysep655, yyfirst655, yyq655, yy2arr655
			const yyr655 bool = false
			yyq655[2] = x.ReadOnly != false
			if yyr655 || yy2arr655 {
				r.EncodeArrayStart(3)
			} else {
				var yynn655 int = 2
				for _, b := range yyq655 {
					if b {
						yynn655++
					}
				}
				r.EncodeMapStart(yynn655)
			}
			if yyr655 || yy2arr655 {
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				yyfirst655 = true
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				if yysep655 {
					r.EncodeMapKVSeparator()
				}
				yym658 := z.EncBinary()
				_ = yym658
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr655 || yy2arr655 {
				if yysep655 {
					r.EncodeArrayEntrySeparator()
				}
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				if yyfirst655 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst655 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				if yysep655 {
					r.EncodeMapKVSeparator()
				}
				yym661 := z.EncBinary()
				_ = yym661
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr655 || yy2arr655 {
				if yysep655 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq655[2] {
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq655[2] {
					if yyfirst655 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst655 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep655 {
						r.EncodeMapKVSeparator()
					}
					yym664 := z.EncBinary()
					_ = yym664
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep655 {
				if yyr655 || yy2arr655 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym665 := z.DecBinary()
	_ = yym665
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl666 := r.ReadMapStart()
			if yyl666 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl666, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl666 := r.ReadArrayStart()
			if yyl666 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl666, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys667Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys667Slc
	var yyhl667 bool = l >= 0
	for yyj667 := 0; ; yyj667++ {
		if yyhl667 {
			if yyj667 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj667 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys667Slc = r.DecodeBytes(yys667Slc, true, true)
		yys667 := string(yys667Slc)
		if !yyhl667 {
			r.ReadMapKVSeparator()
		}
		switch yys667 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys667)
		} // end switch yys667
	} // end for yyj667
	if !yyhl667 {
		r.ReadMapEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj671 int
	var yyb671 bool
	var yyhl671 bool = l >= 0
	yyj671++
	if yyhl671 {
		yyb671 = yyj671 > l
	} else {
		yyb671 = r.CheckBreak()
	}
	if yyb671 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj671++
	if yyhl671 {
		yyb671 = yyj671 > l
	} else {
		yyb671 = r.CheckBreak()
	}
	if yyb671 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj671++
	if yyhl671 {
		yyb671 = yyj671 > l
	} else {
		yyb671 = r.CheckBreak()
	}
	if yyb671 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj671++
		if yyhl671 {
			yyb671 = yyj671 > l
		} else {
			yyb671 = r.CheckBreak()
		}
		if yyb671 {
			break
		}
		if yyj671 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj671-1, "")
	}
	r.ReadArrayEnd()
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym675 := z.EncBinary()
		_ = yym675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep676 := !z.EncBinary()
			yy2arr676 := z.EncBasicHandle().StructToArray
			var yyfirst676 bool
			var yyq676 [8]bool
			_, _, _, _ = yysep676, yyfirst676, yyq676, yy2arr676
			const yyr676 bool = false
			yyq676[2] = x.FSType != ""
			yyq676[7] = x.ReadOnly != false
			if yyr676 || yy2arr676 {
				r.EncodeArrayStart(8)
			} else {
				var yynn676 int = 6
				for _, b := range yyq676 {
					if b {
						yynn676++
					}
				}
				r.EncodeMapStart(yynn676)
			}
			if yyr676 || yy2arr676 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				yyfirst676 = true
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if yysep676 {
					r.EncodeMapKVSeparator()
				}
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr676 || yy2arr676 {
				if yysep676 {
					r.EncodeArrayEntrySeparator()
				}
				yym681 := z.EncBinary()
				_ = yym681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				if yyfirst676 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst676 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				if yysep676 {
					r.EncodeMapKVSeparator()
				}
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr676 || yy2arr676 {
				if yysep676 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq676[2] {
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq676[2] {
					if yyfirst676 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst676 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					if yysep676 {
						r.EncodeMapKVSeparator()
					}
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr676 || yy2arr676 {
				if yysep676 {
					r.EncodeArrayEntrySeparator()
				}
				yym687 := z.EncBinary()
				_ = yym687
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				if yyfirst676 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst676 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				if yysep676 {
					r.EncodeMapKVSeparator()
				}
				yym688 := z.EncBinary()
				_ = yym688
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr676 || yy2arr676 {
				if yysep676 {
					r.EncodeArrayEntrySeparator()
				}
				yym690 := z.EncBinary()
				_ = yym690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				if yyfirst676 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst676 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				if yysep676 {
					r.EncodeMapKVSeparator()
				}
				yym691 := z.EncBinary()
				_ = yym691
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr676 || yy2arr676 {
				if yysep676 {
					r.EncodeArrayEntrySeparator()
				}
				yym693 := z.EncBinary()
				_ = yym693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				if yyfirst676 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst676 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				if yysep676 {
					r.EncodeMapKVSeparator()
				}
				yym694 := z.EncBinary()
				_ = yym694
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr676 || yy2arr676 {
				if yysep676 {
					r.EncodeArrayEntrySeparator()
				}
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				if yyfirst676 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst676 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if yysep676 {
					r.EncodeMapKVSeparator()
				}
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr676 || yy2arr676 {
				if yysep676 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq676[7] {
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq676[7] {
					if yyfirst676 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst676 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep676 {
						r.EncodeMapKVSeparator()
					}
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep676 {
				if yyr676 || yy2arr676 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym699 := z.DecBinary()
	_ = yym699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl700 := r.ReadMapStart()
			if yyl700 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl700, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl700 := r.ReadArrayStart()
			if yyl700 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys701Slc
	var yyhl701 bool = l >= 0
	for yyj701 := 0; ; yyj701++ {
		if yyhl701 {
			if yyj701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj701 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys701Slc = r.DecodeBytes(yys701Slc, true, true)
		yys701 := string(yys701Slc)
		if !yyhl701 {
			r.ReadMapKVSeparator()
		}
		switch yys701 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv702 := &x.CephMonitors
				yym703 := z.DecBinary()
				_ = yym703
				if false {
				} else {
					z.F.DecSliceStringX(yyv702, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys701)
		} // end switch yys701
	} // end for yyj701
	if !yyhl701 {
		r.ReadMapEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj711 int
	var yyb711 bool
	var yyhl711 bool = l >= 0
	yyj711++
	if yyhl711 {
		yyb711 = yyj711 > l
	} else {
		yyb711 = r.CheckBreak()
	}
	if yyb711 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv712 := &x.CephMonitors
		yym713 := z.DecBinary()
		_ = yym713
		if false {
		} else {
			z.F.DecSliceStringX(yyv712, false, d)
		}
	}
	yyj711++
	if yyhl711 {
		yyb711 = yyj711 > l
	} else {
		yyb711 = r.CheckBreak()
	}
	if yyb711 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj711++
	if yyhl711 {
		yyb711 = yyj711 > l
	} else {
		yyb711 = r.CheckBreak()
	}
	if yyb711 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj711++
	if yyhl711 {
		yyb711 = yyj711 > l
	} else {
		yyb711 = r.CheckBreak()
	}
	if yyb711 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj711++
	if yyhl711 {
		yyb711 = yyj711 > l
	} else {
		yyb711 = r.CheckBreak()
	}
	if yyb711 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj711++
	if yyhl711 {
		yyb711 = yyj711 > l
	} else {
		yyb711 = r.CheckBreak()
	}
	if yyb711 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj711++
	if yyhl711 {
		yyb711 = yyj711 > l
	} else {
		yyb711 = r.CheckBreak()
	}
	if yyb711 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj711++
	if yyhl711 {
		yyb711 = yyj711 > l
	} else {
		yyb711 = r.CheckBreak()
	}
	if yyb711 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj711++
		if yyhl711 {
			yyb711 = yyj711 > l
		} else {
			yyb711 = r.CheckBreak()
		}
		if yyb711 {
			break
		}
		if yyj711 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj711-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyfirst722 bool
			var yyq722 [3]bool
			_, _, _, _ = yysep722, yyfirst722, yyq722, yy2arr722
			const yyr722 bool = false
			yyq722[1] = x.FSType != ""
			yyq722[2] = x.ReadOnly != false
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(3)
			} else {
				var yynn722 int = 1
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
			}
			if yyr722 || yy2arr722 {
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				yyfirst722 = true
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				if yysep722 {
					r.EncodeMapKVSeparator()
				}
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr722 || yy2arr722 {
				if yysep722 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq722[1] {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq722[1] {
					if yyfirst722 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst722 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					if yysep722 {
						r.EncodeMapKVSeparator()
					}
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr722 || yy2arr722 {
				if yysep722 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq722[2] {
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq722[2] {
					if yyfirst722 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst722 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep722 {
						r.EncodeMapKVSeparator()
					}
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep722 {
				if yyr722 || yy2arr722 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym732 := z.DecBinary()
	_ = yym732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl733 := r.ReadMapStart()
			if yyl733 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl733, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl733 := r.ReadArrayStart()
			if yyl733 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys734Slc
	var yyhl734 bool = l >= 0
	for yyj734 := 0; ; yyj734++ {
		if yyhl734 {
			if yyj734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj734 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys734Slc = r.DecodeBytes(yys734Slc, true, true)
		yys734 := string(yys734Slc)
		if !yyhl734 {
			r.ReadMapKVSeparator()
		}
		switch yys734 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys734)
		} // end switch yys734
	} // end for yyj734
	if !yyhl734 {
		r.ReadMapEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj738 int
	var yyb738 bool
	var yyhl738 bool = l >= 0
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj738++
		if yyhl738 {
			yyb738 = yyj738 > l
		} else {
			yyb738 = r.CheckBreak()
		}
		if yyb738 {
			break
		}
		if yyj738 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj738-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym742 := z.EncBinary()
		_ = yym742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep743 := !z.EncBinary()
			yy2arr743 := z.EncBasicHandle().StructToArray
			var yyfirst743 bool
			var yyq743 [5]bool
			_, _, _, _ = yysep743, yyfirst743, yyq743, yy2arr743
			const yyr743 bool = false
			yyq743[1] = x.User != ""
			yyq743[2] = x.SecretFile != ""
			yyq743[3] = x.SecretRef != nil
			yyq743[4] = x.ReadOnly != false
			if yyr743 || yy2arr743 {
				r.EncodeArrayStart(5)
			} else {
				var yynn743 int = 1
				for _, b := range yyq743 {
					if b {
						yynn743++
					}
				}
				r.EncodeMapStart(yynn743)
			}
			if yyr743 || yy2arr743 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				yyfirst743 = true
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if yysep743 {
					r.EncodeMapKVSeparator()
				}
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr743 || yy2arr743 {
				if yysep743 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq743[1] {
					yym748 := z.EncBinary()
					_ = yym748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq743[1] {
					if yyfirst743 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst743 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					if yysep743 {
						r.EncodeMapKVSeparator()
					}
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr743 || yy2arr743 {
				if yysep743 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq743[2] {
					yym751 := z.EncBinary()
					_ = yym751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq743[2] {
					if yyfirst743 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst743 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					if yysep743 {
						r.EncodeMapKVSeparator()
					}
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr743 || yy2arr743 {
				if yysep743 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq743[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq743[3] {
					if yyfirst743 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst743 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if yysep743 {
						r.EncodeMapKVSeparator()
					}
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr743 || yy2arr743 {
				if yysep743 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq743[4] {
					yym755 := z.EncBinary()
					_ = yym755
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq743[4] {
					if yyfirst743 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst743 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep743 {
						r.EncodeMapKVSeparator()
					}
					yym756 := z.EncBinary()
					_ = yym756
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep743 {
				if yyr743 || yy2arr743 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym757 := z.DecBinary()
	_ = yym757
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl758 := r.ReadMapStart()
			if yyl758 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl758, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl758 := r.ReadArrayStart()
			if yyl758 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl758, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys759Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys759Slc
	var yyhl759 bool = l >= 0
	for yyj759 := 0; ; yyj759++ {
		if yyhl759 {
			if yyj759 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj759 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys759Slc = r.DecodeBytes(yys759Slc, true, true)
		yys759 := string(yys759Slc)
		if !yyhl759 {
			r.ReadMapKVSeparator()
		}
		switch yys759 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv760 := &x.Monitors
				yym761 := z.DecBinary()
				_ = yym761
				if false {
				} else {
					z.F.DecSliceStringX(yyv760, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys759)
		} // end switch yys759
	} // end for yyj759
	if !yyhl759 {
		r.ReadMapEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj766 int
	var yyb766 bool
	var yyhl766 bool = l >= 0
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv767 := &x.Monitors
		yym768 := z.DecBinary()
		_ = yym768
		if false {
		} else {
			z.F.DecSliceStringX(yyv767, false, d)
		}
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj766++
		if yyhl766 {
			yyb766 = yyj766 > l
		} else {
			yyb766 = r.CheckBreak()
		}
		if yyb766 {
			break
		}
		if yyj766 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj766-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym773 := z.EncBinary()
		_ = yym773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep774 := !z.EncBinary()
			yy2arr774 := z.EncBasicHandle().StructToArray
			var yyfirst774 bool
			var yyq774 [1]bool
			_, _, _, _ = yysep774, yyfirst774, yyq774, yy2arr774
			const yyr774 bool = false
			yyq774[0] = len(x.Items) != 0
			if yyr774 || yy2arr774 {
				r.EncodeArrayStart(1)
			} else {
				var yynn774 int = 0
				for _, b := range yyq774 {
					if b {
						yynn774++
					}
				}
				r.EncodeMapStart(yynn774)
			}
			if yyr774 || yy2arr774 {
				if yyq774[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym776 := z.EncBinary()
						_ = yym776
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq774[0] {
					yyfirst774 = true
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if yysep774 {
						r.EncodeMapKVSeparator()
					}
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym777 := z.EncBinary()
						_ = yym777
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep774 {
				if yyr774 || yy2arr774 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym778 := z.DecBinary()
	_ = yym778
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl779 := r.ReadMapStart()
			if yyl779 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl779, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl779 := r.ReadArrayStart()
			if yyl779 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl779, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys780Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys780Slc
	var yyhl780 bool = l >= 0
	for yyj780 := 0; ; yyj780++ {
		if yyhl780 {
			if yyj780 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj780 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys780Slc = r.DecodeBytes(yys780Slc, true, true)
		yys780 := string(yys780Slc)
		if !yyhl780 {
			r.ReadMapKVSeparator()
		}
		switch yys780 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv781 := &x.Items
				yym782 := z.DecBinary()
				_ = yym782
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv781), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys780)
		} // end switch yys780
	} // end for yyj780
	if !yyhl780 {
		r.ReadMapEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj783 int
	var yyb783 bool
	var yyhl783 bool = l >= 0
	yyj783++
	if yyhl783 {
		yyb783 = yyj783 > l
	} else {
		yyb783 = r.CheckBreak()
	}
	if yyb783 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv784 := &x.Items
		yym785 := z.DecBinary()
		_ = yym785
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv784), d)
		}
	}
	for {
		yyj783++
		if yyhl783 {
			yyb783 = yyj783 > l
		} else {
			yyb783 = r.CheckBreak()
		}
		if yyb783 {
			break
		}
		if yyj783 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj783-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym786 := z.EncBinary()
		_ = yym786
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep787 := !z.EncBinary()
			yy2arr787 := z.EncBasicHandle().StructToArray
			var yyfirst787 bool
			var yyq787 [2]bool
			_, _, _, _ = yysep787, yyfirst787, yyq787, yy2arr787
			const yyr787 bool = false
			if yyr787 || yy2arr787 {
				r.EncodeArrayStart(2)
			} else {
				var yynn787 int = 2
				for _, b := range yyq787 {
					if b {
						yynn787++
					}
				}
				r.EncodeMapStart(yynn787)
			}
			if yyr787 || yy2arr787 {
				yym789 := z.EncBinary()
				_ = yym789
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				yyfirst787 = true
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				if yysep787 {
					r.EncodeMapKVSeparator()
				}
				yym790 := z.EncBinary()
				_ = yym790
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr787 || yy2arr787 {
				if yysep787 {
					r.EncodeArrayEntrySeparator()
				}
				yy792 := &x.FieldRef
				yy792.CodecEncodeSelf(e)
			} else {
				if yyfirst787 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst787 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if yysep787 {
					r.EncodeMapKVSeparator()
				}
				yy793 := &x.FieldRef
				yy793.CodecEncodeSelf(e)
			}
			if yysep787 {
				if yyr787 || yy2arr787 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym794 := z.DecBinary()
	_ = yym794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl795 := r.ReadMapStart()
			if yyl795 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl795, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl795 := r.ReadArrayStart()
			if yyl795 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys796Slc
	var yyhl796 bool = l >= 0
	for yyj796 := 0; ; yyj796++ {
		if yyhl796 {
			if yyj796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj796 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys796Slc = r.DecodeBytes(yys796Slc, true, true)
		yys796 := string(yys796Slc)
		if !yyhl796 {
			r.ReadMapKVSeparator()
		}
		switch yys796 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv798 := &x.FieldRef
				yyv798.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys796)
		} // end switch yys796
	} // end for yyj796
	if !yyhl796 {
		r.ReadMapEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj799 int
	var yyb799 bool
	var yyhl799 bool = l >= 0
	yyj799++
	if yyhl799 {
		yyb799 = yyj799 > l
	} else {
		yyb799 = r.CheckBreak()
	}
	if yyb799 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj799++
	if yyhl799 {
		yyb799 = yyj799 > l
	} else {
		yyb799 = r.CheckBreak()
	}
	if yyb799 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv801 := &x.FieldRef
		yyv801.CodecDecodeSelf(d)
	}
	for {
		yyj799++
		if yyhl799 {
			yyb799 = yyj799 > l
		} else {
			yyb799 = r.CheckBreak()
		}
		if yyb799 {
			break
		}
		if yyj799 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj799-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym802 := z.EncBinary()
		_ = yym802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep803 := !z.EncBinary()
			yy2arr803 := z.EncBasicHandle().StructToArray
			var yyfirst803 bool
			var yyq803 [5]bool
			_, _, _, _ = yysep803, yyfirst803, yyq803, yy2arr803
			const yyr803 bool = false
			yyq803[0] = x.Name != ""
			yyq803[1] = x.HostPort != 0
			yyq803[3] = x.Protocol != ""
			yyq803[4] = x.HostIP != ""
			if yyr803 || yy2arr803 {
				r.EncodeArrayStart(5)
			} else {
				var yynn803 int = 1
				for _, b := range yyq803 {
					if b {
						yynn803++
					}
				}
				r.EncodeMapStart(yynn803)
			}
			if yyr803 || yy2arr803 {
				if yyq803[0] {
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq803[0] {
					yyfirst803 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep803 {
						r.EncodeMapKVSeparator()
					}
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr803 || yy2arr803 {
				if yysep803 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq803[1] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq803[1] {
					if yyfirst803 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst803 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					if yysep803 {
						r.EncodeMapKVSeparator()
					}
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr803 || yy2arr803 {
				if yysep803 {
					r.EncodeArrayEntrySeparator()
				}
				yym811 := z.EncBinary()
				_ = yym811
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				if yyfirst803 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst803 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				if yysep803 {
					r.EncodeMapKVSeparator()
				}
				yym812 := z.EncBinary()
				_ = yym812
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr803 || yy2arr803 {
				if yysep803 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq803[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq803[3] {
					if yyfirst803 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst803 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					if yysep803 {
						r.EncodeMapKVSeparator()
					}
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr803 || yy2arr803 {
				if yysep803 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq803[4] {
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq803[4] {
					if yyfirst803 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst803 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					if yysep803 {
						r.EncodeMapKVSeparator()
					}
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep803 {
				if yyr803 || yy2arr803 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym817 := z.DecBinary()
	_ = yym817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl818 := r.ReadMapStart()
			if yyl818 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl818, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl818 := r.ReadArrayStart()
			if yyl818 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys819Slc
	var yyhl819 bool = l >= 0
	for yyj819 := 0; ; yyj819++ {
		if yyhl819 {
			if yyj819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj819 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys819Slc = r.DecodeBytes(yys819Slc, true, true)
		yys819 := string(yys819Slc)
		if !yyhl819 {
			r.ReadMapKVSeparator()
		}
		switch yys819 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys819)
		} // end switch yys819
	} // end for yyj819
	if !yyhl819 {
		r.ReadMapEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj825 int
	var yyb825 bool
	var yyhl825 bool = l >= 0
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj825++
		if yyhl825 {
			yyb825 = yyj825 > l
		} else {
			yyb825 = r.CheckBreak()
		}
		if yyb825 {
			break
		}
		if yyj825 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj825-1, "")
	}
	r.ReadArrayEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym831 := z.EncBinary()
		_ = yym831
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep832 := !z.EncBinary()
			yy2arr832 := z.EncBasicHandle().StructToArray
			var yyfirst832 bool
			var yyq832 [3]bool
			_, _, _, _ = yysep832, yyfirst832, yyq832, yy2arr832
			const yyr832 bool = false
			yyq832[1] = x.ReadOnly != false
			if yyr832 || yy2arr832 {
				r.EncodeArrayStart(3)
			} else {
				var yynn832 int = 2
				for _, b := range yyq832 {
					if b {
						yynn832++
					}
				}
				r.EncodeMapStart(yynn832)
			}
			if yyr832 || yy2arr832 {
				yym834 := z.EncBinary()
				_ = yym834
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst832 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep832 {
					r.EncodeMapKVSeparator()
				}
				yym835 := z.EncBinary()
				_ = yym835
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr832 || yy2arr832 {
				if yysep832 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq832[1] {
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq832[1] {
					if yyfirst832 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst832 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					if yysep832 {
						r.EncodeMapKVSeparator()
					}
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr832 || yy2arr832 {
				if yysep832 {
					r.EncodeArrayEntrySeparator()
				}
				yym840 := z.EncBinary()
				_ = yym840
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				if yyfirst832 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst832 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				if yysep832 {
					r.EncodeMapKVSeparator()
				}
				yym841 := z.EncBinary()
				_ = yym841
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep832 {
				if yyr832 || yy2arr832 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym842 := z.DecBinary()
	_ = yym842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl843 := r.ReadMapStart()
			if yyl843 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl843, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl843 := r.ReadArrayStart()
			if yyl843 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys844Slc
	var yyhl844 bool = l >= 0
	for yyj844 := 0; ; yyj844++ {
		if yyhl844 {
			if yyj844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj844 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys844Slc = r.DecodeBytes(yys844Slc, true, true)
		yys844 := string(yys844Slc)
		if !yyhl844 {
			r.ReadMapKVSeparator()
		}
		switch yys844 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys844)
		} // end switch yys844
	} // end for yyj844
	if !yyhl844 {
		r.ReadMapEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj848 int
	var yyb848 bool
	var yyhl848 bool = l >= 0
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj848++
	if yyhl848 {
		yyb848 = yyj848 > l
	} else {
		yyb848 = r.CheckBreak()
	}
	if yyb848 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj848++
		if yyhl848 {
			yyb848 = yyj848 > l
		} else {
			yyb848 = r.CheckBreak()
		}
		if yyb848 {
			break
		}
		if yyj848 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj848-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym852 := z.EncBinary()
		_ = yym852
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep853 := !z.EncBinary()
			yy2arr853 := z.EncBasicHandle().StructToArray
			var yyfirst853 bool
			var yyq853 [3]bool
			_, _, _, _ = yysep853, yyfirst853, yyq853, yy2arr853
			const yyr853 bool = false
			yyq853[1] = x.Value != ""
			yyq853[2] = x.ValueFrom != nil
			if yyr853 || yy2arr853 {
				r.EncodeArrayStart(3)
			} else {
				var yynn853 int = 1
				for _, b := range yyq853 {
					if b {
						yynn853++
					}
				}
				r.EncodeMapStart(yynn853)
			}
			if yyr853 || yy2arr853 {
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst853 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep853 {
					r.EncodeMapKVSeparator()
				}
				yym856 := z.EncBinary()
				_ = yym856
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr853 || yy2arr853 {
				if yysep853 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq853[1] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq853[1] {
					if yyfirst853 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst853 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					if yysep853 {
						r.EncodeMapKVSeparator()
					}
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr853 || yy2arr853 {
				if yysep853 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq853[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq853[2] {
					if yyfirst853 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst853 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if yysep853 {
						r.EncodeMapKVSeparator()
					}
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep853 {
				if yyr853 || yy2arr853 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym861 := z.DecBinary()
	_ = yym861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl862 := r.ReadMapStart()
			if yyl862 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl862, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl862 := r.ReadArrayStart()
			if yyl862 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys863Slc
	var yyhl863 bool = l >= 0
	for yyj863 := 0; ; yyj863++ {
		if yyhl863 {
			if yyj863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj863 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys863Slc = r.DecodeBytes(yys863Slc, true, true)
		yys863 := string(yys863Slc)
		if !yyhl863 {
			r.ReadMapKVSeparator()
		}
		switch yys863 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys863)
		} // end switch yys863
	} // end for yyj863
	if !yyhl863 {
		r.ReadMapEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj867 int
	var yyb867 bool
	var yyhl867 bool = l >= 0
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj867++
		if yyhl867 {
			yyb867 = yyj867 > l
		} else {
			yyb867 = r.CheckBreak()
		}
		if yyb867 {
			break
		}
		if yyj867 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj867-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym871 := z.EncBinary()
		_ = yym871
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep872 := !z.EncBinary()
			yy2arr872 := z.EncBasicHandle().StructToArray
			var yyfirst872 bool
			var yyq872 [1]bool
			_, _, _, _ = yysep872, yyfirst872, yyq872, yy2arr872
			const yyr872 bool = false
			if yyr872 || yy2arr872 {
				r.EncodeArrayStart(1)
			} else {
				var yynn872 int = 1
				for _, b := range yyq872 {
					if b {
						yynn872++
					}
				}
				r.EncodeMapStart(yynn872)
			}
			if yyr872 || yy2arr872 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				yyfirst872 = true
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if yysep872 {
					r.EncodeMapKVSeparator()
				}
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep872 {
				if yyr872 || yy2arr872 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym874 := z.DecBinary()
	_ = yym874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl875 := r.ReadMapStart()
			if yyl875 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl875, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl875 := r.ReadArrayStart()
			if yyl875 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys876Slc
	var yyhl876 bool = l >= 0
	for yyj876 := 0; ; yyj876++ {
		if yyhl876 {
			if yyj876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj876 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys876Slc = r.DecodeBytes(yys876Slc, true, true)
		yys876 := string(yys876Slc)
		if !yyhl876 {
			r.ReadMapKVSeparator()
		}
		switch yys876 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys876)
		} // end switch yys876
	} // end for yyj876
	if !yyhl876 {
		r.ReadMapEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj878 int
	var yyb878 bool
	var yyhl878 bool = l >= 0
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj878++
		if yyhl878 {
			yyb878 = yyj878 > l
		} else {
			yyb878 = r.CheckBreak()
		}
		if yyb878 {
			break
		}
		if yyj878 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj878-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym880 := z.EncBinary()
		_ = yym880
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep881 := !z.EncBinary()
			yy2arr881 := z.EncBasicHandle().StructToArray
			var yyfirst881 bool
			var yyq881 [2]bool
			_, _, _, _ = yysep881, yyfirst881, yyq881, yy2arr881
			const yyr881 bool = false
			if yyr881 || yy2arr881 {
				r.EncodeArrayStart(2)
			} else {
				var yynn881 int = 2
				for _, b := range yyq881 {
					if b {
						yynn881++
					}
				}
				r.EncodeMapStart(yynn881)
			}
			if yyr881 || yy2arr881 {
				yym883 := z.EncBinary()
				_ = yym883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				yyfirst881 = true
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				if yysep881 {
					r.EncodeMapKVSeparator()
				}
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr881 || yy2arr881 {
				if yysep881 {
					r.EncodeArrayEntrySeparator()
				}
				yym886 := z.EncBinary()
				_ = yym886
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				if yyfirst881 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst881 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				if yysep881 {
					r.EncodeMapKVSeparator()
				}
				yym887 := z.EncBinary()
				_ = yym887
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep881 {
				if yyr881 || yy2arr881 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym888 := z.DecBinary()
	_ = yym888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl889 := r.ReadMapStart()
			if yyl889 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl889, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl889 := r.ReadArrayStart()
			if yyl889 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys890Slc
	var yyhl890 bool = l >= 0
	for yyj890 := 0; ; yyj890++ {
		if yyhl890 {
			if yyj890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj890 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys890Slc = r.DecodeBytes(yys890Slc, true, true)
		yys890 := string(yys890Slc)
		if !yyhl890 {
			r.ReadMapKVSeparator()
		}
		switch yys890 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys890)
		} // end switch yys890
	} // end for yyj890
	if !yyhl890 {
		r.ReadMapEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj893 int
	var yyb893 bool
	var yyhl893 bool = l >= 0
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj893++
		if yyhl893 {
			yyb893 = yyj893 > l
		} else {
			yyb893 = r.CheckBreak()
		}
		if yyb893 {
			break
		}
		if yyj893 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj893-1, "")
	}
	r.ReadArrayEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym896 := z.EncBinary()
		_ = yym896
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep897 := !z.EncBinary()
			yy2arr897 := z.EncBasicHandle().StructToArray
			var yyfirst897 bool
			var yyq897 [4]bool
			_, _, _, _ = yysep897, yyfirst897, yyq897, yy2arr897
			const yyr897 bool = false
			yyq897[0] = x.Path != ""
			yyq897[1] = true
			yyq897[2] = x.Host != ""
			yyq897[3] = x.Scheme != ""
			if yyr897 || yy2arr897 {
				r.EncodeArrayStart(4)
			} else {
				var yynn897 int = 0
				for _, b := range yyq897 {
					if b {
						yynn897++
					}
				}
				r.EncodeMapStart(yynn897)
			}
			if yyr897 || yy2arr897 {
				if yyq897[0] {
					yym899 := z.EncBinary()
					_ = yym899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq897[0] {
					yyfirst897 = true
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					if yysep897 {
						r.EncodeMapKVSeparator()
					}
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr897 || yy2arr897 {
				if yysep897 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq897[1] {
					yy902 := &x.Port
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else if z.HasExtensions() && z.EncExt(yy902) {
					} else if !yym903 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy902)
					} else {
						z.EncFallback(yy902)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq897[1] {
					if yyfirst897 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst897 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					if yysep897 {
						r.EncodeMapKVSeparator()
					}
					yy904 := &x.Port
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else if z.HasExtensions() && z.EncExt(yy904) {
					} else if !yym905 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy904)
					} else {
						z.EncFallback(yy904)
					}
				}
			}
			if yyr897 || yy2arr897 {
				if yysep897 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq897[2] {
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq897[2] {
					if yyfirst897 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst897 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					if yysep897 {
						r.EncodeMapKVSeparator()
					}
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr897 || yy2arr897 {
				if yysep897 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq897[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq897[3] {
					if yyfirst897 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst897 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					if yysep897 {
						r.EncodeMapKVSeparator()
					}
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep897 {
				if yyr897 || yy2arr897 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym910 := z.DecBinary()
	_ = yym910
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl911 := r.ReadMapStart()
			if yyl911 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl911, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl911 := r.ReadArrayStart()
			if yyl911 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl911, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys912Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys912Slc
	var yyhl912 bool = l >= 0
	for yyj912 := 0; ; yyj912++ {
		if yyhl912 {
			if yyj912 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj912 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys912Slc = r.DecodeBytes(yys912Slc, true, true)
		yys912 := string(yys912Slc)
		if !yyhl912 {
			r.ReadMapKVSeparator()
		}
		switch yys912 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg2_util.IntOrString{}
			} else {
				yyv914 := &x.Port
				yym915 := z.DecBinary()
				_ = yym915
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv914) {
				} else if !yym915 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv914)
				} else {
					z.DecFallback(yyv914, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys912)
		} // end switch yys912
	} // end for yyj912
	if !yyhl912 {
		r.ReadMapEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj918 int
	var yyb918 bool
	var yyhl918 bool = l >= 0
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Port = pkg2_util.IntOrString{}
	} else {
		yyv920 := &x.Port
		yym921 := z.DecBinary()
		_ = yym921
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv920) {
		} else if !yym921 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv920)
		} else {
			z.DecFallback(yyv920, false)
		}
	}
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj918++
	if yyhl918 {
		yyb918 = yyj918 > l
	} else {
		yyb918 = r.CheckBreak()
	}
	if yyb918 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj918++
		if yyhl918 {
			yyb918 = yyj918 > l
		} else {
			yyb918 = r.CheckBreak()
		}
		if yyb918 {
			break
		}
		if yyj918 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj918-1, "")
	}
	r.ReadArrayEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym924 := z.EncBinary()
	_ = yym924
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym925 := z.DecBinary()
	_ = yym925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym926 := z.EncBinary()
		_ = yym926
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep927 := !z.EncBinary()
			yy2arr927 := z.EncBasicHandle().StructToArray
			var yyfirst927 bool
			var yyq927 [1]bool
			_, _, _, _ = yysep927, yyfirst927, yyq927, yy2arr927
			const yyr927 bool = false
			yyq927[0] = true
			if yyr927 || yy2arr927 {
				r.EncodeArrayStart(1)
			} else {
				var yynn927 int = 0
				for _, b := range yyq927 {
					if b {
						yynn927++
					}
				}
				r.EncodeMapStart(yynn927)
			}
			if yyr927 || yy2arr927 {
				if yyq927[0] {
					yy929 := &x.Port
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else if z.HasExtensions() && z.EncExt(yy929) {
					} else if !yym930 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy929)
					} else {
						z.EncFallback(yy929)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq927[0] {
					yyfirst927 = true
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					if yysep927 {
						r.EncodeMapKVSeparator()
					}
					yy931 := &x.Port
					yym932 := z.EncBinary()
					_ = yym932
					if false {
					} else if z.HasExtensions() && z.EncExt(yy931) {
					} else if !yym932 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy931)
					} else {
						z.EncFallback(yy931)
					}
				}
			}
			if yysep927 {
				if yyr927 || yy2arr927 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym933 := z.DecBinary()
	_ = yym933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl934 := r.ReadMapStart()
			if yyl934 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl934, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl934 := r.ReadArrayStart()
			if yyl934 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl934, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys935Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys935Slc
	var yyhl935 bool = l >= 0
	for yyj935 := 0; ; yyj935++ {
		if yyhl935 {
			if yyj935 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj935 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys935Slc = r.DecodeBytes(yys935Slc, true, true)
		yys935 := string(yys935Slc)
		if !yyhl935 {
			r.ReadMapKVSeparator()
		}
		switch yys935 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg2_util.IntOrString{}
			} else {
				yyv936 := &x.Port
				yym937 := z.DecBinary()
				_ = yym937
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv936) {
				} else if !yym937 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv936)
				} else {
					z.DecFallback(yyv936, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys935)
		} // end switch yys935
	} // end for yyj935
	if !yyhl935 {
		r.ReadMapEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj938 int
	var yyb938 bool
	var yyhl938 bool = l >= 0
	yyj938++
	if yyhl938 {
		yyb938 = yyj938 > l
	} else {
		yyb938 = r.CheckBreak()
	}
	if yyb938 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg2_util.IntOrString{}
	} else {
		yyv939 := &x.Port
		yym940 := z.DecBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv939) {
		} else if !yym940 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv939)
		} else {
			z.DecFallback(yyv939, false)
		}
	}
	for {
		yyj938++
		if yyhl938 {
			yyb938 = yyj938 > l
		} else {
			yyb938 = r.CheckBreak()
		}
		if yyb938 {
			break
		}
		if yyj938 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj938-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym941 := z.EncBinary()
		_ = yym941
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep942 := !z.EncBinary()
			yy2arr942 := z.EncBasicHandle().StructToArray
			var yyfirst942 bool
			var yyq942 [1]bool
			_, _, _, _ = yysep942, yyfirst942, yyq942, yy2arr942
			const yyr942 bool = false
			yyq942[0] = len(x.Command) != 0
			if yyr942 || yy2arr942 {
				r.EncodeArrayStart(1)
			} else {
				var yynn942 int = 0
				for _, b := range yyq942 {
					if b {
						yynn942++
					}
				}
				r.EncodeMapStart(yynn942)
			}
			if yyr942 || yy2arr942 {
				if yyq942[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym944 := z.EncBinary()
						_ = yym944
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq942[0] {
					yyfirst942 = true
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if yysep942 {
						r.EncodeMapKVSeparator()
					}
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym945 := z.EncBinary()
						_ = yym945
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep942 {
				if yyr942 || yy2arr942 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym946 := z.DecBinary()
	_ = yym946
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl947 := r.ReadMapStart()
			if yyl947 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl947, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl947 := r.ReadArrayStart()
			if yyl947 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl947, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys948Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys948Slc
	var yyhl948 bool = l >= 0
	for yyj948 := 0; ; yyj948++ {
		if yyhl948 {
			if yyj948 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj948 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys948Slc = r.DecodeBytes(yys948Slc, true, true)
		yys948 := string(yys948Slc)
		if !yyhl948 {
			r.ReadMapKVSeparator()
		}
		switch yys948 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv949 := &x.Command
				yym950 := z.DecBinary()
				_ = yym950
				if false {
				} else {
					z.F.DecSliceStringX(yyv949, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys948)
		} // end switch yys948
	} // end for yyj948
	if !yyhl948 {
		r.ReadMapEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj951 int
	var yyb951 bool
	var yyhl951 bool = l >= 0
	yyj951++
	if yyhl951 {
		yyb951 = yyj951 > l
	} else {
		yyb951 = r.CheckBreak()
	}
	if yyb951 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv952 := &x.Command
		yym953 := z.DecBinary()
		_ = yym953
		if false {
		} else {
			z.F.DecSliceStringX(yyv952, false, d)
		}
	}
	for {
		yyj951++
		if yyhl951 {
			yyb951 = yyj951 > l
		} else {
			yyb951 = r.CheckBreak()
		}
		if yyb951 {
			break
		}
		if yyj951 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj951-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym954 := z.EncBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep955 := !z.EncBinary()
			yy2arr955 := z.EncBasicHandle().StructToArray
			var yyfirst955 bool
			var yyq955 [5]bool
			_, _, _, _ = yysep955, yyfirst955, yyq955, yy2arr955
			const yyr955 bool = false
			yyq955[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq955[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq955[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq955[3] = x.InitialDelaySeconds != 0
			yyq955[4] = x.TimeoutSeconds != 0
			if yyr955 || yy2arr955 {
				r.EncodeArrayStart(5)
			} else {
				var yynn955 int = 0
				for _, b := range yyq955 {
					if b {
						yynn955++
					}
				}
				r.EncodeMapStart(yynn955)
			}
			var yyn956 bool
			if x.Handler.Exec == nil {
				yyn956 = true
				goto LABEL956
			}
		LABEL956:
			if yyr955 || yy2arr955 {
				if yyn956 {
					r.EncodeNil()
				} else {
					if yyq955[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq955[0] {
					yyfirst955 = true
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yysep955 {
						r.EncodeMapKVSeparator()
					}
					if yyn956 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn957 bool
			if x.Handler.HTTPGet == nil {
				yyn957 = true
				goto LABEL957
			}
		LABEL957:
			if yyr955 || yy2arr955 {
				if yysep955 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn957 {
					r.EncodeNil()
				} else {
					if yyq955[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq955[1] {
					if yyfirst955 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst955 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yysep955 {
						r.EncodeMapKVSeparator()
					}
					if yyn957 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn958 bool
			if x.Handler.TCPSocket == nil {
				yyn958 = true
				goto LABEL958
			}
		LABEL958:
			if yyr955 || yy2arr955 {
				if yysep955 {
					r.EncodeArrayEntrySeparator()
				}
				if yyn958 {
					r.EncodeNil()
				} else {
					if yyq955[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq955[2] {
					if yyfirst955 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst955 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yysep955 {
						r.EncodeMapKVSeparator()
					}
					if yyn958 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr955 || yy2arr955 {
				if yysep955 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq955[3] {
					yym960 := z.EncBinary()
					_ = yym960
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq955[3] {
					if yyfirst955 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst955 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					if yysep955 {
						r.EncodeMapKVSeparator()
					}
					yym961 := z.EncBinary()
					_ = yym961
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr955 || yy2arr955 {
				if yysep955 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq955[4] {
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq955[4] {
					if yyfirst955 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst955 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					if yysep955 {
						r.EncodeMapKVSeparator()
					}
					yym964 := z.EncBinary()
					_ = yym964
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yysep955 {
				if yyr955 || yy2arr955 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym965 := z.DecBinary()
	_ = yym965
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl966 := r.ReadMapStart()
			if yyl966 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl966, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl966 := r.ReadArrayStart()
			if yyl966 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl966, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys967Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys967Slc
	var yyhl967 bool = l >= 0
	for yyj967 := 0; ; yyj967++ {
		if yyhl967 {
			if yyj967 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj967 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys967Slc = r.DecodeBytes(yys967Slc, true, true)
		yys967 := string(yys967Slc)
		if !yyhl967 {
			r.ReadMapKVSeparator()
		}
		switch yys967 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys967)
		} // end switch yys967
	} // end for yyj967
	if !yyhl967 {
		r.ReadMapEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj973 int
	var yyb973 bool
	var yyhl973 bool = l >= 0
	yyj973++
	if yyhl973 {
		yyb973 = yyj973 > l
	} else {
		yyb973 = r.CheckBreak()
	}
	if yyb973 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj973++
	if yyhl973 {
		yyb973 = yyj973 > l
	} else {
		yyb973 = r.CheckBreak()
	}
	if yyb973 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj973++
	if yyhl973 {
		yyb973 = yyj973 > l
	} else {
		yyb973 = r.CheckBreak()
	}
	if yyb973 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj973++
	if yyhl973 {
		yyb973 = yyj973 > l
	} else {
		yyb973 = r.CheckBreak()
	}
	if yyb973 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj973++
	if yyhl973 {
		yyb973 = yyj973 > l
	} else {
		yyb973 = r.CheckBreak()
	}
	if yyb973 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	for {
		yyj973++
		if yyhl973 {
			yyb973 = yyj973 > l
		} else {
			yyb973 = r.CheckBreak()
		}
		if yyb973 {
			break
		}
		if yyj973 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj973-1, "")
	}
	r.ReadArrayEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym979 := z.EncBinary()
	_ = yym979
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym980 := z.DecBinary()
	_ = yym980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym981 := z.EncBinary()
	_ = yym981
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym982 := z.DecBinary()
	_ = yym982
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym983 := z.EncBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep984 := !z.EncBinary()
			yy2arr984 := z.EncBasicHandle().StructToArray
			var yyfirst984 bool
			var yyq984 [2]bool
			_, _, _, _ = yysep984, yyfirst984, yyq984, yy2arr984
			const yyr984 bool = false
			yyq984[0] = len(x.Add) != 0
			yyq984[1] = len(x.Drop) != 0
			if yyr984 || yy2arr984 {
				r.EncodeArrayStart(2)
			} else {
				var yynn984 int = 0
				for _, b := range yyq984 {
					if b {
						yynn984++
					}
				}
				r.EncodeMapStart(yynn984)
			}
			if yyr984 || yy2arr984 {
				if yyq984[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym986 := z.EncBinary()
						_ = yym986
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[0] {
					yyfirst984 = true
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if yysep984 {
						r.EncodeMapKVSeparator()
					}
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym987 := z.EncBinary()
						_ = yym987
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr984 || yy2arr984 {
				if yysep984 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq984[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym989 := z.EncBinary()
						_ = yym989
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[1] {
					if yyfirst984 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst984 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if yysep984 {
						r.EncodeMapKVSeparator()
					}
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym990 := z.EncBinary()
						_ = yym990
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep984 {
				if yyr984 || yy2arr984 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym991 := z.DecBinary()
	_ = yym991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl992 := r.ReadMapStart()
			if yyl992 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl992, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl992 := r.ReadArrayStart()
			if yyl992 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys993Slc
	var yyhl993 bool = l >= 0
	for yyj993 := 0; ; yyj993++ {
		if yyhl993 {
			if yyj993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj993 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys993Slc = r.DecodeBytes(yys993Slc, true, true)
		yys993 := string(yys993Slc)
		if !yyhl993 {
			r.ReadMapKVSeparator()
		}
		switch yys993 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv994 := &x.Add
				yym995 := z.DecBinary()
				_ = yym995
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv994), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv996 := &x.Drop
				yym997 := z.DecBinary()
				_ = yym997
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv996), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys993)
		} // end switch yys993
	} // end for yyj993
	if !yyhl993 {
		r.ReadMapEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj998 int
	var yyb998 bool
	var yyhl998 bool = l >= 0
	yyj998++
	if yyhl998 {
		yyb998 = yyj998 > l
	} else {
		yyb998 = r.CheckBreak()
	}
	if yyb998 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv999 := &x.Add
		yym1000 := z.DecBinary()
		_ = yym1000
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv999), d)
		}
	}
	yyj998++
	if yyhl998 {
		yyb998 = yyj998 > l
	} else {
		yyb998 = r.CheckBreak()
	}
	if yyb998 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1001 := &x.Drop
		yym1002 := z.DecBinary()
		_ = yym1002
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1001), d)
		}
	}
	for {
		yyj998++
		if yyhl998 {
			yyb998 = yyj998 > l
		} else {
			yyb998 = r.CheckBreak()
		}
		if yyb998 {
			break
		}
		if yyj998 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj998-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1003 := z.EncBinary()
		_ = yym1003
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1004 := !z.EncBinary()
			yy2arr1004 := z.EncBasicHandle().StructToArray
			var yyfirst1004 bool
			var yyq1004 [2]bool
			_, _, _, _ = yysep1004, yyfirst1004, yyq1004, yy2arr1004
			const yyr1004 bool = false
			yyq1004[0] = len(x.Limits) != 0
			yyq1004[1] = len(x.Requests) != 0
			if yyr1004 || yy2arr1004 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1004 int = 0
				for _, b := range yyq1004 {
					if b {
						yynn1004++
					}
				}
				r.EncodeMapStart(yynn1004)
			}
			if yyr1004 || yy2arr1004 {
				if yyq1004[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1004[0] {
					yyfirst1004 = true
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if yysep1004 {
						r.EncodeMapKVSeparator()
					}
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1004 || yy2arr1004 {
				if yysep1004 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1004[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1004[1] {
					if yyfirst1004 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1004 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if yysep1004 {
						r.EncodeMapKVSeparator()
					}
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1004 {
				if yyr1004 || yy2arr1004 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1007 := z.DecBinary()
	_ = yym1007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1008 := r.ReadMapStart()
			if yyl1008 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1008, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1008 := r.ReadArrayStart()
			if yyl1008 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1009Slc
	var yyhl1009 bool = l >= 0
	for yyj1009 := 0; ; yyj1009++ {
		if yyhl1009 {
			if yyj1009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1009 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1009Slc = r.DecodeBytes(yys1009Slc, true, true)
		yys1009 := string(yys1009Slc)
		if !yyhl1009 {
			r.ReadMapKVSeparator()
		}
		switch yys1009 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1010 := &x.Limits
				yyv1010.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1011 := &x.Requests
				yyv1011.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1009)
		} // end switch yys1009
	} // end for yyj1009
	if !yyhl1009 {
		r.ReadMapEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1012 int
	var yyb1012 bool
	var yyhl1012 bool = l >= 0
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1013 := &x.Limits
		yyv1013.CodecDecodeSelf(d)
	}
	yyj1012++
	if yyhl1012 {
		yyb1012 = yyj1012 > l
	} else {
		yyb1012 = r.CheckBreak()
	}
	if yyb1012 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1014 := &x.Requests
		yyv1014.CodecDecodeSelf(d)
	}
	for {
		yyj1012++
		if yyhl1012 {
			yyb1012 = yyj1012 > l
		} else {
			yyb1012 = r.CheckBreak()
		}
		if yyb1012 {
			break
		}
		if yyj1012 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1012-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1015 := z.EncBinary()
		_ = yym1015
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1016 := !z.EncBinary()
			yy2arr1016 := z.EncBasicHandle().StructToArray
			var yyfirst1016 bool
			var yyq1016 [17]bool
			_, _, _, _ = yysep1016, yyfirst1016, yyq1016, yy2arr1016
			const yyr1016 bool = false
			yyq1016[2] = len(x.Command) != 0
			yyq1016[3] = len(x.Args) != 0
			yyq1016[4] = x.WorkingDir != ""
			yyq1016[5] = len(x.Ports) != 0
			yyq1016[6] = len(x.Env) != 0
			yyq1016[7] = true
			yyq1016[8] = len(x.VolumeMounts) != 0
			yyq1016[9] = x.LivenessProbe != nil
			yyq1016[10] = x.ReadinessProbe != nil
			yyq1016[11] = x.Lifecycle != nil
			yyq1016[12] = x.TerminationMessagePath != ""
			yyq1016[14] = x.SecurityContext != nil
			yyq1016[15] = x.Stdin != false
			yyq1016[16] = x.TTY != false
			if yyr1016 || yy2arr1016 {
				r.EncodeArrayStart(17)
			} else {
				var yynn1016 int = 3
				for _, b := range yyq1016 {
					if b {
						yynn1016++
					}
				}
				r.EncodeMapStart(yynn1016)
			}
			if yyr1016 || yy2arr1016 {
				yym1018 := z.EncBinary()
				_ = yym1018
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst1016 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep1016 {
					r.EncodeMapKVSeparator()
				}
				yym1019 := z.EncBinary()
				_ = yym1019
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				if yyfirst1016 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1016 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				if yysep1016 {
					r.EncodeMapKVSeparator()
				}
				yym1022 := z.EncBinary()
				_ = yym1022
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1024 := z.EncBinary()
						_ = yym1024
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[2] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1025 := z.EncBinary()
						_ = yym1025
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1027 := z.EncBinary()
						_ = yym1027
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[3] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1028 := z.EncBinary()
						_ = yym1028
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[4] {
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1016[4] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					yym1031 := z.EncBinary()
					_ = yym1031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1033 := z.EncBinary()
						_ = yym1033
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[5] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1034 := z.EncBinary()
						_ = yym1034
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1036 := z.EncBinary()
						_ = yym1036
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[6] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1037 := z.EncBinary()
						_ = yym1037
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[7] {
					yy1039 := &x.Resources
					yy1039.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[7] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					yy1040 := &x.Resources
					yy1040.CodecEncodeSelf(e)
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1042 := z.EncBinary()
						_ = yym1042
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[8] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1043 := z.EncBinary()
						_ = yym1043
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[9] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[10] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[11] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[12] {
					yym1048 := z.EncBinary()
					_ = yym1048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1016[12] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					yym1049 := z.EncBinary()
					_ = yym1049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				if yyfirst1016 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1016 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				if yysep1016 {
					r.EncodeMapKVSeparator()
				}
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[14] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[15] {
					yym1053 := z.EncBinary()
					_ = yym1053
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1016[15] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					yym1054 := z.EncBinary()
					_ = yym1054
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				if yysep1016 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1016[16] {
					yym1056 := z.EncBinary()
					_ = yym1056
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1016[16] {
					if yyfirst1016 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1016 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					if yysep1016 {
						r.EncodeMapKVSeparator()
					}
					yym1057 := z.EncBinary()
					_ = yym1057
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1016 {
				if yyr1016 || yy2arr1016 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1058 := z.DecBinary()
	_ = yym1058
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1059 := r.ReadMapStart()
			if yyl1059 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1059, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1059 := r.ReadArrayStart()
			if yyl1059 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1059, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1060Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1060Slc
	var yyhl1060 bool = l >= 0
	for yyj1060 := 0; ; yyj1060++ {
		if yyhl1060 {
			if yyj1060 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1060 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1060Slc = r.DecodeBytes(yys1060Slc, true, true)
		yys1060 := string(yys1060Slc)
		if !yyhl1060 {
			r.ReadMapKVSeparator()
		}
		switch yys1060 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1063 := &x.Command
				yym1064 := z.DecBinary()
				_ = yym1064
				if false {
				} else {
					z.F.DecSliceStringX(yyv1063, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1065 := &x.Args
				yym1066 := z.DecBinary()
				_ = yym1066
				if false {
				} else {
					z.F.DecSliceStringX(yyv1065, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1068 := &x.Ports
				yym1069 := z.DecBinary()
				_ = yym1069
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1068), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1070 := &x.Env
				yym1071 := z.DecBinary()
				_ = yym1071
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1070), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1072 := &x.Resources
				yyv1072.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1073 := &x.VolumeMounts
				yym1074 := z.DecBinary()
				_ = yym1074
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1073), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1060)
		} // end switch yys1060
	} // end for yyj1060
	if !yyhl1060 {
		r.ReadMapEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1083 int
	var yyb1083 bool
	var yyhl1083 bool = l >= 0
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1086 := &x.Command
		yym1087 := z.DecBinary()
		_ = yym1087
		if false {
		} else {
			z.F.DecSliceStringX(yyv1086, false, d)
		}
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1088 := &x.Args
		yym1089 := z.DecBinary()
		_ = yym1089
		if false {
		} else {
			z.F.DecSliceStringX(yyv1088, false, d)
		}
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1091 := &x.Ports
		yym1092 := z.DecBinary()
		_ = yym1092
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1091), d)
		}
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1093 := &x.Env
		yym1094 := z.DecBinary()
		_ = yym1094
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1093), d)
		}
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1095 := &x.Resources
		yyv1095.CodecDecodeSelf(d)
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1096 := &x.VolumeMounts
		yym1097 := z.DecBinary()
		_ = yym1097
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1096), d)
		}
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1083++
		if yyhl1083 {
			yyb1083 = yyj1083 > l
		} else {
			yyb1083 = r.CheckBreak()
		}
		if yyb1083 {
			break
		}
		if yyj1083 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1083-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1106 := z.EncBinary()
		_ = yym1106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1107 := !z.EncBinary()
			yy2arr1107 := z.EncBasicHandle().StructToArray
			var yyfirst1107 bool
			var yyq1107 [3]bool
			_, _, _, _ = yysep1107, yyfirst1107, yyq1107, yy2arr1107
			const yyr1107 bool = false
			yyq1107[0] = x.Exec != nil
			yyq1107[1] = x.HTTPGet != nil
			yyq1107[2] = x.TCPSocket != nil
			if yyr1107 || yy2arr1107 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1107 int = 0
				for _, b := range yyq1107 {
					if b {
						yynn1107++
					}
				}
				r.EncodeMapStart(yynn1107)
			}
			if yyr1107 || yy2arr1107 {
				if yyq1107[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1107[0] {
					yyfirst1107 = true
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yysep1107 {
						r.EncodeMapKVSeparator()
					}
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1107 || yy2arr1107 {
				if yysep1107 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1107[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1107[1] {
					if yyfirst1107 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1107 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yysep1107 {
						r.EncodeMapKVSeparator()
					}
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1107 || yy2arr1107 {
				if yysep1107 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1107[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1107[2] {
					if yyfirst1107 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1107 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yysep1107 {
						r.EncodeMapKVSeparator()
					}
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1107 {
				if yyr1107 || yy2arr1107 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1111 := z.DecBinary()
	_ = yym1111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1112 := r.ReadMapStart()
			if yyl1112 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1112, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1112 := r.ReadArrayStart()
			if yyl1112 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1113Slc
	var yyhl1113 bool = l >= 0
	for yyj1113 := 0; ; yyj1113++ {
		if yyhl1113 {
			if yyj1113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1113 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1113Slc = r.DecodeBytes(yys1113Slc, true, true)
		yys1113 := string(yys1113Slc)
		if !yyhl1113 {
			r.ReadMapKVSeparator()
		}
		switch yys1113 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1113)
		} // end switch yys1113
	} // end for yyj1113
	if !yyhl1113 {
		r.ReadMapEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1117 int
	var yyb1117 bool
	var yyhl1117 bool = l >= 0
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1117++
		if yyhl1117 {
			yyb1117 = yyj1117 > l
		} else {
			yyb1117 = r.CheckBreak()
		}
		if yyb1117 {
			break
		}
		if yyj1117 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1117-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1121 := z.EncBinary()
		_ = yym1121
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1122 := !z.EncBinary()
			yy2arr1122 := z.EncBasicHandle().StructToArray
			var yyfirst1122 bool
			var yyq1122 [2]bool
			_, _, _, _ = yysep1122, yyfirst1122, yyq1122, yy2arr1122
			const yyr1122 bool = false
			yyq1122[0] = x.PostStart != nil
			yyq1122[1] = x.PreStop != nil
			if yyr1122 || yy2arr1122 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1122 int = 0
				for _, b := range yyq1122 {
					if b {
						yynn1122++
					}
				}
				r.EncodeMapStart(yynn1122)
			}
			if yyr1122 || yy2arr1122 {
				if yyq1122[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[0] {
					yyfirst1122 = true
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if yysep1122 {
						r.EncodeMapKVSeparator()
					}
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				if yysep1122 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1122[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[1] {
					if yyfirst1122 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1122 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if yysep1122 {
						r.EncodeMapKVSeparator()
					}
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1122 {
				if yyr1122 || yy2arr1122 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1125 := z.DecBinary()
	_ = yym1125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1126 := r.ReadMapStart()
			if yyl1126 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1126, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1126 := r.ReadArrayStart()
			if yyl1126 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1127Slc
	var yyhl1127 bool = l >= 0
	for yyj1127 := 0; ; yyj1127++ {
		if yyhl1127 {
			if yyj1127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1127 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1127Slc = r.DecodeBytes(yys1127Slc, true, true)
		yys1127 := string(yys1127Slc)
		if !yyhl1127 {
			r.ReadMapKVSeparator()
		}
		switch yys1127 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1127)
		} // end switch yys1127
	} // end for yyj1127
	if !yyhl1127 {
		r.ReadMapEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1130 int
	var yyb1130 bool
	var yyhl1130 bool = l >= 0
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1130++
		if yyhl1130 {
			yyb1130 = yyj1130 > l
		} else {
			yyb1130 = r.CheckBreak()
		}
		if yyb1130 {
			break
		}
		if yyj1130 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1130-1, "")
	}
	r.ReadArrayEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1133 := z.EncBinary()
	_ = yym1133
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1134 := z.DecBinary()
	_ = yym1134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1135 := z.EncBinary()
		_ = yym1135
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1136 := !z.EncBinary()
			yy2arr1136 := z.EncBasicHandle().StructToArray
			var yyfirst1136 bool
			var yyq1136 [2]bool
			_, _, _, _ = yysep1136, yyfirst1136, yyq1136, yy2arr1136
			const yyr1136 bool = false
			yyq1136[0] = x.Reason != ""
			yyq1136[1] = x.Message != ""
			if yyr1136 || yy2arr1136 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1136 int = 0
				for _, b := range yyq1136 {
					if b {
						yynn1136++
					}
				}
				r.EncodeMapStart(yynn1136)
			}
			if yyr1136 || yy2arr1136 {
				if yyq1136[0] {
					yym1138 := z.EncBinary()
					_ = yym1138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1136[0] {
					yyfirst1136 = true
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep1136 {
						r.EncodeMapKVSeparator()
					}
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1136 || yy2arr1136 {
				if yysep1136 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1136[1] {
					yym1141 := z.EncBinary()
					_ = yym1141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1136[1] {
					if yyfirst1136 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1136 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep1136 {
						r.EncodeMapKVSeparator()
					}
					yym1142 := z.EncBinary()
					_ = yym1142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1136 {
				if yyr1136 || yy2arr1136 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1143 := z.DecBinary()
	_ = yym1143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1144 := r.ReadMapStart()
			if yyl1144 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1144, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1144 := r.ReadArrayStart()
			if yyl1144 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1144, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1145Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1145Slc
	var yyhl1145 bool = l >= 0
	for yyj1145 := 0; ; yyj1145++ {
		if yyhl1145 {
			if yyj1145 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1145 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1145Slc = r.DecodeBytes(yys1145Slc, true, true)
		yys1145 := string(yys1145Slc)
		if !yyhl1145 {
			r.ReadMapKVSeparator()
		}
		switch yys1145 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1145)
		} // end switch yys1145
	} // end for yyj1145
	if !yyhl1145 {
		r.ReadMapEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1148 int
	var yyb1148 bool
	var yyhl1148 bool = l >= 0
	yyj1148++
	if yyhl1148 {
		yyb1148 = yyj1148 > l
	} else {
		yyb1148 = r.CheckBreak()
	}
	if yyb1148 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1148++
	if yyhl1148 {
		yyb1148 = yyj1148 > l
	} else {
		yyb1148 = r.CheckBreak()
	}
	if yyb1148 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1148++
		if yyhl1148 {
			yyb1148 = yyj1148 > l
		} else {
			yyb1148 = r.CheckBreak()
		}
		if yyb1148 {
			break
		}
		if yyj1148 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1148-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1151 := z.EncBinary()
		_ = yym1151
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1152 := !z.EncBinary()
			yy2arr1152 := z.EncBasicHandle().StructToArray
			var yyfirst1152 bool
			var yyq1152 [1]bool
			_, _, _, _ = yysep1152, yyfirst1152, yyq1152, yy2arr1152
			const yyr1152 bool = false
			yyq1152[0] = true
			if yyr1152 || yy2arr1152 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1152 int = 0
				for _, b := range yyq1152 {
					if b {
						yynn1152++
					}
				}
				r.EncodeMapStart(yynn1152)
			}
			if yyr1152 || yy2arr1152 {
				if yyq1152[0] {
					yy1154 := &x.StartedAt
					yym1155 := z.EncBinary()
					_ = yym1155
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1154) {
					} else if yym1155 {
						z.EncBinaryMarshal(yy1154)
					} else if !yym1155 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1154)
					} else {
						z.EncFallback(yy1154)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1152[0] {
					yyfirst1152 = true
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					if yysep1152 {
						r.EncodeMapKVSeparator()
					}
					yy1156 := &x.StartedAt
					yym1157 := z.EncBinary()
					_ = yym1157
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1156) {
					} else if yym1157 {
						z.EncBinaryMarshal(yy1156)
					} else if !yym1157 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1156)
					} else {
						z.EncFallback(yy1156)
					}
				}
			}
			if yysep1152 {
				if yyr1152 || yy2arr1152 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1158 := z.DecBinary()
	_ = yym1158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1159 := r.ReadMapStart()
			if yyl1159 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1159, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1159 := r.ReadArrayStart()
			if yyl1159 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1160Slc
	var yyhl1160 bool = l >= 0
	for yyj1160 := 0; ; yyj1160++ {
		if yyhl1160 {
			if yyj1160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1160 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1160Slc = r.DecodeBytes(yys1160Slc, true, true)
		yys1160 := string(yys1160Slc)
		if !yyhl1160 {
			r.ReadMapKVSeparator()
		}
		switch yys1160 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_util.Time{}
			} else {
				yyv1161 := &x.StartedAt
				yym1162 := z.DecBinary()
				_ = yym1162
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1161) {
				} else if yym1162 {
					z.DecBinaryUnmarshal(yyv1161)
				} else if !yym1162 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1161)
				} else {
					z.DecFallback(yyv1161, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1160)
		} // end switch yys1160
	} // end for yyj1160
	if !yyhl1160 {
		r.ReadMapEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1163 int
	var yyb1163 bool
	var yyhl1163 bool = l >= 0
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_util.Time{}
	} else {
		yyv1164 := &x.StartedAt
		yym1165 := z.DecBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1164) {
		} else if yym1165 {
			z.DecBinaryUnmarshal(yyv1164)
		} else if !yym1165 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1164)
		} else {
			z.DecFallback(yyv1164, false)
		}
	}
	for {
		yyj1163++
		if yyhl1163 {
			yyb1163 = yyj1163 > l
		} else {
			yyb1163 = r.CheckBreak()
		}
		if yyb1163 {
			break
		}
		if yyj1163 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1163-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1166 := z.EncBinary()
		_ = yym1166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1167 := !z.EncBinary()
			yy2arr1167 := z.EncBasicHandle().StructToArray
			var yyfirst1167 bool
			var yyq1167 [7]bool
			_, _, _, _ = yysep1167, yyfirst1167, yyq1167, yy2arr1167
			const yyr1167 bool = false
			yyq1167[1] = x.Signal != 0
			yyq1167[2] = x.Reason != ""
			yyq1167[3] = x.Message != ""
			yyq1167[4] = true
			yyq1167[5] = true
			yyq1167[6] = x.ContainerID != ""
			if yyr1167 || yy2arr1167 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1167 int = 1
				for _, b := range yyq1167 {
					if b {
						yynn1167++
					}
				}
				r.EncodeMapStart(yynn1167)
			}
			if yyr1167 || yy2arr1167 {
				yym1169 := z.EncBinary()
				_ = yym1169
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				yyfirst1167 = true
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				if yysep1167 {
					r.EncodeMapKVSeparator()
				}
				yym1170 := z.EncBinary()
				_ = yym1170
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1167 || yy2arr1167 {
				if yysep1167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1167[1] {
					yym1172 := z.EncBinary()
					_ = yym1172
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1167[1] {
					if yyfirst1167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					if yysep1167 {
						r.EncodeMapKVSeparator()
					}
					yym1173 := z.EncBinary()
					_ = yym1173
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1167 || yy2arr1167 {
				if yysep1167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1167[2] {
					yym1175 := z.EncBinary()
					_ = yym1175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1167[2] {
					if yyfirst1167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep1167 {
						r.EncodeMapKVSeparator()
					}
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1167 || yy2arr1167 {
				if yysep1167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1167[3] {
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1167[3] {
					if yyfirst1167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep1167 {
						r.EncodeMapKVSeparator()
					}
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1167 || yy2arr1167 {
				if yysep1167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1167[4] {
					yy1181 := &x.StartedAt
					yym1182 := z.EncBinary()
					_ = yym1182
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1181) {
					} else if yym1182 {
						z.EncBinaryMarshal(yy1181)
					} else if !yym1182 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1181)
					} else {
						z.EncFallback(yy1181)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1167[4] {
					if yyfirst1167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					if yysep1167 {
						r.EncodeMapKVSeparator()
					}
					yy1183 := &x.StartedAt
					yym1184 := z.EncBinary()
					_ = yym1184
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1183) {
					} else if yym1184 {
						z.EncBinaryMarshal(yy1183)
					} else if !yym1184 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1183)
					} else {
						z.EncFallback(yy1183)
					}
				}
			}
			if yyr1167 || yy2arr1167 {
				if yysep1167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1167[5] {
					yy1186 := &x.FinishedAt
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1186) {
					} else if yym1187 {
						z.EncBinaryMarshal(yy1186)
					} else if !yym1187 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1186)
					} else {
						z.EncFallback(yy1186)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1167[5] {
					if yyfirst1167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					if yysep1167 {
						r.EncodeMapKVSeparator()
					}
					yy1188 := &x.FinishedAt
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1188) {
					} else if yym1189 {
						z.EncBinaryMarshal(yy1188)
					} else if !yym1189 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1188)
					} else {
						z.EncFallback(yy1188)
					}
				}
			}
			if yyr1167 || yy2arr1167 {
				if yysep1167 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1167[6] {
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1167[6] {
					if yyfirst1167 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1167 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					if yysep1167 {
						r.EncodeMapKVSeparator()
					}
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1167 {
				if yyr1167 || yy2arr1167 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1193 := z.DecBinary()
	_ = yym1193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1194 := r.ReadMapStart()
			if yyl1194 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1194, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1194 := r.ReadArrayStart()
			if yyl1194 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1195Slc
	var yyhl1195 bool = l >= 0
	for yyj1195 := 0; ; yyj1195++ {
		if yyhl1195 {
			if yyj1195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1195 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1195Slc = r.DecodeBytes(yys1195Slc, true, true)
		yys1195 := string(yys1195Slc)
		if !yyhl1195 {
			r.ReadMapKVSeparator()
		}
		switch yys1195 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_util.Time{}
			} else {
				yyv1200 := &x.StartedAt
				yym1201 := z.DecBinary()
				_ = yym1201
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1200) {
				} else if yym1201 {
					z.DecBinaryUnmarshal(yyv1200)
				} else if !yym1201 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1200)
				} else {
					z.DecFallback(yyv1200, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_util.Time{}
			} else {
				yyv1202 := &x.FinishedAt
				yym1203 := z.DecBinary()
				_ = yym1203
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1202) {
				} else if yym1203 {
					z.DecBinaryUnmarshal(yyv1202)
				} else if !yym1203 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1202)
				} else {
					z.DecFallback(yyv1202, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1195)
		} // end switch yys1195
	} // end for yyj1195
	if !yyhl1195 {
		r.ReadMapEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1205 int
	var yyb1205 bool
	var yyhl1205 bool = l >= 0
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_util.Time{}
	} else {
		yyv1210 := &x.StartedAt
		yym1211 := z.DecBinary()
		_ = yym1211
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1210) {
		} else if yym1211 {
			z.DecBinaryUnmarshal(yyv1210)
		} else if !yym1211 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1210)
		} else {
			z.DecFallback(yyv1210, false)
		}
	}
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_util.Time{}
	} else {
		yyv1212 := &x.FinishedAt
		yym1213 := z.DecBinary()
		_ = yym1213
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1212) {
		} else if yym1213 {
			z.DecBinaryUnmarshal(yyv1212)
		} else if !yym1213 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1212)
		} else {
			z.DecFallback(yyv1212, false)
		}
	}
	yyj1205++
	if yyhl1205 {
		yyb1205 = yyj1205 > l
	} else {
		yyb1205 = r.CheckBreak()
	}
	if yyb1205 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1205++
		if yyhl1205 {
			yyb1205 = yyj1205 > l
		} else {
			yyb1205 = r.CheckBreak()
		}
		if yyb1205 {
			break
		}
		if yyj1205 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1205-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1215 := z.EncBinary()
		_ = yym1215
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1216 := !z.EncBinary()
			yy2arr1216 := z.EncBasicHandle().StructToArray
			var yyfirst1216 bool
			var yyq1216 [3]bool
			_, _, _, _ = yysep1216, yyfirst1216, yyq1216, yy2arr1216
			const yyr1216 bool = false
			yyq1216[0] = x.Waiting != nil
			yyq1216[1] = x.Running != nil
			yyq1216[2] = x.Terminated != nil
			if yyr1216 || yy2arr1216 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1216 int = 0
				for _, b := range yyq1216 {
					if b {
						yynn1216++
					}
				}
				r.EncodeMapStart(yynn1216)
			}
			if yyr1216 || yy2arr1216 {
				if yyq1216[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1216[0] {
					yyfirst1216 = true
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if yysep1216 {
						r.EncodeMapKVSeparator()
					}
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1216 || yy2arr1216 {
				if yysep1216 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1216[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1216[1] {
					if yyfirst1216 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1216 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if yysep1216 {
						r.EncodeMapKVSeparator()
					}
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1216 || yy2arr1216 {
				if yysep1216 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1216[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1216[2] {
					if yyfirst1216 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1216 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if yysep1216 {
						r.EncodeMapKVSeparator()
					}
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1216 {
				if yyr1216 || yy2arr1216 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1220 := z.DecBinary()
	_ = yym1220
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1221 := r.ReadMapStart()
			if yyl1221 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1221, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1221 := r.ReadArrayStart()
			if yyl1221 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1221, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1222Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1222Slc
	var yyhl1222 bool = l >= 0
	for yyj1222 := 0; ; yyj1222++ {
		if yyhl1222 {
			if yyj1222 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1222 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1222Slc = r.DecodeBytes(yys1222Slc, true, true)
		yys1222 := string(yys1222Slc)
		if !yyhl1222 {
			r.ReadMapKVSeparator()
		}
		switch yys1222 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1222)
		} // end switch yys1222
	} // end for yyj1222
	if !yyhl1222 {
		r.ReadMapEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1226 int
	var yyb1226 bool
	var yyhl1226 bool = l >= 0
	yyj1226++
	if yyhl1226 {
		yyb1226 = yyj1226 > l
	} else {
		yyb1226 = r.CheckBreak()
	}
	if yyb1226 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1226++
	if yyhl1226 {
		yyb1226 = yyj1226 > l
	} else {
		yyb1226 = r.CheckBreak()
	}
	if yyb1226 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1226++
	if yyhl1226 {
		yyb1226 = yyj1226 > l
	} else {
		yyb1226 = r.CheckBreak()
	}
	if yyb1226 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1226++
		if yyhl1226 {
			yyb1226 = yyj1226 > l
		} else {
			yyb1226 = r.CheckBreak()
		}
		if yyb1226 {
			break
		}
		if yyj1226 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1226-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1230 := z.EncBinary()
		_ = yym1230
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1231 := !z.EncBinary()
			yy2arr1231 := z.EncBasicHandle().StructToArray
			var yyfirst1231 bool
			var yyq1231 [8]bool
			_, _, _, _ = yysep1231, yyfirst1231, yyq1231, yy2arr1231
			const yyr1231 bool = false
			yyq1231[1] = true
			yyq1231[2] = true
			yyq1231[7] = x.ContainerID != ""
			if yyr1231 || yy2arr1231 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1231 int = 5
				for _, b := range yyq1231 {
					if b {
						yynn1231++
					}
				}
				r.EncodeMapStart(yynn1231)
			}
			if yyr1231 || yy2arr1231 {
				yym1233 := z.EncBinary()
				_ = yym1233
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst1231 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep1231 {
					r.EncodeMapKVSeparator()
				}
				yym1234 := z.EncBinary()
				_ = yym1234
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1231 || yy2arr1231 {
				if yysep1231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1231[1] {
					yy1236 := &x.State
					yy1236.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1231[1] {
					if yyfirst1231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					if yysep1231 {
						r.EncodeMapKVSeparator()
					}
					yy1237 := &x.State
					yy1237.CodecEncodeSelf(e)
				}
			}
			if yyr1231 || yy2arr1231 {
				if yysep1231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1231[2] {
					yy1239 := &x.LastTerminationState
					yy1239.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1231[2] {
					if yyfirst1231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					if yysep1231 {
						r.EncodeMapKVSeparator()
					}
					yy1240 := &x.LastTerminationState
					yy1240.CodecEncodeSelf(e)
				}
			}
			if yyr1231 || yy2arr1231 {
				if yysep1231 {
					r.EncodeArrayEntrySeparator()
				}
				yym1242 := z.EncBinary()
				_ = yym1242
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				if yyfirst1231 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1231 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				if yysep1231 {
					r.EncodeMapKVSeparator()
				}
				yym1243 := z.EncBinary()
				_ = yym1243
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1231 || yy2arr1231 {
				if yysep1231 {
					r.EncodeArrayEntrySeparator()
				}
				yym1245 := z.EncBinary()
				_ = yym1245
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				if yyfirst1231 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1231 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				if yysep1231 {
					r.EncodeMapKVSeparator()
				}
				yym1246 := z.EncBinary()
				_ = yym1246
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1231 || yy2arr1231 {
				if yysep1231 {
					r.EncodeArrayEntrySeparator()
				}
				yym1248 := z.EncBinary()
				_ = yym1248
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				if yyfirst1231 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1231 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				if yysep1231 {
					r.EncodeMapKVSeparator()
				}
				yym1249 := z.EncBinary()
				_ = yym1249
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1231 || yy2arr1231 {
				if yysep1231 {
					r.EncodeArrayEntrySeparator()
				}
				yym1251 := z.EncBinary()
				_ = yym1251
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				if yyfirst1231 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1231 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				if yysep1231 {
					r.EncodeMapKVSeparator()
				}
				yym1252 := z.EncBinary()
				_ = yym1252
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1231 || yy2arr1231 {
				if yysep1231 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1231[7] {
					yym1254 := z.EncBinary()
					_ = yym1254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1231[7] {
					if yyfirst1231 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1231 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					if yysep1231 {
						r.EncodeMapKVSeparator()
					}
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1231 {
				if yyr1231 || yy2arr1231 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1256 := z.DecBinary()
	_ = yym1256
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1257 := r.ReadMapStart()
			if yyl1257 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1257, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1257 := r.ReadArrayStart()
			if yyl1257 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1257, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1258Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1258Slc
	var yyhl1258 bool = l >= 0
	for yyj1258 := 0; ; yyj1258++ {
		if yyhl1258 {
			if yyj1258 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1258 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1258Slc = r.DecodeBytes(yys1258Slc, true, true)
		yys1258 := string(yys1258Slc)
		if !yyhl1258 {
			r.ReadMapKVSeparator()
		}
		switch yys1258 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1260 := &x.State
				yyv1260.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1261 := &x.LastTerminationState
				yyv1261.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1258)
		} // end switch yys1258
	} // end for yyj1258
	if !yyhl1258 {
		r.ReadMapEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1267 int
	var yyb1267 bool
	var yyhl1267 bool = l >= 0
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1269 := &x.State
		yyv1269.CodecDecodeSelf(d)
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1270 := &x.LastTerminationState
		yyv1270.CodecDecodeSelf(d)
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1267++
		if yyhl1267 {
			yyb1267 = yyj1267 > l
		} else {
			yyb1267 = r.CheckBreak()
		}
		if yyb1267 {
			break
		}
		if yyj1267 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1267-1, "")
	}
	r.ReadArrayEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1276 := z.EncBinary()
	_ = yym1276
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1277 := z.DecBinary()
	_ = yym1277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1278 := z.EncBinary()
	_ = yym1278
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1279 := z.DecBinary()
	_ = yym1279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1280 := z.EncBinary()
		_ = yym1280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1281 := !z.EncBinary()
			yy2arr1281 := z.EncBasicHandle().StructToArray
			var yyfirst1281 bool
			var yyq1281 [2]bool
			_, _, _, _ = yysep1281, yyfirst1281, yyq1281, yy2arr1281
			const yyr1281 bool = false
			if yyr1281 || yy2arr1281 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1281 int = 2
				for _, b := range yyq1281 {
					if b {
						yynn1281++
					}
				}
				r.EncodeMapStart(yynn1281)
			}
			if yyr1281 || yy2arr1281 {
				x.Type.CodecEncodeSelf(e)
			} else {
				yyfirst1281 = true
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				if yysep1281 {
					r.EncodeMapKVSeparator()
				}
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1281 || yy2arr1281 {
				if yysep1281 {
					r.EncodeArrayEntrySeparator()
				}
				x.Status.CodecEncodeSelf(e)
			} else {
				if yyfirst1281 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1281 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				if yysep1281 {
					r.EncodeMapKVSeparator()
				}
				x.Status.CodecEncodeSelf(e)
			}
			if yysep1281 {
				if yyr1281 || yy2arr1281 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1284 := z.DecBinary()
	_ = yym1284
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1285 := r.ReadMapStart()
			if yyl1285 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1285, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1285 := r.ReadArrayStart()
			if yyl1285 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1285, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1286Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1286Slc
	var yyhl1286 bool = l >= 0
	for yyj1286 := 0; ; yyj1286++ {
		if yyhl1286 {
			if yyj1286 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1286 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1286Slc = r.DecodeBytes(yys1286Slc, true, true)
		yys1286 := string(yys1286Slc)
		if !yyhl1286 {
			r.ReadMapKVSeparator()
		}
		switch yys1286 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1286)
		} // end switch yys1286
	} // end for yyj1286
	if !yyhl1286 {
		r.ReadMapEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1289 int
	var yyb1289 bool
	var yyhl1289 bool = l >= 0
	yyj1289++
	if yyhl1289 {
		yyb1289 = yyj1289 > l
	} else {
		yyb1289 = r.CheckBreak()
	}
	if yyb1289 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1289++
	if yyhl1289 {
		yyb1289 = yyj1289 > l
	} else {
		yyb1289 = r.CheckBreak()
	}
	if yyb1289 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	for {
		yyj1289++
		if yyhl1289 {
			yyb1289 = yyj1289 > l
		} else {
			yyb1289 = r.CheckBreak()
		}
		if yyb1289 {
			break
		}
		if yyj1289 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1289-1, "")
	}
	r.ReadArrayEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1292 := z.EncBinary()
	_ = yym1292
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1294 := z.EncBinary()
		_ = yym1294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1295 := !z.EncBinary()
			yy2arr1295 := z.EncBasicHandle().StructToArray
			var yyfirst1295 bool
			var yyq1295 [4]bool
			_, _, _, _ = yysep1295, yyfirst1295, yyq1295, yy2arr1295
			const yyr1295 bool = false
			yyq1295[0] = x.Kind != ""
			yyq1295[1] = x.APIVersion != ""
			yyq1295[2] = true
			if yyr1295 || yy2arr1295 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1295 int = 1
				for _, b := range yyq1295 {
					if b {
						yynn1295++
					}
				}
				r.EncodeMapStart(yynn1295)
			}
			if yyr1295 || yy2arr1295 {
				if yyq1295[0] {
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1295[0] {
					yyfirst1295 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1295 {
						r.EncodeMapKVSeparator()
					}
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				if yysep1295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1295[1] {
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1295[1] {
					if yyfirst1295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1295 {
						r.EncodeMapKVSeparator()
					}
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				if yysep1295 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1295[2] {
					yy1303 := &x.ListMeta
					yy1303.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[2] {
					if yyfirst1295 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1295 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1295 {
						r.EncodeMapKVSeparator()
					}
					yy1304 := &x.ListMeta
					yy1304.CodecEncodeSelf(e)
				}
			}
			if yyr1295 || yy2arr1295 {
				if yysep1295 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1306 := z.EncBinary()
					_ = yym1306
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				if yyfirst1295 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1295 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1295 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1307 := z.EncBinary()
					_ = yym1307
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1295 {
				if yyr1295 || yy2arr1295 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1308 := z.DecBinary()
	_ = yym1308
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1309 := r.ReadMapStart()
			if yyl1309 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1309, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1309 := r.ReadArrayStart()
			if yyl1309 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1309, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1310Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1310Slc
	var yyhl1310 bool = l >= 0
	for yyj1310 := 0; ; yyj1310++ {
		if yyhl1310 {
			if yyj1310 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1310 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1310Slc = r.DecodeBytes(yys1310Slc, true, true)
		yys1310 := string(yys1310Slc)
		if !yyhl1310 {
			r.ReadMapKVSeparator()
		}
		switch yys1310 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1313 := &x.ListMeta
				yyv1313.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1314 := &x.Items
				yym1315 := z.DecBinary()
				_ = yym1315
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1314), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1310)
		} // end switch yys1310
	} // end for yyj1310
	if !yyhl1310 {
		r.ReadMapEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1316 int
	var yyb1316 bool
	var yyhl1316 bool = l >= 0
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1319 := &x.ListMeta
		yyv1319.CodecDecodeSelf(d)
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1320 := &x.Items
		yym1321 := z.DecBinary()
		_ = yym1321
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1320), d)
		}
	}
	for {
		yyj1316++
		if yyhl1316 {
			yyb1316 = yyj1316 > l
		} else {
			yyb1316 = r.CheckBreak()
		}
		if yyb1316 {
			break
		}
		if yyj1316 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1316-1, "")
	}
	r.ReadArrayEnd()
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1322 := z.EncBinary()
	_ = yym1322
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1323 := z.DecBinary()
	_ = yym1323
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1324 := z.EncBinary()
		_ = yym1324
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1325 := !z.EncBinary()
			yy2arr1325 := z.EncBasicHandle().StructToArray
			var yyfirst1325 bool
			var yyq1325 [11]bool
			_, _, _, _ = yysep1325, yyfirst1325, yyq1325, yy2arr1325
			const yyr1325 bool = false
			yyq1325[2] = x.RestartPolicy != ""
			yyq1325[3] = x.TerminationGracePeriodSeconds != nil
			yyq1325[4] = x.ActiveDeadlineSeconds != nil
			yyq1325[5] = x.DNSPolicy != ""
			yyq1325[6] = len(x.NodeSelector) != 0
			yyq1325[8] = x.NodeName != ""
			yyq1325[9] = x.HostNetwork != false
			yyq1325[10] = len(x.ImagePullSecrets) != 0
			if yyr1325 || yy2arr1325 {
				r.EncodeArrayStart(11)
			} else {
				var yynn1325 int = 3
				for _, b := range yyq1325 {
					if b {
						yynn1325++
					}
				}
				r.EncodeMapStart(yynn1325)
			}
			if yyr1325 || yy2arr1325 {
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				yyfirst1325 = true
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				if yysep1325 {
					r.EncodeMapKVSeparator()
				}
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				if yysep1325 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				if yyfirst1325 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1325 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if yysep1325 {
					r.EncodeMapKVSeparator()
				}
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1331 := z.EncBinary()
					_ = yym1331
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				if yysep1325 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1325[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1325[2] {
					if yyfirst1325 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1325 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					if yysep1325 {
						r.EncodeMapKVSeparator()
					}
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1325 || yy2arr1325 {
				if yysep1325 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1325[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1334 := *x.TerminationGracePeriodSeconds
						yym1335 := z.EncBinary()
						_ = yym1335
						if false {
						} else {
							r.EncodeInt(int64(yy1334))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1325[3] {
					if yyfirst1325 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1325 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if yysep1325 {
						r.EncodeMapKVSeparator()
					}
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1336 := *x.TerminationGracePeriodSeconds
						yym1337 := z.EncBinary()
						_ = yym1337
						if false {
						} else {
							r.EncodeInt(int64(yy1336))
						}
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				if yysep1325 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1325[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1339 := *x.ActiveDeadlineSeconds
						yym1340 := z.EncBinary()
						_ = yym1340
						if false {
						} else {
							r.EncodeInt(int64(yy1339))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1325[4] {
					if yyfirst1325 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1325 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if yysep1325 {
						r.EncodeMapKVSeparator()
					}
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1341 := *x.ActiveDeadlineSeconds
						yym1342 := z.EncBinary()
						_ = yym1342
						if false {
						} else {
							r.EncodeInt(int64(yy1341))
						}
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				if yysep1325 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1325[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1325[5] {
					if yyfirst1325 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1325 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					if yysep1325 {
						r.EncodeMapKVSeparator()
					}
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1325 || yy2arr1325 {
				if yysep1325 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1325[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1345 := z.EncBinary()
						_ = yym1345
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1325[6] {
					if yyfirst1325 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1325 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if yysep1325 {
						r.EncodeMapKVSeparator()
					}
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1346 := z.EncBinary()
						_ = yym1346
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				if yysep1325 {
					r.EncodeArrayEntrySeparator()
				}
				yym1348 := z.EncBinary()
				_ = yym1348
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				if yyfirst1325 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1325 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				if yysep1325 {
					r.EncodeMapKVSeparator()
				}
				yym1349 := z.EncBinary()
				_ = yym1349
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1325 || yy2arr1325 {
				if yysep1325 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1325[8] {
					yym1351 := z.EncBinary()
					_ = yym1351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1325[8] {
					if yyfirst1325 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1325 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					if yysep1325 {
						r.EncodeMapKVSeparator()
					}
					yym1352 := z.EncBinary()
					_ = yym1352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				if yysep1325 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1325[9] {
					yym1354 := z.EncBinary()
					_ = yym1354
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1325[9] {
					if yyfirst1325 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1325 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					if yysep1325 {
						r.EncodeMapKVSeparator()
					}
					yym1355 := z.EncBinary()
					_ = yym1355
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1325 || yy2arr1325 {
				if yysep1325 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1325[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1357 := z.EncBinary()
						_ = yym1357
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1325[10] {
					if yyfirst1325 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1325 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if yysep1325 {
						r.EncodeMapKVSeparator()
					}
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1358 := z.EncBinary()
						_ = yym1358
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1325 {
				if yyr1325 || yy2arr1325 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1359 := z.DecBinary()
	_ = yym1359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1360 := r.ReadMapStart()
			if yyl1360 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1360, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1360 := r.ReadArrayStart()
			if yyl1360 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1360, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1361Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1361Slc
	var yyhl1361 bool = l >= 0
	for yyj1361 := 0; ; yyj1361++ {
		if yyhl1361 {
			if yyj1361 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1361 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1361Slc = r.DecodeBytes(yys1361Slc, true, true)
		yys1361 := string(yys1361Slc)
		if !yyhl1361 {
			r.ReadMapKVSeparator()
		}
		switch yys1361 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1362 := &x.Volumes
				yym1363 := z.DecBinary()
				_ = yym1363
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1362), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1364 := &x.Containers
				yym1365 := z.DecBinary()
				_ = yym1365
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1364), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1368 := z.DecBinary()
				_ = yym1368
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1370 := z.DecBinary()
				_ = yym1370
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1372 := &x.NodeSelector
				yym1373 := z.DecBinary()
				_ = yym1373
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1372, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1377 := &x.ImagePullSecrets
				yym1378 := z.DecBinary()
				_ = yym1378
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1377), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1361)
		} // end switch yys1361
	} // end for yyj1361
	if !yyhl1361 {
		r.ReadMapEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1379 int
	var yyb1379 bool
	var yyhl1379 bool = l >= 0
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1380 := &x.Volumes
		yym1381 := z.DecBinary()
		_ = yym1381
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1380), d)
		}
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1382 := &x.Containers
		yym1383 := z.DecBinary()
		_ = yym1383
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1382), d)
		}
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1386 := z.DecBinary()
		_ = yym1386
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1388 := z.DecBinary()
		_ = yym1388
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1390 := &x.NodeSelector
		yym1391 := z.DecBinary()
		_ = yym1391
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1390, false, d)
		}
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1395 := &x.ImagePullSecrets
		yym1396 := z.DecBinary()
		_ = yym1396
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1395), d)
		}
	}
	for {
		yyj1379++
		if yyhl1379 {
			yyb1379 = yyj1379 > l
		} else {
			yyb1379 = r.CheckBreak()
		}
		if yyb1379 {
			break
		}
		if yyj1379 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1379-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1397 := z.EncBinary()
		_ = yym1397
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1398 := !z.EncBinary()
			yy2arr1398 := z.EncBasicHandle().StructToArray
			var yyfirst1398 bool
			var yyq1398 [8]bool
			_, _, _, _ = yysep1398, yyfirst1398, yyq1398, yy2arr1398
			const yyr1398 bool = false
			yyq1398[0] = x.Phase != ""
			yyq1398[1] = len(x.Conditions) != 0
			yyq1398[2] = x.Message != ""
			yyq1398[3] = x.Reason != ""
			yyq1398[4] = x.HostIP != ""
			yyq1398[5] = x.PodIP != ""
			yyq1398[6] = x.StartTime != nil
			yyq1398[7] = len(x.ContainerStatuses) != 0
			if yyr1398 || yy2arr1398 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1398 int = 0
				for _, b := range yyq1398 {
					if b {
						yynn1398++
					}
				}
				r.EncodeMapStart(yynn1398)
			}
			if yyr1398 || yy2arr1398 {
				if yyq1398[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1398[0] {
					yyfirst1398 = true
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					if yysep1398 {
						r.EncodeMapKVSeparator()
					}
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1398 || yy2arr1398 {
				if yysep1398 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1398[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1401 := z.EncBinary()
						_ = yym1401
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1398[1] {
					if yyfirst1398 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1398 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if yysep1398 {
						r.EncodeMapKVSeparator()
					}
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1402 := z.EncBinary()
						_ = yym1402
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1398 || yy2arr1398 {
				if yysep1398 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1398[2] {
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1398[2] {
					if yyfirst1398 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1398 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep1398 {
						r.EncodeMapKVSeparator()
					}
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1398 || yy2arr1398 {
				if yysep1398 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1398[3] {
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1398[3] {
					if yyfirst1398 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1398 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep1398 {
						r.EncodeMapKVSeparator()
					}
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1398 || yy2arr1398 {
				if yysep1398 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1398[4] {
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1398[4] {
					if yyfirst1398 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1398 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					if yysep1398 {
						r.EncodeMapKVSeparator()
					}
					yym1411 := z.EncBinary()
					_ = yym1411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1398 || yy2arr1398 {
				if yysep1398 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1398[5] {
					yym1413 := z.EncBinary()
					_ = yym1413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1398[5] {
					if yyfirst1398 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1398 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					if yysep1398 {
						r.EncodeMapKVSeparator()
					}
					yym1414 := z.EncBinary()
					_ = yym1414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1398 || yy2arr1398 {
				if yysep1398 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1398[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1416 := z.EncBinary()
						_ = yym1416
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1416 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1416 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1398[6] {
					if yyfirst1398 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1398 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if yysep1398 {
						r.EncodeMapKVSeparator()
					}
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1417 := z.EncBinary()
						_ = yym1417
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1417 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1417 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1398 || yy2arr1398 {
				if yysep1398 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1398[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1419 := z.EncBinary()
						_ = yym1419
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1398[7] {
					if yyfirst1398 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1398 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if yysep1398 {
						r.EncodeMapKVSeparator()
					}
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1420 := z.EncBinary()
						_ = yym1420
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1398 {
				if yyr1398 || yy2arr1398 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1421 := z.DecBinary()
	_ = yym1421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1422 := r.ReadMapStart()
			if yyl1422 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1422, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1422 := r.ReadArrayStart()
			if yyl1422 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1423Slc
	var yyhl1423 bool = l >= 0
	for yyj1423 := 0; ; yyj1423++ {
		if yyhl1423 {
			if yyj1423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1423 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1423Slc = r.DecodeBytes(yys1423Slc, true, true)
		yys1423 := string(yys1423Slc)
		if !yyhl1423 {
			r.ReadMapKVSeparator()
		}
		switch yys1423 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1425 := &x.Conditions
				yym1426 := z.DecBinary()
				_ = yym1426
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1425), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_util.Time)
				}
				yym1432 := z.DecBinary()
				_ = yym1432
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1432 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1432 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1433 := &x.ContainerStatuses
				yym1434 := z.DecBinary()
				_ = yym1434
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1433), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1423)
		} // end switch yys1423
	} // end for yyj1423
	if !yyhl1423 {
		r.ReadMapEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1435 int
	var yyb1435 bool
	var yyhl1435 bool = l >= 0
	yyj1435++
	if yyhl1435 {
		yyb1435 = yyj1435 > l
	} else {
		yyb1435 = r.CheckBreak()
	}
	if yyb1435 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1435++
	if yyhl1435 {
		yyb1435 = yyj1435 > l
	} else {
		yyb1435 = r.CheckBreak()
	}
	if yyb1435 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1437 := &x.Conditions
		yym1438 := z.DecBinary()
		_ = yym1438
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1437), d)
		}
	}
	yyj1435++
	if yyhl1435 {
		yyb1435 = yyj1435 > l
	} else {
		yyb1435 = r.CheckBreak()
	}
	if yyb1435 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1435++
	if yyhl1435 {
		yyb1435 = yyj1435 > l
	} else {
		yyb1435 = r.CheckBreak()
	}
	if yyb1435 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1435++
	if yyhl1435 {
		yyb1435 = yyj1435 > l
	} else {
		yyb1435 = r.CheckBreak()
	}
	if yyb1435 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1435++
	if yyhl1435 {
		yyb1435 = yyj1435 > l
	} else {
		yyb1435 = r.CheckBreak()
	}
	if yyb1435 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1435++
	if yyhl1435 {
		yyb1435 = yyj1435 > l
	} else {
		yyb1435 = r.CheckBreak()
	}
	if yyb1435 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_util.Time)
		}
		yym1444 := z.DecBinary()
		_ = yym1444
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1444 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1444 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1435++
	if yyhl1435 {
		yyb1435 = yyj1435 > l
	} else {
		yyb1435 = r.CheckBreak()
	}
	if yyb1435 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1445 := &x.ContainerStatuses
		yym1446 := z.DecBinary()
		_ = yym1446
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1445), d)
		}
	}
	for {
		yyj1435++
		if yyhl1435 {
			yyb1435 = yyj1435 > l
		} else {
			yyb1435 = r.CheckBreak()
		}
		if yyb1435 {
			break
		}
		if yyj1435 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1435-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1447 := z.EncBinary()
		_ = yym1447
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1448 := !z.EncBinary()
			yy2arr1448 := z.EncBasicHandle().StructToArray
			var yyfirst1448 bool
			var yyq1448 [4]bool
			_, _, _, _ = yysep1448, yyfirst1448, yyq1448, yy2arr1448
			const yyr1448 bool = false
			yyq1448[0] = x.Kind != ""
			yyq1448[1] = x.APIVersion != ""
			yyq1448[2] = true
			yyq1448[3] = true
			if yyr1448 || yy2arr1448 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1448 int = 0
				for _, b := range yyq1448 {
					if b {
						yynn1448++
					}
				}
				r.EncodeMapStart(yynn1448)
			}
			if yyr1448 || yy2arr1448 {
				if yyq1448[0] {
					yym1450 := z.EncBinary()
					_ = yym1450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1448[0] {
					yyfirst1448 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1448 {
						r.EncodeMapKVSeparator()
					}
					yym1451 := z.EncBinary()
					_ = yym1451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1448 || yy2arr1448 {
				if yysep1448 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1448[1] {
					yym1453 := z.EncBinary()
					_ = yym1453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1448[1] {
					if yyfirst1448 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1448 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1448 {
						r.EncodeMapKVSeparator()
					}
					yym1454 := z.EncBinary()
					_ = yym1454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1448 || yy2arr1448 {
				if yysep1448 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1448[2] {
					yy1456 := &x.ObjectMeta
					yy1456.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1448[2] {
					if yyfirst1448 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1448 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1448 {
						r.EncodeMapKVSeparator()
					}
					yy1457 := &x.ObjectMeta
					yy1457.CodecEncodeSelf(e)
				}
			}
			if yyr1448 || yy2arr1448 {
				if yysep1448 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1448[3] {
					yy1459 := &x.Status
					yy1459.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1448[3] {
					if yyfirst1448 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1448 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep1448 {
						r.EncodeMapKVSeparator()
					}
					yy1460 := &x.Status
					yy1460.CodecEncodeSelf(e)
				}
			}
			if yysep1448 {
				if yyr1448 || yy2arr1448 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1461 := z.DecBinary()
	_ = yym1461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1462 := r.ReadMapStart()
			if yyl1462 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1462, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1462 := r.ReadArrayStart()
			if yyl1462 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1463Slc
	var yyhl1463 bool = l >= 0
	for yyj1463 := 0; ; yyj1463++ {
		if yyhl1463 {
			if yyj1463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1463 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1463Slc = r.DecodeBytes(yys1463Slc, true, true)
		yys1463 := string(yys1463Slc)
		if !yyhl1463 {
			r.ReadMapKVSeparator()
		}
		switch yys1463 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1466 := &x.ObjectMeta
				yyv1466.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1467 := &x.Status
				yyv1467.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1463)
		} // end switch yys1463
	} // end for yyj1463
	if !yyhl1463 {
		r.ReadMapEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1468 int
	var yyb1468 bool
	var yyhl1468 bool = l >= 0
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1471 := &x.ObjectMeta
		yyv1471.CodecDecodeSelf(d)
	}
	yyj1468++
	if yyhl1468 {
		yyb1468 = yyj1468 > l
	} else {
		yyb1468 = r.CheckBreak()
	}
	if yyb1468 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1472 := &x.Status
		yyv1472.CodecDecodeSelf(d)
	}
	for {
		yyj1468++
		if yyhl1468 {
			yyb1468 = yyj1468 > l
		} else {
			yyb1468 = r.CheckBreak()
		}
		if yyb1468 {
			break
		}
		if yyj1468 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1468-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1473 := z.EncBinary()
		_ = yym1473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1474 := !z.EncBinary()
			yy2arr1474 := z.EncBasicHandle().StructToArray
			var yyfirst1474 bool
			var yyq1474 [5]bool
			_, _, _, _ = yysep1474, yyfirst1474, yyq1474, yy2arr1474
			const yyr1474 bool = false
			yyq1474[0] = x.Kind != ""
			yyq1474[1] = x.APIVersion != ""
			yyq1474[2] = true
			yyq1474[3] = true
			yyq1474[4] = true
			if yyr1474 || yy2arr1474 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1474 int = 0
				for _, b := range yyq1474 {
					if b {
						yynn1474++
					}
				}
				r.EncodeMapStart(yynn1474)
			}
			if yyr1474 || yy2arr1474 {
				if yyq1474[0] {
					yym1476 := z.EncBinary()
					_ = yym1476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1474[0] {
					yyfirst1474 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1474 {
						r.EncodeMapKVSeparator()
					}
					yym1477 := z.EncBinary()
					_ = yym1477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1474 || yy2arr1474 {
				if yysep1474 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1474[1] {
					yym1479 := z.EncBinary()
					_ = yym1479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1474[1] {
					if yyfirst1474 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1474 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1474 {
						r.EncodeMapKVSeparator()
					}
					yym1480 := z.EncBinary()
					_ = yym1480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1474 || yy2arr1474 {
				if yysep1474 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1474[2] {
					yy1482 := &x.ObjectMeta
					yy1482.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1474[2] {
					if yyfirst1474 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1474 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1474 {
						r.EncodeMapKVSeparator()
					}
					yy1483 := &x.ObjectMeta
					yy1483.CodecEncodeSelf(e)
				}
			}
			if yyr1474 || yy2arr1474 {
				if yysep1474 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1474[3] {
					yy1485 := &x.Spec
					yy1485.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1474[3] {
					if yyfirst1474 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1474 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep1474 {
						r.EncodeMapKVSeparator()
					}
					yy1486 := &x.Spec
					yy1486.CodecEncodeSelf(e)
				}
			}
			if yyr1474 || yy2arr1474 {
				if yysep1474 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1474[4] {
					yy1488 := &x.Status
					yy1488.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1474[4] {
					if yyfirst1474 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1474 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep1474 {
						r.EncodeMapKVSeparator()
					}
					yy1489 := &x.Status
					yy1489.CodecEncodeSelf(e)
				}
			}
			if yysep1474 {
				if yyr1474 || yy2arr1474 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1490 := z.DecBinary()
	_ = yym1490
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1491 := r.ReadMapStart()
			if yyl1491 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1491, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1491 := r.ReadArrayStart()
			if yyl1491 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1491, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1492Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1492Slc
	var yyhl1492 bool = l >= 0
	for yyj1492 := 0; ; yyj1492++ {
		if yyhl1492 {
			if yyj1492 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1492 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1492Slc = r.DecodeBytes(yys1492Slc, true, true)
		yys1492 := string(yys1492Slc)
		if !yyhl1492 {
			r.ReadMapKVSeparator()
		}
		switch yys1492 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1495 := &x.ObjectMeta
				yyv1495.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1496 := &x.Spec
				yyv1496.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1497 := &x.Status
				yyv1497.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1492)
		} // end switch yys1492
	} // end for yyj1492
	if !yyhl1492 {
		r.ReadMapEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1498 int
	var yyb1498 bool
	var yyhl1498 bool = l >= 0
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1501 := &x.ObjectMeta
		yyv1501.CodecDecodeSelf(d)
	}
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1502 := &x.Spec
		yyv1502.CodecDecodeSelf(d)
	}
	yyj1498++
	if yyhl1498 {
		yyb1498 = yyj1498 > l
	} else {
		yyb1498 = r.CheckBreak()
	}
	if yyb1498 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1503 := &x.Status
		yyv1503.CodecDecodeSelf(d)
	}
	for {
		yyj1498++
		if yyhl1498 {
			yyb1498 = yyj1498 > l
		} else {
			yyb1498 = r.CheckBreak()
		}
		if yyb1498 {
			break
		}
		if yyj1498 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1498-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1504 := z.EncBinary()
		_ = yym1504
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1505 := !z.EncBinary()
			yy2arr1505 := z.EncBasicHandle().StructToArray
			var yyfirst1505 bool
			var yyq1505 [2]bool
			_, _, _, _ = yysep1505, yyfirst1505, yyq1505, yy2arr1505
			const yyr1505 bool = false
			yyq1505[0] = true
			yyq1505[1] = true
			if yyr1505 || yy2arr1505 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1505 int = 0
				for _, b := range yyq1505 {
					if b {
						yynn1505++
					}
				}
				r.EncodeMapStart(yynn1505)
			}
			if yyr1505 || yy2arr1505 {
				if yyq1505[0] {
					yy1507 := &x.ObjectMeta
					yy1507.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1505[0] {
					yyfirst1505 = true
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1505 {
						r.EncodeMapKVSeparator()
					}
					yy1508 := &x.ObjectMeta
					yy1508.CodecEncodeSelf(e)
				}
			}
			if yyr1505 || yy2arr1505 {
				if yysep1505 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1505[1] {
					yy1510 := &x.Spec
					yy1510.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1505[1] {
					if yyfirst1505 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1505 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep1505 {
						r.EncodeMapKVSeparator()
					}
					yy1511 := &x.Spec
					yy1511.CodecEncodeSelf(e)
				}
			}
			if yysep1505 {
				if yyr1505 || yy2arr1505 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1512 := z.DecBinary()
	_ = yym1512
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1513 := r.ReadMapStart()
			if yyl1513 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1513, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1513 := r.ReadArrayStart()
			if yyl1513 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1513, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1514Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1514Slc
	var yyhl1514 bool = l >= 0
	for yyj1514 := 0; ; yyj1514++ {
		if yyhl1514 {
			if yyj1514 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1514 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1514Slc = r.DecodeBytes(yys1514Slc, true, true)
		yys1514 := string(yys1514Slc)
		if !yyhl1514 {
			r.ReadMapKVSeparator()
		}
		switch yys1514 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1515 := &x.ObjectMeta
				yyv1515.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1516 := &x.Spec
				yyv1516.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1514)
		} // end switch yys1514
	} // end for yyj1514
	if !yyhl1514 {
		r.ReadMapEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1517 int
	var yyb1517 bool
	var yyhl1517 bool = l >= 0
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1518 := &x.ObjectMeta
		yyv1518.CodecDecodeSelf(d)
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1519 := &x.Spec
		yyv1519.CodecDecodeSelf(d)
	}
	for {
		yyj1517++
		if yyhl1517 {
			yyb1517 = yyj1517 > l
		} else {
			yyb1517 = r.CheckBreak()
		}
		if yyb1517 {
			break
		}
		if yyj1517 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1517-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1520 := z.EncBinary()
		_ = yym1520
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1521 := !z.EncBinary()
			yy2arr1521 := z.EncBasicHandle().StructToArray
			var yyfirst1521 bool
			var yyq1521 [4]bool
			_, _, _, _ = yysep1521, yyfirst1521, yyq1521, yy2arr1521
			const yyr1521 bool = false
			yyq1521[0] = x.Kind != ""
			yyq1521[1] = x.APIVersion != ""
			yyq1521[2] = true
			yyq1521[3] = true
			if yyr1521 || yy2arr1521 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1521 int = 0
				for _, b := range yyq1521 {
					if b {
						yynn1521++
					}
				}
				r.EncodeMapStart(yynn1521)
			}
			if yyr1521 || yy2arr1521 {
				if yyq1521[0] {
					yym1523 := z.EncBinary()
					_ = yym1523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1521[0] {
					yyfirst1521 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1521 {
						r.EncodeMapKVSeparator()
					}
					yym1524 := z.EncBinary()
					_ = yym1524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1521 || yy2arr1521 {
				if yysep1521 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1521[1] {
					yym1526 := z.EncBinary()
					_ = yym1526
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1521[1] {
					if yyfirst1521 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1521 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1521 {
						r.EncodeMapKVSeparator()
					}
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1521 || yy2arr1521 {
				if yysep1521 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1521[2] {
					yy1529 := &x.ObjectMeta
					yy1529.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1521[2] {
					if yyfirst1521 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1521 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1521 {
						r.EncodeMapKVSeparator()
					}
					yy1530 := &x.ObjectMeta
					yy1530.CodecEncodeSelf(e)
				}
			}
			if yyr1521 || yy2arr1521 {
				if yysep1521 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1521[3] {
					yy1532 := &x.Template
					yy1532.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1521[3] {
					if yyfirst1521 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1521 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if yysep1521 {
						r.EncodeMapKVSeparator()
					}
					yy1533 := &x.Template
					yy1533.CodecEncodeSelf(e)
				}
			}
			if yysep1521 {
				if yyr1521 || yy2arr1521 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1534 := z.DecBinary()
	_ = yym1534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1535 := r.ReadMapStart()
			if yyl1535 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1535, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1535 := r.ReadArrayStart()
			if yyl1535 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1536Slc
	var yyhl1536 bool = l >= 0
	for yyj1536 := 0; ; yyj1536++ {
		if yyhl1536 {
			if yyj1536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1536 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1536Slc = r.DecodeBytes(yys1536Slc, true, true)
		yys1536 := string(yys1536Slc)
		if !yyhl1536 {
			r.ReadMapKVSeparator()
		}
		switch yys1536 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1539 := &x.ObjectMeta
				yyv1539.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1540 := &x.Template
				yyv1540.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1536)
		} // end switch yys1536
	} // end for yyj1536
	if !yyhl1536 {
		r.ReadMapEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1541 int
	var yyb1541 bool
	var yyhl1541 bool = l >= 0
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1544 := &x.ObjectMeta
		yyv1544.CodecDecodeSelf(d)
	}
	yyj1541++
	if yyhl1541 {
		yyb1541 = yyj1541 > l
	} else {
		yyb1541 = r.CheckBreak()
	}
	if yyb1541 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1545 := &x.Template
		yyv1545.CodecDecodeSelf(d)
	}
	for {
		yyj1541++
		if yyhl1541 {
			yyb1541 = yyj1541 > l
		} else {
			yyb1541 = r.CheckBreak()
		}
		if yyb1541 {
			break
		}
		if yyj1541 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1541-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1546 := z.EncBinary()
		_ = yym1546
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1547 := !z.EncBinary()
			yy2arr1547 := z.EncBasicHandle().StructToArray
			var yyfirst1547 bool
			var yyq1547 [4]bool
			_, _, _, _ = yysep1547, yyfirst1547, yyq1547, yy2arr1547
			const yyr1547 bool = false
			yyq1547[0] = x.Kind != ""
			yyq1547[1] = x.APIVersion != ""
			yyq1547[2] = true
			if yyr1547 || yy2arr1547 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1547 int = 1
				for _, b := range yyq1547 {
					if b {
						yynn1547++
					}
				}
				r.EncodeMapStart(yynn1547)
			}
			if yyr1547 || yy2arr1547 {
				if yyq1547[0] {
					yym1549 := z.EncBinary()
					_ = yym1549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1547[0] {
					yyfirst1547 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1547 {
						r.EncodeMapKVSeparator()
					}
					yym1550 := z.EncBinary()
					_ = yym1550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1547 || yy2arr1547 {
				if yysep1547 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1547[1] {
					yym1552 := z.EncBinary()
					_ = yym1552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1547[1] {
					if yyfirst1547 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1547 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1547 {
						r.EncodeMapKVSeparator()
					}
					yym1553 := z.EncBinary()
					_ = yym1553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1547 || yy2arr1547 {
				if yysep1547 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1547[2] {
					yy1555 := &x.ListMeta
					yy1555.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1547[2] {
					if yyfirst1547 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1547 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1547 {
						r.EncodeMapKVSeparator()
					}
					yy1556 := &x.ListMeta
					yy1556.CodecEncodeSelf(e)
				}
			}
			if yyr1547 || yy2arr1547 {
				if yysep1547 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1558 := z.EncBinary()
					_ = yym1558
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				if yyfirst1547 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1547 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1547 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1547 {
				if yyr1547 || yy2arr1547 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1560 := z.DecBinary()
	_ = yym1560
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1561 := r.ReadMapStart()
			if yyl1561 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1561, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1561 := r.ReadArrayStart()
			if yyl1561 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1561, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1562Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1562Slc
	var yyhl1562 bool = l >= 0
	for yyj1562 := 0; ; yyj1562++ {
		if yyhl1562 {
			if yyj1562 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1562 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1562Slc = r.DecodeBytes(yys1562Slc, true, true)
		yys1562 := string(yys1562Slc)
		if !yyhl1562 {
			r.ReadMapKVSeparator()
		}
		switch yys1562 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1565 := &x.ListMeta
				yyv1565.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1566 := &x.Items
				yym1567 := z.DecBinary()
				_ = yym1567
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1566), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1562)
		} // end switch yys1562
	} // end for yyj1562
	if !yyhl1562 {
		r.ReadMapEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1568 int
	var yyb1568 bool
	var yyhl1568 bool = l >= 0
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1571 := &x.ListMeta
		yyv1571.CodecDecodeSelf(d)
	}
	yyj1568++
	if yyhl1568 {
		yyb1568 = yyj1568 > l
	} else {
		yyb1568 = r.CheckBreak()
	}
	if yyb1568 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1572 := &x.Items
		yym1573 := z.DecBinary()
		_ = yym1573
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1572), d)
		}
	}
	for {
		yyj1568++
		if yyhl1568 {
			yyb1568 = yyj1568 > l
		} else {
			yyb1568 = r.CheckBreak()
		}
		if yyb1568 {
			break
		}
		if yyj1568 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1568-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1574 := z.EncBinary()
		_ = yym1574
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1575 := !z.EncBinary()
			yy2arr1575 := z.EncBasicHandle().StructToArray
			var yyfirst1575 bool
			var yyq1575 [3]bool
			_, _, _, _ = yysep1575, yyfirst1575, yyq1575, yy2arr1575
			const yyr1575 bool = false
			yyq1575[2] = x.Template != nil
			if yyr1575 || yy2arr1575 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1575 int = 2
				for _, b := range yyq1575 {
					if b {
						yynn1575++
					}
				}
				r.EncodeMapStart(yynn1575)
			}
			if yyr1575 || yy2arr1575 {
				yym1577 := z.EncBinary()
				_ = yym1577
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				yyfirst1575 = true
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				if yysep1575 {
					r.EncodeMapKVSeparator()
				}
				yym1578 := z.EncBinary()
				_ = yym1578
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1575 || yy2arr1575 {
				if yysep1575 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1580 := z.EncBinary()
					_ = yym1580
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				if yyfirst1575 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1575 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if yysep1575 {
					r.EncodeMapKVSeparator()
				}
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1581 := z.EncBinary()
					_ = yym1581
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1575 || yy2arr1575 {
				if yysep1575 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1575[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1575[2] {
					if yyfirst1575 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1575 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if yysep1575 {
						r.EncodeMapKVSeparator()
					}
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1575 {
				if yyr1575 || yy2arr1575 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1583 := z.DecBinary()
	_ = yym1583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1584 := r.ReadMapStart()
			if yyl1584 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1584, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1584 := r.ReadArrayStart()
			if yyl1584 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1584, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1585Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1585Slc
	var yyhl1585 bool = l >= 0
	for yyj1585 := 0; ; yyj1585++ {
		if yyhl1585 {
			if yyj1585 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1585 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1585Slc = r.DecodeBytes(yys1585Slc, true, true)
		yys1585 := string(yys1585Slc)
		if !yyhl1585 {
			r.ReadMapKVSeparator()
		}
		switch yys1585 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1587 := &x.Selector
				yym1588 := z.DecBinary()
				_ = yym1588
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1587, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1585)
		} // end switch yys1585
	} // end for yyj1585
	if !yyhl1585 {
		r.ReadMapEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1590 int
	var yyb1590 bool
	var yyhl1590 bool = l >= 0
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1592 := &x.Selector
		yym1593 := z.DecBinary()
		_ = yym1593
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1592, false, d)
		}
	}
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1590++
		if yyhl1590 {
			yyb1590 = yyj1590 > l
		} else {
			yyb1590 = r.CheckBreak()
		}
		if yyb1590 {
			break
		}
		if yyj1590 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1590-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1595 := z.EncBinary()
		_ = yym1595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1596 := !z.EncBinary()
			yy2arr1596 := z.EncBasicHandle().StructToArray
			var yyfirst1596 bool
			var yyq1596 [2]bool
			_, _, _, _ = yysep1596, yyfirst1596, yyq1596, yy2arr1596
			const yyr1596 bool = false
			yyq1596[1] = x.ObservedGeneration != 0
			if yyr1596 || yy2arr1596 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1596 int = 1
				for _, b := range yyq1596 {
					if b {
						yynn1596++
					}
				}
				r.EncodeMapStart(yynn1596)
			}
			if yyr1596 || yy2arr1596 {
				yym1598 := z.EncBinary()
				_ = yym1598
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				yyfirst1596 = true
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				if yysep1596 {
					r.EncodeMapKVSeparator()
				}
				yym1599 := z.EncBinary()
				_ = yym1599
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1596 || yy2arr1596 {
				if yysep1596 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1596[1] {
					yym1601 := z.EncBinary()
					_ = yym1601
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1596[1] {
					if yyfirst1596 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1596 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					if yysep1596 {
						r.EncodeMapKVSeparator()
					}
					yym1602 := z.EncBinary()
					_ = yym1602
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1596 {
				if yyr1596 || yy2arr1596 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1603 := z.DecBinary()
	_ = yym1603
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1604 := r.ReadMapStart()
			if yyl1604 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1604, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1604 := r.ReadArrayStart()
			if yyl1604 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1604, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1605Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1605Slc
	var yyhl1605 bool = l >= 0
	for yyj1605 := 0; ; yyj1605++ {
		if yyhl1605 {
			if yyj1605 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1605 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1605Slc = r.DecodeBytes(yys1605Slc, true, true)
		yys1605 := string(yys1605Slc)
		if !yyhl1605 {
			r.ReadMapKVSeparator()
		}
		switch yys1605 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1605)
		} // end switch yys1605
	} // end for yyj1605
	if !yyhl1605 {
		r.ReadMapEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1608 int
	var yyb1608 bool
	var yyhl1608 bool = l >= 0
	yyj1608++
	if yyhl1608 {
		yyb1608 = yyj1608 > l
	} else {
		yyb1608 = r.CheckBreak()
	}
	if yyb1608 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1608++
	if yyhl1608 {
		yyb1608 = yyj1608 > l
	} else {
		yyb1608 = r.CheckBreak()
	}
	if yyb1608 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1608++
		if yyhl1608 {
			yyb1608 = yyj1608 > l
		} else {
			yyb1608 = r.CheckBreak()
		}
		if yyb1608 {
			break
		}
		if yyj1608 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1608-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1611 := z.EncBinary()
		_ = yym1611
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1612 := !z.EncBinary()
			yy2arr1612 := z.EncBasicHandle().StructToArray
			var yyfirst1612 bool
			var yyq1612 [5]bool
			_, _, _, _ = yysep1612, yyfirst1612, yyq1612, yy2arr1612
			const yyr1612 bool = false
			yyq1612[0] = x.Kind != ""
			yyq1612[1] = x.APIVersion != ""
			yyq1612[2] = true
			yyq1612[3] = true
			yyq1612[4] = true
			if yyr1612 || yy2arr1612 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1612 int = 0
				for _, b := range yyq1612 {
					if b {
						yynn1612++
					}
				}
				r.EncodeMapStart(yynn1612)
			}
			if yyr1612 || yy2arr1612 {
				if yyq1612[0] {
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1612[0] {
					yyfirst1612 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1612 {
						r.EncodeMapKVSeparator()
					}
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1612 || yy2arr1612 {
				if yysep1612 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1612[1] {
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1612[1] {
					if yyfirst1612 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1612 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1612 {
						r.EncodeMapKVSeparator()
					}
					yym1618 := z.EncBinary()
					_ = yym1618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1612 || yy2arr1612 {
				if yysep1612 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1612[2] {
					yy1620 := &x.ObjectMeta
					yy1620.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1612[2] {
					if yyfirst1612 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1612 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1612 {
						r.EncodeMapKVSeparator()
					}
					yy1621 := &x.ObjectMeta
					yy1621.CodecEncodeSelf(e)
				}
			}
			if yyr1612 || yy2arr1612 {
				if yysep1612 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1612[3] {
					yy1623 := &x.Spec
					yy1623.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1612[3] {
					if yyfirst1612 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1612 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep1612 {
						r.EncodeMapKVSeparator()
					}
					yy1624 := &x.Spec
					yy1624.CodecEncodeSelf(e)
				}
			}
			if yyr1612 || yy2arr1612 {
				if yysep1612 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1612[4] {
					yy1626 := &x.Status
					yy1626.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1612[4] {
					if yyfirst1612 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1612 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep1612 {
						r.EncodeMapKVSeparator()
					}
					yy1627 := &x.Status
					yy1627.CodecEncodeSelf(e)
				}
			}
			if yysep1612 {
				if yyr1612 || yy2arr1612 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1628 := z.DecBinary()
	_ = yym1628
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1629 := r.ReadMapStart()
			if yyl1629 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1629, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1629 := r.ReadArrayStart()
			if yyl1629 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1629, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1630Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1630Slc
	var yyhl1630 bool = l >= 0
	for yyj1630 := 0; ; yyj1630++ {
		if yyhl1630 {
			if yyj1630 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1630 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1630Slc = r.DecodeBytes(yys1630Slc, true, true)
		yys1630 := string(yys1630Slc)
		if !yyhl1630 {
			r.ReadMapKVSeparator()
		}
		switch yys1630 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1633 := &x.ObjectMeta
				yyv1633.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1634 := &x.Spec
				yyv1634.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1635 := &x.Status
				yyv1635.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1630)
		} // end switch yys1630
	} // end for yyj1630
	if !yyhl1630 {
		r.ReadMapEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1636 int
	var yyb1636 bool
	var yyhl1636 bool = l >= 0
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1639 := &x.ObjectMeta
		yyv1639.CodecDecodeSelf(d)
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1640 := &x.Spec
		yyv1640.CodecDecodeSelf(d)
	}
	yyj1636++
	if yyhl1636 {
		yyb1636 = yyj1636 > l
	} else {
		yyb1636 = r.CheckBreak()
	}
	if yyb1636 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1641 := &x.Status
		yyv1641.CodecDecodeSelf(d)
	}
	for {
		yyj1636++
		if yyhl1636 {
			yyb1636 = yyj1636 > l
		} else {
			yyb1636 = r.CheckBreak()
		}
		if yyb1636 {
			break
		}
		if yyj1636 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1636-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1642 := z.EncBinary()
		_ = yym1642
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1643 := !z.EncBinary()
			yy2arr1643 := z.EncBasicHandle().StructToArray
			var yyfirst1643 bool
			var yyq1643 [4]bool
			_, _, _, _ = yysep1643, yyfirst1643, yyq1643, yy2arr1643
			const yyr1643 bool = false
			yyq1643[0] = x.Kind != ""
			yyq1643[1] = x.APIVersion != ""
			yyq1643[2] = true
			if yyr1643 || yy2arr1643 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1643 int = 1
				for _, b := range yyq1643 {
					if b {
						yynn1643++
					}
				}
				r.EncodeMapStart(yynn1643)
			}
			if yyr1643 || yy2arr1643 {
				if yyq1643[0] {
					yym1645 := z.EncBinary()
					_ = yym1645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1643[0] {
					yyfirst1643 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1643 {
						r.EncodeMapKVSeparator()
					}
					yym1646 := z.EncBinary()
					_ = yym1646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1643 || yy2arr1643 {
				if yysep1643 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1643[1] {
					yym1648 := z.EncBinary()
					_ = yym1648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1643[1] {
					if yyfirst1643 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1643 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1643 {
						r.EncodeMapKVSeparator()
					}
					yym1649 := z.EncBinary()
					_ = yym1649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1643 || yy2arr1643 {
				if yysep1643 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1643[2] {
					yy1651 := &x.ListMeta
					yy1651.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1643[2] {
					if yyfirst1643 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1643 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1643 {
						r.EncodeMapKVSeparator()
					}
					yy1652 := &x.ListMeta
					yy1652.CodecEncodeSelf(e)
				}
			}
			if yyr1643 || yy2arr1643 {
				if yysep1643 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1654 := z.EncBinary()
					_ = yym1654
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				if yyfirst1643 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1643 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1643 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1643 {
				if yyr1643 || yy2arr1643 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1656 := z.DecBinary()
	_ = yym1656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1657 := r.ReadMapStart()
			if yyl1657 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1657, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1657 := r.ReadArrayStart()
			if yyl1657 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1658Slc
	var yyhl1658 bool = l >= 0
	for yyj1658 := 0; ; yyj1658++ {
		if yyhl1658 {
			if yyj1658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1658 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1658Slc = r.DecodeBytes(yys1658Slc, true, true)
		yys1658 := string(yys1658Slc)
		if !yyhl1658 {
			r.ReadMapKVSeparator()
		}
		switch yys1658 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1661 := &x.ListMeta
				yyv1661.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1662 := &x.Items
				yym1663 := z.DecBinary()
				_ = yym1663
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1662), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1658)
		} // end switch yys1658
	} // end for yyj1658
	if !yyhl1658 {
		r.ReadMapEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1664 int
	var yyb1664 bool
	var yyhl1664 bool = l >= 0
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1667 := &x.ListMeta
		yyv1667.CodecDecodeSelf(d)
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1668 := &x.Items
		yym1669 := z.DecBinary()
		_ = yym1669
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1668), d)
		}
	}
	for {
		yyj1664++
		if yyhl1664 {
			yyb1664 = yyj1664 > l
		} else {
			yyb1664 = r.CheckBreak()
		}
		if yyb1664 {
			break
		}
		if yyj1664 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1664-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1670 := z.EncBinary()
		_ = yym1670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1671 := !z.EncBinary()
			yy2arr1671 := z.EncBasicHandle().StructToArray
			var yyfirst1671 bool
			var yyq1671 [4]bool
			_, _, _, _ = yysep1671, yyfirst1671, yyq1671, yy2arr1671
			const yyr1671 bool = false
			yyq1671[0] = x.Kind != ""
			yyq1671[1] = x.APIVersion != ""
			yyq1671[2] = true
			if yyr1671 || yy2arr1671 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1671 int = 1
				for _, b := range yyq1671 {
					if b {
						yynn1671++
					}
				}
				r.EncodeMapStart(yynn1671)
			}
			if yyr1671 || yy2arr1671 {
				if yyq1671[0] {
					yym1673 := z.EncBinary()
					_ = yym1673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1671[0] {
					yyfirst1671 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1671 {
						r.EncodeMapKVSeparator()
					}
					yym1674 := z.EncBinary()
					_ = yym1674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1671 || yy2arr1671 {
				if yysep1671 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1671[1] {
					yym1676 := z.EncBinary()
					_ = yym1676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1671[1] {
					if yyfirst1671 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1671 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1671 {
						r.EncodeMapKVSeparator()
					}
					yym1677 := z.EncBinary()
					_ = yym1677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1671 || yy2arr1671 {
				if yysep1671 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1671[2] {
					yy1679 := &x.ListMeta
					yy1679.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1671[2] {
					if yyfirst1671 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1671 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1671 {
						r.EncodeMapKVSeparator()
					}
					yy1680 := &x.ListMeta
					yy1680.CodecEncodeSelf(e)
				}
			}
			if yyr1671 || yy2arr1671 {
				if yysep1671 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				if yyfirst1671 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1671 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1671 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1683 := z.EncBinary()
					_ = yym1683
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1671 {
				if yyr1671 || yy2arr1671 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1684 := z.DecBinary()
	_ = yym1684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1685 := r.ReadMapStart()
			if yyl1685 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1685, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1685 := r.ReadArrayStart()
			if yyl1685 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1685, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1686Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1686Slc
	var yyhl1686 bool = l >= 0
	for yyj1686 := 0; ; yyj1686++ {
		if yyhl1686 {
			if yyj1686 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1686 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1686Slc = r.DecodeBytes(yys1686Slc, true, true)
		yys1686 := string(yys1686Slc)
		if !yyhl1686 {
			r.ReadMapKVSeparator()
		}
		switch yys1686 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1689 := &x.ListMeta
				yyv1689.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1690 := &x.Items
				yym1691 := z.DecBinary()
				_ = yym1691
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1690), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1686)
		} // end switch yys1686
	} // end for yyj1686
	if !yyhl1686 {
		r.ReadMapEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1692 int
	var yyb1692 bool
	var yyhl1692 bool = l >= 0
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1695 := &x.ListMeta
		yyv1695.CodecDecodeSelf(d)
	}
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1696 := &x.Items
		yym1697 := z.DecBinary()
		_ = yym1697
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1696), d)
		}
	}
	for {
		yyj1692++
		if yyhl1692 {
			yyb1692 = yyj1692 > l
		} else {
			yyb1692 = r.CheckBreak()
		}
		if yyb1692 {
			break
		}
		if yyj1692 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1692-1, "")
	}
	r.ReadArrayEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1698 := z.EncBinary()
	_ = yym1698
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1699 := z.DecBinary()
	_ = yym1699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1700 := z.EncBinary()
	_ = yym1700
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1701 := z.DecBinary()
	_ = yym1701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1702 := z.EncBinary()
		_ = yym1702
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1703 := !z.EncBinary()
			yy2arr1703 := z.EncBasicHandle().StructToArray
			var yyfirst1703 bool
			var yyq1703 [1]bool
			_, _, _, _ = yysep1703, yyfirst1703, yyq1703, yy2arr1703
			const yyr1703 bool = false
			yyq1703[0] = true
			if yyr1703 || yy2arr1703 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1703 int = 0
				for _, b := range yyq1703 {
					if b {
						yynn1703++
					}
				}
				r.EncodeMapStart(yynn1703)
			}
			if yyr1703 || yy2arr1703 {
				if yyq1703[0] {
					yy1705 := &x.LoadBalancer
					yy1705.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1703[0] {
					yyfirst1703 = true
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					if yysep1703 {
						r.EncodeMapKVSeparator()
					}
					yy1706 := &x.LoadBalancer
					yy1706.CodecEncodeSelf(e)
				}
			}
			if yysep1703 {
				if yyr1703 || yy2arr1703 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1707 := z.DecBinary()
	_ = yym1707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1708 := r.ReadMapStart()
			if yyl1708 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1708, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1708 := r.ReadArrayStart()
			if yyl1708 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1708, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1709Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1709Slc
	var yyhl1709 bool = l >= 0
	for yyj1709 := 0; ; yyj1709++ {
		if yyhl1709 {
			if yyj1709 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1709 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1709Slc = r.DecodeBytes(yys1709Slc, true, true)
		yys1709 := string(yys1709Slc)
		if !yyhl1709 {
			r.ReadMapKVSeparator()
		}
		switch yys1709 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1710 := &x.LoadBalancer
				yyv1710.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1709)
		} // end switch yys1709
	} // end for yyj1709
	if !yyhl1709 {
		r.ReadMapEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1711 int
	var yyb1711 bool
	var yyhl1711 bool = l >= 0
	yyj1711++
	if yyhl1711 {
		yyb1711 = yyj1711 > l
	} else {
		yyb1711 = r.CheckBreak()
	}
	if yyb1711 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1712 := &x.LoadBalancer
		yyv1712.CodecDecodeSelf(d)
	}
	for {
		yyj1711++
		if yyhl1711 {
			yyb1711 = yyj1711 > l
		} else {
			yyb1711 = r.CheckBreak()
		}
		if yyb1711 {
			break
		}
		if yyj1711 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1711-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1713 := z.EncBinary()
		_ = yym1713
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1714 := !z.EncBinary()
			yy2arr1714 := z.EncBasicHandle().StructToArray
			var yyfirst1714 bool
			var yyq1714 [1]bool
			_, _, _, _ = yysep1714, yyfirst1714, yyq1714, yy2arr1714
			const yyr1714 bool = false
			yyq1714[0] = len(x.Ingress) != 0
			if yyr1714 || yy2arr1714 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1714 int = 0
				for _, b := range yyq1714 {
					if b {
						yynn1714++
					}
				}
				r.EncodeMapStart(yynn1714)
			}
			if yyr1714 || yy2arr1714 {
				if yyq1714[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1716 := z.EncBinary()
						_ = yym1716
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[0] {
					yyfirst1714 = true
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if yysep1714 {
						r.EncodeMapKVSeparator()
					}
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1717 := z.EncBinary()
						_ = yym1717
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1714 {
				if yyr1714 || yy2arr1714 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1718 := z.DecBinary()
	_ = yym1718
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1719 := r.ReadMapStart()
			if yyl1719 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1719, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1719 := r.ReadArrayStart()
			if yyl1719 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1719, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1720Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1720Slc
	var yyhl1720 bool = l >= 0
	for yyj1720 := 0; ; yyj1720++ {
		if yyhl1720 {
			if yyj1720 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1720 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1720Slc = r.DecodeBytes(yys1720Slc, true, true)
		yys1720 := string(yys1720Slc)
		if !yyhl1720 {
			r.ReadMapKVSeparator()
		}
		switch yys1720 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1721 := &x.Ingress
				yym1722 := z.DecBinary()
				_ = yym1722
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1721), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1720)
		} // end switch yys1720
	} // end for yyj1720
	if !yyhl1720 {
		r.ReadMapEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1723 int
	var yyb1723 bool
	var yyhl1723 bool = l >= 0
	yyj1723++
	if yyhl1723 {
		yyb1723 = yyj1723 > l
	} else {
		yyb1723 = r.CheckBreak()
	}
	if yyb1723 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1724 := &x.Ingress
		yym1725 := z.DecBinary()
		_ = yym1725
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1724), d)
		}
	}
	for {
		yyj1723++
		if yyhl1723 {
			yyb1723 = yyj1723 > l
		} else {
			yyb1723 = r.CheckBreak()
		}
		if yyb1723 {
			break
		}
		if yyj1723 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1723-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1726 := z.EncBinary()
		_ = yym1726
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1727 := !z.EncBinary()
			yy2arr1727 := z.EncBasicHandle().StructToArray
			var yyfirst1727 bool
			var yyq1727 [2]bool
			_, _, _, _ = yysep1727, yyfirst1727, yyq1727, yy2arr1727
			const yyr1727 bool = false
			yyq1727[0] = x.IP != ""
			yyq1727[1] = x.Hostname != ""
			if yyr1727 || yy2arr1727 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1727 int = 0
				for _, b := range yyq1727 {
					if b {
						yynn1727++
					}
				}
				r.EncodeMapStart(yynn1727)
			}
			if yyr1727 || yy2arr1727 {
				if yyq1727[0] {
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1727[0] {
					yyfirst1727 = true
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					if yysep1727 {
						r.EncodeMapKVSeparator()
					}
					yym1730 := z.EncBinary()
					_ = yym1730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1727 || yy2arr1727 {
				if yysep1727 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1727[1] {
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1727[1] {
					if yyfirst1727 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1727 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					if yysep1727 {
						r.EncodeMapKVSeparator()
					}
					yym1733 := z.EncBinary()
					_ = yym1733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1727 {
				if yyr1727 || yy2arr1727 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1734 := z.DecBinary()
	_ = yym1734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1735 := r.ReadMapStart()
			if yyl1735 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1735, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1735 := r.ReadArrayStart()
			if yyl1735 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1735, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1736Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1736Slc
	var yyhl1736 bool = l >= 0
	for yyj1736 := 0; ; yyj1736++ {
		if yyhl1736 {
			if yyj1736 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1736 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1736Slc = r.DecodeBytes(yys1736Slc, true, true)
		yys1736 := string(yys1736Slc)
		if !yyhl1736 {
			r.ReadMapKVSeparator()
		}
		switch yys1736 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1736)
		} // end switch yys1736
	} // end for yyj1736
	if !yyhl1736 {
		r.ReadMapEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1739 int
	var yyb1739 bool
	var yyhl1739 bool = l >= 0
	yyj1739++
	if yyhl1739 {
		yyb1739 = yyj1739 > l
	} else {
		yyb1739 = r.CheckBreak()
	}
	if yyb1739 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1739++
	if yyhl1739 {
		yyb1739 = yyj1739 > l
	} else {
		yyb1739 = r.CheckBreak()
	}
	if yyb1739 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1739++
		if yyhl1739 {
			yyb1739 = yyj1739 > l
		} else {
			yyb1739 = r.CheckBreak()
		}
		if yyb1739 {
			break
		}
		if yyj1739 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1739-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1742 := z.EncBinary()
		_ = yym1742
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1743 := !z.EncBinary()
			yy2arr1743 := z.EncBasicHandle().StructToArray
			var yyfirst1743 bool
			var yyq1743 [7]bool
			_, _, _, _ = yysep1743, yyfirst1743, yyq1743, yy2arr1743
			const yyr1743 bool = false
			yyq1743[0] = x.Type != ""
			yyq1743[3] = x.ClusterIP != ""
			yyq1743[4] = len(x.ExternalIPs) != 0
			yyq1743[5] = x.LoadBalancerIP != ""
			yyq1743[6] = x.SessionAffinity != ""
			if yyr1743 || yy2arr1743 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1743 int = 2
				for _, b := range yyq1743 {
					if b {
						yynn1743++
					}
				}
				r.EncodeMapStart(yynn1743)
			}
			if yyr1743 || yy2arr1743 {
				if yyq1743[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1743[0] {
					yyfirst1743 = true
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					if yysep1743 {
						r.EncodeMapKVSeparator()
					}
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1743 || yy2arr1743 {
				if yysep1743 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				if yyfirst1743 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1743 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if yysep1743 {
					r.EncodeMapKVSeparator()
				}
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1747 := z.EncBinary()
					_ = yym1747
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1743 || yy2arr1743 {
				if yysep1743 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1749 := z.EncBinary()
					_ = yym1749
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				if yyfirst1743 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1743 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if yysep1743 {
					r.EncodeMapKVSeparator()
				}
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1750 := z.EncBinary()
					_ = yym1750
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1743 || yy2arr1743 {
				if yysep1743 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1743[3] {
					yym1752 := z.EncBinary()
					_ = yym1752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1743[3] {
					if yyfirst1743 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1743 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					if yysep1743 {
						r.EncodeMapKVSeparator()
					}
					yym1753 := z.EncBinary()
					_ = yym1753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1743 || yy2arr1743 {
				if yysep1743 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1743[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1755 := z.EncBinary()
						_ = yym1755
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1743[4] {
					if yyfirst1743 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1743 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if yysep1743 {
						r.EncodeMapKVSeparator()
					}
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1756 := z.EncBinary()
						_ = yym1756
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1743 || yy2arr1743 {
				if yysep1743 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1743[5] {
					yym1758 := z.EncBinary()
					_ = yym1758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1743[5] {
					if yyfirst1743 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1743 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					if yysep1743 {
						r.EncodeMapKVSeparator()
					}
					yym1759 := z.EncBinary()
					_ = yym1759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1743 || yy2arr1743 {
				if yysep1743 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1743[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1743[6] {
					if yyfirst1743 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1743 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					if yysep1743 {
						r.EncodeMapKVSeparator()
					}
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yysep1743 {
				if yyr1743 || yy2arr1743 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1761 := z.DecBinary()
	_ = yym1761
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1762 := r.ReadMapStart()
			if yyl1762 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1762, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1762 := r.ReadArrayStart()
			if yyl1762 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1762, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1763Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1763Slc
	var yyhl1763 bool = l >= 0
	for yyj1763 := 0; ; yyj1763++ {
		if yyhl1763 {
			if yyj1763 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1763 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1763Slc = r.DecodeBytes(yys1763Slc, true, true)
		yys1763 := string(yys1763Slc)
		if !yyhl1763 {
			r.ReadMapKVSeparator()
		}
		switch yys1763 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1765 := &x.Ports
				yym1766 := z.DecBinary()
				_ = yym1766
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1765), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1767 := &x.Selector
				yym1768 := z.DecBinary()
				_ = yym1768
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1767, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1770 := &x.ExternalIPs
				yym1771 := z.DecBinary()
				_ = yym1771
				if false {
				} else {
					z.F.DecSliceStringX(yyv1770, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1763)
		} // end switch yys1763
	} // end for yyj1763
	if !yyhl1763 {
		r.ReadMapEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1774 int
	var yyb1774 bool
	var yyhl1774 bool = l >= 0
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1776 := &x.Ports
		yym1777 := z.DecBinary()
		_ = yym1777
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1776), d)
		}
	}
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1778 := &x.Selector
		yym1779 := z.DecBinary()
		_ = yym1779
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1778, false, d)
		}
	}
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1781 := &x.ExternalIPs
		yym1782 := z.DecBinary()
		_ = yym1782
		if false {
		} else {
			z.F.DecSliceStringX(yyv1781, false, d)
		}
	}
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1774++
	if yyhl1774 {
		yyb1774 = yyj1774 > l
	} else {
		yyb1774 = r.CheckBreak()
	}
	if yyb1774 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1774++
		if yyhl1774 {
			yyb1774 = yyj1774 > l
		} else {
			yyb1774 = r.CheckBreak()
		}
		if yyb1774 {
			break
		}
		if yyj1774 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1774-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1785 := z.EncBinary()
		_ = yym1785
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1786 := !z.EncBinary()
			yy2arr1786 := z.EncBasicHandle().StructToArray
			var yyfirst1786 bool
			var yyq1786 [5]bool
			_, _, _, _ = yysep1786, yyfirst1786, yyq1786, yy2arr1786
			const yyr1786 bool = false
			if yyr1786 || yy2arr1786 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1786 int = 5
				for _, b := range yyq1786 {
					if b {
						yynn1786++
					}
				}
				r.EncodeMapStart(yynn1786)
			}
			if yyr1786 || yy2arr1786 {
				yym1788 := z.EncBinary()
				_ = yym1788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst1786 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep1786 {
					r.EncodeMapKVSeparator()
				}
				yym1789 := z.EncBinary()
				_ = yym1789
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1786 || yy2arr1786 {
				if yysep1786 {
					r.EncodeArrayEntrySeparator()
				}
				x.Protocol.CodecEncodeSelf(e)
			} else {
				if yyfirst1786 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1786 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				if yysep1786 {
					r.EncodeMapKVSeparator()
				}
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1786 || yy2arr1786 {
				if yysep1786 {
					r.EncodeArrayEntrySeparator()
				}
				yym1792 := z.EncBinary()
				_ = yym1792
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				if yyfirst1786 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1786 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				if yysep1786 {
					r.EncodeMapKVSeparator()
				}
				yym1793 := z.EncBinary()
				_ = yym1793
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1786 || yy2arr1786 {
				if yysep1786 {
					r.EncodeArrayEntrySeparator()
				}
				yy1795 := &x.TargetPort
				yym1796 := z.EncBinary()
				_ = yym1796
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1795) {
				} else if !yym1796 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1795)
				} else {
					z.EncFallback(yy1795)
				}
			} else {
				if yyfirst1786 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1786 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				if yysep1786 {
					r.EncodeMapKVSeparator()
				}
				yy1797 := &x.TargetPort
				yym1798 := z.EncBinary()
				_ = yym1798
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1797) {
				} else if !yym1798 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1797)
				} else {
					z.EncFallback(yy1797)
				}
			}
			if yyr1786 || yy2arr1786 {
				if yysep1786 {
					r.EncodeArrayEntrySeparator()
				}
				yym1800 := z.EncBinary()
				_ = yym1800
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				if yyfirst1786 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1786 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				if yysep1786 {
					r.EncodeMapKVSeparator()
				}
				yym1801 := z.EncBinary()
				_ = yym1801
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yysep1786 {
				if yyr1786 || yy2arr1786 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1802 := z.DecBinary()
	_ = yym1802
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1803 := r.ReadMapStart()
			if yyl1803 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1803, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1803 := r.ReadArrayStart()
			if yyl1803 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1803, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1804Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1804Slc
	var yyhl1804 bool = l >= 0
	for yyj1804 := 0; ; yyj1804++ {
		if yyhl1804 {
			if yyj1804 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1804 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1804Slc = r.DecodeBytes(yys1804Slc, true, true)
		yys1804 := string(yys1804Slc)
		if !yyhl1804 {
			r.ReadMapKVSeparator()
		}
		switch yys1804 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg2_util.IntOrString{}
			} else {
				yyv1808 := &x.TargetPort
				yym1809 := z.DecBinary()
				_ = yym1809
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1808) {
				} else if !yym1809 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1808)
				} else {
					z.DecFallback(yyv1808, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1804)
		} // end switch yys1804
	} // end for yyj1804
	if !yyhl1804 {
		r.ReadMapEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1811 int
	var yyb1811 bool
	var yyhl1811 bool = l >= 0
	yyj1811++
	if yyhl1811 {
		yyb1811 = yyj1811 > l
	} else {
		yyb1811 = r.CheckBreak()
	}
	if yyb1811 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1811++
	if yyhl1811 {
		yyb1811 = yyj1811 > l
	} else {
		yyb1811 = r.CheckBreak()
	}
	if yyb1811 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1811++
	if yyhl1811 {
		yyb1811 = yyj1811 > l
	} else {
		yyb1811 = r.CheckBreak()
	}
	if yyb1811 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1811++
	if yyhl1811 {
		yyb1811 = yyj1811 > l
	} else {
		yyb1811 = r.CheckBreak()
	}
	if yyb1811 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg2_util.IntOrString{}
	} else {
		yyv1815 := &x.TargetPort
		yym1816 := z.DecBinary()
		_ = yym1816
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1815) {
		} else if !yym1816 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1815)
		} else {
			z.DecFallback(yyv1815, false)
		}
	}
	yyj1811++
	if yyhl1811 {
		yyb1811 = yyj1811 > l
	} else {
		yyb1811 = r.CheckBreak()
	}
	if yyb1811 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1811++
		if yyhl1811 {
			yyb1811 = yyj1811 > l
		} else {
			yyb1811 = r.CheckBreak()
		}
		if yyb1811 {
			break
		}
		if yyj1811 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1811-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1818 := z.EncBinary()
		_ = yym1818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1819 := !z.EncBinary()
			yy2arr1819 := z.EncBasicHandle().StructToArray
			var yyfirst1819 bool
			var yyq1819 [5]bool
			_, _, _, _ = yysep1819, yyfirst1819, yyq1819, yy2arr1819
			const yyr1819 bool = false
			yyq1819[0] = x.Kind != ""
			yyq1819[1] = x.APIVersion != ""
			yyq1819[2] = true
			yyq1819[3] = true
			yyq1819[4] = true
			if yyr1819 || yy2arr1819 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1819 int = 0
				for _, b := range yyq1819 {
					if b {
						yynn1819++
					}
				}
				r.EncodeMapStart(yynn1819)
			}
			if yyr1819 || yy2arr1819 {
				if yyq1819[0] {
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1819[0] {
					yyfirst1819 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1819 {
						r.EncodeMapKVSeparator()
					}
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1819 || yy2arr1819 {
				if yysep1819 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1819[1] {
					yym1824 := z.EncBinary()
					_ = yym1824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1819[1] {
					if yyfirst1819 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1819 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1819 {
						r.EncodeMapKVSeparator()
					}
					yym1825 := z.EncBinary()
					_ = yym1825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1819 || yy2arr1819 {
				if yysep1819 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1819[2] {
					yy1827 := &x.ObjectMeta
					yy1827.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1819[2] {
					if yyfirst1819 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1819 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1819 {
						r.EncodeMapKVSeparator()
					}
					yy1828 := &x.ObjectMeta
					yy1828.CodecEncodeSelf(e)
				}
			}
			if yyr1819 || yy2arr1819 {
				if yysep1819 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1819[3] {
					yy1830 := &x.Spec
					yy1830.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1819[3] {
					if yyfirst1819 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1819 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep1819 {
						r.EncodeMapKVSeparator()
					}
					yy1831 := &x.Spec
					yy1831.CodecEncodeSelf(e)
				}
			}
			if yyr1819 || yy2arr1819 {
				if yysep1819 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1819[4] {
					yy1833 := &x.Status
					yy1833.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1819[4] {
					if yyfirst1819 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1819 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep1819 {
						r.EncodeMapKVSeparator()
					}
					yy1834 := &x.Status
					yy1834.CodecEncodeSelf(e)
				}
			}
			if yysep1819 {
				if yyr1819 || yy2arr1819 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1835 := z.DecBinary()
	_ = yym1835
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1836 := r.ReadMapStart()
			if yyl1836 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1836, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1836 := r.ReadArrayStart()
			if yyl1836 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1836, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1837Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1837Slc
	var yyhl1837 bool = l >= 0
	for yyj1837 := 0; ; yyj1837++ {
		if yyhl1837 {
			if yyj1837 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1837 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1837Slc = r.DecodeBytes(yys1837Slc, true, true)
		yys1837 := string(yys1837Slc)
		if !yyhl1837 {
			r.ReadMapKVSeparator()
		}
		switch yys1837 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1840 := &x.ObjectMeta
				yyv1840.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv1841 := &x.Spec
				yyv1841.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv1842 := &x.Status
				yyv1842.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1837)
		} // end switch yys1837
	} // end for yyj1837
	if !yyhl1837 {
		r.ReadMapEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1843 int
	var yyb1843 bool
	var yyhl1843 bool = l >= 0
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1846 := &x.ObjectMeta
		yyv1846.CodecDecodeSelf(d)
	}
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv1847 := &x.Spec
		yyv1847.CodecDecodeSelf(d)
	}
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv1848 := &x.Status
		yyv1848.CodecDecodeSelf(d)
	}
	for {
		yyj1843++
		if yyhl1843 {
			yyb1843 = yyj1843 > l
		} else {
			yyb1843 = r.CheckBreak()
		}
		if yyb1843 {
			break
		}
		if yyj1843 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1843-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1849 := z.EncBinary()
		_ = yym1849
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1850 := !z.EncBinary()
			yy2arr1850 := z.EncBasicHandle().StructToArray
			var yyfirst1850 bool
			var yyq1850 [5]bool
			_, _, _, _ = yysep1850, yyfirst1850, yyq1850, yy2arr1850
			const yyr1850 bool = false
			yyq1850[0] = x.Kind != ""
			yyq1850[1] = x.APIVersion != ""
			yyq1850[2] = true
			yyq1850[4] = len(x.ImagePullSecrets) != 0
			if yyr1850 || yy2arr1850 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1850 int = 1
				for _, b := range yyq1850 {
					if b {
						yynn1850++
					}
				}
				r.EncodeMapStart(yynn1850)
			}
			if yyr1850 || yy2arr1850 {
				if yyq1850[0] {
					yym1852 := z.EncBinary()
					_ = yym1852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1850[0] {
					yyfirst1850 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1850 {
						r.EncodeMapKVSeparator()
					}
					yym1853 := z.EncBinary()
					_ = yym1853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1850 || yy2arr1850 {
				if yysep1850 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1850[1] {
					yym1855 := z.EncBinary()
					_ = yym1855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1850[1] {
					if yyfirst1850 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1850 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1850 {
						r.EncodeMapKVSeparator()
					}
					yym1856 := z.EncBinary()
					_ = yym1856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1850 || yy2arr1850 {
				if yysep1850 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1850[2] {
					yy1858 := &x.ObjectMeta
					yy1858.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1850[2] {
					if yyfirst1850 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1850 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1850 {
						r.EncodeMapKVSeparator()
					}
					yy1859 := &x.ObjectMeta
					yy1859.CodecEncodeSelf(e)
				}
			}
			if yyr1850 || yy2arr1850 {
				if yysep1850 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym1861 := z.EncBinary()
					_ = yym1861
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				if yyfirst1850 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1850 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				if yysep1850 {
					r.EncodeMapKVSeparator()
				}
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym1862 := z.EncBinary()
					_ = yym1862
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr1850 || yy2arr1850 {
				if yysep1850 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1850[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1864 := z.EncBinary()
						_ = yym1864
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1850[4] {
					if yyfirst1850 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1850 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if yysep1850 {
						r.EncodeMapKVSeparator()
					}
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1865 := z.EncBinary()
						_ = yym1865
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1850 {
				if yyr1850 || yy2arr1850 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1866 := z.DecBinary()
	_ = yym1866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1867 := r.ReadMapStart()
			if yyl1867 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1867, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1867 := r.ReadArrayStart()
			if yyl1867 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1868Slc
	var yyhl1868 bool = l >= 0
	for yyj1868 := 0; ; yyj1868++ {
		if yyhl1868 {
			if yyj1868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1868 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1868Slc = r.DecodeBytes(yys1868Slc, true, true)
		yys1868 := string(yys1868Slc)
		if !yyhl1868 {
			r.ReadMapKVSeparator()
		}
		switch yys1868 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1871 := &x.ObjectMeta
				yyv1871.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv1872 := &x.Secrets
				yym1873 := z.DecBinary()
				_ = yym1873
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv1872), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1874 := &x.ImagePullSecrets
				yym1875 := z.DecBinary()
				_ = yym1875
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1874), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1868)
		} // end switch yys1868
	} // end for yyj1868
	if !yyhl1868 {
		r.ReadMapEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1876 int
	var yyb1876 bool
	var yyhl1876 bool = l >= 0
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1879 := &x.ObjectMeta
		yyv1879.CodecDecodeSelf(d)
	}
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv1880 := &x.Secrets
		yym1881 := z.DecBinary()
		_ = yym1881
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv1880), d)
		}
	}
	yyj1876++
	if yyhl1876 {
		yyb1876 = yyj1876 > l
	} else {
		yyb1876 = r.CheckBreak()
	}
	if yyb1876 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1882 := &x.ImagePullSecrets
		yym1883 := z.DecBinary()
		_ = yym1883
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1882), d)
		}
	}
	for {
		yyj1876++
		if yyhl1876 {
			yyb1876 = yyj1876 > l
		} else {
			yyb1876 = r.CheckBreak()
		}
		if yyb1876 {
			break
		}
		if yyj1876 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1876-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1884 := z.EncBinary()
		_ = yym1884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1885 := !z.EncBinary()
			yy2arr1885 := z.EncBasicHandle().StructToArray
			var yyfirst1885 bool
			var yyq1885 [4]bool
			_, _, _, _ = yysep1885, yyfirst1885, yyq1885, yy2arr1885
			const yyr1885 bool = false
			yyq1885[0] = x.Kind != ""
			yyq1885[1] = x.APIVersion != ""
			yyq1885[2] = true
			if yyr1885 || yy2arr1885 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1885 int = 1
				for _, b := range yyq1885 {
					if b {
						yynn1885++
					}
				}
				r.EncodeMapStart(yynn1885)
			}
			if yyr1885 || yy2arr1885 {
				if yyq1885[0] {
					yym1887 := z.EncBinary()
					_ = yym1887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1885[0] {
					yyfirst1885 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1885 {
						r.EncodeMapKVSeparator()
					}
					yym1888 := z.EncBinary()
					_ = yym1888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1885 || yy2arr1885 {
				if yysep1885 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1885[1] {
					yym1890 := z.EncBinary()
					_ = yym1890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1885[1] {
					if yyfirst1885 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1885 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1885 {
						r.EncodeMapKVSeparator()
					}
					yym1891 := z.EncBinary()
					_ = yym1891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1885 || yy2arr1885 {
				if yysep1885 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1885[2] {
					yy1893 := &x.ListMeta
					yy1893.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1885[2] {
					if yyfirst1885 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1885 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1885 {
						r.EncodeMapKVSeparator()
					}
					yy1894 := &x.ListMeta
					yy1894.CodecEncodeSelf(e)
				}
			}
			if yyr1885 || yy2arr1885 {
				if yysep1885 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1896 := z.EncBinary()
					_ = yym1896
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				if yyfirst1885 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1885 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1885 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1897 := z.EncBinary()
					_ = yym1897
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep1885 {
				if yyr1885 || yy2arr1885 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1898 := z.DecBinary()
	_ = yym1898
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1899 := r.ReadMapStart()
			if yyl1899 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1899, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1899 := r.ReadArrayStart()
			if yyl1899 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1899, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1900Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1900Slc
	var yyhl1900 bool = l >= 0
	for yyj1900 := 0; ; yyj1900++ {
		if yyhl1900 {
			if yyj1900 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1900 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1900Slc = r.DecodeBytes(yys1900Slc, true, true)
		yys1900 := string(yys1900Slc)
		if !yyhl1900 {
			r.ReadMapKVSeparator()
		}
		switch yys1900 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv1903 := &x.ListMeta
				yyv1903.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1904 := &x.Items
				yym1905 := z.DecBinary()
				_ = yym1905
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv1904), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1900)
		} // end switch yys1900
	} // end for yyj1900
	if !yyhl1900 {
		r.ReadMapEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1906 int
	var yyb1906 bool
	var yyhl1906 bool = l >= 0
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv1909 := &x.ListMeta
		yyv1909.CodecDecodeSelf(d)
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1910 := &x.Items
		yym1911 := z.DecBinary()
		_ = yym1911
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv1910), d)
		}
	}
	for {
		yyj1906++
		if yyhl1906 {
			yyb1906 = yyj1906 > l
		} else {
			yyb1906 = r.CheckBreak()
		}
		if yyb1906 {
			break
		}
		if yyj1906 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1906-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1912 := z.EncBinary()
		_ = yym1912
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1913 := !z.EncBinary()
			yy2arr1913 := z.EncBasicHandle().StructToArray
			var yyfirst1913 bool
			var yyq1913 [4]bool
			_, _, _, _ = yysep1913, yyfirst1913, yyq1913, yy2arr1913
			const yyr1913 bool = false
			yyq1913[0] = x.Kind != ""
			yyq1913[1] = x.APIVersion != ""
			yyq1913[2] = true
			if yyr1913 || yy2arr1913 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1913 int = 1
				for _, b := range yyq1913 {
					if b {
						yynn1913++
					}
				}
				r.EncodeMapStart(yynn1913)
			}
			if yyr1913 || yy2arr1913 {
				if yyq1913[0] {
					yym1915 := z.EncBinary()
					_ = yym1915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1913[0] {
					yyfirst1913 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1913 {
						r.EncodeMapKVSeparator()
					}
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1913 || yy2arr1913 {
				if yysep1913 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1913[1] {
					yym1918 := z.EncBinary()
					_ = yym1918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1913[1] {
					if yyfirst1913 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1913 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1913 {
						r.EncodeMapKVSeparator()
					}
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1913 || yy2arr1913 {
				if yysep1913 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1913[2] {
					yy1921 := &x.ObjectMeta
					yy1921.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1913[2] {
					if yyfirst1913 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1913 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1913 {
						r.EncodeMapKVSeparator()
					}
					yy1922 := &x.ObjectMeta
					yy1922.CodecEncodeSelf(e)
				}
			}
			if yyr1913 || yy2arr1913 {
				if yysep1913 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				if yyfirst1913 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1913 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				if yysep1913 {
					r.EncodeMapKVSeparator()
				}
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep1913 {
				if yyr1913 || yy2arr1913 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1926 := z.DecBinary()
	_ = yym1926
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1927 := r.ReadMapStart()
			if yyl1927 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1927, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1927 := r.ReadArrayStart()
			if yyl1927 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1927, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1928Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1928Slc
	var yyhl1928 bool = l >= 0
	for yyj1928 := 0; ; yyj1928++ {
		if yyhl1928 {
			if yyj1928 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1928 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1928Slc = r.DecodeBytes(yys1928Slc, true, true)
		yys1928 := string(yys1928Slc)
		if !yyhl1928 {
			r.ReadMapKVSeparator()
		}
		switch yys1928 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1931 := &x.ObjectMeta
				yyv1931.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv1932 := &x.Subsets
				yym1933 := z.DecBinary()
				_ = yym1933
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv1932), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1928)
		} // end switch yys1928
	} // end for yyj1928
	if !yyhl1928 {
		r.ReadMapEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1934 int
	var yyb1934 bool
	var yyhl1934 bool = l >= 0
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1937 := &x.ObjectMeta
		yyv1937.CodecDecodeSelf(d)
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv1938 := &x.Subsets
		yym1939 := z.DecBinary()
		_ = yym1939
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv1938), d)
		}
	}
	for {
		yyj1934++
		if yyhl1934 {
			yyb1934 = yyj1934 > l
		} else {
			yyb1934 = r.CheckBreak()
		}
		if yyb1934 {
			break
		}
		if yyj1934 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1934-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1940 := z.EncBinary()
		_ = yym1940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1941 := !z.EncBinary()
			yy2arr1941 := z.EncBasicHandle().StructToArray
			var yyfirst1941 bool
			var yyq1941 [2]bool
			_, _, _, _ = yysep1941, yyfirst1941, yyq1941, yy2arr1941
			const yyr1941 bool = false
			if yyr1941 || yy2arr1941 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1941 int = 2
				for _, b := range yyq1941 {
					if b {
						yynn1941++
					}
				}
				r.EncodeMapStart(yynn1941)
			}
			if yyr1941 || yy2arr1941 {
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym1943 := z.EncBinary()
					_ = yym1943
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				yyfirst1941 = true
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				if yysep1941 {
					r.EncodeMapKVSeparator()
				}
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym1944 := z.EncBinary()
					_ = yym1944
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr1941 || yy2arr1941 {
				if yysep1941 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1946 := z.EncBinary()
					_ = yym1946
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				if yyfirst1941 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1941 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				if yysep1941 {
					r.EncodeMapKVSeparator()
				}
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1947 := z.EncBinary()
					_ = yym1947
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yysep1941 {
				if yyr1941 || yy2arr1941 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1948 := z.DecBinary()
	_ = yym1948
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1949 := r.ReadMapStart()
			if yyl1949 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1949, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1949 := r.ReadArrayStart()
			if yyl1949 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1949, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1950Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1950Slc
	var yyhl1950 bool = l >= 0
	for yyj1950 := 0; ; yyj1950++ {
		if yyhl1950 {
			if yyj1950 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1950 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1950Slc = r.DecodeBytes(yys1950Slc, true, true)
		yys1950 := string(yys1950Slc)
		if !yyhl1950 {
			r.ReadMapKVSeparator()
		}
		switch yys1950 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv1951 := &x.Addresses
				yym1952 := z.DecBinary()
				_ = yym1952
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv1951), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1953 := &x.Ports
				yym1954 := z.DecBinary()
				_ = yym1954
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv1953), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1950)
		} // end switch yys1950
	} // end for yyj1950
	if !yyhl1950 {
		r.ReadMapEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1955 int
	var yyb1955 bool
	var yyhl1955 bool = l >= 0
	yyj1955++
	if yyhl1955 {
		yyb1955 = yyj1955 > l
	} else {
		yyb1955 = r.CheckBreak()
	}
	if yyb1955 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv1956 := &x.Addresses
		yym1957 := z.DecBinary()
		_ = yym1957
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv1956), d)
		}
	}
	yyj1955++
	if yyhl1955 {
		yyb1955 = yyj1955 > l
	} else {
		yyb1955 = r.CheckBreak()
	}
	if yyb1955 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1958 := &x.Ports
		yym1959 := z.DecBinary()
		_ = yym1959
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv1958), d)
		}
	}
	for {
		yyj1955++
		if yyhl1955 {
			yyb1955 = yyj1955 > l
		} else {
			yyb1955 = r.CheckBreak()
		}
		if yyb1955 {
			break
		}
		if yyj1955 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1955-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1960 := z.EncBinary()
		_ = yym1960
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1961 := !z.EncBinary()
			yy2arr1961 := z.EncBasicHandle().StructToArray
			var yyfirst1961 bool
			var yyq1961 [2]bool
			_, _, _, _ = yysep1961, yyfirst1961, yyq1961, yy2arr1961
			const yyr1961 bool = false
			if yyr1961 || yy2arr1961 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1961 int = 2
				for _, b := range yyq1961 {
					if b {
						yynn1961++
					}
				}
				r.EncodeMapStart(yynn1961)
			}
			if yyr1961 || yy2arr1961 {
				yym1963 := z.EncBinary()
				_ = yym1963
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				yyfirst1961 = true
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				if yysep1961 {
					r.EncodeMapKVSeparator()
				}
				yym1964 := z.EncBinary()
				_ = yym1964
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr1961 || yy2arr1961 {
				if yysep1961 {
					r.EncodeArrayEntrySeparator()
				}
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				if yyfirst1961 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1961 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				if yysep1961 {
					r.EncodeMapKVSeparator()
				}
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yysep1961 {
				if yyr1961 || yy2arr1961 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1966 := z.DecBinary()
	_ = yym1966
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1967 := r.ReadMapStart()
			if yyl1967 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1967, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1967 := r.ReadArrayStart()
			if yyl1967 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1967, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1968Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1968Slc
	var yyhl1968 bool = l >= 0
	for yyj1968 := 0; ; yyj1968++ {
		if yyhl1968 {
			if yyj1968 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1968 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1968Slc = r.DecodeBytes(yys1968Slc, true, true)
		yys1968 := string(yys1968Slc)
		if !yyhl1968 {
			r.ReadMapKVSeparator()
		}
		switch yys1968 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1968)
		} // end switch yys1968
	} // end for yyj1968
	if !yyhl1968 {
		r.ReadMapEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1971 int
	var yyb1971 bool
	var yyhl1971 bool = l >= 0
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1971++
	if yyhl1971 {
		yyb1971 = yyj1971 > l
	} else {
		yyb1971 = r.CheckBreak()
	}
	if yyb1971 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj1971++
		if yyhl1971 {
			yyb1971 = yyj1971 > l
		} else {
			yyb1971 = r.CheckBreak()
		}
		if yyb1971 {
			break
		}
		if yyj1971 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1971-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1974 := z.EncBinary()
		_ = yym1974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1975 := !z.EncBinary()
			yy2arr1975 := z.EncBasicHandle().StructToArray
			var yyfirst1975 bool
			var yyq1975 [3]bool
			_, _, _, _ = yysep1975, yyfirst1975, yyq1975, yy2arr1975
			const yyr1975 bool = false
			if yyr1975 || yy2arr1975 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1975 int = 3
				for _, b := range yyq1975 {
					if b {
						yynn1975++
					}
				}
				r.EncodeMapStart(yynn1975)
			}
			if yyr1975 || yy2arr1975 {
				yym1977 := z.EncBinary()
				_ = yym1977
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst1975 = true
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				if yysep1975 {
					r.EncodeMapKVSeparator()
				}
				yym1978 := z.EncBinary()
				_ = yym1978
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1975 || yy2arr1975 {
				if yysep1975 {
					r.EncodeArrayEntrySeparator()
				}
				yym1980 := z.EncBinary()
				_ = yym1980
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				if yyfirst1975 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1975 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				if yysep1975 {
					r.EncodeMapKVSeparator()
				}
				yym1981 := z.EncBinary()
				_ = yym1981
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1975 || yy2arr1975 {
				if yysep1975 {
					r.EncodeArrayEntrySeparator()
				}
				x.Protocol.CodecEncodeSelf(e)
			} else {
				if yyfirst1975 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1975 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				if yysep1975 {
					r.EncodeMapKVSeparator()
				}
				x.Protocol.CodecEncodeSelf(e)
			}
			if yysep1975 {
				if yyr1975 || yy2arr1975 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1983 := z.DecBinary()
	_ = yym1983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl1984 := r.ReadMapStart()
			if yyl1984 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1984, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl1984 := r.ReadArrayStart()
			if yyl1984 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1985Slc
	var yyhl1985 bool = l >= 0
	for yyj1985 := 0; ; yyj1985++ {
		if yyhl1985 {
			if yyj1985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj1985 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys1985Slc = r.DecodeBytes(yys1985Slc, true, true)
		yys1985 := string(yys1985Slc)
		if !yyhl1985 {
			r.ReadMapKVSeparator()
		}
		switch yys1985 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1985)
		} // end switch yys1985
	} // end for yyj1985
	if !yyhl1985 {
		r.ReadMapEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1989 int
	var yyb1989 bool
	var yyhl1989 bool = l >= 0
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj1989++
		if yyhl1989 {
			yyb1989 = yyj1989 > l
		} else {
			yyb1989 = r.CheckBreak()
		}
		if yyb1989 {
			break
		}
		if yyj1989 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj1989-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1993 := z.EncBinary()
		_ = yym1993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1994 := !z.EncBinary()
			yy2arr1994 := z.EncBasicHandle().StructToArray
			var yyfirst1994 bool
			var yyq1994 [4]bool
			_, _, _, _ = yysep1994, yyfirst1994, yyq1994, yy2arr1994
			const yyr1994 bool = false
			yyq1994[0] = x.Kind != ""
			yyq1994[1] = x.APIVersion != ""
			yyq1994[2] = true
			if yyr1994 || yy2arr1994 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1994 int = 1
				for _, b := range yyq1994 {
					if b {
						yynn1994++
					}
				}
				r.EncodeMapStart(yynn1994)
			}
			if yyr1994 || yy2arr1994 {
				if yyq1994[0] {
					yym1996 := z.EncBinary()
					_ = yym1996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1994[0] {
					yyfirst1994 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep1994 {
						r.EncodeMapKVSeparator()
					}
					yym1997 := z.EncBinary()
					_ = yym1997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1994 || yy2arr1994 {
				if yysep1994 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1994[1] {
					yym1999 := z.EncBinary()
					_ = yym1999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1994[1] {
					if yyfirst1994 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1994 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep1994 {
						r.EncodeMapKVSeparator()
					}
					yym2000 := z.EncBinary()
					_ = yym2000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1994 || yy2arr1994 {
				if yysep1994 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq1994[2] {
					yy2002 := &x.ListMeta
					yy2002.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1994[2] {
					if yyfirst1994 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst1994 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep1994 {
						r.EncodeMapKVSeparator()
					}
					yy2003 := &x.ListMeta
					yy2003.CodecEncodeSelf(e)
				}
			}
			if yyr1994 || yy2arr1994 {
				if yysep1994 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2005 := z.EncBinary()
					_ = yym2005
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				if yyfirst1994 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst1994 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep1994 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2006 := z.EncBinary()
					_ = yym2006
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep1994 {
				if yyr1994 || yy2arr1994 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2007 := z.DecBinary()
	_ = yym2007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2008 := r.ReadMapStart()
			if yyl2008 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2008, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2008 := r.ReadArrayStart()
			if yyl2008 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2009Slc
	var yyhl2009 bool = l >= 0
	for yyj2009 := 0; ; yyj2009++ {
		if yyhl2009 {
			if yyj2009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2009 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2009Slc = r.DecodeBytes(yys2009Slc, true, true)
		yys2009 := string(yys2009Slc)
		if !yyhl2009 {
			r.ReadMapKVSeparator()
		}
		switch yys2009 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2012 := &x.ListMeta
				yyv2012.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2013 := &x.Items
				yym2014 := z.DecBinary()
				_ = yym2014
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2013), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2009)
		} // end switch yys2009
	} // end for yyj2009
	if !yyhl2009 {
		r.ReadMapEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2015 int
	var yyb2015 bool
	var yyhl2015 bool = l >= 0
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2018 := &x.ListMeta
		yyv2018.CodecDecodeSelf(d)
	}
	yyj2015++
	if yyhl2015 {
		yyb2015 = yyj2015 > l
	} else {
		yyb2015 = r.CheckBreak()
	}
	if yyb2015 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2019 := &x.Items
		yym2020 := z.DecBinary()
		_ = yym2020
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2019), d)
		}
	}
	for {
		yyj2015++
		if yyhl2015 {
			yyb2015 = yyj2015 > l
		} else {
			yyb2015 = r.CheckBreak()
		}
		if yyb2015 {
			break
		}
		if yyj2015 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2015-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2021 := z.EncBinary()
		_ = yym2021
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2022 := !z.EncBinary()
			yy2arr2022 := z.EncBasicHandle().StructToArray
			var yyfirst2022 bool
			var yyq2022 [4]bool
			_, _, _, _ = yysep2022, yyfirst2022, yyq2022, yy2arr2022
			const yyr2022 bool = false
			yyq2022[0] = x.PodCIDR != ""
			yyq2022[1] = x.ExternalID != ""
			yyq2022[2] = x.ProviderID != ""
			yyq2022[3] = x.Unschedulable != false
			if yyr2022 || yy2arr2022 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2022 int = 0
				for _, b := range yyq2022 {
					if b {
						yynn2022++
					}
				}
				r.EncodeMapStart(yynn2022)
			}
			if yyr2022 || yy2arr2022 {
				if yyq2022[0] {
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2022[0] {
					yyfirst2022 = true
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					if yysep2022 {
						r.EncodeMapKVSeparator()
					}
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2022 || yy2arr2022 {
				if yysep2022 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2022[1] {
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2022[1] {
					if yyfirst2022 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2022 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					if yysep2022 {
						r.EncodeMapKVSeparator()
					}
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2022 || yy2arr2022 {
				if yysep2022 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2022[2] {
					yym2030 := z.EncBinary()
					_ = yym2030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2022[2] {
					if yyfirst2022 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2022 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					if yysep2022 {
						r.EncodeMapKVSeparator()
					}
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2022 || yy2arr2022 {
				if yysep2022 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2022[3] {
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2022[3] {
					if yyfirst2022 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2022 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					if yysep2022 {
						r.EncodeMapKVSeparator()
					}
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2022 {
				if yyr2022 || yy2arr2022 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2035 := z.DecBinary()
	_ = yym2035
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2036 := r.ReadMapStart()
			if yyl2036 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2036, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2036 := r.ReadArrayStart()
			if yyl2036 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2036, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2037Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2037Slc
	var yyhl2037 bool = l >= 0
	for yyj2037 := 0; ; yyj2037++ {
		if yyhl2037 {
			if yyj2037 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2037 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2037Slc = r.DecodeBytes(yys2037Slc, true, true)
		yys2037 := string(yys2037Slc)
		if !yyhl2037 {
			r.ReadMapKVSeparator()
		}
		switch yys2037 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2037)
		} // end switch yys2037
	} // end for yyj2037
	if !yyhl2037 {
		r.ReadMapEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2042 int
	var yyb2042 bool
	var yyhl2042 bool = l >= 0
	yyj2042++
	if yyhl2042 {
		yyb2042 = yyj2042 > l
	} else {
		yyb2042 = r.CheckBreak()
	}
	if yyb2042 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2042++
	if yyhl2042 {
		yyb2042 = yyj2042 > l
	} else {
		yyb2042 = r.CheckBreak()
	}
	if yyb2042 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2042++
	if yyhl2042 {
		yyb2042 = yyj2042 > l
	} else {
		yyb2042 = r.CheckBreak()
	}
	if yyb2042 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2042++
	if yyhl2042 {
		yyb2042 = yyj2042 > l
	} else {
		yyb2042 = r.CheckBreak()
	}
	if yyb2042 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2042++
		if yyhl2042 {
			yyb2042 = yyj2042 > l
		} else {
			yyb2042 = r.CheckBreak()
		}
		if yyb2042 {
			break
		}
		if yyj2042 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2042-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2047 := z.EncBinary()
		_ = yym2047
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2048 := !z.EncBinary()
			yy2arr2048 := z.EncBasicHandle().StructToArray
			var yyfirst2048 bool
			var yyq2048 [1]bool
			_, _, _, _ = yysep2048, yyfirst2048, yyq2048, yy2arr2048
			const yyr2048 bool = false
			if yyr2048 || yy2arr2048 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2048 int = 1
				for _, b := range yyq2048 {
					if b {
						yynn2048++
					}
				}
				r.EncodeMapStart(yynn2048)
			}
			if yyr2048 || yy2arr2048 {
				yym2050 := z.EncBinary()
				_ = yym2050
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				yyfirst2048 = true
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				if yysep2048 {
					r.EncodeMapKVSeparator()
				}
				yym2051 := z.EncBinary()
				_ = yym2051
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2048 {
				if yyr2048 || yy2arr2048 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2052 := z.DecBinary()
	_ = yym2052
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2053 := r.ReadMapStart()
			if yyl2053 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2053, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2053 := r.ReadArrayStart()
			if yyl2053 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2053, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2054Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2054Slc
	var yyhl2054 bool = l >= 0
	for yyj2054 := 0; ; yyj2054++ {
		if yyhl2054 {
			if yyj2054 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2054 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2054Slc = r.DecodeBytes(yys2054Slc, true, true)
		yys2054 := string(yys2054Slc)
		if !yyhl2054 {
			r.ReadMapKVSeparator()
		}
		switch yys2054 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2054)
		} // end switch yys2054
	} // end for yyj2054
	if !yyhl2054 {
		r.ReadMapEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2056 int
	var yyb2056 bool
	var yyhl2056 bool = l >= 0
	yyj2056++
	if yyhl2056 {
		yyb2056 = yyj2056 > l
	} else {
		yyb2056 = r.CheckBreak()
	}
	if yyb2056 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2056++
		if yyhl2056 {
			yyb2056 = yyj2056 > l
		} else {
			yyb2056 = r.CheckBreak()
		}
		if yyb2056 {
			break
		}
		if yyj2056 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2056-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2058 := z.EncBinary()
		_ = yym2058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2059 := !z.EncBinary()
			yy2arr2059 := z.EncBasicHandle().StructToArray
			var yyfirst2059 bool
			var yyq2059 [1]bool
			_, _, _, _ = yysep2059, yyfirst2059, yyq2059, yy2arr2059
			const yyr2059 bool = false
			yyq2059[0] = true
			if yyr2059 || yy2arr2059 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2059 int = 0
				for _, b := range yyq2059 {
					if b {
						yynn2059++
					}
				}
				r.EncodeMapStart(yynn2059)
			}
			if yyr2059 || yy2arr2059 {
				if yyq2059[0] {
					yy2061 := &x.KubeletEndpoint
					yy2061.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2059[0] {
					yyfirst2059 = true
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					if yysep2059 {
						r.EncodeMapKVSeparator()
					}
					yy2062 := &x.KubeletEndpoint
					yy2062.CodecEncodeSelf(e)
				}
			}
			if yysep2059 {
				if yyr2059 || yy2arr2059 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2063 := z.DecBinary()
	_ = yym2063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2064 := r.ReadMapStart()
			if yyl2064 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2064, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2064 := r.ReadArrayStart()
			if yyl2064 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2064, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2065Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2065Slc
	var yyhl2065 bool = l >= 0
	for yyj2065 := 0; ; yyj2065++ {
		if yyhl2065 {
			if yyj2065 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2065 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2065Slc = r.DecodeBytes(yys2065Slc, true, true)
		yys2065 := string(yys2065Slc)
		if !yyhl2065 {
			r.ReadMapKVSeparator()
		}
		switch yys2065 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2066 := &x.KubeletEndpoint
				yyv2066.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2065)
		} // end switch yys2065
	} // end for yyj2065
	if !yyhl2065 {
		r.ReadMapEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2067 int
	var yyb2067 bool
	var yyhl2067 bool = l >= 0
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2068 := &x.KubeletEndpoint
		yyv2068.CodecDecodeSelf(d)
	}
	for {
		yyj2067++
		if yyhl2067 {
			yyb2067 = yyj2067 > l
		} else {
			yyb2067 = r.CheckBreak()
		}
		if yyb2067 {
			break
		}
		if yyj2067 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2067-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2069 := z.EncBinary()
		_ = yym2069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2070 := !z.EncBinary()
			yy2arr2070 := z.EncBasicHandle().StructToArray
			var yyfirst2070 bool
			var yyq2070 [8]bool
			_, _, _, _ = yysep2070, yyfirst2070, yyq2070, yy2arr2070
			const yyr2070 bool = false
			if yyr2070 || yy2arr2070 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2070 int = 8
				for _, b := range yyq2070 {
					if b {
						yynn2070++
					}
				}
				r.EncodeMapStart(yynn2070)
			}
			if yyr2070 || yy2arr2070 {
				yym2072 := z.EncBinary()
				_ = yym2072
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				yyfirst2070 = true
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				if yysep2070 {
					r.EncodeMapKVSeparator()
				}
				yym2073 := z.EncBinary()
				_ = yym2073
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2070 || yy2arr2070 {
				if yysep2070 {
					r.EncodeArrayEntrySeparator()
				}
				yym2075 := z.EncBinary()
				_ = yym2075
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				if yyfirst2070 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2070 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				if yysep2070 {
					r.EncodeMapKVSeparator()
				}
				yym2076 := z.EncBinary()
				_ = yym2076
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2070 || yy2arr2070 {
				if yysep2070 {
					r.EncodeArrayEntrySeparator()
				}
				yym2078 := z.EncBinary()
				_ = yym2078
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				if yyfirst2070 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2070 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				if yysep2070 {
					r.EncodeMapKVSeparator()
				}
				yym2079 := z.EncBinary()
				_ = yym2079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2070 || yy2arr2070 {
				if yysep2070 {
					r.EncodeArrayEntrySeparator()
				}
				yym2081 := z.EncBinary()
				_ = yym2081
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				if yyfirst2070 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2070 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				if yysep2070 {
					r.EncodeMapKVSeparator()
				}
				yym2082 := z.EncBinary()
				_ = yym2082
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2070 || yy2arr2070 {
				if yysep2070 {
					r.EncodeArrayEntrySeparator()
				}
				yym2084 := z.EncBinary()
				_ = yym2084
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				if yyfirst2070 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2070 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				if yysep2070 {
					r.EncodeMapKVSeparator()
				}
				yym2085 := z.EncBinary()
				_ = yym2085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2070 || yy2arr2070 {
				if yysep2070 {
					r.EncodeArrayEntrySeparator()
				}
				yym2087 := z.EncBinary()
				_ = yym2087
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				if yyfirst2070 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2070 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				if yysep2070 {
					r.EncodeMapKVSeparator()
				}
				yym2088 := z.EncBinary()
				_ = yym2088
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2070 || yy2arr2070 {
				if yysep2070 {
					r.EncodeArrayEntrySeparator()
				}
				yym2090 := z.EncBinary()
				_ = yym2090
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				if yyfirst2070 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2070 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				if yysep2070 {
					r.EncodeMapKVSeparator()
				}
				yym2091 := z.EncBinary()
				_ = yym2091
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2070 || yy2arr2070 {
				if yysep2070 {
					r.EncodeArrayEntrySeparator()
				}
				yym2093 := z.EncBinary()
				_ = yym2093
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				if yyfirst2070 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2070 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				if yysep2070 {
					r.EncodeMapKVSeparator()
				}
				yym2094 := z.EncBinary()
				_ = yym2094
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2070 {
				if yyr2070 || yy2arr2070 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2095 := z.DecBinary()
	_ = yym2095
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2096 := r.ReadMapStart()
			if yyl2096 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2096, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2096 := r.ReadArrayStart()
			if yyl2096 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2096, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2097Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2097Slc
	var yyhl2097 bool = l >= 0
	for yyj2097 := 0; ; yyj2097++ {
		if yyhl2097 {
			if yyj2097 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2097 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2097Slc = r.DecodeBytes(yys2097Slc, true, true)
		yys2097 := string(yys2097Slc)
		if !yyhl2097 {
			r.ReadMapKVSeparator()
		}
		switch yys2097 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2097)
		} // end switch yys2097
	} // end for yyj2097
	if !yyhl2097 {
		r.ReadMapEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2106 int
	var yyb2106 bool
	var yyhl2106 bool = l >= 0
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2106++
	if yyhl2106 {
		yyb2106 = yyj2106 > l
	} else {
		yyb2106 = r.CheckBreak()
	}
	if yyb2106 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2106++
		if yyhl2106 {
			yyb2106 = yyj2106 > l
		} else {
			yyb2106 = r.CheckBreak()
		}
		if yyb2106 {
			break
		}
		if yyj2106 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2106-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2115 := z.EncBinary()
		_ = yym2115
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2116 := !z.EncBinary()
			yy2arr2116 := z.EncBasicHandle().StructToArray
			var yyfirst2116 bool
			var yyq2116 [6]bool
			_, _, _, _ = yysep2116, yyfirst2116, yyq2116, yy2arr2116
			const yyr2116 bool = false
			yyq2116[0] = len(x.Capacity) != 0
			yyq2116[1] = x.Phase != ""
			yyq2116[2] = len(x.Conditions) != 0
			yyq2116[3] = len(x.Addresses) != 0
			yyq2116[4] = true
			yyq2116[5] = true
			if yyr2116 || yy2arr2116 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2116 int = 0
				for _, b := range yyq2116 {
					if b {
						yynn2116++
					}
				}
				r.EncodeMapStart(yynn2116)
			}
			if yyr2116 || yy2arr2116 {
				if yyq2116[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2116[0] {
					yyfirst2116 = true
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if yysep2116 {
						r.EncodeMapKVSeparator()
					}
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2116 || yy2arr2116 {
				if yysep2116 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2116[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2116[1] {
					if yyfirst2116 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2116 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					if yysep2116 {
						r.EncodeMapKVSeparator()
					}
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2116 || yy2arr2116 {
				if yysep2116 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2116[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2120 := z.EncBinary()
						_ = yym2120
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2116[2] {
					if yyfirst2116 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2116 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if yysep2116 {
						r.EncodeMapKVSeparator()
					}
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2121 := z.EncBinary()
						_ = yym2121
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2116 || yy2arr2116 {
				if yysep2116 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2116[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2123 := z.EncBinary()
						_ = yym2123
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2116[3] {
					if yyfirst2116 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2116 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if yysep2116 {
						r.EncodeMapKVSeparator()
					}
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2124 := z.EncBinary()
						_ = yym2124
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2116 || yy2arr2116 {
				if yysep2116 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2116[4] {
					yy2126 := &x.DaemonEndpoints
					yy2126.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2116[4] {
					if yyfirst2116 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2116 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					if yysep2116 {
						r.EncodeMapKVSeparator()
					}
					yy2127 := &x.DaemonEndpoints
					yy2127.CodecEncodeSelf(e)
				}
			}
			if yyr2116 || yy2arr2116 {
				if yysep2116 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2116[5] {
					yy2129 := &x.NodeInfo
					yy2129.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2116[5] {
					if yyfirst2116 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2116 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					if yysep2116 {
						r.EncodeMapKVSeparator()
					}
					yy2130 := &x.NodeInfo
					yy2130.CodecEncodeSelf(e)
				}
			}
			if yysep2116 {
				if yyr2116 || yy2arr2116 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2131 := z.DecBinary()
	_ = yym2131
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2132 := r.ReadMapStart()
			if yyl2132 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2132, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2132 := r.ReadArrayStart()
			if yyl2132 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2132, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2133Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2133Slc
	var yyhl2133 bool = l >= 0
	for yyj2133 := 0; ; yyj2133++ {
		if yyhl2133 {
			if yyj2133 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2133 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2133Slc = r.DecodeBytes(yys2133Slc, true, true)
		yys2133 := string(yys2133Slc)
		if !yyhl2133 {
			r.ReadMapKVSeparator()
		}
		switch yys2133 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2134 := &x.Capacity
				yyv2134.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2136 := &x.Conditions
				yym2137 := z.DecBinary()
				_ = yym2137
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2136), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2138 := &x.Addresses
				yym2139 := z.DecBinary()
				_ = yym2139
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2138), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2140 := &x.DaemonEndpoints
				yyv2140.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2141 := &x.NodeInfo
				yyv2141.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2133)
		} // end switch yys2133
	} // end for yyj2133
	if !yyhl2133 {
		r.ReadMapEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2142 int
	var yyb2142 bool
	var yyhl2142 bool = l >= 0
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2143 := &x.Capacity
		yyv2143.CodecDecodeSelf(d)
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2145 := &x.Conditions
		yym2146 := z.DecBinary()
		_ = yym2146
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2145), d)
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2147 := &x.Addresses
		yym2148 := z.DecBinary()
		_ = yym2148
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2147), d)
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2149 := &x.DaemonEndpoints
		yyv2149.CodecDecodeSelf(d)
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2150 := &x.NodeInfo
		yyv2150.CodecDecodeSelf(d)
	}
	for {
		yyj2142++
		if yyhl2142 {
			yyb2142 = yyj2142 > l
		} else {
			yyb2142 = r.CheckBreak()
		}
		if yyb2142 {
			break
		}
		if yyj2142 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2142-1, "")
	}
	r.ReadArrayEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2151 := z.EncBinary()
	_ = yym2151
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2152 := z.DecBinary()
	_ = yym2152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2153 := z.EncBinary()
	_ = yym2153
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2154 := z.DecBinary()
	_ = yym2154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2155 := z.EncBinary()
		_ = yym2155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2156 := !z.EncBinary()
			yy2arr2156 := z.EncBasicHandle().StructToArray
			var yyfirst2156 bool
			var yyq2156 [6]bool
			_, _, _, _ = yysep2156, yyfirst2156, yyq2156, yy2arr2156
			const yyr2156 bool = false
			yyq2156[2] = true
			yyq2156[3] = true
			yyq2156[4] = x.Reason != ""
			yyq2156[5] = x.Message != ""
			if yyr2156 || yy2arr2156 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2156 int = 2
				for _, b := range yyq2156 {
					if b {
						yynn2156++
					}
				}
				r.EncodeMapStart(yynn2156)
			}
			if yyr2156 || yy2arr2156 {
				x.Type.CodecEncodeSelf(e)
			} else {
				yyfirst2156 = true
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				if yysep2156 {
					r.EncodeMapKVSeparator()
				}
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2156 || yy2arr2156 {
				if yysep2156 {
					r.EncodeArrayEntrySeparator()
				}
				x.Status.CodecEncodeSelf(e)
			} else {
				if yyfirst2156 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2156 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				if yysep2156 {
					r.EncodeMapKVSeparator()
				}
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2156 || yy2arr2156 {
				if yysep2156 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2156[2] {
					yy2160 := &x.LastHeartbeatTime
					yym2161 := z.EncBinary()
					_ = yym2161
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2160) {
					} else if yym2161 {
						z.EncBinaryMarshal(yy2160)
					} else if !yym2161 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2160)
					} else {
						z.EncFallback(yy2160)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2156[2] {
					if yyfirst2156 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2156 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					if yysep2156 {
						r.EncodeMapKVSeparator()
					}
					yy2162 := &x.LastHeartbeatTime
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2162) {
					} else if yym2163 {
						z.EncBinaryMarshal(yy2162)
					} else if !yym2163 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2162)
					} else {
						z.EncFallback(yy2162)
					}
				}
			}
			if yyr2156 || yy2arr2156 {
				if yysep2156 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2156[3] {
					yy2165 := &x.LastTransitionTime
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2165) {
					} else if yym2166 {
						z.EncBinaryMarshal(yy2165)
					} else if !yym2166 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2165)
					} else {
						z.EncFallback(yy2165)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2156[3] {
					if yyfirst2156 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2156 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					if yysep2156 {
						r.EncodeMapKVSeparator()
					}
					yy2167 := &x.LastTransitionTime
					yym2168 := z.EncBinary()
					_ = yym2168
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2167) {
					} else if yym2168 {
						z.EncBinaryMarshal(yy2167)
					} else if !yym2168 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2167)
					} else {
						z.EncFallback(yy2167)
					}
				}
			}
			if yyr2156 || yy2arr2156 {
				if yysep2156 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2156[4] {
					yym2170 := z.EncBinary()
					_ = yym2170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2156[4] {
					if yyfirst2156 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2156 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep2156 {
						r.EncodeMapKVSeparator()
					}
					yym2171 := z.EncBinary()
					_ = yym2171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2156 || yy2arr2156 {
				if yysep2156 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2156[5] {
					yym2173 := z.EncBinary()
					_ = yym2173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2156[5] {
					if yyfirst2156 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2156 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep2156 {
						r.EncodeMapKVSeparator()
					}
					yym2174 := z.EncBinary()
					_ = yym2174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2156 {
				if yyr2156 || yy2arr2156 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2175 := z.DecBinary()
	_ = yym2175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2176 := r.ReadMapStart()
			if yyl2176 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2176, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2176 := r.ReadArrayStart()
			if yyl2176 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2177Slc
	var yyhl2177 bool = l >= 0
	for yyj2177 := 0; ; yyj2177++ {
		if yyhl2177 {
			if yyj2177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2177 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2177Slc = r.DecodeBytes(yys2177Slc, true, true)
		yys2177 := string(yys2177Slc)
		if !yyhl2177 {
			r.ReadMapKVSeparator()
		}
		switch yys2177 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_util.Time{}
			} else {
				yyv2180 := &x.LastHeartbeatTime
				yym2181 := z.DecBinary()
				_ = yym2181
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2180) {
				} else if yym2181 {
					z.DecBinaryUnmarshal(yyv2180)
				} else if !yym2181 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2180)
				} else {
					z.DecFallback(yyv2180, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_util.Time{}
			} else {
				yyv2182 := &x.LastTransitionTime
				yym2183 := z.DecBinary()
				_ = yym2183
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2182) {
				} else if yym2183 {
					z.DecBinaryUnmarshal(yyv2182)
				} else if !yym2183 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2182)
				} else {
					z.DecFallback(yyv2182, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2177)
		} // end switch yys2177
	} // end for yyj2177
	if !yyhl2177 {
		r.ReadMapEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2186 int
	var yyb2186 bool
	var yyhl2186 bool = l >= 0
	yyj2186++
	if yyhl2186 {
		yyb2186 = yyj2186 > l
	} else {
		yyb2186 = r.CheckBreak()
	}
	if yyb2186 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2186++
	if yyhl2186 {
		yyb2186 = yyj2186 > l
	} else {
		yyb2186 = r.CheckBreak()
	}
	if yyb2186 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2186++
	if yyhl2186 {
		yyb2186 = yyj2186 > l
	} else {
		yyb2186 = r.CheckBreak()
	}
	if yyb2186 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_util.Time{}
	} else {
		yyv2189 := &x.LastHeartbeatTime
		yym2190 := z.DecBinary()
		_ = yym2190
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2189) {
		} else if yym2190 {
			z.DecBinaryUnmarshal(yyv2189)
		} else if !yym2190 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2189)
		} else {
			z.DecFallback(yyv2189, false)
		}
	}
	yyj2186++
	if yyhl2186 {
		yyb2186 = yyj2186 > l
	} else {
		yyb2186 = r.CheckBreak()
	}
	if yyb2186 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_util.Time{}
	} else {
		yyv2191 := &x.LastTransitionTime
		yym2192 := z.DecBinary()
		_ = yym2192
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2191) {
		} else if yym2192 {
			z.DecBinaryUnmarshal(yyv2191)
		} else if !yym2192 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2191)
		} else {
			z.DecFallback(yyv2191, false)
		}
	}
	yyj2186++
	if yyhl2186 {
		yyb2186 = yyj2186 > l
	} else {
		yyb2186 = r.CheckBreak()
	}
	if yyb2186 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2186++
	if yyhl2186 {
		yyb2186 = yyj2186 > l
	} else {
		yyb2186 = r.CheckBreak()
	}
	if yyb2186 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2186++
		if yyhl2186 {
			yyb2186 = yyj2186 > l
		} else {
			yyb2186 = r.CheckBreak()
		}
		if yyb2186 {
			break
		}
		if yyj2186 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2186-1, "")
	}
	r.ReadArrayEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2195 := z.EncBinary()
	_ = yym2195
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2196 := z.DecBinary()
	_ = yym2196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2197 := z.EncBinary()
		_ = yym2197
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2198 := !z.EncBinary()
			yy2arr2198 := z.EncBasicHandle().StructToArray
			var yyfirst2198 bool
			var yyq2198 [2]bool
			_, _, _, _ = yysep2198, yyfirst2198, yyq2198, yy2arr2198
			const yyr2198 bool = false
			if yyr2198 || yy2arr2198 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2198 int = 2
				for _, b := range yyq2198 {
					if b {
						yynn2198++
					}
				}
				r.EncodeMapStart(yynn2198)
			}
			if yyr2198 || yy2arr2198 {
				x.Type.CodecEncodeSelf(e)
			} else {
				yyfirst2198 = true
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				if yysep2198 {
					r.EncodeMapKVSeparator()
				}
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2198 || yy2arr2198 {
				if yysep2198 {
					r.EncodeArrayEntrySeparator()
				}
				yym2201 := z.EncBinary()
				_ = yym2201
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				if yyfirst2198 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2198 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				if yysep2198 {
					r.EncodeMapKVSeparator()
				}
				yym2202 := z.EncBinary()
				_ = yym2202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2198 {
				if yyr2198 || yy2arr2198 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2203 := z.DecBinary()
	_ = yym2203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2204 := r.ReadMapStart()
			if yyl2204 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2204, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2204 := r.ReadArrayStart()
			if yyl2204 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2205Slc
	var yyhl2205 bool = l >= 0
	for yyj2205 := 0; ; yyj2205++ {
		if yyhl2205 {
			if yyj2205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2205 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2205Slc = r.DecodeBytes(yys2205Slc, true, true)
		yys2205 := string(yys2205Slc)
		if !yyhl2205 {
			r.ReadMapKVSeparator()
		}
		switch yys2205 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2205)
		} // end switch yys2205
	} // end for yyj2205
	if !yyhl2205 {
		r.ReadMapEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2208 int
	var yyb2208 bool
	var yyhl2208 bool = l >= 0
	yyj2208++
	if yyhl2208 {
		yyb2208 = yyj2208 > l
	} else {
		yyb2208 = r.CheckBreak()
	}
	if yyb2208 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2208++
	if yyhl2208 {
		yyb2208 = yyj2208 > l
	} else {
		yyb2208 = r.CheckBreak()
	}
	if yyb2208 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2208++
		if yyhl2208 {
			yyb2208 = yyj2208 > l
		} else {
			yyb2208 = r.CheckBreak()
		}
		if yyb2208 {
			break
		}
		if yyj2208 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2208-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2211 := z.EncBinary()
		_ = yym2211
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2212 := !z.EncBinary()
			yy2arr2212 := z.EncBasicHandle().StructToArray
			var yyfirst2212 bool
			var yyq2212 [1]bool
			_, _, _, _ = yysep2212, yyfirst2212, yyq2212, yy2arr2212
			const yyr2212 bool = false
			yyq2212[0] = len(x.Capacity) != 0
			if yyr2212 || yy2arr2212 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2212 int = 0
				for _, b := range yyq2212 {
					if b {
						yynn2212++
					}
				}
				r.EncodeMapStart(yynn2212)
			}
			if yyr2212 || yy2arr2212 {
				if yyq2212[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2212[0] {
					yyfirst2212 = true
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if yysep2212 {
						r.EncodeMapKVSeparator()
					}
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2212 {
				if yyr2212 || yy2arr2212 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2214 := z.DecBinary()
	_ = yym2214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2215 := r.ReadMapStart()
			if yyl2215 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2215, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2215 := r.ReadArrayStart()
			if yyl2215 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2216Slc
	var yyhl2216 bool = l >= 0
	for yyj2216 := 0; ; yyj2216++ {
		if yyhl2216 {
			if yyj2216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2216 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2216Slc = r.DecodeBytes(yys2216Slc, true, true)
		yys2216 := string(yys2216Slc)
		if !yyhl2216 {
			r.ReadMapKVSeparator()
		}
		switch yys2216 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2217 := &x.Capacity
				yyv2217.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2216)
		} // end switch yys2216
	} // end for yyj2216
	if !yyhl2216 {
		r.ReadMapEnd()
	}
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2218 int
	var yyb2218 bool
	var yyhl2218 bool = l >= 0
	yyj2218++
	if yyhl2218 {
		yyb2218 = yyj2218 > l
	} else {
		yyb2218 = r.CheckBreak()
	}
	if yyb2218 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2219 := &x.Capacity
		yyv2219.CodecDecodeSelf(d)
	}
	for {
		yyj2218++
		if yyhl2218 {
			yyb2218 = yyj2218 > l
		} else {
			yyb2218 = r.CheckBreak()
		}
		if yyb2218 {
			break
		}
		if yyj2218 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2218-1, "")
	}
	r.ReadArrayEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2220 := z.EncBinary()
	_ = yym2220
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2221 := z.DecBinary()
	_ = yym2221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2222 := z.EncBinary()
		_ = yym2222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2223 := z.DecBinary()
	_ = yym2223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2224 := z.EncBinary()
		_ = yym2224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2225 := !z.EncBinary()
			yy2arr2225 := z.EncBasicHandle().StructToArray
			var yyfirst2225 bool
			var yyq2225 [5]bool
			_, _, _, _ = yysep2225, yyfirst2225, yyq2225, yy2arr2225
			const yyr2225 bool = false
			yyq2225[0] = x.Kind != ""
			yyq2225[1] = x.APIVersion != ""
			yyq2225[2] = true
			yyq2225[3] = true
			yyq2225[4] = true
			if yyr2225 || yy2arr2225 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2225 int = 0
				for _, b := range yyq2225 {
					if b {
						yynn2225++
					}
				}
				r.EncodeMapStart(yynn2225)
			}
			if yyr2225 || yy2arr2225 {
				if yyq2225[0] {
					yym2227 := z.EncBinary()
					_ = yym2227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2225[0] {
					yyfirst2225 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2225 {
						r.EncodeMapKVSeparator()
					}
					yym2228 := z.EncBinary()
					_ = yym2228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2225 || yy2arr2225 {
				if yysep2225 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2225[1] {
					yym2230 := z.EncBinary()
					_ = yym2230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2225[1] {
					if yyfirst2225 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2225 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2225 {
						r.EncodeMapKVSeparator()
					}
					yym2231 := z.EncBinary()
					_ = yym2231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2225 || yy2arr2225 {
				if yysep2225 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2225[2] {
					yy2233 := &x.ObjectMeta
					yy2233.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2225[2] {
					if yyfirst2225 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2225 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2225 {
						r.EncodeMapKVSeparator()
					}
					yy2234 := &x.ObjectMeta
					yy2234.CodecEncodeSelf(e)
				}
			}
			if yyr2225 || yy2arr2225 {
				if yysep2225 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2225[3] {
					yy2236 := &x.Spec
					yy2236.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2225[3] {
					if yyfirst2225 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2225 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep2225 {
						r.EncodeMapKVSeparator()
					}
					yy2237 := &x.Spec
					yy2237.CodecEncodeSelf(e)
				}
			}
			if yyr2225 || yy2arr2225 {
				if yysep2225 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2225[4] {
					yy2239 := &x.Status
					yy2239.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2225[4] {
					if yyfirst2225 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2225 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep2225 {
						r.EncodeMapKVSeparator()
					}
					yy2240 := &x.Status
					yy2240.CodecEncodeSelf(e)
				}
			}
			if yysep2225 {
				if yyr2225 || yy2arr2225 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2241 := z.DecBinary()
	_ = yym2241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2242 := r.ReadMapStart()
			if yyl2242 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2242, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2242 := r.ReadArrayStart()
			if yyl2242 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2243Slc
	var yyhl2243 bool = l >= 0
	for yyj2243 := 0; ; yyj2243++ {
		if yyhl2243 {
			if yyj2243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2243 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2243Slc = r.DecodeBytes(yys2243Slc, true, true)
		yys2243 := string(yys2243Slc)
		if !yyhl2243 {
			r.ReadMapKVSeparator()
		}
		switch yys2243 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2246 := &x.ObjectMeta
				yyv2246.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2247 := &x.Spec
				yyv2247.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2248 := &x.Status
				yyv2248.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2243)
		} // end switch yys2243
	} // end for yyj2243
	if !yyhl2243 {
		r.ReadMapEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2249 int
	var yyb2249 bool
	var yyhl2249 bool = l >= 0
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2252 := &x.ObjectMeta
		yyv2252.CodecDecodeSelf(d)
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2253 := &x.Spec
		yyv2253.CodecDecodeSelf(d)
	}
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2254 := &x.Status
		yyv2254.CodecDecodeSelf(d)
	}
	for {
		yyj2249++
		if yyhl2249 {
			yyb2249 = yyj2249 > l
		} else {
			yyb2249 = r.CheckBreak()
		}
		if yyb2249 {
			break
		}
		if yyj2249 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2249-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2255 := z.EncBinary()
		_ = yym2255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2256 := !z.EncBinary()
			yy2arr2256 := z.EncBasicHandle().StructToArray
			var yyfirst2256 bool
			var yyq2256 [4]bool
			_, _, _, _ = yysep2256, yyfirst2256, yyq2256, yy2arr2256
			const yyr2256 bool = false
			yyq2256[0] = x.Kind != ""
			yyq2256[1] = x.APIVersion != ""
			yyq2256[2] = true
			if yyr2256 || yy2arr2256 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2256 int = 1
				for _, b := range yyq2256 {
					if b {
						yynn2256++
					}
				}
				r.EncodeMapStart(yynn2256)
			}
			if yyr2256 || yy2arr2256 {
				if yyq2256[0] {
					yym2258 := z.EncBinary()
					_ = yym2258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2256[0] {
					yyfirst2256 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2256 {
						r.EncodeMapKVSeparator()
					}
					yym2259 := z.EncBinary()
					_ = yym2259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2256 || yy2arr2256 {
				if yysep2256 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2256[1] {
					yym2261 := z.EncBinary()
					_ = yym2261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2256[1] {
					if yyfirst2256 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2256 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2256 {
						r.EncodeMapKVSeparator()
					}
					yym2262 := z.EncBinary()
					_ = yym2262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2256 || yy2arr2256 {
				if yysep2256 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2256[2] {
					yy2264 := &x.ListMeta
					yy2264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2256[2] {
					if yyfirst2256 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2256 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2256 {
						r.EncodeMapKVSeparator()
					}
					yy2265 := &x.ListMeta
					yy2265.CodecEncodeSelf(e)
				}
			}
			if yyr2256 || yy2arr2256 {
				if yysep2256 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2267 := z.EncBinary()
					_ = yym2267
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				if yyfirst2256 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2256 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep2256 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2268 := z.EncBinary()
					_ = yym2268
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2256 {
				if yyr2256 || yy2arr2256 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2269 := z.DecBinary()
	_ = yym2269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2270 := r.ReadMapStart()
			if yyl2270 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2270, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2270 := r.ReadArrayStart()
			if yyl2270 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2270, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2271Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2271Slc
	var yyhl2271 bool = l >= 0
	for yyj2271 := 0; ; yyj2271++ {
		if yyhl2271 {
			if yyj2271 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2271 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2271Slc = r.DecodeBytes(yys2271Slc, true, true)
		yys2271 := string(yys2271Slc)
		if !yyhl2271 {
			r.ReadMapKVSeparator()
		}
		switch yys2271 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2274 := &x.ListMeta
				yyv2274.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2275 := &x.Items
				yym2276 := z.DecBinary()
				_ = yym2276
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2275), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2271)
		} // end switch yys2271
	} // end for yyj2271
	if !yyhl2271 {
		r.ReadMapEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2277 int
	var yyb2277 bool
	var yyhl2277 bool = l >= 0
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2280 := &x.ListMeta
		yyv2280.CodecDecodeSelf(d)
	}
	yyj2277++
	if yyhl2277 {
		yyb2277 = yyj2277 > l
	} else {
		yyb2277 = r.CheckBreak()
	}
	if yyb2277 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2281 := &x.Items
		yym2282 := z.DecBinary()
		_ = yym2282
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2281), d)
		}
	}
	for {
		yyj2277++
		if yyhl2277 {
			yyb2277 = yyj2277 > l
		} else {
			yyb2277 = r.CheckBreak()
		}
		if yyb2277 {
			break
		}
		if yyj2277 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2277-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2283 := z.EncBinary()
		_ = yym2283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2284 := !z.EncBinary()
			yy2arr2284 := z.EncBasicHandle().StructToArray
			var yyfirst2284 bool
			var yyq2284 [1]bool
			_, _, _, _ = yysep2284, yyfirst2284, yyq2284, yy2arr2284
			const yyr2284 bool = false
			if yyr2284 || yy2arr2284 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2284 int = 1
				for _, b := range yyq2284 {
					if b {
						yynn2284++
					}
				}
				r.EncodeMapStart(yynn2284)
			}
			if yyr2284 || yy2arr2284 {
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2286 := z.EncBinary()
					_ = yym2286
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				yyfirst2284 = true
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				if yysep2284 {
					r.EncodeMapKVSeparator()
				}
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2287 := z.EncBinary()
					_ = yym2287
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yysep2284 {
				if yyr2284 || yy2arr2284 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2288 := z.DecBinary()
	_ = yym2288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2289 := r.ReadMapStart()
			if yyl2289 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2289, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2289 := r.ReadArrayStart()
			if yyl2289 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2290Slc
	var yyhl2290 bool = l >= 0
	for yyj2290 := 0; ; yyj2290++ {
		if yyhl2290 {
			if yyj2290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2290 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2290Slc = r.DecodeBytes(yys2290Slc, true, true)
		yys2290 := string(yys2290Slc)
		if !yyhl2290 {
			r.ReadMapKVSeparator()
		}
		switch yys2290 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2291 := &x.Finalizers
				yym2292 := z.DecBinary()
				_ = yym2292
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2291), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2290)
		} // end switch yys2290
	} // end for yyj2290
	if !yyhl2290 {
		r.ReadMapEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2293 int
	var yyb2293 bool
	var yyhl2293 bool = l >= 0
	yyj2293++
	if yyhl2293 {
		yyb2293 = yyj2293 > l
	} else {
		yyb2293 = r.CheckBreak()
	}
	if yyb2293 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2294 := &x.Finalizers
		yym2295 := z.DecBinary()
		_ = yym2295
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2294), d)
		}
	}
	for {
		yyj2293++
		if yyhl2293 {
			yyb2293 = yyj2293 > l
		} else {
			yyb2293 = r.CheckBreak()
		}
		if yyb2293 {
			break
		}
		if yyj2293 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2293-1, "")
	}
	r.ReadArrayEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2296 := z.EncBinary()
	_ = yym2296
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2297 := z.DecBinary()
	_ = yym2297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2298 := z.EncBinary()
		_ = yym2298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2299 := !z.EncBinary()
			yy2arr2299 := z.EncBasicHandle().StructToArray
			var yyfirst2299 bool
			var yyq2299 [1]bool
			_, _, _, _ = yysep2299, yyfirst2299, yyq2299, yy2arr2299
			const yyr2299 bool = false
			yyq2299[0] = x.Phase != ""
			if yyr2299 || yy2arr2299 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2299 int = 0
				for _, b := range yyq2299 {
					if b {
						yynn2299++
					}
				}
				r.EncodeMapStart(yynn2299)
			}
			if yyr2299 || yy2arr2299 {
				if yyq2299[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2299[0] {
					yyfirst2299 = true
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					if yysep2299 {
						r.EncodeMapKVSeparator()
					}
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2299 {
				if yyr2299 || yy2arr2299 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2301 := z.DecBinary()
	_ = yym2301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2302 := r.ReadMapStart()
			if yyl2302 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2302, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2302 := r.ReadArrayStart()
			if yyl2302 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2303Slc
	var yyhl2303 bool = l >= 0
	for yyj2303 := 0; ; yyj2303++ {
		if yyhl2303 {
			if yyj2303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2303 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2303Slc = r.DecodeBytes(yys2303Slc, true, true)
		yys2303 := string(yys2303Slc)
		if !yyhl2303 {
			r.ReadMapKVSeparator()
		}
		switch yys2303 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2303)
		} // end switch yys2303
	} // end for yyj2303
	if !yyhl2303 {
		r.ReadMapEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2305 int
	var yyb2305 bool
	var yyhl2305 bool = l >= 0
	yyj2305++
	if yyhl2305 {
		yyb2305 = yyj2305 > l
	} else {
		yyb2305 = r.CheckBreak()
	}
	if yyb2305 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2305++
		if yyhl2305 {
			yyb2305 = yyj2305 > l
		} else {
			yyb2305 = r.CheckBreak()
		}
		if yyb2305 {
			break
		}
		if yyj2305 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2305-1, "")
	}
	r.ReadArrayEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2307 := z.EncBinary()
	_ = yym2307
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2308 := z.DecBinary()
	_ = yym2308
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2309 := z.EncBinary()
		_ = yym2309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2310 := !z.EncBinary()
			yy2arr2310 := z.EncBasicHandle().StructToArray
			var yyfirst2310 bool
			var yyq2310 [5]bool
			_, _, _, _ = yysep2310, yyfirst2310, yyq2310, yy2arr2310
			const yyr2310 bool = false
			yyq2310[0] = x.Kind != ""
			yyq2310[1] = x.APIVersion != ""
			yyq2310[2] = true
			yyq2310[3] = true
			yyq2310[4] = true
			if yyr2310 || yy2arr2310 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2310 int = 0
				for _, b := range yyq2310 {
					if b {
						yynn2310++
					}
				}
				r.EncodeMapStart(yynn2310)
			}
			if yyr2310 || yy2arr2310 {
				if yyq2310[0] {
					yym2312 := z.EncBinary()
					_ = yym2312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2310[0] {
					yyfirst2310 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2310 {
						r.EncodeMapKVSeparator()
					}
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				if yysep2310 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2310[1] {
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2310[1] {
					if yyfirst2310 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2310 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2310 {
						r.EncodeMapKVSeparator()
					}
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				if yysep2310 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2310[2] {
					yy2318 := &x.ObjectMeta
					yy2318.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[2] {
					if yyfirst2310 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2310 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2310 {
						r.EncodeMapKVSeparator()
					}
					yy2319 := &x.ObjectMeta
					yy2319.CodecEncodeSelf(e)
				}
			}
			if yyr2310 || yy2arr2310 {
				if yysep2310 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2310[3] {
					yy2321 := &x.Spec
					yy2321.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[3] {
					if yyfirst2310 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2310 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep2310 {
						r.EncodeMapKVSeparator()
					}
					yy2322 := &x.Spec
					yy2322.CodecEncodeSelf(e)
				}
			}
			if yyr2310 || yy2arr2310 {
				if yysep2310 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2310[4] {
					yy2324 := &x.Status
					yy2324.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[4] {
					if yyfirst2310 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2310 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep2310 {
						r.EncodeMapKVSeparator()
					}
					yy2325 := &x.Status
					yy2325.CodecEncodeSelf(e)
				}
			}
			if yysep2310 {
				if yyr2310 || yy2arr2310 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2326 := z.DecBinary()
	_ = yym2326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2327 := r.ReadMapStart()
			if yyl2327 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2327, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2327 := r.ReadArrayStart()
			if yyl2327 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2328Slc
	var yyhl2328 bool = l >= 0
	for yyj2328 := 0; ; yyj2328++ {
		if yyhl2328 {
			if yyj2328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2328 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2328Slc = r.DecodeBytes(yys2328Slc, true, true)
		yys2328 := string(yys2328Slc)
		if !yyhl2328 {
			r.ReadMapKVSeparator()
		}
		switch yys2328 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2331 := &x.ObjectMeta
				yyv2331.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2332 := &x.Spec
				yyv2332.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2333 := &x.Status
				yyv2333.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2328)
		} // end switch yys2328
	} // end for yyj2328
	if !yyhl2328 {
		r.ReadMapEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2334 int
	var yyb2334 bool
	var yyhl2334 bool = l >= 0
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2337 := &x.ObjectMeta
		yyv2337.CodecDecodeSelf(d)
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2338 := &x.Spec
		yyv2338.CodecDecodeSelf(d)
	}
	yyj2334++
	if yyhl2334 {
		yyb2334 = yyj2334 > l
	} else {
		yyb2334 = r.CheckBreak()
	}
	if yyb2334 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2339 := &x.Status
		yyv2339.CodecDecodeSelf(d)
	}
	for {
		yyj2334++
		if yyhl2334 {
			yyb2334 = yyj2334 > l
		} else {
			yyb2334 = r.CheckBreak()
		}
		if yyb2334 {
			break
		}
		if yyj2334 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2334-1, "")
	}
	r.ReadArrayEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2340 := z.EncBinary()
		_ = yym2340
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2341 := !z.EncBinary()
			yy2arr2341 := z.EncBasicHandle().StructToArray
			var yyfirst2341 bool
			var yyq2341 [4]bool
			_, _, _, _ = yysep2341, yyfirst2341, yyq2341, yy2arr2341
			const yyr2341 bool = false
			yyq2341[0] = x.Kind != ""
			yyq2341[1] = x.APIVersion != ""
			yyq2341[2] = true
			if yyr2341 || yy2arr2341 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2341 int = 1
				for _, b := range yyq2341 {
					if b {
						yynn2341++
					}
				}
				r.EncodeMapStart(yynn2341)
			}
			if yyr2341 || yy2arr2341 {
				if yyq2341[0] {
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2341[0] {
					yyfirst2341 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2341 {
						r.EncodeMapKVSeparator()
					}
					yym2344 := z.EncBinary()
					_ = yym2344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2341 || yy2arr2341 {
				if yysep2341 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2341[1] {
					yym2346 := z.EncBinary()
					_ = yym2346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2341[1] {
					if yyfirst2341 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2341 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2341 {
						r.EncodeMapKVSeparator()
					}
					yym2347 := z.EncBinary()
					_ = yym2347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2341 || yy2arr2341 {
				if yysep2341 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2341[2] {
					yy2349 := &x.ListMeta
					yy2349.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2341[2] {
					if yyfirst2341 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2341 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2341 {
						r.EncodeMapKVSeparator()
					}
					yy2350 := &x.ListMeta
					yy2350.CodecEncodeSelf(e)
				}
			}
			if yyr2341 || yy2arr2341 {
				if yysep2341 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2352 := z.EncBinary()
					_ = yym2352
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				if yyfirst2341 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2341 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep2341 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2353 := z.EncBinary()
					_ = yym2353
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2341 {
				if yyr2341 || yy2arr2341 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2354 := z.DecBinary()
	_ = yym2354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2355 := r.ReadMapStart()
			if yyl2355 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2355, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2355 := r.ReadArrayStart()
			if yyl2355 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2356Slc
	var yyhl2356 bool = l >= 0
	for yyj2356 := 0; ; yyj2356++ {
		if yyhl2356 {
			if yyj2356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2356 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2356Slc = r.DecodeBytes(yys2356Slc, true, true)
		yys2356 := string(yys2356Slc)
		if !yyhl2356 {
			r.ReadMapKVSeparator()
		}
		switch yys2356 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2359 := &x.ListMeta
				yyv2359.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2360 := &x.Items
				yym2361 := z.DecBinary()
				_ = yym2361
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2360), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2356)
		} // end switch yys2356
	} // end for yyj2356
	if !yyhl2356 {
		r.ReadMapEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2362 int
	var yyb2362 bool
	var yyhl2362 bool = l >= 0
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2365 := &x.ListMeta
		yyv2365.CodecDecodeSelf(d)
	}
	yyj2362++
	if yyhl2362 {
		yyb2362 = yyj2362 > l
	} else {
		yyb2362 = r.CheckBreak()
	}
	if yyb2362 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2366 := &x.Items
		yym2367 := z.DecBinary()
		_ = yym2367
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2366), d)
		}
	}
	for {
		yyj2362++
		if yyhl2362 {
			yyb2362 = yyj2362 > l
		} else {
			yyb2362 = r.CheckBreak()
		}
		if yyb2362 {
			break
		}
		if yyj2362 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2362-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2368 := z.EncBinary()
		_ = yym2368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2369 := !z.EncBinary()
			yy2arr2369 := z.EncBasicHandle().StructToArray
			var yyfirst2369 bool
			var yyq2369 [4]bool
			_, _, _, _ = yysep2369, yyfirst2369, yyq2369, yy2arr2369
			const yyr2369 bool = false
			yyq2369[0] = x.Kind != ""
			yyq2369[1] = x.APIVersion != ""
			yyq2369[2] = true
			if yyr2369 || yy2arr2369 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2369 int = 1
				for _, b := range yyq2369 {
					if b {
						yynn2369++
					}
				}
				r.EncodeMapStart(yynn2369)
			}
			if yyr2369 || yy2arr2369 {
				if yyq2369[0] {
					yym2371 := z.EncBinary()
					_ = yym2371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2369[0] {
					yyfirst2369 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2369 {
						r.EncodeMapKVSeparator()
					}
					yym2372 := z.EncBinary()
					_ = yym2372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2369 || yy2arr2369 {
				if yysep2369 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2369[1] {
					yym2374 := z.EncBinary()
					_ = yym2374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2369[1] {
					if yyfirst2369 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2369 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2369 {
						r.EncodeMapKVSeparator()
					}
					yym2375 := z.EncBinary()
					_ = yym2375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2369 || yy2arr2369 {
				if yysep2369 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2369[2] {
					yy2377 := &x.ObjectMeta
					yy2377.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2369[2] {
					if yyfirst2369 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2369 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2369 {
						r.EncodeMapKVSeparator()
					}
					yy2378 := &x.ObjectMeta
					yy2378.CodecEncodeSelf(e)
				}
			}
			if yyr2369 || yy2arr2369 {
				if yysep2369 {
					r.EncodeArrayEntrySeparator()
				}
				yy2380 := &x.Target
				yy2380.CodecEncodeSelf(e)
			} else {
				if yyfirst2369 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2369 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				if yysep2369 {
					r.EncodeMapKVSeparator()
				}
				yy2381 := &x.Target
				yy2381.CodecEncodeSelf(e)
			}
			if yysep2369 {
				if yyr2369 || yy2arr2369 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2382 := z.DecBinary()
	_ = yym2382
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2383 := r.ReadMapStart()
			if yyl2383 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2383, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2383 := r.ReadArrayStart()
			if yyl2383 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2383, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2384Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2384Slc
	var yyhl2384 bool = l >= 0
	for yyj2384 := 0; ; yyj2384++ {
		if yyhl2384 {
			if yyj2384 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2384 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2384Slc = r.DecodeBytes(yys2384Slc, true, true)
		yys2384 := string(yys2384Slc)
		if !yyhl2384 {
			r.ReadMapKVSeparator()
		}
		switch yys2384 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2387 := &x.ObjectMeta
				yyv2387.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2388 := &x.Target
				yyv2388.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2384)
		} // end switch yys2384
	} // end for yyj2384
	if !yyhl2384 {
		r.ReadMapEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2389 int
	var yyb2389 bool
	var yyhl2389 bool = l >= 0
	yyj2389++
	if yyhl2389 {
		yyb2389 = yyj2389 > l
	} else {
		yyb2389 = r.CheckBreak()
	}
	if yyb2389 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2389++
	if yyhl2389 {
		yyb2389 = yyj2389 > l
	} else {
		yyb2389 = r.CheckBreak()
	}
	if yyb2389 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2389++
	if yyhl2389 {
		yyb2389 = yyj2389 > l
	} else {
		yyb2389 = r.CheckBreak()
	}
	if yyb2389 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2392 := &x.ObjectMeta
		yyv2392.CodecDecodeSelf(d)
	}
	yyj2389++
	if yyhl2389 {
		yyb2389 = yyj2389 > l
	} else {
		yyb2389 = r.CheckBreak()
	}
	if yyb2389 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2393 := &x.Target
		yyv2393.CodecDecodeSelf(d)
	}
	for {
		yyj2389++
		if yyhl2389 {
			yyb2389 = yyj2389 > l
		} else {
			yyb2389 = r.CheckBreak()
		}
		if yyb2389 {
			break
		}
		if yyj2389 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2389-1, "")
	}
	r.ReadArrayEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2394 := z.EncBinary()
		_ = yym2394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2395 := !z.EncBinary()
			yy2arr2395 := z.EncBasicHandle().StructToArray
			var yyfirst2395 bool
			var yyq2395 [3]bool
			_, _, _, _ = yysep2395, yyfirst2395, yyq2395, yy2arr2395
			const yyr2395 bool = false
			yyq2395[0] = x.Kind != ""
			yyq2395[1] = x.APIVersion != ""
			if yyr2395 || yy2arr2395 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2395 int = 1
				for _, b := range yyq2395 {
					if b {
						yynn2395++
					}
				}
				r.EncodeMapStart(yynn2395)
			}
			if yyr2395 || yy2arr2395 {
				if yyq2395[0] {
					yym2397 := z.EncBinary()
					_ = yym2397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2395[0] {
					yyfirst2395 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2395 {
						r.EncodeMapKVSeparator()
					}
					yym2398 := z.EncBinary()
					_ = yym2398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2395 || yy2arr2395 {
				if yysep2395 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2395[1] {
					yym2400 := z.EncBinary()
					_ = yym2400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2395[1] {
					if yyfirst2395 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2395 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2395 {
						r.EncodeMapKVSeparator()
					}
					yym2401 := z.EncBinary()
					_ = yym2401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2395 || yy2arr2395 {
				if yysep2395 {
					r.EncodeArrayEntrySeparator()
				}
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2403 := *x.GracePeriodSeconds
					yym2404 := z.EncBinary()
					_ = yym2404
					if false {
					} else {
						r.EncodeInt(int64(yy2403))
					}
				}
			} else {
				if yyfirst2395 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2395 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if yysep2395 {
					r.EncodeMapKVSeparator()
				}
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2405 := *x.GracePeriodSeconds
					yym2406 := z.EncBinary()
					_ = yym2406
					if false {
					} else {
						r.EncodeInt(int64(yy2405))
					}
				}
			}
			if yysep2395 {
				if yyr2395 || yy2arr2395 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2407 := z.DecBinary()
	_ = yym2407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2408 := r.ReadMapStart()
			if yyl2408 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2408, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2408 := r.ReadArrayStart()
			if yyl2408 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2409Slc
	var yyhl2409 bool = l >= 0
	for yyj2409 := 0; ; yyj2409++ {
		if yyhl2409 {
			if yyj2409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2409 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2409Slc = r.DecodeBytes(yys2409Slc, true, true)
		yys2409 := string(yys2409Slc)
		if !yyhl2409 {
			r.ReadMapKVSeparator()
		}
		switch yys2409 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2413 := z.DecBinary()
				_ = yym2413
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2409)
		} // end switch yys2409
	} // end for yyj2409
	if !yyhl2409 {
		r.ReadMapEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2414 int
	var yyb2414 bool
	var yyhl2414 bool = l >= 0
	yyj2414++
	if yyhl2414 {
		yyb2414 = yyj2414 > l
	} else {
		yyb2414 = r.CheckBreak()
	}
	if yyb2414 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2414++
	if yyhl2414 {
		yyb2414 = yyj2414 > l
	} else {
		yyb2414 = r.CheckBreak()
	}
	if yyb2414 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2414++
	if yyhl2414 {
		yyb2414 = yyj2414 > l
	} else {
		yyb2414 = r.CheckBreak()
	}
	if yyb2414 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2418 := z.DecBinary()
		_ = yym2418
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2414++
		if yyhl2414 {
			yyb2414 = yyj2414 > l
		} else {
			yyb2414 = r.CheckBreak()
		}
		if yyb2414 {
			break
		}
		if yyj2414 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2414-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2419 := z.EncBinary()
		_ = yym2419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2420 := !z.EncBinary()
			yy2arr2420 := z.EncBasicHandle().StructToArray
			var yyfirst2420 bool
			var yyq2420 [6]bool
			_, _, _, _ = yysep2420, yyfirst2420, yyq2420, yy2arr2420
			const yyr2420 bool = false
			yyq2420[0] = x.Kind != ""
			yyq2420[1] = x.APIVersion != ""
			if yyr2420 || yy2arr2420 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2420 int = 4
				for _, b := range yyq2420 {
					if b {
						yynn2420++
					}
				}
				r.EncodeMapStart(yynn2420)
			}
			if yyr2420 || yy2arr2420 {
				if yyq2420[0] {
					yym2422 := z.EncBinary()
					_ = yym2422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2420[0] {
					yyfirst2420 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2420 {
						r.EncodeMapKVSeparator()
					}
					yym2423 := z.EncBinary()
					_ = yym2423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				if yysep2420 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2420[1] {
					yym2425 := z.EncBinary()
					_ = yym2425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2420[1] {
					if yyfirst2420 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2420 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2420 {
						r.EncodeMapKVSeparator()
					}
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				if yysep2420 {
					r.EncodeArrayEntrySeparator()
				}
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				if yyfirst2420 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2420 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				if yysep2420 {
					r.EncodeMapKVSeparator()
				}
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				if yysep2420 {
					r.EncodeArrayEntrySeparator()
				}
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2431 := z.EncBinary()
					_ = yym2431
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				if yyfirst2420 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2420 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				if yysep2420 {
					r.EncodeMapKVSeparator()
				}
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2432 := z.EncBinary()
					_ = yym2432
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2420 || yy2arr2420 {
				if yysep2420 {
					r.EncodeArrayEntrySeparator()
				}
				yym2434 := z.EncBinary()
				_ = yym2434
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				if yyfirst2420 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2420 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				if yysep2420 {
					r.EncodeMapKVSeparator()
				}
				yym2435 := z.EncBinary()
				_ = yym2435
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2420 || yy2arr2420 {
				if yysep2420 {
					r.EncodeArrayEntrySeparator()
				}
				yym2437 := z.EncBinary()
				_ = yym2437
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				if yyfirst2420 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2420 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				if yysep2420 {
					r.EncodeMapKVSeparator()
				}
				yym2438 := z.EncBinary()
				_ = yym2438
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yysep2420 {
				if yyr2420 || yy2arr2420 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2439 := z.DecBinary()
	_ = yym2439
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2440 := r.ReadMapStart()
			if yyl2440 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2440, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2440 := r.ReadArrayStart()
			if yyl2440 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2440, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2441Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2441Slc
	var yyhl2441 bool = l >= 0
	for yyj2441 := 0; ; yyj2441++ {
		if yyhl2441 {
			if yyj2441 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2441 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2441Slc = r.DecodeBytes(yys2441Slc, true, true)
		yys2441 := string(yys2441Slc)
		if !yyhl2441 {
			r.ReadMapKVSeparator()
		}
		switch yys2441 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2444 := &x.LabelSelector
				yym2445 := z.DecBinary()
				_ = yym2445
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2444) {
				} else {
					z.DecFallback(yyv2444, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2446 := &x.FieldSelector
				yym2447 := z.DecBinary()
				_ = yym2447
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2446) {
				} else {
					z.DecFallback(yyv2446, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2441)
		} // end switch yys2441
	} // end for yyj2441
	if !yyhl2441 {
		r.ReadMapEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2450 int
	var yyb2450 bool
	var yyhl2450 bool = l >= 0
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2453 := &x.LabelSelector
		yym2454 := z.DecBinary()
		_ = yym2454
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2453) {
		} else {
			z.DecFallback(yyv2453, true)
		}
	}
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2455 := &x.FieldSelector
		yym2456 := z.DecBinary()
		_ = yym2456
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2455) {
		} else {
			z.DecFallback(yyv2455, true)
		}
	}
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2450++
	if yyhl2450 {
		yyb2450 = yyj2450 > l
	} else {
		yyb2450 = r.CheckBreak()
	}
	if yyb2450 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	for {
		yyj2450++
		if yyhl2450 {
			yyb2450 = yyj2450 > l
		} else {
			yyb2450 = r.CheckBreak()
		}
		if yyb2450 {
			break
		}
		if yyj2450 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2450-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2459 := z.EncBinary()
		_ = yym2459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2460 := !z.EncBinary()
			yy2arr2460 := z.EncBasicHandle().StructToArray
			var yyfirst2460 bool
			var yyq2460 [5]bool
			_, _, _, _ = yysep2460, yyfirst2460, yyq2460, yy2arr2460
			const yyr2460 bool = false
			yyq2460[0] = x.Kind != ""
			yyq2460[1] = x.APIVersion != ""
			if yyr2460 || yy2arr2460 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2460 int = 3
				for _, b := range yyq2460 {
					if b {
						yynn2460++
					}
				}
				r.EncodeMapStart(yynn2460)
			}
			if yyr2460 || yy2arr2460 {
				if yyq2460[0] {
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2460[0] {
					yyfirst2460 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2460 {
						r.EncodeMapKVSeparator()
					}
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2460 || yy2arr2460 {
				if yysep2460 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2460[1] {
					yym2465 := z.EncBinary()
					_ = yym2465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2460[1] {
					if yyfirst2460 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2460 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2460 {
						r.EncodeMapKVSeparator()
					}
					yym2466 := z.EncBinary()
					_ = yym2466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2460 || yy2arr2460 {
				if yysep2460 {
					r.EncodeArrayEntrySeparator()
				}
				yym2468 := z.EncBinary()
				_ = yym2468
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				if yyfirst2460 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2460 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				if yysep2460 {
					r.EncodeMapKVSeparator()
				}
				yym2469 := z.EncBinary()
				_ = yym2469
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2460 || yy2arr2460 {
				if yysep2460 {
					r.EncodeArrayEntrySeparator()
				}
				yym2471 := z.EncBinary()
				_ = yym2471
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				if yyfirst2460 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2460 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				if yysep2460 {
					r.EncodeMapKVSeparator()
				}
				yym2472 := z.EncBinary()
				_ = yym2472
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2460 || yy2arr2460 {
				if yysep2460 {
					r.EncodeArrayEntrySeparator()
				}
				yym2474 := z.EncBinary()
				_ = yym2474
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				if yyfirst2460 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2460 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				if yysep2460 {
					r.EncodeMapKVSeparator()
				}
				yym2475 := z.EncBinary()
				_ = yym2475
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yysep2460 {
				if yyr2460 || yy2arr2460 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2476 := z.DecBinary()
	_ = yym2476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2477 := r.ReadMapStart()
			if yyl2477 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2477, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2477 := r.ReadArrayStart()
			if yyl2477 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2477, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2478Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2478Slc
	var yyhl2478 bool = l >= 0
	for yyj2478 := 0; ; yyj2478++ {
		if yyhl2478 {
			if yyj2478 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2478 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2478Slc = r.DecodeBytes(yys2478Slc, true, true)
		yys2478 := string(yys2478Slc)
		if !yyhl2478 {
			r.ReadMapKVSeparator()
		}
		switch yys2478 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2478)
		} // end switch yys2478
	} // end for yyj2478
	if !yyhl2478 {
		r.ReadMapEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2484 int
	var yyb2484 bool
	var yyhl2484 bool = l >= 0
	yyj2484++
	if yyhl2484 {
		yyb2484 = yyj2484 > l
	} else {
		yyb2484 = r.CheckBreak()
	}
	if yyb2484 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2484++
	if yyhl2484 {
		yyb2484 = yyj2484 > l
	} else {
		yyb2484 = r.CheckBreak()
	}
	if yyb2484 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2484++
	if yyhl2484 {
		yyb2484 = yyj2484 > l
	} else {
		yyb2484 = r.CheckBreak()
	}
	if yyb2484 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2484++
	if yyhl2484 {
		yyb2484 = yyj2484 > l
	} else {
		yyb2484 = r.CheckBreak()
	}
	if yyb2484 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2484++
	if yyhl2484 {
		yyb2484 = yyj2484 > l
	} else {
		yyb2484 = r.CheckBreak()
	}
	if yyb2484 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	for {
		yyj2484++
		if yyhl2484 {
			yyb2484 = yyj2484 > l
		} else {
			yyb2484 = r.CheckBreak()
		}
		if yyb2484 {
			break
		}
		if yyj2484 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2484-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2490 := z.EncBinary()
		_ = yym2490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2491 := !z.EncBinary()
			yy2arr2491 := z.EncBasicHandle().StructToArray
			var yyfirst2491 bool
			var yyq2491 [7]bool
			_, _, _, _ = yysep2491, yyfirst2491, yyq2491, yy2arr2491
			const yyr2491 bool = false
			yyq2491[0] = x.Kind != ""
			yyq2491[1] = x.APIVersion != ""
			yyq2491[2] = x.Stdin != false
			yyq2491[3] = x.Stdout != false
			yyq2491[4] = x.Stderr != false
			yyq2491[5] = x.TTY != false
			yyq2491[6] = x.Container != ""
			if yyr2491 || yy2arr2491 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2491 int = 0
				for _, b := range yyq2491 {
					if b {
						yynn2491++
					}
				}
				r.EncodeMapStart(yynn2491)
			}
			if yyr2491 || yy2arr2491 {
				if yyq2491[0] {
					yym2493 := z.EncBinary()
					_ = yym2493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2491[0] {
					yyfirst2491 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2491 {
						r.EncodeMapKVSeparator()
					}
					yym2494 := z.EncBinary()
					_ = yym2494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				if yysep2491 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2491[1] {
					yym2496 := z.EncBinary()
					_ = yym2496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2491[1] {
					if yyfirst2491 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2491 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2491 {
						r.EncodeMapKVSeparator()
					}
					yym2497 := z.EncBinary()
					_ = yym2497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				if yysep2491 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2491[2] {
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2491[2] {
					if yyfirst2491 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2491 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					if yysep2491 {
						r.EncodeMapKVSeparator()
					}
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				if yysep2491 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2491[3] {
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2491[3] {
					if yyfirst2491 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2491 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					if yysep2491 {
						r.EncodeMapKVSeparator()
					}
					yym2503 := z.EncBinary()
					_ = yym2503
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				if yysep2491 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2491[4] {
					yym2505 := z.EncBinary()
					_ = yym2505
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2491[4] {
					if yyfirst2491 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2491 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					if yysep2491 {
						r.EncodeMapKVSeparator()
					}
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				if yysep2491 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2491[5] {
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2491[5] {
					if yyfirst2491 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2491 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					if yysep2491 {
						r.EncodeMapKVSeparator()
					}
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2491 || yy2arr2491 {
				if yysep2491 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2491[6] {
					yym2511 := z.EncBinary()
					_ = yym2511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2491[6] {
					if yyfirst2491 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2491 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					if yysep2491 {
						r.EncodeMapKVSeparator()
					}
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2491 {
				if yyr2491 || yy2arr2491 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2513 := z.DecBinary()
	_ = yym2513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2514 := r.ReadMapStart()
			if yyl2514 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2514, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2514 := r.ReadArrayStart()
			if yyl2514 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2515Slc
	var yyhl2515 bool = l >= 0
	for yyj2515 := 0; ; yyj2515++ {
		if yyhl2515 {
			if yyj2515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2515 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2515Slc = r.DecodeBytes(yys2515Slc, true, true)
		yys2515 := string(yys2515Slc)
		if !yyhl2515 {
			r.ReadMapKVSeparator()
		}
		switch yys2515 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2515)
		} // end switch yys2515
	} // end for yyj2515
	if !yyhl2515 {
		r.ReadMapEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2523 int
	var yyb2523 bool
	var yyhl2523 bool = l >= 0
	yyj2523++
	if yyhl2523 {
		yyb2523 = yyj2523 > l
	} else {
		yyb2523 = r.CheckBreak()
	}
	if yyb2523 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2523++
	if yyhl2523 {
		yyb2523 = yyj2523 > l
	} else {
		yyb2523 = r.CheckBreak()
	}
	if yyb2523 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2523++
	if yyhl2523 {
		yyb2523 = yyj2523 > l
	} else {
		yyb2523 = r.CheckBreak()
	}
	if yyb2523 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2523++
	if yyhl2523 {
		yyb2523 = yyj2523 > l
	} else {
		yyb2523 = r.CheckBreak()
	}
	if yyb2523 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2523++
	if yyhl2523 {
		yyb2523 = yyj2523 > l
	} else {
		yyb2523 = r.CheckBreak()
	}
	if yyb2523 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2523++
	if yyhl2523 {
		yyb2523 = yyj2523 > l
	} else {
		yyb2523 = r.CheckBreak()
	}
	if yyb2523 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2523++
	if yyhl2523 {
		yyb2523 = yyj2523 > l
	} else {
		yyb2523 = r.CheckBreak()
	}
	if yyb2523 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2523++
		if yyhl2523 {
			yyb2523 = yyj2523 > l
		} else {
			yyb2523 = r.CheckBreak()
		}
		if yyb2523 {
			break
		}
		if yyj2523 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2523-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2531 := z.EncBinary()
		_ = yym2531
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2532 := !z.EncBinary()
			yy2arr2532 := z.EncBasicHandle().StructToArray
			var yyfirst2532 bool
			var yyq2532 [8]bool
			_, _, _, _ = yysep2532, yyfirst2532, yyq2532, yy2arr2532
			const yyr2532 bool = false
			yyq2532[0] = x.Kind != ""
			yyq2532[1] = x.APIVersion != ""
			if yyr2532 || yy2arr2532 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2532 int = 6
				for _, b := range yyq2532 {
					if b {
						yynn2532++
					}
				}
				r.EncodeMapStart(yynn2532)
			}
			if yyr2532 || yy2arr2532 {
				if yyq2532[0] {
					yym2534 := z.EncBinary()
					_ = yym2534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2532[0] {
					yyfirst2532 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2532 {
						r.EncodeMapKVSeparator()
					}
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2532 || yy2arr2532 {
				if yysep2532 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2532[1] {
					yym2537 := z.EncBinary()
					_ = yym2537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2532[1] {
					if yyfirst2532 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2532 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2532 {
						r.EncodeMapKVSeparator()
					}
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2532 || yy2arr2532 {
				if yysep2532 {
					r.EncodeArrayEntrySeparator()
				}
				yym2540 := z.EncBinary()
				_ = yym2540
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				if yyfirst2532 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2532 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				if yysep2532 {
					r.EncodeMapKVSeparator()
				}
				yym2541 := z.EncBinary()
				_ = yym2541
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2532 || yy2arr2532 {
				if yysep2532 {
					r.EncodeArrayEntrySeparator()
				}
				yym2543 := z.EncBinary()
				_ = yym2543
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				if yyfirst2532 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2532 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				if yysep2532 {
					r.EncodeMapKVSeparator()
				}
				yym2544 := z.EncBinary()
				_ = yym2544
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2532 || yy2arr2532 {
				if yysep2532 {
					r.EncodeArrayEntrySeparator()
				}
				yym2546 := z.EncBinary()
				_ = yym2546
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				if yyfirst2532 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2532 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				if yysep2532 {
					r.EncodeMapKVSeparator()
				}
				yym2547 := z.EncBinary()
				_ = yym2547
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2532 || yy2arr2532 {
				if yysep2532 {
					r.EncodeArrayEntrySeparator()
				}
				yym2549 := z.EncBinary()
				_ = yym2549
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				if yyfirst2532 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2532 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				if yysep2532 {
					r.EncodeMapKVSeparator()
				}
				yym2550 := z.EncBinary()
				_ = yym2550
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2532 || yy2arr2532 {
				if yysep2532 {
					r.EncodeArrayEntrySeparator()
				}
				yym2552 := z.EncBinary()
				_ = yym2552
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				if yyfirst2532 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2532 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				if yysep2532 {
					r.EncodeMapKVSeparator()
				}
				yym2553 := z.EncBinary()
				_ = yym2553
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2532 || yy2arr2532 {
				if yysep2532 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2555 := z.EncBinary()
					_ = yym2555
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				if yyfirst2532 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2532 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				if yysep2532 {
					r.EncodeMapKVSeparator()
				}
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2556 := z.EncBinary()
					_ = yym2556
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2532 {
				if yyr2532 || yy2arr2532 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2557 := z.DecBinary()
	_ = yym2557
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2558 := r.ReadMapStart()
			if yyl2558 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2558, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2558 := r.ReadArrayStart()
			if yyl2558 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2558, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2559Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2559Slc
	var yyhl2559 bool = l >= 0
	for yyj2559 := 0; ; yyj2559++ {
		if yyhl2559 {
			if yyj2559 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2559 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2559Slc = r.DecodeBytes(yys2559Slc, true, true)
		yys2559 := string(yys2559Slc)
		if !yyhl2559 {
			r.ReadMapKVSeparator()
		}
		switch yys2559 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2567 := &x.Command
				yym2568 := z.DecBinary()
				_ = yym2568
				if false {
				} else {
					z.F.DecSliceStringX(yyv2567, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2559)
		} // end switch yys2559
	} // end for yyj2559
	if !yyhl2559 {
		r.ReadMapEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2569 int
	var yyb2569 bool
	var yyhl2569 bool = l >= 0
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2569++
	if yyhl2569 {
		yyb2569 = yyj2569 > l
	} else {
		yyb2569 = r.CheckBreak()
	}
	if yyb2569 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2577 := &x.Command
		yym2578 := z.DecBinary()
		_ = yym2578
		if false {
		} else {
			z.F.DecSliceStringX(yyv2577, false, d)
		}
	}
	for {
		yyj2569++
		if yyhl2569 {
			yyb2569 = yyj2569 > l
		} else {
			yyb2569 = r.CheckBreak()
		}
		if yyb2569 {
			break
		}
		if yyj2569 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2569-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2579 := z.EncBinary()
		_ = yym2579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2580 := !z.EncBinary()
			yy2arr2580 := z.EncBasicHandle().StructToArray
			var yyfirst2580 bool
			var yyq2580 [3]bool
			_, _, _, _ = yysep2580, yyfirst2580, yyq2580, yy2arr2580
			const yyr2580 bool = false
			yyq2580[0] = x.Kind != ""
			yyq2580[1] = x.APIVersion != ""
			if yyr2580 || yy2arr2580 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2580 int = 1
				for _, b := range yyq2580 {
					if b {
						yynn2580++
					}
				}
				r.EncodeMapStart(yynn2580)
			}
			if yyr2580 || yy2arr2580 {
				if yyq2580[0] {
					yym2582 := z.EncBinary()
					_ = yym2582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2580[0] {
					yyfirst2580 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2580 {
						r.EncodeMapKVSeparator()
					}
					yym2583 := z.EncBinary()
					_ = yym2583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2580 || yy2arr2580 {
				if yysep2580 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2580[1] {
					yym2585 := z.EncBinary()
					_ = yym2585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2580[1] {
					if yyfirst2580 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2580 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2580 {
						r.EncodeMapKVSeparator()
					}
					yym2586 := z.EncBinary()
					_ = yym2586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2580 || yy2arr2580 {
				if yysep2580 {
					r.EncodeArrayEntrySeparator()
				}
				yym2588 := z.EncBinary()
				_ = yym2588
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				if yyfirst2580 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2580 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				if yysep2580 {
					r.EncodeMapKVSeparator()
				}
				yym2589 := z.EncBinary()
				_ = yym2589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep2580 {
				if yyr2580 || yy2arr2580 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2590 := z.DecBinary()
	_ = yym2590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2591 := r.ReadMapStart()
			if yyl2591 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2591, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2591 := r.ReadArrayStart()
			if yyl2591 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2592Slc
	var yyhl2592 bool = l >= 0
	for yyj2592 := 0; ; yyj2592++ {
		if yyhl2592 {
			if yyj2592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2592 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2592Slc = r.DecodeBytes(yys2592Slc, true, true)
		yys2592 := string(yys2592Slc)
		if !yyhl2592 {
			r.ReadMapKVSeparator()
		}
		switch yys2592 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2592)
		} // end switch yys2592
	} // end for yyj2592
	if !yyhl2592 {
		r.ReadMapEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2596 int
	var yyb2596 bool
	var yyhl2596 bool = l >= 0
	yyj2596++
	if yyhl2596 {
		yyb2596 = yyj2596 > l
	} else {
		yyb2596 = r.CheckBreak()
	}
	if yyb2596 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2596++
	if yyhl2596 {
		yyb2596 = yyj2596 > l
	} else {
		yyb2596 = r.CheckBreak()
	}
	if yyb2596 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2596++
	if yyhl2596 {
		yyb2596 = yyj2596 > l
	} else {
		yyb2596 = r.CheckBreak()
	}
	if yyb2596 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2596++
		if yyhl2596 {
			yyb2596 = yyj2596 > l
		} else {
			yyb2596 = r.CheckBreak()
		}
		if yyb2596 {
			break
		}
		if yyj2596 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2596-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Status) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2600 := z.EncBinary()
		_ = yym2600
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2601 := !z.EncBinary()
			yy2arr2601 := z.EncBasicHandle().StructToArray
			var yyfirst2601 bool
			var yyq2601 [8]bool
			_, _, _, _ = yysep2601, yyfirst2601, yyq2601, yy2arr2601
			const yyr2601 bool = false
			yyq2601[0] = x.Kind != ""
			yyq2601[1] = x.APIVersion != ""
			yyq2601[2] = true
			yyq2601[3] = x.Status != ""
			yyq2601[4] = x.Message != ""
			yyq2601[5] = x.Reason != ""
			yyq2601[6] = x.Details != nil
			yyq2601[7] = x.Code != 0
			if yyr2601 || yy2arr2601 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2601 int = 0
				for _, b := range yyq2601 {
					if b {
						yynn2601++
					}
				}
				r.EncodeMapStart(yynn2601)
			}
			if yyr2601 || yy2arr2601 {
				if yyq2601[0] {
					yym2603 := z.EncBinary()
					_ = yym2603
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[0] {
					yyfirst2601 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2601 {
						r.EncodeMapKVSeparator()
					}
					yym2604 := z.EncBinary()
					_ = yym2604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				if yysep2601 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2601[1] {
					yym2606 := z.EncBinary()
					_ = yym2606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[1] {
					if yyfirst2601 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2601 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2601 {
						r.EncodeMapKVSeparator()
					}
					yym2607 := z.EncBinary()
					_ = yym2607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				if yysep2601 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2601[2] {
					yy2609 := &x.ListMeta
					yy2609.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2601[2] {
					if yyfirst2601 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2601 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2601 {
						r.EncodeMapKVSeparator()
					}
					yy2610 := &x.ListMeta
					yy2610.CodecEncodeSelf(e)
				}
			}
			if yyr2601 || yy2arr2601 {
				if yysep2601 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2601[3] {
					yym2612 := z.EncBinary()
					_ = yym2612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Status))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[3] {
					if yyfirst2601 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2601 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep2601 {
						r.EncodeMapKVSeparator()
					}
					yym2613 := z.EncBinary()
					_ = yym2613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Status))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				if yysep2601 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2601[4] {
					yym2615 := z.EncBinary()
					_ = yym2615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[4] {
					if yyfirst2601 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2601 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep2601 {
						r.EncodeMapKVSeparator()
					}
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				if yysep2601 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2601[5] {
					x.Reason.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2601[5] {
					if yyfirst2601 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2601 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep2601 {
						r.EncodeMapKVSeparator()
					}
					x.Reason.CodecEncodeSelf(e)
				}
			}
			if yyr2601 || yy2arr2601 {
				if yysep2601 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2601[6] {
					if x.Details == nil {
						r.EncodeNil()
					} else {
						x.Details.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2601[6] {
					if yyfirst2601 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2601 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("details"))
					if yysep2601 {
						r.EncodeMapKVSeparator()
					}
					if x.Details == nil {
						r.EncodeNil()
					} else {
						x.Details.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2601 || yy2arr2601 {
				if yysep2601 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2601[7] {
					yym2620 := z.EncBinary()
					_ = yym2620
					if false {
					} else {
						r.EncodeInt(int64(x.Code))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2601[7] {
					if yyfirst2601 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2601 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("code"))
					if yysep2601 {
						r.EncodeMapKVSeparator()
					}
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeInt(int64(x.Code))
					}
				}
			}
			if yysep2601 {
				if yyr2601 || yy2arr2601 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Status) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2622 := z.DecBinary()
	_ = yym2622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2623 := r.ReadMapStart()
			if yyl2623 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2623, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2623 := r.ReadArrayStart()
			if yyl2623 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Status) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2624Slc
	var yyhl2624 bool = l >= 0
	for yyj2624 := 0; ; yyj2624++ {
		if yyhl2624 {
			if yyj2624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2624 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2624Slc = r.DecodeBytes(yys2624Slc, true, true)
		yys2624 := string(yys2624Slc)
		if !yyhl2624 {
			r.ReadMapKVSeparator()
		}
		switch yys2624 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2627 := &x.ListMeta
				yyv2627.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = StatusReason(r.DecodeString())
			}
		case "details":
			if r.TryDecodeAsNil() {
				if x.Details != nil {
					x.Details = nil
				}
			} else {
				if x.Details == nil {
					x.Details = new(StatusDetails)
				}
				x.Details.CodecDecodeSelf(d)
			}
		case "code":
			if r.TryDecodeAsNil() {
				x.Code = 0
			} else {
				x.Code = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2624)
		} // end switch yys2624
	} // end for yyj2624
	if !yyhl2624 {
		r.ReadMapEnd()
	}
}

func (x *Status) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2633 int
	var yyb2633 bool
	var yyhl2633 bool = l >= 0
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2636 := &x.ListMeta
		yyv2636.CodecDecodeSelf(d)
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = string(r.DecodeString())
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = StatusReason(r.DecodeString())
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Details != nil {
			x.Details = nil
		}
	} else {
		if x.Details == nil {
			x.Details = new(StatusDetails)
		}
		x.Details.CodecDecodeSelf(d)
	}
	yyj2633++
	if yyhl2633 {
		yyb2633 = yyj2633 > l
	} else {
		yyb2633 = r.CheckBreak()
	}
	if yyb2633 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Code = 0
	} else {
		x.Code = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2633++
		if yyhl2633 {
			yyb2633 = yyj2633 > l
		} else {
			yyb2633 = r.CheckBreak()
		}
		if yyb2633 {
			break
		}
		if yyj2633 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2633-1, "")
	}
	r.ReadArrayEnd()
}

func (x *StatusDetails) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2642 := z.EncBinary()
		_ = yym2642
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2643 := !z.EncBinary()
			yy2arr2643 := z.EncBasicHandle().StructToArray
			var yyfirst2643 bool
			var yyq2643 [4]bool
			_, _, _, _ = yysep2643, yyfirst2643, yyq2643, yy2arr2643
			const yyr2643 bool = false
			yyq2643[0] = x.Name != ""
			yyq2643[1] = x.Kind != ""
			yyq2643[2] = len(x.Causes) != 0
			yyq2643[3] = x.RetryAfterSeconds != 0
			if yyr2643 || yy2arr2643 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2643 int = 0
				for _, b := range yyq2643 {
					if b {
						yynn2643++
					}
				}
				r.EncodeMapStart(yynn2643)
			}
			if yyr2643 || yy2arr2643 {
				if yyq2643[0] {
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2643[0] {
					yyfirst2643 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep2643 {
						r.EncodeMapKVSeparator()
					}
					yym2646 := z.EncBinary()
					_ = yym2646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2643 || yy2arr2643 {
				if yysep2643 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2643[1] {
					yym2648 := z.EncBinary()
					_ = yym2648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2643[1] {
					if yyfirst2643 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2643 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2643 {
						r.EncodeMapKVSeparator()
					}
					yym2649 := z.EncBinary()
					_ = yym2649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2643 || yy2arr2643 {
				if yysep2643 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2643[2] {
					if x.Causes == nil {
						r.EncodeNil()
					} else {
						yym2651 := z.EncBinary()
						_ = yym2651
						if false {
						} else {
							h.encSliceStatusCause(([]StatusCause)(x.Causes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2643[2] {
					if yyfirst2643 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2643 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("causes"))
					if yysep2643 {
						r.EncodeMapKVSeparator()
					}
					if x.Causes == nil {
						r.EncodeNil()
					} else {
						yym2652 := z.EncBinary()
						_ = yym2652
						if false {
						} else {
							h.encSliceStatusCause(([]StatusCause)(x.Causes), e)
						}
					}
				}
			}
			if yyr2643 || yy2arr2643 {
				if yysep2643 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2643[3] {
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else {
						r.EncodeInt(int64(x.RetryAfterSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2643[3] {
					if yyfirst2643 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2643 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("retryAfterSeconds"))
					if yysep2643 {
						r.EncodeMapKVSeparator()
					}
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else {
						r.EncodeInt(int64(x.RetryAfterSeconds))
					}
				}
			}
			if yysep2643 {
				if yyr2643 || yy2arr2643 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *StatusDetails) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2656 := z.DecBinary()
	_ = yym2656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2657 := r.ReadMapStart()
			if yyl2657 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2657, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2657 := r.ReadArrayStart()
			if yyl2657 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *StatusDetails) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2658Slc
	var yyhl2658 bool = l >= 0
	for yyj2658 := 0; ; yyj2658++ {
		if yyhl2658 {
			if yyj2658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2658 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2658Slc = r.DecodeBytes(yys2658Slc, true, true)
		yys2658 := string(yys2658Slc)
		if !yyhl2658 {
			r.ReadMapKVSeparator()
		}
		switch yys2658 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "causes":
			if r.TryDecodeAsNil() {
				x.Causes = nil
			} else {
				yyv2661 := &x.Causes
				yym2662 := z.DecBinary()
				_ = yym2662
				if false {
				} else {
					h.decSliceStatusCause((*[]StatusCause)(yyv2661), d)
				}
			}
		case "retryAfterSeconds":
			if r.TryDecodeAsNil() {
				x.RetryAfterSeconds = 0
			} else {
				x.RetryAfterSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2658)
		} // end switch yys2658
	} // end for yyj2658
	if !yyhl2658 {
		r.ReadMapEnd()
	}
}

func (x *StatusDetails) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2664 int
	var yyb2664 bool
	var yyhl2664 bool = l >= 0
	yyj2664++
	if yyhl2664 {
		yyb2664 = yyj2664 > l
	} else {
		yyb2664 = r.CheckBreak()
	}
	if yyb2664 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2664++
	if yyhl2664 {
		yyb2664 = yyj2664 > l
	} else {
		yyb2664 = r.CheckBreak()
	}
	if yyb2664 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2664++
	if yyhl2664 {
		yyb2664 = yyj2664 > l
	} else {
		yyb2664 = r.CheckBreak()
	}
	if yyb2664 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Causes = nil
	} else {
		yyv2667 := &x.Causes
		yym2668 := z.DecBinary()
		_ = yym2668
		if false {
		} else {
			h.decSliceStatusCause((*[]StatusCause)(yyv2667), d)
		}
	}
	yyj2664++
	if yyhl2664 {
		yyb2664 = yyj2664 > l
	} else {
		yyb2664 = r.CheckBreak()
	}
	if yyb2664 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RetryAfterSeconds = 0
	} else {
		x.RetryAfterSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2664++
		if yyhl2664 {
			yyb2664 = yyj2664 > l
		} else {
			yyb2664 = r.CheckBreak()
		}
		if yyb2664 {
			break
		}
		if yyj2664 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2664-1, "")
	}
	r.ReadArrayEnd()
}

func (x StatusReason) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2670 := z.EncBinary()
	_ = yym2670
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StatusReason) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2671 := z.DecBinary()
	_ = yym2671
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *StatusCause) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2672 := z.EncBinary()
		_ = yym2672
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2673 := !z.EncBinary()
			yy2arr2673 := z.EncBasicHandle().StructToArray
			var yyfirst2673 bool
			var yyq2673 [3]bool
			_, _, _, _ = yysep2673, yyfirst2673, yyq2673, yy2arr2673
			const yyr2673 bool = false
			yyq2673[0] = x.Type != ""
			yyq2673[1] = x.Message != ""
			yyq2673[2] = x.Field != ""
			if yyr2673 || yy2arr2673 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2673 int = 0
				for _, b := range yyq2673 {
					if b {
						yynn2673++
					}
				}
				r.EncodeMapStart(yynn2673)
			}
			if yyr2673 || yy2arr2673 {
				if yyq2673[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2673[0] {
					yyfirst2673 = true
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep2673 {
						r.EncodeMapKVSeparator()
					}
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2673 || yy2arr2673 {
				if yysep2673 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2673[1] {
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2673[1] {
					if yyfirst2673 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2673 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep2673 {
						r.EncodeMapKVSeparator()
					}
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2673 || yy2arr2673 {
				if yysep2673 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2673[2] {
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Field))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2673[2] {
					if yyfirst2673 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2673 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("field"))
					if yysep2673 {
						r.EncodeMapKVSeparator()
					}
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Field))
					}
				}
			}
			if yysep2673 {
				if yyr2673 || yy2arr2673 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *StatusCause) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2681 := z.DecBinary()
	_ = yym2681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2682 := r.ReadMapStart()
			if yyl2682 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2682, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2682 := r.ReadArrayStart()
			if yyl2682 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *StatusCause) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2683Slc
	var yyhl2683 bool = l >= 0
	for yyj2683 := 0; ; yyj2683++ {
		if yyhl2683 {
			if yyj2683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2683 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2683Slc = r.DecodeBytes(yys2683Slc, true, true)
		yys2683 := string(yys2683Slc)
		if !yyhl2683 {
			r.ReadMapKVSeparator()
		}
		switch yys2683 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = CauseType(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "field":
			if r.TryDecodeAsNil() {
				x.Field = ""
			} else {
				x.Field = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2683)
		} // end switch yys2683
	} // end for yyj2683
	if !yyhl2683 {
		r.ReadMapEnd()
	}
}

func (x *StatusCause) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2687 int
	var yyb2687 bool
	var yyhl2687 bool = l >= 0
	yyj2687++
	if yyhl2687 {
		yyb2687 = yyj2687 > l
	} else {
		yyb2687 = r.CheckBreak()
	}
	if yyb2687 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = CauseType(r.DecodeString())
	}
	yyj2687++
	if yyhl2687 {
		yyb2687 = yyj2687 > l
	} else {
		yyb2687 = r.CheckBreak()
	}
	if yyb2687 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2687++
	if yyhl2687 {
		yyb2687 = yyj2687 > l
	} else {
		yyb2687 = r.CheckBreak()
	}
	if yyb2687 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Field = ""
	} else {
		x.Field = string(r.DecodeString())
	}
	for {
		yyj2687++
		if yyhl2687 {
			yyb2687 = yyj2687 > l
		} else {
			yyb2687 = r.CheckBreak()
		}
		if yyb2687 {
			break
		}
		if yyj2687 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2687-1, "")
	}
	r.ReadArrayEnd()
}

func (x CauseType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2691 := z.EncBinary()
	_ = yym2691
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *CauseType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2692 := z.DecBinary()
	_ = yym2692
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2693 := z.EncBinary()
		_ = yym2693
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2694 := !z.EncBinary()
			yy2arr2694 := z.EncBasicHandle().StructToArray
			var yyfirst2694 bool
			var yyq2694 [7]bool
			_, _, _, _ = yysep2694, yyfirst2694, yyq2694, yy2arr2694
			const yyr2694 bool = false
			yyq2694[0] = x.Kind != ""
			yyq2694[1] = x.Namespace != ""
			yyq2694[2] = x.Name != ""
			yyq2694[3] = x.UID != ""
			yyq2694[4] = x.APIVersion != ""
			yyq2694[5] = x.ResourceVersion != ""
			yyq2694[6] = x.FieldPath != ""
			if yyr2694 || yy2arr2694 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2694 int = 0
				for _, b := range yyq2694 {
					if b {
						yynn2694++
					}
				}
				r.EncodeMapStart(yynn2694)
			}
			if yyr2694 || yy2arr2694 {
				if yyq2694[0] {
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[0] {
					yyfirst2694 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2694 {
						r.EncodeMapKVSeparator()
					}
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				if yysep2694 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2694[1] {
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[1] {
					if yyfirst2694 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2694 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					if yysep2694 {
						r.EncodeMapKVSeparator()
					}
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				if yysep2694 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2694[2] {
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[2] {
					if yyfirst2694 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2694 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep2694 {
						r.EncodeMapKVSeparator()
					}
					yym2703 := z.EncBinary()
					_ = yym2703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				if yysep2694 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2694[3] {
					yym2705 := z.EncBinary()
					_ = yym2705
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[3] {
					if yyfirst2694 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2694 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					if yysep2694 {
						r.EncodeMapKVSeparator()
					}
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				if yysep2694 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2694[4] {
					yym2708 := z.EncBinary()
					_ = yym2708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[4] {
					if yyfirst2694 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2694 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2694 {
						r.EncodeMapKVSeparator()
					}
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				if yysep2694 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2694[5] {
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[5] {
					if yyfirst2694 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2694 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					if yysep2694 {
						r.EncodeMapKVSeparator()
					}
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				if yysep2694 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2694[6] {
					yym2714 := z.EncBinary()
					_ = yym2714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[6] {
					if yyfirst2694 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2694 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					if yysep2694 {
						r.EncodeMapKVSeparator()
					}
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2694 {
				if yyr2694 || yy2arr2694 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2716 := z.DecBinary()
	_ = yym2716
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2717 := r.ReadMapStart()
			if yyl2717 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2717, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2717 := r.ReadArrayStart()
			if yyl2717 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2717, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2718Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2718Slc
	var yyhl2718 bool = l >= 0
	for yyj2718 := 0; ; yyj2718++ {
		if yyhl2718 {
			if yyj2718 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2718 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2718Slc = r.DecodeBytes(yys2718Slc, true, true)
		yys2718 := string(yys2718Slc)
		if !yyhl2718 {
			r.ReadMapKVSeparator()
		}
		switch yys2718 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2718)
		} // end switch yys2718
	} // end for yyj2718
	if !yyhl2718 {
		r.ReadMapEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2726 int
	var yyb2726 bool
	var yyhl2726 bool = l >= 0
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2726++
	if yyhl2726 {
		yyb2726 = yyj2726 > l
	} else {
		yyb2726 = r.CheckBreak()
	}
	if yyb2726 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2726++
		if yyhl2726 {
			yyb2726 = yyj2726 > l
		} else {
			yyb2726 = r.CheckBreak()
		}
		if yyb2726 {
			break
		}
		if yyj2726 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2726-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2734 := z.EncBinary()
		_ = yym2734
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2735 := !z.EncBinary()
			yy2arr2735 := z.EncBasicHandle().StructToArray
			var yyfirst2735 bool
			var yyq2735 [1]bool
			_, _, _, _ = yysep2735, yyfirst2735, yyq2735, yy2arr2735
			const yyr2735 bool = false
			if yyr2735 || yy2arr2735 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2735 int = 1
				for _, b := range yyq2735 {
					if b {
						yynn2735++
					}
				}
				r.EncodeMapStart(yynn2735)
			}
			if yyr2735 || yy2arr2735 {
				yym2737 := z.EncBinary()
				_ = yym2737
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst2735 = true
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				if yysep2735 {
					r.EncodeMapKVSeparator()
				}
				yym2738 := z.EncBinary()
				_ = yym2738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yysep2735 {
				if yyr2735 || yy2arr2735 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2739 := z.DecBinary()
	_ = yym2739
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2740 := r.ReadMapStart()
			if yyl2740 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2740, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2740 := r.ReadArrayStart()
			if yyl2740 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2740, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2741Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2741Slc
	var yyhl2741 bool = l >= 0
	for yyj2741 := 0; ; yyj2741++ {
		if yyhl2741 {
			if yyj2741 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2741 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2741Slc = r.DecodeBytes(yys2741Slc, true, true)
		yys2741 := string(yys2741Slc)
		if !yyhl2741 {
			r.ReadMapKVSeparator()
		}
		switch yys2741 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2741)
		} // end switch yys2741
	} // end for yyj2741
	if !yyhl2741 {
		r.ReadMapEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2743 int
	var yyb2743 bool
	var yyhl2743 bool = l >= 0
	yyj2743++
	if yyhl2743 {
		yyb2743 = yyj2743 > l
	} else {
		yyb2743 = r.CheckBreak()
	}
	if yyb2743 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2743++
		if yyhl2743 {
			yyb2743 = yyj2743 > l
		} else {
			yyb2743 = r.CheckBreak()
		}
		if yyb2743 {
			break
		}
		if yyj2743 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2743-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2745 := z.EncBinary()
		_ = yym2745
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2746 := !z.EncBinary()
			yy2arr2746 := z.EncBasicHandle().StructToArray
			var yyfirst2746 bool
			var yyq2746 [3]bool
			_, _, _, _ = yysep2746, yyfirst2746, yyq2746, yy2arr2746
			const yyr2746 bool = false
			yyq2746[0] = x.Kind != ""
			yyq2746[1] = x.APIVersion != ""
			yyq2746[2] = true
			if yyr2746 || yy2arr2746 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2746 int = 0
				for _, b := range yyq2746 {
					if b {
						yynn2746++
					}
				}
				r.EncodeMapStart(yynn2746)
			}
			if yyr2746 || yy2arr2746 {
				if yyq2746[0] {
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2746[0] {
					yyfirst2746 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2746 {
						r.EncodeMapKVSeparator()
					}
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2746 || yy2arr2746 {
				if yysep2746 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2746[1] {
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2746[1] {
					if yyfirst2746 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2746 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2746 {
						r.EncodeMapKVSeparator()
					}
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2746 || yy2arr2746 {
				if yysep2746 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2746[2] {
					yy2754 := &x.Reference
					yy2754.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2746[2] {
					if yyfirst2746 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2746 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					if yysep2746 {
						r.EncodeMapKVSeparator()
					}
					yy2755 := &x.Reference
					yy2755.CodecEncodeSelf(e)
				}
			}
			if yysep2746 {
				if yyr2746 || yy2arr2746 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2756 := z.DecBinary()
	_ = yym2756
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2757 := r.ReadMapStart()
			if yyl2757 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2757, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2757 := r.ReadArrayStart()
			if yyl2757 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2757, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2758Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2758Slc
	var yyhl2758 bool = l >= 0
	for yyj2758 := 0; ; yyj2758++ {
		if yyhl2758 {
			if yyj2758 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2758 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2758Slc = r.DecodeBytes(yys2758Slc, true, true)
		yys2758 := string(yys2758Slc)
		if !yyhl2758 {
			r.ReadMapKVSeparator()
		}
		switch yys2758 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2761 := &x.Reference
				yyv2761.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2758)
		} // end switch yys2758
	} // end for yyj2758
	if !yyhl2758 {
		r.ReadMapEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2762 int
	var yyb2762 bool
	var yyhl2762 bool = l >= 0
	yyj2762++
	if yyhl2762 {
		yyb2762 = yyj2762 > l
	} else {
		yyb2762 = r.CheckBreak()
	}
	if yyb2762 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2762++
	if yyhl2762 {
		yyb2762 = yyj2762 > l
	} else {
		yyb2762 = r.CheckBreak()
	}
	if yyb2762 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2762++
	if yyhl2762 {
		yyb2762 = yyj2762 > l
	} else {
		yyb2762 = r.CheckBreak()
	}
	if yyb2762 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2765 := &x.Reference
		yyv2765.CodecDecodeSelf(d)
	}
	for {
		yyj2762++
		if yyhl2762 {
			yyb2762 = yyj2762 > l
		} else {
			yyb2762 = r.CheckBreak()
		}
		if yyb2762 {
			break
		}
		if yyj2762 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2762-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2766 := z.EncBinary()
		_ = yym2766
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2767 := !z.EncBinary()
			yy2arr2767 := z.EncBasicHandle().StructToArray
			var yyfirst2767 bool
			var yyq2767 [2]bool
			_, _, _, _ = yysep2767, yyfirst2767, yyq2767, yy2arr2767
			const yyr2767 bool = false
			yyq2767[0] = x.Component != ""
			yyq2767[1] = x.Host != ""
			if yyr2767 || yy2arr2767 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2767 int = 0
				for _, b := range yyq2767 {
					if b {
						yynn2767++
					}
				}
				r.EncodeMapStart(yynn2767)
			}
			if yyr2767 || yy2arr2767 {
				if yyq2767[0] {
					yym2769 := z.EncBinary()
					_ = yym2769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2767[0] {
					yyfirst2767 = true
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					if yysep2767 {
						r.EncodeMapKVSeparator()
					}
					yym2770 := z.EncBinary()
					_ = yym2770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2767 || yy2arr2767 {
				if yysep2767 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2767[1] {
					yym2772 := z.EncBinary()
					_ = yym2772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2767[1] {
					if yyfirst2767 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2767 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					if yysep2767 {
						r.EncodeMapKVSeparator()
					}
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2767 {
				if yyr2767 || yy2arr2767 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2774 := z.DecBinary()
	_ = yym2774
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2775 := r.ReadMapStart()
			if yyl2775 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2775, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2775 := r.ReadArrayStart()
			if yyl2775 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2775, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2776Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2776Slc
	var yyhl2776 bool = l >= 0
	for yyj2776 := 0; ; yyj2776++ {
		if yyhl2776 {
			if yyj2776 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2776 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2776Slc = r.DecodeBytes(yys2776Slc, true, true)
		yys2776 := string(yys2776Slc)
		if !yyhl2776 {
			r.ReadMapKVSeparator()
		}
		switch yys2776 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2776)
		} // end switch yys2776
	} // end for yyj2776
	if !yyhl2776 {
		r.ReadMapEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2779 int
	var yyb2779 bool
	var yyhl2779 bool = l >= 0
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2779++
		if yyhl2779 {
			yyb2779 = yyj2779 > l
		} else {
			yyb2779 = r.CheckBreak()
		}
		if yyb2779 {
			break
		}
		if yyj2779 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2779-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2782 := z.EncBinary()
		_ = yym2782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2783 := !z.EncBinary()
			yy2arr2783 := z.EncBasicHandle().StructToArray
			var yyfirst2783 bool
			var yyq2783 [10]bool
			_, _, _, _ = yysep2783, yyfirst2783, yyq2783, yy2arr2783
			const yyr2783 bool = false
			yyq2783[0] = x.Kind != ""
			yyq2783[1] = x.APIVersion != ""
			yyq2783[2] = true
			yyq2783[3] = true
			yyq2783[4] = x.Reason != ""
			yyq2783[5] = x.Message != ""
			yyq2783[6] = true
			yyq2783[7] = true
			yyq2783[8] = true
			yyq2783[9] = x.Count != 0
			if yyr2783 || yy2arr2783 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2783 int = 0
				for _, b := range yyq2783 {
					if b {
						yynn2783++
					}
				}
				r.EncodeMapStart(yynn2783)
			}
			if yyr2783 || yy2arr2783 {
				if yyq2783[0] {
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2783[0] {
					yyfirst2783 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2783 {
						r.EncodeMapKVSeparator()
					}
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2783 || yy2arr2783 {
				if yysep2783 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2783[1] {
					yym2788 := z.EncBinary()
					_ = yym2788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2783[1] {
					if yyfirst2783 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2783 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2783 {
						r.EncodeMapKVSeparator()
					}
					yym2789 := z.EncBinary()
					_ = yym2789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2783 || yy2arr2783 {
				if yysep2783 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2783[2] {
					yy2791 := &x.ObjectMeta
					yy2791.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2783[2] {
					if yyfirst2783 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2783 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2783 {
						r.EncodeMapKVSeparator()
					}
					yy2792 := &x.ObjectMeta
					yy2792.CodecEncodeSelf(e)
				}
			}
			if yyr2783 || yy2arr2783 {
				if yysep2783 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2783[3] {
					yy2794 := &x.InvolvedObject
					yy2794.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2783[3] {
					if yyfirst2783 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2783 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					if yysep2783 {
						r.EncodeMapKVSeparator()
					}
					yy2795 := &x.InvolvedObject
					yy2795.CodecEncodeSelf(e)
				}
			}
			if yyr2783 || yy2arr2783 {
				if yysep2783 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2783[4] {
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2783[4] {
					if yyfirst2783 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2783 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					if yysep2783 {
						r.EncodeMapKVSeparator()
					}
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2783 || yy2arr2783 {
				if yysep2783 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2783[5] {
					yym2800 := z.EncBinary()
					_ = yym2800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2783[5] {
					if yyfirst2783 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2783 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep2783 {
						r.EncodeMapKVSeparator()
					}
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2783 || yy2arr2783 {
				if yysep2783 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2783[6] {
					yy2803 := &x.Source
					yy2803.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2783[6] {
					if yyfirst2783 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2783 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					if yysep2783 {
						r.EncodeMapKVSeparator()
					}
					yy2804 := &x.Source
					yy2804.CodecEncodeSelf(e)
				}
			}
			if yyr2783 || yy2arr2783 {
				if yysep2783 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2783[7] {
					yy2806 := &x.FirstTimestamp
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2806) {
					} else if yym2807 {
						z.EncBinaryMarshal(yy2806)
					} else if !yym2807 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2806)
					} else {
						z.EncFallback(yy2806)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2783[7] {
					if yyfirst2783 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2783 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					if yysep2783 {
						r.EncodeMapKVSeparator()
					}
					yy2808 := &x.FirstTimestamp
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2808) {
					} else if yym2809 {
						z.EncBinaryMarshal(yy2808)
					} else if !yym2809 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2808)
					} else {
						z.EncFallback(yy2808)
					}
				}
			}
			if yyr2783 || yy2arr2783 {
				if yysep2783 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2783[8] {
					yy2811 := &x.LastTimestamp
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2811) {
					} else if yym2812 {
						z.EncBinaryMarshal(yy2811)
					} else if !yym2812 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2811)
					} else {
						z.EncFallback(yy2811)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2783[8] {
					if yyfirst2783 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2783 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					if yysep2783 {
						r.EncodeMapKVSeparator()
					}
					yy2813 := &x.LastTimestamp
					yym2814 := z.EncBinary()
					_ = yym2814
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2813) {
					} else if yym2814 {
						z.EncBinaryMarshal(yy2813)
					} else if !yym2814 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2813)
					} else {
						z.EncFallback(yy2813)
					}
				}
			}
			if yyr2783 || yy2arr2783 {
				if yysep2783 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2783[9] {
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2783[9] {
					if yyfirst2783 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2783 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					if yysep2783 {
						r.EncodeMapKVSeparator()
					}
					yym2817 := z.EncBinary()
					_ = yym2817
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2783 {
				if yyr2783 || yy2arr2783 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2818 := z.DecBinary()
	_ = yym2818
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2819 := r.ReadMapStart()
			if yyl2819 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2819, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2819 := r.ReadArrayStart()
			if yyl2819 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2819, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2820Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2820Slc
	var yyhl2820 bool = l >= 0
	for yyj2820 := 0; ; yyj2820++ {
		if yyhl2820 {
			if yyj2820 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2820 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2820Slc = r.DecodeBytes(yys2820Slc, true, true)
		yys2820 := string(yys2820Slc)
		if !yyhl2820 {
			r.ReadMapKVSeparator()
		}
		switch yys2820 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2823 := &x.ObjectMeta
				yyv2823.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2824 := &x.InvolvedObject
				yyv2824.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2827 := &x.Source
				yyv2827.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_util.Time{}
			} else {
				yyv2828 := &x.FirstTimestamp
				yym2829 := z.DecBinary()
				_ = yym2829
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2828) {
				} else if yym2829 {
					z.DecBinaryUnmarshal(yyv2828)
				} else if !yym2829 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2828)
				} else {
					z.DecFallback(yyv2828, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_util.Time{}
			} else {
				yyv2830 := &x.LastTimestamp
				yym2831 := z.DecBinary()
				_ = yym2831
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2830) {
				} else if yym2831 {
					z.DecBinaryUnmarshal(yyv2830)
				} else if !yym2831 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2830)
				} else {
					z.DecFallback(yyv2830, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2820)
		} // end switch yys2820
	} // end for yyj2820
	if !yyhl2820 {
		r.ReadMapEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2833 int
	var yyb2833 bool
	var yyhl2833 bool = l >= 0
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2836 := &x.ObjectMeta
		yyv2836.CodecDecodeSelf(d)
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2837 := &x.InvolvedObject
		yyv2837.CodecDecodeSelf(d)
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2840 := &x.Source
		yyv2840.CodecDecodeSelf(d)
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_util.Time{}
	} else {
		yyv2841 := &x.FirstTimestamp
		yym2842 := z.DecBinary()
		_ = yym2842
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2841) {
		} else if yym2842 {
			z.DecBinaryUnmarshal(yyv2841)
		} else if !yym2842 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2841)
		} else {
			z.DecFallback(yyv2841, false)
		}
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_util.Time{}
	} else {
		yyv2843 := &x.LastTimestamp
		yym2844 := z.DecBinary()
		_ = yym2844
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2843) {
		} else if yym2844 {
			z.DecBinaryUnmarshal(yyv2843)
		} else if !yym2844 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2843)
		} else {
			z.DecFallback(yyv2843, false)
		}
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2833++
		if yyhl2833 {
			yyb2833 = yyj2833 > l
		} else {
			yyb2833 = r.CheckBreak()
		}
		if yyb2833 {
			break
		}
		if yyj2833 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2833-1, "")
	}
	r.ReadArrayEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2846 := z.EncBinary()
		_ = yym2846
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2847 := !z.EncBinary()
			yy2arr2847 := z.EncBasicHandle().StructToArray
			var yyfirst2847 bool
			var yyq2847 [4]bool
			_, _, _, _ = yysep2847, yyfirst2847, yyq2847, yy2arr2847
			const yyr2847 bool = false
			yyq2847[0] = x.Kind != ""
			yyq2847[1] = x.APIVersion != ""
			yyq2847[2] = true
			if yyr2847 || yy2arr2847 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2847 int = 1
				for _, b := range yyq2847 {
					if b {
						yynn2847++
					}
				}
				r.EncodeMapStart(yynn2847)
			}
			if yyr2847 || yy2arr2847 {
				if yyq2847[0] {
					yym2849 := z.EncBinary()
					_ = yym2849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2847[0] {
					yyfirst2847 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2847 {
						r.EncodeMapKVSeparator()
					}
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2847 || yy2arr2847 {
				if yysep2847 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2847[1] {
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2847[1] {
					if yyfirst2847 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2847 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2847 {
						r.EncodeMapKVSeparator()
					}
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2847 || yy2arr2847 {
				if yysep2847 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2847[2] {
					yy2855 := &x.ListMeta
					yy2855.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2847[2] {
					if yyfirst2847 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2847 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2847 {
						r.EncodeMapKVSeparator()
					}
					yy2856 := &x.ListMeta
					yy2856.CodecEncodeSelf(e)
				}
			}
			if yyr2847 || yy2arr2847 {
				if yysep2847 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				if yyfirst2847 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2847 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep2847 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2847 {
				if yyr2847 || yy2arr2847 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2860 := z.DecBinary()
	_ = yym2860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2861 := r.ReadMapStart()
			if yyl2861 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2861, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2861 := r.ReadArrayStart()
			if yyl2861 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2862Slc
	var yyhl2862 bool = l >= 0
	for yyj2862 := 0; ; yyj2862++ {
		if yyhl2862 {
			if yyj2862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2862 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2862Slc = r.DecodeBytes(yys2862Slc, true, true)
		yys2862 := string(yys2862Slc)
		if !yyhl2862 {
			r.ReadMapKVSeparator()
		}
		switch yys2862 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2865 := &x.ListMeta
				yyv2865.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2866 := &x.Items
				yym2867 := z.DecBinary()
				_ = yym2867
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2866), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2862)
		} // end switch yys2862
	} // end for yyj2862
	if !yyhl2862 {
		r.ReadMapEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2868 int
	var yyb2868 bool
	var yyhl2868 bool = l >= 0
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2871 := &x.ListMeta
		yyv2871.CodecDecodeSelf(d)
	}
	yyj2868++
	if yyhl2868 {
		yyb2868 = yyj2868 > l
	} else {
		yyb2868 = r.CheckBreak()
	}
	if yyb2868 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2872 := &x.Items
		yym2873 := z.DecBinary()
		_ = yym2873
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2872), d)
		}
	}
	for {
		yyj2868++
		if yyhl2868 {
			yyb2868 = yyj2868 > l
		} else {
			yyb2868 = r.CheckBreak()
		}
		if yyb2868 {
			break
		}
		if yyj2868 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2868-1, "")
	}
	r.ReadArrayEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2874 := z.EncBinary()
		_ = yym2874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2875 := !z.EncBinary()
			yy2arr2875 := z.EncBasicHandle().StructToArray
			var yyfirst2875 bool
			var yyq2875 [4]bool
			_, _, _, _ = yysep2875, yyfirst2875, yyq2875, yy2arr2875
			const yyr2875 bool = false
			yyq2875[0] = x.Kind != ""
			yyq2875[1] = x.APIVersion != ""
			yyq2875[2] = true
			if yyr2875 || yy2arr2875 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2875 int = 1
				for _, b := range yyq2875 {
					if b {
						yynn2875++
					}
				}
				r.EncodeMapStart(yynn2875)
			}
			if yyr2875 || yy2arr2875 {
				if yyq2875[0] {
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2875[0] {
					yyfirst2875 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2875 {
						r.EncodeMapKVSeparator()
					}
					yym2878 := z.EncBinary()
					_ = yym2878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2875 || yy2arr2875 {
				if yysep2875 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2875[1] {
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2875[1] {
					if yyfirst2875 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2875 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2875 {
						r.EncodeMapKVSeparator()
					}
					yym2881 := z.EncBinary()
					_ = yym2881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2875 || yy2arr2875 {
				if yysep2875 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2875[2] {
					yy2883 := &x.ListMeta
					yy2883.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2875[2] {
					if yyfirst2875 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2875 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2875 {
						r.EncodeMapKVSeparator()
					}
					yy2884 := &x.ListMeta
					yy2884.CodecEncodeSelf(e)
				}
			}
			if yyr2875 || yy2arr2875 {
				if yysep2875 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2886 := z.EncBinary()
					_ = yym2886
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				if yyfirst2875 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2875 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep2875 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2887 := z.EncBinary()
					_ = yym2887
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yysep2875 {
				if yyr2875 || yy2arr2875 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2888 := z.DecBinary()
	_ = yym2888
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2889 := r.ReadMapStart()
			if yyl2889 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2889, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2889 := r.ReadArrayStart()
			if yyl2889 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2889, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2890Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2890Slc
	var yyhl2890 bool = l >= 0
	for yyj2890 := 0; ; yyj2890++ {
		if yyhl2890 {
			if yyj2890 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2890 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2890Slc = r.DecodeBytes(yys2890Slc, true, true)
		yys2890 := string(yys2890Slc)
		if !yyhl2890 {
			r.ReadMapKVSeparator()
		}
		switch yys2890 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2893 := &x.ListMeta
				yyv2893.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2894 := &x.Items
				yym2895 := z.DecBinary()
				_ = yym2895
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv2894), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2890)
		} // end switch yys2890
	} // end for yyj2890
	if !yyhl2890 {
		r.ReadMapEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2896 int
	var yyb2896 bool
	var yyhl2896 bool = l >= 0
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2899 := &x.ListMeta
		yyv2899.CodecDecodeSelf(d)
	}
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2900 := &x.Items
		yym2901 := z.DecBinary()
		_ = yym2901
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv2900), d)
		}
	}
	for {
		yyj2896++
		if yyhl2896 {
			yyb2896 = yyj2896 > l
		} else {
			yyb2896 = r.CheckBreak()
		}
		if yyb2896 {
			break
		}
		if yyj2896 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2896-1, "")
	}
	r.ReadArrayEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2902 := z.EncBinary()
	_ = yym2902
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2903 := z.DecBinary()
	_ = yym2903
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2904 := z.EncBinary()
		_ = yym2904
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2905 := !z.EncBinary()
			yy2arr2905 := z.EncBasicHandle().StructToArray
			var yyfirst2905 bool
			var yyq2905 [6]bool
			_, _, _, _ = yysep2905, yyfirst2905, yyq2905, yy2arr2905
			const yyr2905 bool = false
			yyq2905[0] = x.Type != ""
			yyq2905[1] = len(x.Max) != 0
			yyq2905[2] = len(x.Min) != 0
			yyq2905[3] = len(x.Default) != 0
			yyq2905[4] = len(x.DefaultRequest) != 0
			yyq2905[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr2905 || yy2arr2905 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2905 int = 0
				for _, b := range yyq2905 {
					if b {
						yynn2905++
					}
				}
				r.EncodeMapStart(yynn2905)
			}
			if yyr2905 || yy2arr2905 {
				if yyq2905[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2905[0] {
					yyfirst2905 = true
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					if yysep2905 {
						r.EncodeMapKVSeparator()
					}
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2905 || yy2arr2905 {
				if yysep2905 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2905[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2905[1] {
					if yyfirst2905 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2905 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if yysep2905 {
						r.EncodeMapKVSeparator()
					}
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2905 || yy2arr2905 {
				if yysep2905 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2905[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2905[2] {
					if yyfirst2905 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2905 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if yysep2905 {
						r.EncodeMapKVSeparator()
					}
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2905 || yy2arr2905 {
				if yysep2905 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2905[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2905[3] {
					if yyfirst2905 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2905 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if yysep2905 {
						r.EncodeMapKVSeparator()
					}
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2905 || yy2arr2905 {
				if yysep2905 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2905[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2905[4] {
					if yyfirst2905 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2905 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if yysep2905 {
						r.EncodeMapKVSeparator()
					}
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2905 || yy2arr2905 {
				if yysep2905 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2905[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2905[5] {
					if yyfirst2905 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2905 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if yysep2905 {
						r.EncodeMapKVSeparator()
					}
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2905 {
				if yyr2905 || yy2arr2905 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2912 := z.DecBinary()
	_ = yym2912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2913 := r.ReadMapStart()
			if yyl2913 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2913, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2913 := r.ReadArrayStart()
			if yyl2913 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2913, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2914Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2914Slc
	var yyhl2914 bool = l >= 0
	for yyj2914 := 0; ; yyj2914++ {
		if yyhl2914 {
			if yyj2914 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2914 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2914Slc = r.DecodeBytes(yys2914Slc, true, true)
		yys2914 := string(yys2914Slc)
		if !yyhl2914 {
			r.ReadMapKVSeparator()
		}
		switch yys2914 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv2916 := &x.Max
				yyv2916.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv2917 := &x.Min
				yyv2917.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv2918 := &x.Default
				yyv2918.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv2919 := &x.DefaultRequest
				yyv2919.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv2920 := &x.MaxLimitRequestRatio
				yyv2920.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2914)
		} // end switch yys2914
	} // end for yyj2914
	if !yyhl2914 {
		r.ReadMapEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2921 int
	var yyb2921 bool
	var yyhl2921 bool = l >= 0
	yyj2921++
	if yyhl2921 {
		yyb2921 = yyj2921 > l
	} else {
		yyb2921 = r.CheckBreak()
	}
	if yyb2921 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj2921++
	if yyhl2921 {
		yyb2921 = yyj2921 > l
	} else {
		yyb2921 = r.CheckBreak()
	}
	if yyb2921 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv2923 := &x.Max
		yyv2923.CodecDecodeSelf(d)
	}
	yyj2921++
	if yyhl2921 {
		yyb2921 = yyj2921 > l
	} else {
		yyb2921 = r.CheckBreak()
	}
	if yyb2921 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv2924 := &x.Min
		yyv2924.CodecDecodeSelf(d)
	}
	yyj2921++
	if yyhl2921 {
		yyb2921 = yyj2921 > l
	} else {
		yyb2921 = r.CheckBreak()
	}
	if yyb2921 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv2925 := &x.Default
		yyv2925.CodecDecodeSelf(d)
	}
	yyj2921++
	if yyhl2921 {
		yyb2921 = yyj2921 > l
	} else {
		yyb2921 = r.CheckBreak()
	}
	if yyb2921 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv2926 := &x.DefaultRequest
		yyv2926.CodecDecodeSelf(d)
	}
	yyj2921++
	if yyhl2921 {
		yyb2921 = yyj2921 > l
	} else {
		yyb2921 = r.CheckBreak()
	}
	if yyb2921 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv2927 := &x.MaxLimitRequestRatio
		yyv2927.CodecDecodeSelf(d)
	}
	for {
		yyj2921++
		if yyhl2921 {
			yyb2921 = yyj2921 > l
		} else {
			yyb2921 = r.CheckBreak()
		}
		if yyb2921 {
			break
		}
		if yyj2921 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2921-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2928 := z.EncBinary()
		_ = yym2928
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2929 := !z.EncBinary()
			yy2arr2929 := z.EncBasicHandle().StructToArray
			var yyfirst2929 bool
			var yyq2929 [1]bool
			_, _, _, _ = yysep2929, yyfirst2929, yyq2929, yy2arr2929
			const yyr2929 bool = false
			if yyr2929 || yy2arr2929 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2929 int = 1
				for _, b := range yyq2929 {
					if b {
						yynn2929++
					}
				}
				r.EncodeMapStart(yynn2929)
			}
			if yyr2929 || yy2arr2929 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				yyfirst2929 = true
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if yysep2929 {
					r.EncodeMapKVSeparator()
				}
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym2932 := z.EncBinary()
					_ = yym2932
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep2929 {
				if yyr2929 || yy2arr2929 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2933 := z.DecBinary()
	_ = yym2933
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2934 := r.ReadMapStart()
			if yyl2934 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2934, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2934 := r.ReadArrayStart()
			if yyl2934 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2934, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2935Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2935Slc
	var yyhl2935 bool = l >= 0
	for yyj2935 := 0; ; yyj2935++ {
		if yyhl2935 {
			if yyj2935 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2935 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2935Slc = r.DecodeBytes(yys2935Slc, true, true)
		yys2935 := string(yys2935Slc)
		if !yyhl2935 {
			r.ReadMapKVSeparator()
		}
		switch yys2935 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv2936 := &x.Limits
				yym2937 := z.DecBinary()
				_ = yym2937
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv2936), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2935)
		} // end switch yys2935
	} // end for yyj2935
	if !yyhl2935 {
		r.ReadMapEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2938 int
	var yyb2938 bool
	var yyhl2938 bool = l >= 0
	yyj2938++
	if yyhl2938 {
		yyb2938 = yyj2938 > l
	} else {
		yyb2938 = r.CheckBreak()
	}
	if yyb2938 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv2939 := &x.Limits
		yym2940 := z.DecBinary()
		_ = yym2940
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv2939), d)
		}
	}
	for {
		yyj2938++
		if yyhl2938 {
			yyb2938 = yyj2938 > l
		} else {
			yyb2938 = r.CheckBreak()
		}
		if yyb2938 {
			break
		}
		if yyj2938 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2938-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2941 := z.EncBinary()
		_ = yym2941
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2942 := !z.EncBinary()
			yy2arr2942 := z.EncBasicHandle().StructToArray
			var yyfirst2942 bool
			var yyq2942 [4]bool
			_, _, _, _ = yysep2942, yyfirst2942, yyq2942, yy2arr2942
			const yyr2942 bool = false
			yyq2942[0] = x.Kind != ""
			yyq2942[1] = x.APIVersion != ""
			yyq2942[2] = true
			yyq2942[3] = true
			if yyr2942 || yy2arr2942 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2942 int = 0
				for _, b := range yyq2942 {
					if b {
						yynn2942++
					}
				}
				r.EncodeMapStart(yynn2942)
			}
			if yyr2942 || yy2arr2942 {
				if yyq2942[0] {
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2942[0] {
					yyfirst2942 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2942 {
						r.EncodeMapKVSeparator()
					}
					yym2945 := z.EncBinary()
					_ = yym2945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2942 || yy2arr2942 {
				if yysep2942 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2942[1] {
					yym2947 := z.EncBinary()
					_ = yym2947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2942[1] {
					if yyfirst2942 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2942 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2942 {
						r.EncodeMapKVSeparator()
					}
					yym2948 := z.EncBinary()
					_ = yym2948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2942 || yy2arr2942 {
				if yysep2942 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2942[2] {
					yy2950 := &x.ObjectMeta
					yy2950.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2942[2] {
					if yyfirst2942 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2942 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2942 {
						r.EncodeMapKVSeparator()
					}
					yy2951 := &x.ObjectMeta
					yy2951.CodecEncodeSelf(e)
				}
			}
			if yyr2942 || yy2arr2942 {
				if yysep2942 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2942[3] {
					yy2953 := &x.Spec
					yy2953.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2942[3] {
					if yyfirst2942 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2942 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep2942 {
						r.EncodeMapKVSeparator()
					}
					yy2954 := &x.Spec
					yy2954.CodecEncodeSelf(e)
				}
			}
			if yysep2942 {
				if yyr2942 || yy2arr2942 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2955 := z.DecBinary()
	_ = yym2955
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2956 := r.ReadMapStart()
			if yyl2956 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2956, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2956 := r.ReadArrayStart()
			if yyl2956 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2956, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2957Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2957Slc
	var yyhl2957 bool = l >= 0
	for yyj2957 := 0; ; yyj2957++ {
		if yyhl2957 {
			if yyj2957 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2957 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2957Slc = r.DecodeBytes(yys2957Slc, true, true)
		yys2957 := string(yys2957Slc)
		if !yyhl2957 {
			r.ReadMapKVSeparator()
		}
		switch yys2957 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2960 := &x.ObjectMeta
				yyv2960.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv2961 := &x.Spec
				yyv2961.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2957)
		} // end switch yys2957
	} // end for yyj2957
	if !yyhl2957 {
		r.ReadMapEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2962 int
	var yyb2962 bool
	var yyhl2962 bool = l >= 0
	yyj2962++
	if yyhl2962 {
		yyb2962 = yyj2962 > l
	} else {
		yyb2962 = r.CheckBreak()
	}
	if yyb2962 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2962++
	if yyhl2962 {
		yyb2962 = yyj2962 > l
	} else {
		yyb2962 = r.CheckBreak()
	}
	if yyb2962 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2962++
	if yyhl2962 {
		yyb2962 = yyj2962 > l
	} else {
		yyb2962 = r.CheckBreak()
	}
	if yyb2962 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2965 := &x.ObjectMeta
		yyv2965.CodecDecodeSelf(d)
	}
	yyj2962++
	if yyhl2962 {
		yyb2962 = yyj2962 > l
	} else {
		yyb2962 = r.CheckBreak()
	}
	if yyb2962 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv2966 := &x.Spec
		yyv2966.CodecDecodeSelf(d)
	}
	for {
		yyj2962++
		if yyhl2962 {
			yyb2962 = yyj2962 > l
		} else {
			yyb2962 = r.CheckBreak()
		}
		if yyb2962 {
			break
		}
		if yyj2962 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2962-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2967 := z.EncBinary()
		_ = yym2967
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2968 := !z.EncBinary()
			yy2arr2968 := z.EncBasicHandle().StructToArray
			var yyfirst2968 bool
			var yyq2968 [4]bool
			_, _, _, _ = yysep2968, yyfirst2968, yyq2968, yy2arr2968
			const yyr2968 bool = false
			yyq2968[0] = x.Kind != ""
			yyq2968[1] = x.APIVersion != ""
			yyq2968[2] = true
			if yyr2968 || yy2arr2968 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2968 int = 1
				for _, b := range yyq2968 {
					if b {
						yynn2968++
					}
				}
				r.EncodeMapStart(yynn2968)
			}
			if yyr2968 || yy2arr2968 {
				if yyq2968[0] {
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2968[0] {
					yyfirst2968 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2968 {
						r.EncodeMapKVSeparator()
					}
					yym2971 := z.EncBinary()
					_ = yym2971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2968 || yy2arr2968 {
				if yysep2968 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2968[1] {
					yym2973 := z.EncBinary()
					_ = yym2973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2968[1] {
					if yyfirst2968 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2968 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2968 {
						r.EncodeMapKVSeparator()
					}
					yym2974 := z.EncBinary()
					_ = yym2974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2968 || yy2arr2968 {
				if yysep2968 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2968[2] {
					yy2976 := &x.ListMeta
					yy2976.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2968[2] {
					if yyfirst2968 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2968 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep2968 {
						r.EncodeMapKVSeparator()
					}
					yy2977 := &x.ListMeta
					yy2977.CodecEncodeSelf(e)
				}
			}
			if yyr2968 || yy2arr2968 {
				if yysep2968 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				if yyfirst2968 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2968 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep2968 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2980 := z.EncBinary()
					_ = yym2980
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep2968 {
				if yyr2968 || yy2arr2968 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2981 := z.DecBinary()
	_ = yym2981
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2982 := r.ReadMapStart()
			if yyl2982 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2982, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2982 := r.ReadArrayStart()
			if yyl2982 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2982, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2983Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2983Slc
	var yyhl2983 bool = l >= 0
	for yyj2983 := 0; ; yyj2983++ {
		if yyhl2983 {
			if yyj2983 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj2983 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys2983Slc = r.DecodeBytes(yys2983Slc, true, true)
		yys2983 := string(yys2983Slc)
		if !yyhl2983 {
			r.ReadMapKVSeparator()
		}
		switch yys2983 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv2986 := &x.ListMeta
				yyv2986.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2987 := &x.Items
				yym2988 := z.DecBinary()
				_ = yym2988
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv2987), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2983)
		} // end switch yys2983
	} // end for yyj2983
	if !yyhl2983 {
		r.ReadMapEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2989 int
	var yyb2989 bool
	var yyhl2989 bool = l >= 0
	yyj2989++
	if yyhl2989 {
		yyb2989 = yyj2989 > l
	} else {
		yyb2989 = r.CheckBreak()
	}
	if yyb2989 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2989++
	if yyhl2989 {
		yyb2989 = yyj2989 > l
	} else {
		yyb2989 = r.CheckBreak()
	}
	if yyb2989 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2989++
	if yyhl2989 {
		yyb2989 = yyj2989 > l
	} else {
		yyb2989 = r.CheckBreak()
	}
	if yyb2989 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv2992 := &x.ListMeta
		yyv2992.CodecDecodeSelf(d)
	}
	yyj2989++
	if yyhl2989 {
		yyb2989 = yyj2989 > l
	} else {
		yyb2989 = r.CheckBreak()
	}
	if yyb2989 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2993 := &x.Items
		yym2994 := z.DecBinary()
		_ = yym2994
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv2993), d)
		}
	}
	for {
		yyj2989++
		if yyhl2989 {
			yyb2989 = yyj2989 > l
		} else {
			yyb2989 = r.CheckBreak()
		}
		if yyb2989 {
			break
		}
		if yyj2989 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj2989-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2995 := z.EncBinary()
		_ = yym2995
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2996 := !z.EncBinary()
			yy2arr2996 := z.EncBasicHandle().StructToArray
			var yyfirst2996 bool
			var yyq2996 [1]bool
			_, _, _, _ = yysep2996, yyfirst2996, yyq2996, yy2arr2996
			const yyr2996 bool = false
			yyq2996[0] = len(x.Hard) != 0
			if yyr2996 || yy2arr2996 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2996 int = 0
				for _, b := range yyq2996 {
					if b {
						yynn2996++
					}
				}
				r.EncodeMapStart(yynn2996)
			}
			if yyr2996 || yy2arr2996 {
				if yyq2996[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2996[0] {
					yyfirst2996 = true
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if yysep2996 {
						r.EncodeMapKVSeparator()
					}
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2996 {
				if yyr2996 || yy2arr2996 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2998 := z.DecBinary()
	_ = yym2998
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl2999 := r.ReadMapStart()
			if yyl2999 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2999, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl2999 := r.ReadArrayStart()
			if yyl2999 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2999, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3000Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3000Slc
	var yyhl3000 bool = l >= 0
	for yyj3000 := 0; ; yyj3000++ {
		if yyhl3000 {
			if yyj3000 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3000 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3000Slc = r.DecodeBytes(yys3000Slc, true, true)
		yys3000 := string(yys3000Slc)
		if !yyhl3000 {
			r.ReadMapKVSeparator()
		}
		switch yys3000 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3001 := &x.Hard
				yyv3001.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3000)
		} // end switch yys3000
	} // end for yyj3000
	if !yyhl3000 {
		r.ReadMapEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3002 int
	var yyb3002 bool
	var yyhl3002 bool = l >= 0
	yyj3002++
	if yyhl3002 {
		yyb3002 = yyj3002 > l
	} else {
		yyb3002 = r.CheckBreak()
	}
	if yyb3002 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3003 := &x.Hard
		yyv3003.CodecDecodeSelf(d)
	}
	for {
		yyj3002++
		if yyhl3002 {
			yyb3002 = yyj3002 > l
		} else {
			yyb3002 = r.CheckBreak()
		}
		if yyb3002 {
			break
		}
		if yyj3002 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3002-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3004 := z.EncBinary()
		_ = yym3004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3005 := !z.EncBinary()
			yy2arr3005 := z.EncBasicHandle().StructToArray
			var yyfirst3005 bool
			var yyq3005 [2]bool
			_, _, _, _ = yysep3005, yyfirst3005, yyq3005, yy2arr3005
			const yyr3005 bool = false
			yyq3005[0] = len(x.Hard) != 0
			yyq3005[1] = len(x.Used) != 0
			if yyr3005 || yy2arr3005 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3005 int = 0
				for _, b := range yyq3005 {
					if b {
						yynn3005++
					}
				}
				r.EncodeMapStart(yynn3005)
			}
			if yyr3005 || yy2arr3005 {
				if yyq3005[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3005[0] {
					yyfirst3005 = true
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if yysep3005 {
						r.EncodeMapKVSeparator()
					}
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3005 || yy2arr3005 {
				if yysep3005 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3005[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3005[1] {
					if yyfirst3005 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3005 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if yysep3005 {
						r.EncodeMapKVSeparator()
					}
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3005 {
				if yyr3005 || yy2arr3005 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3008 := z.DecBinary()
	_ = yym3008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3009 := r.ReadMapStart()
			if yyl3009 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3009, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3009 := r.ReadArrayStart()
			if yyl3009 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3010Slc
	var yyhl3010 bool = l >= 0
	for yyj3010 := 0; ; yyj3010++ {
		if yyhl3010 {
			if yyj3010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3010 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3010Slc = r.DecodeBytes(yys3010Slc, true, true)
		yys3010 := string(yys3010Slc)
		if !yyhl3010 {
			r.ReadMapKVSeparator()
		}
		switch yys3010 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3011 := &x.Hard
				yyv3011.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3012 := &x.Used
				yyv3012.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3010)
		} // end switch yys3010
	} // end for yyj3010
	if !yyhl3010 {
		r.ReadMapEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3013 int
	var yyb3013 bool
	var yyhl3013 bool = l >= 0
	yyj3013++
	if yyhl3013 {
		yyb3013 = yyj3013 > l
	} else {
		yyb3013 = r.CheckBreak()
	}
	if yyb3013 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3014 := &x.Hard
		yyv3014.CodecDecodeSelf(d)
	}
	yyj3013++
	if yyhl3013 {
		yyb3013 = yyj3013 > l
	} else {
		yyb3013 = r.CheckBreak()
	}
	if yyb3013 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3015 := &x.Used
		yyv3015.CodecDecodeSelf(d)
	}
	for {
		yyj3013++
		if yyhl3013 {
			yyb3013 = yyj3013 > l
		} else {
			yyb3013 = r.CheckBreak()
		}
		if yyb3013 {
			break
		}
		if yyj3013 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3013-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3016 := z.EncBinary()
		_ = yym3016
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3017 := !z.EncBinary()
			yy2arr3017 := z.EncBasicHandle().StructToArray
			var yyfirst3017 bool
			var yyq3017 [5]bool
			_, _, _, _ = yysep3017, yyfirst3017, yyq3017, yy2arr3017
			const yyr3017 bool = false
			yyq3017[0] = x.Kind != ""
			yyq3017[1] = x.APIVersion != ""
			yyq3017[2] = true
			yyq3017[3] = true
			yyq3017[4] = true
			if yyr3017 || yy2arr3017 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3017 int = 0
				for _, b := range yyq3017 {
					if b {
						yynn3017++
					}
				}
				r.EncodeMapStart(yynn3017)
			}
			if yyr3017 || yy2arr3017 {
				if yyq3017[0] {
					yym3019 := z.EncBinary()
					_ = yym3019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3017[0] {
					yyfirst3017 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3017 {
						r.EncodeMapKVSeparator()
					}
					yym3020 := z.EncBinary()
					_ = yym3020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3017 || yy2arr3017 {
				if yysep3017 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3017[1] {
					yym3022 := z.EncBinary()
					_ = yym3022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3017[1] {
					if yyfirst3017 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3017 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3017 {
						r.EncodeMapKVSeparator()
					}
					yym3023 := z.EncBinary()
					_ = yym3023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3017 || yy2arr3017 {
				if yysep3017 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3017[2] {
					yy3025 := &x.ObjectMeta
					yy3025.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3017[2] {
					if yyfirst3017 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3017 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3017 {
						r.EncodeMapKVSeparator()
					}
					yy3026 := &x.ObjectMeta
					yy3026.CodecEncodeSelf(e)
				}
			}
			if yyr3017 || yy2arr3017 {
				if yysep3017 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3017[3] {
					yy3028 := &x.Spec
					yy3028.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3017[3] {
					if yyfirst3017 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3017 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					if yysep3017 {
						r.EncodeMapKVSeparator()
					}
					yy3029 := &x.Spec
					yy3029.CodecEncodeSelf(e)
				}
			}
			if yyr3017 || yy2arr3017 {
				if yysep3017 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3017[4] {
					yy3031 := &x.Status
					yy3031.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3017[4] {
					if yyfirst3017 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3017 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					if yysep3017 {
						r.EncodeMapKVSeparator()
					}
					yy3032 := &x.Status
					yy3032.CodecEncodeSelf(e)
				}
			}
			if yysep3017 {
				if yyr3017 || yy2arr3017 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3033 := z.DecBinary()
	_ = yym3033
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3034 := r.ReadMapStart()
			if yyl3034 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3034, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3034 := r.ReadArrayStart()
			if yyl3034 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3034, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3035Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3035Slc
	var yyhl3035 bool = l >= 0
	for yyj3035 := 0; ; yyj3035++ {
		if yyhl3035 {
			if yyj3035 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3035 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3035Slc = r.DecodeBytes(yys3035Slc, true, true)
		yys3035 := string(yys3035Slc)
		if !yyhl3035 {
			r.ReadMapKVSeparator()
		}
		switch yys3035 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3038 := &x.ObjectMeta
				yyv3038.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3039 := &x.Spec
				yyv3039.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3040 := &x.Status
				yyv3040.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3035)
		} // end switch yys3035
	} // end for yyj3035
	if !yyhl3035 {
		r.ReadMapEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3041 int
	var yyb3041 bool
	var yyhl3041 bool = l >= 0
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3044 := &x.ObjectMeta
		yyv3044.CodecDecodeSelf(d)
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3045 := &x.Spec
		yyv3045.CodecDecodeSelf(d)
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3046 := &x.Status
		yyv3046.CodecDecodeSelf(d)
	}
	for {
		yyj3041++
		if yyhl3041 {
			yyb3041 = yyj3041 > l
		} else {
			yyb3041 = r.CheckBreak()
		}
		if yyb3041 {
			break
		}
		if yyj3041 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3041-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3047 := z.EncBinary()
		_ = yym3047
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3048 := !z.EncBinary()
			yy2arr3048 := z.EncBasicHandle().StructToArray
			var yyfirst3048 bool
			var yyq3048 [4]bool
			_, _, _, _ = yysep3048, yyfirst3048, yyq3048, yy2arr3048
			const yyr3048 bool = false
			yyq3048[0] = x.Kind != ""
			yyq3048[1] = x.APIVersion != ""
			yyq3048[2] = true
			if yyr3048 || yy2arr3048 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3048 int = 1
				for _, b := range yyq3048 {
					if b {
						yynn3048++
					}
				}
				r.EncodeMapStart(yynn3048)
			}
			if yyr3048 || yy2arr3048 {
				if yyq3048[0] {
					yym3050 := z.EncBinary()
					_ = yym3050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3048[0] {
					yyfirst3048 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3048 {
						r.EncodeMapKVSeparator()
					}
					yym3051 := z.EncBinary()
					_ = yym3051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3048 || yy2arr3048 {
				if yysep3048 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3048[1] {
					yym3053 := z.EncBinary()
					_ = yym3053
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3048[1] {
					if yyfirst3048 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3048 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3048 {
						r.EncodeMapKVSeparator()
					}
					yym3054 := z.EncBinary()
					_ = yym3054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3048 || yy2arr3048 {
				if yysep3048 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3048[2] {
					yy3056 := &x.ListMeta
					yy3056.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3048[2] {
					if yyfirst3048 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3048 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3048 {
						r.EncodeMapKVSeparator()
					}
					yy3057 := &x.ListMeta
					yy3057.CodecEncodeSelf(e)
				}
			}
			if yyr3048 || yy2arr3048 {
				if yysep3048 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3059 := z.EncBinary()
					_ = yym3059
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				if yyfirst3048 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3048 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep3048 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3048 {
				if yyr3048 || yy2arr3048 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3061 := z.DecBinary()
	_ = yym3061
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3062 := r.ReadMapStart()
			if yyl3062 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3062, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3062 := r.ReadArrayStart()
			if yyl3062 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3062, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3063Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3063Slc
	var yyhl3063 bool = l >= 0
	for yyj3063 := 0; ; yyj3063++ {
		if yyhl3063 {
			if yyj3063 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3063 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3063Slc = r.DecodeBytes(yys3063Slc, true, true)
		yys3063 := string(yys3063Slc)
		if !yyhl3063 {
			r.ReadMapKVSeparator()
		}
		switch yys3063 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv3066 := &x.ListMeta
				yyv3066.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3067 := &x.Items
				yym3068 := z.DecBinary()
				_ = yym3068
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3067), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3063)
		} // end switch yys3063
	} // end for yyj3063
	if !yyhl3063 {
		r.ReadMapEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3069 int
	var yyb3069 bool
	var yyhl3069 bool = l >= 0
	yyj3069++
	if yyhl3069 {
		yyb3069 = yyj3069 > l
	} else {
		yyb3069 = r.CheckBreak()
	}
	if yyb3069 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3069++
	if yyhl3069 {
		yyb3069 = yyj3069 > l
	} else {
		yyb3069 = r.CheckBreak()
	}
	if yyb3069 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3069++
	if yyhl3069 {
		yyb3069 = yyj3069 > l
	} else {
		yyb3069 = r.CheckBreak()
	}
	if yyb3069 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv3072 := &x.ListMeta
		yyv3072.CodecDecodeSelf(d)
	}
	yyj3069++
	if yyhl3069 {
		yyb3069 = yyj3069 > l
	} else {
		yyb3069 = r.CheckBreak()
	}
	if yyb3069 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3073 := &x.Items
		yym3074 := z.DecBinary()
		_ = yym3074
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3073), d)
		}
	}
	for {
		yyj3069++
		if yyhl3069 {
			yyb3069 = yyj3069 > l
		} else {
			yyb3069 = r.CheckBreak()
		}
		if yyb3069 {
			break
		}
		if yyj3069 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3069-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3075 := z.EncBinary()
		_ = yym3075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3076 := !z.EncBinary()
			yy2arr3076 := z.EncBasicHandle().StructToArray
			var yyfirst3076 bool
			var yyq3076 [5]bool
			_, _, _, _ = yysep3076, yyfirst3076, yyq3076, yy2arr3076
			const yyr3076 bool = false
			yyq3076[0] = x.Kind != ""
			yyq3076[1] = x.APIVersion != ""
			yyq3076[2] = true
			yyq3076[3] = len(x.Data) != 0
			yyq3076[4] = x.Type != ""
			if yyr3076 || yy2arr3076 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3076 int = 0
				for _, b := range yyq3076 {
					if b {
						yynn3076++
					}
				}
				r.EncodeMapStart(yynn3076)
			}
			if yyr3076 || yy2arr3076 {
				if yyq3076[0] {
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[0] {
					yyfirst3076 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3076 {
						r.EncodeMapKVSeparator()
					}
					yym3079 := z.EncBinary()
					_ = yym3079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				if yysep3076 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3076[1] {
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[1] {
					if yyfirst3076 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3076 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3076 {
						r.EncodeMapKVSeparator()
					}
					yym3082 := z.EncBinary()
					_ = yym3082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				if yysep3076 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3076[2] {
					yy3084 := &x.ObjectMeta
					yy3084.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3076[2] {
					if yyfirst3076 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3076 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3076 {
						r.EncodeMapKVSeparator()
					}
					yy3085 := &x.ObjectMeta
					yy3085.CodecEncodeSelf(e)
				}
			}
			if yyr3076 || yy2arr3076 {
				if yysep3076 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3076[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3087 := z.EncBinary()
						_ = yym3087
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3076[3] {
					if yyfirst3076 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3076 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if yysep3076 {
						r.EncodeMapKVSeparator()
					}
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3088 := z.EncBinary()
						_ = yym3088
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3076 || yy2arr3076 {
				if yysep3076 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3076[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3076[4] {
					if yyfirst3076 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3076 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					if yysep3076 {
						r.EncodeMapKVSeparator()
					}
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3076 {
				if yyr3076 || yy2arr3076 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3090 := z.DecBinary()
	_ = yym3090
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3091 := r.ReadMapStart()
			if yyl3091 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3091, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3091 := r.ReadArrayStart()
			if yyl3091 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3091, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3092Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3092Slc
	var yyhl3092 bool = l >= 0
	for yyj3092 := 0; ; yyj3092++ {
		if yyhl3092 {
			if yyj3092 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3092 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3092Slc = r.DecodeBytes(yys3092Slc, true, true)
		yys3092 := string(yys3092Slc)
		if !yyhl3092 {
			r.ReadMapKVSeparator()
		}
		switch yys3092 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3095 := &x.ObjectMeta
				yyv3095.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3096 := &x.Data
				yym3097 := z.DecBinary()
				_ = yym3097
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3096), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3092)
		} // end switch yys3092
	} // end for yyj3092
	if !yyhl3092 {
		r.ReadMapEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3099 int
	var yyb3099 bool
	var yyhl3099 bool = l >= 0
	yyj3099++
	if yyhl3099 {
		yyb3099 = yyj3099 > l
	} else {
		yyb3099 = r.CheckBreak()
	}
	if yyb3099 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3099++
	if yyhl3099 {
		yyb3099 = yyj3099 > l
	} else {
		yyb3099 = r.CheckBreak()
	}
	if yyb3099 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3099++
	if yyhl3099 {
		yyb3099 = yyj3099 > l
	} else {
		yyb3099 = r.CheckBreak()
	}
	if yyb3099 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3102 := &x.ObjectMeta
		yyv3102.CodecDecodeSelf(d)
	}
	yyj3099++
	if yyhl3099 {
		yyb3099 = yyj3099 > l
	} else {
		yyb3099 = r.CheckBreak()
	}
	if yyb3099 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3103 := &x.Data
		yym3104 := z.DecBinary()
		_ = yym3104
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3103), d)
		}
	}
	yyj3099++
	if yyhl3099 {
		yyb3099 = yyj3099 > l
	} else {
		yyb3099 = r.CheckBreak()
	}
	if yyb3099 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3099++
		if yyhl3099 {
			yyb3099 = yyj3099 > l
		} else {
			yyb3099 = r.CheckBreak()
		}
		if yyb3099 {
			break
		}
		if yyj3099 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3099-1, "")
	}
	r.ReadArrayEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3106 := z.EncBinary()
	_ = yym3106
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3107 := z.DecBinary()
	_ = yym3107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3108 := z.EncBinary()
		_ = yym3108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3109 := !z.EncBinary()
			yy2arr3109 := z.EncBasicHandle().StructToArray
			var yyfirst3109 bool
			var yyq3109 [4]bool
			_, _, _, _ = yysep3109, yyfirst3109, yyq3109, yy2arr3109
			const yyr3109 bool = false
			yyq3109[0] = x.Kind != ""
			yyq3109[1] = x.APIVersion != ""
			yyq3109[2] = true
			if yyr3109 || yy2arr3109 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3109 int = 1
				for _, b := range yyq3109 {
					if b {
						yynn3109++
					}
				}
				r.EncodeMapStart(yynn3109)
			}
			if yyr3109 || yy2arr3109 {
				if yyq3109[0] {
					yym3111 := z.EncBinary()
					_ = yym3111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3109[0] {
					yyfirst3109 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3109 {
						r.EncodeMapKVSeparator()
					}
					yym3112 := z.EncBinary()
					_ = yym3112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				if yysep3109 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3109[1] {
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3109[1] {
					if yyfirst3109 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3109 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3109 {
						r.EncodeMapKVSeparator()
					}
					yym3115 := z.EncBinary()
					_ = yym3115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3109 || yy2arr3109 {
				if yysep3109 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3109[2] {
					yy3117 := &x.ListMeta
					yy3117.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3109[2] {
					if yyfirst3109 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3109 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3109 {
						r.EncodeMapKVSeparator()
					}
					yy3118 := &x.ListMeta
					yy3118.CodecEncodeSelf(e)
				}
			}
			if yyr3109 || yy2arr3109 {
				if yysep3109 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3120 := z.EncBinary()
					_ = yym3120
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				if yyfirst3109 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3109 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep3109 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3121 := z.EncBinary()
					_ = yym3121
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3109 {
				if yyr3109 || yy2arr3109 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3122 := z.DecBinary()
	_ = yym3122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3123 := r.ReadMapStart()
			if yyl3123 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3123, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3123 := r.ReadArrayStart()
			if yyl3123 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3124Slc
	var yyhl3124 bool = l >= 0
	for yyj3124 := 0; ; yyj3124++ {
		if yyhl3124 {
			if yyj3124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3124 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3124Slc = r.DecodeBytes(yys3124Slc, true, true)
		yys3124 := string(yys3124Slc)
		if !yyhl3124 {
			r.ReadMapKVSeparator()
		}
		switch yys3124 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv3127 := &x.ListMeta
				yyv3127.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3128 := &x.Items
				yym3129 := z.DecBinary()
				_ = yym3129
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3128), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3124)
		} // end switch yys3124
	} // end for yyj3124
	if !yyhl3124 {
		r.ReadMapEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3130 int
	var yyb3130 bool
	var yyhl3130 bool = l >= 0
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv3133 := &x.ListMeta
		yyv3133.CodecDecodeSelf(d)
	}
	yyj3130++
	if yyhl3130 {
		yyb3130 = yyj3130 > l
	} else {
		yyb3130 = r.CheckBreak()
	}
	if yyb3130 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3134 := &x.Items
		yym3135 := z.DecBinary()
		_ = yym3135
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3134), d)
		}
	}
	for {
		yyj3130++
		if yyhl3130 {
			yyb3130 = yyj3130 > l
		} else {
			yyb3130 = r.CheckBreak()
		}
		if yyb3130 {
			break
		}
		if yyj3130 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3130-1, "")
	}
	r.ReadArrayEnd()
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3136 := z.EncBinary()
	_ = yym3136
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3137 := z.DecBinary()
	_ = yym3137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3138 := z.EncBinary()
	_ = yym3138
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3139 := z.DecBinary()
	_ = yym3139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3140 := z.EncBinary()
		_ = yym3140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3141 := !z.EncBinary()
			yy2arr3141 := z.EncBasicHandle().StructToArray
			var yyfirst3141 bool
			var yyq3141 [4]bool
			_, _, _, _ = yysep3141, yyfirst3141, yyq3141, yy2arr3141
			const yyr3141 bool = false
			yyq3141[2] = x.Message != ""
			yyq3141[3] = x.Error != ""
			if yyr3141 || yy2arr3141 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3141 int = 2
				for _, b := range yyq3141 {
					if b {
						yynn3141++
					}
				}
				r.EncodeMapStart(yynn3141)
			}
			if yyr3141 || yy2arr3141 {
				x.Type.CodecEncodeSelf(e)
			} else {
				yyfirst3141 = true
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				if yysep3141 {
					r.EncodeMapKVSeparator()
				}
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3141 || yy2arr3141 {
				if yysep3141 {
					r.EncodeArrayEntrySeparator()
				}
				x.Status.CodecEncodeSelf(e)
			} else {
				if yyfirst3141 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3141 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				if yysep3141 {
					r.EncodeMapKVSeparator()
				}
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3141 || yy2arr3141 {
				if yysep3141 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3141[2] {
					yym3145 := z.EncBinary()
					_ = yym3145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[2] {
					if yyfirst3141 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3141 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					if yysep3141 {
						r.EncodeMapKVSeparator()
					}
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				if yysep3141 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3141[3] {
					yym3148 := z.EncBinary()
					_ = yym3148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[3] {
					if yyfirst3141 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3141 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					if yysep3141 {
						r.EncodeMapKVSeparator()
					}
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3141 {
				if yyr3141 || yy2arr3141 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3150 := z.DecBinary()
	_ = yym3150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3151 := r.ReadMapStart()
			if yyl3151 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3151, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3151 := r.ReadArrayStart()
			if yyl3151 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3151, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3152Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3152Slc
	var yyhl3152 bool = l >= 0
	for yyj3152 := 0; ; yyj3152++ {
		if yyhl3152 {
			if yyj3152 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3152 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3152Slc = r.DecodeBytes(yys3152Slc, true, true)
		yys3152 := string(yys3152Slc)
		if !yyhl3152 {
			r.ReadMapKVSeparator()
		}
		switch yys3152 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3152)
		} // end switch yys3152
	} // end for yyj3152
	if !yyhl3152 {
		r.ReadMapEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3157 int
	var yyb3157 bool
	var yyhl3157 bool = l >= 0
	yyj3157++
	if yyhl3157 {
		yyb3157 = yyj3157 > l
	} else {
		yyb3157 = r.CheckBreak()
	}
	if yyb3157 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3157++
	if yyhl3157 {
		yyb3157 = yyj3157 > l
	} else {
		yyb3157 = r.CheckBreak()
	}
	if yyb3157 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3157++
	if yyhl3157 {
		yyb3157 = yyj3157 > l
	} else {
		yyb3157 = r.CheckBreak()
	}
	if yyb3157 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3157++
	if yyhl3157 {
		yyb3157 = yyj3157 > l
	} else {
		yyb3157 = r.CheckBreak()
	}
	if yyb3157 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3157++
		if yyhl3157 {
			yyb3157 = yyj3157 > l
		} else {
			yyb3157 = r.CheckBreak()
		}
		if yyb3157 {
			break
		}
		if yyj3157 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3157-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3162 := z.EncBinary()
		_ = yym3162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3163 := !z.EncBinary()
			yy2arr3163 := z.EncBasicHandle().StructToArray
			var yyfirst3163 bool
			var yyq3163 [4]bool
			_, _, _, _ = yysep3163, yyfirst3163, yyq3163, yy2arr3163
			const yyr3163 bool = false
			yyq3163[0] = x.Kind != ""
			yyq3163[1] = x.APIVersion != ""
			yyq3163[2] = true
			yyq3163[3] = len(x.Conditions) != 0
			if yyr3163 || yy2arr3163 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3163 int = 0
				for _, b := range yyq3163 {
					if b {
						yynn3163++
					}
				}
				r.EncodeMapStart(yynn3163)
			}
			if yyr3163 || yy2arr3163 {
				if yyq3163[0] {
					yym3165 := z.EncBinary()
					_ = yym3165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3163[0] {
					yyfirst3163 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3163 {
						r.EncodeMapKVSeparator()
					}
					yym3166 := z.EncBinary()
					_ = yym3166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3163 || yy2arr3163 {
				if yysep3163 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3163[1] {
					yym3168 := z.EncBinary()
					_ = yym3168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3163[1] {
					if yyfirst3163 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3163 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3163 {
						r.EncodeMapKVSeparator()
					}
					yym3169 := z.EncBinary()
					_ = yym3169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3163 || yy2arr3163 {
				if yysep3163 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3163[2] {
					yy3171 := &x.ObjectMeta
					yy3171.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3163[2] {
					if yyfirst3163 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3163 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3163 {
						r.EncodeMapKVSeparator()
					}
					yy3172 := &x.ObjectMeta
					yy3172.CodecEncodeSelf(e)
				}
			}
			if yyr3163 || yy2arr3163 {
				if yysep3163 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3163[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3174 := z.EncBinary()
						_ = yym3174
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3163[3] {
					if yyfirst3163 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3163 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if yysep3163 {
						r.EncodeMapKVSeparator()
					}
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3175 := z.EncBinary()
						_ = yym3175
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3163 {
				if yyr3163 || yy2arr3163 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3176 := z.DecBinary()
	_ = yym3176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3177 := r.ReadMapStart()
			if yyl3177 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3177, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3177 := r.ReadArrayStart()
			if yyl3177 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3178Slc
	var yyhl3178 bool = l >= 0
	for yyj3178 := 0; ; yyj3178++ {
		if yyhl3178 {
			if yyj3178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3178 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3178Slc = r.DecodeBytes(yys3178Slc, true, true)
		yys3178 := string(yys3178Slc)
		if !yyhl3178 {
			r.ReadMapKVSeparator()
		}
		switch yys3178 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3181 := &x.ObjectMeta
				yyv3181.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3182 := &x.Conditions
				yym3183 := z.DecBinary()
				_ = yym3183
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3182), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3178)
		} // end switch yys3178
	} // end for yyj3178
	if !yyhl3178 {
		r.ReadMapEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3184 int
	var yyb3184 bool
	var yyhl3184 bool = l >= 0
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3187 := &x.ObjectMeta
		yyv3187.CodecDecodeSelf(d)
	}
	yyj3184++
	if yyhl3184 {
		yyb3184 = yyj3184 > l
	} else {
		yyb3184 = r.CheckBreak()
	}
	if yyb3184 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3188 := &x.Conditions
		yym3189 := z.DecBinary()
		_ = yym3189
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3188), d)
		}
	}
	for {
		yyj3184++
		if yyhl3184 {
			yyb3184 = yyj3184 > l
		} else {
			yyb3184 = r.CheckBreak()
		}
		if yyb3184 {
			break
		}
		if yyj3184 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3184-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3190 := z.EncBinary()
		_ = yym3190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3191 := !z.EncBinary()
			yy2arr3191 := z.EncBasicHandle().StructToArray
			var yyfirst3191 bool
			var yyq3191 [4]bool
			_, _, _, _ = yysep3191, yyfirst3191, yyq3191, yy2arr3191
			const yyr3191 bool = false
			yyq3191[0] = x.Kind != ""
			yyq3191[1] = x.APIVersion != ""
			yyq3191[2] = true
			if yyr3191 || yy2arr3191 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3191 int = 1
				for _, b := range yyq3191 {
					if b {
						yynn3191++
					}
				}
				r.EncodeMapStart(yynn3191)
			}
			if yyr3191 || yy2arr3191 {
				if yyq3191[0] {
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3191[0] {
					yyfirst3191 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3191 {
						r.EncodeMapKVSeparator()
					}
					yym3194 := z.EncBinary()
					_ = yym3194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3191 || yy2arr3191 {
				if yysep3191 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3191[1] {
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3191[1] {
					if yyfirst3191 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3191 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3191 {
						r.EncodeMapKVSeparator()
					}
					yym3197 := z.EncBinary()
					_ = yym3197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3191 || yy2arr3191 {
				if yysep3191 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3191[2] {
					yy3199 := &x.ListMeta
					yy3199.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3191[2] {
					if yyfirst3191 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3191 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3191 {
						r.EncodeMapKVSeparator()
					}
					yy3200 := &x.ListMeta
					yy3200.CodecEncodeSelf(e)
				}
			}
			if yyr3191 || yy2arr3191 {
				if yysep3191 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3202 := z.EncBinary()
					_ = yym3202
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				if yyfirst3191 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3191 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep3191 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3203 := z.EncBinary()
					_ = yym3203
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3191 {
				if yyr3191 || yy2arr3191 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3204 := z.DecBinary()
	_ = yym3204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3205 := r.ReadMapStart()
			if yyl3205 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3205, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3205 := r.ReadArrayStart()
			if yyl3205 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3206Slc
	var yyhl3206 bool = l >= 0
	for yyj3206 := 0; ; yyj3206++ {
		if yyhl3206 {
			if yyj3206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3206 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3206Slc = r.DecodeBytes(yys3206Slc, true, true)
		yys3206 := string(yys3206Slc)
		if !yyhl3206 {
			r.ReadMapKVSeparator()
		}
		switch yys3206 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv3209 := &x.ListMeta
				yyv3209.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3210 := &x.Items
				yym3211 := z.DecBinary()
				_ = yym3211
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3210), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3206)
		} // end switch yys3206
	} // end for yyj3206
	if !yyhl3206 {
		r.ReadMapEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3212 int
	var yyb3212 bool
	var yyhl3212 bool = l >= 0
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv3215 := &x.ListMeta
		yyv3215.CodecDecodeSelf(d)
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3216 := &x.Items
		yym3217 := z.DecBinary()
		_ = yym3217
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3216), d)
		}
	}
	for {
		yyj3212++
		if yyhl3212 {
			yyb3212 = yyj3212 > l
		} else {
			yyb3212 = r.CheckBreak()
		}
		if yyb3212 {
			break
		}
		if yyj3212 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3212-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3218 := z.EncBinary()
		_ = yym3218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3219 := !z.EncBinary()
			yy2arr3219 := z.EncBasicHandle().StructToArray
			var yyfirst3219 bool
			var yyq3219 [5]bool
			_, _, _, _ = yysep3219, yyfirst3219, yyq3219, yy2arr3219
			const yyr3219 bool = false
			yyq3219[0] = x.Capabilities != nil
			yyq3219[1] = x.Privileged != nil
			yyq3219[2] = x.SELinuxOptions != nil
			yyq3219[3] = x.RunAsUser != nil
			if yyr3219 || yy2arr3219 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3219 int = 1
				for _, b := range yyq3219 {
					if b {
						yynn3219++
					}
				}
				r.EncodeMapStart(yynn3219)
			}
			if yyr3219 || yy2arr3219 {
				if yyq3219[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3219[0] {
					yyfirst3219 = true
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if yysep3219 {
						r.EncodeMapKVSeparator()
					}
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3219 || yy2arr3219 {
				if yysep3219 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3219[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3222 := *x.Privileged
						yym3223 := z.EncBinary()
						_ = yym3223
						if false {
						} else {
							r.EncodeBool(bool(yy3222))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3219[1] {
					if yyfirst3219 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3219 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if yysep3219 {
						r.EncodeMapKVSeparator()
					}
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3224 := *x.Privileged
						yym3225 := z.EncBinary()
						_ = yym3225
						if false {
						} else {
							r.EncodeBool(bool(yy3224))
						}
					}
				}
			}
			if yyr3219 || yy2arr3219 {
				if yysep3219 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3219[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3219[2] {
					if yyfirst3219 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3219 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if yysep3219 {
						r.EncodeMapKVSeparator()
					}
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3219 || yy2arr3219 {
				if yysep3219 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3219[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3228 := *x.RunAsUser
						yym3229 := z.EncBinary()
						_ = yym3229
						if false {
						} else {
							r.EncodeInt(int64(yy3228))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3219[3] {
					if yyfirst3219 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3219 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if yysep3219 {
						r.EncodeMapKVSeparator()
					}
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3230 := *x.RunAsUser
						yym3231 := z.EncBinary()
						_ = yym3231
						if false {
						} else {
							r.EncodeInt(int64(yy3230))
						}
					}
				}
			}
			if yyr3219 || yy2arr3219 {
				if yysep3219 {
					r.EncodeArrayEntrySeparator()
				}
				yym3233 := z.EncBinary()
				_ = yym3233
				if false {
				} else {
					r.EncodeBool(bool(x.RunAsNonRoot))
				}
			} else {
				if yyfirst3219 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3219 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("RunAsNonRoot"))
				if yysep3219 {
					r.EncodeMapKVSeparator()
				}
				yym3234 := z.EncBinary()
				_ = yym3234
				if false {
				} else {
					r.EncodeBool(bool(x.RunAsNonRoot))
				}
			}
			if yysep3219 {
				if yyr3219 || yy2arr3219 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3235 := z.DecBinary()
	_ = yym3235
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3236 := r.ReadMapStart()
			if yyl3236 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3236, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3236 := r.ReadArrayStart()
			if yyl3236 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3236, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3237Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3237Slc
	var yyhl3237 bool = l >= 0
	for yyj3237 := 0; ; yyj3237++ {
		if yyhl3237 {
			if yyj3237 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3237 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3237Slc = r.DecodeBytes(yys3237Slc, true, true)
		yys3237 := string(yys3237Slc)
		if !yyhl3237 {
			r.ReadMapKVSeparator()
		}
		switch yys3237 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3240 := z.DecBinary()
				_ = yym3240
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3243 := z.DecBinary()
				_ = yym3243
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "RunAsNonRoot":
			if r.TryDecodeAsNil() {
				x.RunAsNonRoot = false
			} else {
				x.RunAsNonRoot = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3237)
		} // end switch yys3237
	} // end for yyj3237
	if !yyhl3237 {
		r.ReadMapEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3245 int
	var yyb3245 bool
	var yyhl3245 bool = l >= 0
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3248 := z.DecBinary()
		_ = yym3248
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3251 := z.DecBinary()
		_ = yym3251
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3245++
	if yyhl3245 {
		yyb3245 = yyj3245 > l
	} else {
		yyb3245 = r.CheckBreak()
	}
	if yyb3245 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.RunAsNonRoot = false
	} else {
		x.RunAsNonRoot = bool(r.DecodeBool())
	}
	for {
		yyj3245++
		if yyhl3245 {
			yyb3245 = yyj3245 > l
		} else {
			yyb3245 = r.CheckBreak()
		}
		if yyb3245 {
			break
		}
		if yyj3245 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3245-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3253 := z.EncBinary()
		_ = yym3253
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3254 := !z.EncBinary()
			yy2arr3254 := z.EncBasicHandle().StructToArray
			var yyfirst3254 bool
			var yyq3254 [4]bool
			_, _, _, _ = yysep3254, yyfirst3254, yyq3254, yy2arr3254
			const yyr3254 bool = false
			yyq3254[0] = x.User != ""
			yyq3254[1] = x.Role != ""
			yyq3254[2] = x.Type != ""
			yyq3254[3] = x.Level != ""
			if yyr3254 || yy2arr3254 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3254 int = 0
				for _, b := range yyq3254 {
					if b {
						yynn3254++
					}
				}
				r.EncodeMapStart(yynn3254)
			}
			if yyr3254 || yy2arr3254 {
				if yyq3254[0] {
					yym3256 := z.EncBinary()
					_ = yym3256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3254[0] {
					yyfirst3254 = true
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					if yysep3254 {
						r.EncodeMapKVSeparator()
					}
					yym3257 := z.EncBinary()
					_ = yym3257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3254 || yy2arr3254 {
				if yysep3254 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3254[1] {
					yym3259 := z.EncBinary()
					_ = yym3259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3254[1] {
					if yyfirst3254 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3254 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					if yysep3254 {
						r.EncodeMapKVSeparator()
					}
					yym3260 := z.EncBinary()
					_ = yym3260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3254 || yy2arr3254 {
				if yysep3254 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3254[2] {
					yym3262 := z.EncBinary()
					_ = yym3262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3254[2] {
					if yyfirst3254 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3254 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					if yysep3254 {
						r.EncodeMapKVSeparator()
					}
					yym3263 := z.EncBinary()
					_ = yym3263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3254 || yy2arr3254 {
				if yysep3254 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3254[3] {
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3254[3] {
					if yyfirst3254 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3254 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					if yysep3254 {
						r.EncodeMapKVSeparator()
					}
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3254 {
				if yyr3254 || yy2arr3254 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3267 := z.DecBinary()
	_ = yym3267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3268 := r.ReadMapStart()
			if yyl3268 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3268, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3268 := r.ReadArrayStart()
			if yyl3268 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3268, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3269Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3269Slc
	var yyhl3269 bool = l >= 0
	for yyj3269 := 0; ; yyj3269++ {
		if yyhl3269 {
			if yyj3269 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3269 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3269Slc = r.DecodeBytes(yys3269Slc, true, true)
		yys3269 := string(yys3269Slc)
		if !yyhl3269 {
			r.ReadMapKVSeparator()
		}
		switch yys3269 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3269)
		} // end switch yys3269
	} // end for yyj3269
	if !yyhl3269 {
		r.ReadMapEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3274 int
	var yyb3274 bool
	var yyhl3274 bool = l >= 0
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3274++
		if yyhl3274 {
			yyb3274 = yyj3274 > l
		} else {
			yyb3274 = r.CheckBreak()
		}
		if yyb3274 {
			break
		}
		if yyj3274 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3274-1, "")
	}
	r.ReadArrayEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3279 := z.EncBinary()
		_ = yym3279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3280 := !z.EncBinary()
			yy2arr3280 := z.EncBasicHandle().StructToArray
			var yyfirst3280 bool
			var yyq3280 [5]bool
			_, _, _, _ = yysep3280, yyfirst3280, yyq3280, yy2arr3280
			const yyr3280 bool = false
			yyq3280[0] = x.Kind != ""
			yyq3280[1] = x.APIVersion != ""
			yyq3280[2] = true
			if yyr3280 || yy2arr3280 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3280 int = 2
				for _, b := range yyq3280 {
					if b {
						yynn3280++
					}
				}
				r.EncodeMapStart(yynn3280)
			}
			if yyr3280 || yy2arr3280 {
				if yyq3280[0] {
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3280[0] {
					yyfirst3280 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3280 {
						r.EncodeMapKVSeparator()
					}
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				if yysep3280 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3280[1] {
					yym3285 := z.EncBinary()
					_ = yym3285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3280[1] {
					if yyfirst3280 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3280 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3280 {
						r.EncodeMapKVSeparator()
					}
					yym3286 := z.EncBinary()
					_ = yym3286
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3280 || yy2arr3280 {
				if yysep3280 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3280[2] {
					yy3288 := &x.ObjectMeta
					yy3288.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3280[2] {
					if yyfirst3280 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3280 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3280 {
						r.EncodeMapKVSeparator()
					}
					yy3289 := &x.ObjectMeta
					yy3289.CodecEncodeSelf(e)
				}
			}
			if yyr3280 || yy2arr3280 {
				if yysep3280 {
					r.EncodeArrayEntrySeparator()
				}
				yym3291 := z.EncBinary()
				_ = yym3291
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				if yyfirst3280 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3280 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				if yysep3280 {
					r.EncodeMapKVSeparator()
				}
				yym3292 := z.EncBinary()
				_ = yym3292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3280 || yy2arr3280 {
				if yysep3280 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3294 := z.EncBinary()
					_ = yym3294
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				if yyfirst3280 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3280 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if yysep3280 {
					r.EncodeMapKVSeparator()
				}
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3280 {
				if yyr3280 || yy2arr3280 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3296 := z.DecBinary()
	_ = yym3296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3297 := r.ReadMapStart()
			if yyl3297 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3297, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3297 := r.ReadArrayStart()
			if yyl3297 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3298Slc
	var yyhl3298 bool = l >= 0
	for yyj3298 := 0; ; yyj3298++ {
		if yyhl3298 {
			if yyj3298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3298 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3298Slc = r.DecodeBytes(yys3298Slc, true, true)
		yys3298 := string(yys3298Slc)
		if !yyhl3298 {
			r.ReadMapKVSeparator()
		}
		switch yys3298 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3301 := &x.ObjectMeta
				yyv3301.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3303 := &x.Data
				yym3304 := z.DecBinary()
				_ = yym3304
				if false {
				} else {
					*yyv3303 = r.DecodeBytes(*(*[]byte)(yyv3303), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3298)
		} // end switch yys3298
	} // end for yyj3298
	if !yyhl3298 {
		r.ReadMapEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3305 int
	var yyb3305 bool
	var yyhl3305 bool = l >= 0
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3308 := &x.ObjectMeta
		yyv3308.CodecDecodeSelf(d)
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3305++
	if yyhl3305 {
		yyb3305 = yyj3305 > l
	} else {
		yyb3305 = r.CheckBreak()
	}
	if yyb3305 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3310 := &x.Data
		yym3311 := z.DecBinary()
		_ = yym3311
		if false {
		} else {
			*yyv3310 = r.DecodeBytes(*(*[]byte)(yyv3310), false, false)
		}
	}
	for {
		yyj3305++
		if yyhl3305 {
			yyb3305 = yyj3305 > l
		} else {
			yyb3305 = r.CheckBreak()
		}
		if yyb3305 {
			break
		}
		if yyj3305 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3305-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3312 := z.EncBinary()
		_ = yym3312
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3313 := !z.EncBinary()
			yy2arr3313 := z.EncBasicHandle().StructToArray
			var yyfirst3313 bool
			var yyq3313 [5]bool
			_, _, _, _ = yysep3313, yyfirst3313, yyq3313, yy2arr3313
			const yyr3313 bool = false
			yyq3313[0] = x.Kind != ""
			yyq3313[1] = x.APIVersion != ""
			yyq3313[2] = true
			yyq3313[3] = x.Description != ""
			yyq3313[4] = len(x.Versions) != 0
			if yyr3313 || yy2arr3313 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3313 int = 0
				for _, b := range yyq3313 {
					if b {
						yynn3313++
					}
				}
				r.EncodeMapStart(yynn3313)
			}
			if yyr3313 || yy2arr3313 {
				if yyq3313[0] {
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3313[0] {
					yyfirst3313 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3313 {
						r.EncodeMapKVSeparator()
					}
					yym3316 := z.EncBinary()
					_ = yym3316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				if yysep3313 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3313[1] {
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3313[1] {
					if yyfirst3313 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3313 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3313 {
						r.EncodeMapKVSeparator()
					}
					yym3319 := z.EncBinary()
					_ = yym3319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				if yysep3313 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3313[2] {
					yy3321 := &x.ObjectMeta
					yy3321.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3313[2] {
					if yyfirst3313 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3313 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3313 {
						r.EncodeMapKVSeparator()
					}
					yy3322 := &x.ObjectMeta
					yy3322.CodecEncodeSelf(e)
				}
			}
			if yyr3313 || yy2arr3313 {
				if yysep3313 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3313[3] {
					yym3324 := z.EncBinary()
					_ = yym3324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3313[3] {
					if yyfirst3313 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3313 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					if yysep3313 {
						r.EncodeMapKVSeparator()
					}
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr3313 || yy2arr3313 {
				if yysep3313 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3313[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym3327 := z.EncBinary()
						_ = yym3327
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3313[4] {
					if yyfirst3313 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3313 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					if yysep3313 {
						r.EncodeMapKVSeparator()
					}
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym3328 := z.EncBinary()
						_ = yym3328
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yysep3313 {
				if yyr3313 || yy2arr3313 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3329 := z.DecBinary()
	_ = yym3329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3330 := r.ReadMapStart()
			if yyl3330 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3330, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3330 := r.ReadArrayStart()
			if yyl3330 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3331Slc
	var yyhl3331 bool = l >= 0
	for yyj3331 := 0; ; yyj3331++ {
		if yyhl3331 {
			if yyj3331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3331 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3331Slc = r.DecodeBytes(yys3331Slc, true, true)
		yys3331 := string(yys3331Slc)
		if !yyhl3331 {
			r.ReadMapKVSeparator()
		}
		switch yys3331 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3334 := &x.ObjectMeta
				yyv3334.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv3336 := &x.Versions
				yym3337 := z.DecBinary()
				_ = yym3337
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv3336), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3331)
		} // end switch yys3331
	} // end for yyj3331
	if !yyhl3331 {
		r.ReadMapEnd()
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3338 int
	var yyb3338 bool
	var yyhl3338 bool = l >= 0
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3341 := &x.ObjectMeta
		yyv3341.CodecDecodeSelf(d)
	}
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj3338++
	if yyhl3338 {
		yyb3338 = yyj3338 > l
	} else {
		yyb3338 = r.CheckBreak()
	}
	if yyb3338 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv3343 := &x.Versions
		yym3344 := z.DecBinary()
		_ = yym3344
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv3343), d)
		}
	}
	for {
		yyj3338++
		if yyhl3338 {
			yyb3338 = yyj3338 > l
		} else {
			yyb3338 = r.CheckBreak()
		}
		if yyb3338 {
			break
		}
		if yyj3338 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3338-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3345 := z.EncBinary()
		_ = yym3345
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3346 := !z.EncBinary()
			yy2arr3346 := z.EncBasicHandle().StructToArray
			var yyfirst3346 bool
			var yyq3346 [4]bool
			_, _, _, _ = yysep3346, yyfirst3346, yyq3346, yy2arr3346
			const yyr3346 bool = false
			yyq3346[0] = x.Kind != ""
			yyq3346[1] = x.APIVersion != ""
			yyq3346[2] = true
			if yyr3346 || yy2arr3346 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3346 int = 1
				for _, b := range yyq3346 {
					if b {
						yynn3346++
					}
				}
				r.EncodeMapStart(yynn3346)
			}
			if yyr3346 || yy2arr3346 {
				if yyq3346[0] {
					yym3348 := z.EncBinary()
					_ = yym3348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3346[0] {
					yyfirst3346 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3346 {
						r.EncodeMapKVSeparator()
					}
					yym3349 := z.EncBinary()
					_ = yym3349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3346 || yy2arr3346 {
				if yysep3346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3346[1] {
					yym3351 := z.EncBinary()
					_ = yym3351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3346[1] {
					if yyfirst3346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3346 {
						r.EncodeMapKVSeparator()
					}
					yym3352 := z.EncBinary()
					_ = yym3352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3346 || yy2arr3346 {
				if yysep3346 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3346[2] {
					yy3354 := &x.ListMeta
					yy3354.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3346[2] {
					if yyfirst3346 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3346 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3346 {
						r.EncodeMapKVSeparator()
					}
					yy3355 := &x.ListMeta
					yy3355.CodecEncodeSelf(e)
				}
			}
			if yyr3346 || yy2arr3346 {
				if yysep3346 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3357 := z.EncBinary()
					_ = yym3357
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				if yyfirst3346 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst3346 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if yysep3346 {
					r.EncodeMapKVSeparator()
				}
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3358 := z.EncBinary()
					_ = yym3358
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yysep3346 {
				if yyr3346 || yy2arr3346 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3359 := z.DecBinary()
	_ = yym3359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3360 := r.ReadMapStart()
			if yyl3360 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3360, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3360 := r.ReadArrayStart()
			if yyl3360 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3360, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3361Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3361Slc
	var yyhl3361 bool = l >= 0
	for yyj3361 := 0; ; yyj3361++ {
		if yyhl3361 {
			if yyj3361 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3361 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3361Slc = r.DecodeBytes(yys3361Slc, true, true)
		yys3361 := string(yys3361Slc)
		if !yyhl3361 {
			r.ReadMapKVSeparator()
		}
		switch yys3361 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = ListMeta{}
			} else {
				yyv3364 := &x.ListMeta
				yyv3364.CodecDecodeSelf(d)
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3365 := &x.Items
				yym3366 := z.DecBinary()
				_ = yym3366
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv3365), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3361)
		} // end switch yys3361
	} // end for yyj3361
	if !yyhl3361 {
		r.ReadMapEnd()
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3367 int
	var yyb3367 bool
	var yyhl3367 bool = l >= 0
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ListMeta = ListMeta{}
	} else {
		yyv3370 := &x.ListMeta
		yyv3370.CodecDecodeSelf(d)
	}
	yyj3367++
	if yyhl3367 {
		yyb3367 = yyj3367 > l
	} else {
		yyb3367 = r.CheckBreak()
	}
	if yyb3367 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3371 := &x.Items
		yym3372 := z.DecBinary()
		_ = yym3372
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv3371), d)
		}
	}
	for {
		yyj3367++
		if yyhl3367 {
			yyb3367 = yyj3367 > l
		} else {
			yyb3367 = r.CheckBreak()
		}
		if yyb3367 {
			break
		}
		if yyj3367 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3367-1, "")
	}
	r.ReadArrayEnd()
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3373 := z.EncBinary()
		_ = yym3373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3374 := !z.EncBinary()
			yy2arr3374 := z.EncBasicHandle().StructToArray
			var yyfirst3374 bool
			var yyq3374 [2]bool
			_, _, _, _ = yysep3374, yyfirst3374, yyq3374, yy2arr3374
			const yyr3374 bool = false
			yyq3374[0] = x.Name != ""
			yyq3374[1] = x.APIGroup != ""
			if yyr3374 || yy2arr3374 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3374 int = 0
				for _, b := range yyq3374 {
					if b {
						yynn3374++
					}
				}
				r.EncodeMapStart(yynn3374)
			}
			if yyr3374 || yy2arr3374 {
				if yyq3374[0] {
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3374[0] {
					yyfirst3374 = true
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep3374 {
						r.EncodeMapKVSeparator()
					}
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3374 || yy2arr3374 {
				if yysep3374 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3374[1] {
					yym3379 := z.EncBinary()
					_ = yym3379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3374[1] {
					if yyfirst3374 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3374 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					if yysep3374 {
						r.EncodeMapKVSeparator()
					}
					yym3380 := z.EncBinary()
					_ = yym3380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yysep3374 {
				if yyr3374 || yy2arr3374 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3381 := z.DecBinary()
	_ = yym3381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3382 := r.ReadMapStart()
			if yyl3382 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3382, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3382 := r.ReadArrayStart()
			if yyl3382 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3383Slc
	var yyhl3383 bool = l >= 0
	for yyj3383 := 0; ; yyj3383++ {
		if yyhl3383 {
			if yyj3383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3383 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3383Slc = r.DecodeBytes(yys3383Slc, true, true)
		yys3383 := string(yys3383Slc)
		if !yyhl3383 {
			r.ReadMapKVSeparator()
		}
		switch yys3383 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3383)
		} // end switch yys3383
	} // end for yyj3383
	if !yyhl3383 {
		r.ReadMapEnd()
	}
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3386 int
	var yyb3386 bool
	var yyhl3386 bool = l >= 0
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3386++
	if yyhl3386 {
		yyb3386 = yyj3386 > l
	} else {
		yyb3386 = r.CheckBreak()
	}
	if yyb3386 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj3386++
		if yyhl3386 {
			yyb3386 = yyj3386 > l
		} else {
			yyb3386 = r.CheckBreak()
		}
		if yyb3386 {
			break
		}
		if yyj3386 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3386-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3389 := z.EncBinary()
		_ = yym3389
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3390 := !z.EncBinary()
			yy2arr3390 := z.EncBasicHandle().StructToArray
			var yyfirst3390 bool
			var yyq3390 [4]bool
			_, _, _, _ = yysep3390, yyfirst3390, yyq3390, yy2arr3390
			const yyr3390 bool = false
			yyq3390[0] = x.Kind != ""
			yyq3390[1] = x.APIVersion != ""
			yyq3390[2] = true
			yyq3390[3] = len(x.Data) != 0
			if yyr3390 || yy2arr3390 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3390 int = 0
				for _, b := range yyq3390 {
					if b {
						yynn3390++
					}
				}
				r.EncodeMapStart(yynn3390)
			}
			if yyr3390 || yy2arr3390 {
				if yyq3390[0] {
					yym3392 := z.EncBinary()
					_ = yym3392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3390[0] {
					yyfirst3390 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep3390 {
						r.EncodeMapKVSeparator()
					}
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				if yysep3390 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3390[1] {
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3390[1] {
					if yyfirst3390 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3390 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep3390 {
						r.EncodeMapKVSeparator()
					}
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3390 || yy2arr3390 {
				if yysep3390 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3390[2] {
					yy3398 := &x.ObjectMeta
					yy3398.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3390[2] {
					if yyfirst3390 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3390 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					if yysep3390 {
						r.EncodeMapKVSeparator()
					}
					yy3399 := &x.ObjectMeta
					yy3399.CodecEncodeSelf(e)
				}
			}
			if yyr3390 || yy2arr3390 {
				if yysep3390 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq3390[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3401 := z.EncBinary()
						_ = yym3401
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3390[3] {
					if yyfirst3390 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst3390 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if yysep3390 {
						r.EncodeMapKVSeparator()
					}
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3402 := z.EncBinary()
						_ = yym3402
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yysep3390 {
				if yyr3390 || yy2arr3390 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3403 := z.DecBinary()
	_ = yym3403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl3404 := r.ReadMapStart()
			if yyl3404 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3404, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl3404 := r.ReadArrayStart()
			if yyl3404 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3404, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3405Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3405Slc
	var yyhl3405 bool = l >= 0
	for yyj3405 := 0; ; yyj3405++ {
		if yyhl3405 {
			if yyj3405 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj3405 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys3405Slc = r.DecodeBytes(yys3405Slc, true, true)
		yys3405 := string(yys3405Slc)
		if !yyhl3405 {
			r.ReadMapKVSeparator()
		}
		switch yys3405 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3408 := &x.ObjectMeta
				yyv3408.CodecDecodeSelf(d)
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3409 := &x.Data
				yym3410 := z.DecBinary()
				_ = yym3410
				if false {
				} else {
					*yyv3409 = r.DecodeBytes(*(*[]byte)(yyv3409), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3405)
		} // end switch yys3405
	} // end for yyj3405
	if !yyhl3405 {
		r.ReadMapEnd()
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3411 int
	var yyb3411 bool
	var yyhl3411 bool = l >= 0
	yyj3411++
	if yyhl3411 {
		yyb3411 = yyj3411 > l
	} else {
		yyb3411 = r.CheckBreak()
	}
	if yyb3411 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3411++
	if yyhl3411 {
		yyb3411 = yyj3411 > l
	} else {
		yyb3411 = r.CheckBreak()
	}
	if yyb3411 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3411++
	if yyhl3411 {
		yyb3411 = yyj3411 > l
	} else {
		yyb3411 = r.CheckBreak()
	}
	if yyb3411 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3414 := &x.ObjectMeta
		yyv3414.CodecDecodeSelf(d)
	}
	yyj3411++
	if yyhl3411 {
		yyb3411 = yyj3411 > l
	} else {
		yyb3411 = r.CheckBreak()
	}
	if yyb3411 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3415 := &x.Data
		yym3416 := z.DecBinary()
		_ = yym3416
		if false {
		} else {
			*yyv3415 = r.DecodeBytes(*(*[]byte)(yyv3415), false, false)
		}
	}
	for {
		yyj3411++
		if yyhl3411 {
			yyb3411 = yyj3411 > l
		} else {
			yyb3411 = r.CheckBreak()
		}
		if yyb3411 {
			break
		}
		if yyj3411 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj3411-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3417 := !z.EncBinary()
	if yys3417 {
		for yyi3417, yyv3417 := range v {
			if yyi3417 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3418 := &yyv3417
			yy3418.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3417 := range v {
			yy3419 := &yyv3417
			yy3419.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3420 := *v
	yyh3420, yyl3420 := z.DecSliceHelperStart()

	var yyc3420 bool
	_ = yyc3420

	if yyv3420 == nil {
		if yyl3420 <= 0 {
			yyv3420 = make([]ThirdPartyResource, 0)
		} else {
			yyv3420 = make([]ThirdPartyResource, yyl3420)
		}
		yyc3420 = true
	}

	if yyl3420 == 0 {
		if len(yyv3420) != 0 {
			yyv3420 = yyv3420[:0]
			yyc3420 = true
		}
	} else if yyl3420 > 0 {

		yyn3420 := yyl3420
		if yyl3420 > cap(yyv3420) {
			yyv3420 = make([]ThirdPartyResource, yyl3420, yyl3420)
			yyc3420 = true

		} else if yyl3420 != len(yyv3420) {
			yyv3420 = yyv3420[:yyl3420]
			yyc3420 = true
		}
		yyj3420 := 0
		for ; yyj3420 < yyn3420; yyj3420++ {
			if r.TryDecodeAsNil() {
				yyv3420[yyj3420] = ThirdPartyResource{}
			} else {
				yyv3421 := &yyv3420[yyj3420]
				yyv3421.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3420 := 0; !r.CheckBreak(); yyj3420++ {
			if yyj3420 >= len(yyv3420) {
				yyv3420 = append(yyv3420, ThirdPartyResource{}) // var yyz3420 ThirdPartyResource
				yyc3420 = true
			}
			if yyj3420 > 0 {
				yyh3420.Sep(yyj3420)
			}

			if yyj3420 < len(yyv3420) {
				if r.TryDecodeAsNil() {
					yyv3420[yyj3420] = ThirdPartyResource{}
				} else {
					yyv3422 := &yyv3420[yyj3420]
					yyv3422.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3420.End()
	}
	if yyc3420 {
		*v = yyv3420
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3423 := !z.EncBinary()
	if yys3423 {
		for yyi3423, yyv3423 := range v {
			if yyi3423 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3424 := &yyv3423
			yy3424.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3423 := range v {
			yy3425 := &yyv3423
			yy3425.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3426 := *v
	yyh3426, yyl3426 := z.DecSliceHelperStart()

	var yyc3426 bool
	_ = yyc3426

	if yyv3426 == nil {
		if yyl3426 <= 0 {
			yyv3426 = make([]PersistentVolume, 0)
		} else {
			yyv3426 = make([]PersistentVolume, yyl3426)
		}
		yyc3426 = true
	}

	if yyl3426 == 0 {
		if len(yyv3426) != 0 {
			yyv3426 = yyv3426[:0]
			yyc3426 = true
		}
	} else if yyl3426 > 0 {

		yyn3426 := yyl3426
		if yyl3426 > cap(yyv3426) {
			yyv3426 = make([]PersistentVolume, yyl3426, yyl3426)
			yyc3426 = true

		} else if yyl3426 != len(yyv3426) {
			yyv3426 = yyv3426[:yyl3426]
			yyc3426 = true
		}
		yyj3426 := 0
		for ; yyj3426 < yyn3426; yyj3426++ {
			if r.TryDecodeAsNil() {
				yyv3426[yyj3426] = PersistentVolume{}
			} else {
				yyv3427 := &yyv3426[yyj3426]
				yyv3427.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3426 := 0; !r.CheckBreak(); yyj3426++ {
			if yyj3426 >= len(yyv3426) {
				yyv3426 = append(yyv3426, PersistentVolume{}) // var yyz3426 PersistentVolume
				yyc3426 = true
			}
			if yyj3426 > 0 {
				yyh3426.Sep(yyj3426)
			}

			if yyj3426 < len(yyv3426) {
				if r.TryDecodeAsNil() {
					yyv3426[yyj3426] = PersistentVolume{}
				} else {
					yyv3428 := &yyv3426[yyj3426]
					yyv3428.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3426.End()
	}
	if yyc3426 {
		*v = yyv3426
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3429 := !z.EncBinary()
	if yys3429 {
		for yyi3429, yyv3429 := range v {
			if yyi3429 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3430 := &yyv3429
			yy3430.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3429 := range v {
			yy3431 := &yyv3429
			yy3431.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3432 := *v
	yyh3432, yyl3432 := z.DecSliceHelperStart()

	var yyc3432 bool
	_ = yyc3432

	if yyv3432 == nil {
		if yyl3432 <= 0 {
			yyv3432 = make([]EnvVar, 0)
		} else {
			yyv3432 = make([]EnvVar, yyl3432)
		}
		yyc3432 = true
	}

	if yyl3432 == 0 {
		if len(yyv3432) != 0 {
			yyv3432 = yyv3432[:0]
			yyc3432 = true
		}
	} else if yyl3432 > 0 {

		yyn3432 := yyl3432
		if yyl3432 > cap(yyv3432) {
			yyv3432 = make([]EnvVar, yyl3432, yyl3432)
			yyc3432 = true

		} else if yyl3432 != len(yyv3432) {
			yyv3432 = yyv3432[:yyl3432]
			yyc3432 = true
		}
		yyj3432 := 0
		for ; yyj3432 < yyn3432; yyj3432++ {
			if r.TryDecodeAsNil() {
				yyv3432[yyj3432] = EnvVar{}
			} else {
				yyv3433 := &yyv3432[yyj3432]
				yyv3433.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3432 := 0; !r.CheckBreak(); yyj3432++ {
			if yyj3432 >= len(yyv3432) {
				yyv3432 = append(yyv3432, EnvVar{}) // var yyz3432 EnvVar
				yyc3432 = true
			}
			if yyj3432 > 0 {
				yyh3432.Sep(yyj3432)
			}

			if yyj3432 < len(yyv3432) {
				if r.TryDecodeAsNil() {
					yyv3432[yyj3432] = EnvVar{}
				} else {
					yyv3434 := &yyv3432[yyj3432]
					yyv3434.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3432.End()
	}
	if yyc3432 {
		*v = yyv3432
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3435 := !z.EncBinary()
	if yys3435 {
		for yyi3435, yyv3435 := range v {
			if yyi3435 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3436 := &yyv3435
			yy3436.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3435 := range v {
			yy3437 := &yyv3435
			yy3437.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3438 := *v
	yyh3438, yyl3438 := z.DecSliceHelperStart()

	var yyc3438 bool
	_ = yyc3438

	if yyv3438 == nil {
		if yyl3438 <= 0 {
			yyv3438 = make([]Container, 0)
		} else {
			yyv3438 = make([]Container, yyl3438)
		}
		yyc3438 = true
	}

	if yyl3438 == 0 {
		if len(yyv3438) != 0 {
			yyv3438 = yyv3438[:0]
			yyc3438 = true
		}
	} else if yyl3438 > 0 {

		yyn3438 := yyl3438
		if yyl3438 > cap(yyv3438) {
			yyv3438 = make([]Container, yyl3438, yyl3438)
			yyc3438 = true

		} else if yyl3438 != len(yyv3438) {
			yyv3438 = yyv3438[:yyl3438]
			yyc3438 = true
		}
		yyj3438 := 0
		for ; yyj3438 < yyn3438; yyj3438++ {
			if r.TryDecodeAsNil() {
				yyv3438[yyj3438] = Container{}
			} else {
				yyv3439 := &yyv3438[yyj3438]
				yyv3439.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3438 := 0; !r.CheckBreak(); yyj3438++ {
			if yyj3438 >= len(yyv3438) {
				yyv3438 = append(yyv3438, Container{}) // var yyz3438 Container
				yyc3438 = true
			}
			if yyj3438 > 0 {
				yyh3438.Sep(yyj3438)
			}

			if yyj3438 < len(yyv3438) {
				if r.TryDecodeAsNil() {
					yyv3438[yyj3438] = Container{}
				} else {
					yyv3440 := &yyv3438[yyj3438]
					yyv3440.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3438.End()
	}
	if yyc3438 {
		*v = yyv3438
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3441 := !z.EncBinary()
	if yys3441 {
		for yyi3441, yyv3441 := range v {
			if yyi3441 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3442 := &yyv3441
			yy3442.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3441 := range v {
			yy3443 := &yyv3441
			yy3443.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3444 := *v
	yyh3444, yyl3444 := z.DecSliceHelperStart()

	var yyc3444 bool
	_ = yyc3444

	if yyv3444 == nil {
		if yyl3444 <= 0 {
			yyv3444 = make([]ServiceAccount, 0)
		} else {
			yyv3444 = make([]ServiceAccount, yyl3444)
		}
		yyc3444 = true
	}

	if yyl3444 == 0 {
		if len(yyv3444) != 0 {
			yyv3444 = yyv3444[:0]
			yyc3444 = true
		}
	} else if yyl3444 > 0 {

		yyn3444 := yyl3444
		if yyl3444 > cap(yyv3444) {
			yyv3444 = make([]ServiceAccount, yyl3444, yyl3444)
			yyc3444 = true

		} else if yyl3444 != len(yyv3444) {
			yyv3444 = yyv3444[:yyl3444]
			yyc3444 = true
		}
		yyj3444 := 0
		for ; yyj3444 < yyn3444; yyj3444++ {
			if r.TryDecodeAsNil() {
				yyv3444[yyj3444] = ServiceAccount{}
			} else {
				yyv3445 := &yyv3444[yyj3444]
				yyv3445.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3444 := 0; !r.CheckBreak(); yyj3444++ {
			if yyj3444 >= len(yyv3444) {
				yyv3444 = append(yyv3444, ServiceAccount{}) // var yyz3444 ServiceAccount
				yyc3444 = true
			}
			if yyj3444 > 0 {
				yyh3444.Sep(yyj3444)
			}

			if yyj3444 < len(yyv3444) {
				if r.TryDecodeAsNil() {
					yyv3444[yyj3444] = ServiceAccount{}
				} else {
					yyv3446 := &yyv3444[yyj3444]
					yyv3446.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3444.End()
	}
	if yyc3444 {
		*v = yyv3444
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3447 := !z.EncBinary()
	if yys3447 {
		for yyi3447, yyv3447 := range v {
			if yyi3447 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3448 := &yyv3447
			yy3448.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3447 := range v {
			yy3449 := &yyv3447
			yy3449.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3450 := *v
	yyh3450, yyl3450 := z.DecSliceHelperStart()

	var yyc3450 bool
	_ = yyc3450

	if yyv3450 == nil {
		if yyl3450 <= 0 {
			yyv3450 = make([]Namespace, 0)
		} else {
			yyv3450 = make([]Namespace, yyl3450)
		}
		yyc3450 = true
	}

	if yyl3450 == 0 {
		if len(yyv3450) != 0 {
			yyv3450 = yyv3450[:0]
			yyc3450 = true
		}
	} else if yyl3450 > 0 {

		yyn3450 := yyl3450
		if yyl3450 > cap(yyv3450) {
			yyv3450 = make([]Namespace, yyl3450, yyl3450)
			yyc3450 = true

		} else if yyl3450 != len(yyv3450) {
			yyv3450 = yyv3450[:yyl3450]
			yyc3450 = true
		}
		yyj3450 := 0
		for ; yyj3450 < yyn3450; yyj3450++ {
			if r.TryDecodeAsNil() {
				yyv3450[yyj3450] = Namespace{}
			} else {
				yyv3451 := &yyv3450[yyj3450]
				yyv3451.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3450 := 0; !r.CheckBreak(); yyj3450++ {
			if yyj3450 >= len(yyv3450) {
				yyv3450 = append(yyv3450, Namespace{}) // var yyz3450 Namespace
				yyc3450 = true
			}
			if yyj3450 > 0 {
				yyh3450.Sep(yyj3450)
			}

			if yyj3450 < len(yyv3450) {
				if r.TryDecodeAsNil() {
					yyv3450[yyj3450] = Namespace{}
				} else {
					yyv3452 := &yyv3450[yyj3450]
					yyv3452.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3450.End()
	}
	if yyc3450 {
		*v = yyv3450
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3453 := !z.EncBinary()
	if yys3453 {
		for yyi3453, yyv3453 := range v {
			if yyi3453 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3454 := &yyv3453
			yy3454.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3453 := range v {
			yy3455 := &yyv3453
			yy3455.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3456 := *v
	yyh3456, yyl3456 := z.DecSliceHelperStart()

	var yyc3456 bool
	_ = yyc3456

	if yyv3456 == nil {
		if yyl3456 <= 0 {
			yyv3456 = make([]LimitRange, 0)
		} else {
			yyv3456 = make([]LimitRange, yyl3456)
		}
		yyc3456 = true
	}

	if yyl3456 == 0 {
		if len(yyv3456) != 0 {
			yyv3456 = yyv3456[:0]
			yyc3456 = true
		}
	} else if yyl3456 > 0 {

		yyn3456 := yyl3456
		if yyl3456 > cap(yyv3456) {
			yyv3456 = make([]LimitRange, yyl3456, yyl3456)
			yyc3456 = true

		} else if yyl3456 != len(yyv3456) {
			yyv3456 = yyv3456[:yyl3456]
			yyc3456 = true
		}
		yyj3456 := 0
		for ; yyj3456 < yyn3456; yyj3456++ {
			if r.TryDecodeAsNil() {
				yyv3456[yyj3456] = LimitRange{}
			} else {
				yyv3457 := &yyv3456[yyj3456]
				yyv3457.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3456 := 0; !r.CheckBreak(); yyj3456++ {
			if yyj3456 >= len(yyv3456) {
				yyv3456 = append(yyv3456, LimitRange{}) // var yyz3456 LimitRange
				yyc3456 = true
			}
			if yyj3456 > 0 {
				yyh3456.Sep(yyj3456)
			}

			if yyj3456 < len(yyv3456) {
				if r.TryDecodeAsNil() {
					yyv3456[yyj3456] = LimitRange{}
				} else {
					yyv3458 := &yyv3456[yyj3456]
					yyv3458.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3456.End()
	}
	if yyc3456 {
		*v = yyv3456
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3459 := !z.EncBinary()
	if yys3459 {
		for yyi3459, yyv3459 := range v {
			if yyi3459 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3460 := &yyv3459
			yy3460.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3459 := range v {
			yy3461 := &yyv3459
			yy3461.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3462 := *v
	yyh3462, yyl3462 := z.DecSliceHelperStart()

	var yyc3462 bool
	_ = yyc3462

	if yyv3462 == nil {
		if yyl3462 <= 0 {
			yyv3462 = make([]LimitRangeItem, 0)
		} else {
			yyv3462 = make([]LimitRangeItem, yyl3462)
		}
		yyc3462 = true
	}

	if yyl3462 == 0 {
		if len(yyv3462) != 0 {
			yyv3462 = yyv3462[:0]
			yyc3462 = true
		}
	} else if yyl3462 > 0 {

		yyn3462 := yyl3462
		if yyl3462 > cap(yyv3462) {
			yyv3462 = make([]LimitRangeItem, yyl3462, yyl3462)
			yyc3462 = true

		} else if yyl3462 != len(yyv3462) {
			yyv3462 = yyv3462[:yyl3462]
			yyc3462 = true
		}
		yyj3462 := 0
		for ; yyj3462 < yyn3462; yyj3462++ {
			if r.TryDecodeAsNil() {
				yyv3462[yyj3462] = LimitRangeItem{}
			} else {
				yyv3463 := &yyv3462[yyj3462]
				yyv3463.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3462 := 0; !r.CheckBreak(); yyj3462++ {
			if yyj3462 >= len(yyv3462) {
				yyv3462 = append(yyv3462, LimitRangeItem{}) // var yyz3462 LimitRangeItem
				yyc3462 = true
			}
			if yyj3462 > 0 {
				yyh3462.Sep(yyj3462)
			}

			if yyj3462 < len(yyv3462) {
				if r.TryDecodeAsNil() {
					yyv3462[yyj3462] = LimitRangeItem{}
				} else {
					yyv3464 := &yyv3462[yyj3462]
					yyv3464.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3462.End()
	}
	if yyc3462 {
		*v = yyv3462
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3465 := !z.EncBinary()
	if yys3465 {
		for yyi3465, yyv3465 := range v {
			if yyi3465 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3466 := &yyv3465
			yy3466.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3465 := range v {
			yy3467 := &yyv3465
			yy3467.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3468 := *v
	yyh3468, yyl3468 := z.DecSliceHelperStart()

	var yyc3468 bool
	_ = yyc3468

	if yyv3468 == nil {
		if yyl3468 <= 0 {
			yyv3468 = make([]ContainerStatus, 0)
		} else {
			yyv3468 = make([]ContainerStatus, yyl3468)
		}
		yyc3468 = true
	}

	if yyl3468 == 0 {
		if len(yyv3468) != 0 {
			yyv3468 = yyv3468[:0]
			yyc3468 = true
		}
	} else if yyl3468 > 0 {

		yyn3468 := yyl3468
		if yyl3468 > cap(yyv3468) {
			yyv3468 = make([]ContainerStatus, yyl3468, yyl3468)
			yyc3468 = true

		} else if yyl3468 != len(yyv3468) {
			yyv3468 = yyv3468[:yyl3468]
			yyc3468 = true
		}
		yyj3468 := 0
		for ; yyj3468 < yyn3468; yyj3468++ {
			if r.TryDecodeAsNil() {
				yyv3468[yyj3468] = ContainerStatus{}
			} else {
				yyv3469 := &yyv3468[yyj3468]
				yyv3469.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3468 := 0; !r.CheckBreak(); yyj3468++ {
			if yyj3468 >= len(yyv3468) {
				yyv3468 = append(yyv3468, ContainerStatus{}) // var yyz3468 ContainerStatus
				yyc3468 = true
			}
			if yyj3468 > 0 {
				yyh3468.Sep(yyj3468)
			}

			if yyj3468 < len(yyv3468) {
				if r.TryDecodeAsNil() {
					yyv3468[yyj3468] = ContainerStatus{}
				} else {
					yyv3470 := &yyv3468[yyj3468]
					yyv3470.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3468.End()
	}
	if yyc3468 {
		*v = yyv3468
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3471 := !z.EncBinary()
	if yys3471 {
		for yyi3471, yyv3471 := range v {
			if yyi3471 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3472 := &yyv3471
			yy3472.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3471 := range v {
			yy3473 := &yyv3471
			yy3473.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3474 := *v
	yyh3474, yyl3474 := z.DecSliceHelperStart()

	var yyc3474 bool
	_ = yyc3474

	if yyv3474 == nil {
		if yyl3474 <= 0 {
			yyv3474 = make([]PodTemplate, 0)
		} else {
			yyv3474 = make([]PodTemplate, yyl3474)
		}
		yyc3474 = true
	}

	if yyl3474 == 0 {
		if len(yyv3474) != 0 {
			yyv3474 = yyv3474[:0]
			yyc3474 = true
		}
	} else if yyl3474 > 0 {

		yyn3474 := yyl3474
		if yyl3474 > cap(yyv3474) {
			yyv3474 = make([]PodTemplate, yyl3474, yyl3474)
			yyc3474 = true

		} else if yyl3474 != len(yyv3474) {
			yyv3474 = yyv3474[:yyl3474]
			yyc3474 = true
		}
		yyj3474 := 0
		for ; yyj3474 < yyn3474; yyj3474++ {
			if r.TryDecodeAsNil() {
				yyv3474[yyj3474] = PodTemplate{}
			} else {
				yyv3475 := &yyv3474[yyj3474]
				yyv3475.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3474 := 0; !r.CheckBreak(); yyj3474++ {
			if yyj3474 >= len(yyv3474) {
				yyv3474 = append(yyv3474, PodTemplate{}) // var yyz3474 PodTemplate
				yyc3474 = true
			}
			if yyj3474 > 0 {
				yyh3474.Sep(yyj3474)
			}

			if yyj3474 < len(yyv3474) {
				if r.TryDecodeAsNil() {
					yyv3474[yyj3474] = PodTemplate{}
				} else {
					yyv3476 := &yyv3474[yyj3474]
					yyv3476.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3474.End()
	}
	if yyc3474 {
		*v = yyv3474
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3477 := !z.EncBinary()
	if yys3477 {
		for yyi3477, yyv3477 := range v {
			if yyi3477 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3478 := &yyv3477
			yy3478.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3477 := range v {
			yy3479 := &yyv3477
			yy3479.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3480 := *v
	yyh3480, yyl3480 := z.DecSliceHelperStart()

	var yyc3480 bool
	_ = yyc3480

	if yyv3480 == nil {
		if yyl3480 <= 0 {
			yyv3480 = make([]LoadBalancerIngress, 0)
		} else {
			yyv3480 = make([]LoadBalancerIngress, yyl3480)
		}
		yyc3480 = true
	}

	if yyl3480 == 0 {
		if len(yyv3480) != 0 {
			yyv3480 = yyv3480[:0]
			yyc3480 = true
		}
	} else if yyl3480 > 0 {

		yyn3480 := yyl3480
		if yyl3480 > cap(yyv3480) {
			yyv3480 = make([]LoadBalancerIngress, yyl3480, yyl3480)
			yyc3480 = true

		} else if yyl3480 != len(yyv3480) {
			yyv3480 = yyv3480[:yyl3480]
			yyc3480 = true
		}
		yyj3480 := 0
		for ; yyj3480 < yyn3480; yyj3480++ {
			if r.TryDecodeAsNil() {
				yyv3480[yyj3480] = LoadBalancerIngress{}
			} else {
				yyv3481 := &yyv3480[yyj3480]
				yyv3481.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3480 := 0; !r.CheckBreak(); yyj3480++ {
			if yyj3480 >= len(yyv3480) {
				yyv3480 = append(yyv3480, LoadBalancerIngress{}) // var yyz3480 LoadBalancerIngress
				yyc3480 = true
			}
			if yyj3480 > 0 {
				yyh3480.Sep(yyj3480)
			}

			if yyj3480 < len(yyv3480) {
				if r.TryDecodeAsNil() {
					yyv3480[yyj3480] = LoadBalancerIngress{}
				} else {
					yyv3482 := &yyv3480[yyj3480]
					yyv3482.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3480.End()
	}
	if yyc3480 {
		*v = yyv3480
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3483 := !z.EncBinary()
	if yys3483 {
		for yyi3483, yyv3483 := range v {
			if yyi3483 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3484 := &yyv3483
			yy3484.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3483 := range v {
			yy3485 := &yyv3483
			yy3485.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3486 := *v
	yyh3486, yyl3486 := z.DecSliceHelperStart()

	var yyc3486 bool
	_ = yyc3486

	if yyv3486 == nil {
		if yyl3486 <= 0 {
			yyv3486 = make([]ServicePort, 0)
		} else {
			yyv3486 = make([]ServicePort, yyl3486)
		}
		yyc3486 = true
	}

	if yyl3486 == 0 {
		if len(yyv3486) != 0 {
			yyv3486 = yyv3486[:0]
			yyc3486 = true
		}
	} else if yyl3486 > 0 {

		yyn3486 := yyl3486
		if yyl3486 > cap(yyv3486) {
			yyv3486 = make([]ServicePort, yyl3486, yyl3486)
			yyc3486 = true

		} else if yyl3486 != len(yyv3486) {
			yyv3486 = yyv3486[:yyl3486]
			yyc3486 = true
		}
		yyj3486 := 0
		for ; yyj3486 < yyn3486; yyj3486++ {
			if r.TryDecodeAsNil() {
				yyv3486[yyj3486] = ServicePort{}
			} else {
				yyv3487 := &yyv3486[yyj3486]
				yyv3487.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3486 := 0; !r.CheckBreak(); yyj3486++ {
			if yyj3486 >= len(yyv3486) {
				yyv3486 = append(yyv3486, ServicePort{}) // var yyz3486 ServicePort
				yyc3486 = true
			}
			if yyj3486 > 0 {
				yyh3486.Sep(yyj3486)
			}

			if yyj3486 < len(yyv3486) {
				if r.TryDecodeAsNil() {
					yyv3486[yyj3486] = ServicePort{}
				} else {
					yyv3488 := &yyv3486[yyj3486]
					yyv3488.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3486.End()
	}
	if yyc3486 {
		*v = yyv3486
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3489 := !z.EncBinary()
	if yys3489 {
		for yyi3489, yyv3489 := range v {
			if yyi3489 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3490 := &yyv3489
			yy3490.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3489 := range v {
			yy3491 := &yyv3489
			yy3491.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3492 := *v
	yyh3492, yyl3492 := z.DecSliceHelperStart()

	var yyc3492 bool
	_ = yyc3492

	if yyv3492 == nil {
		if yyl3492 <= 0 {
			yyv3492 = make([]ObjectReference, 0)
		} else {
			yyv3492 = make([]ObjectReference, yyl3492)
		}
		yyc3492 = true
	}

	if yyl3492 == 0 {
		if len(yyv3492) != 0 {
			yyv3492 = yyv3492[:0]
			yyc3492 = true
		}
	} else if yyl3492 > 0 {

		yyn3492 := yyl3492
		if yyl3492 > cap(yyv3492) {
			yyv3492 = make([]ObjectReference, yyl3492, yyl3492)
			yyc3492 = true

		} else if yyl3492 != len(yyv3492) {
			yyv3492 = yyv3492[:yyl3492]
			yyc3492 = true
		}
		yyj3492 := 0
		for ; yyj3492 < yyn3492; yyj3492++ {
			if r.TryDecodeAsNil() {
				yyv3492[yyj3492] = ObjectReference{}
			} else {
				yyv3493 := &yyv3492[yyj3492]
				yyv3493.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3492 := 0; !r.CheckBreak(); yyj3492++ {
			if yyj3492 >= len(yyv3492) {
				yyv3492 = append(yyv3492, ObjectReference{}) // var yyz3492 ObjectReference
				yyc3492 = true
			}
			if yyj3492 > 0 {
				yyh3492.Sep(yyj3492)
			}

			if yyj3492 < len(yyv3492) {
				if r.TryDecodeAsNil() {
					yyv3492[yyj3492] = ObjectReference{}
				} else {
					yyv3494 := &yyv3492[yyj3492]
					yyv3494.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3492.End()
	}
	if yyc3492 {
		*v = yyv3492
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3495 := !z.EncBinary()
	if yys3495 {
		for yyi3495, yyv3495 := range v {
			if yyi3495 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3496 := &yyv3495
			yy3496.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3495 := range v {
			yy3497 := &yyv3495
			yy3497.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3498 := *v
	yyh3498, yyl3498 := z.DecSliceHelperStart()

	var yyc3498 bool
	_ = yyc3498

	if yyv3498 == nil {
		if yyl3498 <= 0 {
			yyv3498 = make([]NodeAddress, 0)
		} else {
			yyv3498 = make([]NodeAddress, yyl3498)
		}
		yyc3498 = true
	}

	if yyl3498 == 0 {
		if len(yyv3498) != 0 {
			yyv3498 = yyv3498[:0]
			yyc3498 = true
		}
	} else if yyl3498 > 0 {

		yyn3498 := yyl3498
		if yyl3498 > cap(yyv3498) {
			yyv3498 = make([]NodeAddress, yyl3498, yyl3498)
			yyc3498 = true

		} else if yyl3498 != len(yyv3498) {
			yyv3498 = yyv3498[:yyl3498]
			yyc3498 = true
		}
		yyj3498 := 0
		for ; yyj3498 < yyn3498; yyj3498++ {
			if r.TryDecodeAsNil() {
				yyv3498[yyj3498] = NodeAddress{}
			} else {
				yyv3499 := &yyv3498[yyj3498]
				yyv3499.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3498 := 0; !r.CheckBreak(); yyj3498++ {
			if yyj3498 >= len(yyv3498) {
				yyv3498 = append(yyv3498, NodeAddress{}) // var yyz3498 NodeAddress
				yyc3498 = true
			}
			if yyj3498 > 0 {
				yyh3498.Sep(yyj3498)
			}

			if yyj3498 < len(yyv3498) {
				if r.TryDecodeAsNil() {
					yyv3498[yyj3498] = NodeAddress{}
				} else {
					yyv3500 := &yyv3498[yyj3498]
					yyv3500.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3498.End()
	}
	if yyc3498 {
		*v = yyv3498
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3501 := !z.EncBinary()
	if yys3501 {
		for yyi3501, yyv3501 := range v {
			if yyi3501 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv3501.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3501 := range v {
			yyv3501.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3502 := *v
	yyh3502, yyl3502 := z.DecSliceHelperStart()

	var yyc3502 bool
	_ = yyc3502

	if yyv3502 == nil {
		if yyl3502 <= 0 {
			yyv3502 = make([]PersistentVolumeAccessMode, 0)
		} else {
			yyv3502 = make([]PersistentVolumeAccessMode, yyl3502)
		}
		yyc3502 = true
	}

	if yyl3502 == 0 {
		if len(yyv3502) != 0 {
			yyv3502 = yyv3502[:0]
			yyc3502 = true
		}
	} else if yyl3502 > 0 {

		yyn3502 := yyl3502
		if yyl3502 > cap(yyv3502) {

			yyv23502 := yyv3502
			yyv3502 = make([]PersistentVolumeAccessMode, yyl3502, yyl3502)
			if len(yyv3502) > 0 {
				copy(yyv3502, yyv23502[:cap(yyv23502)])
			}
			yyc3502 = true

		} else if yyl3502 != len(yyv3502) {
			yyv3502 = yyv3502[:yyl3502]
			yyc3502 = true
		}
		yyj3502 := 0
		for ; yyj3502 < yyn3502; yyj3502++ {
			if r.TryDecodeAsNil() {
				yyv3502[yyj3502] = ""
			} else {
				yyv3502[yyj3502] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}

	} else {
		for yyj3502 := 0; !r.CheckBreak(); yyj3502++ {
			if yyj3502 >= len(yyv3502) {
				yyv3502 = append(yyv3502, "") // var yyz3502 PersistentVolumeAccessMode
				yyc3502 = true
			}
			if yyj3502 > 0 {
				yyh3502.Sep(yyj3502)
			}

			if yyj3502 < len(yyv3502) {
				if r.TryDecodeAsNil() {
					yyv3502[yyj3502] = ""
				} else {
					yyv3502[yyj3502] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3502.End()
	}
	if yyc3502 {
		*v = yyv3502
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3505 := !z.EncBinary()
	if yys3505 {
		for yyi3505, yyv3505 := range v {
			if yyi3505 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3506 := &yyv3505
			yy3506.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3505 := range v {
			yy3507 := &yyv3505
			yy3507.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3508 := *v
	yyh3508, yyl3508 := z.DecSliceHelperStart()

	var yyc3508 bool
	_ = yyc3508

	if yyv3508 == nil {
		if yyl3508 <= 0 {
			yyv3508 = make([]Volume, 0)
		} else {
			yyv3508 = make([]Volume, yyl3508)
		}
		yyc3508 = true
	}

	if yyl3508 == 0 {
		if len(yyv3508) != 0 {
			yyv3508 = yyv3508[:0]
			yyc3508 = true
		}
	} else if yyl3508 > 0 {

		yyn3508 := yyl3508
		if yyl3508 > cap(yyv3508) {
			yyv3508 = make([]Volume, yyl3508, yyl3508)
			yyc3508 = true

		} else if yyl3508 != len(yyv3508) {
			yyv3508 = yyv3508[:yyl3508]
			yyc3508 = true
		}
		yyj3508 := 0
		for ; yyj3508 < yyn3508; yyj3508++ {
			if r.TryDecodeAsNil() {
				yyv3508[yyj3508] = Volume{}
			} else {
				yyv3509 := &yyv3508[yyj3508]
				yyv3509.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3508 := 0; !r.CheckBreak(); yyj3508++ {
			if yyj3508 >= len(yyv3508) {
				yyv3508 = append(yyv3508, Volume{}) // var yyz3508 Volume
				yyc3508 = true
			}
			if yyj3508 > 0 {
				yyh3508.Sep(yyj3508)
			}

			if yyj3508 < len(yyv3508) {
				if r.TryDecodeAsNil() {
					yyv3508[yyj3508] = Volume{}
				} else {
					yyv3510 := &yyv3508[yyj3508]
					yyv3510.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3508.End()
	}
	if yyc3508 {
		*v = yyv3508
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3511 := !z.EncBinary()
	if yys3511 {
		for yyi3511, yyv3511 := range v {
			if yyi3511 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3512 := &yyv3511
			yy3512.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3511 := range v {
			yy3513 := &yyv3511
			yy3513.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3514 := *v
	yyh3514, yyl3514 := z.DecSliceHelperStart()

	var yyc3514 bool
	_ = yyc3514

	if yyv3514 == nil {
		if yyl3514 <= 0 {
			yyv3514 = make([]Endpoints, 0)
		} else {
			yyv3514 = make([]Endpoints, yyl3514)
		}
		yyc3514 = true
	}

	if yyl3514 == 0 {
		if len(yyv3514) != 0 {
			yyv3514 = yyv3514[:0]
			yyc3514 = true
		}
	} else if yyl3514 > 0 {

		yyn3514 := yyl3514
		if yyl3514 > cap(yyv3514) {
			yyv3514 = make([]Endpoints, yyl3514, yyl3514)
			yyc3514 = true

		} else if yyl3514 != len(yyv3514) {
			yyv3514 = yyv3514[:yyl3514]
			yyc3514 = true
		}
		yyj3514 := 0
		for ; yyj3514 < yyn3514; yyj3514++ {
			if r.TryDecodeAsNil() {
				yyv3514[yyj3514] = Endpoints{}
			} else {
				yyv3515 := &yyv3514[yyj3514]
				yyv3515.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3514 := 0; !r.CheckBreak(); yyj3514++ {
			if yyj3514 >= len(yyv3514) {
				yyv3514 = append(yyv3514, Endpoints{}) // var yyz3514 Endpoints
				yyc3514 = true
			}
			if yyj3514 > 0 {
				yyh3514.Sep(yyj3514)
			}

			if yyj3514 < len(yyv3514) {
				if r.TryDecodeAsNil() {
					yyv3514[yyj3514] = Endpoints{}
				} else {
					yyv3516 := &yyv3514[yyj3514]
					yyv3516.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3514.End()
	}
	if yyc3514 {
		*v = yyv3514
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3517 := !z.EncBinary()
	if yys3517 {
		for yyi3517, yyv3517 := range v {
			if yyi3517 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3518 := &yyv3517
			yy3518.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3517 := range v {
			yy3519 := &yyv3517
			yy3519.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3520 := *v
	yyh3520, yyl3520 := z.DecSliceHelperStart()

	var yyc3520 bool
	_ = yyc3520

	if yyv3520 == nil {
		if yyl3520 <= 0 {
			yyv3520 = make([]ComponentStatus, 0)
		} else {
			yyv3520 = make([]ComponentStatus, yyl3520)
		}
		yyc3520 = true
	}

	if yyl3520 == 0 {
		if len(yyv3520) != 0 {
			yyv3520 = yyv3520[:0]
			yyc3520 = true
		}
	} else if yyl3520 > 0 {

		yyn3520 := yyl3520
		if yyl3520 > cap(yyv3520) {
			yyv3520 = make([]ComponentStatus, yyl3520, yyl3520)
			yyc3520 = true

		} else if yyl3520 != len(yyv3520) {
			yyv3520 = yyv3520[:yyl3520]
			yyc3520 = true
		}
		yyj3520 := 0
		for ; yyj3520 < yyn3520; yyj3520++ {
			if r.TryDecodeAsNil() {
				yyv3520[yyj3520] = ComponentStatus{}
			} else {
				yyv3521 := &yyv3520[yyj3520]
				yyv3521.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3520 := 0; !r.CheckBreak(); yyj3520++ {
			if yyj3520 >= len(yyv3520) {
				yyv3520 = append(yyv3520, ComponentStatus{}) // var yyz3520 ComponentStatus
				yyc3520 = true
			}
			if yyj3520 > 0 {
				yyh3520.Sep(yyj3520)
			}

			if yyj3520 < len(yyv3520) {
				if r.TryDecodeAsNil() {
					yyv3520[yyj3520] = ComponentStatus{}
				} else {
					yyv3522 := &yyv3520[yyj3520]
					yyv3522.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3520.End()
	}
	if yyc3520 {
		*v = yyv3520
	}

}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3523 := !z.EncBinary()
	if yys3523 {
		for yyi3523, yyv3523 := range v {
			if yyi3523 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3524 := &yyv3523
			yy3524.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3523 := range v {
			yy3525 := &yyv3523
			yy3525.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3526 := *v
	yyh3526, yyl3526 := z.DecSliceHelperStart()

	var yyc3526 bool
	_ = yyc3526

	if yyv3526 == nil {
		if yyl3526 <= 0 {
			yyv3526 = make([]APIVersion, 0)
		} else {
			yyv3526 = make([]APIVersion, yyl3526)
		}
		yyc3526 = true
	}

	if yyl3526 == 0 {
		if len(yyv3526) != 0 {
			yyv3526 = yyv3526[:0]
			yyc3526 = true
		}
	} else if yyl3526 > 0 {

		yyn3526 := yyl3526
		if yyl3526 > cap(yyv3526) {
			yyv3526 = make([]APIVersion, yyl3526, yyl3526)
			yyc3526 = true

		} else if yyl3526 != len(yyv3526) {
			yyv3526 = yyv3526[:yyl3526]
			yyc3526 = true
		}
		yyj3526 := 0
		for ; yyj3526 < yyn3526; yyj3526++ {
			if r.TryDecodeAsNil() {
				yyv3526[yyj3526] = APIVersion{}
			} else {
				yyv3527 := &yyv3526[yyj3526]
				yyv3527.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3526 := 0; !r.CheckBreak(); yyj3526++ {
			if yyj3526 >= len(yyv3526) {
				yyv3526 = append(yyv3526, APIVersion{}) // var yyz3526 APIVersion
				yyc3526 = true
			}
			if yyj3526 > 0 {
				yyh3526.Sep(yyj3526)
			}

			if yyj3526 < len(yyv3526) {
				if r.TryDecodeAsNil() {
					yyv3526[yyj3526] = APIVersion{}
				} else {
					yyv3528 := &yyv3526[yyj3526]
					yyv3528.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3526.End()
	}
	if yyc3526 {
		*v = yyv3526
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3529 := !z.EncBinary()
	if yys3529 {
		for yyi3529, yyv3529 := range v {
			if yyi3529 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3530 := &yyv3529
			yy3530.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3529 := range v {
			yy3531 := &yyv3529
			yy3531.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3532 := *v
	yyh3532, yyl3532 := z.DecSliceHelperStart()

	var yyc3532 bool
	_ = yyc3532

	if yyv3532 == nil {
		if yyl3532 <= 0 {
			yyv3532 = make([]VolumeMount, 0)
		} else {
			yyv3532 = make([]VolumeMount, yyl3532)
		}
		yyc3532 = true
	}

	if yyl3532 == 0 {
		if len(yyv3532) != 0 {
			yyv3532 = yyv3532[:0]
			yyc3532 = true
		}
	} else if yyl3532 > 0 {

		yyn3532 := yyl3532
		if yyl3532 > cap(yyv3532) {
			yyv3532 = make([]VolumeMount, yyl3532, yyl3532)
			yyc3532 = true

		} else if yyl3532 != len(yyv3532) {
			yyv3532 = yyv3532[:yyl3532]
			yyc3532 = true
		}
		yyj3532 := 0
		for ; yyj3532 < yyn3532; yyj3532++ {
			if r.TryDecodeAsNil() {
				yyv3532[yyj3532] = VolumeMount{}
			} else {
				yyv3533 := &yyv3532[yyj3532]
				yyv3533.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3532 := 0; !r.CheckBreak(); yyj3532++ {
			if yyj3532 >= len(yyv3532) {
				yyv3532 = append(yyv3532, VolumeMount{}) // var yyz3532 VolumeMount
				yyc3532 = true
			}
			if yyj3532 > 0 {
				yyh3532.Sep(yyj3532)
			}

			if yyj3532 < len(yyv3532) {
				if r.TryDecodeAsNil() {
					yyv3532[yyj3532] = VolumeMount{}
				} else {
					yyv3534 := &yyv3532[yyj3532]
					yyv3534.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3532.End()
	}
	if yyc3532 {
		*v = yyv3532
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3535 := !z.EncBinary()
	if yys3535 {
		for yyi3535, yyv3535 := range v {
			if yyi3535 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3536 := &yyv3535
			yy3536.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3535 := range v {
			yy3537 := &yyv3535
			yy3537.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3538 := *v
	yyh3538, yyl3538 := z.DecSliceHelperStart()

	var yyc3538 bool
	_ = yyc3538

	if yyv3538 == nil {
		if yyl3538 <= 0 {
			yyv3538 = make([]ReplicationController, 0)
		} else {
			yyv3538 = make([]ReplicationController, yyl3538)
		}
		yyc3538 = true
	}

	if yyl3538 == 0 {
		if len(yyv3538) != 0 {
			yyv3538 = yyv3538[:0]
			yyc3538 = true
		}
	} else if yyl3538 > 0 {

		yyn3538 := yyl3538
		if yyl3538 > cap(yyv3538) {
			yyv3538 = make([]ReplicationController, yyl3538, yyl3538)
			yyc3538 = true

		} else if yyl3538 != len(yyv3538) {
			yyv3538 = yyv3538[:yyl3538]
			yyc3538 = true
		}
		yyj3538 := 0
		for ; yyj3538 < yyn3538; yyj3538++ {
			if r.TryDecodeAsNil() {
				yyv3538[yyj3538] = ReplicationController{}
			} else {
				yyv3539 := &yyv3538[yyj3538]
				yyv3539.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3538 := 0; !r.CheckBreak(); yyj3538++ {
			if yyj3538 >= len(yyv3538) {
				yyv3538 = append(yyv3538, ReplicationController{}) // var yyz3538 ReplicationController
				yyc3538 = true
			}
			if yyj3538 > 0 {
				yyh3538.Sep(yyj3538)
			}

			if yyj3538 < len(yyv3538) {
				if r.TryDecodeAsNil() {
					yyv3538[yyj3538] = ReplicationController{}
				} else {
					yyv3540 := &yyv3538[yyj3538]
					yyv3540.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3538.End()
	}
	if yyc3538 {
		*v = yyv3538
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3541 := !z.EncBinary()
	if yys3541 {
		for yyi3541, yyv3541 := range v {
			if yyi3541 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3542 := &yyv3541
			yy3542.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3541 := range v {
			yy3543 := &yyv3541
			yy3543.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3544 := *v
	yyh3544, yyl3544 := z.DecSliceHelperStart()

	var yyc3544 bool
	_ = yyc3544

	if yyv3544 == nil {
		if yyl3544 <= 0 {
			yyv3544 = make([]Service, 0)
		} else {
			yyv3544 = make([]Service, yyl3544)
		}
		yyc3544 = true
	}

	if yyl3544 == 0 {
		if len(yyv3544) != 0 {
			yyv3544 = yyv3544[:0]
			yyc3544 = true
		}
	} else if yyl3544 > 0 {

		yyn3544 := yyl3544
		if yyl3544 > cap(yyv3544) {
			yyv3544 = make([]Service, yyl3544, yyl3544)
			yyc3544 = true

		} else if yyl3544 != len(yyv3544) {
			yyv3544 = yyv3544[:yyl3544]
			yyc3544 = true
		}
		yyj3544 := 0
		for ; yyj3544 < yyn3544; yyj3544++ {
			if r.TryDecodeAsNil() {
				yyv3544[yyj3544] = Service{}
			} else {
				yyv3545 := &yyv3544[yyj3544]
				yyv3545.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3544 := 0; !r.CheckBreak(); yyj3544++ {
			if yyj3544 >= len(yyv3544) {
				yyv3544 = append(yyv3544, Service{}) // var yyz3544 Service
				yyc3544 = true
			}
			if yyj3544 > 0 {
				yyh3544.Sep(yyj3544)
			}

			if yyj3544 < len(yyv3544) {
				if r.TryDecodeAsNil() {
					yyv3544[yyj3544] = Service{}
				} else {
					yyv3546 := &yyv3544[yyj3544]
					yyv3546.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3544.End()
	}
	if yyc3544 {
		*v = yyv3544
	}

}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3547 := !z.EncBinary()
	if yys3547 {
		for yyi3547, yyv3547 := range v {
			if yyi3547 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3548 := &yyv3547
			yy3548.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3547 := range v {
			yy3549 := &yyv3547
			yy3549.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3550 := *v
	yyh3550, yyl3550 := z.DecSliceHelperStart()

	var yyc3550 bool
	_ = yyc3550

	if yyv3550 == nil {
		if yyl3550 <= 0 {
			yyv3550 = make([]Node, 0)
		} else {
			yyv3550 = make([]Node, yyl3550)
		}
		yyc3550 = true
	}

	if yyl3550 == 0 {
		if len(yyv3550) != 0 {
			yyv3550 = yyv3550[:0]
			yyc3550 = true
		}
	} else if yyl3550 > 0 {

		yyn3550 := yyl3550
		if yyl3550 > cap(yyv3550) {
			yyv3550 = make([]Node, yyl3550, yyl3550)
			yyc3550 = true

		} else if yyl3550 != len(yyv3550) {
			yyv3550 = yyv3550[:yyl3550]
			yyc3550 = true
		}
		yyj3550 := 0
		for ; yyj3550 < yyn3550; yyj3550++ {
			if r.TryDecodeAsNil() {
				yyv3550[yyj3550] = Node{}
			} else {
				yyv3551 := &yyv3550[yyj3550]
				yyv3551.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3550 := 0; !r.CheckBreak(); yyj3550++ {
			if yyj3550 >= len(yyv3550) {
				yyv3550 = append(yyv3550, Node{}) // var yyz3550 Node
				yyc3550 = true
			}
			if yyj3550 > 0 {
				yyh3550.Sep(yyj3550)
			}

			if yyj3550 < len(yyv3550) {
				if r.TryDecodeAsNil() {
					yyv3550[yyj3550] = Node{}
				} else {
					yyv3552 := &yyv3550[yyj3550]
					yyv3552.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3550.End()
	}
	if yyc3550 {
		*v = yyv3550
	}

}

func (x codecSelfer1234) encSliceStatusCause(v []StatusCause, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3553 := !z.EncBinary()
	if yys3553 {
		for yyi3553, yyv3553 := range v {
			if yyi3553 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3554 := &yyv3553
			yy3554.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3553 := range v {
			yy3555 := &yyv3553
			yy3555.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceStatusCause(v *[]StatusCause, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3556 := *v
	yyh3556, yyl3556 := z.DecSliceHelperStart()

	var yyc3556 bool
	_ = yyc3556

	if yyv3556 == nil {
		if yyl3556 <= 0 {
			yyv3556 = make([]StatusCause, 0)
		} else {
			yyv3556 = make([]StatusCause, yyl3556)
		}
		yyc3556 = true
	}

	if yyl3556 == 0 {
		if len(yyv3556) != 0 {
			yyv3556 = yyv3556[:0]
			yyc3556 = true
		}
	} else if yyl3556 > 0 {

		yyn3556 := yyl3556
		if yyl3556 > cap(yyv3556) {
			yyv3556 = make([]StatusCause, yyl3556, yyl3556)
			yyc3556 = true

		} else if yyl3556 != len(yyv3556) {
			yyv3556 = yyv3556[:yyl3556]
			yyc3556 = true
		}
		yyj3556 := 0
		for ; yyj3556 < yyn3556; yyj3556++ {
			if r.TryDecodeAsNil() {
				yyv3556[yyj3556] = StatusCause{}
			} else {
				yyv3557 := &yyv3556[yyj3556]
				yyv3557.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3556 := 0; !r.CheckBreak(); yyj3556++ {
			if yyj3556 >= len(yyv3556) {
				yyv3556 = append(yyv3556, StatusCause{}) // var yyz3556 StatusCause
				yyc3556 = true
			}
			if yyj3556 > 0 {
				yyh3556.Sep(yyj3556)
			}

			if yyj3556 < len(yyv3556) {
				if r.TryDecodeAsNil() {
					yyv3556[yyj3556] = StatusCause{}
				} else {
					yyv3558 := &yyv3556[yyj3556]
					yyv3558.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3556.End()
	}
	if yyc3556 {
		*v = yyv3556
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3559 := !z.EncBinary()
	if yys3559 {
		for yyi3559, yyv3559 := range v {
			if yyi3559 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3560 := &yyv3559
			yy3560.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3559 := range v {
			yy3561 := &yyv3559
			yy3561.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3562 := *v
	yyh3562, yyl3562 := z.DecSliceHelperStart()

	var yyc3562 bool
	_ = yyc3562

	if yyv3562 == nil {
		if yyl3562 <= 0 {
			yyv3562 = make([]Event, 0)
		} else {
			yyv3562 = make([]Event, yyl3562)
		}
		yyc3562 = true
	}

	if yyl3562 == 0 {
		if len(yyv3562) != 0 {
			yyv3562 = yyv3562[:0]
			yyc3562 = true
		}
	} else if yyl3562 > 0 {

		yyn3562 := yyl3562
		if yyl3562 > cap(yyv3562) {
			yyv3562 = make([]Event, yyl3562, yyl3562)
			yyc3562 = true

		} else if yyl3562 != len(yyv3562) {
			yyv3562 = yyv3562[:yyl3562]
			yyc3562 = true
		}
		yyj3562 := 0
		for ; yyj3562 < yyn3562; yyj3562++ {
			if r.TryDecodeAsNil() {
				yyv3562[yyj3562] = Event{}
			} else {
				yyv3563 := &yyv3562[yyj3562]
				yyv3563.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3562 := 0; !r.CheckBreak(); yyj3562++ {
			if yyj3562 >= len(yyv3562) {
				yyv3562 = append(yyv3562, Event{}) // var yyz3562 Event
				yyc3562 = true
			}
			if yyj3562 > 0 {
				yyh3562.Sep(yyj3562)
			}

			if yyj3562 < len(yyv3562) {
				if r.TryDecodeAsNil() {
					yyv3562[yyj3562] = Event{}
				} else {
					yyv3564 := &yyv3562[yyj3562]
					yyv3564.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3562.End()
	}
	if yyc3562 {
		*v = yyv3562
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3565 := !z.EncBinary()
	if yys3565 {
		for yyi3565, yyv3565 := range v {
			if yyi3565 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3566 := &yyv3565
			yy3566.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3565 := range v {
			yy3567 := &yyv3565
			yy3567.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3568 := *v
	yyh3568, yyl3568 := z.DecSliceHelperStart()

	var yyc3568 bool
	_ = yyc3568

	if yyv3568 == nil {
		if yyl3568 <= 0 {
			yyv3568 = make([]DownwardAPIVolumeFile, 0)
		} else {
			yyv3568 = make([]DownwardAPIVolumeFile, yyl3568)
		}
		yyc3568 = true
	}

	if yyl3568 == 0 {
		if len(yyv3568) != 0 {
			yyv3568 = yyv3568[:0]
			yyc3568 = true
		}
	} else if yyl3568 > 0 {

		yyn3568 := yyl3568
		if yyl3568 > cap(yyv3568) {
			yyv3568 = make([]DownwardAPIVolumeFile, yyl3568, yyl3568)
			yyc3568 = true

		} else if yyl3568 != len(yyv3568) {
			yyv3568 = yyv3568[:yyl3568]
			yyc3568 = true
		}
		yyj3568 := 0
		for ; yyj3568 < yyn3568; yyj3568++ {
			if r.TryDecodeAsNil() {
				yyv3568[yyj3568] = DownwardAPIVolumeFile{}
			} else {
				yyv3569 := &yyv3568[yyj3568]
				yyv3569.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3568 := 0; !r.CheckBreak(); yyj3568++ {
			if yyj3568 >= len(yyv3568) {
				yyv3568 = append(yyv3568, DownwardAPIVolumeFile{}) // var yyz3568 DownwardAPIVolumeFile
				yyc3568 = true
			}
			if yyj3568 > 0 {
				yyh3568.Sep(yyj3568)
			}

			if yyj3568 < len(yyv3568) {
				if r.TryDecodeAsNil() {
					yyv3568[yyj3568] = DownwardAPIVolumeFile{}
				} else {
					yyv3570 := &yyv3568[yyj3568]
					yyv3570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3568.End()
	}
	if yyc3568 {
		*v = yyv3568
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3571 := !z.EncBinary()
	if yys3571 {
		for yyi3571, yyv3571 := range v {
			if yyi3571 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3572 := &yyv3571
			yy3572.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3571 := range v {
			yy3573 := &yyv3571
			yy3573.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3574 := *v
	yyh3574, yyl3574 := z.DecSliceHelperStart()

	var yyc3574 bool
	_ = yyc3574

	if yyv3574 == nil {
		if yyl3574 <= 0 {
			yyv3574 = make([]Pod, 0)
		} else {
			yyv3574 = make([]Pod, yyl3574)
		}
		yyc3574 = true
	}

	if yyl3574 == 0 {
		if len(yyv3574) != 0 {
			yyv3574 = yyv3574[:0]
			yyc3574 = true
		}
	} else if yyl3574 > 0 {

		yyn3574 := yyl3574
		if yyl3574 > cap(yyv3574) {
			yyv3574 = make([]Pod, yyl3574, yyl3574)
			yyc3574 = true

		} else if yyl3574 != len(yyv3574) {
			yyv3574 = yyv3574[:yyl3574]
			yyc3574 = true
		}
		yyj3574 := 0
		for ; yyj3574 < yyn3574; yyj3574++ {
			if r.TryDecodeAsNil() {
				yyv3574[yyj3574] = Pod{}
			} else {
				yyv3575 := &yyv3574[yyj3574]
				yyv3575.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3574 := 0; !r.CheckBreak(); yyj3574++ {
			if yyj3574 >= len(yyv3574) {
				yyv3574 = append(yyv3574, Pod{}) // var yyz3574 Pod
				yyc3574 = true
			}
			if yyj3574 > 0 {
				yyh3574.Sep(yyj3574)
			}

			if yyj3574 < len(yyv3574) {
				if r.TryDecodeAsNil() {
					yyv3574[yyj3574] = Pod{}
				} else {
					yyv3576 := &yyv3574[yyj3574]
					yyv3576.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3574.End()
	}
	if yyc3574 {
		*v = yyv3574
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3577 := !z.EncBinary()
	if yys3577 {
		for yyi3577, yyv3577 := range v {
			if yyi3577 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3578 := &yyv3577
			yy3578.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3577 := range v {
			yy3579 := &yyv3577
			yy3579.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3580 := *v
	yyh3580, yyl3580 := z.DecSliceHelperStart()

	var yyc3580 bool
	_ = yyc3580

	if yyv3580 == nil {
		if yyl3580 <= 0 {
			yyv3580 = make([]EndpointPort, 0)
		} else {
			yyv3580 = make([]EndpointPort, yyl3580)
		}
		yyc3580 = true
	}

	if yyl3580 == 0 {
		if len(yyv3580) != 0 {
			yyv3580 = yyv3580[:0]
			yyc3580 = true
		}
	} else if yyl3580 > 0 {

		yyn3580 := yyl3580
		if yyl3580 > cap(yyv3580) {
			yyv3580 = make([]EndpointPort, yyl3580, yyl3580)
			yyc3580 = true

		} else if yyl3580 != len(yyv3580) {
			yyv3580 = yyv3580[:yyl3580]
			yyc3580 = true
		}
		yyj3580 := 0
		for ; yyj3580 < yyn3580; yyj3580++ {
			if r.TryDecodeAsNil() {
				yyv3580[yyj3580] = EndpointPort{}
			} else {
				yyv3581 := &yyv3580[yyj3580]
				yyv3581.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3580 := 0; !r.CheckBreak(); yyj3580++ {
			if yyj3580 >= len(yyv3580) {
				yyv3580 = append(yyv3580, EndpointPort{}) // var yyz3580 EndpointPort
				yyc3580 = true
			}
			if yyj3580 > 0 {
				yyh3580.Sep(yyj3580)
			}

			if yyj3580 < len(yyv3580) {
				if r.TryDecodeAsNil() {
					yyv3580[yyj3580] = EndpointPort{}
				} else {
					yyv3582 := &yyv3580[yyj3580]
					yyv3582.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3580.End()
	}
	if yyc3580 {
		*v = yyv3580
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3583 := !z.EncBinary()
	if yys3583 {
		for yyi3583, yyv3583 := range v {
			if yyi3583 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3584 := &yyv3583
			yy3584.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3583 := range v {
			yy3585 := &yyv3583
			yy3585.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3586 := *v
	yyh3586, yyl3586 := z.DecSliceHelperStart()

	var yyc3586 bool
	_ = yyc3586

	if yyv3586 == nil {
		if yyl3586 <= 0 {
			yyv3586 = make([]NodeCondition, 0)
		} else {
			yyv3586 = make([]NodeCondition, yyl3586)
		}
		yyc3586 = true
	}

	if yyl3586 == 0 {
		if len(yyv3586) != 0 {
			yyv3586 = yyv3586[:0]
			yyc3586 = true
		}
	} else if yyl3586 > 0 {

		yyn3586 := yyl3586
		if yyl3586 > cap(yyv3586) {
			yyv3586 = make([]NodeCondition, yyl3586, yyl3586)
			yyc3586 = true

		} else if yyl3586 != len(yyv3586) {
			yyv3586 = yyv3586[:yyl3586]
			yyc3586 = true
		}
		yyj3586 := 0
		for ; yyj3586 < yyn3586; yyj3586++ {
			if r.TryDecodeAsNil() {
				yyv3586[yyj3586] = NodeCondition{}
			} else {
				yyv3587 := &yyv3586[yyj3586]
				yyv3587.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3586 := 0; !r.CheckBreak(); yyj3586++ {
			if yyj3586 >= len(yyv3586) {
				yyv3586 = append(yyv3586, NodeCondition{}) // var yyz3586 NodeCondition
				yyc3586 = true
			}
			if yyj3586 > 0 {
				yyh3586.Sep(yyj3586)
			}

			if yyj3586 < len(yyv3586) {
				if r.TryDecodeAsNil() {
					yyv3586[yyj3586] = NodeCondition{}
				} else {
					yyv3588 := &yyv3586[yyj3586]
					yyv3588.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3586.End()
	}
	if yyc3586 {
		*v = yyv3586
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3589 := !z.EncBinary()
	if yys3589 {
		for yyi3589, yyv3589 := range v {
			if yyi3589 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3590 := &yyv3589
			yy3590.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3589 := range v {
			yy3591 := &yyv3589
			yy3591.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3592 := *v
	yyh3592, yyl3592 := z.DecSliceHelperStart()

	var yyc3592 bool
	_ = yyc3592

	if yyv3592 == nil {
		if yyl3592 <= 0 {
			yyv3592 = make([]ResourceQuota, 0)
		} else {
			yyv3592 = make([]ResourceQuota, yyl3592)
		}
		yyc3592 = true
	}

	if yyl3592 == 0 {
		if len(yyv3592) != 0 {
			yyv3592 = yyv3592[:0]
			yyc3592 = true
		}
	} else if yyl3592 > 0 {

		yyn3592 := yyl3592
		if yyl3592 > cap(yyv3592) {
			yyv3592 = make([]ResourceQuota, yyl3592, yyl3592)
			yyc3592 = true

		} else if yyl3592 != len(yyv3592) {
			yyv3592 = yyv3592[:yyl3592]
			yyc3592 = true
		}
		yyj3592 := 0
		for ; yyj3592 < yyn3592; yyj3592++ {
			if r.TryDecodeAsNil() {
				yyv3592[yyj3592] = ResourceQuota{}
			} else {
				yyv3593 := &yyv3592[yyj3592]
				yyv3593.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3592 := 0; !r.CheckBreak(); yyj3592++ {
			if yyj3592 >= len(yyv3592) {
				yyv3592 = append(yyv3592, ResourceQuota{}) // var yyz3592 ResourceQuota
				yyc3592 = true
			}
			if yyj3592 > 0 {
				yyh3592.Sep(yyj3592)
			}

			if yyj3592 < len(yyv3592) {
				if r.TryDecodeAsNil() {
					yyv3592[yyj3592] = ResourceQuota{}
				} else {
					yyv3594 := &yyv3592[yyj3592]
					yyv3594.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3592.End()
	}
	if yyc3592 {
		*v = yyv3592
	}

}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3595 := !z.EncBinary()
	if yys3595 {
		for yyi3595, yyv3595 := range v {
			if yyi3595 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3596 := &yyv3595
			yy3596.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3595 := range v {
			yy3597 := &yyv3595
			yy3597.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3598 := *v
	yyh3598, yyl3598 := z.DecSliceHelperStart()

	var yyc3598 bool
	_ = yyc3598

	if yyv3598 == nil {
		if yyl3598 <= 0 {
			yyv3598 = make([]Secret, 0)
		} else {
			yyv3598 = make([]Secret, yyl3598)
		}
		yyc3598 = true
	}

	if yyl3598 == 0 {
		if len(yyv3598) != 0 {
			yyv3598 = yyv3598[:0]
			yyc3598 = true
		}
	} else if yyl3598 > 0 {

		yyn3598 := yyl3598
		if yyl3598 > cap(yyv3598) {
			yyv3598 = make([]Secret, yyl3598, yyl3598)
			yyc3598 = true

		} else if yyl3598 != len(yyv3598) {
			yyv3598 = yyv3598[:yyl3598]
			yyc3598 = true
		}
		yyj3598 := 0
		for ; yyj3598 < yyn3598; yyj3598++ {
			if r.TryDecodeAsNil() {
				yyv3598[yyj3598] = Secret{}
			} else {
				yyv3599 := &yyv3598[yyj3598]
				yyv3599.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3598 := 0; !r.CheckBreak(); yyj3598++ {
			if yyj3598 >= len(yyv3598) {
				yyv3598 = append(yyv3598, Secret{}) // var yyz3598 Secret
				yyc3598 = true
			}
			if yyj3598 > 0 {
				yyh3598.Sep(yyj3598)
			}

			if yyj3598 < len(yyv3598) {
				if r.TryDecodeAsNil() {
					yyv3598[yyj3598] = Secret{}
				} else {
					yyv3600 := &yyv3598[yyj3598]
					yyv3600.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3598.End()
	}
	if yyc3598 {
		*v = yyv3598
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3601 := !z.EncBinary()
	if yys3601 {
		for yyi3601, yyv3601 := range v {
			if yyi3601 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv3601.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3601 := range v {
			yyv3601.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3602 := *v
	yyh3602, yyl3602 := z.DecSliceHelperStart()

	var yyc3602 bool
	_ = yyc3602

	if yyv3602 == nil {
		if yyl3602 <= 0 {
			yyv3602 = make([]Capability, 0)
		} else {
			yyv3602 = make([]Capability, yyl3602)
		}
		yyc3602 = true
	}

	if yyl3602 == 0 {
		if len(yyv3602) != 0 {
			yyv3602 = yyv3602[:0]
			yyc3602 = true
		}
	} else if yyl3602 > 0 {

		yyn3602 := yyl3602
		if yyl3602 > cap(yyv3602) {

			yyv23602 := yyv3602
			yyv3602 = make([]Capability, yyl3602, yyl3602)
			if len(yyv3602) > 0 {
				copy(yyv3602, yyv23602[:cap(yyv23602)])
			}
			yyc3602 = true

		} else if yyl3602 != len(yyv3602) {
			yyv3602 = yyv3602[:yyl3602]
			yyc3602 = true
		}
		yyj3602 := 0
		for ; yyj3602 < yyn3602; yyj3602++ {
			if r.TryDecodeAsNil() {
				yyv3602[yyj3602] = ""
			} else {
				yyv3602[yyj3602] = Capability(r.DecodeString())
			}

		}

	} else {
		for yyj3602 := 0; !r.CheckBreak(); yyj3602++ {
			if yyj3602 >= len(yyv3602) {
				yyv3602 = append(yyv3602, "") // var yyz3602 Capability
				yyc3602 = true
			}
			if yyj3602 > 0 {
				yyh3602.Sep(yyj3602)
			}

			if yyj3602 < len(yyv3602) {
				if r.TryDecodeAsNil() {
					yyv3602[yyj3602] = ""
				} else {
					yyv3602[yyj3602] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3602.End()
	}
	if yyc3602 {
		*v = yyv3602
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3605 := !z.EncBinary()
	if yys3605 {
		for yyi3605, yyv3605 := range v {
			if yyi3605 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3606 := &yyv3605
			yy3606.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3605 := range v {
			yy3607 := &yyv3605
			yy3607.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3608 := *v
	yyh3608, yyl3608 := z.DecSliceHelperStart()

	var yyc3608 bool
	_ = yyc3608

	if yyv3608 == nil {
		if yyl3608 <= 0 {
			yyv3608 = make([]PodCondition, 0)
		} else {
			yyv3608 = make([]PodCondition, yyl3608)
		}
		yyc3608 = true
	}

	if yyl3608 == 0 {
		if len(yyv3608) != 0 {
			yyv3608 = yyv3608[:0]
			yyc3608 = true
		}
	} else if yyl3608 > 0 {

		yyn3608 := yyl3608
		if yyl3608 > cap(yyv3608) {
			yyv3608 = make([]PodCondition, yyl3608, yyl3608)
			yyc3608 = true

		} else if yyl3608 != len(yyv3608) {
			yyv3608 = yyv3608[:yyl3608]
			yyc3608 = true
		}
		yyj3608 := 0
		for ; yyj3608 < yyn3608; yyj3608++ {
			if r.TryDecodeAsNil() {
				yyv3608[yyj3608] = PodCondition{}
			} else {
				yyv3609 := &yyv3608[yyj3608]
				yyv3609.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3608 := 0; !r.CheckBreak(); yyj3608++ {
			if yyj3608 >= len(yyv3608) {
				yyv3608 = append(yyv3608, PodCondition{}) // var yyz3608 PodCondition
				yyc3608 = true
			}
			if yyj3608 > 0 {
				yyh3608.Sep(yyj3608)
			}

			if yyj3608 < len(yyv3608) {
				if r.TryDecodeAsNil() {
					yyv3608[yyj3608] = PodCondition{}
				} else {
					yyv3610 := &yyv3608[yyj3608]
					yyv3610.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3608.End()
	}
	if yyc3608 {
		*v = yyv3608
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3611 := !z.EncBinary()
	if yys3611 {
		for yyi3611, yyv3611 := range v {
			if yyi3611 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3612 := &yyv3611
			yy3612.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3611 := range v {
			yy3613 := &yyv3611
			yy3613.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3614 := *v
	yyh3614, yyl3614 := z.DecSliceHelperStart()

	var yyc3614 bool
	_ = yyc3614

	if yyv3614 == nil {
		if yyl3614 <= 0 {
			yyv3614 = make([]EndpointSubset, 0)
		} else {
			yyv3614 = make([]EndpointSubset, yyl3614)
		}
		yyc3614 = true
	}

	if yyl3614 == 0 {
		if len(yyv3614) != 0 {
			yyv3614 = yyv3614[:0]
			yyc3614 = true
		}
	} else if yyl3614 > 0 {

		yyn3614 := yyl3614
		if yyl3614 > cap(yyv3614) {
			yyv3614 = make([]EndpointSubset, yyl3614, yyl3614)
			yyc3614 = true

		} else if yyl3614 != len(yyv3614) {
			yyv3614 = yyv3614[:yyl3614]
			yyc3614 = true
		}
		yyj3614 := 0
		for ; yyj3614 < yyn3614; yyj3614++ {
			if r.TryDecodeAsNil() {
				yyv3614[yyj3614] = EndpointSubset{}
			} else {
				yyv3615 := &yyv3614[yyj3614]
				yyv3615.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3614 := 0; !r.CheckBreak(); yyj3614++ {
			if yyj3614 >= len(yyv3614) {
				yyv3614 = append(yyv3614, EndpointSubset{}) // var yyz3614 EndpointSubset
				yyc3614 = true
			}
			if yyj3614 > 0 {
				yyh3614.Sep(yyj3614)
			}

			if yyj3614 < len(yyv3614) {
				if r.TryDecodeAsNil() {
					yyv3614[yyj3614] = EndpointSubset{}
				} else {
					yyv3616 := &yyv3614[yyj3614]
					yyv3616.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3614.End()
	}
	if yyc3614 {
		*v = yyv3614
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3617 := !z.EncBinary()
	if yys3617 {
		for yyi3617, yyv3617 := range v {
			if yyi3617 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3618 := &yyv3617
			yy3618.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3617 := range v {
			yy3619 := &yyv3617
			yy3619.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3620 := *v
	yyh3620, yyl3620 := z.DecSliceHelperStart()

	var yyc3620 bool
	_ = yyc3620

	if yyv3620 == nil {
		if yyl3620 <= 0 {
			yyv3620 = make([]EndpointAddress, 0)
		} else {
			yyv3620 = make([]EndpointAddress, yyl3620)
		}
		yyc3620 = true
	}

	if yyl3620 == 0 {
		if len(yyv3620) != 0 {
			yyv3620 = yyv3620[:0]
			yyc3620 = true
		}
	} else if yyl3620 > 0 {

		yyn3620 := yyl3620
		if yyl3620 > cap(yyv3620) {
			yyv3620 = make([]EndpointAddress, yyl3620, yyl3620)
			yyc3620 = true

		} else if yyl3620 != len(yyv3620) {
			yyv3620 = yyv3620[:yyl3620]
			yyc3620 = true
		}
		yyj3620 := 0
		for ; yyj3620 < yyn3620; yyj3620++ {
			if r.TryDecodeAsNil() {
				yyv3620[yyj3620] = EndpointAddress{}
			} else {
				yyv3621 := &yyv3620[yyj3620]
				yyv3621.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3620 := 0; !r.CheckBreak(); yyj3620++ {
			if yyj3620 >= len(yyv3620) {
				yyv3620 = append(yyv3620, EndpointAddress{}) // var yyz3620 EndpointAddress
				yyc3620 = true
			}
			if yyj3620 > 0 {
				yyh3620.Sep(yyj3620)
			}

			if yyj3620 < len(yyv3620) {
				if r.TryDecodeAsNil() {
					yyv3620[yyj3620] = EndpointAddress{}
				} else {
					yyv3622 := &yyv3620[yyj3620]
					yyv3622.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3620.End()
	}
	if yyc3620 {
		*v = yyv3620
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	yys3623 := !z.EncBinary()
	yyj3623 := 0
	if yys3623 {
		for yyk3623, yyv3623 := range v {
			if yyj3623 > 0 {
				r.EncodeMapEntrySeparator()
			}
			yyk3623.CodecEncodeSelf(e)
			r.EncodeMapKVSeparator()
			yy3624 := &yyv3623
			yym3625 := z.EncBinary()
			_ = yym3625
			if false {
			} else if z.HasExtensions() && z.EncExt(yy3624) {
			} else if !yym3625 && z.IsJSONHandle() {
				z.EncJSONMarshal(yy3624)
			} else {
				z.EncFallback(yy3624)
			}
			yyj3623++
		}
		r.EncodeMapEnd()
	} else {
		for yyk3623, yyv3623 := range v {
			yyk3623.CodecEncodeSelf(e)
			yy3626 := &yyv3623
			yym3627 := z.EncBinary()
			_ = yym3627
			if false {
			} else if z.HasExtensions() && z.EncExt(yy3626) {
			} else if !yym3627 && z.IsJSONHandle() {
				z.EncJSONMarshal(yy3626)
			} else {
				z.EncFallback(yy3626)
			}
		}
	}
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3628 := *v
	yyl3628 := r.ReadMapStart()
	if yyv3628 == nil {
		if yyl3628 > 0 {
			yyv3628 = make(map[ResourceName]pkg3_resource.Quantity, yyl3628)
		} else {
			yyv3628 = make(map[ResourceName]pkg3_resource.Quantity) // supports indefinite-length, etc
		}
		*v = yyv3628
	}
	if yyl3628 > 0 {
		for yyj3628 := 0; yyj3628 < yyl3628; yyj3628++ {
			var yymk3628 ResourceName
			if r.TryDecodeAsNil() {
				yymk3628 = ""
			} else {
				yymk3628 = ResourceName(r.DecodeString())
			}

			yymv3628 := yyv3628[yymk3628]
			if r.TryDecodeAsNil() {
				yymv3628 = pkg3_resource.Quantity{}
			} else {
				yyv3630 := &yymv3628
				yym3631 := z.DecBinary()
				_ = yym3631
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3630) {
				} else if !yym3631 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3630)
				} else {
					z.DecFallback(yyv3630, false)
				}
			}

			if yyv3628 != nil {
				yyv3628[yymk3628] = yymv3628
			}
		}
	} else if yyl3628 < 0 {
		for yyj3628 := 0; !r.CheckBreak(); yyj3628++ {
			if yyj3628 > 0 {
				r.ReadMapEntrySeparator()
			}
			var yymk3628 ResourceName
			if r.TryDecodeAsNil() {
				yymk3628 = ""
			} else {
				yymk3628 = ResourceName(r.DecodeString())
			}

			r.ReadMapKVSeparator()
			yymv3628 := yyv3628[yymk3628]
			if r.TryDecodeAsNil() {
				yymv3628 = pkg3_resource.Quantity{}
			} else {
				yyv3633 := &yymv3628
				yym3634 := z.DecBinary()
				_ = yym3634
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3633) {
				} else if !yym3634 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3633)
				} else {
					z.DecFallback(yyv3633, false)
				}
			}

			if yyv3628 != nil {
				yyv3628[yymk3628] = yymv3628
			}
		}
		r.ReadMapEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3635 := !z.EncBinary()
	if yys3635 {
		for yyi3635, yyv3635 := range v {
			if yyi3635 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3636 := &yyv3635
			yy3636.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3635 := range v {
			yy3637 := &yyv3635
			yy3637.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3638 := *v
	yyh3638, yyl3638 := z.DecSliceHelperStart()

	var yyc3638 bool
	_ = yyc3638

	if yyv3638 == nil {
		if yyl3638 <= 0 {
			yyv3638 = make([]ComponentCondition, 0)
		} else {
			yyv3638 = make([]ComponentCondition, yyl3638)
		}
		yyc3638 = true
	}

	if yyl3638 == 0 {
		if len(yyv3638) != 0 {
			yyv3638 = yyv3638[:0]
			yyc3638 = true
		}
	} else if yyl3638 > 0 {

		yyn3638 := yyl3638
		if yyl3638 > cap(yyv3638) {
			yyv3638 = make([]ComponentCondition, yyl3638, yyl3638)
			yyc3638 = true

		} else if yyl3638 != len(yyv3638) {
			yyv3638 = yyv3638[:yyl3638]
			yyc3638 = true
		}
		yyj3638 := 0
		for ; yyj3638 < yyn3638; yyj3638++ {
			if r.TryDecodeAsNil() {
				yyv3638[yyj3638] = ComponentCondition{}
			} else {
				yyv3639 := &yyv3638[yyj3638]
				yyv3639.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3638 := 0; !r.CheckBreak(); yyj3638++ {
			if yyj3638 >= len(yyv3638) {
				yyv3638 = append(yyv3638, ComponentCondition{}) // var yyz3638 ComponentCondition
				yyc3638 = true
			}
			if yyj3638 > 0 {
				yyh3638.Sep(yyj3638)
			}

			if yyj3638 < len(yyv3638) {
				if r.TryDecodeAsNil() {
					yyv3638[yyj3638] = ComponentCondition{}
				} else {
					yyv3640 := &yyv3638[yyj3638]
					yyv3640.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3638.End()
	}
	if yyc3638 {
		*v = yyv3638
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3641 := !z.EncBinary()
	if yys3641 {
		for yyi3641, yyv3641 := range v {
			if yyi3641 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3642 := &yyv3641
			yy3642.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3641 := range v {
			yy3643 := &yyv3641
			yy3643.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3644 := *v
	yyh3644, yyl3644 := z.DecSliceHelperStart()

	var yyc3644 bool
	_ = yyc3644

	if yyv3644 == nil {
		if yyl3644 <= 0 {
			yyv3644 = make([]PersistentVolumeClaim, 0)
		} else {
			yyv3644 = make([]PersistentVolumeClaim, yyl3644)
		}
		yyc3644 = true
	}

	if yyl3644 == 0 {
		if len(yyv3644) != 0 {
			yyv3644 = yyv3644[:0]
			yyc3644 = true
		}
	} else if yyl3644 > 0 {

		yyn3644 := yyl3644
		if yyl3644 > cap(yyv3644) {
			yyv3644 = make([]PersistentVolumeClaim, yyl3644, yyl3644)
			yyc3644 = true

		} else if yyl3644 != len(yyv3644) {
			yyv3644 = yyv3644[:yyl3644]
			yyc3644 = true
		}
		yyj3644 := 0
		for ; yyj3644 < yyn3644; yyj3644++ {
			if r.TryDecodeAsNil() {
				yyv3644[yyj3644] = PersistentVolumeClaim{}
			} else {
				yyv3645 := &yyv3644[yyj3644]
				yyv3645.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3644 := 0; !r.CheckBreak(); yyj3644++ {
			if yyj3644 >= len(yyv3644) {
				yyv3644 = append(yyv3644, PersistentVolumeClaim{}) // var yyz3644 PersistentVolumeClaim
				yyc3644 = true
			}
			if yyj3644 > 0 {
				yyh3644.Sep(yyj3644)
			}

			if yyj3644 < len(yyv3644) {
				if r.TryDecodeAsNil() {
					yyv3644[yyj3644] = PersistentVolumeClaim{}
				} else {
					yyv3646 := &yyv3644[yyj3644]
					yyv3646.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3644.End()
	}
	if yyc3644 {
		*v = yyv3644
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3647 := !z.EncBinary()
	if yys3647 {
		for yyi3647, yyv3647 := range v {
			if yyi3647 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3648 := &yyv3647
			yy3648.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3647 := range v {
			yy3649 := &yyv3647
			yy3649.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3650 := *v
	yyh3650, yyl3650 := z.DecSliceHelperStart()

	var yyc3650 bool
	_ = yyc3650

	if yyv3650 == nil {
		if yyl3650 <= 0 {
			yyv3650 = make([]LocalObjectReference, 0)
		} else {
			yyv3650 = make([]LocalObjectReference, yyl3650)
		}
		yyc3650 = true
	}

	if yyl3650 == 0 {
		if len(yyv3650) != 0 {
			yyv3650 = yyv3650[:0]
			yyc3650 = true
		}
	} else if yyl3650 > 0 {

		yyn3650 := yyl3650
		if yyl3650 > cap(yyv3650) {
			yyv3650 = make([]LocalObjectReference, yyl3650, yyl3650)
			yyc3650 = true

		} else if yyl3650 != len(yyv3650) {
			yyv3650 = yyv3650[:yyl3650]
			yyc3650 = true
		}
		yyj3650 := 0
		for ; yyj3650 < yyn3650; yyj3650++ {
			if r.TryDecodeAsNil() {
				yyv3650[yyj3650] = LocalObjectReference{}
			} else {
				yyv3651 := &yyv3650[yyj3650]
				yyv3651.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3650 := 0; !r.CheckBreak(); yyj3650++ {
			if yyj3650 >= len(yyv3650) {
				yyv3650 = append(yyv3650, LocalObjectReference{}) // var yyz3650 LocalObjectReference
				yyc3650 = true
			}
			if yyj3650 > 0 {
				yyh3650.Sep(yyj3650)
			}

			if yyj3650 < len(yyv3650) {
				if r.TryDecodeAsNil() {
					yyv3650[yyj3650] = LocalObjectReference{}
				} else {
					yyv3652 := &yyv3650[yyj3650]
					yyv3652.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3650.End()
	}
	if yyc3650 {
		*v = yyv3650
	}

}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3653 := !z.EncBinary()
	if yys3653 {
		for yyi3653, yyv3653 := range v {
			if yyi3653 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			if yyv3653 == nil {
				r.EncodeNil()
			} else {
				yym3654 := z.EncBinary()
				_ = yym3654
				if false {
				} else if z.HasExtensions() && z.EncExt(yyv3653) {
				} else {
					z.EncFallback(yyv3653)
				}
			}
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3653 := range v {
			if yyv3653 == nil {
				r.EncodeNil()
			} else {
				yym3655 := z.EncBinary()
				_ = yym3655
				if false {
				} else if z.HasExtensions() && z.EncExt(yyv3653) {
				} else {
					z.EncFallback(yyv3653)
				}
			}
		}
	}
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3656 := *v
	yyh3656, yyl3656 := z.DecSliceHelperStart()

	var yyc3656 bool
	_ = yyc3656

	if yyv3656 == nil {
		if yyl3656 <= 0 {
			yyv3656 = make([]pkg7_runtime.Object, 0)
		} else {
			yyv3656 = make([]pkg7_runtime.Object, yyl3656)
		}
		yyc3656 = true
	}

	if yyl3656 == 0 {
		if len(yyv3656) != 0 {
			yyv3656 = yyv3656[:0]
			yyc3656 = true
		}
	} else if yyl3656 > 0 {

		yyn3656 := yyl3656
		if yyl3656 > cap(yyv3656) {
			yyv3656 = make([]pkg7_runtime.Object, yyl3656, yyl3656)
			yyc3656 = true

		} else if yyl3656 != len(yyv3656) {
			yyv3656 = yyv3656[:yyl3656]
			yyc3656 = true
		}
		yyj3656 := 0
		for ; yyj3656 < yyn3656; yyj3656++ {
			if r.TryDecodeAsNil() {
				yyv3656[yyj3656] = nil
			} else {
				yyv3657 := &yyv3656[yyj3656]
				yym3658 := z.DecBinary()
				_ = yym3658
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3657) {
				} else {
					z.DecFallback(yyv3657, true)
				}
			}

		}

	} else {
		for yyj3656 := 0; !r.CheckBreak(); yyj3656++ {
			if yyj3656 >= len(yyv3656) {
				yyv3656 = append(yyv3656, nil) // var yyz3656 pkg7_runtime.Object
				yyc3656 = true
			}
			if yyj3656 > 0 {
				yyh3656.Sep(yyj3656)
			}

			if yyj3656 < len(yyv3656) {
				if r.TryDecodeAsNil() {
					yyv3656[yyj3656] = nil
				} else {
					yyv3659 := &yyv3656[yyj3656]
					yym3660 := z.DecBinary()
					_ = yym3660
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3659) {
					} else {
						z.DecFallback(yyv3659, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3656.End()
	}
	if yyc3656 {
		*v = yyv3656
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	yys3661 := !z.EncBinary()
	yyj3661 := 0
	if yys3661 {
		for yyk3661, yyv3661 := range v {
			if yyj3661 > 0 {
				r.EncodeMapEntrySeparator()
			}
			yym3662 := z.EncBinary()
			_ = yym3662
			if false {
			} else {
				r.EncodeString(codecSelferC_UTF81234, string(yyk3661))
			}
			r.EncodeMapKVSeparator()
			if yyv3661 == nil {
				r.EncodeNil()
			} else {
				yym3663 := z.EncBinary()
				_ = yym3663
				if false {
				} else {
					r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3661))
				}
			}
			yyj3661++
		}
		r.EncodeMapEnd()
	} else {
		for yyk3661, yyv3661 := range v {
			yym3664 := z.EncBinary()
			_ = yym3664
			if false {
			} else {
				r.EncodeString(codecSelferC_UTF81234, string(yyk3661))
			}
			if yyv3661 == nil {
				r.EncodeNil()
			} else {
				yym3665 := z.EncBinary()
				_ = yym3665
				if false {
				} else {
					r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3661))
				}
			}
		}
	}
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3666 := *v
	yyl3666 := r.ReadMapStart()
	if yyv3666 == nil {
		if yyl3666 > 0 {
			yyv3666 = make(map[string][]uint8, yyl3666)
		} else {
			yyv3666 = make(map[string][]uint8) // supports indefinite-length, etc
		}
		*v = yyv3666
	}
	if yyl3666 > 0 {
		for yyj3666 := 0; yyj3666 < yyl3666; yyj3666++ {
			var yymk3666 string
			if r.TryDecodeAsNil() {
				yymk3666 = ""
			} else {
				yymk3666 = string(r.DecodeString())
			}

			yymv3666 := yyv3666[yymk3666]
			if r.TryDecodeAsNil() {
				yymv3666 = nil
			} else {
				yyv3668 := &yymv3666
				yym3669 := z.DecBinary()
				_ = yym3669
				if false {
				} else {
					*yyv3668 = r.DecodeBytes(*(*[]byte)(yyv3668), false, false)
				}
			}

			if yyv3666 != nil {
				yyv3666[yymk3666] = yymv3666
			}
		}
	} else if yyl3666 < 0 {
		for yyj3666 := 0; !r.CheckBreak(); yyj3666++ {
			if yyj3666 > 0 {
				r.ReadMapEntrySeparator()
			}
			var yymk3666 string
			if r.TryDecodeAsNil() {
				yymk3666 = ""
			} else {
				yymk3666 = string(r.DecodeString())
			}

			r.ReadMapKVSeparator()
			yymv3666 := yyv3666[yymk3666]
			if r.TryDecodeAsNil() {
				yymv3666 = nil
			} else {
				yyv3671 := &yymv3666
				yym3672 := z.DecBinary()
				_ = yym3672
				if false {
				} else {
					*yyv3671 = r.DecodeBytes(*(*[]byte)(yyv3671), false, false)
				}
			}

			if yyv3666 != nil {
				yyv3666[yymk3666] = yymv3666
			}
		}
		r.ReadMapEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3673 := !z.EncBinary()
	if yys3673 {
		for yyi3673, yyv3673 := range v {
			if yyi3673 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy3674 := &yyv3673
			yy3674.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3673 := range v {
			yy3675 := &yyv3673
			yy3675.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3676 := *v
	yyh3676, yyl3676 := z.DecSliceHelperStart()

	var yyc3676 bool
	_ = yyc3676

	if yyv3676 == nil {
		if yyl3676 <= 0 {
			yyv3676 = make([]ContainerPort, 0)
		} else {
			yyv3676 = make([]ContainerPort, yyl3676)
		}
		yyc3676 = true
	}

	if yyl3676 == 0 {
		if len(yyv3676) != 0 {
			yyv3676 = yyv3676[:0]
			yyc3676 = true
		}
	} else if yyl3676 > 0 {

		yyn3676 := yyl3676
		if yyl3676 > cap(yyv3676) {
			yyv3676 = make([]ContainerPort, yyl3676, yyl3676)
			yyc3676 = true

		} else if yyl3676 != len(yyv3676) {
			yyv3676 = yyv3676[:yyl3676]
			yyc3676 = true
		}
		yyj3676 := 0
		for ; yyj3676 < yyn3676; yyj3676++ {
			if r.TryDecodeAsNil() {
				yyv3676[yyj3676] = ContainerPort{}
			} else {
				yyv3677 := &yyv3676[yyj3676]
				yyv3677.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj3676 := 0; !r.CheckBreak(); yyj3676++ {
			if yyj3676 >= len(yyv3676) {
				yyv3676 = append(yyv3676, ContainerPort{}) // var yyz3676 ContainerPort
				yyc3676 = true
			}
			if yyj3676 > 0 {
				yyh3676.Sep(yyj3676)
			}

			if yyj3676 < len(yyv3676) {
				if r.TryDecodeAsNil() {
					yyv3676[yyj3676] = ContainerPort{}
				} else {
					yyv3678 := &yyv3676[yyj3676]
					yyv3678.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3676.End()
	}
	if yyc3676 {
		*v = yyv3676
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys3679 := !z.EncBinary()
	if yys3679 {
		for yyi3679, yyv3679 := range v {
			if yyi3679 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yyv3679.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv3679 := range v {
			yyv3679.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3680 := *v
	yyh3680, yyl3680 := z.DecSliceHelperStart()

	var yyc3680 bool
	_ = yyc3680

	if yyv3680 == nil {
		if yyl3680 <= 0 {
			yyv3680 = make([]FinalizerName, 0)
		} else {
			yyv3680 = make([]FinalizerName, yyl3680)
		}
		yyc3680 = true
	}

	if yyl3680 == 0 {
		if len(yyv3680) != 0 {
			yyv3680 = yyv3680[:0]
			yyc3680 = true
		}
	} else if yyl3680 > 0 {

		yyn3680 := yyl3680
		if yyl3680 > cap(yyv3680) {

			yyv23680 := yyv3680
			yyv3680 = make([]FinalizerName, yyl3680, yyl3680)
			if len(yyv3680) > 0 {
				copy(yyv3680, yyv23680[:cap(yyv23680)])
			}
			yyc3680 = true

		} else if yyl3680 != len(yyv3680) {
			yyv3680 = yyv3680[:yyl3680]
			yyc3680 = true
		}
		yyj3680 := 0
		for ; yyj3680 < yyn3680; yyj3680++ {
			if r.TryDecodeAsNil() {
				yyv3680[yyj3680] = ""
			} else {
				yyv3680[yyj3680] = FinalizerName(r.DecodeString())
			}

		}

	} else {
		for yyj3680 := 0; !r.CheckBreak(); yyj3680++ {
			if yyj3680 >= len(yyv3680) {
				yyv3680 = append(yyv3680, "") // var yyz3680 FinalizerName
				yyc3680 = true
			}
			if yyj3680 > 0 {
				yyh3680.Sep(yyj3680)
			}

			if yyj3680 < len(yyv3680) {
				if r.TryDecodeAsNil() {
					yyv3680[yyj3680] = ""
				} else {
					yyv3680[yyj3680] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3680.End()
	}
	if yyc3680 {
		*v = yyv3680
	}

}
