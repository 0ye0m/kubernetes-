/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg7_fields "k8s.io/kubernetes/pkg/fields"
	pkg6_labels "k8s.io/kubernetes/pkg/labels"
	pkg8_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg7_fields.Selector
		var v3 pkg6_labels.Selector
		var v4 pkg8_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg5_intstr.IntOrString
		var v7 pkg4_inf.Dec
		var v8 time.Time
		_, _, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7, v8
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	if !yyhl45 {
		r.ReadEnd()
	}
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	r.ReadEnd()
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				var yynn82 int = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	if !yyhl104 {
		r.ReadEnd()
	}
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				var yynn141 int = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
			}
			if yyr141 || yy2arr141 {
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yysep141 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	if !yyhl160 {
		r.ReadEnd()
	}
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [11]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[0] = x.GCEPersistentDisk != nil
			yyq195[1] = x.AWSElasticBlockStore != nil
			yyq195[2] = x.HostPath != nil
			yyq195[3] = x.Glusterfs != nil
			yyq195[4] = x.NFS != nil
			yyq195[5] = x.RBD != nil
			yyq195[6] = x.ISCSI != nil
			yyq195[7] = x.Cinder != nil
			yyq195[8] = x.CephFS != nil
			yyq195[9] = x.FC != nil
			yyq195[10] = x.Flocker != nil
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(11)
			} else {
				var yynn195 int = 0
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
			}
			if yyr195 || yy2arr195 {
				if yyq195[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[0] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[1] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[3] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[4] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[5] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[6] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[7] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[9] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				if yyq195[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[10] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yysep195 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		switch yys209 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	if !yyhl209 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym233 := z.EncBinary()
		_ = yym233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep234 := !z.EncBinary()
			yy2arr234 := z.EncBasicHandle().StructToArray
			var yyq234 [2]bool
			_, _, _ = yysep234, yyq234, yy2arr234
			const yyr234 bool = false
			yyq234[1] = x.ReadOnly != false
			if yyr234 || yy2arr234 {
				r.EncodeArrayStart(2)
			} else {
				var yynn234 int = 1
				for _, b := range yyq234 {
					if b {
						yynn234++
					}
				}
				r.EncodeMapStart(yynn234)
			}
			if yyr234 || yy2arr234 {
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				yym237 := z.EncBinary()
				_ = yym237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr234 || yy2arr234 {
				if yyq234[1] {
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq234[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep234 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		switch yys243 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	if !yyhl243 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				var yynn250 int = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
			}
			if yyr250 || yy2arr250 {
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yysep250 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	if !yyhl268 {
		r.ReadEnd()
	}
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				var yynn281 int = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
			}
			if yyr281 || yy2arr281 {
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yysep281 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	if !yyhl301 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				var yynn338 int = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
			}
			if yyr338 || yy2arr338 {
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yysep338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	if !yyhl348 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				var yynn357 int = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
			}
			if yyr357 || yy2arr357 {
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yysep357 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	if !yyhl374 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				var yynn389 int = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
			}
			if yyr389 || yy2arr389 {
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yysep389 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	if !yyhl407 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				var yynn420 int = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
			}
			if yyr420 || yy2arr420 {
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yysep420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	if !yyhl464 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	r.ReadEnd()
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				var yynn475 int = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
			}
			if yyr475 || yy2arr475 {
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep475 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	if !yyhl483 {
		r.ReadEnd()
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				var yynn500 int = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
			}
			if yyr500 || yy2arr500 {
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep500 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	if !yyhl506 {
		r.ReadEnd()
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	r.ReadEnd()
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				var yynn511 int = 1
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				x.Medium.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("medium"))
				x.Medium.CodecEncodeSelf(e)
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	if !yyhl515 {
		r.ReadEnd()
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	r.ReadEnd()
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [4]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[1] = x.FSType != ""
			yyq524[2] = x.Partition != 0
			yyq524[3] = x.ReadOnly != false
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(4)
			} else {
				var yynn524 int = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
			}
			if yyr524 || yy2arr524 {
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[1] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[2] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq524[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr524 || yy2arr524 {
				if yyq524[3] {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq524[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep524 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		switch yys539 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	if !yyhl539 {
		r.ReadEnd()
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	r.ReadEnd()
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [5]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.TargetPortal != ""
			yyq550[1] = x.IQN != ""
			yyq550[2] = x.Lun != 0
			yyq550[3] = x.FSType != ""
			yyq550[4] = x.ReadOnly != false
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(5)
			} else {
				var yynn550 int = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
			}
			if yyr550 || yy2arr550 {
				if yyq550[0] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[1] {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[1] {
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[2] {
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq550[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[3] {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[3] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr550 || yy2arr550 {
				if yyq550[4] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq550[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep550 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		switch yys568 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	if !yyhl568 {
		r.ReadEnd()
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj574 int
	var yyb574 bool
	var yyhl574 bool = l >= 0
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj574++
		if yyhl574 {
			yyb574 = yyj574 > l
		} else {
			yyb574 = r.CheckBreak()
		}
		if yyb574 {
			break
		}
		z.DecStructFieldNotFound(yyj574-1, "")
	}
	r.ReadEnd()
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym580 := z.EncBinary()
		_ = yym580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep581 := !z.EncBinary()
			yy2arr581 := z.EncBasicHandle().StructToArray
			var yyq581 [4]bool
			_, _, _ = yysep581, yyq581, yy2arr581
			const yyr581 bool = false
			yyq581[3] = x.ReadOnly != false
			if yyr581 || yy2arr581 {
				r.EncodeArrayStart(4)
			} else {
				var yynn581 int = 3
				for _, b := range yyq581 {
					if b {
						yynn581++
					}
				}
				r.EncodeMapStart(yynn581)
			}
			if yyr581 || yy2arr581 {
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr581 || yy2arr581 {
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy586 := *x.Lun
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeInt(int64(yy586))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy588 := *x.Lun
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						r.EncodeInt(int64(yy588))
					}
				}
			}
			if yyr581 || yy2arr581 {
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr581 || yy2arr581 {
				if yyq581[3] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq581[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep581 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		switch yys598 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv599 := &x.TargetWWNs
				yym600 := z.DecBinary()
				_ = yym600
				if false {
				} else {
					z.F.DecSliceStringX(yyv599, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	if !yyhl598 {
		r.ReadEnd()
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv606 := &x.TargetWWNs
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			z.F.DecSliceStringX(yyv606, false, d)
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym609 := z.DecBinary()
		_ = yym609
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	r.ReadEnd()
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym612 := z.EncBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep613 := !z.EncBinary()
			yy2arr613 := z.EncBasicHandle().StructToArray
			var yyq613 [4]bool
			_, _, _ = yysep613, yyq613, yy2arr613
			const yyr613 bool = false
			yyq613[1] = x.FSType != ""
			yyq613[2] = x.Partition != 0
			yyq613[3] = x.ReadOnly != false
			if yyr613 || yy2arr613 {
				r.EncodeArrayStart(4)
			} else {
				var yynn613 int = 1
				for _, b := range yyq613 {
					if b {
						yynn613++
					}
				}
				r.EncodeMapStart(yynn613)
			}
			if yyr613 || yy2arr613 {
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym616 := z.EncBinary()
				_ = yym616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[1] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[2] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq613[2] {
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr613 || yy2arr613 {
				if yyq613[3] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq613[3] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep613 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl627 := r.ReadMapStart()
			if yyl627 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl627, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl627 := r.ReadArrayStart()
			if yyl627 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys628Slc
	var yyhl628 bool = l >= 0
	for yyj628 := 0; ; yyj628++ {
		if yyhl628 {
			if yyj628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys628Slc = r.DecodeBytes(yys628Slc, true, true)
		yys628 := string(yys628Slc)
		switch yys628 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys628)
		} // end switch yys628
	} // end for yyj628
	if !yyhl628 {
		r.ReadEnd()
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	r.ReadEnd()
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym638 := z.EncBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep639 := !z.EncBinary()
			yy2arr639 := z.EncBasicHandle().StructToArray
			var yyq639 [2]bool
			_, _, _ = yysep639, yyq639, yy2arr639
			const yyr639 bool = false
			if yyr639 || yy2arr639 {
				r.EncodeArrayStart(2)
			} else {
				var yynn639 int = 2
				for _, b := range yyq639 {
					if b {
						yynn639++
					}
				}
				r.EncodeMapStart(yynn639)
			}
			if yyr639 || yy2arr639 {
				yym641 := z.EncBinary()
				_ = yym641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				yym642 := z.EncBinary()
				_ = yym642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr639 || yy2arr639 {
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("revision"))
				yym645 := z.EncBinary()
				_ = yym645
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
				}
			}
			if yysep639 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym646 := z.DecBinary()
	_ = yym646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl647 := r.ReadMapStart()
			if yyl647 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl647, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl647 := r.ReadArrayStart()
			if yyl647 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl647, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys648Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys648Slc
	var yyhl648 bool = l >= 0
	for yyj648 := 0; ; yyj648++ {
		if yyhl648 {
			if yyj648 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys648Slc = r.DecodeBytes(yys648Slc, true, true)
		yys648 := string(yys648Slc)
		switch yys648 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys648)
		} // end switch yys648
	} // end for yyj648
	if !yyhl648 {
		r.ReadEnd()
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj651 int
	var yyb651 bool
	var yyhl651 bool = l >= 0
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	for {
		yyj651++
		if yyhl651 {
			yyb651 = yyj651 > l
		} else {
			yyb651 = r.CheckBreak()
		}
		if yyb651 {
			break
		}
		z.DecStructFieldNotFound(yyj651-1, "")
	}
	r.ReadEnd()
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym654 := z.EncBinary()
		_ = yym654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep655 := !z.EncBinary()
			yy2arr655 := z.EncBasicHandle().StructToArray
			var yyq655 [1]bool
			_, _, _ = yysep655, yyq655, yy2arr655
			const yyr655 bool = false
			if yyr655 || yy2arr655 {
				r.EncodeArrayStart(1)
			} else {
				var yynn655 int = 1
				for _, b := range yyq655 {
					if b {
						yynn655++
					}
				}
				r.EncodeMapStart(yynn655)
			}
			if yyr655 || yy2arr655 {
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				yym658 := z.EncBinary()
				_ = yym658
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yysep655 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym659 := z.DecBinary()
	_ = yym659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl660 := r.ReadMapStart()
			if yyl660 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl660, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl660 := r.ReadArrayStart()
			if yyl660 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys661Slc
	var yyhl661 bool = l >= 0
	for yyj661 := 0; ; yyj661++ {
		if yyhl661 {
			if yyj661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys661Slc = r.DecodeBytes(yys661Slc, true, true)
		yys661 := string(yys661Slc)
		switch yys661 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys661)
		} // end switch yys661
	} // end for yyj661
	if !yyhl661 {
		r.ReadEnd()
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj663 int
	var yyb663 bool
	var yyhl663 bool = l >= 0
	yyj663++
	if yyhl663 {
		yyb663 = yyj663 > l
	} else {
		yyb663 = r.CheckBreak()
	}
	if yyb663 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj663++
		if yyhl663 {
			yyb663 = yyj663 > l
		} else {
			yyb663 = r.CheckBreak()
		}
		if yyb663 {
			break
		}
		z.DecStructFieldNotFound(yyj663-1, "")
	}
	r.ReadEnd()
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym665 := z.EncBinary()
		_ = yym665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep666 := !z.EncBinary()
			yy2arr666 := z.EncBasicHandle().StructToArray
			var yyq666 [3]bool
			_, _, _ = yysep666, yyq666, yy2arr666
			const yyr666 bool = false
			yyq666[2] = x.ReadOnly != false
			if yyr666 || yy2arr666 {
				r.EncodeArrayStart(3)
			} else {
				var yynn666 int = 2
				for _, b := range yyq666 {
					if b {
						yynn666++
					}
				}
				r.EncodeMapStart(yynn666)
			}
			if yyr666 || yy2arr666 {
				yym668 := z.EncBinary()
				_ = yym668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				yym669 := z.EncBinary()
				_ = yym669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr666 || yy2arr666 {
				yym671 := z.EncBinary()
				_ = yym671
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym672 := z.EncBinary()
				_ = yym672
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr666 || yy2arr666 {
				if yyq666[2] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq666[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep666 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym676 := z.DecBinary()
	_ = yym676
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl677 := r.ReadMapStart()
			if yyl677 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl677, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl677 := r.ReadArrayStart()
			if yyl677 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl677, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys678Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys678Slc
	var yyhl678 bool = l >= 0
	for yyj678 := 0; ; yyj678++ {
		if yyhl678 {
			if yyj678 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys678Slc = r.DecodeBytes(yys678Slc, true, true)
		yys678 := string(yys678Slc)
		switch yys678 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys678)
		} // end switch yys678
	} // end for yyj678
	if !yyhl678 {
		r.ReadEnd()
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj682 int
	var yyb682 bool
	var yyhl682 bool = l >= 0
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj682++
		if yyhl682 {
			yyb682 = yyj682 > l
		} else {
			yyb682 = r.CheckBreak()
		}
		if yyb682 {
			break
		}
		z.DecStructFieldNotFound(yyj682-1, "")
	}
	r.ReadEnd()
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym686 := z.EncBinary()
		_ = yym686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep687 := !z.EncBinary()
			yy2arr687 := z.EncBasicHandle().StructToArray
			var yyq687 [3]bool
			_, _, _ = yysep687, yyq687, yy2arr687
			const yyr687 bool = false
			yyq687[2] = x.ReadOnly != false
			if yyr687 || yy2arr687 {
				r.EncodeArrayStart(3)
			} else {
				var yynn687 int = 2
				for _, b := range yyq687 {
					if b {
						yynn687++
					}
				}
				r.EncodeMapStart(yynn687)
			}
			if yyr687 || yy2arr687 {
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				yym690 := z.EncBinary()
				_ = yym690
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr687 || yy2arr687 {
				yym692 := z.EncBinary()
				_ = yym692
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym693 := z.EncBinary()
				_ = yym693
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr687 || yy2arr687 {
				if yyq687[2] {
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq687[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep687 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym697 := z.DecBinary()
	_ = yym697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl698 := r.ReadMapStart()
			if yyl698 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl698, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl698 := r.ReadArrayStart()
			if yyl698 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys699Slc
	var yyhl699 bool = l >= 0
	for yyj699 := 0; ; yyj699++ {
		if yyhl699 {
			if yyj699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys699Slc = r.DecodeBytes(yys699Slc, true, true)
		yys699 := string(yys699Slc)
		switch yys699 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys699)
		} // end switch yys699
	} // end for yyj699
	if !yyhl699 {
		r.ReadEnd()
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	r.ReadEnd()
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym707 := z.EncBinary()
		_ = yym707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep708 := !z.EncBinary()
			yy2arr708 := z.EncBasicHandle().StructToArray
			var yyq708 [8]bool
			_, _, _ = yysep708, yyq708, yy2arr708
			const yyr708 bool = false
			yyq708[2] = x.FSType != ""
			yyq708[7] = x.ReadOnly != false
			if yyr708 || yy2arr708 {
				r.EncodeArrayStart(8)
			} else {
				var yynn708 int = 6
				for _, b := range yyq708 {
					if b {
						yynn708++
					}
				}
				r.EncodeMapStart(yynn708)
			}
			if yyr708 || yy2arr708 {
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym711 := z.EncBinary()
					_ = yym711
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr708 || yy2arr708 {
				yym713 := z.EncBinary()
				_ = yym713
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym714 := z.EncBinary()
				_ = yym714
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr708 || yy2arr708 {
				if yyq708[2] {
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq708[2] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr708 || yy2arr708 {
				yym719 := z.EncBinary()
				_ = yym719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				yym720 := z.EncBinary()
				_ = yym720
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr708 || yy2arr708 {
				yym722 := z.EncBinary()
				_ = yym722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				yym723 := z.EncBinary()
				_ = yym723
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr708 || yy2arr708 {
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				yym726 := z.EncBinary()
				_ = yym726
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr708 || yy2arr708 {
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr708 || yy2arr708 {
				if yyq708[7] {
					yym729 := z.EncBinary()
					_ = yym729
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq708[7] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep708 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym731 := z.DecBinary()
	_ = yym731
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl732 := r.ReadMapStart()
			if yyl732 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl732, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl732 := r.ReadArrayStart()
			if yyl732 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl732, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys733Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys733Slc
	var yyhl733 bool = l >= 0
	for yyj733 := 0; ; yyj733++ {
		if yyhl733 {
			if yyj733 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys733Slc = r.DecodeBytes(yys733Slc, true, true)
		yys733 := string(yys733Slc)
		switch yys733 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv734 := &x.CephMonitors
				yym735 := z.DecBinary()
				_ = yym735
				if false {
				} else {
					z.F.DecSliceStringX(yyv734, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys733)
		} // end switch yys733
	} // end for yyj733
	if !yyhl733 {
		r.ReadEnd()
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj743 int
	var yyb743 bool
	var yyhl743 bool = l >= 0
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv744 := &x.CephMonitors
		yym745 := z.DecBinary()
		_ = yym745
		if false {
		} else {
			z.F.DecSliceStringX(yyv744, false, d)
		}
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj743++
		if yyhl743 {
			yyb743 = yyj743 > l
		} else {
			yyb743 = r.CheckBreak()
		}
		if yyb743 {
			break
		}
		z.DecStructFieldNotFound(yyj743-1, "")
	}
	r.ReadEnd()
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [3]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			yyq754[1] = x.FSType != ""
			yyq754[2] = x.ReadOnly != false
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(3)
			} else {
				var yynn754 int = 1
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
			}
			if yyr754 || yy2arr754 {
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[1] {
					yym759 := z.EncBinary()
					_ = yym759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq754[1] {
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr754 || yy2arr754 {
				if yyq754[2] {
					yym762 := z.EncBinary()
					_ = yym762
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq754[2] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep754 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym764 := z.DecBinary()
	_ = yym764
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl765 := r.ReadMapStart()
			if yyl765 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl765, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl765 := r.ReadArrayStart()
			if yyl765 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl765, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys766Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys766Slc
	var yyhl766 bool = l >= 0
	for yyj766 := 0; ; yyj766++ {
		if yyhl766 {
			if yyj766 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys766Slc = r.DecodeBytes(yys766Slc, true, true)
		yys766 := string(yys766Slc)
		switch yys766 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys766)
		} // end switch yys766
	} // end for yyj766
	if !yyhl766 {
		r.ReadEnd()
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj770 int
	var yyb770 bool
	var yyhl770 bool = l >= 0
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj770++
	if yyhl770 {
		yyb770 = yyj770 > l
	} else {
		yyb770 = r.CheckBreak()
	}
	if yyb770 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj770++
		if yyhl770 {
			yyb770 = yyj770 > l
		} else {
			yyb770 = r.CheckBreak()
		}
		if yyb770 {
			break
		}
		z.DecStructFieldNotFound(yyj770-1, "")
	}
	r.ReadEnd()
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym774 := z.EncBinary()
		_ = yym774
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep775 := !z.EncBinary()
			yy2arr775 := z.EncBasicHandle().StructToArray
			var yyq775 [5]bool
			_, _, _ = yysep775, yyq775, yy2arr775
			const yyr775 bool = false
			yyq775[1] = x.User != ""
			yyq775[2] = x.SecretFile != ""
			yyq775[3] = x.SecretRef != nil
			yyq775[4] = x.ReadOnly != false
			if yyr775 || yy2arr775 {
				r.EncodeArrayStart(5)
			} else {
				var yynn775 int = 1
				for _, b := range yyq775 {
					if b {
						yynn775++
					}
				}
				r.EncodeMapStart(yynn775)
			}
			if yyr775 || yy2arr775 {
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym778 := z.EncBinary()
					_ = yym778
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[1] {
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq775[1] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym781 := z.EncBinary()
					_ = yym781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[2] {
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq775[2] {
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq775[3] {
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr775 || yy2arr775 {
				if yyq775[4] {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq775[4] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yysep775 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym789 := z.DecBinary()
	_ = yym789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl790 := r.ReadMapStart()
			if yyl790 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl790, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl790 := r.ReadArrayStart()
			if yyl790 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys791Slc
	var yyhl791 bool = l >= 0
	for yyj791 := 0; ; yyj791++ {
		if yyhl791 {
			if yyj791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys791Slc = r.DecodeBytes(yys791Slc, true, true)
		yys791 := string(yys791Slc)
		switch yys791 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv792 := &x.Monitors
				yym793 := z.DecBinary()
				_ = yym793
				if false {
				} else {
					z.F.DecSliceStringX(yyv792, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys791)
		} // end switch yys791
	} // end for yyj791
	if !yyhl791 {
		r.ReadEnd()
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj798 int
	var yyb798 bool
	var yyhl798 bool = l >= 0
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv799 := &x.Monitors
		yym800 := z.DecBinary()
		_ = yym800
		if false {
		} else {
			z.F.DecSliceStringX(yyv799, false, d)
		}
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj798++
		if yyhl798 {
			yyb798 = yyj798 > l
		} else {
			yyb798 = r.CheckBreak()
		}
		if yyb798 {
			break
		}
		z.DecStructFieldNotFound(yyj798-1, "")
	}
	r.ReadEnd()
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym805 := z.EncBinary()
		_ = yym805
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep806 := !z.EncBinary()
			yy2arr806 := z.EncBasicHandle().StructToArray
			var yyq806 [1]bool
			_, _, _ = yysep806, yyq806, yy2arr806
			const yyr806 bool = false
			if yyr806 || yy2arr806 {
				r.EncodeArrayStart(1)
			} else {
				var yynn806 int = 1
				for _, b := range yyq806 {
					if b {
						yynn806++
					}
				}
				r.EncodeMapStart(yynn806)
			}
			if yyr806 || yy2arr806 {
				yym808 := z.EncBinary()
				_ = yym808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yysep806 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym810 := z.DecBinary()
	_ = yym810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl811 := r.ReadMapStart()
			if yyl811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl811, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl811 := r.ReadArrayStart()
			if yyl811 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys812Slc
	var yyhl812 bool = l >= 0
	for yyj812 := 0; ; yyj812++ {
		if yyhl812 {
			if yyj812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys812Slc = r.DecodeBytes(yys812Slc, true, true)
		yys812 := string(yys812Slc)
		switch yys812 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys812)
		} // end switch yys812
	} // end for yyj812
	if !yyhl812 {
		r.ReadEnd()
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [1]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = len(x.Items) != 0
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(1)
			} else {
				var yynn817 int = 0
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
			}
			if yyr817 || yy2arr817 {
				if yyq817[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym819 := z.EncBinary()
						_ = yym819
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq817[0] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym820 := z.EncBinary()
						_ = yym820
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yysep817 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym821 := z.DecBinary()
	_ = yym821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl822 := r.ReadMapStart()
			if yyl822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl822, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl822 := r.ReadArrayStart()
			if yyl822 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys823Slc
	var yyhl823 bool = l >= 0
	for yyj823 := 0; ; yyj823++ {
		if yyhl823 {
			if yyj823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys823Slc = r.DecodeBytes(yys823Slc, true, true)
		yys823 := string(yys823Slc)
		switch yys823 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv824 := &x.Items
				yym825 := z.DecBinary()
				_ = yym825
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv824), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys823)
		} // end switch yys823
	} // end for yyj823
	if !yyhl823 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj826 int
	var yyb826 bool
	var yyhl826 bool = l >= 0
	yyj826++
	if yyhl826 {
		yyb826 = yyj826 > l
	} else {
		yyb826 = r.CheckBreak()
	}
	if yyb826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv827 := &x.Items
		yym828 := z.DecBinary()
		_ = yym828
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv827), d)
		}
	}
	for {
		yyj826++
		if yyhl826 {
			yyb826 = yyj826 > l
		} else {
			yyb826 = r.CheckBreak()
		}
		if yyb826 {
			break
		}
		z.DecStructFieldNotFound(yyj826-1, "")
	}
	r.ReadEnd()
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym829 := z.EncBinary()
		_ = yym829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep830 := !z.EncBinary()
			yy2arr830 := z.EncBasicHandle().StructToArray
			var yyq830 [2]bool
			_, _, _ = yysep830, yyq830, yy2arr830
			const yyr830 bool = false
			if yyr830 || yy2arr830 {
				r.EncodeArrayStart(2)
			} else {
				var yynn830 int = 2
				for _, b := range yyq830 {
					if b {
						yynn830++
					}
				}
				r.EncodeMapStart(yynn830)
			}
			if yyr830 || yy2arr830 {
				yym832 := z.EncBinary()
				_ = yym832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				yym833 := z.EncBinary()
				_ = yym833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr830 || yy2arr830 {
				yy835 := &x.FieldRef
				yy835.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				yy836 := &x.FieldRef
				yy836.CodecEncodeSelf(e)
			}
			if yysep830 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym837 := z.DecBinary()
	_ = yym837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl838 := r.ReadMapStart()
			if yyl838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl838, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl838 := r.ReadArrayStart()
			if yyl838 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl838, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys839Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys839Slc
	var yyhl839 bool = l >= 0
	for yyj839 := 0; ; yyj839++ {
		if yyhl839 {
			if yyj839 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys839Slc = r.DecodeBytes(yys839Slc, true, true)
		yys839 := string(yys839Slc)
		switch yys839 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv841 := &x.FieldRef
				yyv841.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys839)
		} // end switch yys839
	} // end for yyj839
	if !yyhl839 {
		r.ReadEnd()
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj842 int
	var yyb842 bool
	var yyhl842 bool = l >= 0
	yyj842++
	if yyhl842 {
		yyb842 = yyj842 > l
	} else {
		yyb842 = r.CheckBreak()
	}
	if yyb842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj842++
	if yyhl842 {
		yyb842 = yyj842 > l
	} else {
		yyb842 = r.CheckBreak()
	}
	if yyb842 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv844 := &x.FieldRef
		yyv844.CodecDecodeSelf(d)
	}
	for {
		yyj842++
		if yyhl842 {
			yyb842 = yyj842 > l
		} else {
			yyb842 = r.CheckBreak()
		}
		if yyb842 {
			break
		}
		z.DecStructFieldNotFound(yyj842-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [5]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[0] = x.Name != ""
			yyq846[1] = x.HostPort != 0
			yyq846[3] = x.Protocol != ""
			yyq846[4] = x.HostIP != ""
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(5)
			} else {
				var yynn846 int = 1
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
			}
			if yyr846 || yy2arr846 {
				if yyq846[0] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq846[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr846 || yy2arr846 {
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[3] {
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr846 || yy2arr846 {
				if yyq846[4] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yysep846 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym860 := z.DecBinary()
	_ = yym860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl861 := r.ReadMapStart()
			if yyl861 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl861, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl861 := r.ReadArrayStart()
			if yyl861 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys862Slc
	var yyhl862 bool = l >= 0
	for yyj862 := 0; ; yyj862++ {
		if yyhl862 {
			if yyj862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys862Slc = r.DecodeBytes(yys862Slc, true, true)
		yys862 := string(yys862Slc)
		switch yys862 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys862)
		} // end switch yys862
	} // end for yyj862
	if !yyhl862 {
		r.ReadEnd()
	}
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj868 int
	var yyb868 bool
	var yyhl868 bool = l >= 0
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj868++
		if yyhl868 {
			yyb868 = yyj868 > l
		} else {
			yyb868 = r.CheckBreak()
		}
		if yyb868 {
			break
		}
		z.DecStructFieldNotFound(yyj868-1, "")
	}
	r.ReadEnd()
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym874 := z.EncBinary()
		_ = yym874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep875 := !z.EncBinary()
			yy2arr875 := z.EncBasicHandle().StructToArray
			var yyq875 [3]bool
			_, _, _ = yysep875, yyq875, yy2arr875
			const yyr875 bool = false
			yyq875[1] = x.ReadOnly != false
			if yyr875 || yy2arr875 {
				r.EncodeArrayStart(3)
			} else {
				var yynn875 int = 2
				for _, b := range yyq875 {
					if b {
						yynn875++
					}
				}
				r.EncodeMapStart(yynn875)
			}
			if yyr875 || yy2arr875 {
				yym877 := z.EncBinary()
				_ = yym877
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym878 := z.EncBinary()
				_ = yym878
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr875 || yy2arr875 {
				if yyq875[1] {
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq875[1] {
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					yym881 := z.EncBinary()
					_ = yym881
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr875 || yy2arr875 {
				yym883 := z.EncBinary()
				_ = yym883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				yym884 := z.EncBinary()
				_ = yym884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yysep875 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym885 := z.DecBinary()
	_ = yym885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl886 := r.ReadMapStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl886, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl886 := r.ReadArrayStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys887Slc
	var yyhl887 bool = l >= 0
	for yyj887 := 0; ; yyj887++ {
		if yyhl887 {
			if yyj887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys887Slc = r.DecodeBytes(yys887Slc, true, true)
		yys887 := string(yys887Slc)
		switch yys887 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys887)
		} // end switch yys887
	} // end for yyj887
	if !yyhl887 {
		r.ReadEnd()
	}
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj891 int
	var yyb891 bool
	var yyhl891 bool = l >= 0
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj891++
	if yyhl891 {
		yyb891 = yyj891 > l
	} else {
		yyb891 = r.CheckBreak()
	}
	if yyb891 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj891++
		if yyhl891 {
			yyb891 = yyj891 > l
		} else {
			yyb891 = r.CheckBreak()
		}
		if yyb891 {
			break
		}
		z.DecStructFieldNotFound(yyj891-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym895 := z.EncBinary()
		_ = yym895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep896 := !z.EncBinary()
			yy2arr896 := z.EncBasicHandle().StructToArray
			var yyq896 [3]bool
			_, _, _ = yysep896, yyq896, yy2arr896
			const yyr896 bool = false
			yyq896[1] = x.Value != ""
			yyq896[2] = x.ValueFrom != nil
			if yyr896 || yy2arr896 {
				r.EncodeArrayStart(3)
			} else {
				var yynn896 int = 1
				for _, b := range yyq896 {
					if b {
						yynn896++
					}
				}
				r.EncodeMapStart(yynn896)
			}
			if yyr896 || yy2arr896 {
				yym898 := z.EncBinary()
				_ = yym898
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym899 := z.EncBinary()
				_ = yym899
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr896 || yy2arr896 {
				if yyq896[1] {
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq896[1] {
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr896 || yy2arr896 {
				if yyq896[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq896[2] {
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yysep896 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym904 := z.DecBinary()
	_ = yym904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl905 := r.ReadMapStart()
			if yyl905 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl905, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl905 := r.ReadArrayStart()
			if yyl905 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys906Slc
	var yyhl906 bool = l >= 0
	for yyj906 := 0; ; yyj906++ {
		if yyhl906 {
			if yyj906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys906Slc = r.DecodeBytes(yys906Slc, true, true)
		yys906 := string(yys906Slc)
		switch yys906 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys906)
		} // end switch yys906
	} // end for yyj906
	if !yyhl906 {
		r.ReadEnd()
	}
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj910 int
	var yyb910 bool
	var yyhl910 bool = l >= 0
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj910++
	if yyhl910 {
		yyb910 = yyj910 > l
	} else {
		yyb910 = r.CheckBreak()
	}
	if yyb910 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj910++
		if yyhl910 {
			yyb910 = yyj910 > l
		} else {
			yyb910 = r.CheckBreak()
		}
		if yyb910 {
			break
		}
		z.DecStructFieldNotFound(yyj910-1, "")
	}
	r.ReadEnd()
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym914 := z.EncBinary()
		_ = yym914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep915 := !z.EncBinary()
			yy2arr915 := z.EncBasicHandle().StructToArray
			var yyq915 [1]bool
			_, _, _ = yysep915, yyq915, yy2arr915
			const yyr915 bool = false
			if yyr915 || yy2arr915 {
				r.EncodeArrayStart(1)
			} else {
				var yynn915 int = 1
				for _, b := range yyq915 {
					if b {
						yynn915++
					}
				}
				r.EncodeMapStart(yynn915)
			}
			if yyr915 || yy2arr915 {
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yysep915 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym917 := z.DecBinary()
	_ = yym917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl918 := r.ReadMapStart()
			if yyl918 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl918, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl918 := r.ReadArrayStart()
			if yyl918 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys919Slc
	var yyhl919 bool = l >= 0
	for yyj919 := 0; ; yyj919++ {
		if yyhl919 {
			if yyj919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys919Slc = r.DecodeBytes(yys919Slc, true, true)
		yys919 := string(yys919Slc)
		switch yys919 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys919)
		} // end switch yys919
	} // end for yyj919
	if !yyhl919 {
		r.ReadEnd()
	}
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj921 int
	var yyb921 bool
	var yyhl921 bool = l >= 0
	yyj921++
	if yyhl921 {
		yyb921 = yyj921 > l
	} else {
		yyb921 = r.CheckBreak()
	}
	if yyb921 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj921++
		if yyhl921 {
			yyb921 = yyj921 > l
		} else {
			yyb921 = r.CheckBreak()
		}
		if yyb921 {
			break
		}
		z.DecStructFieldNotFound(yyj921-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym923 := z.EncBinary()
		_ = yym923
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep924 := !z.EncBinary()
			yy2arr924 := z.EncBasicHandle().StructToArray
			var yyq924 [2]bool
			_, _, _ = yysep924, yyq924, yy2arr924
			const yyr924 bool = false
			if yyr924 || yy2arr924 {
				r.EncodeArrayStart(2)
			} else {
				var yynn924 int = 2
				for _, b := range yyq924 {
					if b {
						yynn924++
					}
				}
				r.EncodeMapStart(yynn924)
			}
			if yyr924 || yy2arr924 {
				yym926 := z.EncBinary()
				_ = yym926
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				yym927 := z.EncBinary()
				_ = yym927
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr924 || yy2arr924 {
				yym929 := z.EncBinary()
				_ = yym929
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				yym930 := z.EncBinary()
				_ = yym930
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yysep924 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym931 := z.DecBinary()
	_ = yym931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl932 := r.ReadMapStart()
			if yyl932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl932, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl932 := r.ReadArrayStart()
			if yyl932 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys933Slc
	var yyhl933 bool = l >= 0
	for yyj933 := 0; ; yyj933++ {
		if yyhl933 {
			if yyj933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys933Slc = r.DecodeBytes(yys933Slc, true, true)
		yys933 := string(yys933Slc)
		switch yys933 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys933)
		} // end switch yys933
	} // end for yyj933
	if !yyhl933 {
		r.ReadEnd()
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj936 int
	var yyb936 bool
	var yyhl936 bool = l >= 0
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj936++
	if yyhl936 {
		yyb936 = yyj936 > l
	} else {
		yyb936 = r.CheckBreak()
	}
	if yyb936 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj936++
		if yyhl936 {
			yyb936 = yyj936 > l
		} else {
			yyb936 = r.CheckBreak()
		}
		if yyb936 {
			break
		}
		z.DecStructFieldNotFound(yyj936-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym939 := z.EncBinary()
		_ = yym939
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep940 := !z.EncBinary()
			yy2arr940 := z.EncBasicHandle().StructToArray
			var yyq940 [4]bool
			_, _, _ = yysep940, yyq940, yy2arr940
			const yyr940 bool = false
			yyq940[0] = x.Path != ""
			yyq940[1] = true
			yyq940[2] = x.Host != ""
			yyq940[3] = x.Scheme != ""
			if yyr940 || yy2arr940 {
				r.EncodeArrayStart(4)
			} else {
				var yynn940 int = 0
				for _, b := range yyq940 {
					if b {
						yynn940++
					}
				}
				r.EncodeMapStart(yynn940)
			}
			if yyr940 || yy2arr940 {
				if yyq940[0] {
					yym942 := z.EncBinary()
					_ = yym942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[1] {
					yy945 := &x.Port
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else if z.HasExtensions() && z.EncExt(yy945) {
					} else if !yym946 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy945)
					} else {
						z.EncFallback(yy945)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq940[1] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy947 := &x.Port
					yym948 := z.EncBinary()
					_ = yym948
					if false {
					} else if z.HasExtensions() && z.EncExt(yy947) {
					} else if !yym948 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy947)
					} else {
						z.EncFallback(yy947)
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[2] {
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[2] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym951 := z.EncBinary()
					_ = yym951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr940 || yy2arr940 {
				if yyq940[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq940[3] {
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yysep940 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym953 := z.DecBinary()
	_ = yym953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl954 := r.ReadMapStart()
			if yyl954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl954, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl954 := r.ReadArrayStart()
			if yyl954 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys955Slc
	var yyhl955 bool = l >= 0
	for yyj955 := 0; ; yyj955++ {
		if yyhl955 {
			if yyj955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys955Slc = r.DecodeBytes(yys955Slc, true, true)
		yys955 := string(yys955Slc)
		switch yys955 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv957 := &x.Port
				yym958 := z.DecBinary()
				_ = yym958
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv957) {
				} else if !yym958 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv957)
				} else {
					z.DecFallback(yyv957, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys955)
		} // end switch yys955
	} // end for yyj955
	if !yyhl955 {
		r.ReadEnd()
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj961 int
	var yyb961 bool
	var yyhl961 bool = l >= 0
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv963 := &x.Port
		yym964 := z.DecBinary()
		_ = yym964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv963) {
		} else if !yym964 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv963)
		} else {
			z.DecFallback(yyv963, false)
		}
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj961++
		if yyhl961 {
			yyb961 = yyj961 > l
		} else {
			yyb961 = r.CheckBreak()
		}
		if yyb961 {
			break
		}
		z.DecStructFieldNotFound(yyj961-1, "")
	}
	r.ReadEnd()
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym967 := z.EncBinary()
	_ = yym967
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym968 := z.DecBinary()
	_ = yym968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym969 := z.EncBinary()
		_ = yym969
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep970 := !z.EncBinary()
			yy2arr970 := z.EncBasicHandle().StructToArray
			var yyq970 [1]bool
			_, _, _ = yysep970, yyq970, yy2arr970
			const yyr970 bool = false
			yyq970[0] = true
			if yyr970 || yy2arr970 {
				r.EncodeArrayStart(1)
			} else {
				var yynn970 int = 0
				for _, b := range yyq970 {
					if b {
						yynn970++
					}
				}
				r.EncodeMapStart(yynn970)
			}
			if yyr970 || yy2arr970 {
				if yyq970[0] {
					yy972 := &x.Port
					yym973 := z.EncBinary()
					_ = yym973
					if false {
					} else if z.HasExtensions() && z.EncExt(yy972) {
					} else if !yym973 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy972)
					} else {
						z.EncFallback(yy972)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq970[0] {
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					yy974 := &x.Port
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else if z.HasExtensions() && z.EncExt(yy974) {
					} else if !yym975 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy974)
					} else {
						z.EncFallback(yy974)
					}
				}
			}
			if yysep970 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym976 := z.DecBinary()
	_ = yym976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl977 := r.ReadMapStart()
			if yyl977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl977, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl977 := r.ReadArrayStart()
			if yyl977 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys978Slc
	var yyhl978 bool = l >= 0
	for yyj978 := 0; ; yyj978++ {
		if yyhl978 {
			if yyj978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys978Slc = r.DecodeBytes(yys978Slc, true, true)
		yys978 := string(yys978Slc)
		switch yys978 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv979 := &x.Port
				yym980 := z.DecBinary()
				_ = yym980
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv979) {
				} else if !yym980 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv979)
				} else {
					z.DecFallback(yyv979, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys978)
		} // end switch yys978
	} // end for yyj978
	if !yyhl978 {
		r.ReadEnd()
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj981 int
	var yyb981 bool
	var yyhl981 bool = l >= 0
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv982 := &x.Port
		yym983 := z.DecBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv982) {
		} else if !yym983 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv982)
		} else {
			z.DecFallback(yyv982, false)
		}
	}
	for {
		yyj981++
		if yyhl981 {
			yyb981 = yyj981 > l
		} else {
			yyb981 = r.CheckBreak()
		}
		if yyb981 {
			break
		}
		z.DecStructFieldNotFound(yyj981-1, "")
	}
	r.ReadEnd()
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym984 := z.EncBinary()
		_ = yym984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep985 := !z.EncBinary()
			yy2arr985 := z.EncBasicHandle().StructToArray
			var yyq985 [1]bool
			_, _, _ = yysep985, yyq985, yy2arr985
			const yyr985 bool = false
			yyq985[0] = len(x.Command) != 0
			if yyr985 || yy2arr985 {
				r.EncodeArrayStart(1)
			} else {
				var yynn985 int = 0
				for _, b := range yyq985 {
					if b {
						yynn985++
					}
				}
				r.EncodeMapStart(yynn985)
			}
			if yyr985 || yy2arr985 {
				if yyq985[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym987 := z.EncBinary()
						_ = yym987
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq985[0] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym988 := z.EncBinary()
						_ = yym988
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yysep985 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym989 := z.DecBinary()
	_ = yym989
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl990 := r.ReadMapStart()
			if yyl990 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl990, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl990 := r.ReadArrayStart()
			if yyl990 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl990, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys991Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys991Slc
	var yyhl991 bool = l >= 0
	for yyj991 := 0; ; yyj991++ {
		if yyhl991 {
			if yyj991 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys991Slc = r.DecodeBytes(yys991Slc, true, true)
		yys991 := string(yys991Slc)
		switch yys991 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv992 := &x.Command
				yym993 := z.DecBinary()
				_ = yym993
				if false {
				} else {
					z.F.DecSliceStringX(yyv992, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys991)
		} // end switch yys991
	} // end for yyj991
	if !yyhl991 {
		r.ReadEnd()
	}
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj994 int
	var yyb994 bool
	var yyhl994 bool = l >= 0
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv995 := &x.Command
		yym996 := z.DecBinary()
		_ = yym996
		if false {
		} else {
			z.F.DecSliceStringX(yyv995, false, d)
		}
	}
	for {
		yyj994++
		if yyhl994 {
			yyb994 = yyj994 > l
		} else {
			yyb994 = r.CheckBreak()
		}
		if yyb994 {
			break
		}
		z.DecStructFieldNotFound(yyj994-1, "")
	}
	r.ReadEnd()
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [8]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq998[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq998[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq998[3] = x.InitialDelaySeconds != 0
			yyq998[4] = x.TimeoutSeconds != 0
			yyq998[5] = x.PeriodSeconds != 0
			yyq998[6] = x.SuccessThreshold != 0
			yyq998[7] = x.FailureThreshold != 0
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(8)
			} else {
				var yynn998 int = 0
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
			}
			var yyn999 bool
			if x.Handler.Exec == nil {
				yyn999 = true
				goto LABEL999
			}
		LABEL999:
			if yyr998 || yy2arr998 {
				if yyn999 {
					r.EncodeNil()
				} else {
					if yyq998[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if yyn999 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1000 bool
			if x.Handler.HTTPGet == nil {
				yyn1000 = true
				goto LABEL1000
			}
		LABEL1000:
			if yyr998 || yy2arr998 {
				if yyn1000 {
					r.EncodeNil()
				} else {
					if yyq998[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if yyn1000 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1001 bool
			if x.Handler.TCPSocket == nil {
				yyn1001 = true
				goto LABEL1001
			}
		LABEL1001:
			if yyr998 || yy2arr998 {
				if yyn1001 {
					r.EncodeNil()
				} else {
					if yyq998[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq998[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if yyn1001 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[3] {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[3] {
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[4] {
					yym1006 := z.EncBinary()
					_ = yym1006
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[4] {
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[5] {
					yym1009 := z.EncBinary()
					_ = yym1009
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[5] {
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					yym1010 := z.EncBinary()
					_ = yym1010
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[6] {
					yym1012 := z.EncBinary()
					_ = yym1012
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[6] {
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					yym1013 := z.EncBinary()
					_ = yym1013
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr998 || yy2arr998 {
				if yyq998[7] {
					yym1015 := z.EncBinary()
					_ = yym1015
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq998[7] {
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yysep998 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1017 := z.DecBinary()
	_ = yym1017
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1018 := r.ReadMapStart()
			if yyl1018 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1018, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1018 := r.ReadArrayStart()
			if yyl1018 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1018, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1019Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1019Slc
	var yyhl1019 bool = l >= 0
	for yyj1019 := 0; ; yyj1019++ {
		if yyhl1019 {
			if yyj1019 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1019Slc = r.DecodeBytes(yys1019Slc, true, true)
		yys1019 := string(yys1019Slc)
		switch yys1019 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int64(r.DecodeInt(64))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int64(r.DecodeInt(64))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int64(r.DecodeInt(64))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1019)
		} // end switch yys1019
	} // end for yyj1019
	if !yyhl1019 {
		r.ReadEnd()
	}
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1028 int
	var yyb1028 bool
	var yyhl1028 bool = l >= 0
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int64(r.DecodeInt(64))
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int64(r.DecodeInt(64))
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int64(r.DecodeInt(64))
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1028++
		if yyhl1028 {
			yyb1028 = yyj1028 > l
		} else {
			yyb1028 = r.CheckBreak()
		}
		if yyb1028 {
			break
		}
		z.DecStructFieldNotFound(yyj1028-1, "")
	}
	r.ReadEnd()
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1037 := z.EncBinary()
	_ = yym1037
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1038 := z.DecBinary()
	_ = yym1038
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1039 := z.EncBinary()
	_ = yym1039
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1040 := z.DecBinary()
	_ = yym1040
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1041 := z.EncBinary()
		_ = yym1041
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1042 := !z.EncBinary()
			yy2arr1042 := z.EncBasicHandle().StructToArray
			var yyq1042 [2]bool
			_, _, _ = yysep1042, yyq1042, yy2arr1042
			const yyr1042 bool = false
			yyq1042[0] = len(x.Add) != 0
			yyq1042[1] = len(x.Drop) != 0
			if yyr1042 || yy2arr1042 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1042 int = 0
				for _, b := range yyq1042 {
					if b {
						yynn1042++
					}
				}
				r.EncodeMapStart(yynn1042)
			}
			if yyr1042 || yy2arr1042 {
				if yyq1042[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1044 := z.EncBinary()
						_ = yym1044
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1042[0] {
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1045 := z.EncBinary()
						_ = yym1045
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1042 || yy2arr1042 {
				if yyq1042[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1047 := z.EncBinary()
						_ = yym1047
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1042[1] {
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1048 := z.EncBinary()
						_ = yym1048
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yysep1042 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1049 := z.DecBinary()
	_ = yym1049
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1050 := r.ReadMapStart()
			if yyl1050 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1050, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1050 := r.ReadArrayStart()
			if yyl1050 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1050, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1051Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1051Slc
	var yyhl1051 bool = l >= 0
	for yyj1051 := 0; ; yyj1051++ {
		if yyhl1051 {
			if yyj1051 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1051Slc = r.DecodeBytes(yys1051Slc, true, true)
		yys1051 := string(yys1051Slc)
		switch yys1051 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1052 := &x.Add
				yym1053 := z.DecBinary()
				_ = yym1053
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1052), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1054 := &x.Drop
				yym1055 := z.DecBinary()
				_ = yym1055
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1054), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1051)
		} // end switch yys1051
	} // end for yyj1051
	if !yyhl1051 {
		r.ReadEnd()
	}
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1056 int
	var yyb1056 bool
	var yyhl1056 bool = l >= 0
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1057 := &x.Add
		yym1058 := z.DecBinary()
		_ = yym1058
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1057), d)
		}
	}
	yyj1056++
	if yyhl1056 {
		yyb1056 = yyj1056 > l
	} else {
		yyb1056 = r.CheckBreak()
	}
	if yyb1056 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1059 := &x.Drop
		yym1060 := z.DecBinary()
		_ = yym1060
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1059), d)
		}
	}
	for {
		yyj1056++
		if yyhl1056 {
			yyb1056 = yyj1056 > l
		} else {
			yyb1056 = r.CheckBreak()
		}
		if yyb1056 {
			break
		}
		z.DecStructFieldNotFound(yyj1056-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1061 := z.EncBinary()
		_ = yym1061
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1062 := !z.EncBinary()
			yy2arr1062 := z.EncBasicHandle().StructToArray
			var yyq1062 [2]bool
			_, _, _ = yysep1062, yyq1062, yy2arr1062
			const yyr1062 bool = false
			yyq1062[0] = len(x.Limits) != 0
			yyq1062[1] = len(x.Requests) != 0
			if yyr1062 || yy2arr1062 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1062 int = 0
				for _, b := range yyq1062 {
					if b {
						yynn1062++
					}
				}
				r.EncodeMapStart(yynn1062)
			}
			if yyr1062 || yy2arr1062 {
				if yyq1062[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1062[0] {
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1062 || yy2arr1062 {
				if yyq1062[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1062[1] {
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1062 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1065 := z.DecBinary()
	_ = yym1065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1066 := r.ReadMapStart()
			if yyl1066 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1066, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1066 := r.ReadArrayStart()
			if yyl1066 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1067Slc
	var yyhl1067 bool = l >= 0
	for yyj1067 := 0; ; yyj1067++ {
		if yyhl1067 {
			if yyj1067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1067Slc = r.DecodeBytes(yys1067Slc, true, true)
		yys1067 := string(yys1067Slc)
		switch yys1067 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1068 := &x.Limits
				yyv1068.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1069 := &x.Requests
				yyv1069.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1067)
		} // end switch yys1067
	} // end for yyj1067
	if !yyhl1067 {
		r.ReadEnd()
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1070 int
	var yyb1070 bool
	var yyhl1070 bool = l >= 0
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1071 := &x.Limits
		yyv1071.CodecDecodeSelf(d)
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1072 := &x.Requests
		yyv1072.CodecDecodeSelf(d)
	}
	for {
		yyj1070++
		if yyhl1070 {
			yyb1070 = yyj1070 > l
		} else {
			yyb1070 = r.CheckBreak()
		}
		if yyb1070 {
			break
		}
		z.DecStructFieldNotFound(yyj1070-1, "")
	}
	r.ReadEnd()
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1073 := z.EncBinary()
		_ = yym1073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1074 := !z.EncBinary()
			yy2arr1074 := z.EncBasicHandle().StructToArray
			var yyq1074 [18]bool
			_, _, _ = yysep1074, yyq1074, yy2arr1074
			const yyr1074 bool = false
			yyq1074[2] = len(x.Command) != 0
			yyq1074[3] = len(x.Args) != 0
			yyq1074[4] = x.WorkingDir != ""
			yyq1074[5] = len(x.Ports) != 0
			yyq1074[6] = len(x.Env) != 0
			yyq1074[7] = true
			yyq1074[8] = len(x.VolumeMounts) != 0
			yyq1074[9] = x.LivenessProbe != nil
			yyq1074[10] = x.ReadinessProbe != nil
			yyq1074[11] = x.Lifecycle != nil
			yyq1074[12] = x.TerminationMessagePath != ""
			yyq1074[14] = x.SecurityContext != nil
			yyq1074[15] = x.Stdin != false
			yyq1074[16] = x.StdinOnce != false
			yyq1074[17] = x.TTY != false
			if yyr1074 || yy2arr1074 {
				r.EncodeArrayStart(18)
			} else {
				var yynn1074 int = 3
				for _, b := range yyq1074 {
					if b {
						yynn1074++
					}
				}
				r.EncodeMapStart(yynn1074)
			}
			if yyr1074 || yy2arr1074 {
				yym1076 := z.EncBinary()
				_ = yym1076
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1077 := z.EncBinary()
				_ = yym1077
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1074 || yy2arr1074 {
				yym1079 := z.EncBinary()
				_ = yym1079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1080 := z.EncBinary()
				_ = yym1080
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1082 := z.EncBinary()
						_ = yym1082
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[2] {
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1083 := z.EncBinary()
						_ = yym1083
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1085 := z.EncBinary()
						_ = yym1085
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[3] {
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1086 := z.EncBinary()
						_ = yym1086
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[4] {
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1074[4] {
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1091 := z.EncBinary()
						_ = yym1091
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[5] {
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1092 := z.EncBinary()
						_ = yym1092
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1094 := z.EncBinary()
						_ = yym1094
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[6] {
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1095 := z.EncBinary()
						_ = yym1095
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[7] {
					yy1097 := &x.Resources
					yy1097.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[7] {
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					yy1098 := &x.Resources
					yy1098.CodecEncodeSelf(e)
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1100 := z.EncBinary()
						_ = yym1100
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[8] {
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1101 := z.EncBinary()
						_ = yym1101
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[9] {
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[10] {
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[11] {
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[12] {
					yym1106 := z.EncBinary()
					_ = yym1106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1074[12] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					yym1107 := z.EncBinary()
					_ = yym1107
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1074[14] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[15] {
					yym1111 := z.EncBinary()
					_ = yym1111
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1074[15] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[16] {
					yym1114 := z.EncBinary()
					_ = yym1114
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1074[16] {
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					yym1115 := z.EncBinary()
					_ = yym1115
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1074 || yy2arr1074 {
				if yyq1074[17] {
					yym1117 := z.EncBinary()
					_ = yym1117
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1074[17] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym1118 := z.EncBinary()
					_ = yym1118
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yysep1074 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1119 := z.DecBinary()
	_ = yym1119
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1120 := r.ReadMapStart()
			if yyl1120 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1120, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1120 := r.ReadArrayStart()
			if yyl1120 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1120, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1121Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1121Slc
	var yyhl1121 bool = l >= 0
	for yyj1121 := 0; ; yyj1121++ {
		if yyhl1121 {
			if yyj1121 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1121Slc = r.DecodeBytes(yys1121Slc, true, true)
		yys1121 := string(yys1121Slc)
		switch yys1121 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1124 := &x.Command
				yym1125 := z.DecBinary()
				_ = yym1125
				if false {
				} else {
					z.F.DecSliceStringX(yyv1124, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1126 := &x.Args
				yym1127 := z.DecBinary()
				_ = yym1127
				if false {
				} else {
					z.F.DecSliceStringX(yyv1126, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1129 := &x.Ports
				yym1130 := z.DecBinary()
				_ = yym1130
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1129), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1131 := &x.Env
				yym1132 := z.DecBinary()
				_ = yym1132
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1131), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1133 := &x.Resources
				yyv1133.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1134 := &x.VolumeMounts
				yym1135 := z.DecBinary()
				_ = yym1135
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1134), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1121)
		} // end switch yys1121
	} // end for yyj1121
	if !yyhl1121 {
		r.ReadEnd()
	}
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1145 int
	var yyb1145 bool
	var yyhl1145 bool = l >= 0
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1148 := &x.Command
		yym1149 := z.DecBinary()
		_ = yym1149
		if false {
		} else {
			z.F.DecSliceStringX(yyv1148, false, d)
		}
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1150 := &x.Args
		yym1151 := z.DecBinary()
		_ = yym1151
		if false {
		} else {
			z.F.DecSliceStringX(yyv1150, false, d)
		}
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1153 := &x.Ports
		yym1154 := z.DecBinary()
		_ = yym1154
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1153), d)
		}
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1155 := &x.Env
		yym1156 := z.DecBinary()
		_ = yym1156
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1155), d)
		}
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1157 := &x.Resources
		yyv1157.CodecDecodeSelf(d)
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1158 := &x.VolumeMounts
		yym1159 := z.DecBinary()
		_ = yym1159
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1158), d)
		}
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1145++
		if yyhl1145 {
			yyb1145 = yyj1145 > l
		} else {
			yyb1145 = r.CheckBreak()
		}
		if yyb1145 {
			break
		}
		z.DecStructFieldNotFound(yyj1145-1, "")
	}
	r.ReadEnd()
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1169 := z.EncBinary()
		_ = yym1169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1170 := !z.EncBinary()
			yy2arr1170 := z.EncBasicHandle().StructToArray
			var yyq1170 [3]bool
			_, _, _ = yysep1170, yyq1170, yy2arr1170
			const yyr1170 bool = false
			yyq1170[0] = x.Exec != nil
			yyq1170[1] = x.HTTPGet != nil
			yyq1170[2] = x.TCPSocket != nil
			if yyr1170 || yy2arr1170 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1170 int = 0
				for _, b := range yyq1170 {
					if b {
						yynn1170++
					}
				}
				r.EncodeMapStart(yynn1170)
			}
			if yyr1170 || yy2arr1170 {
				if yyq1170[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1170[0] {
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1170 || yy2arr1170 {
				if yyq1170[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1170[1] {
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1170 || yy2arr1170 {
				if yyq1170[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1170[2] {
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1170 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1174 := z.DecBinary()
	_ = yym1174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1175 := r.ReadMapStart()
			if yyl1175 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1175, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1175 := r.ReadArrayStart()
			if yyl1175 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1176Slc
	var yyhl1176 bool = l >= 0
	for yyj1176 := 0; ; yyj1176++ {
		if yyhl1176 {
			if yyj1176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1176Slc = r.DecodeBytes(yys1176Slc, true, true)
		yys1176 := string(yys1176Slc)
		switch yys1176 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1176)
		} // end switch yys1176
	} // end for yyj1176
	if !yyhl1176 {
		r.ReadEnd()
	}
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1180 int
	var yyb1180 bool
	var yyhl1180 bool = l >= 0
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1180++
		if yyhl1180 {
			yyb1180 = yyj1180 > l
		} else {
			yyb1180 = r.CheckBreak()
		}
		if yyb1180 {
			break
		}
		z.DecStructFieldNotFound(yyj1180-1, "")
	}
	r.ReadEnd()
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1184 := z.EncBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1185 := !z.EncBinary()
			yy2arr1185 := z.EncBasicHandle().StructToArray
			var yyq1185 [2]bool
			_, _, _ = yysep1185, yyq1185, yy2arr1185
			const yyr1185 bool = false
			yyq1185[0] = x.PostStart != nil
			yyq1185[1] = x.PreStop != nil
			if yyr1185 || yy2arr1185 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1185 int = 0
				for _, b := range yyq1185 {
					if b {
						yynn1185++
					}
				}
				r.EncodeMapStart(yynn1185)
			}
			if yyr1185 || yy2arr1185 {
				if yyq1185[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1185[0] {
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1185 || yy2arr1185 {
				if yyq1185[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1185[1] {
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1185 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1188 := z.DecBinary()
	_ = yym1188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1189 := r.ReadMapStart()
			if yyl1189 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1189, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1189 := r.ReadArrayStart()
			if yyl1189 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1190Slc
	var yyhl1190 bool = l >= 0
	for yyj1190 := 0; ; yyj1190++ {
		if yyhl1190 {
			if yyj1190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1190Slc = r.DecodeBytes(yys1190Slc, true, true)
		yys1190 := string(yys1190Slc)
		switch yys1190 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1190)
		} // end switch yys1190
	} // end for yyj1190
	if !yyhl1190 {
		r.ReadEnd()
	}
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1193 int
	var yyb1193 bool
	var yyhl1193 bool = l >= 0
	yyj1193++
	if yyhl1193 {
		yyb1193 = yyj1193 > l
	} else {
		yyb1193 = r.CheckBreak()
	}
	if yyb1193 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1193++
	if yyhl1193 {
		yyb1193 = yyj1193 > l
	} else {
		yyb1193 = r.CheckBreak()
	}
	if yyb1193 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1193++
		if yyhl1193 {
			yyb1193 = yyj1193 > l
		} else {
			yyb1193 = r.CheckBreak()
		}
		if yyb1193 {
			break
		}
		z.DecStructFieldNotFound(yyj1193-1, "")
	}
	r.ReadEnd()
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1196 := z.EncBinary()
	_ = yym1196
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1197 := z.DecBinary()
	_ = yym1197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1198 := z.EncBinary()
		_ = yym1198
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1199 := !z.EncBinary()
			yy2arr1199 := z.EncBasicHandle().StructToArray
			var yyq1199 [2]bool
			_, _, _ = yysep1199, yyq1199, yy2arr1199
			const yyr1199 bool = false
			yyq1199[0] = x.Reason != ""
			yyq1199[1] = x.Message != ""
			if yyr1199 || yy2arr1199 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1199 int = 0
				for _, b := range yyq1199 {
					if b {
						yynn1199++
					}
				}
				r.EncodeMapStart(yynn1199)
			}
			if yyr1199 || yy2arr1199 {
				if yyq1199[0] {
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1199[0] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1202 := z.EncBinary()
					_ = yym1202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1199 || yy2arr1199 {
				if yyq1199[1] {
					yym1204 := z.EncBinary()
					_ = yym1204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1199[1] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1205 := z.EncBinary()
					_ = yym1205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1199 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		switch yys1208 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	if !yyhl1208 {
		r.ReadEnd()
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1211 int
	var yyb1211 bool
	var yyhl1211 bool = l >= 0
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1211++
	if yyhl1211 {
		yyb1211 = yyj1211 > l
	} else {
		yyb1211 = r.CheckBreak()
	}
	if yyb1211 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1211++
		if yyhl1211 {
			yyb1211 = yyj1211 > l
		} else {
			yyb1211 = r.CheckBreak()
		}
		if yyb1211 {
			break
		}
		z.DecStructFieldNotFound(yyj1211-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1214 := z.EncBinary()
		_ = yym1214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1215 := !z.EncBinary()
			yy2arr1215 := z.EncBasicHandle().StructToArray
			var yyq1215 [1]bool
			_, _, _ = yysep1215, yyq1215, yy2arr1215
			const yyr1215 bool = false
			yyq1215[0] = true
			if yyr1215 || yy2arr1215 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1215 int = 0
				for _, b := range yyq1215 {
					if b {
						yynn1215++
					}
				}
				r.EncodeMapStart(yynn1215)
			}
			if yyr1215 || yy2arr1215 {
				if yyq1215[0] {
					yy1217 := &x.StartedAt
					yym1218 := z.EncBinary()
					_ = yym1218
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1217) {
					} else if yym1218 {
						z.EncBinaryMarshal(yy1217)
					} else if !yym1218 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1217)
					} else {
						z.EncFallback(yy1217)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1215[0] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1219 := &x.StartedAt
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1219) {
					} else if yym1220 {
						z.EncBinaryMarshal(yy1219)
					} else if !yym1220 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1219)
					} else {
						z.EncFallback(yy1219)
					}
				}
			}
			if yysep1215 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1221 := z.DecBinary()
	_ = yym1221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1222 := r.ReadMapStart()
			if yyl1222 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1222, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1222 := r.ReadArrayStart()
			if yyl1222 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1223Slc
	var yyhl1223 bool = l >= 0
	for yyj1223 := 0; ; yyj1223++ {
		if yyhl1223 {
			if yyj1223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1223Slc = r.DecodeBytes(yys1223Slc, true, true)
		yys1223 := string(yys1223Slc)
		switch yys1223 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1224 := &x.StartedAt
				yym1225 := z.DecBinary()
				_ = yym1225
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1224) {
				} else if yym1225 {
					z.DecBinaryUnmarshal(yyv1224)
				} else if !yym1225 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1224)
				} else {
					z.DecFallback(yyv1224, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1223)
		} // end switch yys1223
	} // end for yyj1223
	if !yyhl1223 {
		r.ReadEnd()
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1226 int
	var yyb1226 bool
	var yyhl1226 bool = l >= 0
	yyj1226++
	if yyhl1226 {
		yyb1226 = yyj1226 > l
	} else {
		yyb1226 = r.CheckBreak()
	}
	if yyb1226 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1227 := &x.StartedAt
		yym1228 := z.DecBinary()
		_ = yym1228
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1227) {
		} else if yym1228 {
			z.DecBinaryUnmarshal(yyv1227)
		} else if !yym1228 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1227)
		} else {
			z.DecFallback(yyv1227, false)
		}
	}
	for {
		yyj1226++
		if yyhl1226 {
			yyb1226 = yyj1226 > l
		} else {
			yyb1226 = r.CheckBreak()
		}
		if yyb1226 {
			break
		}
		z.DecStructFieldNotFound(yyj1226-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1229 := z.EncBinary()
		_ = yym1229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1230 := !z.EncBinary()
			yy2arr1230 := z.EncBasicHandle().StructToArray
			var yyq1230 [7]bool
			_, _, _ = yysep1230, yyq1230, yy2arr1230
			const yyr1230 bool = false
			yyq1230[1] = x.Signal != 0
			yyq1230[2] = x.Reason != ""
			yyq1230[3] = x.Message != ""
			yyq1230[4] = true
			yyq1230[5] = true
			yyq1230[6] = x.ContainerID != ""
			if yyr1230 || yy2arr1230 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1230 int = 1
				for _, b := range yyq1230 {
					if b {
						yynn1230++
					}
				}
				r.EncodeMapStart(yynn1230)
			}
			if yyr1230 || yy2arr1230 {
				yym1232 := z.EncBinary()
				_ = yym1232
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				yym1233 := z.EncBinary()
				_ = yym1233
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1230 || yy2arr1230 {
				if yyq1230[1] {
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1230[1] {
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					yym1236 := z.EncBinary()
					_ = yym1236
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				if yyq1230[2] {
					yym1238 := z.EncBinary()
					_ = yym1238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1230[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				if yyq1230[3] {
					yym1241 := z.EncBinary()
					_ = yym1241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1230[3] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1242 := z.EncBinary()
					_ = yym1242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				if yyq1230[4] {
					yy1244 := &x.StartedAt
					yym1245 := z.EncBinary()
					_ = yym1245
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1244) {
					} else if yym1245 {
						z.EncBinaryMarshal(yy1244)
					} else if !yym1245 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1244)
					} else {
						z.EncFallback(yy1244)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[4] {
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					yy1246 := &x.StartedAt
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1246) {
					} else if yym1247 {
						z.EncBinaryMarshal(yy1246)
					} else if !yym1247 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1246)
					} else {
						z.EncFallback(yy1246)
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				if yyq1230[5] {
					yy1249 := &x.FinishedAt
					yym1250 := z.EncBinary()
					_ = yym1250
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1249) {
					} else if yym1250 {
						z.EncBinaryMarshal(yy1249)
					} else if !yym1250 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1249)
					} else {
						z.EncFallback(yy1249)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[5] {
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					yy1251 := &x.FinishedAt
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1251) {
					} else if yym1252 {
						z.EncBinaryMarshal(yy1251)
					} else if !yym1252 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1251)
					} else {
						z.EncFallback(yy1251)
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				if yyq1230[6] {
					yym1254 := z.EncBinary()
					_ = yym1254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1230[6] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1230 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1256 := z.DecBinary()
	_ = yym1256
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1257 := r.ReadMapStart()
			if yyl1257 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1257, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1257 := r.ReadArrayStart()
			if yyl1257 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1257, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1258Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1258Slc
	var yyhl1258 bool = l >= 0
	for yyj1258 := 0; ; yyj1258++ {
		if yyhl1258 {
			if yyj1258 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1258Slc = r.DecodeBytes(yys1258Slc, true, true)
		yys1258 := string(yys1258Slc)
		switch yys1258 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1263 := &x.StartedAt
				yym1264 := z.DecBinary()
				_ = yym1264
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1263) {
				} else if yym1264 {
					z.DecBinaryUnmarshal(yyv1263)
				} else if !yym1264 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1263)
				} else {
					z.DecFallback(yyv1263, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1265 := &x.FinishedAt
				yym1266 := z.DecBinary()
				_ = yym1266
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1265) {
				} else if yym1266 {
					z.DecBinaryUnmarshal(yyv1265)
				} else if !yym1266 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1265)
				} else {
					z.DecFallback(yyv1265, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1258)
		} // end switch yys1258
	} // end for yyj1258
	if !yyhl1258 {
		r.ReadEnd()
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1268 int
	var yyb1268 bool
	var yyhl1268 bool = l >= 0
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1273 := &x.StartedAt
		yym1274 := z.DecBinary()
		_ = yym1274
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1273) {
		} else if yym1274 {
			z.DecBinaryUnmarshal(yyv1273)
		} else if !yym1274 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1273)
		} else {
			z.DecFallback(yyv1273, false)
		}
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1275 := &x.FinishedAt
		yym1276 := z.DecBinary()
		_ = yym1276
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1275) {
		} else if yym1276 {
			z.DecBinaryUnmarshal(yyv1275)
		} else if !yym1276 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1275)
		} else {
			z.DecFallback(yyv1275, false)
		}
	}
	yyj1268++
	if yyhl1268 {
		yyb1268 = yyj1268 > l
	} else {
		yyb1268 = r.CheckBreak()
	}
	if yyb1268 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1268++
		if yyhl1268 {
			yyb1268 = yyj1268 > l
		} else {
			yyb1268 = r.CheckBreak()
		}
		if yyb1268 {
			break
		}
		z.DecStructFieldNotFound(yyj1268-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1278 := z.EncBinary()
		_ = yym1278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1279 := !z.EncBinary()
			yy2arr1279 := z.EncBasicHandle().StructToArray
			var yyq1279 [3]bool
			_, _, _ = yysep1279, yyq1279, yy2arr1279
			const yyr1279 bool = false
			yyq1279[0] = x.Waiting != nil
			yyq1279[1] = x.Running != nil
			yyq1279[2] = x.Terminated != nil
			if yyr1279 || yy2arr1279 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1279 int = 0
				for _, b := range yyq1279 {
					if b {
						yynn1279++
					}
				}
				r.EncodeMapStart(yynn1279)
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[0] {
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[1] {
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1279 || yy2arr1279 {
				if yyq1279[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1279[2] {
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1279 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1283 := z.DecBinary()
	_ = yym1283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1284 := r.ReadMapStart()
			if yyl1284 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1284, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1284 := r.ReadArrayStart()
			if yyl1284 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1285Slc
	var yyhl1285 bool = l >= 0
	for yyj1285 := 0; ; yyj1285++ {
		if yyhl1285 {
			if yyj1285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1285Slc = r.DecodeBytes(yys1285Slc, true, true)
		yys1285 := string(yys1285Slc)
		switch yys1285 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1285)
		} // end switch yys1285
	} // end for yyj1285
	if !yyhl1285 {
		r.ReadEnd()
	}
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1289 int
	var yyb1289 bool
	var yyhl1289 bool = l >= 0
	yyj1289++
	if yyhl1289 {
		yyb1289 = yyj1289 > l
	} else {
		yyb1289 = r.CheckBreak()
	}
	if yyb1289 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1289++
	if yyhl1289 {
		yyb1289 = yyj1289 > l
	} else {
		yyb1289 = r.CheckBreak()
	}
	if yyb1289 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1289++
	if yyhl1289 {
		yyb1289 = yyj1289 > l
	} else {
		yyb1289 = r.CheckBreak()
	}
	if yyb1289 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1289++
		if yyhl1289 {
			yyb1289 = yyj1289 > l
		} else {
			yyb1289 = r.CheckBreak()
		}
		if yyb1289 {
			break
		}
		z.DecStructFieldNotFound(yyj1289-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1293 := z.EncBinary()
		_ = yym1293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1294 := !z.EncBinary()
			yy2arr1294 := z.EncBasicHandle().StructToArray
			var yyq1294 [8]bool
			_, _, _ = yysep1294, yyq1294, yy2arr1294
			const yyr1294 bool = false
			yyq1294[1] = true
			yyq1294[2] = true
			yyq1294[7] = x.ContainerID != ""
			if yyr1294 || yy2arr1294 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1294 int = 5
				for _, b := range yyq1294 {
					if b {
						yynn1294++
					}
				}
				r.EncodeMapStart(yynn1294)
			}
			if yyr1294 || yy2arr1294 {
				yym1296 := z.EncBinary()
				_ = yym1296
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1297 := z.EncBinary()
				_ = yym1297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1294 || yy2arr1294 {
				if yyq1294[1] {
					yy1299 := &x.State
					yy1299.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1294[1] {
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					yy1300 := &x.State
					yy1300.CodecEncodeSelf(e)
				}
			}
			if yyr1294 || yy2arr1294 {
				if yyq1294[2] {
					yy1302 := &x.LastTerminationState
					yy1302.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1294[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					yy1303 := &x.LastTerminationState
					yy1303.CodecEncodeSelf(e)
				}
			}
			if yyr1294 || yy2arr1294 {
				yym1305 := z.EncBinary()
				_ = yym1305
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				yym1306 := z.EncBinary()
				_ = yym1306
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1294 || yy2arr1294 {
				yym1308 := z.EncBinary()
				_ = yym1308
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				yym1309 := z.EncBinary()
				_ = yym1309
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1294 || yy2arr1294 {
				yym1311 := z.EncBinary()
				_ = yym1311
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				yym1312 := z.EncBinary()
				_ = yym1312
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1294 || yy2arr1294 {
				yym1314 := z.EncBinary()
				_ = yym1314
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				yym1315 := z.EncBinary()
				_ = yym1315
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1294 || yy2arr1294 {
				if yyq1294[7] {
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1294[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yysep1294 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1319 := z.DecBinary()
	_ = yym1319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1320 := r.ReadMapStart()
			if yyl1320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1320, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1320 := r.ReadArrayStart()
			if yyl1320 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1321Slc
	var yyhl1321 bool = l >= 0
	for yyj1321 := 0; ; yyj1321++ {
		if yyhl1321 {
			if yyj1321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1321Slc = r.DecodeBytes(yys1321Slc, true, true)
		yys1321 := string(yys1321Slc)
		switch yys1321 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1323 := &x.State
				yyv1323.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1324 := &x.LastTerminationState
				yyv1324.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1321)
		} // end switch yys1321
	} // end for yyj1321
	if !yyhl1321 {
		r.ReadEnd()
	}
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1330 int
	var yyb1330 bool
	var yyhl1330 bool = l >= 0
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1332 := &x.State
		yyv1332.CodecDecodeSelf(d)
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1333 := &x.LastTerminationState
		yyv1333.CodecDecodeSelf(d)
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1330++
	if yyhl1330 {
		yyb1330 = yyj1330 > l
	} else {
		yyb1330 = r.CheckBreak()
	}
	if yyb1330 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1330++
		if yyhl1330 {
			yyb1330 = yyj1330 > l
		} else {
			yyb1330 = r.CheckBreak()
		}
		if yyb1330 {
			break
		}
		z.DecStructFieldNotFound(yyj1330-1, "")
	}
	r.ReadEnd()
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1339 := z.EncBinary()
	_ = yym1339
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1340 := z.DecBinary()
	_ = yym1340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1341 := z.EncBinary()
	_ = yym1341
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1342 := z.DecBinary()
	_ = yym1342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1343 := z.EncBinary()
		_ = yym1343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1344 := !z.EncBinary()
			yy2arr1344 := z.EncBasicHandle().StructToArray
			var yyq1344 [6]bool
			_, _, _ = yysep1344, yyq1344, yy2arr1344
			const yyr1344 bool = false
			yyq1344[2] = true
			yyq1344[3] = true
			yyq1344[4] = x.Reason != ""
			yyq1344[5] = x.Message != ""
			if yyr1344 || yy2arr1344 {
				r.EncodeArrayStart(6)
			} else {
				var yynn1344 int = 2
				for _, b := range yyq1344 {
					if b {
						yynn1344++
					}
				}
				r.EncodeMapStart(yynn1344)
			}
			if yyr1344 || yy2arr1344 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1344 || yy2arr1344 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[2] {
					yy1348 := &x.LastProbeTime
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1348) {
					} else if yym1349 {
						z.EncBinaryMarshal(yy1348)
					} else if !yym1349 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1348)
					} else {
						z.EncFallback(yy1348)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy1350 := &x.LastProbeTime
					yym1351 := z.EncBinary()
					_ = yym1351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1350) {
					} else if yym1351 {
						z.EncBinaryMarshal(yy1350)
					} else if !yym1351 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1350)
					} else {
						z.EncFallback(yy1350)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[3] {
					yy1353 := &x.LastTransitionTime
					yym1354 := z.EncBinary()
					_ = yym1354
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1353) {
					} else if yym1354 {
						z.EncBinaryMarshal(yy1353)
					} else if !yym1354 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1353)
					} else {
						z.EncFallback(yy1353)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy1355 := &x.LastTransitionTime
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1355) {
					} else if yym1356 {
						z.EncBinaryMarshal(yy1355)
					} else if !yym1356 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1355)
					} else {
						z.EncFallback(yy1355)
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[4] {
					yym1358 := z.EncBinary()
					_ = yym1358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				if yyq1344[5] {
					yym1361 := z.EncBinary()
					_ = yym1361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1362 := z.EncBinary()
					_ = yym1362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep1344 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1363 := z.DecBinary()
	_ = yym1363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1364 := r.ReadMapStart()
			if yyl1364 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1364, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1364 := r.ReadArrayStart()
			if yyl1364 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1365Slc
	var yyhl1365 bool = l >= 0
	for yyj1365 := 0; ; yyj1365++ {
		if yyhl1365 {
			if yyj1365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1365Slc = r.DecodeBytes(yys1365Slc, true, true)
		yys1365 := string(yys1365Slc)
		switch yys1365 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1368 := &x.LastProbeTime
				yym1369 := z.DecBinary()
				_ = yym1369
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1368) {
				} else if yym1369 {
					z.DecBinaryUnmarshal(yyv1368)
				} else if !yym1369 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1368)
				} else {
					z.DecFallback(yyv1368, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1370 := &x.LastTransitionTime
				yym1371 := z.DecBinary()
				_ = yym1371
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1370) {
				} else if yym1371 {
					z.DecBinaryUnmarshal(yyv1370)
				} else if !yym1371 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1370)
				} else {
					z.DecFallback(yyv1370, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1365)
		} // end switch yys1365
	} // end for yyj1365
	if !yyhl1365 {
		r.ReadEnd()
	}
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1374 int
	var yyb1374 bool
	var yyhl1374 bool = l >= 0
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1377 := &x.LastProbeTime
		yym1378 := z.DecBinary()
		_ = yym1378
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1377) {
		} else if yym1378 {
			z.DecBinaryUnmarshal(yyv1377)
		} else if !yym1378 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1377)
		} else {
			z.DecFallback(yyv1377, false)
		}
	}
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1379 := &x.LastTransitionTime
		yym1380 := z.DecBinary()
		_ = yym1380
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1379) {
		} else if yym1380 {
			z.DecBinaryUnmarshal(yyv1379)
		} else if !yym1380 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1379)
		} else {
			z.DecFallback(yyv1379, false)
		}
	}
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1374++
		if yyhl1374 {
			yyb1374 = yyj1374 > l
		} else {
			yyb1374 = r.CheckBreak()
		}
		if yyb1374 {
			break
		}
		z.DecStructFieldNotFound(yyj1374-1, "")
	}
	r.ReadEnd()
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1383 := z.EncBinary()
	_ = yym1383
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1384 := z.DecBinary()
	_ = yym1384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1385 := z.EncBinary()
		_ = yym1385
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1386 := !z.EncBinary()
			yy2arr1386 := z.EncBasicHandle().StructToArray
			var yyq1386 [4]bool
			_, _, _ = yysep1386, yyq1386, yy2arr1386
			const yyr1386 bool = false
			yyq1386[0] = x.Kind != ""
			yyq1386[1] = x.APIVersion != ""
			yyq1386[2] = true
			if yyr1386 || yy2arr1386 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1386 int = 1
				for _, b := range yyq1386 {
					if b {
						yynn1386++
					}
				}
				r.EncodeMapStart(yynn1386)
			}
			if yyr1386 || yy2arr1386 {
				if yyq1386[0] {
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1386[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1386 || yy2arr1386 {
				if yyq1386[1] {
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1386[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1386 || yy2arr1386 {
				if yyq1386[2] {
					yy1394 := &x.ListMeta
					yym1395 := z.EncBinary()
					_ = yym1395
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1394) {
					} else {
						z.EncFallback(yy1394)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1386[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1396 := &x.ListMeta
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1396) {
					} else {
						z.EncFallback(yy1396)
					}
				}
			}
			if yyr1386 || yy2arr1386 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1400 := z.EncBinary()
					_ = yym1400
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yysep1386 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1401 := z.DecBinary()
	_ = yym1401
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1402 := r.ReadMapStart()
			if yyl1402 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1402, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1402 := r.ReadArrayStart()
			if yyl1402 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1402, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1403Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1403Slc
	var yyhl1403 bool = l >= 0
	for yyj1403 := 0; ; yyj1403++ {
		if yyhl1403 {
			if yyj1403 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1403Slc = r.DecodeBytes(yys1403Slc, true, true)
		yys1403 := string(yys1403Slc)
		switch yys1403 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1406 := &x.ListMeta
				yym1407 := z.DecBinary()
				_ = yym1407
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1406) {
				} else {
					z.DecFallback(yyv1406, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1408 := &x.Items
				yym1409 := z.DecBinary()
				_ = yym1409
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1408), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1403)
		} // end switch yys1403
	} // end for yyj1403
	if !yyhl1403 {
		r.ReadEnd()
	}
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1410 int
	var yyb1410 bool
	var yyhl1410 bool = l >= 0
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1413 := &x.ListMeta
		yym1414 := z.DecBinary()
		_ = yym1414
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1413) {
		} else {
			z.DecFallback(yyv1413, false)
		}
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1415 := &x.Items
		yym1416 := z.DecBinary()
		_ = yym1416
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1415), d)
		}
	}
	for {
		yyj1410++
		if yyhl1410 {
			yyb1410 = yyj1410 > l
		} else {
			yyb1410 = r.CheckBreak()
		}
		if yyb1410 {
			break
		}
		z.DecStructFieldNotFound(yyj1410-1, "")
	}
	r.ReadEnd()
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1417 := z.EncBinary()
	_ = yym1417
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1418 := z.DecBinary()
	_ = yym1418
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1419 := z.EncBinary()
		_ = yym1419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1420 := !z.EncBinary()
			yy2arr1420 := z.EncBasicHandle().StructToArray
			var yyq1420 [11]bool
			_, _, _ = yysep1420, yyq1420, yy2arr1420
			const yyr1420 bool = false
			yyq1420[2] = x.RestartPolicy != ""
			yyq1420[3] = x.TerminationGracePeriodSeconds != nil
			yyq1420[4] = x.ActiveDeadlineSeconds != nil
			yyq1420[5] = x.DNSPolicy != ""
			yyq1420[6] = len(x.NodeSelector) != 0
			yyq1420[8] = x.NodeName != ""
			yyq1420[9] = x.SecurityContext != nil
			yyq1420[10] = len(x.ImagePullSecrets) != 0
			if yyr1420 || yy2arr1420 {
				r.EncodeArrayStart(11)
			} else {
				var yynn1420 int = 3
				for _, b := range yyq1420 {
					if b {
						yynn1420++
					}
				}
				r.EncodeMapStart(yynn1420)
			}
			if yyr1420 || yy2arr1420 {
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1422 := z.EncBinary()
					_ = yym1422
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1425 := z.EncBinary()
					_ = yym1425
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1426 := z.EncBinary()
					_ = yym1426
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				if yyq1420[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1420[2] {
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1420 || yy2arr1420 {
				if yyq1420[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1429 := *x.TerminationGracePeriodSeconds
						yym1430 := z.EncBinary()
						_ = yym1430
						if false {
						} else {
							r.EncodeInt(int64(yy1429))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1420[3] {
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1431 := *x.TerminationGracePeriodSeconds
						yym1432 := z.EncBinary()
						_ = yym1432
						if false {
						} else {
							r.EncodeInt(int64(yy1431))
						}
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				if yyq1420[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1434 := *x.ActiveDeadlineSeconds
						yym1435 := z.EncBinary()
						_ = yym1435
						if false {
						} else {
							r.EncodeInt(int64(yy1434))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1420[4] {
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1436 := *x.ActiveDeadlineSeconds
						yym1437 := z.EncBinary()
						_ = yym1437
						if false {
						} else {
							r.EncodeInt(int64(yy1436))
						}
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				if yyq1420[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1420[5] {
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1420 || yy2arr1420 {
				if yyq1420[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1440 := z.EncBinary()
						_ = yym1440
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1420[6] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1441 := z.EncBinary()
						_ = yym1441
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				if x.ServiceAccountName == nil {
					r.EncodeNil()
				} else {
					yy1443 := *x.ServiceAccountName
					yym1444 := z.EncBinary()
					_ = yym1444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(yy1443))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				if x.ServiceAccountName == nil {
					r.EncodeNil()
				} else {
					yy1445 := *x.ServiceAccountName
					yym1446 := z.EncBinary()
					_ = yym1446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(yy1445))
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				if yyq1420[8] {
					yym1448 := z.EncBinary()
					_ = yym1448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1420[8] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					yym1449 := z.EncBinary()
					_ = yym1449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				if yyq1420[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1420[9] {
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				if yyq1420[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1452 := z.EncBinary()
						_ = yym1452
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1420[10] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1453 := z.EncBinary()
						_ = yym1453
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep1420 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1454 := z.DecBinary()
	_ = yym1454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1455 := r.ReadMapStart()
			if yyl1455 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1455, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1455 := r.ReadArrayStart()
			if yyl1455 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1456Slc
	var yyhl1456 bool = l >= 0
	for yyj1456 := 0; ; yyj1456++ {
		if yyhl1456 {
			if yyj1456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1456Slc = r.DecodeBytes(yys1456Slc, true, true)
		yys1456 := string(yys1456Slc)
		switch yys1456 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1457 := &x.Volumes
				yym1458 := z.DecBinary()
				_ = yym1458
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1457), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1459 := &x.Containers
				yym1460 := z.DecBinary()
				_ = yym1460
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1459), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1463 := z.DecBinary()
				_ = yym1463
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1465 := z.DecBinary()
				_ = yym1465
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1467 := &x.NodeSelector
				yym1468 := z.DecBinary()
				_ = yym1468
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1467, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				if x.ServiceAccountName != nil {
					x.ServiceAccountName = nil
				}
			} else {
				if x.ServiceAccountName == nil {
					x.ServiceAccountName = new(string)
				}
				yym1470 := z.DecBinary()
				_ = yym1470
				if false {
				} else {
					*((*string)(x.ServiceAccountName)) = r.DecodeString()
				}
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1473 := &x.ImagePullSecrets
				yym1474 := z.DecBinary()
				_ = yym1474
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1473), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1456)
		} // end switch yys1456
	} // end for yyj1456
	if !yyhl1456 {
		r.ReadEnd()
	}
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1475 int
	var yyb1475 bool
	var yyhl1475 bool = l >= 0
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1476 := &x.Volumes
		yym1477 := z.DecBinary()
		_ = yym1477
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1476), d)
		}
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1478 := &x.Containers
		yym1479 := z.DecBinary()
		_ = yym1479
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1478), d)
		}
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1482 := z.DecBinary()
		_ = yym1482
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1484 := z.DecBinary()
		_ = yym1484
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1486 := &x.NodeSelector
		yym1487 := z.DecBinary()
		_ = yym1487
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1486, false, d)
		}
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ServiceAccountName != nil {
			x.ServiceAccountName = nil
		}
	} else {
		if x.ServiceAccountName == nil {
			x.ServiceAccountName = new(string)
		}
		yym1489 := z.DecBinary()
		_ = yym1489
		if false {
		} else {
			*((*string)(x.ServiceAccountName)) = r.DecodeString()
		}
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1475++
	if yyhl1475 {
		yyb1475 = yyj1475 > l
	} else {
		yyb1475 = r.CheckBreak()
	}
	if yyb1475 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1492 := &x.ImagePullSecrets
		yym1493 := z.DecBinary()
		_ = yym1493
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1492), d)
		}
	}
	for {
		yyj1475++
		if yyhl1475 {
			yyb1475 = yyj1475 > l
		} else {
			yyb1475 = r.CheckBreak()
		}
		if yyb1475 {
			break
		}
		z.DecStructFieldNotFound(yyj1475-1, "")
	}
	r.ReadEnd()
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1494 := z.EncBinary()
		_ = yym1494
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1495 := !z.EncBinary()
			yy2arr1495 := z.EncBasicHandle().StructToArray
			var yyq1495 [8]bool
			_, _, _ = yysep1495, yyq1495, yy2arr1495
			const yyr1495 bool = false
			yyq1495[0] = x.HostNetwork != false
			yyq1495[1] = x.HostPID != false
			yyq1495[2] = x.HostIPC != false
			yyq1495[3] = x.SELinuxOptions != nil
			yyq1495[4] = x.RunAsUser != nil
			yyq1495[5] = x.RunAsNonRoot != nil
			yyq1495[6] = len(x.SupplementalGroups) != 0
			yyq1495[7] = x.FSGroup != nil
			if yyr1495 || yy2arr1495 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1495 int = 0
				for _, b := range yyq1495 {
					if b {
						yynn1495++
					}
				}
				r.EncodeMapStart(yynn1495)
			}
			if yyr1495 || yy2arr1495 {
				if yyq1495[0] {
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1495[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				if yyq1495[1] {
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1495[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				if yyq1495[2] {
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1495[2] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				if yyq1495[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[3] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				if yyq1495[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1507 := *x.RunAsUser
						yym1508 := z.EncBinary()
						_ = yym1508
						if false {
						} else {
							r.EncodeInt(int64(yy1507))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1509 := *x.RunAsUser
						yym1510 := z.EncBinary()
						_ = yym1510
						if false {
						} else {
							r.EncodeInt(int64(yy1509))
						}
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				if yyq1495[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1512 := *x.RunAsNonRoot
						yym1513 := z.EncBinary()
						_ = yym1513
						if false {
						} else {
							r.EncodeBool(bool(yy1512))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[5] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1514 := *x.RunAsNonRoot
						yym1515 := z.EncBinary()
						_ = yym1515
						if false {
						} else {
							r.EncodeBool(bool(yy1514))
						}
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				if yyq1495[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1517 := z.EncBinary()
						_ = yym1517
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[6] {
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1518 := z.EncBinary()
						_ = yym1518
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				if yyq1495[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1520 := *x.FSGroup
						yym1521 := z.EncBinary()
						_ = yym1521
						if false {
						} else {
							r.EncodeInt(int64(yy1520))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1495[7] {
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1522 := *x.FSGroup
						yym1523 := z.EncBinary()
						_ = yym1523
						if false {
						} else {
							r.EncodeInt(int64(yy1522))
						}
					}
				}
			}
			if yysep1495 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1524 := z.DecBinary()
	_ = yym1524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1525 := r.ReadMapStart()
			if yyl1525 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1525, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1525 := r.ReadArrayStart()
			if yyl1525 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1526Slc
	var yyhl1526 bool = l >= 0
	for yyj1526 := 0; ; yyj1526++ {
		if yyhl1526 {
			if yyj1526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1526Slc = r.DecodeBytes(yys1526Slc, true, true)
		yys1526 := string(yys1526Slc)
		switch yys1526 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1532 := z.DecBinary()
				_ = yym1532
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1534 := z.DecBinary()
				_ = yym1534
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1535 := &x.SupplementalGroups
				yym1536 := z.DecBinary()
				_ = yym1536
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1535, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1538 := z.DecBinary()
				_ = yym1538
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1526)
		} // end switch yys1526
	} // end for yyj1526
	if !yyhl1526 {
		r.ReadEnd()
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1539 int
	var yyb1539 bool
	var yyhl1539 bool = l >= 0
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1545 := z.DecBinary()
		_ = yym1545
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1547 := z.DecBinary()
		_ = yym1547
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1548 := &x.SupplementalGroups
		yym1549 := z.DecBinary()
		_ = yym1549
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1548, false, d)
		}
	}
	yyj1539++
	if yyhl1539 {
		yyb1539 = yyj1539 > l
	} else {
		yyb1539 = r.CheckBreak()
	}
	if yyb1539 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1551 := z.DecBinary()
		_ = yym1551
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1539++
		if yyhl1539 {
			yyb1539 = yyj1539 > l
		} else {
			yyb1539 = r.CheckBreak()
		}
		if yyb1539 {
			break
		}
		z.DecStructFieldNotFound(yyj1539-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1552 := z.EncBinary()
		_ = yym1552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1553 := !z.EncBinary()
			yy2arr1553 := z.EncBasicHandle().StructToArray
			var yyq1553 [8]bool
			_, _, _ = yysep1553, yyq1553, yy2arr1553
			const yyr1553 bool = false
			yyq1553[0] = x.Phase != ""
			yyq1553[1] = len(x.Conditions) != 0
			yyq1553[2] = x.Message != ""
			yyq1553[3] = x.Reason != ""
			yyq1553[4] = x.HostIP != ""
			yyq1553[5] = x.PodIP != ""
			yyq1553[6] = x.StartTime != nil
			yyq1553[7] = len(x.ContainerStatuses) != 0
			if yyr1553 || yy2arr1553 {
				r.EncodeArrayStart(8)
			} else {
				var yynn1553 int = 0
				for _, b := range yyq1553 {
					if b {
						yynn1553++
					}
				}
				r.EncodeMapStart(yynn1553)
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1553[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1556 := z.EncBinary()
						_ = yym1556
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1553[1] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1557 := z.EncBinary()
						_ = yym1557
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[2] {
					yym1559 := z.EncBinary()
					_ = yym1559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1553[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym1560 := z.EncBinary()
					_ = yym1560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[3] {
					yym1562 := z.EncBinary()
					_ = yym1562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1553[3] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym1563 := z.EncBinary()
					_ = yym1563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[4] {
					yym1565 := z.EncBinary()
					_ = yym1565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1553[4] {
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					yym1566 := z.EncBinary()
					_ = yym1566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[5] {
					yym1568 := z.EncBinary()
					_ = yym1568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1553[5] {
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					yym1569 := z.EncBinary()
					_ = yym1569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1571 := z.EncBinary()
						_ = yym1571
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1571 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1571 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1553[6] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1572 := z.EncBinary()
						_ = yym1572
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1572 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1572 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1553 || yy2arr1553 {
				if yyq1553[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1574 := z.EncBinary()
						_ = yym1574
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1553[7] {
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1575 := z.EncBinary()
						_ = yym1575
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yysep1553 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1576 := z.DecBinary()
	_ = yym1576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1577 := r.ReadMapStart()
			if yyl1577 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1577, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1577 := r.ReadArrayStart()
			if yyl1577 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1578Slc
	var yyhl1578 bool = l >= 0
	for yyj1578 := 0; ; yyj1578++ {
		if yyhl1578 {
			if yyj1578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1578Slc = r.DecodeBytes(yys1578Slc, true, true)
		yys1578 := string(yys1578Slc)
		switch yys1578 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1580 := &x.Conditions
				yym1581 := z.DecBinary()
				_ = yym1581
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1580), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1587 := z.DecBinary()
				_ = yym1587
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1587 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1587 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1588 := &x.ContainerStatuses
				yym1589 := z.DecBinary()
				_ = yym1589
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1588), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1578)
		} // end switch yys1578
	} // end for yyj1578
	if !yyhl1578 {
		r.ReadEnd()
	}
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1590 int
	var yyb1590 bool
	var yyhl1590 bool = l >= 0
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1592 := &x.Conditions
		yym1593 := z.DecBinary()
		_ = yym1593
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1592), d)
		}
	}
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1599 := z.DecBinary()
		_ = yym1599
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1599 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1599 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1590++
	if yyhl1590 {
		yyb1590 = yyj1590 > l
	} else {
		yyb1590 = r.CheckBreak()
	}
	if yyb1590 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1600 := &x.ContainerStatuses
		yym1601 := z.DecBinary()
		_ = yym1601
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1600), d)
		}
	}
	for {
		yyj1590++
		if yyhl1590 {
			yyb1590 = yyj1590 > l
		} else {
			yyb1590 = r.CheckBreak()
		}
		if yyb1590 {
			break
		}
		z.DecStructFieldNotFound(yyj1590-1, "")
	}
	r.ReadEnd()
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1602 := z.EncBinary()
		_ = yym1602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1603 := !z.EncBinary()
			yy2arr1603 := z.EncBasicHandle().StructToArray
			var yyq1603 [4]bool
			_, _, _ = yysep1603, yyq1603, yy2arr1603
			const yyr1603 bool = false
			yyq1603[0] = x.Kind != ""
			yyq1603[1] = x.APIVersion != ""
			yyq1603[2] = true
			yyq1603[3] = true
			if yyr1603 || yy2arr1603 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1603 int = 0
				for _, b := range yyq1603 {
					if b {
						yynn1603++
					}
				}
				r.EncodeMapStart(yynn1603)
			}
			if yyr1603 || yy2arr1603 {
				if yyq1603[0] {
					yym1605 := z.EncBinary()
					_ = yym1605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1603[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1606 := z.EncBinary()
					_ = yym1606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1603 || yy2arr1603 {
				if yyq1603[1] {
					yym1608 := z.EncBinary()
					_ = yym1608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1603[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1609 := z.EncBinary()
					_ = yym1609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1603 || yy2arr1603 {
				if yyq1603[2] {
					yy1611 := &x.ObjectMeta
					yy1611.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1603[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1612 := &x.ObjectMeta
					yy1612.CodecEncodeSelf(e)
				}
			}
			if yyr1603 || yy2arr1603 {
				if yyq1603[3] {
					yy1614 := &x.Status
					yy1614.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1603[3] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1615 := &x.Status
					yy1615.CodecEncodeSelf(e)
				}
			}
			if yysep1603 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1616 := z.DecBinary()
	_ = yym1616
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1617 := r.ReadMapStart()
			if yyl1617 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1617, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1617 := r.ReadArrayStart()
			if yyl1617 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1617, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1618Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1618Slc
	var yyhl1618 bool = l >= 0
	for yyj1618 := 0; ; yyj1618++ {
		if yyhl1618 {
			if yyj1618 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1618Slc = r.DecodeBytes(yys1618Slc, true, true)
		yys1618 := string(yys1618Slc)
		switch yys1618 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1621 := &x.ObjectMeta
				yyv1621.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1622 := &x.Status
				yyv1622.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1618)
		} // end switch yys1618
	} // end for yyj1618
	if !yyhl1618 {
		r.ReadEnd()
	}
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1623 int
	var yyb1623 bool
	var yyhl1623 bool = l >= 0
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1626 := &x.ObjectMeta
		yyv1626.CodecDecodeSelf(d)
	}
	yyj1623++
	if yyhl1623 {
		yyb1623 = yyj1623 > l
	} else {
		yyb1623 = r.CheckBreak()
	}
	if yyb1623 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1627 := &x.Status
		yyv1627.CodecDecodeSelf(d)
	}
	for {
		yyj1623++
		if yyhl1623 {
			yyb1623 = yyj1623 > l
		} else {
			yyb1623 = r.CheckBreak()
		}
		if yyb1623 {
			break
		}
		z.DecStructFieldNotFound(yyj1623-1, "")
	}
	r.ReadEnd()
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1628 := z.EncBinary()
		_ = yym1628
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1629 := !z.EncBinary()
			yy2arr1629 := z.EncBasicHandle().StructToArray
			var yyq1629 [5]bool
			_, _, _ = yysep1629, yyq1629, yy2arr1629
			const yyr1629 bool = false
			yyq1629[0] = x.Kind != ""
			yyq1629[1] = x.APIVersion != ""
			yyq1629[2] = true
			yyq1629[3] = true
			yyq1629[4] = true
			if yyr1629 || yy2arr1629 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1629 int = 0
				for _, b := range yyq1629 {
					if b {
						yynn1629++
					}
				}
				r.EncodeMapStart(yynn1629)
			}
			if yyr1629 || yy2arr1629 {
				if yyq1629[0] {
					yym1631 := z.EncBinary()
					_ = yym1631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1629[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1632 := z.EncBinary()
					_ = yym1632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1629 || yy2arr1629 {
				if yyq1629[1] {
					yym1634 := z.EncBinary()
					_ = yym1634
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1629[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1635 := z.EncBinary()
					_ = yym1635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1629 || yy2arr1629 {
				if yyq1629[2] {
					yy1637 := &x.ObjectMeta
					yy1637.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1629[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1638 := &x.ObjectMeta
					yy1638.CodecEncodeSelf(e)
				}
			}
			if yyr1629 || yy2arr1629 {
				if yyq1629[3] {
					yy1640 := &x.Spec
					yy1640.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1629[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1641 := &x.Spec
					yy1641.CodecEncodeSelf(e)
				}
			}
			if yyr1629 || yy2arr1629 {
				if yyq1629[4] {
					yy1643 := &x.Status
					yy1643.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1629[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1644 := &x.Status
					yy1644.CodecEncodeSelf(e)
				}
			}
			if yysep1629 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1645 := z.DecBinary()
	_ = yym1645
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1646 := r.ReadMapStart()
			if yyl1646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1646, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1646 := r.ReadArrayStart()
			if yyl1646 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1646, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1647Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1647Slc
	var yyhl1647 bool = l >= 0
	for yyj1647 := 0; ; yyj1647++ {
		if yyhl1647 {
			if yyj1647 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1647Slc = r.DecodeBytes(yys1647Slc, true, true)
		yys1647 := string(yys1647Slc)
		switch yys1647 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1650 := &x.ObjectMeta
				yyv1650.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1651 := &x.Spec
				yyv1651.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1652 := &x.Status
				yyv1652.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1647)
		} // end switch yys1647
	} // end for yyj1647
	if !yyhl1647 {
		r.ReadEnd()
	}
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1653 int
	var yyb1653 bool
	var yyhl1653 bool = l >= 0
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1656 := &x.ObjectMeta
		yyv1656.CodecDecodeSelf(d)
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1657 := &x.Spec
		yyv1657.CodecDecodeSelf(d)
	}
	yyj1653++
	if yyhl1653 {
		yyb1653 = yyj1653 > l
	} else {
		yyb1653 = r.CheckBreak()
	}
	if yyb1653 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1658 := &x.Status
		yyv1658.CodecDecodeSelf(d)
	}
	for {
		yyj1653++
		if yyhl1653 {
			yyb1653 = yyj1653 > l
		} else {
			yyb1653 = r.CheckBreak()
		}
		if yyb1653 {
			break
		}
		z.DecStructFieldNotFound(yyj1653-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1659 := z.EncBinary()
		_ = yym1659
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1660 := !z.EncBinary()
			yy2arr1660 := z.EncBasicHandle().StructToArray
			var yyq1660 [2]bool
			_, _, _ = yysep1660, yyq1660, yy2arr1660
			const yyr1660 bool = false
			yyq1660[0] = true
			yyq1660[1] = true
			if yyr1660 || yy2arr1660 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1660 int = 0
				for _, b := range yyq1660 {
					if b {
						yynn1660++
					}
				}
				r.EncodeMapStart(yynn1660)
			}
			if yyr1660 || yy2arr1660 {
				if yyq1660[0] {
					yy1662 := &x.ObjectMeta
					yy1662.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1660[0] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1663 := &x.ObjectMeta
					yy1663.CodecEncodeSelf(e)
				}
			}
			if yyr1660 || yy2arr1660 {
				if yyq1660[1] {
					yy1665 := &x.Spec
					yy1665.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1660[1] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1666 := &x.Spec
					yy1666.CodecEncodeSelf(e)
				}
			}
			if yysep1660 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1667 := z.DecBinary()
	_ = yym1667
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1668 := r.ReadMapStart()
			if yyl1668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1668, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1668 := r.ReadArrayStart()
			if yyl1668 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1668, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1669Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1669Slc
	var yyhl1669 bool = l >= 0
	for yyj1669 := 0; ; yyj1669++ {
		if yyhl1669 {
			if yyj1669 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1669Slc = r.DecodeBytes(yys1669Slc, true, true)
		yys1669 := string(yys1669Slc)
		switch yys1669 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1670 := &x.ObjectMeta
				yyv1670.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1671 := &x.Spec
				yyv1671.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1669)
		} // end switch yys1669
	} // end for yyj1669
	if !yyhl1669 {
		r.ReadEnd()
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1672 int
	var yyb1672 bool
	var yyhl1672 bool = l >= 0
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1673 := &x.ObjectMeta
		yyv1673.CodecDecodeSelf(d)
	}
	yyj1672++
	if yyhl1672 {
		yyb1672 = yyj1672 > l
	} else {
		yyb1672 = r.CheckBreak()
	}
	if yyb1672 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1674 := &x.Spec
		yyv1674.CodecDecodeSelf(d)
	}
	for {
		yyj1672++
		if yyhl1672 {
			yyb1672 = yyj1672 > l
		} else {
			yyb1672 = r.CheckBreak()
		}
		if yyb1672 {
			break
		}
		z.DecStructFieldNotFound(yyj1672-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1675 := z.EncBinary()
		_ = yym1675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1676 := !z.EncBinary()
			yy2arr1676 := z.EncBasicHandle().StructToArray
			var yyq1676 [4]bool
			_, _, _ = yysep1676, yyq1676, yy2arr1676
			const yyr1676 bool = false
			yyq1676[0] = x.Kind != ""
			yyq1676[1] = x.APIVersion != ""
			yyq1676[2] = true
			yyq1676[3] = true
			if yyr1676 || yy2arr1676 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1676 int = 0
				for _, b := range yyq1676 {
					if b {
						yynn1676++
					}
				}
				r.EncodeMapStart(yynn1676)
			}
			if yyr1676 || yy2arr1676 {
				if yyq1676[0] {
					yym1678 := z.EncBinary()
					_ = yym1678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1676[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1679 := z.EncBinary()
					_ = yym1679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1676 || yy2arr1676 {
				if yyq1676[1] {
					yym1681 := z.EncBinary()
					_ = yym1681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1676[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1682 := z.EncBinary()
					_ = yym1682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1676 || yy2arr1676 {
				if yyq1676[2] {
					yy1684 := &x.ObjectMeta
					yy1684.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1676[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1685 := &x.ObjectMeta
					yy1685.CodecEncodeSelf(e)
				}
			}
			if yyr1676 || yy2arr1676 {
				if yyq1676[3] {
					yy1687 := &x.Template
					yy1687.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1676[3] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					yy1688 := &x.Template
					yy1688.CodecEncodeSelf(e)
				}
			}
			if yysep1676 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1689 := z.DecBinary()
	_ = yym1689
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1690 := r.ReadMapStart()
			if yyl1690 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1690, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1690 := r.ReadArrayStart()
			if yyl1690 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1690, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1691Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1691Slc
	var yyhl1691 bool = l >= 0
	for yyj1691 := 0; ; yyj1691++ {
		if yyhl1691 {
			if yyj1691 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1691Slc = r.DecodeBytes(yys1691Slc, true, true)
		yys1691 := string(yys1691Slc)
		switch yys1691 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1694 := &x.ObjectMeta
				yyv1694.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1695 := &x.Template
				yyv1695.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1691)
		} // end switch yys1691
	} // end for yyj1691
	if !yyhl1691 {
		r.ReadEnd()
	}
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1696 int
	var yyb1696 bool
	var yyhl1696 bool = l >= 0
	yyj1696++
	if yyhl1696 {
		yyb1696 = yyj1696 > l
	} else {
		yyb1696 = r.CheckBreak()
	}
	if yyb1696 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1696++
	if yyhl1696 {
		yyb1696 = yyj1696 > l
	} else {
		yyb1696 = r.CheckBreak()
	}
	if yyb1696 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1696++
	if yyhl1696 {
		yyb1696 = yyj1696 > l
	} else {
		yyb1696 = r.CheckBreak()
	}
	if yyb1696 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1699 := &x.ObjectMeta
		yyv1699.CodecDecodeSelf(d)
	}
	yyj1696++
	if yyhl1696 {
		yyb1696 = yyj1696 > l
	} else {
		yyb1696 = r.CheckBreak()
	}
	if yyb1696 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1700 := &x.Template
		yyv1700.CodecDecodeSelf(d)
	}
	for {
		yyj1696++
		if yyhl1696 {
			yyb1696 = yyj1696 > l
		} else {
			yyb1696 = r.CheckBreak()
		}
		if yyb1696 {
			break
		}
		z.DecStructFieldNotFound(yyj1696-1, "")
	}
	r.ReadEnd()
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1701 := z.EncBinary()
		_ = yym1701
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1702 := !z.EncBinary()
			yy2arr1702 := z.EncBasicHandle().StructToArray
			var yyq1702 [4]bool
			_, _, _ = yysep1702, yyq1702, yy2arr1702
			const yyr1702 bool = false
			yyq1702[0] = x.Kind != ""
			yyq1702[1] = x.APIVersion != ""
			yyq1702[2] = true
			if yyr1702 || yy2arr1702 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1702 int = 1
				for _, b := range yyq1702 {
					if b {
						yynn1702++
					}
				}
				r.EncodeMapStart(yynn1702)
			}
			if yyr1702 || yy2arr1702 {
				if yyq1702[0] {
					yym1704 := z.EncBinary()
					_ = yym1704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1702[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1705 := z.EncBinary()
					_ = yym1705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				if yyq1702[1] {
					yym1707 := z.EncBinary()
					_ = yym1707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1702[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1708 := z.EncBinary()
					_ = yym1708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				if yyq1702[2] {
					yy1710 := &x.ListMeta
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1710) {
					} else {
						z.EncFallback(yy1710)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1702[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1712 := &x.ListMeta
					yym1713 := z.EncBinary()
					_ = yym1713
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1712) {
					} else {
						z.EncFallback(yy1712)
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1715 := z.EncBinary()
					_ = yym1715
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1716 := z.EncBinary()
					_ = yym1716
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yysep1702 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1717 := z.DecBinary()
	_ = yym1717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1718 := r.ReadMapStart()
			if yyl1718 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1718, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1718 := r.ReadArrayStart()
			if yyl1718 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1718, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1719Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1719Slc
	var yyhl1719 bool = l >= 0
	for yyj1719 := 0; ; yyj1719++ {
		if yyhl1719 {
			if yyj1719 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1719Slc = r.DecodeBytes(yys1719Slc, true, true)
		yys1719 := string(yys1719Slc)
		switch yys1719 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1722 := &x.ListMeta
				yym1723 := z.DecBinary()
				_ = yym1723
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1722) {
				} else {
					z.DecFallback(yyv1722, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1724 := &x.Items
				yym1725 := z.DecBinary()
				_ = yym1725
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1724), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1719)
		} // end switch yys1719
	} // end for yyj1719
	if !yyhl1719 {
		r.ReadEnd()
	}
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1726 int
	var yyb1726 bool
	var yyhl1726 bool = l >= 0
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1729 := &x.ListMeta
		yym1730 := z.DecBinary()
		_ = yym1730
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1729) {
		} else {
			z.DecFallback(yyv1729, false)
		}
	}
	yyj1726++
	if yyhl1726 {
		yyb1726 = yyj1726 > l
	} else {
		yyb1726 = r.CheckBreak()
	}
	if yyb1726 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1731 := &x.Items
		yym1732 := z.DecBinary()
		_ = yym1732
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1731), d)
		}
	}
	for {
		yyj1726++
		if yyhl1726 {
			yyb1726 = yyj1726 > l
		} else {
			yyb1726 = r.CheckBreak()
		}
		if yyb1726 {
			break
		}
		z.DecStructFieldNotFound(yyj1726-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1733 := z.EncBinary()
		_ = yym1733
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1734 := !z.EncBinary()
			yy2arr1734 := z.EncBasicHandle().StructToArray
			var yyq1734 [3]bool
			_, _, _ = yysep1734, yyq1734, yy2arr1734
			const yyr1734 bool = false
			yyq1734[2] = x.Template != nil
			if yyr1734 || yy2arr1734 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1734 int = 2
				for _, b := range yyq1734 {
					if b {
						yynn1734++
					}
				}
				r.EncodeMapStart(yynn1734)
			}
			if yyr1734 || yy2arr1734 {
				yym1736 := z.EncBinary()
				_ = yym1736
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1737 := z.EncBinary()
				_ = yym1737
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1734 || yy2arr1734 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1739 := z.EncBinary()
					_ = yym1739
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1740 := z.EncBinary()
					_ = yym1740
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1734 || yy2arr1734 {
				if yyq1734[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1734[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep1734 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1742 := z.DecBinary()
	_ = yym1742
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1743 := r.ReadMapStart()
			if yyl1743 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1743, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1743 := r.ReadArrayStart()
			if yyl1743 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1743, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1744Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1744Slc
	var yyhl1744 bool = l >= 0
	for yyj1744 := 0; ; yyj1744++ {
		if yyhl1744 {
			if yyj1744 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1744Slc = r.DecodeBytes(yys1744Slc, true, true)
		yys1744 := string(yys1744Slc)
		switch yys1744 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1746 := &x.Selector
				yym1747 := z.DecBinary()
				_ = yym1747
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1746, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1744)
		} // end switch yys1744
	} // end for yyj1744
	if !yyhl1744 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1749 int
	var yyb1749 bool
	var yyhl1749 bool = l >= 0
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1751 := &x.Selector
		yym1752 := z.DecBinary()
		_ = yym1752
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1751, false, d)
		}
	}
	yyj1749++
	if yyhl1749 {
		yyb1749 = yyj1749 > l
	} else {
		yyb1749 = r.CheckBreak()
	}
	if yyb1749 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1749++
		if yyhl1749 {
			yyb1749 = yyj1749 > l
		} else {
			yyb1749 = r.CheckBreak()
		}
		if yyb1749 {
			break
		}
		z.DecStructFieldNotFound(yyj1749-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1754 := z.EncBinary()
		_ = yym1754
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1755 := !z.EncBinary()
			yy2arr1755 := z.EncBasicHandle().StructToArray
			var yyq1755 [2]bool
			_, _, _ = yysep1755, yyq1755, yy2arr1755
			const yyr1755 bool = false
			yyq1755[1] = x.ObservedGeneration != 0
			if yyr1755 || yy2arr1755 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1755 int = 1
				for _, b := range yyq1755 {
					if b {
						yynn1755++
					}
				}
				r.EncodeMapStart(yynn1755)
			}
			if yyr1755 || yy2arr1755 {
				yym1757 := z.EncBinary()
				_ = yym1757
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym1758 := z.EncBinary()
				_ = yym1758
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1755 || yy2arr1755 {
				if yyq1755[1] {
					yym1760 := z.EncBinary()
					_ = yym1760
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1755[1] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					yym1761 := z.EncBinary()
					_ = yym1761
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yysep1755 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1762 := z.DecBinary()
	_ = yym1762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1763 := r.ReadMapStart()
			if yyl1763 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1763, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1763 := r.ReadArrayStart()
			if yyl1763 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1763, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1764Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1764Slc
	var yyhl1764 bool = l >= 0
	for yyj1764 := 0; ; yyj1764++ {
		if yyhl1764 {
			if yyj1764 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1764Slc = r.DecodeBytes(yys1764Slc, true, true)
		yys1764 := string(yys1764Slc)
		switch yys1764 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1764)
		} // end switch yys1764
	} // end for yyj1764
	if !yyhl1764 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1767 int
	var yyb1767 bool
	var yyhl1767 bool = l >= 0
	yyj1767++
	if yyhl1767 {
		yyb1767 = yyj1767 > l
	} else {
		yyb1767 = r.CheckBreak()
	}
	if yyb1767 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1767++
	if yyhl1767 {
		yyb1767 = yyj1767 > l
	} else {
		yyb1767 = r.CheckBreak()
	}
	if yyb1767 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1767++
		if yyhl1767 {
			yyb1767 = yyj1767 > l
		} else {
			yyb1767 = r.CheckBreak()
		}
		if yyb1767 {
			break
		}
		z.DecStructFieldNotFound(yyj1767-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1770 := z.EncBinary()
		_ = yym1770
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1771 := !z.EncBinary()
			yy2arr1771 := z.EncBasicHandle().StructToArray
			var yyq1771 [5]bool
			_, _, _ = yysep1771, yyq1771, yy2arr1771
			const yyr1771 bool = false
			yyq1771[0] = x.Kind != ""
			yyq1771[1] = x.APIVersion != ""
			yyq1771[2] = true
			yyq1771[3] = true
			yyq1771[4] = true
			if yyr1771 || yy2arr1771 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1771 int = 0
				for _, b := range yyq1771 {
					if b {
						yynn1771++
					}
				}
				r.EncodeMapStart(yynn1771)
			}
			if yyr1771 || yy2arr1771 {
				if yyq1771[0] {
					yym1773 := z.EncBinary()
					_ = yym1773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1771[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1774 := z.EncBinary()
					_ = yym1774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1771 || yy2arr1771 {
				if yyq1771[1] {
					yym1776 := z.EncBinary()
					_ = yym1776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1771[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1777 := z.EncBinary()
					_ = yym1777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1771 || yy2arr1771 {
				if yyq1771[2] {
					yy1779 := &x.ObjectMeta
					yy1779.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1771[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1780 := &x.ObjectMeta
					yy1780.CodecEncodeSelf(e)
				}
			}
			if yyr1771 || yy2arr1771 {
				if yyq1771[3] {
					yy1782 := &x.Spec
					yy1782.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1771[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1783 := &x.Spec
					yy1783.CodecEncodeSelf(e)
				}
			}
			if yyr1771 || yy2arr1771 {
				if yyq1771[4] {
					yy1785 := &x.Status
					yy1785.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1771[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy1786 := &x.Status
					yy1786.CodecEncodeSelf(e)
				}
			}
			if yysep1771 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1787 := z.DecBinary()
	_ = yym1787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1788 := r.ReadMapStart()
			if yyl1788 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1788, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1788 := r.ReadArrayStart()
			if yyl1788 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1788, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1789Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1789Slc
	var yyhl1789 bool = l >= 0
	for yyj1789 := 0; ; yyj1789++ {
		if yyhl1789 {
			if yyj1789 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1789Slc = r.DecodeBytes(yys1789Slc, true, true)
		yys1789 := string(yys1789Slc)
		switch yys1789 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1792 := &x.ObjectMeta
				yyv1792.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1793 := &x.Spec
				yyv1793.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1794 := &x.Status
				yyv1794.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1789)
		} // end switch yys1789
	} // end for yyj1789
	if !yyhl1789 {
		r.ReadEnd()
	}
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1795 int
	var yyb1795 bool
	var yyhl1795 bool = l >= 0
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1798 := &x.ObjectMeta
		yyv1798.CodecDecodeSelf(d)
	}
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1799 := &x.Spec
		yyv1799.CodecDecodeSelf(d)
	}
	yyj1795++
	if yyhl1795 {
		yyb1795 = yyj1795 > l
	} else {
		yyb1795 = r.CheckBreak()
	}
	if yyb1795 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1800 := &x.Status
		yyv1800.CodecDecodeSelf(d)
	}
	for {
		yyj1795++
		if yyhl1795 {
			yyb1795 = yyj1795 > l
		} else {
			yyb1795 = r.CheckBreak()
		}
		if yyb1795 {
			break
		}
		z.DecStructFieldNotFound(yyj1795-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1801 := z.EncBinary()
		_ = yym1801
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1802 := !z.EncBinary()
			yy2arr1802 := z.EncBasicHandle().StructToArray
			var yyq1802 [4]bool
			_, _, _ = yysep1802, yyq1802, yy2arr1802
			const yyr1802 bool = false
			yyq1802[0] = x.Kind != ""
			yyq1802[1] = x.APIVersion != ""
			yyq1802[2] = true
			if yyr1802 || yy2arr1802 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1802 int = 1
				for _, b := range yyq1802 {
					if b {
						yynn1802++
					}
				}
				r.EncodeMapStart(yynn1802)
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[0] {
					yym1804 := z.EncBinary()
					_ = yym1804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1802[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1805 := z.EncBinary()
					_ = yym1805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[1] {
					yym1807 := z.EncBinary()
					_ = yym1807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1802[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1808 := z.EncBinary()
					_ = yym1808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1802 || yy2arr1802 {
				if yyq1802[2] {
					yy1810 := &x.ListMeta
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1810) {
					} else {
						z.EncFallback(yy1810)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1802[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1812 := &x.ListMeta
					yym1813 := z.EncBinary()
					_ = yym1813
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1812) {
					} else {
						z.EncFallback(yy1812)
					}
				}
			}
			if yyr1802 || yy2arr1802 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1815 := z.EncBinary()
					_ = yym1815
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1816 := z.EncBinary()
					_ = yym1816
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yysep1802 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1817 := z.DecBinary()
	_ = yym1817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1818 := r.ReadMapStart()
			if yyl1818 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1818, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1818 := r.ReadArrayStart()
			if yyl1818 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1819Slc
	var yyhl1819 bool = l >= 0
	for yyj1819 := 0; ; yyj1819++ {
		if yyhl1819 {
			if yyj1819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1819Slc = r.DecodeBytes(yys1819Slc, true, true)
		yys1819 := string(yys1819Slc)
		switch yys1819 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1822 := &x.ListMeta
				yym1823 := z.DecBinary()
				_ = yym1823
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1822) {
				} else {
					z.DecFallback(yyv1822, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1824 := &x.Items
				yym1825 := z.DecBinary()
				_ = yym1825
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1824), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1819)
		} // end switch yys1819
	} // end for yyj1819
	if !yyhl1819 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1826 int
	var yyb1826 bool
	var yyhl1826 bool = l >= 0
	yyj1826++
	if yyhl1826 {
		yyb1826 = yyj1826 > l
	} else {
		yyb1826 = r.CheckBreak()
	}
	if yyb1826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1826++
	if yyhl1826 {
		yyb1826 = yyj1826 > l
	} else {
		yyb1826 = r.CheckBreak()
	}
	if yyb1826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1826++
	if yyhl1826 {
		yyb1826 = yyj1826 > l
	} else {
		yyb1826 = r.CheckBreak()
	}
	if yyb1826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1829 := &x.ListMeta
		yym1830 := z.DecBinary()
		_ = yym1830
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1829) {
		} else {
			z.DecFallback(yyv1829, false)
		}
	}
	yyj1826++
	if yyhl1826 {
		yyb1826 = yyj1826 > l
	} else {
		yyb1826 = r.CheckBreak()
	}
	if yyb1826 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1831 := &x.Items
		yym1832 := z.DecBinary()
		_ = yym1832
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1831), d)
		}
	}
	for {
		yyj1826++
		if yyhl1826 {
			yyb1826 = yyj1826 > l
		} else {
			yyb1826 = r.CheckBreak()
		}
		if yyb1826 {
			break
		}
		z.DecStructFieldNotFound(yyj1826-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1833 := z.EncBinary()
		_ = yym1833
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1834 := !z.EncBinary()
			yy2arr1834 := z.EncBasicHandle().StructToArray
			var yyq1834 [4]bool
			_, _, _ = yysep1834, yyq1834, yy2arr1834
			const yyr1834 bool = false
			yyq1834[0] = x.Kind != ""
			yyq1834[1] = x.APIVersion != ""
			yyq1834[2] = true
			if yyr1834 || yy2arr1834 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1834 int = 1
				for _, b := range yyq1834 {
					if b {
						yynn1834++
					}
				}
				r.EncodeMapStart(yynn1834)
			}
			if yyr1834 || yy2arr1834 {
				if yyq1834[0] {
					yym1836 := z.EncBinary()
					_ = yym1836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1834[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1837 := z.EncBinary()
					_ = yym1837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1834 || yy2arr1834 {
				if yyq1834[1] {
					yym1839 := z.EncBinary()
					_ = yym1839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1834[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1840 := z.EncBinary()
					_ = yym1840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1834 || yy2arr1834 {
				if yyq1834[2] {
					yy1842 := &x.ListMeta
					yym1843 := z.EncBinary()
					_ = yym1843
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1842) {
					} else {
						z.EncFallback(yy1842)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1834[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1844 := &x.ListMeta
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1844) {
					} else {
						z.EncFallback(yy1844)
					}
				}
			}
			if yyr1834 || yy2arr1834 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1847 := z.EncBinary()
					_ = yym1847
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yysep1834 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1849 := z.DecBinary()
	_ = yym1849
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1850 := r.ReadMapStart()
			if yyl1850 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1850, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1850 := r.ReadArrayStart()
			if yyl1850 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1850, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1851Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1851Slc
	var yyhl1851 bool = l >= 0
	for yyj1851 := 0; ; yyj1851++ {
		if yyhl1851 {
			if yyj1851 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1851Slc = r.DecodeBytes(yys1851Slc, true, true)
		yys1851 := string(yys1851Slc)
		switch yys1851 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1854 := &x.ListMeta
				yym1855 := z.DecBinary()
				_ = yym1855
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1854) {
				} else {
					z.DecFallback(yyv1854, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1856 := &x.Items
				yym1857 := z.DecBinary()
				_ = yym1857
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1856), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1851)
		} // end switch yys1851
	} // end for yyj1851
	if !yyhl1851 {
		r.ReadEnd()
	}
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1858 int
	var yyb1858 bool
	var yyhl1858 bool = l >= 0
	yyj1858++
	if yyhl1858 {
		yyb1858 = yyj1858 > l
	} else {
		yyb1858 = r.CheckBreak()
	}
	if yyb1858 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1858++
	if yyhl1858 {
		yyb1858 = yyj1858 > l
	} else {
		yyb1858 = r.CheckBreak()
	}
	if yyb1858 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1858++
	if yyhl1858 {
		yyb1858 = yyj1858 > l
	} else {
		yyb1858 = r.CheckBreak()
	}
	if yyb1858 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1861 := &x.ListMeta
		yym1862 := z.DecBinary()
		_ = yym1862
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1861) {
		} else {
			z.DecFallback(yyv1861, false)
		}
	}
	yyj1858++
	if yyhl1858 {
		yyb1858 = yyj1858 > l
	} else {
		yyb1858 = r.CheckBreak()
	}
	if yyb1858 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1863 := &x.Items
		yym1864 := z.DecBinary()
		_ = yym1864
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1863), d)
		}
	}
	for {
		yyj1858++
		if yyhl1858 {
			yyb1858 = yyj1858 > l
		} else {
			yyb1858 = r.CheckBreak()
		}
		if yyb1858 {
			break
		}
		z.DecStructFieldNotFound(yyj1858-1, "")
	}
	r.ReadEnd()
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1865 := z.EncBinary()
	_ = yym1865
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1866 := z.DecBinary()
	_ = yym1866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1867 := z.EncBinary()
	_ = yym1867
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1868 := z.DecBinary()
	_ = yym1868
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1869 := z.EncBinary()
		_ = yym1869
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1870 := !z.EncBinary()
			yy2arr1870 := z.EncBasicHandle().StructToArray
			var yyq1870 [1]bool
			_, _, _ = yysep1870, yyq1870, yy2arr1870
			const yyr1870 bool = false
			yyq1870[0] = true
			if yyr1870 || yy2arr1870 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1870 int = 0
				for _, b := range yyq1870 {
					if b {
						yynn1870++
					}
				}
				r.EncodeMapStart(yynn1870)
			}
			if yyr1870 || yy2arr1870 {
				if yyq1870[0] {
					yy1872 := &x.LoadBalancer
					yy1872.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1870[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy1873 := &x.LoadBalancer
					yy1873.CodecEncodeSelf(e)
				}
			}
			if yysep1870 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1874 := z.DecBinary()
	_ = yym1874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1875 := r.ReadMapStart()
			if yyl1875 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1875, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1875 := r.ReadArrayStart()
			if yyl1875 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1876Slc
	var yyhl1876 bool = l >= 0
	for yyj1876 := 0; ; yyj1876++ {
		if yyhl1876 {
			if yyj1876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1876Slc = r.DecodeBytes(yys1876Slc, true, true)
		yys1876 := string(yys1876Slc)
		switch yys1876 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1877 := &x.LoadBalancer
				yyv1877.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1876)
		} // end switch yys1876
	} // end for yyj1876
	if !yyhl1876 {
		r.ReadEnd()
	}
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1878 int
	var yyb1878 bool
	var yyhl1878 bool = l >= 0
	yyj1878++
	if yyhl1878 {
		yyb1878 = yyj1878 > l
	} else {
		yyb1878 = r.CheckBreak()
	}
	if yyb1878 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1879 := &x.LoadBalancer
		yyv1879.CodecDecodeSelf(d)
	}
	for {
		yyj1878++
		if yyhl1878 {
			yyb1878 = yyj1878 > l
		} else {
			yyb1878 = r.CheckBreak()
		}
		if yyb1878 {
			break
		}
		z.DecStructFieldNotFound(yyj1878-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1880 := z.EncBinary()
		_ = yym1880
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1881 := !z.EncBinary()
			yy2arr1881 := z.EncBasicHandle().StructToArray
			var yyq1881 [1]bool
			_, _, _ = yysep1881, yyq1881, yy2arr1881
			const yyr1881 bool = false
			yyq1881[0] = len(x.Ingress) != 0
			if yyr1881 || yy2arr1881 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1881 int = 0
				for _, b := range yyq1881 {
					if b {
						yynn1881++
					}
				}
				r.EncodeMapStart(yynn1881)
			}
			if yyr1881 || yy2arr1881 {
				if yyq1881[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1883 := z.EncBinary()
						_ = yym1883
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1881[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1884 := z.EncBinary()
						_ = yym1884
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yysep1881 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1885 := z.DecBinary()
	_ = yym1885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1886 := r.ReadMapStart()
			if yyl1886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1886, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1886 := r.ReadArrayStart()
			if yyl1886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1887Slc
	var yyhl1887 bool = l >= 0
	for yyj1887 := 0; ; yyj1887++ {
		if yyhl1887 {
			if yyj1887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1887Slc = r.DecodeBytes(yys1887Slc, true, true)
		yys1887 := string(yys1887Slc)
		switch yys1887 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1888 := &x.Ingress
				yym1889 := z.DecBinary()
				_ = yym1889
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1888), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1887)
		} // end switch yys1887
	} // end for yyj1887
	if !yyhl1887 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1890 int
	var yyb1890 bool
	var yyhl1890 bool = l >= 0
	yyj1890++
	if yyhl1890 {
		yyb1890 = yyj1890 > l
	} else {
		yyb1890 = r.CheckBreak()
	}
	if yyb1890 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1891 := &x.Ingress
		yym1892 := z.DecBinary()
		_ = yym1892
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1891), d)
		}
	}
	for {
		yyj1890++
		if yyhl1890 {
			yyb1890 = yyj1890 > l
		} else {
			yyb1890 = r.CheckBreak()
		}
		if yyb1890 {
			break
		}
		z.DecStructFieldNotFound(yyj1890-1, "")
	}
	r.ReadEnd()
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1893 := z.EncBinary()
		_ = yym1893
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1894 := !z.EncBinary()
			yy2arr1894 := z.EncBasicHandle().StructToArray
			var yyq1894 [2]bool
			_, _, _ = yysep1894, yyq1894, yy2arr1894
			const yyr1894 bool = false
			yyq1894[0] = x.IP != ""
			yyq1894[1] = x.Hostname != ""
			if yyr1894 || yy2arr1894 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1894 int = 0
				for _, b := range yyq1894 {
					if b {
						yynn1894++
					}
				}
				r.EncodeMapStart(yynn1894)
			}
			if yyr1894 || yy2arr1894 {
				if yyq1894[0] {
					yym1896 := z.EncBinary()
					_ = yym1896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1894[0] {
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					yym1897 := z.EncBinary()
					_ = yym1897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1894 || yy2arr1894 {
				if yyq1894[1] {
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1894[1] {
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					yym1900 := z.EncBinary()
					_ = yym1900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yysep1894 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1901 := z.DecBinary()
	_ = yym1901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1902 := r.ReadMapStart()
			if yyl1902 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1902, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1902 := r.ReadArrayStart()
			if yyl1902 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1903Slc
	var yyhl1903 bool = l >= 0
	for yyj1903 := 0; ; yyj1903++ {
		if yyhl1903 {
			if yyj1903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1903Slc = r.DecodeBytes(yys1903Slc, true, true)
		yys1903 := string(yys1903Slc)
		switch yys1903 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1903)
		} // end switch yys1903
	} // end for yyj1903
	if !yyhl1903 {
		r.ReadEnd()
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1906 int
	var yyb1906 bool
	var yyhl1906 bool = l >= 0
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1906++
		if yyhl1906 {
			yyb1906 = yyj1906 > l
		} else {
			yyb1906 = r.CheckBreak()
		}
		if yyb1906 {
			break
		}
		z.DecStructFieldNotFound(yyj1906-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1909 := z.EncBinary()
		_ = yym1909
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1910 := !z.EncBinary()
			yy2arr1910 := z.EncBasicHandle().StructToArray
			var yyq1910 [7]bool
			_, _, _ = yysep1910, yyq1910, yy2arr1910
			const yyr1910 bool = false
			yyq1910[0] = x.Type != ""
			yyq1910[3] = x.ClusterIP != ""
			yyq1910[4] = len(x.ExternalIPs) != 0
			yyq1910[5] = x.LoadBalancerIP != ""
			yyq1910[6] = x.SessionAffinity != ""
			if yyr1910 || yy2arr1910 {
				r.EncodeArrayStart(7)
			} else {
				var yynn1910 int = 2
				for _, b := range yyq1910 {
					if b {
						yynn1910++
					}
				}
				r.EncodeMapStart(yynn1910)
			}
			if yyr1910 || yy2arr1910 {
				if yyq1910[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1910 || yy2arr1910 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1913 := z.EncBinary()
					_ = yym1913
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1914 := z.EncBinary()
					_ = yym1914
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1917 := z.EncBinary()
					_ = yym1917
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				if yyq1910[3] {
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[3] {
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				if yyq1910[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1922 := z.EncBinary()
						_ = yym1922
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1910[4] {
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1923 := z.EncBinary()
						_ = yym1923
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				if yyq1910[5] {
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[5] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				if yyq1910[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[6] {
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yysep1910 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1928 := z.DecBinary()
	_ = yym1928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1929 := r.ReadMapStart()
			if yyl1929 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1929, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1929 := r.ReadArrayStart()
			if yyl1929 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1930Slc
	var yyhl1930 bool = l >= 0
	for yyj1930 := 0; ; yyj1930++ {
		if yyhl1930 {
			if yyj1930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1930Slc = r.DecodeBytes(yys1930Slc, true, true)
		yys1930 := string(yys1930Slc)
		switch yys1930 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1932 := &x.Ports
				yym1933 := z.DecBinary()
				_ = yym1933
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1932), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1934 := &x.Selector
				yym1935 := z.DecBinary()
				_ = yym1935
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1934, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1937 := &x.ExternalIPs
				yym1938 := z.DecBinary()
				_ = yym1938
				if false {
				} else {
					z.F.DecSliceStringX(yyv1937, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1930)
		} // end switch yys1930
	} // end for yyj1930
	if !yyhl1930 {
		r.ReadEnd()
	}
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1941 int
	var yyb1941 bool
	var yyhl1941 bool = l >= 0
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1943 := &x.Ports
		yym1944 := z.DecBinary()
		_ = yym1944
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1943), d)
		}
	}
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1945 := &x.Selector
		yym1946 := z.DecBinary()
		_ = yym1946
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1945, false, d)
		}
	}
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1948 := &x.ExternalIPs
		yym1949 := z.DecBinary()
		_ = yym1949
		if false {
		} else {
			z.F.DecSliceStringX(yyv1948, false, d)
		}
	}
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1941++
	if yyhl1941 {
		yyb1941 = yyj1941 > l
	} else {
		yyb1941 = r.CheckBreak()
	}
	if yyb1941 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1941++
		if yyhl1941 {
			yyb1941 = yyj1941 > l
		} else {
			yyb1941 = r.CheckBreak()
		}
		if yyb1941 {
			break
		}
		z.DecStructFieldNotFound(yyj1941-1, "")
	}
	r.ReadEnd()
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1952 := z.EncBinary()
		_ = yym1952
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1953 := !z.EncBinary()
			yy2arr1953 := z.EncBasicHandle().StructToArray
			var yyq1953 [5]bool
			_, _, _ = yysep1953, yyq1953, yy2arr1953
			const yyr1953 bool = false
			if yyr1953 || yy2arr1953 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1953 int = 5
				for _, b := range yyq1953 {
					if b {
						yynn1953++
					}
				}
				r.EncodeMapStart(yynn1953)
			}
			if yyr1953 || yy2arr1953 {
				yym1955 := z.EncBinary()
				_ = yym1955
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym1956 := z.EncBinary()
				_ = yym1956
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1953 || yy2arr1953 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1953 || yy2arr1953 {
				yym1959 := z.EncBinary()
				_ = yym1959
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				yym1960 := z.EncBinary()
				_ = yym1960
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1953 || yy2arr1953 {
				yy1962 := &x.TargetPort
				yym1963 := z.EncBinary()
				_ = yym1963
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1962) {
				} else if !yym1963 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1962)
				} else {
					z.EncFallback(yy1962)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				yy1964 := &x.TargetPort
				yym1965 := z.EncBinary()
				_ = yym1965
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1964) {
				} else if !yym1965 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1964)
				} else {
					z.EncFallback(yy1964)
				}
			}
			if yyr1953 || yy2arr1953 {
				yym1967 := z.EncBinary()
				_ = yym1967
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				yym1968 := z.EncBinary()
				_ = yym1968
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yysep1953 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1969 := z.DecBinary()
	_ = yym1969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1970 := r.ReadMapStart()
			if yyl1970 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1970, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1970 := r.ReadArrayStart()
			if yyl1970 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1970, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1971Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1971Slc
	var yyhl1971 bool = l >= 0
	for yyj1971 := 0; ; yyj1971++ {
		if yyhl1971 {
			if yyj1971 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1971Slc = r.DecodeBytes(yys1971Slc, true, true)
		yys1971 := string(yys1971Slc)
		switch yys1971 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv1975 := &x.TargetPort
				yym1976 := z.DecBinary()
				_ = yym1976
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1975) {
				} else if !yym1976 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1975)
				} else {
					z.DecFallback(yyv1975, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1971)
		} // end switch yys1971
	} // end for yyj1971
	if !yyhl1971 {
		r.ReadEnd()
	}
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1978 int
	var yyb1978 bool
	var yyhl1978 bool = l >= 0
	yyj1978++
	if yyhl1978 {
		yyb1978 = yyj1978 > l
	} else {
		yyb1978 = r.CheckBreak()
	}
	if yyb1978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1978++
	if yyhl1978 {
		yyb1978 = yyj1978 > l
	} else {
		yyb1978 = r.CheckBreak()
	}
	if yyb1978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1978++
	if yyhl1978 {
		yyb1978 = yyj1978 > l
	} else {
		yyb1978 = r.CheckBreak()
	}
	if yyb1978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1978++
	if yyhl1978 {
		yyb1978 = yyj1978 > l
	} else {
		yyb1978 = r.CheckBreak()
	}
	if yyb1978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv1982 := &x.TargetPort
		yym1983 := z.DecBinary()
		_ = yym1983
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1982) {
		} else if !yym1983 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1982)
		} else {
			z.DecFallback(yyv1982, false)
		}
	}
	yyj1978++
	if yyhl1978 {
		yyb1978 = yyj1978 > l
	} else {
		yyb1978 = r.CheckBreak()
	}
	if yyb1978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1978++
		if yyhl1978 {
			yyb1978 = yyj1978 > l
		} else {
			yyb1978 = r.CheckBreak()
		}
		if yyb1978 {
			break
		}
		z.DecStructFieldNotFound(yyj1978-1, "")
	}
	r.ReadEnd()
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1985 := z.EncBinary()
		_ = yym1985
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1986 := !z.EncBinary()
			yy2arr1986 := z.EncBasicHandle().StructToArray
			var yyq1986 [5]bool
			_, _, _ = yysep1986, yyq1986, yy2arr1986
			const yyr1986 bool = false
			yyq1986[0] = x.Kind != ""
			yyq1986[1] = x.APIVersion != ""
			yyq1986[2] = true
			yyq1986[3] = true
			yyq1986[4] = true
			if yyr1986 || yy2arr1986 {
				r.EncodeArrayStart(5)
			} else {
				var yynn1986 int = 0
				for _, b := range yyq1986 {
					if b {
						yynn1986++
					}
				}
				r.EncodeMapStart(yynn1986)
			}
			if yyr1986 || yy2arr1986 {
				if yyq1986[0] {
					yym1988 := z.EncBinary()
					_ = yym1988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1986[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1989 := z.EncBinary()
					_ = yym1989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1986 || yy2arr1986 {
				if yyq1986[1] {
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1986[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1992 := z.EncBinary()
					_ = yym1992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1986 || yy2arr1986 {
				if yyq1986[2] {
					yy1994 := &x.ObjectMeta
					yy1994.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1986[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1995 := &x.ObjectMeta
					yy1995.CodecEncodeSelf(e)
				}
			}
			if yyr1986 || yy2arr1986 {
				if yyq1986[3] {
					yy1997 := &x.Spec
					yy1997.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1986[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1998 := &x.Spec
					yy1998.CodecEncodeSelf(e)
				}
			}
			if yyr1986 || yy2arr1986 {
				if yyq1986[4] {
					yy2000 := &x.Status
					yy2000.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1986[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2001 := &x.Status
					yy2001.CodecEncodeSelf(e)
				}
			}
			if yysep1986 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2002 := z.DecBinary()
	_ = yym2002
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2003 := r.ReadMapStart()
			if yyl2003 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2003, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2003 := r.ReadArrayStart()
			if yyl2003 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2003, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2004Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2004Slc
	var yyhl2004 bool = l >= 0
	for yyj2004 := 0; ; yyj2004++ {
		if yyhl2004 {
			if yyj2004 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2004Slc = r.DecodeBytes(yys2004Slc, true, true)
		yys2004 := string(yys2004Slc)
		switch yys2004 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2007 := &x.ObjectMeta
				yyv2007.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2008 := &x.Spec
				yyv2008.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2009 := &x.Status
				yyv2009.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2004)
		} // end switch yys2004
	} // end for yyj2004
	if !yyhl2004 {
		r.ReadEnd()
	}
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2010 int
	var yyb2010 bool
	var yyhl2010 bool = l >= 0
	yyj2010++
	if yyhl2010 {
		yyb2010 = yyj2010 > l
	} else {
		yyb2010 = r.CheckBreak()
	}
	if yyb2010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2010++
	if yyhl2010 {
		yyb2010 = yyj2010 > l
	} else {
		yyb2010 = r.CheckBreak()
	}
	if yyb2010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2010++
	if yyhl2010 {
		yyb2010 = yyj2010 > l
	} else {
		yyb2010 = r.CheckBreak()
	}
	if yyb2010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2013 := &x.ObjectMeta
		yyv2013.CodecDecodeSelf(d)
	}
	yyj2010++
	if yyhl2010 {
		yyb2010 = yyj2010 > l
	} else {
		yyb2010 = r.CheckBreak()
	}
	if yyb2010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2014 := &x.Spec
		yyv2014.CodecDecodeSelf(d)
	}
	yyj2010++
	if yyhl2010 {
		yyb2010 = yyj2010 > l
	} else {
		yyb2010 = r.CheckBreak()
	}
	if yyb2010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2015 := &x.Status
		yyv2015.CodecDecodeSelf(d)
	}
	for {
		yyj2010++
		if yyhl2010 {
			yyb2010 = yyj2010 > l
		} else {
			yyb2010 = r.CheckBreak()
		}
		if yyb2010 {
			break
		}
		z.DecStructFieldNotFound(yyj2010-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2016 := z.EncBinary()
		_ = yym2016
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2017 := !z.EncBinary()
			yy2arr2017 := z.EncBasicHandle().StructToArray
			var yyq2017 [5]bool
			_, _, _ = yysep2017, yyq2017, yy2arr2017
			const yyr2017 bool = false
			yyq2017[0] = x.Kind != ""
			yyq2017[1] = x.APIVersion != ""
			yyq2017[2] = true
			yyq2017[4] = len(x.ImagePullSecrets) != 0
			if yyr2017 || yy2arr2017 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2017 int = 1
				for _, b := range yyq2017 {
					if b {
						yynn2017++
					}
				}
				r.EncodeMapStart(yynn2017)
			}
			if yyr2017 || yy2arr2017 {
				if yyq2017[0] {
					yym2019 := z.EncBinary()
					_ = yym2019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				if yyq2017[1] {
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2023 := z.EncBinary()
					_ = yym2023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				if yyq2017[2] {
					yy2025 := &x.ObjectMeta
					yy2025.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2026 := &x.ObjectMeta
					yy2026.CodecEncodeSelf(e)
				}
			}
			if yyr2017 || yy2arr2017 {
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				if yyq2017[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2031 := z.EncBinary()
						_ = yym2031
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[4] {
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2032 := z.EncBinary()
						_ = yym2032
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yysep2017 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2033 := z.DecBinary()
	_ = yym2033
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2034 := r.ReadMapStart()
			if yyl2034 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2034, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2034 := r.ReadArrayStart()
			if yyl2034 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2034, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2035Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2035Slc
	var yyhl2035 bool = l >= 0
	for yyj2035 := 0; ; yyj2035++ {
		if yyhl2035 {
			if yyj2035 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2035Slc = r.DecodeBytes(yys2035Slc, true, true)
		yys2035 := string(yys2035Slc)
		switch yys2035 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2038 := &x.ObjectMeta
				yyv2038.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2039 := &x.Secrets
				yym2040 := z.DecBinary()
				_ = yym2040
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2039), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2041 := &x.ImagePullSecrets
				yym2042 := z.DecBinary()
				_ = yym2042
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2041), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2035)
		} // end switch yys2035
	} // end for yyj2035
	if !yyhl2035 {
		r.ReadEnd()
	}
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2043 int
	var yyb2043 bool
	var yyhl2043 bool = l >= 0
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2046 := &x.ObjectMeta
		yyv2046.CodecDecodeSelf(d)
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2047 := &x.Secrets
		yym2048 := z.DecBinary()
		_ = yym2048
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2047), d)
		}
	}
	yyj2043++
	if yyhl2043 {
		yyb2043 = yyj2043 > l
	} else {
		yyb2043 = r.CheckBreak()
	}
	if yyb2043 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2049 := &x.ImagePullSecrets
		yym2050 := z.DecBinary()
		_ = yym2050
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2049), d)
		}
	}
	for {
		yyj2043++
		if yyhl2043 {
			yyb2043 = yyj2043 > l
		} else {
			yyb2043 = r.CheckBreak()
		}
		if yyb2043 {
			break
		}
		z.DecStructFieldNotFound(yyj2043-1, "")
	}
	r.ReadEnd()
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2051 := z.EncBinary()
		_ = yym2051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2052 := !z.EncBinary()
			yy2arr2052 := z.EncBasicHandle().StructToArray
			var yyq2052 [4]bool
			_, _, _ = yysep2052, yyq2052, yy2arr2052
			const yyr2052 bool = false
			yyq2052[0] = x.Kind != ""
			yyq2052[1] = x.APIVersion != ""
			yyq2052[2] = true
			if yyr2052 || yy2arr2052 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2052 int = 1
				for _, b := range yyq2052 {
					if b {
						yynn2052++
					}
				}
				r.EncodeMapStart(yynn2052)
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[0] {
					yym2054 := z.EncBinary()
					_ = yym2054
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2052[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2055 := z.EncBinary()
					_ = yym2055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[1] {
					yym2057 := z.EncBinary()
					_ = yym2057
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2052[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2058 := z.EncBinary()
					_ = yym2058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2052 || yy2arr2052 {
				if yyq2052[2] {
					yy2060 := &x.ListMeta
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2060) {
					} else {
						z.EncFallback(yy2060)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2052[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2062 := &x.ListMeta
					yym2063 := z.EncBinary()
					_ = yym2063
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2062) {
					} else {
						z.EncFallback(yy2062)
					}
				}
			}
			if yyr2052 || yy2arr2052 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2065 := z.EncBinary()
					_ = yym2065
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2066 := z.EncBinary()
					_ = yym2066
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yysep2052 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2067 := z.DecBinary()
	_ = yym2067
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2068 := r.ReadMapStart()
			if yyl2068 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2068, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2068 := r.ReadArrayStart()
			if yyl2068 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2068, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2069Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2069Slc
	var yyhl2069 bool = l >= 0
	for yyj2069 := 0; ; yyj2069++ {
		if yyhl2069 {
			if yyj2069 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2069Slc = r.DecodeBytes(yys2069Slc, true, true)
		yys2069 := string(yys2069Slc)
		switch yys2069 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2072 := &x.ListMeta
				yym2073 := z.DecBinary()
				_ = yym2073
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2072) {
				} else {
					z.DecFallback(yyv2072, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2074 := &x.Items
				yym2075 := z.DecBinary()
				_ = yym2075
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2074), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2069)
		} // end switch yys2069
	} // end for yyj2069
	if !yyhl2069 {
		r.ReadEnd()
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2076 int
	var yyb2076 bool
	var yyhl2076 bool = l >= 0
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2079 := &x.ListMeta
		yym2080 := z.DecBinary()
		_ = yym2080
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2079) {
		} else {
			z.DecFallback(yyv2079, false)
		}
	}
	yyj2076++
	if yyhl2076 {
		yyb2076 = yyj2076 > l
	} else {
		yyb2076 = r.CheckBreak()
	}
	if yyb2076 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2081 := &x.Items
		yym2082 := z.DecBinary()
		_ = yym2082
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2081), d)
		}
	}
	for {
		yyj2076++
		if yyhl2076 {
			yyb2076 = yyj2076 > l
		} else {
			yyb2076 = r.CheckBreak()
		}
		if yyb2076 {
			break
		}
		z.DecStructFieldNotFound(yyj2076-1, "")
	}
	r.ReadEnd()
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2083 := z.EncBinary()
		_ = yym2083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2084 := !z.EncBinary()
			yy2arr2084 := z.EncBasicHandle().StructToArray
			var yyq2084 [4]bool
			_, _, _ = yysep2084, yyq2084, yy2arr2084
			const yyr2084 bool = false
			yyq2084[0] = x.Kind != ""
			yyq2084[1] = x.APIVersion != ""
			yyq2084[2] = true
			if yyr2084 || yy2arr2084 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2084 int = 1
				for _, b := range yyq2084 {
					if b {
						yynn2084++
					}
				}
				r.EncodeMapStart(yynn2084)
			}
			if yyr2084 || yy2arr2084 {
				if yyq2084[0] {
					yym2086 := z.EncBinary()
					_ = yym2086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2087 := z.EncBinary()
					_ = yym2087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				if yyq2084[1] {
					yym2089 := z.EncBinary()
					_ = yym2089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2084[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2090 := z.EncBinary()
					_ = yym2090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2084 || yy2arr2084 {
				if yyq2084[2] {
					yy2092 := &x.ObjectMeta
					yy2092.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2084[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2093 := &x.ObjectMeta
					yy2093.CodecEncodeSelf(e)
				}
			}
			if yyr2084 || yy2arr2084 {
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2095 := z.EncBinary()
					_ = yym2095
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yysep2084 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2097 := z.DecBinary()
	_ = yym2097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2098 := r.ReadMapStart()
			if yyl2098 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2098, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2098 := r.ReadArrayStart()
			if yyl2098 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2099Slc
	var yyhl2099 bool = l >= 0
	for yyj2099 := 0; ; yyj2099++ {
		if yyhl2099 {
			if yyj2099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2099Slc = r.DecodeBytes(yys2099Slc, true, true)
		yys2099 := string(yys2099Slc)
		switch yys2099 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2102 := &x.ObjectMeta
				yyv2102.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2103 := &x.Subsets
				yym2104 := z.DecBinary()
				_ = yym2104
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2103), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2099)
		} // end switch yys2099
	} // end for yyj2099
	if !yyhl2099 {
		r.ReadEnd()
	}
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2105 int
	var yyb2105 bool
	var yyhl2105 bool = l >= 0
	yyj2105++
	if yyhl2105 {
		yyb2105 = yyj2105 > l
	} else {
		yyb2105 = r.CheckBreak()
	}
	if yyb2105 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2105++
	if yyhl2105 {
		yyb2105 = yyj2105 > l
	} else {
		yyb2105 = r.CheckBreak()
	}
	if yyb2105 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2105++
	if yyhl2105 {
		yyb2105 = yyj2105 > l
	} else {
		yyb2105 = r.CheckBreak()
	}
	if yyb2105 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2108 := &x.ObjectMeta
		yyv2108.CodecDecodeSelf(d)
	}
	yyj2105++
	if yyhl2105 {
		yyb2105 = yyj2105 > l
	} else {
		yyb2105 = r.CheckBreak()
	}
	if yyb2105 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2109 := &x.Subsets
		yym2110 := z.DecBinary()
		_ = yym2110
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2109), d)
		}
	}
	for {
		yyj2105++
		if yyhl2105 {
			yyb2105 = yyj2105 > l
		} else {
			yyb2105 = r.CheckBreak()
		}
		if yyb2105 {
			break
		}
		z.DecStructFieldNotFound(yyj2105-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2111 := z.EncBinary()
		_ = yym2111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2112 := !z.EncBinary()
			yy2arr2112 := z.EncBasicHandle().StructToArray
			var yyq2112 [3]bool
			_, _, _ = yysep2112, yyq2112, yy2arr2112
			const yyr2112 bool = false
			if yyr2112 || yy2arr2112 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2112 int = 3
				for _, b := range yyq2112 {
					if b {
						yynn2112++
					}
				}
				r.EncodeMapStart(yynn2112)
			}
			if yyr2112 || yy2arr2112 {
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2114 := z.EncBinary()
					_ = yym2114
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2115 := z.EncBinary()
					_ = yym2115
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2112 || yy2arr2112 {
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2117 := z.EncBinary()
					_ = yym2117
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2118 := z.EncBinary()
					_ = yym2118
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2112 || yy2arr2112 {
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2120 := z.EncBinary()
					_ = yym2120
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2121 := z.EncBinary()
					_ = yym2121
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yysep2112 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2122 := z.DecBinary()
	_ = yym2122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2123 := r.ReadMapStart()
			if yyl2123 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2123, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2123 := r.ReadArrayStart()
			if yyl2123 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2124Slc
	var yyhl2124 bool = l >= 0
	for yyj2124 := 0; ; yyj2124++ {
		if yyhl2124 {
			if yyj2124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2124Slc = r.DecodeBytes(yys2124Slc, true, true)
		yys2124 := string(yys2124Slc)
		switch yys2124 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2125 := &x.Addresses
				yym2126 := z.DecBinary()
				_ = yym2126
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2125), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2127 := &x.NotReadyAddresses
				yym2128 := z.DecBinary()
				_ = yym2128
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2127), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2129 := &x.Ports
				yym2130 := z.DecBinary()
				_ = yym2130
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2129), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2124)
		} // end switch yys2124
	} // end for yyj2124
	if !yyhl2124 {
		r.ReadEnd()
	}
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2131 int
	var yyb2131 bool
	var yyhl2131 bool = l >= 0
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2132 := &x.Addresses
		yym2133 := z.DecBinary()
		_ = yym2133
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2132), d)
		}
	}
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2134 := &x.NotReadyAddresses
		yym2135 := z.DecBinary()
		_ = yym2135
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2134), d)
		}
	}
	yyj2131++
	if yyhl2131 {
		yyb2131 = yyj2131 > l
	} else {
		yyb2131 = r.CheckBreak()
	}
	if yyb2131 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2136 := &x.Ports
		yym2137 := z.DecBinary()
		_ = yym2137
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2136), d)
		}
	}
	for {
		yyj2131++
		if yyhl2131 {
			yyb2131 = yyj2131 > l
		} else {
			yyb2131 = r.CheckBreak()
		}
		if yyb2131 {
			break
		}
		z.DecStructFieldNotFound(yyj2131-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2138 := z.EncBinary()
		_ = yym2138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2139 := !z.EncBinary()
			yy2arr2139 := z.EncBasicHandle().StructToArray
			var yyq2139 [2]bool
			_, _, _ = yysep2139, yyq2139, yy2arr2139
			const yyr2139 bool = false
			if yyr2139 || yy2arr2139 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2139 int = 2
				for _, b := range yyq2139 {
					if b {
						yynn2139++
					}
				}
				r.EncodeMapStart(yynn2139)
			}
			if yyr2139 || yy2arr2139 {
				yym2141 := z.EncBinary()
				_ = yym2141
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				yym2142 := z.EncBinary()
				_ = yym2142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2139 || yy2arr2139 {
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yysep2139 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2144 := z.DecBinary()
	_ = yym2144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2145 := r.ReadMapStart()
			if yyl2145 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2145, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2145 := r.ReadArrayStart()
			if yyl2145 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2145, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2146Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2146Slc
	var yyhl2146 bool = l >= 0
	for yyj2146 := 0; ; yyj2146++ {
		if yyhl2146 {
			if yyj2146 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2146Slc = r.DecodeBytes(yys2146Slc, true, true)
		yys2146 := string(yys2146Slc)
		switch yys2146 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2146)
		} // end switch yys2146
	} // end for yyj2146
	if !yyhl2146 {
		r.ReadEnd()
	}
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2149 int
	var yyb2149 bool
	var yyhl2149 bool = l >= 0
	yyj2149++
	if yyhl2149 {
		yyb2149 = yyj2149 > l
	} else {
		yyb2149 = r.CheckBreak()
	}
	if yyb2149 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2149++
	if yyhl2149 {
		yyb2149 = yyj2149 > l
	} else {
		yyb2149 = r.CheckBreak()
	}
	if yyb2149 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2149++
		if yyhl2149 {
			yyb2149 = yyj2149 > l
		} else {
			yyb2149 = r.CheckBreak()
		}
		if yyb2149 {
			break
		}
		z.DecStructFieldNotFound(yyj2149-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2152 := z.EncBinary()
		_ = yym2152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2153 := !z.EncBinary()
			yy2arr2153 := z.EncBasicHandle().StructToArray
			var yyq2153 [3]bool
			_, _, _ = yysep2153, yyq2153, yy2arr2153
			const yyr2153 bool = false
			if yyr2153 || yy2arr2153 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2153 int = 3
				for _, b := range yyq2153 {
					if b {
						yynn2153++
					}
				}
				r.EncodeMapStart(yynn2153)
			}
			if yyr2153 || yy2arr2153 {
				yym2155 := z.EncBinary()
				_ = yym2155
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2156 := z.EncBinary()
				_ = yym2156
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2153 || yy2arr2153 {
				yym2158 := z.EncBinary()
				_ = yym2158
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2159 := z.EncBinary()
				_ = yym2159
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2153 || yy2arr2153 {
				x.Protocol.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				x.Protocol.CodecEncodeSelf(e)
			}
			if yysep2153 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2161 := z.DecBinary()
	_ = yym2161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2162 := r.ReadMapStart()
			if yyl2162 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2162, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2162 := r.ReadArrayStart()
			if yyl2162 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2163Slc
	var yyhl2163 bool = l >= 0
	for yyj2163 := 0; ; yyj2163++ {
		if yyhl2163 {
			if yyj2163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2163Slc = r.DecodeBytes(yys2163Slc, true, true)
		yys2163 := string(yys2163Slc)
		switch yys2163 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2163)
		} // end switch yys2163
	} // end for yyj2163
	if !yyhl2163 {
		r.ReadEnd()
	}
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2167 int
	var yyb2167 bool
	var yyhl2167 bool = l >= 0
	yyj2167++
	if yyhl2167 {
		yyb2167 = yyj2167 > l
	} else {
		yyb2167 = r.CheckBreak()
	}
	if yyb2167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2167++
	if yyhl2167 {
		yyb2167 = yyj2167 > l
	} else {
		yyb2167 = r.CheckBreak()
	}
	if yyb2167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2167++
	if yyhl2167 {
		yyb2167 = yyj2167 > l
	} else {
		yyb2167 = r.CheckBreak()
	}
	if yyb2167 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2167++
		if yyhl2167 {
			yyb2167 = yyj2167 > l
		} else {
			yyb2167 = r.CheckBreak()
		}
		if yyb2167 {
			break
		}
		z.DecStructFieldNotFound(yyj2167-1, "")
	}
	r.ReadEnd()
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2171 := z.EncBinary()
		_ = yym2171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2172 := !z.EncBinary()
			yy2arr2172 := z.EncBasicHandle().StructToArray
			var yyq2172 [4]bool
			_, _, _ = yysep2172, yyq2172, yy2arr2172
			const yyr2172 bool = false
			yyq2172[0] = x.Kind != ""
			yyq2172[1] = x.APIVersion != ""
			yyq2172[2] = true
			if yyr2172 || yy2arr2172 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2172 int = 1
				for _, b := range yyq2172 {
					if b {
						yynn2172++
					}
				}
				r.EncodeMapStart(yynn2172)
			}
			if yyr2172 || yy2arr2172 {
				if yyq2172[0] {
					yym2174 := z.EncBinary()
					_ = yym2174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2175 := z.EncBinary()
					_ = yym2175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				if yyq2172[1] {
					yym2177 := z.EncBinary()
					_ = yym2177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2172[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2178 := z.EncBinary()
					_ = yym2178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				if yyq2172[2] {
					yy2180 := &x.ListMeta
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2180) {
					} else {
						z.EncFallback(yy2180)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2172[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2182 := &x.ListMeta
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2182) {
					} else {
						z.EncFallback(yy2182)
					}
				}
			}
			if yyr2172 || yy2arr2172 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2185 := z.EncBinary()
					_ = yym2185
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2186 := z.EncBinary()
					_ = yym2186
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yysep2172 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2187 := z.DecBinary()
	_ = yym2187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2188 := r.ReadMapStart()
			if yyl2188 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2188, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2188 := r.ReadArrayStart()
			if yyl2188 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2189Slc
	var yyhl2189 bool = l >= 0
	for yyj2189 := 0; ; yyj2189++ {
		if yyhl2189 {
			if yyj2189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2189Slc = r.DecodeBytes(yys2189Slc, true, true)
		yys2189 := string(yys2189Slc)
		switch yys2189 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2192 := &x.ListMeta
				yym2193 := z.DecBinary()
				_ = yym2193
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2192) {
				} else {
					z.DecFallback(yyv2192, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2194 := &x.Items
				yym2195 := z.DecBinary()
				_ = yym2195
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2194), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2189)
		} // end switch yys2189
	} // end for yyj2189
	if !yyhl2189 {
		r.ReadEnd()
	}
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2196 int
	var yyb2196 bool
	var yyhl2196 bool = l >= 0
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2199 := &x.ListMeta
		yym2200 := z.DecBinary()
		_ = yym2200
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2199) {
		} else {
			z.DecFallback(yyv2199, false)
		}
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2201 := &x.Items
		yym2202 := z.DecBinary()
		_ = yym2202
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2201), d)
		}
	}
	for {
		yyj2196++
		if yyhl2196 {
			yyb2196 = yyj2196 > l
		} else {
			yyb2196 = r.CheckBreak()
		}
		if yyb2196 {
			break
		}
		z.DecStructFieldNotFound(yyj2196-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2203 := z.EncBinary()
		_ = yym2203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2204 := !z.EncBinary()
			yy2arr2204 := z.EncBasicHandle().StructToArray
			var yyq2204 [4]bool
			_, _, _ = yysep2204, yyq2204, yy2arr2204
			const yyr2204 bool = false
			yyq2204[0] = x.PodCIDR != ""
			yyq2204[1] = x.ExternalID != ""
			yyq2204[2] = x.ProviderID != ""
			yyq2204[3] = x.Unschedulable != false
			if yyr2204 || yy2arr2204 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2204 int = 0
				for _, b := range yyq2204 {
					if b {
						yynn2204++
					}
				}
				r.EncodeMapStart(yynn2204)
			}
			if yyr2204 || yy2arr2204 {
				if yyq2204[0] {
					yym2206 := z.EncBinary()
					_ = yym2206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2204[0] {
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					yym2207 := z.EncBinary()
					_ = yym2207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2204 || yy2arr2204 {
				if yyq2204[1] {
					yym2209 := z.EncBinary()
					_ = yym2209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2204[1] {
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					yym2210 := z.EncBinary()
					_ = yym2210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2204 || yy2arr2204 {
				if yyq2204[2] {
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2204[2] {
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					yym2213 := z.EncBinary()
					_ = yym2213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2204 || yy2arr2204 {
				if yyq2204[3] {
					yym2215 := z.EncBinary()
					_ = yym2215
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2204[3] {
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yysep2204 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2217 := z.DecBinary()
	_ = yym2217
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2218 := r.ReadMapStart()
			if yyl2218 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2218, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2218 := r.ReadArrayStart()
			if yyl2218 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2218, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2219Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2219Slc
	var yyhl2219 bool = l >= 0
	for yyj2219 := 0; ; yyj2219++ {
		if yyhl2219 {
			if yyj2219 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2219Slc = r.DecodeBytes(yys2219Slc, true, true)
		yys2219 := string(yys2219Slc)
		switch yys2219 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2219)
		} // end switch yys2219
	} // end for yyj2219
	if !yyhl2219 {
		r.ReadEnd()
	}
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2224 int
	var yyb2224 bool
	var yyhl2224 bool = l >= 0
	yyj2224++
	if yyhl2224 {
		yyb2224 = yyj2224 > l
	} else {
		yyb2224 = r.CheckBreak()
	}
	if yyb2224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2224++
	if yyhl2224 {
		yyb2224 = yyj2224 > l
	} else {
		yyb2224 = r.CheckBreak()
	}
	if yyb2224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2224++
	if yyhl2224 {
		yyb2224 = yyj2224 > l
	} else {
		yyb2224 = r.CheckBreak()
	}
	if yyb2224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2224++
	if yyhl2224 {
		yyb2224 = yyj2224 > l
	} else {
		yyb2224 = r.CheckBreak()
	}
	if yyb2224 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2224++
		if yyhl2224 {
			yyb2224 = yyj2224 > l
		} else {
			yyb2224 = r.CheckBreak()
		}
		if yyb2224 {
			break
		}
		z.DecStructFieldNotFound(yyj2224-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2229 := z.EncBinary()
		_ = yym2229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2230 := !z.EncBinary()
			yy2arr2230 := z.EncBasicHandle().StructToArray
			var yyq2230 [1]bool
			_, _, _ = yysep2230, yyq2230, yy2arr2230
			const yyr2230 bool = false
			if yyr2230 || yy2arr2230 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2230 int = 1
				for _, b := range yyq2230 {
					if b {
						yynn2230++
					}
				}
				r.EncodeMapStart(yynn2230)
			}
			if yyr2230 || yy2arr2230 {
				yym2232 := z.EncBinary()
				_ = yym2232
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				yym2233 := z.EncBinary()
				_ = yym2233
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yysep2230 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2234 := z.DecBinary()
	_ = yym2234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2235 := r.ReadMapStart()
			if yyl2235 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2235, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2235 := r.ReadArrayStart()
			if yyl2235 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2235, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2236Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2236Slc
	var yyhl2236 bool = l >= 0
	for yyj2236 := 0; ; yyj2236++ {
		if yyhl2236 {
			if yyj2236 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2236Slc = r.DecodeBytes(yys2236Slc, true, true)
		yys2236 := string(yys2236Slc)
		switch yys2236 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2236)
		} // end switch yys2236
	} // end for yyj2236
	if !yyhl2236 {
		r.ReadEnd()
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2238 int
	var yyb2238 bool
	var yyhl2238 bool = l >= 0
	yyj2238++
	if yyhl2238 {
		yyb2238 = yyj2238 > l
	} else {
		yyb2238 = r.CheckBreak()
	}
	if yyb2238 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2238++
		if yyhl2238 {
			yyb2238 = yyj2238 > l
		} else {
			yyb2238 = r.CheckBreak()
		}
		if yyb2238 {
			break
		}
		z.DecStructFieldNotFound(yyj2238-1, "")
	}
	r.ReadEnd()
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2240 := z.EncBinary()
		_ = yym2240
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2241 := !z.EncBinary()
			yy2arr2241 := z.EncBasicHandle().StructToArray
			var yyq2241 [1]bool
			_, _, _ = yysep2241, yyq2241, yy2arr2241
			const yyr2241 bool = false
			yyq2241[0] = true
			if yyr2241 || yy2arr2241 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2241 int = 0
				for _, b := range yyq2241 {
					if b {
						yynn2241++
					}
				}
				r.EncodeMapStart(yynn2241)
			}
			if yyr2241 || yy2arr2241 {
				if yyq2241[0] {
					yy2243 := &x.KubeletEndpoint
					yy2243.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2241[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					yy2244 := &x.KubeletEndpoint
					yy2244.CodecEncodeSelf(e)
				}
			}
			if yysep2241 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2245 := z.DecBinary()
	_ = yym2245
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2246 := r.ReadMapStart()
			if yyl2246 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2246, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2246 := r.ReadArrayStart()
			if yyl2246 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2246, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2247Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2247Slc
	var yyhl2247 bool = l >= 0
	for yyj2247 := 0; ; yyj2247++ {
		if yyhl2247 {
			if yyj2247 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2247Slc = r.DecodeBytes(yys2247Slc, true, true)
		yys2247 := string(yys2247Slc)
		switch yys2247 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2248 := &x.KubeletEndpoint
				yyv2248.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2247)
		} // end switch yys2247
	} // end for yyj2247
	if !yyhl2247 {
		r.ReadEnd()
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2249 int
	var yyb2249 bool
	var yyhl2249 bool = l >= 0
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2250 := &x.KubeletEndpoint
		yyv2250.CodecDecodeSelf(d)
	}
	for {
		yyj2249++
		if yyhl2249 {
			yyb2249 = yyj2249 > l
		} else {
			yyb2249 = r.CheckBreak()
		}
		if yyb2249 {
			break
		}
		z.DecStructFieldNotFound(yyj2249-1, "")
	}
	r.ReadEnd()
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2251 := z.EncBinary()
		_ = yym2251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2252 := !z.EncBinary()
			yy2arr2252 := z.EncBasicHandle().StructToArray
			var yyq2252 [8]bool
			_, _, _ = yysep2252, yyq2252, yy2arr2252
			const yyr2252 bool = false
			if yyr2252 || yy2arr2252 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2252 int = 8
				for _, b := range yyq2252 {
					if b {
						yynn2252++
					}
				}
				r.EncodeMapStart(yynn2252)
			}
			if yyr2252 || yy2arr2252 {
				yym2254 := z.EncBinary()
				_ = yym2254
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				yym2255 := z.EncBinary()
				_ = yym2255
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2252 || yy2arr2252 {
				yym2257 := z.EncBinary()
				_ = yym2257
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				yym2258 := z.EncBinary()
				_ = yym2258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2252 || yy2arr2252 {
				yym2260 := z.EncBinary()
				_ = yym2260
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				yym2261 := z.EncBinary()
				_ = yym2261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2252 || yy2arr2252 {
				yym2263 := z.EncBinary()
				_ = yym2263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				yym2264 := z.EncBinary()
				_ = yym2264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2252 || yy2arr2252 {
				yym2266 := z.EncBinary()
				_ = yym2266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				yym2267 := z.EncBinary()
				_ = yym2267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2252 || yy2arr2252 {
				yym2269 := z.EncBinary()
				_ = yym2269
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				yym2270 := z.EncBinary()
				_ = yym2270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2252 || yy2arr2252 {
				yym2272 := z.EncBinary()
				_ = yym2272
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				yym2273 := z.EncBinary()
				_ = yym2273
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2252 || yy2arr2252 {
				yym2275 := z.EncBinary()
				_ = yym2275
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				yym2276 := z.EncBinary()
				_ = yym2276
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yysep2252 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2277 := z.DecBinary()
	_ = yym2277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2278 := r.ReadMapStart()
			if yyl2278 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2278, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2278 := r.ReadArrayStart()
			if yyl2278 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2279Slc
	var yyhl2279 bool = l >= 0
	for yyj2279 := 0; ; yyj2279++ {
		if yyhl2279 {
			if yyj2279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2279Slc = r.DecodeBytes(yys2279Slc, true, true)
		yys2279 := string(yys2279Slc)
		switch yys2279 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2279)
		} // end switch yys2279
	} // end for yyj2279
	if !yyhl2279 {
		r.ReadEnd()
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2288 int
	var yyb2288 bool
	var yyhl2288 bool = l >= 0
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2288++
	if yyhl2288 {
		yyb2288 = yyj2288 > l
	} else {
		yyb2288 = r.CheckBreak()
	}
	if yyb2288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2288++
		if yyhl2288 {
			yyb2288 = yyj2288 > l
		} else {
			yyb2288 = r.CheckBreak()
		}
		if yyb2288 {
			break
		}
		z.DecStructFieldNotFound(yyj2288-1, "")
	}
	r.ReadEnd()
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2297 := z.EncBinary()
		_ = yym2297
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2298 := !z.EncBinary()
			yy2arr2298 := z.EncBasicHandle().StructToArray
			var yyq2298 [6]bool
			_, _, _ = yysep2298, yyq2298, yy2arr2298
			const yyr2298 bool = false
			yyq2298[0] = len(x.Capacity) != 0
			yyq2298[1] = x.Phase != ""
			yyq2298[2] = len(x.Conditions) != 0
			yyq2298[3] = len(x.Addresses) != 0
			yyq2298[4] = true
			yyq2298[5] = true
			if yyr2298 || yy2arr2298 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2298 int = 0
				for _, b := range yyq2298 {
					if b {
						yynn2298++
					}
				}
				r.EncodeMapStart(yynn2298)
			}
			if yyr2298 || yy2arr2298 {
				if yyq2298[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2298[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2298 || yy2arr2298 {
				if yyq2298[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2298[1] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2298 || yy2arr2298 {
				if yyq2298[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2302 := z.EncBinary()
						_ = yym2302
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2298[2] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2303 := z.EncBinary()
						_ = yym2303
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2298 || yy2arr2298 {
				if yyq2298[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2305 := z.EncBinary()
						_ = yym2305
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2298[3] {
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2306 := z.EncBinary()
						_ = yym2306
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2298 || yy2arr2298 {
				if yyq2298[4] {
					yy2308 := &x.DaemonEndpoints
					yy2308.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2298[4] {
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					yy2309 := &x.DaemonEndpoints
					yy2309.CodecEncodeSelf(e)
				}
			}
			if yyr2298 || yy2arr2298 {
				if yyq2298[5] {
					yy2311 := &x.NodeInfo
					yy2311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2298[5] {
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					yy2312 := &x.NodeInfo
					yy2312.CodecEncodeSelf(e)
				}
			}
			if yysep2298 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2313 := z.DecBinary()
	_ = yym2313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2314 := r.ReadMapStart()
			if yyl2314 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2314, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2314 := r.ReadArrayStart()
			if yyl2314 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2315Slc
	var yyhl2315 bool = l >= 0
	for yyj2315 := 0; ; yyj2315++ {
		if yyhl2315 {
			if yyj2315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2315Slc = r.DecodeBytes(yys2315Slc, true, true)
		yys2315 := string(yys2315Slc)
		switch yys2315 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2316 := &x.Capacity
				yyv2316.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2318 := &x.Conditions
				yym2319 := z.DecBinary()
				_ = yym2319
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2318), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2320 := &x.Addresses
				yym2321 := z.DecBinary()
				_ = yym2321
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2320), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2322 := &x.DaemonEndpoints
				yyv2322.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2323 := &x.NodeInfo
				yyv2323.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2315)
		} // end switch yys2315
	} // end for yyj2315
	if !yyhl2315 {
		r.ReadEnd()
	}
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2324 int
	var yyb2324 bool
	var yyhl2324 bool = l >= 0
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2325 := &x.Capacity
		yyv2325.CodecDecodeSelf(d)
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2327 := &x.Conditions
		yym2328 := z.DecBinary()
		_ = yym2328
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2327), d)
		}
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2329 := &x.Addresses
		yym2330 := z.DecBinary()
		_ = yym2330
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2329), d)
		}
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2331 := &x.DaemonEndpoints
		yyv2331.CodecDecodeSelf(d)
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2332 := &x.NodeInfo
		yyv2332.CodecDecodeSelf(d)
	}
	for {
		yyj2324++
		if yyhl2324 {
			yyb2324 = yyj2324 > l
		} else {
			yyb2324 = r.CheckBreak()
		}
		if yyb2324 {
			break
		}
		z.DecStructFieldNotFound(yyj2324-1, "")
	}
	r.ReadEnd()
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2333 := z.EncBinary()
	_ = yym2333
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2334 := z.DecBinary()
	_ = yym2334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2335 := z.EncBinary()
	_ = yym2335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2336 := z.DecBinary()
	_ = yym2336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2337 := z.EncBinary()
		_ = yym2337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2338 := !z.EncBinary()
			yy2arr2338 := z.EncBasicHandle().StructToArray
			var yyq2338 [6]bool
			_, _, _ = yysep2338, yyq2338, yy2arr2338
			const yyr2338 bool = false
			yyq2338[2] = true
			yyq2338[3] = true
			yyq2338[4] = x.Reason != ""
			yyq2338[5] = x.Message != ""
			if yyr2338 || yy2arr2338 {
				r.EncodeArrayStart(6)
			} else {
				var yynn2338 int = 2
				for _, b := range yyq2338 {
					if b {
						yynn2338++
					}
				}
				r.EncodeMapStart(yynn2338)
			}
			if yyr2338 || yy2arr2338 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2338 || yy2arr2338 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2338 || yy2arr2338 {
				if yyq2338[2] {
					yy2342 := &x.LastHeartbeatTime
					yym2343 := z.EncBinary()
					_ = yym2343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2342) {
					} else if yym2343 {
						z.EncBinaryMarshal(yy2342)
					} else if !yym2343 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2342)
					} else {
						z.EncFallback(yy2342)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2338[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					yy2344 := &x.LastHeartbeatTime
					yym2345 := z.EncBinary()
					_ = yym2345
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2344) {
					} else if yym2345 {
						z.EncBinaryMarshal(yy2344)
					} else if !yym2345 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2344)
					} else {
						z.EncFallback(yy2344)
					}
				}
			}
			if yyr2338 || yy2arr2338 {
				if yyq2338[3] {
					yy2347 := &x.LastTransitionTime
					yym2348 := z.EncBinary()
					_ = yym2348
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2347) {
					} else if yym2348 {
						z.EncBinaryMarshal(yy2347)
					} else if !yym2348 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2347)
					} else {
						z.EncFallback(yy2347)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2338[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy2349 := &x.LastTransitionTime
					yym2350 := z.EncBinary()
					_ = yym2350
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2349) {
					} else if yym2350 {
						z.EncBinaryMarshal(yy2349)
					} else if !yym2350 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2349)
					} else {
						z.EncFallback(yy2349)
					}
				}
			}
			if yyr2338 || yy2arr2338 {
				if yyq2338[4] {
					yym2352 := z.EncBinary()
					_ = yym2352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2338[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2353 := z.EncBinary()
					_ = yym2353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2338 || yy2arr2338 {
				if yyq2338[5] {
					yym2355 := z.EncBinary()
					_ = yym2355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2338[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep2338 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2357 := z.DecBinary()
	_ = yym2357
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2358 := r.ReadMapStart()
			if yyl2358 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2358, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2358 := r.ReadArrayStart()
			if yyl2358 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2358, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2359Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2359Slc
	var yyhl2359 bool = l >= 0
	for yyj2359 := 0; ; yyj2359++ {
		if yyhl2359 {
			if yyj2359 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2359Slc = r.DecodeBytes(yys2359Slc, true, true)
		yys2359 := string(yys2359Slc)
		switch yys2359 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2362 := &x.LastHeartbeatTime
				yym2363 := z.DecBinary()
				_ = yym2363
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2362) {
				} else if yym2363 {
					z.DecBinaryUnmarshal(yyv2362)
				} else if !yym2363 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2362)
				} else {
					z.DecFallback(yyv2362, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2364 := &x.LastTransitionTime
				yym2365 := z.DecBinary()
				_ = yym2365
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2364) {
				} else if yym2365 {
					z.DecBinaryUnmarshal(yyv2364)
				} else if !yym2365 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2364)
				} else {
					z.DecFallback(yyv2364, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2359)
		} // end switch yys2359
	} // end for yyj2359
	if !yyhl2359 {
		r.ReadEnd()
	}
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2368 int
	var yyb2368 bool
	var yyhl2368 bool = l >= 0
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2371 := &x.LastHeartbeatTime
		yym2372 := z.DecBinary()
		_ = yym2372
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2371) {
		} else if yym2372 {
			z.DecBinaryUnmarshal(yyv2371)
		} else if !yym2372 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2371)
		} else {
			z.DecFallback(yyv2371, false)
		}
	}
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2373 := &x.LastTransitionTime
		yym2374 := z.DecBinary()
		_ = yym2374
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2373) {
		} else if yym2374 {
			z.DecBinaryUnmarshal(yyv2373)
		} else if !yym2374 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2373)
		} else {
			z.DecFallback(yyv2373, false)
		}
	}
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2368++
	if yyhl2368 {
		yyb2368 = yyj2368 > l
	} else {
		yyb2368 = r.CheckBreak()
	}
	if yyb2368 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2368++
		if yyhl2368 {
			yyb2368 = yyj2368 > l
		} else {
			yyb2368 = r.CheckBreak()
		}
		if yyb2368 {
			break
		}
		z.DecStructFieldNotFound(yyj2368-1, "")
	}
	r.ReadEnd()
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2377 := z.EncBinary()
	_ = yym2377
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2378 := z.DecBinary()
	_ = yym2378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2379 := z.EncBinary()
		_ = yym2379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2380 := !z.EncBinary()
			yy2arr2380 := z.EncBasicHandle().StructToArray
			var yyq2380 [2]bool
			_, _, _ = yysep2380, yyq2380, yy2arr2380
			const yyr2380 bool = false
			if yyr2380 || yy2arr2380 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2380 int = 2
				for _, b := range yyq2380 {
					if b {
						yynn2380++
					}
				}
				r.EncodeMapStart(yynn2380)
			}
			if yyr2380 || yy2arr2380 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2380 || yy2arr2380 {
				yym2383 := z.EncBinary()
				_ = yym2383
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				yym2384 := z.EncBinary()
				_ = yym2384
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yysep2380 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2385 := z.DecBinary()
	_ = yym2385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2386 := r.ReadMapStart()
			if yyl2386 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2386, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2386 := r.ReadArrayStart()
			if yyl2386 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2386, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2387Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2387Slc
	var yyhl2387 bool = l >= 0
	for yyj2387 := 0; ; yyj2387++ {
		if yyhl2387 {
			if yyj2387 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2387Slc = r.DecodeBytes(yys2387Slc, true, true)
		yys2387 := string(yys2387Slc)
		switch yys2387 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2387)
		} // end switch yys2387
	} // end for yyj2387
	if !yyhl2387 {
		r.ReadEnd()
	}
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2390 int
	var yyb2390 bool
	var yyhl2390 bool = l >= 0
	yyj2390++
	if yyhl2390 {
		yyb2390 = yyj2390 > l
	} else {
		yyb2390 = r.CheckBreak()
	}
	if yyb2390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2390++
	if yyhl2390 {
		yyb2390 = yyj2390 > l
	} else {
		yyb2390 = r.CheckBreak()
	}
	if yyb2390 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2390++
		if yyhl2390 {
			yyb2390 = yyj2390 > l
		} else {
			yyb2390 = r.CheckBreak()
		}
		if yyb2390 {
			break
		}
		z.DecStructFieldNotFound(yyj2390-1, "")
	}
	r.ReadEnd()
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2393 := z.EncBinary()
		_ = yym2393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2394 := !z.EncBinary()
			yy2arr2394 := z.EncBasicHandle().StructToArray
			var yyq2394 [1]bool
			_, _, _ = yysep2394, yyq2394, yy2arr2394
			const yyr2394 bool = false
			yyq2394[0] = len(x.Capacity) != 0
			if yyr2394 || yy2arr2394 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2394 int = 0
				for _, b := range yyq2394 {
					if b {
						yynn2394++
					}
				}
				r.EncodeMapStart(yynn2394)
			}
			if yyr2394 || yy2arr2394 {
				if yyq2394[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2394[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yysep2394 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2396 := z.DecBinary()
	_ = yym2396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2397 := r.ReadMapStart()
			if yyl2397 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2397, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2397 := r.ReadArrayStart()
			if yyl2397 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2398Slc
	var yyhl2398 bool = l >= 0
	for yyj2398 := 0; ; yyj2398++ {
		if yyhl2398 {
			if yyj2398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2398Slc = r.DecodeBytes(yys2398Slc, true, true)
		yys2398 := string(yys2398Slc)
		switch yys2398 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2399 := &x.Capacity
				yyv2399.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2398)
		} // end switch yys2398
	} // end for yyj2398
	if !yyhl2398 {
		r.ReadEnd()
	}
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2400 int
	var yyb2400 bool
	var yyhl2400 bool = l >= 0
	yyj2400++
	if yyhl2400 {
		yyb2400 = yyj2400 > l
	} else {
		yyb2400 = r.CheckBreak()
	}
	if yyb2400 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2401 := &x.Capacity
		yyv2401.CodecDecodeSelf(d)
	}
	for {
		yyj2400++
		if yyhl2400 {
			yyb2400 = yyj2400 > l
		} else {
			yyb2400 = r.CheckBreak()
		}
		if yyb2400 {
			break
		}
		z.DecStructFieldNotFound(yyj2400-1, "")
	}
	r.ReadEnd()
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2402 := z.EncBinary()
	_ = yym2402
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2403 := z.DecBinary()
	_ = yym2403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2404 := z.EncBinary()
		_ = yym2404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2405 := z.DecBinary()
	_ = yym2405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2406 := z.EncBinary()
		_ = yym2406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2407 := !z.EncBinary()
			yy2arr2407 := z.EncBasicHandle().StructToArray
			var yyq2407 [5]bool
			_, _, _ = yysep2407, yyq2407, yy2arr2407
			const yyr2407 bool = false
			yyq2407[0] = x.Kind != ""
			yyq2407[1] = x.APIVersion != ""
			yyq2407[2] = true
			yyq2407[3] = true
			yyq2407[4] = true
			if yyr2407 || yy2arr2407 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2407 int = 0
				for _, b := range yyq2407 {
					if b {
						yynn2407++
					}
				}
				r.EncodeMapStart(yynn2407)
			}
			if yyr2407 || yy2arr2407 {
				if yyq2407[0] {
					yym2409 := z.EncBinary()
					_ = yym2409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2407[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2410 := z.EncBinary()
					_ = yym2410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2407 || yy2arr2407 {
				if yyq2407[1] {
					yym2412 := z.EncBinary()
					_ = yym2412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2407[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2413 := z.EncBinary()
					_ = yym2413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2407 || yy2arr2407 {
				if yyq2407[2] {
					yy2415 := &x.ObjectMeta
					yy2415.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2407[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2416 := &x.ObjectMeta
					yy2416.CodecEncodeSelf(e)
				}
			}
			if yyr2407 || yy2arr2407 {
				if yyq2407[3] {
					yy2418 := &x.Spec
					yy2418.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2407[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2419 := &x.Spec
					yy2419.CodecEncodeSelf(e)
				}
			}
			if yyr2407 || yy2arr2407 {
				if yyq2407[4] {
					yy2421 := &x.Status
					yy2421.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2407[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2422 := &x.Status
					yy2422.CodecEncodeSelf(e)
				}
			}
			if yysep2407 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2423 := z.DecBinary()
	_ = yym2423
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2424 := r.ReadMapStart()
			if yyl2424 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2424, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2424 := r.ReadArrayStart()
			if yyl2424 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2424, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2425Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2425Slc
	var yyhl2425 bool = l >= 0
	for yyj2425 := 0; ; yyj2425++ {
		if yyhl2425 {
			if yyj2425 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2425Slc = r.DecodeBytes(yys2425Slc, true, true)
		yys2425 := string(yys2425Slc)
		switch yys2425 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2428 := &x.ObjectMeta
				yyv2428.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2429 := &x.Spec
				yyv2429.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2430 := &x.Status
				yyv2430.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2425)
		} // end switch yys2425
	} // end for yyj2425
	if !yyhl2425 {
		r.ReadEnd()
	}
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2431 int
	var yyb2431 bool
	var yyhl2431 bool = l >= 0
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2434 := &x.ObjectMeta
		yyv2434.CodecDecodeSelf(d)
	}
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2435 := &x.Spec
		yyv2435.CodecDecodeSelf(d)
	}
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2436 := &x.Status
		yyv2436.CodecDecodeSelf(d)
	}
	for {
		yyj2431++
		if yyhl2431 {
			yyb2431 = yyj2431 > l
		} else {
			yyb2431 = r.CheckBreak()
		}
		if yyb2431 {
			break
		}
		z.DecStructFieldNotFound(yyj2431-1, "")
	}
	r.ReadEnd()
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2437 := z.EncBinary()
		_ = yym2437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2438 := !z.EncBinary()
			yy2arr2438 := z.EncBasicHandle().StructToArray
			var yyq2438 [4]bool
			_, _, _ = yysep2438, yyq2438, yy2arr2438
			const yyr2438 bool = false
			yyq2438[0] = x.Kind != ""
			yyq2438[1] = x.APIVersion != ""
			yyq2438[2] = true
			if yyr2438 || yy2arr2438 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2438 int = 1
				for _, b := range yyq2438 {
					if b {
						yynn2438++
					}
				}
				r.EncodeMapStart(yynn2438)
			}
			if yyr2438 || yy2arr2438 {
				if yyq2438[0] {
					yym2440 := z.EncBinary()
					_ = yym2440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2438[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2441 := z.EncBinary()
					_ = yym2441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				if yyq2438[1] {
					yym2443 := z.EncBinary()
					_ = yym2443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2438[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2444 := z.EncBinary()
					_ = yym2444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				if yyq2438[2] {
					yy2446 := &x.ListMeta
					yym2447 := z.EncBinary()
					_ = yym2447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2446) {
					} else {
						z.EncFallback(yy2446)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2438[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2448 := &x.ListMeta
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2448) {
					} else {
						z.EncFallback(yy2448)
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2451 := z.EncBinary()
					_ = yym2451
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yysep2438 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2453 := z.DecBinary()
	_ = yym2453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2454 := r.ReadMapStart()
			if yyl2454 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2454, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2454 := r.ReadArrayStart()
			if yyl2454 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2454, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2455Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2455Slc
	var yyhl2455 bool = l >= 0
	for yyj2455 := 0; ; yyj2455++ {
		if yyhl2455 {
			if yyj2455 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2455Slc = r.DecodeBytes(yys2455Slc, true, true)
		yys2455 := string(yys2455Slc)
		switch yys2455 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2458 := &x.ListMeta
				yym2459 := z.DecBinary()
				_ = yym2459
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2458) {
				} else {
					z.DecFallback(yyv2458, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2460 := &x.Items
				yym2461 := z.DecBinary()
				_ = yym2461
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2460), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2455)
		} // end switch yys2455
	} // end for yyj2455
	if !yyhl2455 {
		r.ReadEnd()
	}
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2462 int
	var yyb2462 bool
	var yyhl2462 bool = l >= 0
	yyj2462++
	if yyhl2462 {
		yyb2462 = yyj2462 > l
	} else {
		yyb2462 = r.CheckBreak()
	}
	if yyb2462 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2462++
	if yyhl2462 {
		yyb2462 = yyj2462 > l
	} else {
		yyb2462 = r.CheckBreak()
	}
	if yyb2462 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2462++
	if yyhl2462 {
		yyb2462 = yyj2462 > l
	} else {
		yyb2462 = r.CheckBreak()
	}
	if yyb2462 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2465 := &x.ListMeta
		yym2466 := z.DecBinary()
		_ = yym2466
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2465) {
		} else {
			z.DecFallback(yyv2465, false)
		}
	}
	yyj2462++
	if yyhl2462 {
		yyb2462 = yyj2462 > l
	} else {
		yyb2462 = r.CheckBreak()
	}
	if yyb2462 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2467 := &x.Items
		yym2468 := z.DecBinary()
		_ = yym2468
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2467), d)
		}
	}
	for {
		yyj2462++
		if yyhl2462 {
			yyb2462 = yyj2462 > l
		} else {
			yyb2462 = r.CheckBreak()
		}
		if yyb2462 {
			break
		}
		z.DecStructFieldNotFound(yyj2462-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2469 := z.EncBinary()
		_ = yym2469
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2470 := !z.EncBinary()
			yy2arr2470 := z.EncBasicHandle().StructToArray
			var yyq2470 [1]bool
			_, _, _ = yysep2470, yyq2470, yy2arr2470
			const yyr2470 bool = false
			if yyr2470 || yy2arr2470 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2470 int = 1
				for _, b := range yyq2470 {
					if b {
						yynn2470++
					}
				}
				r.EncodeMapStart(yynn2470)
			}
			if yyr2470 || yy2arr2470 {
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2472 := z.EncBinary()
					_ = yym2472
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2473 := z.EncBinary()
					_ = yym2473
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yysep2470 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2474 := z.DecBinary()
	_ = yym2474
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2475 := r.ReadMapStart()
			if yyl2475 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2475, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2475 := r.ReadArrayStart()
			if yyl2475 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2475, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2476Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2476Slc
	var yyhl2476 bool = l >= 0
	for yyj2476 := 0; ; yyj2476++ {
		if yyhl2476 {
			if yyj2476 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2476Slc = r.DecodeBytes(yys2476Slc, true, true)
		yys2476 := string(yys2476Slc)
		switch yys2476 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2477 := &x.Finalizers
				yym2478 := z.DecBinary()
				_ = yym2478
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2477), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2476)
		} // end switch yys2476
	} // end for yyj2476
	if !yyhl2476 {
		r.ReadEnd()
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2479 int
	var yyb2479 bool
	var yyhl2479 bool = l >= 0
	yyj2479++
	if yyhl2479 {
		yyb2479 = yyj2479 > l
	} else {
		yyb2479 = r.CheckBreak()
	}
	if yyb2479 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2480 := &x.Finalizers
		yym2481 := z.DecBinary()
		_ = yym2481
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2480), d)
		}
	}
	for {
		yyj2479++
		if yyhl2479 {
			yyb2479 = yyj2479 > l
		} else {
			yyb2479 = r.CheckBreak()
		}
		if yyb2479 {
			break
		}
		z.DecStructFieldNotFound(yyj2479-1, "")
	}
	r.ReadEnd()
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2482 := z.EncBinary()
	_ = yym2482
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2483 := z.DecBinary()
	_ = yym2483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2484 := z.EncBinary()
		_ = yym2484
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2485 := !z.EncBinary()
			yy2arr2485 := z.EncBasicHandle().StructToArray
			var yyq2485 [1]bool
			_, _, _ = yysep2485, yyq2485, yy2arr2485
			const yyr2485 bool = false
			yyq2485[0] = x.Phase != ""
			if yyr2485 || yy2arr2485 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2485 int = 0
				for _, b := range yyq2485 {
					if b {
						yynn2485++
					}
				}
				r.EncodeMapStart(yynn2485)
			}
			if yyr2485 || yy2arr2485 {
				if yyq2485[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2485[0] {
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yysep2485 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2487 := z.DecBinary()
	_ = yym2487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2488 := r.ReadMapStart()
			if yyl2488 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2488, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2488 := r.ReadArrayStart()
			if yyl2488 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2488, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2489Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2489Slc
	var yyhl2489 bool = l >= 0
	for yyj2489 := 0; ; yyj2489++ {
		if yyhl2489 {
			if yyj2489 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2489Slc = r.DecodeBytes(yys2489Slc, true, true)
		yys2489 := string(yys2489Slc)
		switch yys2489 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2489)
		} // end switch yys2489
	} // end for yyj2489
	if !yyhl2489 {
		r.ReadEnd()
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2491 int
	var yyb2491 bool
	var yyhl2491 bool = l >= 0
	yyj2491++
	if yyhl2491 {
		yyb2491 = yyj2491 > l
	} else {
		yyb2491 = r.CheckBreak()
	}
	if yyb2491 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2491++
		if yyhl2491 {
			yyb2491 = yyj2491 > l
		} else {
			yyb2491 = r.CheckBreak()
		}
		if yyb2491 {
			break
		}
		z.DecStructFieldNotFound(yyj2491-1, "")
	}
	r.ReadEnd()
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2493 := z.EncBinary()
	_ = yym2493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2494 := z.DecBinary()
	_ = yym2494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2495 := z.EncBinary()
		_ = yym2495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2496 := !z.EncBinary()
			yy2arr2496 := z.EncBasicHandle().StructToArray
			var yyq2496 [5]bool
			_, _, _ = yysep2496, yyq2496, yy2arr2496
			const yyr2496 bool = false
			yyq2496[0] = x.Kind != ""
			yyq2496[1] = x.APIVersion != ""
			yyq2496[2] = true
			yyq2496[3] = true
			yyq2496[4] = true
			if yyr2496 || yy2arr2496 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2496 int = 0
				for _, b := range yyq2496 {
					if b {
						yynn2496++
					}
				}
				r.EncodeMapStart(yynn2496)
			}
			if yyr2496 || yy2arr2496 {
				if yyq2496[0] {
					yym2498 := z.EncBinary()
					_ = yym2498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2496[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2496 || yy2arr2496 {
				if yyq2496[1] {
					yym2501 := z.EncBinary()
					_ = yym2501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2496[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2496 || yy2arr2496 {
				if yyq2496[2] {
					yy2504 := &x.ObjectMeta
					yy2504.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2496[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2505 := &x.ObjectMeta
					yy2505.CodecEncodeSelf(e)
				}
			}
			if yyr2496 || yy2arr2496 {
				if yyq2496[3] {
					yy2507 := &x.Spec
					yy2507.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2496[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy2508 := &x.Spec
					yy2508.CodecEncodeSelf(e)
				}
			}
			if yyr2496 || yy2arr2496 {
				if yyq2496[4] {
					yy2510 := &x.Status
					yy2510.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2496[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy2511 := &x.Status
					yy2511.CodecEncodeSelf(e)
				}
			}
			if yysep2496 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2512 := z.DecBinary()
	_ = yym2512
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2513 := r.ReadMapStart()
			if yyl2513 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2513, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2513 := r.ReadArrayStart()
			if yyl2513 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2513, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2514Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2514Slc
	var yyhl2514 bool = l >= 0
	for yyj2514 := 0; ; yyj2514++ {
		if yyhl2514 {
			if yyj2514 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2514Slc = r.DecodeBytes(yys2514Slc, true, true)
		yys2514 := string(yys2514Slc)
		switch yys2514 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2517 := &x.ObjectMeta
				yyv2517.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2518 := &x.Spec
				yyv2518.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2519 := &x.Status
				yyv2519.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2514)
		} // end switch yys2514
	} // end for yyj2514
	if !yyhl2514 {
		r.ReadEnd()
	}
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2520 int
	var yyb2520 bool
	var yyhl2520 bool = l >= 0
	yyj2520++
	if yyhl2520 {
		yyb2520 = yyj2520 > l
	} else {
		yyb2520 = r.CheckBreak()
	}
	if yyb2520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2520++
	if yyhl2520 {
		yyb2520 = yyj2520 > l
	} else {
		yyb2520 = r.CheckBreak()
	}
	if yyb2520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2520++
	if yyhl2520 {
		yyb2520 = yyj2520 > l
	} else {
		yyb2520 = r.CheckBreak()
	}
	if yyb2520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2523 := &x.ObjectMeta
		yyv2523.CodecDecodeSelf(d)
	}
	yyj2520++
	if yyhl2520 {
		yyb2520 = yyj2520 > l
	} else {
		yyb2520 = r.CheckBreak()
	}
	if yyb2520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2524 := &x.Spec
		yyv2524.CodecDecodeSelf(d)
	}
	yyj2520++
	if yyhl2520 {
		yyb2520 = yyj2520 > l
	} else {
		yyb2520 = r.CheckBreak()
	}
	if yyb2520 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2525 := &x.Status
		yyv2525.CodecDecodeSelf(d)
	}
	for {
		yyj2520++
		if yyhl2520 {
			yyb2520 = yyj2520 > l
		} else {
			yyb2520 = r.CheckBreak()
		}
		if yyb2520 {
			break
		}
		z.DecStructFieldNotFound(yyj2520-1, "")
	}
	r.ReadEnd()
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2526 := z.EncBinary()
		_ = yym2526
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2527 := !z.EncBinary()
			yy2arr2527 := z.EncBasicHandle().StructToArray
			var yyq2527 [4]bool
			_, _, _ = yysep2527, yyq2527, yy2arr2527
			const yyr2527 bool = false
			yyq2527[0] = x.Kind != ""
			yyq2527[1] = x.APIVersion != ""
			yyq2527[2] = true
			if yyr2527 || yy2arr2527 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2527 int = 1
				for _, b := range yyq2527 {
					if b {
						yynn2527++
					}
				}
				r.EncodeMapStart(yynn2527)
			}
			if yyr2527 || yy2arr2527 {
				if yyq2527[0] {
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2527[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2530 := z.EncBinary()
					_ = yym2530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2527 || yy2arr2527 {
				if yyq2527[1] {
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2527[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2533 := z.EncBinary()
					_ = yym2533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2527 || yy2arr2527 {
				if yyq2527[2] {
					yy2535 := &x.ListMeta
					yym2536 := z.EncBinary()
					_ = yym2536
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2535) {
					} else {
						z.EncFallback(yy2535)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2527[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2537 := &x.ListMeta
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2537) {
					} else {
						z.EncFallback(yy2537)
					}
				}
			}
			if yyr2527 || yy2arr2527 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2540 := z.EncBinary()
					_ = yym2540
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yysep2527 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2542 := z.DecBinary()
	_ = yym2542
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2543 := r.ReadMapStart()
			if yyl2543 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2543, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2543 := r.ReadArrayStart()
			if yyl2543 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2543, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2544Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2544Slc
	var yyhl2544 bool = l >= 0
	for yyj2544 := 0; ; yyj2544++ {
		if yyhl2544 {
			if yyj2544 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2544Slc = r.DecodeBytes(yys2544Slc, true, true)
		yys2544 := string(yys2544Slc)
		switch yys2544 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2547 := &x.ListMeta
				yym2548 := z.DecBinary()
				_ = yym2548
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2547) {
				} else {
					z.DecFallback(yyv2547, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2549 := &x.Items
				yym2550 := z.DecBinary()
				_ = yym2550
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2549), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2544)
		} // end switch yys2544
	} // end for yyj2544
	if !yyhl2544 {
		r.ReadEnd()
	}
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2551 int
	var yyb2551 bool
	var yyhl2551 bool = l >= 0
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2554 := &x.ListMeta
		yym2555 := z.DecBinary()
		_ = yym2555
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2554) {
		} else {
			z.DecFallback(yyv2554, false)
		}
	}
	yyj2551++
	if yyhl2551 {
		yyb2551 = yyj2551 > l
	} else {
		yyb2551 = r.CheckBreak()
	}
	if yyb2551 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2556 := &x.Items
		yym2557 := z.DecBinary()
		_ = yym2557
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2556), d)
		}
	}
	for {
		yyj2551++
		if yyhl2551 {
			yyb2551 = yyj2551 > l
		} else {
			yyb2551 = r.CheckBreak()
		}
		if yyb2551 {
			break
		}
		z.DecStructFieldNotFound(yyj2551-1, "")
	}
	r.ReadEnd()
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2558 := z.EncBinary()
		_ = yym2558
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2559 := !z.EncBinary()
			yy2arr2559 := z.EncBasicHandle().StructToArray
			var yyq2559 [4]bool
			_, _, _ = yysep2559, yyq2559, yy2arr2559
			const yyr2559 bool = false
			yyq2559[0] = x.Kind != ""
			yyq2559[1] = x.APIVersion != ""
			yyq2559[2] = true
			if yyr2559 || yy2arr2559 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2559 int = 1
				for _, b := range yyq2559 {
					if b {
						yynn2559++
					}
				}
				r.EncodeMapStart(yynn2559)
			}
			if yyr2559 || yy2arr2559 {
				if yyq2559[0] {
					yym2561 := z.EncBinary()
					_ = yym2561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2559[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2562 := z.EncBinary()
					_ = yym2562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2559 || yy2arr2559 {
				if yyq2559[1] {
					yym2564 := z.EncBinary()
					_ = yym2564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2559[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2559 || yy2arr2559 {
				if yyq2559[2] {
					yy2567 := &x.ObjectMeta
					yy2567.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2559[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2568 := &x.ObjectMeta
					yy2568.CodecEncodeSelf(e)
				}
			}
			if yyr2559 || yy2arr2559 {
				yy2570 := &x.Target
				yy2570.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				yy2571 := &x.Target
				yy2571.CodecEncodeSelf(e)
			}
			if yysep2559 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2572 := z.DecBinary()
	_ = yym2572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2573 := r.ReadMapStart()
			if yyl2573 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2573, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2573 := r.ReadArrayStart()
			if yyl2573 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2573, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2574Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2574Slc
	var yyhl2574 bool = l >= 0
	for yyj2574 := 0; ; yyj2574++ {
		if yyhl2574 {
			if yyj2574 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2574Slc = r.DecodeBytes(yys2574Slc, true, true)
		yys2574 := string(yys2574Slc)
		switch yys2574 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2577 := &x.ObjectMeta
				yyv2577.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2578 := &x.Target
				yyv2578.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2574)
		} // end switch yys2574
	} // end for yyj2574
	if !yyhl2574 {
		r.ReadEnd()
	}
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2579 int
	var yyb2579 bool
	var yyhl2579 bool = l >= 0
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2582 := &x.ObjectMeta
		yyv2582.CodecDecodeSelf(d)
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2583 := &x.Target
		yyv2583.CodecDecodeSelf(d)
	}
	for {
		yyj2579++
		if yyhl2579 {
			yyb2579 = yyj2579 > l
		} else {
			yyb2579 = r.CheckBreak()
		}
		if yyb2579 {
			break
		}
		z.DecStructFieldNotFound(yyj2579-1, "")
	}
	r.ReadEnd()
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2584 := z.EncBinary()
		_ = yym2584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2585 := !z.EncBinary()
			yy2arr2585 := z.EncBasicHandle().StructToArray
			var yyq2585 [3]bool
			_, _, _ = yysep2585, yyq2585, yy2arr2585
			const yyr2585 bool = false
			yyq2585[0] = x.Kind != ""
			yyq2585[1] = x.APIVersion != ""
			if yyr2585 || yy2arr2585 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2585 int = 1
				for _, b := range yyq2585 {
					if b {
						yynn2585++
					}
				}
				r.EncodeMapStart(yynn2585)
			}
			if yyr2585 || yy2arr2585 {
				if yyq2585[0] {
					yym2587 := z.EncBinary()
					_ = yym2587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2585[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2588 := z.EncBinary()
					_ = yym2588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2585 || yy2arr2585 {
				if yyq2585[1] {
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2585[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2585 || yy2arr2585 {
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2593 := *x.GracePeriodSeconds
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						r.EncodeInt(int64(yy2593))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2595 := *x.GracePeriodSeconds
					yym2596 := z.EncBinary()
					_ = yym2596
					if false {
					} else {
						r.EncodeInt(int64(yy2595))
					}
				}
			}
			if yysep2585 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2597 := z.DecBinary()
	_ = yym2597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2598 := r.ReadMapStart()
			if yyl2598 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2598, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2598 := r.ReadArrayStart()
			if yyl2598 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2599Slc
	var yyhl2599 bool = l >= 0
	for yyj2599 := 0; ; yyj2599++ {
		if yyhl2599 {
			if yyj2599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2599Slc = r.DecodeBytes(yys2599Slc, true, true)
		yys2599 := string(yys2599Slc)
		switch yys2599 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2603 := z.DecBinary()
				_ = yym2603
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2599)
		} // end switch yys2599
	} // end for yyj2599
	if !yyhl2599 {
		r.ReadEnd()
	}
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2604 int
	var yyb2604 bool
	var yyhl2604 bool = l >= 0
	yyj2604++
	if yyhl2604 {
		yyb2604 = yyj2604 > l
	} else {
		yyb2604 = r.CheckBreak()
	}
	if yyb2604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2604++
	if yyhl2604 {
		yyb2604 = yyj2604 > l
	} else {
		yyb2604 = r.CheckBreak()
	}
	if yyb2604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2604++
	if yyhl2604 {
		yyb2604 = yyj2604 > l
	} else {
		yyb2604 = r.CheckBreak()
	}
	if yyb2604 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2608 := z.DecBinary()
		_ = yym2608
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2604++
		if yyhl2604 {
			yyb2604 = yyj2604 > l
		} else {
			yyb2604 = r.CheckBreak()
		}
		if yyb2604 {
			break
		}
		z.DecStructFieldNotFound(yyj2604-1, "")
	}
	r.ReadEnd()
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2609 := z.EncBinary()
		_ = yym2609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2610 := !z.EncBinary()
			yy2arr2610 := z.EncBasicHandle().StructToArray
			var yyq2610 [7]bool
			_, _, _ = yysep2610, yyq2610, yy2arr2610
			const yyr2610 bool = false
			yyq2610[0] = x.Kind != ""
			yyq2610[1] = x.APIVersion != ""
			if yyr2610 || yy2arr2610 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2610 int = 5
				for _, b := range yyq2610 {
					if b {
						yynn2610++
					}
				}
				r.EncodeMapStart(yynn2610)
			}
			if yyr2610 || yy2arr2610 {
				if yyq2610[0] {
					yym2612 := z.EncBinary()
					_ = yym2612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2610[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2613 := z.EncBinary()
					_ = yym2613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2610 || yy2arr2610 {
				if yyq2610[1] {
					yym2615 := z.EncBinary()
					_ = yym2615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2610[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2616 := z.EncBinary()
					_ = yym2616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2610 || yy2arr2610 {
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr2610 || yy2arr2610 {
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr2610 || yy2arr2610 {
				yym2624 := z.EncBinary()
				_ = yym2624
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				yym2625 := z.EncBinary()
				_ = yym2625
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr2610 || yy2arr2610 {
				yym2627 := z.EncBinary()
				_ = yym2627
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				yym2628 := z.EncBinary()
				_ = yym2628
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr2610 || yy2arr2610 {
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2630 := *x.TimeoutSeconds
					yym2631 := z.EncBinary()
					_ = yym2631
					if false {
					} else {
						r.EncodeInt(int64(yy2630))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy2632 := *x.TimeoutSeconds
					yym2633 := z.EncBinary()
					_ = yym2633
					if false {
					} else {
						r.EncodeInt(int64(yy2632))
					}
				}
			}
			if yysep2610 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2634 := z.DecBinary()
	_ = yym2634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2635 := r.ReadMapStart()
			if yyl2635 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2635, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2635 := r.ReadArrayStart()
			if yyl2635 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2636Slc
	var yyhl2636 bool = l >= 0
	for yyj2636 := 0; ; yyj2636++ {
		if yyhl2636 {
			if yyj2636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2636Slc = r.DecodeBytes(yys2636Slc, true, true)
		yys2636 := string(yys2636Slc)
		switch yys2636 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv2639 := &x.LabelSelector
				yym2640 := z.DecBinary()
				_ = yym2640
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2639) {
				} else {
					z.DecFallback(yyv2639, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv2641 := &x.FieldSelector
				yym2642 := z.DecBinary()
				_ = yym2642
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2641) {
				} else {
					z.DecFallback(yyv2641, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2646 := z.DecBinary()
				_ = yym2646
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2636)
		} // end switch yys2636
	} // end for yyj2636
	if !yyhl2636 {
		r.ReadEnd()
	}
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2647 int
	var yyb2647 bool
	var yyhl2647 bool = l >= 0
	yyj2647++
	if yyhl2647 {
		yyb2647 = yyj2647 > l
	} else {
		yyb2647 = r.CheckBreak()
	}
	if yyb2647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2647++
	if yyhl2647 {
		yyb2647 = yyj2647 > l
	} else {
		yyb2647 = r.CheckBreak()
	}
	if yyb2647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2647++
	if yyhl2647 {
		yyb2647 = yyj2647 > l
	} else {
		yyb2647 = r.CheckBreak()
	}
	if yyb2647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv2650 := &x.LabelSelector
		yym2651 := z.DecBinary()
		_ = yym2651
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2650) {
		} else {
			z.DecFallback(yyv2650, true)
		}
	}
	yyj2647++
	if yyhl2647 {
		yyb2647 = yyj2647 > l
	} else {
		yyb2647 = r.CheckBreak()
	}
	if yyb2647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv2652 := &x.FieldSelector
		yym2653 := z.DecBinary()
		_ = yym2653
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2652) {
		} else {
			z.DecFallback(yyv2652, true)
		}
	}
	yyj2647++
	if yyhl2647 {
		yyb2647 = yyj2647 > l
	} else {
		yyb2647 = r.CheckBreak()
	}
	if yyb2647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2647++
	if yyhl2647 {
		yyb2647 = yyj2647 > l
	} else {
		yyb2647 = r.CheckBreak()
	}
	if yyb2647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2647++
	if yyhl2647 {
		yyb2647 = yyj2647 > l
	} else {
		yyb2647 = r.CheckBreak()
	}
	if yyb2647 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2657 := z.DecBinary()
		_ = yym2657
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2647++
		if yyhl2647 {
			yyb2647 = yyj2647 > l
		} else {
			yyb2647 = r.CheckBreak()
		}
		if yyb2647 {
			break
		}
		z.DecStructFieldNotFound(yyj2647-1, "")
	}
	r.ReadEnd()
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2658 := z.EncBinary()
		_ = yym2658
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2659 := !z.EncBinary()
			yy2arr2659 := z.EncBasicHandle().StructToArray
			var yyq2659 [10]bool
			_, _, _ = yysep2659, yyq2659, yy2arr2659
			const yyr2659 bool = false
			yyq2659[0] = x.Kind != ""
			yyq2659[1] = x.APIVersion != ""
			if yyr2659 || yy2arr2659 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2659 int = 8
				for _, b := range yyq2659 {
					if b {
						yynn2659++
					}
				}
				r.EncodeMapStart(yynn2659)
			}
			if yyr2659 || yy2arr2659 {
				if yyq2659[0] {
					yym2661 := z.EncBinary()
					_ = yym2661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2659[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2662 := z.EncBinary()
					_ = yym2662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				if yyq2659[1] {
					yym2664 := z.EncBinary()
					_ = yym2664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2659[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2665 := z.EncBinary()
					_ = yym2665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				yym2667 := z.EncBinary()
				_ = yym2667
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2668 := z.EncBinary()
				_ = yym2668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2659 || yy2arr2659 {
				yym2670 := z.EncBinary()
				_ = yym2670
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				yym2671 := z.EncBinary()
				_ = yym2671
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2659 || yy2arr2659 {
				yym2673 := z.EncBinary()
				_ = yym2673
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				yym2674 := z.EncBinary()
				_ = yym2674
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2659 || yy2arr2659 {
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2676 := *x.SinceSeconds
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeInt(int64(yy2676))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2678 := *x.SinceSeconds
					yym2679 := z.EncBinary()
					_ = yym2679
					if false {
					} else {
						r.EncodeInt(int64(yy2678))
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2681 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2681 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2682 := z.EncBinary()
					_ = yym2682
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2682 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2682 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				yym2684 := z.EncBinary()
				_ = yym2684
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				yym2685 := z.EncBinary()
				_ = yym2685
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2659 || yy2arr2659 {
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2687 := *x.TailLines
					yym2688 := z.EncBinary()
					_ = yym2688
					if false {
					} else {
						r.EncodeInt(int64(yy2687))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2689 := *x.TailLines
					yym2690 := z.EncBinary()
					_ = yym2690
					if false {
					} else {
						r.EncodeInt(int64(yy2689))
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2692 := *x.LimitBytes
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeInt(int64(yy2692))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2694 := *x.LimitBytes
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeInt(int64(yy2694))
					}
				}
			}
			if yysep2659 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2696 := z.DecBinary()
	_ = yym2696
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2697 := r.ReadMapStart()
			if yyl2697 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2697, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2697 := r.ReadArrayStart()
			if yyl2697 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2697, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2698Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2698Slc
	var yyhl2698 bool = l >= 0
	for yyj2698 := 0; ; yyj2698++ {
		if yyhl2698 {
			if yyj2698 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2698Slc = r.DecodeBytes(yys2698Slc, true, true)
		yys2698 := string(yys2698Slc)
		switch yys2698 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2705 := z.DecBinary()
				_ = yym2705
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2707 := z.DecBinary()
				_ = yym2707
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2707 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2707 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2710 := z.DecBinary()
				_ = yym2710
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2712 := z.DecBinary()
				_ = yym2712
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2698)
		} // end switch yys2698
	} // end for yyj2698
	if !yyhl2698 {
		r.ReadEnd()
	}
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2713 int
	var yyb2713 bool
	var yyhl2713 bool = l >= 0
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2720 := z.DecBinary()
		_ = yym2720
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2722 := z.DecBinary()
		_ = yym2722
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2722 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2722 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2725 := z.DecBinary()
		_ = yym2725
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2713++
	if yyhl2713 {
		yyb2713 = yyj2713 > l
	} else {
		yyb2713 = r.CheckBreak()
	}
	if yyb2713 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2727 := z.DecBinary()
		_ = yym2727
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2713++
		if yyhl2713 {
			yyb2713 = yyj2713 > l
		} else {
			yyb2713 = r.CheckBreak()
		}
		if yyb2713 {
			break
		}
		z.DecStructFieldNotFound(yyj2713-1, "")
	}
	r.ReadEnd()
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2728 := z.EncBinary()
		_ = yym2728
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2729 := !z.EncBinary()
			yy2arr2729 := z.EncBasicHandle().StructToArray
			var yyq2729 [7]bool
			_, _, _ = yysep2729, yyq2729, yy2arr2729
			const yyr2729 bool = false
			yyq2729[0] = x.Kind != ""
			yyq2729[1] = x.APIVersion != ""
			yyq2729[2] = x.Stdin != false
			yyq2729[3] = x.Stdout != false
			yyq2729[4] = x.Stderr != false
			yyq2729[5] = x.TTY != false
			yyq2729[6] = x.Container != ""
			if yyr2729 || yy2arr2729 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2729 int = 0
				for _, b := range yyq2729 {
					if b {
						yynn2729++
					}
				}
				r.EncodeMapStart(yynn2729)
			}
			if yyr2729 || yy2arr2729 {
				if yyq2729[0] {
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2729[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2729 || yy2arr2729 {
				if yyq2729[1] {
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2729[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2729 || yy2arr2729 {
				if yyq2729[2] {
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2729[2] {
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2729 || yy2arr2729 {
				if yyq2729[3] {
					yym2740 := z.EncBinary()
					_ = yym2740
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2729[3] {
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					yym2741 := z.EncBinary()
					_ = yym2741
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2729 || yy2arr2729 {
				if yyq2729[4] {
					yym2743 := z.EncBinary()
					_ = yym2743
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2729[4] {
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					yym2744 := z.EncBinary()
					_ = yym2744
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2729 || yy2arr2729 {
				if yyq2729[5] {
					yym2746 := z.EncBinary()
					_ = yym2746
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2729[5] {
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2729 || yy2arr2729 {
				if yyq2729[6] {
					yym2749 := z.EncBinary()
					_ = yym2749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2729[6] {
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yysep2729 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2751 := z.DecBinary()
	_ = yym2751
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2752 := r.ReadMapStart()
			if yyl2752 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2752, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2752 := r.ReadArrayStart()
			if yyl2752 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2752, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2753Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2753Slc
	var yyhl2753 bool = l >= 0
	for yyj2753 := 0; ; yyj2753++ {
		if yyhl2753 {
			if yyj2753 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2753Slc = r.DecodeBytes(yys2753Slc, true, true)
		yys2753 := string(yys2753Slc)
		switch yys2753 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2753)
		} // end switch yys2753
	} // end for yyj2753
	if !yyhl2753 {
		r.ReadEnd()
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2761 int
	var yyb2761 bool
	var yyhl2761 bool = l >= 0
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2761++
	if yyhl2761 {
		yyb2761 = yyj2761 > l
	} else {
		yyb2761 = r.CheckBreak()
	}
	if yyb2761 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2761++
		if yyhl2761 {
			yyb2761 = yyj2761 > l
		} else {
			yyb2761 = r.CheckBreak()
		}
		if yyb2761 {
			break
		}
		z.DecStructFieldNotFound(yyj2761-1, "")
	}
	r.ReadEnd()
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2769 := z.EncBinary()
		_ = yym2769
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2770 := !z.EncBinary()
			yy2arr2770 := z.EncBasicHandle().StructToArray
			var yyq2770 [8]bool
			_, _, _ = yysep2770, yyq2770, yy2arr2770
			const yyr2770 bool = false
			yyq2770[0] = x.Kind != ""
			yyq2770[1] = x.APIVersion != ""
			if yyr2770 || yy2arr2770 {
				r.EncodeArrayStart(8)
			} else {
				var yynn2770 int = 6
				for _, b := range yyq2770 {
					if b {
						yynn2770++
					}
				}
				r.EncodeMapStart(yynn2770)
			}
			if yyr2770 || yy2arr2770 {
				if yyq2770[0] {
					yym2772 := z.EncBinary()
					_ = yym2772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2770[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2773 := z.EncBinary()
					_ = yym2773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2770 || yy2arr2770 {
				if yyq2770[1] {
					yym2775 := z.EncBinary()
					_ = yym2775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2770[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2776 := z.EncBinary()
					_ = yym2776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2770 || yy2arr2770 {
				yym2778 := z.EncBinary()
				_ = yym2778
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				yym2779 := z.EncBinary()
				_ = yym2779
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2770 || yy2arr2770 {
				yym2781 := z.EncBinary()
				_ = yym2781
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				yym2782 := z.EncBinary()
				_ = yym2782
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2770 || yy2arr2770 {
				yym2784 := z.EncBinary()
				_ = yym2784
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				yym2785 := z.EncBinary()
				_ = yym2785
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2770 || yy2arr2770 {
				yym2787 := z.EncBinary()
				_ = yym2787
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				yym2788 := z.EncBinary()
				_ = yym2788
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2770 || yy2arr2770 {
				yym2790 := z.EncBinary()
				_ = yym2790
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				yym2791 := z.EncBinary()
				_ = yym2791
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2770 || yy2arr2770 {
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2794 := z.EncBinary()
					_ = yym2794
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yysep2770 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2795 := z.DecBinary()
	_ = yym2795
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2796 := r.ReadMapStart()
			if yyl2796 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2796, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2796 := r.ReadArrayStart()
			if yyl2796 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2796, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2797Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2797Slc
	var yyhl2797 bool = l >= 0
	for yyj2797 := 0; ; yyj2797++ {
		if yyhl2797 {
			if yyj2797 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2797Slc = r.DecodeBytes(yys2797Slc, true, true)
		yys2797 := string(yys2797Slc)
		switch yys2797 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2805 := &x.Command
				yym2806 := z.DecBinary()
				_ = yym2806
				if false {
				} else {
					z.F.DecSliceStringX(yyv2805, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2797)
		} // end switch yys2797
	} // end for yyj2797
	if !yyhl2797 {
		r.ReadEnd()
	}
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2807 int
	var yyb2807 bool
	var yyhl2807 bool = l >= 0
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2815 := &x.Command
		yym2816 := z.DecBinary()
		_ = yym2816
		if false {
		} else {
			z.F.DecSliceStringX(yyv2815, false, d)
		}
	}
	for {
		yyj2807++
		if yyhl2807 {
			yyb2807 = yyj2807 > l
		} else {
			yyb2807 = r.CheckBreak()
		}
		if yyb2807 {
			break
		}
		z.DecStructFieldNotFound(yyj2807-1, "")
	}
	r.ReadEnd()
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2817 := z.EncBinary()
		_ = yym2817
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2818 := !z.EncBinary()
			yy2arr2818 := z.EncBasicHandle().StructToArray
			var yyq2818 [3]bool
			_, _, _ = yysep2818, yyq2818, yy2arr2818
			const yyr2818 bool = false
			yyq2818[0] = x.Kind != ""
			yyq2818[1] = x.APIVersion != ""
			if yyr2818 || yy2arr2818 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2818 int = 1
				for _, b := range yyq2818 {
					if b {
						yynn2818++
					}
				}
				r.EncodeMapStart(yynn2818)
			}
			if yyr2818 || yy2arr2818 {
				if yyq2818[0] {
					yym2820 := z.EncBinary()
					_ = yym2820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2818[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2818 || yy2arr2818 {
				if yyq2818[1] {
					yym2823 := z.EncBinary()
					_ = yym2823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2818[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2824 := z.EncBinary()
					_ = yym2824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2818 || yy2arr2818 {
				yym2826 := z.EncBinary()
				_ = yym2826
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				yym2827 := z.EncBinary()
				_ = yym2827
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep2818 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2828 := z.DecBinary()
	_ = yym2828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2829 := r.ReadMapStart()
			if yyl2829 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2829, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2829 := r.ReadArrayStart()
			if yyl2829 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2830Slc
	var yyhl2830 bool = l >= 0
	for yyj2830 := 0; ; yyj2830++ {
		if yyhl2830 {
			if yyj2830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2830Slc = r.DecodeBytes(yys2830Slc, true, true)
		yys2830 := string(yys2830Slc)
		switch yys2830 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2830)
		} // end switch yys2830
	} // end for yyj2830
	if !yyhl2830 {
		r.ReadEnd()
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2834 int
	var yyb2834 bool
	var yyhl2834 bool = l >= 0
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2834++
	if yyhl2834 {
		yyb2834 = yyj2834 > l
	} else {
		yyb2834 = r.CheckBreak()
	}
	if yyb2834 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2834++
		if yyhl2834 {
			yyb2834 = yyj2834 > l
		} else {
			yyb2834 = r.CheckBreak()
		}
		if yyb2834 {
			break
		}
		z.DecStructFieldNotFound(yyj2834-1, "")
	}
	r.ReadEnd()
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2838 := z.EncBinary()
		_ = yym2838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2839 := !z.EncBinary()
			yy2arr2839 := z.EncBasicHandle().StructToArray
			var yyq2839 [7]bool
			_, _, _ = yysep2839, yyq2839, yy2arr2839
			const yyr2839 bool = false
			yyq2839[0] = x.Kind != ""
			yyq2839[1] = x.Namespace != ""
			yyq2839[2] = x.Name != ""
			yyq2839[3] = x.UID != ""
			yyq2839[4] = x.APIVersion != ""
			yyq2839[5] = x.ResourceVersion != ""
			yyq2839[6] = x.FieldPath != ""
			if yyr2839 || yy2arr2839 {
				r.EncodeArrayStart(7)
			} else {
				var yynn2839 int = 0
				for _, b := range yyq2839 {
					if b {
						yynn2839++
					}
				}
				r.EncodeMapStart(yynn2839)
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[0] {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[1] {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[2] {
					yym2847 := z.EncBinary()
					_ = yym2847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[3] {
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[3] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym2851 := z.EncBinary()
					_ = yym2851
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[4] {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[4] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[5] {
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[5] {
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					yym2857 := z.EncBinary()
					_ = yym2857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				if yyq2839[6] {
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[6] {
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					yym2860 := z.EncBinary()
					_ = yym2860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yysep2839 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2861 := z.DecBinary()
	_ = yym2861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2862 := r.ReadMapStart()
			if yyl2862 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2862, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2862 := r.ReadArrayStart()
			if yyl2862 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2863Slc
	var yyhl2863 bool = l >= 0
	for yyj2863 := 0; ; yyj2863++ {
		if yyhl2863 {
			if yyj2863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2863Slc = r.DecodeBytes(yys2863Slc, true, true)
		yys2863 := string(yys2863Slc)
		switch yys2863 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2863)
		} // end switch yys2863
	} // end for yyj2863
	if !yyhl2863 {
		r.ReadEnd()
	}
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2871 int
	var yyb2871 bool
	var yyhl2871 bool = l >= 0
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2871++
	if yyhl2871 {
		yyb2871 = yyj2871 > l
	} else {
		yyb2871 = r.CheckBreak()
	}
	if yyb2871 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2871++
		if yyhl2871 {
			yyb2871 = yyj2871 > l
		} else {
			yyb2871 = r.CheckBreak()
		}
		if yyb2871 {
			break
		}
		z.DecStructFieldNotFound(yyj2871-1, "")
	}
	r.ReadEnd()
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2879 := z.EncBinary()
		_ = yym2879
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2880 := !z.EncBinary()
			yy2arr2880 := z.EncBasicHandle().StructToArray
			var yyq2880 [1]bool
			_, _, _ = yysep2880, yyq2880, yy2arr2880
			const yyr2880 bool = false
			if yyr2880 || yy2arr2880 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2880 int = 1
				for _, b := range yyq2880 {
					if b {
						yynn2880++
					}
				}
				r.EncodeMapStart(yynn2880)
			}
			if yyr2880 || yy2arr2880 {
				yym2882 := z.EncBinary()
				_ = yym2882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				yym2883 := z.EncBinary()
				_ = yym2883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yysep2880 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2884 := z.DecBinary()
	_ = yym2884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2885 := r.ReadMapStart()
			if yyl2885 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2885, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2885 := r.ReadArrayStart()
			if yyl2885 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2886Slc
	var yyhl2886 bool = l >= 0
	for yyj2886 := 0; ; yyj2886++ {
		if yyhl2886 {
			if yyj2886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2886Slc = r.DecodeBytes(yys2886Slc, true, true)
		yys2886 := string(yys2886Slc)
		switch yys2886 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2886)
		} // end switch yys2886
	} // end for yyj2886
	if !yyhl2886 {
		r.ReadEnd()
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2888 int
	var yyb2888 bool
	var yyhl2888 bool = l >= 0
	yyj2888++
	if yyhl2888 {
		yyb2888 = yyj2888 > l
	} else {
		yyb2888 = r.CheckBreak()
	}
	if yyb2888 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2888++
		if yyhl2888 {
			yyb2888 = yyj2888 > l
		} else {
			yyb2888 = r.CheckBreak()
		}
		if yyb2888 {
			break
		}
		z.DecStructFieldNotFound(yyj2888-1, "")
	}
	r.ReadEnd()
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2890 := z.EncBinary()
		_ = yym2890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2891 := !z.EncBinary()
			yy2arr2891 := z.EncBasicHandle().StructToArray
			var yyq2891 [3]bool
			_, _, _ = yysep2891, yyq2891, yy2arr2891
			const yyr2891 bool = false
			yyq2891[0] = x.Kind != ""
			yyq2891[1] = x.APIVersion != ""
			yyq2891[2] = true
			if yyr2891 || yy2arr2891 {
				r.EncodeArrayStart(3)
			} else {
				var yynn2891 int = 0
				for _, b := range yyq2891 {
					if b {
						yynn2891++
					}
				}
				r.EncodeMapStart(yynn2891)
			}
			if yyr2891 || yy2arr2891 {
				if yyq2891[0] {
					yym2893 := z.EncBinary()
					_ = yym2893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2891[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2894 := z.EncBinary()
					_ = yym2894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2891 || yy2arr2891 {
				if yyq2891[1] {
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2891[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2897 := z.EncBinary()
					_ = yym2897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2891 || yy2arr2891 {
				if yyq2891[2] {
					yy2899 := &x.Reference
					yy2899.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2891[2] {
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					yy2900 := &x.Reference
					yy2900.CodecEncodeSelf(e)
				}
			}
			if yysep2891 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2901 := z.DecBinary()
	_ = yym2901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2902 := r.ReadMapStart()
			if yyl2902 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2902, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2902 := r.ReadArrayStart()
			if yyl2902 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2903Slc
	var yyhl2903 bool = l >= 0
	for yyj2903 := 0; ; yyj2903++ {
		if yyhl2903 {
			if yyj2903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2903Slc = r.DecodeBytes(yys2903Slc, true, true)
		yys2903 := string(yys2903Slc)
		switch yys2903 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2906 := &x.Reference
				yyv2906.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2903)
		} // end switch yys2903
	} // end for yyj2903
	if !yyhl2903 {
		r.ReadEnd()
	}
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2907 int
	var yyb2907 bool
	var yyhl2907 bool = l >= 0
	yyj2907++
	if yyhl2907 {
		yyb2907 = yyj2907 > l
	} else {
		yyb2907 = r.CheckBreak()
	}
	if yyb2907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2907++
	if yyhl2907 {
		yyb2907 = yyj2907 > l
	} else {
		yyb2907 = r.CheckBreak()
	}
	if yyb2907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2907++
	if yyhl2907 {
		yyb2907 = yyj2907 > l
	} else {
		yyb2907 = r.CheckBreak()
	}
	if yyb2907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2910 := &x.Reference
		yyv2910.CodecDecodeSelf(d)
	}
	for {
		yyj2907++
		if yyhl2907 {
			yyb2907 = yyj2907 > l
		} else {
			yyb2907 = r.CheckBreak()
		}
		if yyb2907 {
			break
		}
		z.DecStructFieldNotFound(yyj2907-1, "")
	}
	r.ReadEnd()
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2911 := z.EncBinary()
		_ = yym2911
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2912 := !z.EncBinary()
			yy2arr2912 := z.EncBasicHandle().StructToArray
			var yyq2912 [2]bool
			_, _, _ = yysep2912, yyq2912, yy2arr2912
			const yyr2912 bool = false
			yyq2912[0] = x.Component != ""
			yyq2912[1] = x.Host != ""
			if yyr2912 || yy2arr2912 {
				r.EncodeArrayStart(2)
			} else {
				var yynn2912 int = 0
				for _, b := range yyq2912 {
					if b {
						yynn2912++
					}
				}
				r.EncodeMapStart(yynn2912)
			}
			if yyr2912 || yy2arr2912 {
				if yyq2912[0] {
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2912[0] {
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					yym2915 := z.EncBinary()
					_ = yym2915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2912 || yy2arr2912 {
				if yyq2912[1] {
					yym2917 := z.EncBinary()
					_ = yym2917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2912[1] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym2918 := z.EncBinary()
					_ = yym2918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yysep2912 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2919 := z.DecBinary()
	_ = yym2919
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2920 := r.ReadMapStart()
			if yyl2920 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2920, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2920 := r.ReadArrayStart()
			if yyl2920 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2920, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2921Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2921Slc
	var yyhl2921 bool = l >= 0
	for yyj2921 := 0; ; yyj2921++ {
		if yyhl2921 {
			if yyj2921 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2921Slc = r.DecodeBytes(yys2921Slc, true, true)
		yys2921 := string(yys2921Slc)
		switch yys2921 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2921)
		} // end switch yys2921
	} // end for yyj2921
	if !yyhl2921 {
		r.ReadEnd()
	}
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2924 int
	var yyb2924 bool
	var yyhl2924 bool = l >= 0
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2924++
		if yyhl2924 {
			yyb2924 = yyj2924 > l
		} else {
			yyb2924 = r.CheckBreak()
		}
		if yyb2924 {
			break
		}
		z.DecStructFieldNotFound(yyj2924-1, "")
	}
	r.ReadEnd()
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2927 := z.EncBinary()
		_ = yym2927
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2928 := !z.EncBinary()
			yy2arr2928 := z.EncBasicHandle().StructToArray
			var yyq2928 [10]bool
			_, _, _ = yysep2928, yyq2928, yy2arr2928
			const yyr2928 bool = false
			yyq2928[0] = x.Kind != ""
			yyq2928[1] = x.APIVersion != ""
			yyq2928[2] = true
			yyq2928[3] = true
			yyq2928[4] = x.Reason != ""
			yyq2928[5] = x.Message != ""
			yyq2928[6] = true
			yyq2928[7] = true
			yyq2928[8] = true
			yyq2928[9] = x.Count != 0
			if yyr2928 || yy2arr2928 {
				r.EncodeArrayStart(10)
			} else {
				var yynn2928 int = 0
				for _, b := range yyq2928 {
					if b {
						yynn2928++
					}
				}
				r.EncodeMapStart(yynn2928)
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[0] {
					yym2930 := z.EncBinary()
					_ = yym2930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2928[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2931 := z.EncBinary()
					_ = yym2931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[1] {
					yym2933 := z.EncBinary()
					_ = yym2933
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2928[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2934 := z.EncBinary()
					_ = yym2934
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[2] {
					yy2936 := &x.ObjectMeta
					yy2936.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2928[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy2937 := &x.ObjectMeta
					yy2937.CodecEncodeSelf(e)
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[3] {
					yy2939 := &x.InvolvedObject
					yy2939.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2928[3] {
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					yy2940 := &x.InvolvedObject
					yy2940.CodecEncodeSelf(e)
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[4] {
					yym2942 := z.EncBinary()
					_ = yym2942
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2928[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym2943 := z.EncBinary()
					_ = yym2943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[5] {
					yym2945 := z.EncBinary()
					_ = yym2945
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2928[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[6] {
					yy2948 := &x.Source
					yy2948.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2928[6] {
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					yy2949 := &x.Source
					yy2949.CodecEncodeSelf(e)
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[7] {
					yy2951 := &x.FirstTimestamp
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2951) {
					} else if yym2952 {
						z.EncBinaryMarshal(yy2951)
					} else if !yym2952 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2951)
					} else {
						z.EncFallback(yy2951)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2928[7] {
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					yy2953 := &x.FirstTimestamp
					yym2954 := z.EncBinary()
					_ = yym2954
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2953) {
					} else if yym2954 {
						z.EncBinaryMarshal(yy2953)
					} else if !yym2954 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2953)
					} else {
						z.EncFallback(yy2953)
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[8] {
					yy2956 := &x.LastTimestamp
					yym2957 := z.EncBinary()
					_ = yym2957
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2956) {
					} else if yym2957 {
						z.EncBinaryMarshal(yy2956)
					} else if !yym2957 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2956)
					} else {
						z.EncFallback(yy2956)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2928[8] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					yy2958 := &x.LastTimestamp
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2958) {
					} else if yym2959 {
						z.EncBinaryMarshal(yy2958)
					} else if !yym2959 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2958)
					} else {
						z.EncFallback(yy2958)
					}
				}
			}
			if yyr2928 || yy2arr2928 {
				if yyq2928[9] {
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2928[9] {
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yysep2928 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2963 := z.DecBinary()
	_ = yym2963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl2964 := r.ReadMapStart()
			if yyl2964 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2964, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl2964 := r.ReadArrayStart()
			if yyl2964 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2965Slc
	var yyhl2965 bool = l >= 0
	for yyj2965 := 0; ; yyj2965++ {
		if yyhl2965 {
			if yyj2965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys2965Slc = r.DecodeBytes(yys2965Slc, true, true)
		yys2965 := string(yys2965Slc)
		switch yys2965 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2968 := &x.ObjectMeta
				yyv2968.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2969 := &x.InvolvedObject
				yyv2969.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2972 := &x.Source
				yyv2972.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2973 := &x.FirstTimestamp
				yym2974 := z.DecBinary()
				_ = yym2974
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2973) {
				} else if yym2974 {
					z.DecBinaryUnmarshal(yyv2973)
				} else if !yym2974 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2973)
				} else {
					z.DecFallback(yyv2973, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2975 := &x.LastTimestamp
				yym2976 := z.DecBinary()
				_ = yym2976
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2975) {
				} else if yym2976 {
					z.DecBinaryUnmarshal(yyv2975)
				} else if !yym2976 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2975)
				} else {
					z.DecFallback(yyv2975, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2965)
		} // end switch yys2965
	} // end for yyj2965
	if !yyhl2965 {
		r.ReadEnd()
	}
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2978 int
	var yyb2978 bool
	var yyhl2978 bool = l >= 0
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2981 := &x.ObjectMeta
		yyv2981.CodecDecodeSelf(d)
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2982 := &x.InvolvedObject
		yyv2982.CodecDecodeSelf(d)
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2985 := &x.Source
		yyv2985.CodecDecodeSelf(d)
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2986 := &x.FirstTimestamp
		yym2987 := z.DecBinary()
		_ = yym2987
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2986) {
		} else if yym2987 {
			z.DecBinaryUnmarshal(yyv2986)
		} else if !yym2987 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2986)
		} else {
			z.DecFallback(yyv2986, false)
		}
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2988 := &x.LastTimestamp
		yym2989 := z.DecBinary()
		_ = yym2989
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2988) {
		} else if yym2989 {
			z.DecBinaryUnmarshal(yyv2988)
		} else if !yym2989 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2988)
		} else {
			z.DecFallback(yyv2988, false)
		}
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2978++
		if yyhl2978 {
			yyb2978 = yyj2978 > l
		} else {
			yyb2978 = r.CheckBreak()
		}
		if yyb2978 {
			break
		}
		z.DecStructFieldNotFound(yyj2978-1, "")
	}
	r.ReadEnd()
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2991 := z.EncBinary()
		_ = yym2991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2992 := !z.EncBinary()
			yy2arr2992 := z.EncBasicHandle().StructToArray
			var yyq2992 [4]bool
			_, _, _ = yysep2992, yyq2992, yy2arr2992
			const yyr2992 bool = false
			yyq2992[0] = x.Kind != ""
			yyq2992[1] = x.APIVersion != ""
			yyq2992[2] = true
			if yyr2992 || yy2arr2992 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2992 int = 1
				for _, b := range yyq2992 {
					if b {
						yynn2992++
					}
				}
				r.EncodeMapStart(yynn2992)
			}
			if yyr2992 || yy2arr2992 {
				if yyq2992[0] {
					yym2994 := z.EncBinary()
					_ = yym2994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2992[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym2995 := z.EncBinary()
					_ = yym2995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2992 || yy2arr2992 {
				if yyq2992[1] {
					yym2997 := z.EncBinary()
					_ = yym2997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2992[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym2998 := z.EncBinary()
					_ = yym2998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2992 || yy2arr2992 {
				if yyq2992[2] {
					yy3000 := &x.ListMeta
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3000) {
					} else {
						z.EncFallback(yy3000)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2992[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3002 := &x.ListMeta
					yym3003 := z.EncBinary()
					_ = yym3003
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3002) {
					} else {
						z.EncFallback(yy3002)
					}
				}
			}
			if yyr2992 || yy2arr2992 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3006 := z.EncBinary()
					_ = yym3006
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yysep2992 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3007 := z.DecBinary()
	_ = yym3007
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3008 := r.ReadMapStart()
			if yyl3008 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3008, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3008 := r.ReadArrayStart()
			if yyl3008 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3008, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3009Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3009Slc
	var yyhl3009 bool = l >= 0
	for yyj3009 := 0; ; yyj3009++ {
		if yyhl3009 {
			if yyj3009 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3009Slc = r.DecodeBytes(yys3009Slc, true, true)
		yys3009 := string(yys3009Slc)
		switch yys3009 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3012 := &x.ListMeta
				yym3013 := z.DecBinary()
				_ = yym3013
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3012) {
				} else {
					z.DecFallback(yyv3012, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3014 := &x.Items
				yym3015 := z.DecBinary()
				_ = yym3015
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3014), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3009)
		} // end switch yys3009
	} // end for yyj3009
	if !yyhl3009 {
		r.ReadEnd()
	}
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3016 int
	var yyb3016 bool
	var yyhl3016 bool = l >= 0
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3019 := &x.ListMeta
		yym3020 := z.DecBinary()
		_ = yym3020
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3019) {
		} else {
			z.DecFallback(yyv3019, false)
		}
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3021 := &x.Items
		yym3022 := z.DecBinary()
		_ = yym3022
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3021), d)
		}
	}
	for {
		yyj3016++
		if yyhl3016 {
			yyb3016 = yyj3016 > l
		} else {
			yyb3016 = r.CheckBreak()
		}
		if yyb3016 {
			break
		}
		z.DecStructFieldNotFound(yyj3016-1, "")
	}
	r.ReadEnd()
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3023 := z.EncBinary()
		_ = yym3023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3024 := !z.EncBinary()
			yy2arr3024 := z.EncBasicHandle().StructToArray
			var yyq3024 [4]bool
			_, _, _ = yysep3024, yyq3024, yy2arr3024
			const yyr3024 bool = false
			yyq3024[0] = x.Kind != ""
			yyq3024[1] = x.APIVersion != ""
			yyq3024[2] = true
			if yyr3024 || yy2arr3024 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3024 int = 1
				for _, b := range yyq3024 {
					if b {
						yynn3024++
					}
				}
				r.EncodeMapStart(yynn3024)
			}
			if yyr3024 || yy2arr3024 {
				if yyq3024[0] {
					yym3026 := z.EncBinary()
					_ = yym3026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3024[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3024 || yy2arr3024 {
				if yyq3024[1] {
					yym3029 := z.EncBinary()
					_ = yym3029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3024[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3030 := z.EncBinary()
					_ = yym3030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3024 || yy2arr3024 {
				if yyq3024[2] {
					yy3032 := &x.ListMeta
					yym3033 := z.EncBinary()
					_ = yym3033
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3032) {
					} else {
						z.EncFallback(yy3032)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3024[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3034 := &x.ListMeta
					yym3035 := z.EncBinary()
					_ = yym3035
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3034) {
					} else {
						z.EncFallback(yy3034)
					}
				}
			}
			if yyr3024 || yy2arr3024 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3037 := z.EncBinary()
					_ = yym3037
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3038 := z.EncBinary()
					_ = yym3038
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg8_runtime.Object)(x.Items), e)
					}
				}
			}
			if yysep3024 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3039 := z.DecBinary()
	_ = yym3039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3040 := r.ReadMapStart()
			if yyl3040 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3040, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3040 := r.ReadArrayStart()
			if yyl3040 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3041Slc
	var yyhl3041 bool = l >= 0
	for yyj3041 := 0; ; yyj3041++ {
		if yyhl3041 {
			if yyj3041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3041Slc = r.DecodeBytes(yys3041Slc, true, true)
		yys3041 := string(yys3041Slc)
		switch yys3041 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3044 := &x.ListMeta
				yym3045 := z.DecBinary()
				_ = yym3045
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3044) {
				} else {
					z.DecFallback(yyv3044, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3046 := &x.Items
				yym3047 := z.DecBinary()
				_ = yym3047
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3046), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3041)
		} // end switch yys3041
	} // end for yyj3041
	if !yyhl3041 {
		r.ReadEnd()
	}
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3048 int
	var yyb3048 bool
	var yyhl3048 bool = l >= 0
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3051 := &x.ListMeta
		yym3052 := z.DecBinary()
		_ = yym3052
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3051) {
		} else {
			z.DecFallback(yyv3051, false)
		}
	}
	yyj3048++
	if yyhl3048 {
		yyb3048 = yyj3048 > l
	} else {
		yyb3048 = r.CheckBreak()
	}
	if yyb3048 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3053 := &x.Items
		yym3054 := z.DecBinary()
		_ = yym3054
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg8_runtime.Object)(yyv3053), d)
		}
	}
	for {
		yyj3048++
		if yyhl3048 {
			yyb3048 = yyj3048 > l
		} else {
			yyb3048 = r.CheckBreak()
		}
		if yyb3048 {
			break
		}
		z.DecStructFieldNotFound(yyj3048-1, "")
	}
	r.ReadEnd()
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3055 := z.EncBinary()
	_ = yym3055
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3056 := z.DecBinary()
	_ = yym3056
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3057 := z.EncBinary()
		_ = yym3057
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3058 := !z.EncBinary()
			yy2arr3058 := z.EncBasicHandle().StructToArray
			var yyq3058 [6]bool
			_, _, _ = yysep3058, yyq3058, yy2arr3058
			const yyr3058 bool = false
			yyq3058[0] = x.Type != ""
			yyq3058[1] = len(x.Max) != 0
			yyq3058[2] = len(x.Min) != 0
			yyq3058[3] = len(x.Default) != 0
			yyq3058[4] = len(x.DefaultRequest) != 0
			yyq3058[5] = len(x.MaxLimitRequestRatio) != 0
			if yyr3058 || yy2arr3058 {
				r.EncodeArrayStart(6)
			} else {
				var yynn3058 int = 0
				for _, b := range yyq3058 {
					if b {
						yynn3058++
					}
				}
				r.EncodeMapStart(yynn3058)
			}
			if yyr3058 || yy2arr3058 {
				if yyq3058[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3058[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3058 || yy2arr3058 {
				if yyq3058[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[1] {
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				if yyq3058[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[2] {
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				if yyq3058[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[3] {
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				if yyq3058[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[4] {
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3058 || yy2arr3058 {
				if yyq3058[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3058[5] {
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3058 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3065 := z.DecBinary()
	_ = yym3065
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3066 := r.ReadMapStart()
			if yyl3066 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3066, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3066 := r.ReadArrayStart()
			if yyl3066 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3066, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3067Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3067Slc
	var yyhl3067 bool = l >= 0
	for yyj3067 := 0; ; yyj3067++ {
		if yyhl3067 {
			if yyj3067 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3067Slc = r.DecodeBytes(yys3067Slc, true, true)
		yys3067 := string(yys3067Slc)
		switch yys3067 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3069 := &x.Max
				yyv3069.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3070 := &x.Min
				yyv3070.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3071 := &x.Default
				yyv3071.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3072 := &x.DefaultRequest
				yyv3072.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3073 := &x.MaxLimitRequestRatio
				yyv3073.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3067)
		} // end switch yys3067
	} // end for yyj3067
	if !yyhl3067 {
		r.ReadEnd()
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3074 int
	var yyb3074 bool
	var yyhl3074 bool = l >= 0
	yyj3074++
	if yyhl3074 {
		yyb3074 = yyj3074 > l
	} else {
		yyb3074 = r.CheckBreak()
	}
	if yyb3074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3074++
	if yyhl3074 {
		yyb3074 = yyj3074 > l
	} else {
		yyb3074 = r.CheckBreak()
	}
	if yyb3074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3076 := &x.Max
		yyv3076.CodecDecodeSelf(d)
	}
	yyj3074++
	if yyhl3074 {
		yyb3074 = yyj3074 > l
	} else {
		yyb3074 = r.CheckBreak()
	}
	if yyb3074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3077 := &x.Min
		yyv3077.CodecDecodeSelf(d)
	}
	yyj3074++
	if yyhl3074 {
		yyb3074 = yyj3074 > l
	} else {
		yyb3074 = r.CheckBreak()
	}
	if yyb3074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3078 := &x.Default
		yyv3078.CodecDecodeSelf(d)
	}
	yyj3074++
	if yyhl3074 {
		yyb3074 = yyj3074 > l
	} else {
		yyb3074 = r.CheckBreak()
	}
	if yyb3074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3079 := &x.DefaultRequest
		yyv3079.CodecDecodeSelf(d)
	}
	yyj3074++
	if yyhl3074 {
		yyb3074 = yyj3074 > l
	} else {
		yyb3074 = r.CheckBreak()
	}
	if yyb3074 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3080 := &x.MaxLimitRequestRatio
		yyv3080.CodecDecodeSelf(d)
	}
	for {
		yyj3074++
		if yyhl3074 {
			yyb3074 = yyj3074 > l
		} else {
			yyb3074 = r.CheckBreak()
		}
		if yyb3074 {
			break
		}
		z.DecStructFieldNotFound(yyj3074-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3081 := z.EncBinary()
		_ = yym3081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3082 := !z.EncBinary()
			yy2arr3082 := z.EncBasicHandle().StructToArray
			var yyq3082 [1]bool
			_, _, _ = yysep3082, yyq3082, yy2arr3082
			const yyr3082 bool = false
			if yyr3082 || yy2arr3082 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3082 int = 1
				for _, b := range yyq3082 {
					if b {
						yynn3082++
					}
				}
				r.EncodeMapStart(yynn3082)
			}
			if yyr3082 || yy2arr3082 {
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3084 := z.EncBinary()
					_ = yym3084
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yysep3082 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3086 := z.DecBinary()
	_ = yym3086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3087 := r.ReadMapStart()
			if yyl3087 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3087, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3087 := r.ReadArrayStart()
			if yyl3087 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3087, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3088Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3088Slc
	var yyhl3088 bool = l >= 0
	for yyj3088 := 0; ; yyj3088++ {
		if yyhl3088 {
			if yyj3088 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3088Slc = r.DecodeBytes(yys3088Slc, true, true)
		yys3088 := string(yys3088Slc)
		switch yys3088 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3089 := &x.Limits
				yym3090 := z.DecBinary()
				_ = yym3090
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3089), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3088)
		} // end switch yys3088
	} // end for yyj3088
	if !yyhl3088 {
		r.ReadEnd()
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3091 int
	var yyb3091 bool
	var yyhl3091 bool = l >= 0
	yyj3091++
	if yyhl3091 {
		yyb3091 = yyj3091 > l
	} else {
		yyb3091 = r.CheckBreak()
	}
	if yyb3091 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3092 := &x.Limits
		yym3093 := z.DecBinary()
		_ = yym3093
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3092), d)
		}
	}
	for {
		yyj3091++
		if yyhl3091 {
			yyb3091 = yyj3091 > l
		} else {
			yyb3091 = r.CheckBreak()
		}
		if yyb3091 {
			break
		}
		z.DecStructFieldNotFound(yyj3091-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3094 := z.EncBinary()
		_ = yym3094
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3095 := !z.EncBinary()
			yy2arr3095 := z.EncBasicHandle().StructToArray
			var yyq3095 [4]bool
			_, _, _ = yysep3095, yyq3095, yy2arr3095
			const yyr3095 bool = false
			yyq3095[0] = x.Kind != ""
			yyq3095[1] = x.APIVersion != ""
			yyq3095[2] = true
			yyq3095[3] = true
			if yyr3095 || yy2arr3095 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3095 int = 0
				for _, b := range yyq3095 {
					if b {
						yynn3095++
					}
				}
				r.EncodeMapStart(yynn3095)
			}
			if yyr3095 || yy2arr3095 {
				if yyq3095[0] {
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3095[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				if yyq3095[1] {
					yym3100 := z.EncBinary()
					_ = yym3100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3095[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3101 := z.EncBinary()
					_ = yym3101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3095 || yy2arr3095 {
				if yyq3095[2] {
					yy3103 := &x.ObjectMeta
					yy3103.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3095[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3104 := &x.ObjectMeta
					yy3104.CodecEncodeSelf(e)
				}
			}
			if yyr3095 || yy2arr3095 {
				if yyq3095[3] {
					yy3106 := &x.Spec
					yy3106.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3095[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3107 := &x.Spec
					yy3107.CodecEncodeSelf(e)
				}
			}
			if yysep3095 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3108 := z.DecBinary()
	_ = yym3108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3109 := r.ReadMapStart()
			if yyl3109 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3109, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3109 := r.ReadArrayStart()
			if yyl3109 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3110Slc
	var yyhl3110 bool = l >= 0
	for yyj3110 := 0; ; yyj3110++ {
		if yyhl3110 {
			if yyj3110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3110Slc = r.DecodeBytes(yys3110Slc, true, true)
		yys3110 := string(yys3110Slc)
		switch yys3110 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3113 := &x.ObjectMeta
				yyv3113.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3114 := &x.Spec
				yyv3114.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3110)
		} // end switch yys3110
	} // end for yyj3110
	if !yyhl3110 {
		r.ReadEnd()
	}
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3115 int
	var yyb3115 bool
	var yyhl3115 bool = l >= 0
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3118 := &x.ObjectMeta
		yyv3118.CodecDecodeSelf(d)
	}
	yyj3115++
	if yyhl3115 {
		yyb3115 = yyj3115 > l
	} else {
		yyb3115 = r.CheckBreak()
	}
	if yyb3115 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3119 := &x.Spec
		yyv3119.CodecDecodeSelf(d)
	}
	for {
		yyj3115++
		if yyhl3115 {
			yyb3115 = yyj3115 > l
		} else {
			yyb3115 = r.CheckBreak()
		}
		if yyb3115 {
			break
		}
		z.DecStructFieldNotFound(yyj3115-1, "")
	}
	r.ReadEnd()
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3120 := z.EncBinary()
		_ = yym3120
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3121 := !z.EncBinary()
			yy2arr3121 := z.EncBasicHandle().StructToArray
			var yyq3121 [4]bool
			_, _, _ = yysep3121, yyq3121, yy2arr3121
			const yyr3121 bool = false
			yyq3121[0] = x.Kind != ""
			yyq3121[1] = x.APIVersion != ""
			yyq3121[2] = true
			if yyr3121 || yy2arr3121 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3121 int = 1
				for _, b := range yyq3121 {
					if b {
						yynn3121++
					}
				}
				r.EncodeMapStart(yynn3121)
			}
			if yyr3121 || yy2arr3121 {
				if yyq3121[0] {
					yym3123 := z.EncBinary()
					_ = yym3123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3121[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3124 := z.EncBinary()
					_ = yym3124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3121 || yy2arr3121 {
				if yyq3121[1] {
					yym3126 := z.EncBinary()
					_ = yym3126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3121[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3127 := z.EncBinary()
					_ = yym3127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3121 || yy2arr3121 {
				if yyq3121[2] {
					yy3129 := &x.ListMeta
					yym3130 := z.EncBinary()
					_ = yym3130
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3129) {
					} else {
						z.EncFallback(yy3129)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3121[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3131 := &x.ListMeta
					yym3132 := z.EncBinary()
					_ = yym3132
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3131) {
					} else {
						z.EncFallback(yy3131)
					}
				}
			}
			if yyr3121 || yy2arr3121 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3134 := z.EncBinary()
					_ = yym3134
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3135 := z.EncBinary()
					_ = yym3135
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yysep3121 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3136 := z.DecBinary()
	_ = yym3136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3137 := r.ReadMapStart()
			if yyl3137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3137, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3137 := r.ReadArrayStart()
			if yyl3137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3138Slc
	var yyhl3138 bool = l >= 0
	for yyj3138 := 0; ; yyj3138++ {
		if yyhl3138 {
			if yyj3138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3138Slc = r.DecodeBytes(yys3138Slc, true, true)
		yys3138 := string(yys3138Slc)
		switch yys3138 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3141 := &x.ListMeta
				yym3142 := z.DecBinary()
				_ = yym3142
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3141) {
				} else {
					z.DecFallback(yyv3141, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3143 := &x.Items
				yym3144 := z.DecBinary()
				_ = yym3144
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3143), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3138)
		} // end switch yys3138
	} // end for yyj3138
	if !yyhl3138 {
		r.ReadEnd()
	}
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3145 int
	var yyb3145 bool
	var yyhl3145 bool = l >= 0
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3148 := &x.ListMeta
		yym3149 := z.DecBinary()
		_ = yym3149
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3148) {
		} else {
			z.DecFallback(yyv3148, false)
		}
	}
	yyj3145++
	if yyhl3145 {
		yyb3145 = yyj3145 > l
	} else {
		yyb3145 = r.CheckBreak()
	}
	if yyb3145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3150 := &x.Items
		yym3151 := z.DecBinary()
		_ = yym3151
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3150), d)
		}
	}
	for {
		yyj3145++
		if yyhl3145 {
			yyb3145 = yyj3145 > l
		} else {
			yyb3145 = r.CheckBreak()
		}
		if yyb3145 {
			break
		}
		z.DecStructFieldNotFound(yyj3145-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3152 := z.EncBinary()
		_ = yym3152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3153 := !z.EncBinary()
			yy2arr3153 := z.EncBasicHandle().StructToArray
			var yyq3153 [1]bool
			_, _, _ = yysep3153, yyq3153, yy2arr3153
			const yyr3153 bool = false
			yyq3153[0] = len(x.Hard) != 0
			if yyr3153 || yy2arr3153 {
				r.EncodeArrayStart(1)
			} else {
				var yynn3153 int = 0
				for _, b := range yyq3153 {
					if b {
						yynn3153++
					}
				}
				r.EncodeMapStart(yynn3153)
			}
			if yyr3153 || yy2arr3153 {
				if yyq3153[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3153[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3153 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3155 := z.DecBinary()
	_ = yym3155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3156 := r.ReadMapStart()
			if yyl3156 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3156, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3156 := r.ReadArrayStart()
			if yyl3156 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3157Slc
	var yyhl3157 bool = l >= 0
	for yyj3157 := 0; ; yyj3157++ {
		if yyhl3157 {
			if yyj3157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3157Slc = r.DecodeBytes(yys3157Slc, true, true)
		yys3157 := string(yys3157Slc)
		switch yys3157 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3158 := &x.Hard
				yyv3158.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3157)
		} // end switch yys3157
	} // end for yyj3157
	if !yyhl3157 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3159 int
	var yyb3159 bool
	var yyhl3159 bool = l >= 0
	yyj3159++
	if yyhl3159 {
		yyb3159 = yyj3159 > l
	} else {
		yyb3159 = r.CheckBreak()
	}
	if yyb3159 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3160 := &x.Hard
		yyv3160.CodecDecodeSelf(d)
	}
	for {
		yyj3159++
		if yyhl3159 {
			yyb3159 = yyj3159 > l
		} else {
			yyb3159 = r.CheckBreak()
		}
		if yyb3159 {
			break
		}
		z.DecStructFieldNotFound(yyj3159-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3161 := z.EncBinary()
		_ = yym3161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3162 := !z.EncBinary()
			yy2arr3162 := z.EncBasicHandle().StructToArray
			var yyq3162 [2]bool
			_, _, _ = yysep3162, yyq3162, yy2arr3162
			const yyr3162 bool = false
			yyq3162[0] = len(x.Hard) != 0
			yyq3162[1] = len(x.Used) != 0
			if yyr3162 || yy2arr3162 {
				r.EncodeArrayStart(2)
			} else {
				var yynn3162 int = 0
				for _, b := range yyq3162 {
					if b {
						yynn3162++
					}
				}
				r.EncodeMapStart(yynn3162)
			}
			if yyr3162 || yy2arr3162 {
				if yyq3162[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[0] {
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3162 || yy2arr3162 {
				if yyq3162[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3162[1] {
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yysep3162 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3165 := z.DecBinary()
	_ = yym3165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3166 := r.ReadMapStart()
			if yyl3166 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3166, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3166 := r.ReadArrayStart()
			if yyl3166 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3167Slc
	var yyhl3167 bool = l >= 0
	for yyj3167 := 0; ; yyj3167++ {
		if yyhl3167 {
			if yyj3167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3167Slc = r.DecodeBytes(yys3167Slc, true, true)
		yys3167 := string(yys3167Slc)
		switch yys3167 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3168 := &x.Hard
				yyv3168.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3169 := &x.Used
				yyv3169.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3167)
		} // end switch yys3167
	} // end for yyj3167
	if !yyhl3167 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3170 int
	var yyb3170 bool
	var yyhl3170 bool = l >= 0
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3171 := &x.Hard
		yyv3171.CodecDecodeSelf(d)
	}
	yyj3170++
	if yyhl3170 {
		yyb3170 = yyj3170 > l
	} else {
		yyb3170 = r.CheckBreak()
	}
	if yyb3170 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3172 := &x.Used
		yyv3172.CodecDecodeSelf(d)
	}
	for {
		yyj3170++
		if yyhl3170 {
			yyb3170 = yyj3170 > l
		} else {
			yyb3170 = r.CheckBreak()
		}
		if yyb3170 {
			break
		}
		z.DecStructFieldNotFound(yyj3170-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3173 := z.EncBinary()
		_ = yym3173
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3174 := !z.EncBinary()
			yy2arr3174 := z.EncBasicHandle().StructToArray
			var yyq3174 [5]bool
			_, _, _ = yysep3174, yyq3174, yy2arr3174
			const yyr3174 bool = false
			yyq3174[0] = x.Kind != ""
			yyq3174[1] = x.APIVersion != ""
			yyq3174[2] = true
			yyq3174[3] = true
			yyq3174[4] = true
			if yyr3174 || yy2arr3174 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3174 int = 0
				for _, b := range yyq3174 {
					if b {
						yynn3174++
					}
				}
				r.EncodeMapStart(yynn3174)
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[0] {
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3174[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3177 := z.EncBinary()
					_ = yym3177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[1] {
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3174[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[2] {
					yy3182 := &x.ObjectMeta
					yy3182.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3174[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3183 := &x.ObjectMeta
					yy3183.CodecEncodeSelf(e)
				}
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[3] {
					yy3185 := &x.Spec
					yy3185.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3174[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy3186 := &x.Spec
					yy3186.CodecEncodeSelf(e)
				}
			}
			if yyr3174 || yy2arr3174 {
				if yyq3174[4] {
					yy3188 := &x.Status
					yy3188.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3174[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy3189 := &x.Status
					yy3189.CodecEncodeSelf(e)
				}
			}
			if yysep3174 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3190 := z.DecBinary()
	_ = yym3190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3191 := r.ReadMapStart()
			if yyl3191 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3191, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3191 := r.ReadArrayStart()
			if yyl3191 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3191, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3192Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3192Slc
	var yyhl3192 bool = l >= 0
	for yyj3192 := 0; ; yyj3192++ {
		if yyhl3192 {
			if yyj3192 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3192Slc = r.DecodeBytes(yys3192Slc, true, true)
		yys3192 := string(yys3192Slc)
		switch yys3192 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3195 := &x.ObjectMeta
				yyv3195.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3196 := &x.Spec
				yyv3196.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3197 := &x.Status
				yyv3197.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3192)
		} // end switch yys3192
	} // end for yyj3192
	if !yyhl3192 {
		r.ReadEnd()
	}
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3198 int
	var yyb3198 bool
	var yyhl3198 bool = l >= 0
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3201 := &x.ObjectMeta
		yyv3201.CodecDecodeSelf(d)
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3202 := &x.Spec
		yyv3202.CodecDecodeSelf(d)
	}
	yyj3198++
	if yyhl3198 {
		yyb3198 = yyj3198 > l
	} else {
		yyb3198 = r.CheckBreak()
	}
	if yyb3198 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3203 := &x.Status
		yyv3203.CodecDecodeSelf(d)
	}
	for {
		yyj3198++
		if yyhl3198 {
			yyb3198 = yyj3198 > l
		} else {
			yyb3198 = r.CheckBreak()
		}
		if yyb3198 {
			break
		}
		z.DecStructFieldNotFound(yyj3198-1, "")
	}
	r.ReadEnd()
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3204 := z.EncBinary()
		_ = yym3204
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3205 := !z.EncBinary()
			yy2arr3205 := z.EncBasicHandle().StructToArray
			var yyq3205 [4]bool
			_, _, _ = yysep3205, yyq3205, yy2arr3205
			const yyr3205 bool = false
			yyq3205[0] = x.Kind != ""
			yyq3205[1] = x.APIVersion != ""
			yyq3205[2] = true
			if yyr3205 || yy2arr3205 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3205 int = 1
				for _, b := range yyq3205 {
					if b {
						yynn3205++
					}
				}
				r.EncodeMapStart(yynn3205)
			}
			if yyr3205 || yy2arr3205 {
				if yyq3205[0] {
					yym3207 := z.EncBinary()
					_ = yym3207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3205[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3208 := z.EncBinary()
					_ = yym3208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3205 || yy2arr3205 {
				if yyq3205[1] {
					yym3210 := z.EncBinary()
					_ = yym3210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3205[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3211 := z.EncBinary()
					_ = yym3211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3205 || yy2arr3205 {
				if yyq3205[2] {
					yy3213 := &x.ListMeta
					yym3214 := z.EncBinary()
					_ = yym3214
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3213) {
					} else {
						z.EncFallback(yy3213)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3205[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3215 := &x.ListMeta
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3215) {
					} else {
						z.EncFallback(yy3215)
					}
				}
			}
			if yyr3205 || yy2arr3205 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3219 := z.EncBinary()
					_ = yym3219
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yysep3205 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3220 := z.DecBinary()
	_ = yym3220
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3221 := r.ReadMapStart()
			if yyl3221 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3221, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3221 := r.ReadArrayStart()
			if yyl3221 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3221, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3222Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3222Slc
	var yyhl3222 bool = l >= 0
	for yyj3222 := 0; ; yyj3222++ {
		if yyhl3222 {
			if yyj3222 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3222Slc = r.DecodeBytes(yys3222Slc, true, true)
		yys3222 := string(yys3222Slc)
		switch yys3222 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3225 := &x.ListMeta
				yym3226 := z.DecBinary()
				_ = yym3226
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3225) {
				} else {
					z.DecFallback(yyv3225, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3227 := &x.Items
				yym3228 := z.DecBinary()
				_ = yym3228
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3227), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3222)
		} // end switch yys3222
	} // end for yyj3222
	if !yyhl3222 {
		r.ReadEnd()
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3229 int
	var yyb3229 bool
	var yyhl3229 bool = l >= 0
	yyj3229++
	if yyhl3229 {
		yyb3229 = yyj3229 > l
	} else {
		yyb3229 = r.CheckBreak()
	}
	if yyb3229 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3229++
	if yyhl3229 {
		yyb3229 = yyj3229 > l
	} else {
		yyb3229 = r.CheckBreak()
	}
	if yyb3229 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3229++
	if yyhl3229 {
		yyb3229 = yyj3229 > l
	} else {
		yyb3229 = r.CheckBreak()
	}
	if yyb3229 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3232 := &x.ListMeta
		yym3233 := z.DecBinary()
		_ = yym3233
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3232) {
		} else {
			z.DecFallback(yyv3232, false)
		}
	}
	yyj3229++
	if yyhl3229 {
		yyb3229 = yyj3229 > l
	} else {
		yyb3229 = r.CheckBreak()
	}
	if yyb3229 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3234 := &x.Items
		yym3235 := z.DecBinary()
		_ = yym3235
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3234), d)
		}
	}
	for {
		yyj3229++
		if yyhl3229 {
			yyb3229 = yyj3229 > l
		} else {
			yyb3229 = r.CheckBreak()
		}
		if yyb3229 {
			break
		}
		z.DecStructFieldNotFound(yyj3229-1, "")
	}
	r.ReadEnd()
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3236 := z.EncBinary()
		_ = yym3236
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3237 := !z.EncBinary()
			yy2arr3237 := z.EncBasicHandle().StructToArray
			var yyq3237 [5]bool
			_, _, _ = yysep3237, yyq3237, yy2arr3237
			const yyr3237 bool = false
			yyq3237[0] = x.Kind != ""
			yyq3237[1] = x.APIVersion != ""
			yyq3237[2] = true
			yyq3237[3] = len(x.Data) != 0
			yyq3237[4] = x.Type != ""
			if yyr3237 || yy2arr3237 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3237 int = 0
				for _, b := range yyq3237 {
					if b {
						yynn3237++
					}
				}
				r.EncodeMapStart(yynn3237)
			}
			if yyr3237 || yy2arr3237 {
				if yyq3237[0] {
					yym3239 := z.EncBinary()
					_ = yym3239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3237[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3240 := z.EncBinary()
					_ = yym3240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3237 || yy2arr3237 {
				if yyq3237[1] {
					yym3242 := z.EncBinary()
					_ = yym3242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3237[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3243 := z.EncBinary()
					_ = yym3243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3237 || yy2arr3237 {
				if yyq3237[2] {
					yy3245 := &x.ObjectMeta
					yy3245.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3237[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3246 := &x.ObjectMeta
					yy3246.CodecEncodeSelf(e)
				}
			}
			if yyr3237 || yy2arr3237 {
				if yyq3237[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3248 := z.EncBinary()
						_ = yym3248
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3237[3] {
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3249 := z.EncBinary()
						_ = yym3249
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3237 || yy2arr3237 {
				if yyq3237[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3237[4] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yysep3237 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3251 := z.DecBinary()
	_ = yym3251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3252 := r.ReadMapStart()
			if yyl3252 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3252, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3252 := r.ReadArrayStart()
			if yyl3252 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3253Slc
	var yyhl3253 bool = l >= 0
	for yyj3253 := 0; ; yyj3253++ {
		if yyhl3253 {
			if yyj3253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3253Slc = r.DecodeBytes(yys3253Slc, true, true)
		yys3253 := string(yys3253Slc)
		switch yys3253 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3256 := &x.ObjectMeta
				yyv3256.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3257 := &x.Data
				yym3258 := z.DecBinary()
				_ = yym3258
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3257), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3253)
		} // end switch yys3253
	} // end for yyj3253
	if !yyhl3253 {
		r.ReadEnd()
	}
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3260 int
	var yyb3260 bool
	var yyhl3260 bool = l >= 0
	yyj3260++
	if yyhl3260 {
		yyb3260 = yyj3260 > l
	} else {
		yyb3260 = r.CheckBreak()
	}
	if yyb3260 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3260++
	if yyhl3260 {
		yyb3260 = yyj3260 > l
	} else {
		yyb3260 = r.CheckBreak()
	}
	if yyb3260 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3260++
	if yyhl3260 {
		yyb3260 = yyj3260 > l
	} else {
		yyb3260 = r.CheckBreak()
	}
	if yyb3260 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3263 := &x.ObjectMeta
		yyv3263.CodecDecodeSelf(d)
	}
	yyj3260++
	if yyhl3260 {
		yyb3260 = yyj3260 > l
	} else {
		yyb3260 = r.CheckBreak()
	}
	if yyb3260 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3264 := &x.Data
		yym3265 := z.DecBinary()
		_ = yym3265
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3264), d)
		}
	}
	yyj3260++
	if yyhl3260 {
		yyb3260 = yyj3260 > l
	} else {
		yyb3260 = r.CheckBreak()
	}
	if yyb3260 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3260++
		if yyhl3260 {
			yyb3260 = yyj3260 > l
		} else {
			yyb3260 = r.CheckBreak()
		}
		if yyb3260 {
			break
		}
		z.DecStructFieldNotFound(yyj3260-1, "")
	}
	r.ReadEnd()
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3267 := z.EncBinary()
	_ = yym3267
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3268 := z.DecBinary()
	_ = yym3268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3269 := z.EncBinary()
		_ = yym3269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3270 := !z.EncBinary()
			yy2arr3270 := z.EncBasicHandle().StructToArray
			var yyq3270 [4]bool
			_, _, _ = yysep3270, yyq3270, yy2arr3270
			const yyr3270 bool = false
			yyq3270[0] = x.Kind != ""
			yyq3270[1] = x.APIVersion != ""
			yyq3270[2] = true
			if yyr3270 || yy2arr3270 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3270 int = 1
				for _, b := range yyq3270 {
					if b {
						yynn3270++
					}
				}
				r.EncodeMapStart(yynn3270)
			}
			if yyr3270 || yy2arr3270 {
				if yyq3270[0] {
					yym3272 := z.EncBinary()
					_ = yym3272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3270[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3273 := z.EncBinary()
					_ = yym3273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3270 || yy2arr3270 {
				if yyq3270[1] {
					yym3275 := z.EncBinary()
					_ = yym3275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3270[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3270 || yy2arr3270 {
				if yyq3270[2] {
					yy3278 := &x.ListMeta
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3278) {
					} else {
						z.EncFallback(yy3278)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3270[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3280 := &x.ListMeta
					yym3281 := z.EncBinary()
					_ = yym3281
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3280) {
					} else {
						z.EncFallback(yy3280)
					}
				}
			}
			if yyr3270 || yy2arr3270 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3283 := z.EncBinary()
					_ = yym3283
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3284 := z.EncBinary()
					_ = yym3284
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yysep3270 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3285 := z.DecBinary()
	_ = yym3285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3286 := r.ReadMapStart()
			if yyl3286 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3286, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3286 := r.ReadArrayStart()
			if yyl3286 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3287Slc
	var yyhl3287 bool = l >= 0
	for yyj3287 := 0; ; yyj3287++ {
		if yyhl3287 {
			if yyj3287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3287Slc = r.DecodeBytes(yys3287Slc, true, true)
		yys3287 := string(yys3287Slc)
		switch yys3287 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3290 := &x.ListMeta
				yym3291 := z.DecBinary()
				_ = yym3291
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3290) {
				} else {
					z.DecFallback(yyv3290, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3292 := &x.Items
				yym3293 := z.DecBinary()
				_ = yym3293
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3292), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3287)
		} // end switch yys3287
	} // end for yyj3287
	if !yyhl3287 {
		r.ReadEnd()
	}
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3294 int
	var yyb3294 bool
	var yyhl3294 bool = l >= 0
	yyj3294++
	if yyhl3294 {
		yyb3294 = yyj3294 > l
	} else {
		yyb3294 = r.CheckBreak()
	}
	if yyb3294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3294++
	if yyhl3294 {
		yyb3294 = yyj3294 > l
	} else {
		yyb3294 = r.CheckBreak()
	}
	if yyb3294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3294++
	if yyhl3294 {
		yyb3294 = yyj3294 > l
	} else {
		yyb3294 = r.CheckBreak()
	}
	if yyb3294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3297 := &x.ListMeta
		yym3298 := z.DecBinary()
		_ = yym3298
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3297) {
		} else {
			z.DecFallback(yyv3297, false)
		}
	}
	yyj3294++
	if yyhl3294 {
		yyb3294 = yyj3294 > l
	} else {
		yyb3294 = r.CheckBreak()
	}
	if yyb3294 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3299 := &x.Items
		yym3300 := z.DecBinary()
		_ = yym3300
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3299), d)
		}
	}
	for {
		yyj3294++
		if yyhl3294 {
			yyb3294 = yyj3294 > l
		} else {
			yyb3294 = r.CheckBreak()
		}
		if yyb3294 {
			break
		}
		z.DecStructFieldNotFound(yyj3294-1, "")
	}
	r.ReadEnd()
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3301 := z.EncBinary()
	_ = yym3301
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3302 := z.DecBinary()
	_ = yym3302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3303 := z.EncBinary()
	_ = yym3303
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3304 := z.DecBinary()
	_ = yym3304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3305 := z.EncBinary()
		_ = yym3305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3306 := !z.EncBinary()
			yy2arr3306 := z.EncBasicHandle().StructToArray
			var yyq3306 [4]bool
			_, _, _ = yysep3306, yyq3306, yy2arr3306
			const yyr3306 bool = false
			yyq3306[2] = x.Message != ""
			yyq3306[3] = x.Error != ""
			if yyr3306 || yy2arr3306 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3306 int = 2
				for _, b := range yyq3306 {
					if b {
						yynn3306++
					}
				}
				r.EncodeMapStart(yynn3306)
			}
			if yyr3306 || yy2arr3306 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3306 || yy2arr3306 {
				x.Status.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[2] {
					yym3310 := z.EncBinary()
					_ = yym3310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3306[2] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym3311 := z.EncBinary()
					_ = yym3311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3306 || yy2arr3306 {
				if yyq3306[3] {
					yym3313 := z.EncBinary()
					_ = yym3313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3306[3] {
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					yym3314 := z.EncBinary()
					_ = yym3314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yysep3306 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3315 := z.DecBinary()
	_ = yym3315
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3316 := r.ReadMapStart()
			if yyl3316 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3316, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3316 := r.ReadArrayStart()
			if yyl3316 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3316, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3317Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3317Slc
	var yyhl3317 bool = l >= 0
	for yyj3317 := 0; ; yyj3317++ {
		if yyhl3317 {
			if yyj3317 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3317Slc = r.DecodeBytes(yys3317Slc, true, true)
		yys3317 := string(yys3317Slc)
		switch yys3317 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3317)
		} // end switch yys3317
	} // end for yyj3317
	if !yyhl3317 {
		r.ReadEnd()
	}
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3322 int
	var yyb3322 bool
	var yyhl3322 bool = l >= 0
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3322++
	if yyhl3322 {
		yyb3322 = yyj3322 > l
	} else {
		yyb3322 = r.CheckBreak()
	}
	if yyb3322 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3322++
		if yyhl3322 {
			yyb3322 = yyj3322 > l
		} else {
			yyb3322 = r.CheckBreak()
		}
		if yyb3322 {
			break
		}
		z.DecStructFieldNotFound(yyj3322-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3327 := z.EncBinary()
		_ = yym3327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3328 := !z.EncBinary()
			yy2arr3328 := z.EncBasicHandle().StructToArray
			var yyq3328 [4]bool
			_, _, _ = yysep3328, yyq3328, yy2arr3328
			const yyr3328 bool = false
			yyq3328[0] = x.Kind != ""
			yyq3328[1] = x.APIVersion != ""
			yyq3328[2] = true
			yyq3328[3] = len(x.Conditions) != 0
			if yyr3328 || yy2arr3328 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3328 int = 0
				for _, b := range yyq3328 {
					if b {
						yynn3328++
					}
				}
				r.EncodeMapStart(yynn3328)
			}
			if yyr3328 || yy2arr3328 {
				if yyq3328[0] {
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3328[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3328 || yy2arr3328 {
				if yyq3328[1] {
					yym3333 := z.EncBinary()
					_ = yym3333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3328[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3334 := z.EncBinary()
					_ = yym3334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3328 || yy2arr3328 {
				if yyq3328[2] {
					yy3336 := &x.ObjectMeta
					yy3336.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3328[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3337 := &x.ObjectMeta
					yy3337.CodecEncodeSelf(e)
				}
			}
			if yyr3328 || yy2arr3328 {
				if yyq3328[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3339 := z.EncBinary()
						_ = yym3339
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3328[3] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3340 := z.EncBinary()
						_ = yym3340
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yysep3328 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3341 := z.DecBinary()
	_ = yym3341
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3342 := r.ReadMapStart()
			if yyl3342 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3342, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3342 := r.ReadArrayStart()
			if yyl3342 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3342, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3343Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3343Slc
	var yyhl3343 bool = l >= 0
	for yyj3343 := 0; ; yyj3343++ {
		if yyhl3343 {
			if yyj3343 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3343Slc = r.DecodeBytes(yys3343Slc, true, true)
		yys3343 := string(yys3343Slc)
		switch yys3343 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3346 := &x.ObjectMeta
				yyv3346.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3347 := &x.Conditions
				yym3348 := z.DecBinary()
				_ = yym3348
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3347), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3343)
		} // end switch yys3343
	} // end for yyj3343
	if !yyhl3343 {
		r.ReadEnd()
	}
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3349 int
	var yyb3349 bool
	var yyhl3349 bool = l >= 0
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3352 := &x.ObjectMeta
		yyv3352.CodecDecodeSelf(d)
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3353 := &x.Conditions
		yym3354 := z.DecBinary()
		_ = yym3354
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3353), d)
		}
	}
	for {
		yyj3349++
		if yyhl3349 {
			yyb3349 = yyj3349 > l
		} else {
			yyb3349 = r.CheckBreak()
		}
		if yyb3349 {
			break
		}
		z.DecStructFieldNotFound(yyj3349-1, "")
	}
	r.ReadEnd()
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3355 := z.EncBinary()
		_ = yym3355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3356 := !z.EncBinary()
			yy2arr3356 := z.EncBasicHandle().StructToArray
			var yyq3356 [4]bool
			_, _, _ = yysep3356, yyq3356, yy2arr3356
			const yyr3356 bool = false
			yyq3356[0] = x.Kind != ""
			yyq3356[1] = x.APIVersion != ""
			yyq3356[2] = true
			if yyr3356 || yy2arr3356 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3356 int = 1
				for _, b := range yyq3356 {
					if b {
						yynn3356++
					}
				}
				r.EncodeMapStart(yynn3356)
			}
			if yyr3356 || yy2arr3356 {
				if yyq3356[0] {
					yym3358 := z.EncBinary()
					_ = yym3358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3356[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3359 := z.EncBinary()
					_ = yym3359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3356 || yy2arr3356 {
				if yyq3356[1] {
					yym3361 := z.EncBinary()
					_ = yym3361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3356[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3362 := z.EncBinary()
					_ = yym3362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3356 || yy2arr3356 {
				if yyq3356[2] {
					yy3364 := &x.ListMeta
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3364) {
					} else {
						z.EncFallback(yy3364)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3356[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3366 := &x.ListMeta
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3366) {
					} else {
						z.EncFallback(yy3366)
					}
				}
			}
			if yyr3356 || yy2arr3356 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3369 := z.EncBinary()
					_ = yym3369
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3370 := z.EncBinary()
					_ = yym3370
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yysep3356 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3371 := z.DecBinary()
	_ = yym3371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3372 := r.ReadMapStart()
			if yyl3372 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3372, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3372 := r.ReadArrayStart()
			if yyl3372 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3373Slc
	var yyhl3373 bool = l >= 0
	for yyj3373 := 0; ; yyj3373++ {
		if yyhl3373 {
			if yyj3373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3373Slc = r.DecodeBytes(yys3373Slc, true, true)
		yys3373 := string(yys3373Slc)
		switch yys3373 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3376 := &x.ListMeta
				yym3377 := z.DecBinary()
				_ = yym3377
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3376) {
				} else {
					z.DecFallback(yyv3376, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3378 := &x.Items
				yym3379 := z.DecBinary()
				_ = yym3379
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3378), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3373)
		} // end switch yys3373
	} // end for yyj3373
	if !yyhl3373 {
		r.ReadEnd()
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3380 int
	var yyb3380 bool
	var yyhl3380 bool = l >= 0
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3383 := &x.ListMeta
		yym3384 := z.DecBinary()
		_ = yym3384
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3383) {
		} else {
			z.DecFallback(yyv3383, false)
		}
	}
	yyj3380++
	if yyhl3380 {
		yyb3380 = yyj3380 > l
	} else {
		yyb3380 = r.CheckBreak()
	}
	if yyb3380 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3385 := &x.Items
		yym3386 := z.DecBinary()
		_ = yym3386
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3385), d)
		}
	}
	for {
		yyj3380++
		if yyhl3380 {
			yyb3380 = yyj3380 > l
		} else {
			yyb3380 = r.CheckBreak()
		}
		if yyb3380 {
			break
		}
		z.DecStructFieldNotFound(yyj3380-1, "")
	}
	r.ReadEnd()
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3387 := z.EncBinary()
		_ = yym3387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3388 := !z.EncBinary()
			yy2arr3388 := z.EncBasicHandle().StructToArray
			var yyq3388 [5]bool
			_, _, _ = yysep3388, yyq3388, yy2arr3388
			const yyr3388 bool = false
			yyq3388[0] = x.Capabilities != nil
			yyq3388[1] = x.Privileged != nil
			yyq3388[2] = x.SELinuxOptions != nil
			yyq3388[3] = x.RunAsUser != nil
			yyq3388[4] = x.RunAsNonRoot != nil
			if yyr3388 || yy2arr3388 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3388 int = 0
				for _, b := range yyq3388 {
					if b {
						yynn3388++
					}
				}
				r.EncodeMapStart(yynn3388)
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[0] {
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3391 := *x.Privileged
						yym3392 := z.EncBinary()
						_ = yym3392
						if false {
						} else {
							r.EncodeBool(bool(yy3391))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[1] {
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3393 := *x.Privileged
						yym3394 := z.EncBinary()
						_ = yym3394
						if false {
						} else {
							r.EncodeBool(bool(yy3393))
						}
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[2] {
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3397 := *x.RunAsUser
						yym3398 := z.EncBinary()
						_ = yym3398
						if false {
						} else {
							r.EncodeInt(int64(yy3397))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[3] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3399 := *x.RunAsUser
						yym3400 := z.EncBinary()
						_ = yym3400
						if false {
						} else {
							r.EncodeInt(int64(yy3399))
						}
					}
				}
			}
			if yyr3388 || yy2arr3388 {
				if yyq3388[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3402 := *x.RunAsNonRoot
						yym3403 := z.EncBinary()
						_ = yym3403
						if false {
						} else {
							r.EncodeBool(bool(yy3402))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3388[4] {
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3404 := *x.RunAsNonRoot
						yym3405 := z.EncBinary()
						_ = yym3405
						if false {
						} else {
							r.EncodeBool(bool(yy3404))
						}
					}
				}
			}
			if yysep3388 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3406 := z.DecBinary()
	_ = yym3406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3407 := r.ReadMapStart()
			if yyl3407 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3407, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3407 := r.ReadArrayStart()
			if yyl3407 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3408Slc
	var yyhl3408 bool = l >= 0
	for yyj3408 := 0; ; yyj3408++ {
		if yyhl3408 {
			if yyj3408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3408Slc = r.DecodeBytes(yys3408Slc, true, true)
		yys3408 := string(yys3408Slc)
		switch yys3408 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3411 := z.DecBinary()
				_ = yym3411
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3414 := z.DecBinary()
				_ = yym3414
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3416 := z.DecBinary()
				_ = yym3416
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3408)
		} // end switch yys3408
	} // end for yyj3408
	if !yyhl3408 {
		r.ReadEnd()
	}
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3417 int
	var yyb3417 bool
	var yyhl3417 bool = l >= 0
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3420 := z.DecBinary()
		_ = yym3420
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3423 := z.DecBinary()
		_ = yym3423
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3417++
	if yyhl3417 {
		yyb3417 = yyj3417 > l
	} else {
		yyb3417 = r.CheckBreak()
	}
	if yyb3417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3425 := z.DecBinary()
		_ = yym3425
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3417++
		if yyhl3417 {
			yyb3417 = yyj3417 > l
		} else {
			yyb3417 = r.CheckBreak()
		}
		if yyb3417 {
			break
		}
		z.DecStructFieldNotFound(yyj3417-1, "")
	}
	r.ReadEnd()
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3426 := z.EncBinary()
		_ = yym3426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3427 := !z.EncBinary()
			yy2arr3427 := z.EncBasicHandle().StructToArray
			var yyq3427 [4]bool
			_, _, _ = yysep3427, yyq3427, yy2arr3427
			const yyr3427 bool = false
			yyq3427[0] = x.User != ""
			yyq3427[1] = x.Role != ""
			yyq3427[2] = x.Type != ""
			yyq3427[3] = x.Level != ""
			if yyr3427 || yy2arr3427 {
				r.EncodeArrayStart(4)
			} else {
				var yynn3427 int = 0
				for _, b := range yyq3427 {
					if b {
						yynn3427++
					}
				}
				r.EncodeMapStart(yynn3427)
			}
			if yyr3427 || yy2arr3427 {
				if yyq3427[0] {
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3427[0] {
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					yym3430 := z.EncBinary()
					_ = yym3430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3427 || yy2arr3427 {
				if yyq3427[1] {
					yym3432 := z.EncBinary()
					_ = yym3432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3427[1] {
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					yym3433 := z.EncBinary()
					_ = yym3433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3427 || yy2arr3427 {
				if yyq3427[2] {
					yym3435 := z.EncBinary()
					_ = yym3435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3427[2] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					yym3436 := z.EncBinary()
					_ = yym3436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3427 || yy2arr3427 {
				if yyq3427[3] {
					yym3438 := z.EncBinary()
					_ = yym3438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3427[3] {
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					yym3439 := z.EncBinary()
					_ = yym3439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yysep3427 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3440 := z.DecBinary()
	_ = yym3440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3441 := r.ReadMapStart()
			if yyl3441 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3441, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3441 := r.ReadArrayStart()
			if yyl3441 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3442Slc
	var yyhl3442 bool = l >= 0
	for yyj3442 := 0; ; yyj3442++ {
		if yyhl3442 {
			if yyj3442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3442Slc = r.DecodeBytes(yys3442Slc, true, true)
		yys3442 := string(yys3442Slc)
		switch yys3442 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3442)
		} // end switch yys3442
	} // end for yyj3442
	if !yyhl3442 {
		r.ReadEnd()
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3447 int
	var yyb3447 bool
	var yyhl3447 bool = l >= 0
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3447++
	if yyhl3447 {
		yyb3447 = yyj3447 > l
	} else {
		yyb3447 = r.CheckBreak()
	}
	if yyb3447 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3447++
		if yyhl3447 {
			yyb3447 = yyj3447 > l
		} else {
			yyb3447 = r.CheckBreak()
		}
		if yyb3447 {
			break
		}
		z.DecStructFieldNotFound(yyj3447-1, "")
	}
	r.ReadEnd()
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3452 := z.EncBinary()
		_ = yym3452
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3453 := !z.EncBinary()
			yy2arr3453 := z.EncBasicHandle().StructToArray
			var yyq3453 [5]bool
			_, _, _ = yysep3453, yyq3453, yy2arr3453
			const yyr3453 bool = false
			yyq3453[0] = x.Kind != ""
			yyq3453[1] = x.APIVersion != ""
			yyq3453[2] = true
			if yyr3453 || yy2arr3453 {
				r.EncodeArrayStart(5)
			} else {
				var yynn3453 int = 2
				for _, b := range yyq3453 {
					if b {
						yynn3453++
					}
				}
				r.EncodeMapStart(yynn3453)
			}
			if yyr3453 || yy2arr3453 {
				if yyq3453[0] {
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3453[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym3456 := z.EncBinary()
					_ = yym3456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3453 || yy2arr3453 {
				if yyq3453[1] {
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3453[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3453 || yy2arr3453 {
				if yyq3453[2] {
					yy3461 := &x.ObjectMeta
					yy3461.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3453[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy3462 := &x.ObjectMeta
					yy3462.CodecEncodeSelf(e)
				}
			}
			if yyr3453 || yy2arr3453 {
				yym3464 := z.EncBinary()
				_ = yym3464
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				yym3465 := z.EncBinary()
				_ = yym3465
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3453 || yy2arr3453 {
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3467 := z.EncBinary()
					_ = yym3467
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3468 := z.EncBinary()
					_ = yym3468
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yysep3453 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3469 := z.DecBinary()
	_ = yym3469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl3470 := r.ReadMapStart()
			if yyl3470 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl3470, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl3470 := r.ReadArrayStart()
			if yyl3470 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl3470, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3471Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3471Slc
	var yyhl3471 bool = l >= 0
	for yyj3471 := 0; ; yyj3471++ {
		if yyhl3471 {
			if yyj3471 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys3471Slc = r.DecodeBytes(yys3471Slc, true, true)
		yys3471 := string(yys3471Slc)
		switch yys3471 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3474 := &x.ObjectMeta
				yyv3474.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3476 := &x.Data
				yym3477 := z.DecBinary()
				_ = yym3477
				if false {
				} else {
					*yyv3476 = r.DecodeBytes(*(*[]byte)(yyv3476), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3471)
		} // end switch yys3471
	} // end for yyj3471
	if !yyhl3471 {
		r.ReadEnd()
	}
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3478 int
	var yyb3478 bool
	var yyhl3478 bool = l >= 0
	yyj3478++
	if yyhl3478 {
		yyb3478 = yyj3478 > l
	} else {
		yyb3478 = r.CheckBreak()
	}
	if yyb3478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3478++
	if yyhl3478 {
		yyb3478 = yyj3478 > l
	} else {
		yyb3478 = r.CheckBreak()
	}
	if yyb3478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3478++
	if yyhl3478 {
		yyb3478 = yyj3478 > l
	} else {
		yyb3478 = r.CheckBreak()
	}
	if yyb3478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3481 := &x.ObjectMeta
		yyv3481.CodecDecodeSelf(d)
	}
	yyj3478++
	if yyhl3478 {
		yyb3478 = yyj3478 > l
	} else {
		yyb3478 = r.CheckBreak()
	}
	if yyb3478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3478++
	if yyhl3478 {
		yyb3478 = yyj3478 > l
	} else {
		yyb3478 = r.CheckBreak()
	}
	if yyb3478 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3483 := &x.Data
		yym3484 := z.DecBinary()
		_ = yym3484
		if false {
		} else {
			*yyv3483 = r.DecodeBytes(*(*[]byte)(yyv3483), false, false)
		}
	}
	for {
		yyj3478++
		if yyhl3478 {
			yyb3478 = yyj3478 > l
		} else {
			yyb3478 = r.CheckBreak()
		}
		if yyb3478 {
			break
		}
		z.DecStructFieldNotFound(yyj3478-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3485 := range v {
		yyv3485.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3486 := *v
	yyh3486, yyl3486 := z.DecSliceHelperStart()

	var yyrr3486, yyrl3486 int
	var yyc3486, yyrt3486 bool
	_, _, _ = yyc3486, yyrt3486, yyrl3486
	yyrr3486 = yyl3486

	if yyv3486 == nil {
		if yyrl3486, yyrt3486 = z.DecInferLen(yyl3486, z.DecBasicHandle().MaxInitLen, 16); yyrt3486 {
			yyrr3486 = yyrl3486
		}
		yyv3486 = make([]PersistentVolumeAccessMode, yyrl3486)
		yyc3486 = true
	}

	if yyl3486 == 0 {
		if len(yyv3486) != 0 {
			yyv3486 = yyv3486[:0]
			yyc3486 = true
		}
	} else if yyl3486 > 0 {

		if yyl3486 > cap(yyv3486) {
			yyrl3486, yyrt3486 = z.DecInferLen(yyl3486, z.DecBasicHandle().MaxInitLen, 16)

			yyv23486 := yyv3486
			yyv3486 = make([]PersistentVolumeAccessMode, yyrl3486)
			if len(yyv3486) > 0 {
				copy(yyv3486, yyv23486[:cap(yyv23486)])
			}
			yyc3486 = true

			yyrr3486 = len(yyv3486)
		} else if yyl3486 != len(yyv3486) {
			yyv3486 = yyv3486[:yyl3486]
			yyc3486 = true
		}
		yyj3486 := 0
		for ; yyj3486 < yyrr3486; yyj3486++ {
			if r.TryDecodeAsNil() {
				yyv3486[yyj3486] = ""
			} else {
				yyv3486[yyj3486] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3486 {
			for ; yyj3486 < yyl3486; yyj3486++ {
				yyv3486 = append(yyv3486, "")
				if r.TryDecodeAsNil() {
					yyv3486[yyj3486] = ""
				} else {
					yyv3486[yyj3486] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3486 := 0; !r.CheckBreak(); yyj3486++ {
			if yyj3486 >= len(yyv3486) {
				yyv3486 = append(yyv3486, "") // var yyz3486 PersistentVolumeAccessMode
				yyc3486 = true
			}

			if yyj3486 < len(yyv3486) {
				if r.TryDecodeAsNil() {
					yyv3486[yyj3486] = ""
				} else {
					yyv3486[yyj3486] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3486.End()
	}
	if yyc3486 {
		*v = yyv3486
	}

}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3490 := range v {
		yy3491 := &yyv3490
		yy3491.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3492 := *v
	yyh3492, yyl3492 := z.DecSliceHelperStart()

	var yyrr3492, yyrl3492 int
	var yyc3492, yyrt3492 bool
	_, _, _ = yyc3492, yyrt3492, yyrl3492
	yyrr3492 = yyl3492

	if yyv3492 == nil {
		if yyrl3492, yyrt3492 = z.DecInferLen(yyl3492, z.DecBasicHandle().MaxInitLen, 384); yyrt3492 {
			yyrr3492 = yyrl3492
		}
		yyv3492 = make([]PersistentVolume, yyrl3492)
		yyc3492 = true
	}

	if yyl3492 == 0 {
		if len(yyv3492) != 0 {
			yyv3492 = yyv3492[:0]
			yyc3492 = true
		}
	} else if yyl3492 > 0 {

		if yyl3492 > cap(yyv3492) {
			yyrl3492, yyrt3492 = z.DecInferLen(yyl3492, z.DecBasicHandle().MaxInitLen, 384)
			yyv3492 = make([]PersistentVolume, yyrl3492)
			yyc3492 = true

			yyrr3492 = len(yyv3492)
		} else if yyl3492 != len(yyv3492) {
			yyv3492 = yyv3492[:yyl3492]
			yyc3492 = true
		}
		yyj3492 := 0
		for ; yyj3492 < yyrr3492; yyj3492++ {
			if r.TryDecodeAsNil() {
				yyv3492[yyj3492] = PersistentVolume{}
			} else {
				yyv3493 := &yyv3492[yyj3492]
				yyv3493.CodecDecodeSelf(d)
			}

		}
		if yyrt3492 {
			for ; yyj3492 < yyl3492; yyj3492++ {
				yyv3492 = append(yyv3492, PersistentVolume{})
				if r.TryDecodeAsNil() {
					yyv3492[yyj3492] = PersistentVolume{}
				} else {
					yyv3494 := &yyv3492[yyj3492]
					yyv3494.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3492 := 0; !r.CheckBreak(); yyj3492++ {
			if yyj3492 >= len(yyv3492) {
				yyv3492 = append(yyv3492, PersistentVolume{}) // var yyz3492 PersistentVolume
				yyc3492 = true
			}

			if yyj3492 < len(yyv3492) {
				if r.TryDecodeAsNil() {
					yyv3492[yyj3492] = PersistentVolume{}
				} else {
					yyv3495 := &yyv3492[yyj3492]
					yyv3495.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3492.End()
	}
	if yyc3492 {
		*v = yyv3492
	}

}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3496 := range v {
		yy3497 := &yyv3496
		yy3497.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3498 := *v
	yyh3498, yyl3498 := z.DecSliceHelperStart()

	var yyrr3498, yyrl3498 int
	var yyc3498, yyrt3498 bool
	_, _, _ = yyc3498, yyrt3498, yyrl3498
	yyrr3498 = yyl3498

	if yyv3498 == nil {
		if yyrl3498, yyrt3498 = z.DecInferLen(yyl3498, z.DecBasicHandle().MaxInitLen, 296); yyrt3498 {
			yyrr3498 = yyrl3498
		}
		yyv3498 = make([]PersistentVolumeClaim, yyrl3498)
		yyc3498 = true
	}

	if yyl3498 == 0 {
		if len(yyv3498) != 0 {
			yyv3498 = yyv3498[:0]
			yyc3498 = true
		}
	} else if yyl3498 > 0 {

		if yyl3498 > cap(yyv3498) {
			yyrl3498, yyrt3498 = z.DecInferLen(yyl3498, z.DecBasicHandle().MaxInitLen, 296)
			yyv3498 = make([]PersistentVolumeClaim, yyrl3498)
			yyc3498 = true

			yyrr3498 = len(yyv3498)
		} else if yyl3498 != len(yyv3498) {
			yyv3498 = yyv3498[:yyl3498]
			yyc3498 = true
		}
		yyj3498 := 0
		for ; yyj3498 < yyrr3498; yyj3498++ {
			if r.TryDecodeAsNil() {
				yyv3498[yyj3498] = PersistentVolumeClaim{}
			} else {
				yyv3499 := &yyv3498[yyj3498]
				yyv3499.CodecDecodeSelf(d)
			}

		}
		if yyrt3498 {
			for ; yyj3498 < yyl3498; yyj3498++ {
				yyv3498 = append(yyv3498, PersistentVolumeClaim{})
				if r.TryDecodeAsNil() {
					yyv3498[yyj3498] = PersistentVolumeClaim{}
				} else {
					yyv3500 := &yyv3498[yyj3498]
					yyv3500.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3498 := 0; !r.CheckBreak(); yyj3498++ {
			if yyj3498 >= len(yyv3498) {
				yyv3498 = append(yyv3498, PersistentVolumeClaim{}) // var yyz3498 PersistentVolumeClaim
				yyc3498 = true
			}

			if yyj3498 < len(yyv3498) {
				if r.TryDecodeAsNil() {
					yyv3498[yyj3498] = PersistentVolumeClaim{}
				} else {
					yyv3501 := &yyv3498[yyj3498]
					yyv3501.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3498.End()
	}
	if yyc3498 {
		*v = yyv3498
	}

}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3502 := range v {
		yy3503 := &yyv3502
		yy3503.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3504 := *v
	yyh3504, yyl3504 := z.DecSliceHelperStart()

	var yyrr3504, yyrl3504 int
	var yyc3504, yyrt3504 bool
	_, _, _ = yyc3504, yyrt3504, yyrl3504
	yyrr3504 = yyl3504

	if yyv3504 == nil {
		if yyrl3504, yyrt3504 = z.DecInferLen(yyl3504, z.DecBasicHandle().MaxInitLen, 48); yyrt3504 {
			yyrr3504 = yyrl3504
		}
		yyv3504 = make([]DownwardAPIVolumeFile, yyrl3504)
		yyc3504 = true
	}

	if yyl3504 == 0 {
		if len(yyv3504) != 0 {
			yyv3504 = yyv3504[:0]
			yyc3504 = true
		}
	} else if yyl3504 > 0 {

		if yyl3504 > cap(yyv3504) {
			yyrl3504, yyrt3504 = z.DecInferLen(yyl3504, z.DecBasicHandle().MaxInitLen, 48)
			yyv3504 = make([]DownwardAPIVolumeFile, yyrl3504)
			yyc3504 = true

			yyrr3504 = len(yyv3504)
		} else if yyl3504 != len(yyv3504) {
			yyv3504 = yyv3504[:yyl3504]
			yyc3504 = true
		}
		yyj3504 := 0
		for ; yyj3504 < yyrr3504; yyj3504++ {
			if r.TryDecodeAsNil() {
				yyv3504[yyj3504] = DownwardAPIVolumeFile{}
			} else {
				yyv3505 := &yyv3504[yyj3504]
				yyv3505.CodecDecodeSelf(d)
			}

		}
		if yyrt3504 {
			for ; yyj3504 < yyl3504; yyj3504++ {
				yyv3504 = append(yyv3504, DownwardAPIVolumeFile{})
				if r.TryDecodeAsNil() {
					yyv3504[yyj3504] = DownwardAPIVolumeFile{}
				} else {
					yyv3506 := &yyv3504[yyj3504]
					yyv3506.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3504 := 0; !r.CheckBreak(); yyj3504++ {
			if yyj3504 >= len(yyv3504) {
				yyv3504 = append(yyv3504, DownwardAPIVolumeFile{}) // var yyz3504 DownwardAPIVolumeFile
				yyc3504 = true
			}

			if yyj3504 < len(yyv3504) {
				if r.TryDecodeAsNil() {
					yyv3504[yyj3504] = DownwardAPIVolumeFile{}
				} else {
					yyv3507 := &yyv3504[yyj3504]
					yyv3507.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3504.End()
	}
	if yyc3504 {
		*v = yyv3504
	}

}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3508 := range v {
		yyv3508.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3509 := *v
	yyh3509, yyl3509 := z.DecSliceHelperStart()

	var yyrr3509, yyrl3509 int
	var yyc3509, yyrt3509 bool
	_, _, _ = yyc3509, yyrt3509, yyrl3509
	yyrr3509 = yyl3509

	if yyv3509 == nil {
		if yyrl3509, yyrt3509 = z.DecInferLen(yyl3509, z.DecBasicHandle().MaxInitLen, 16); yyrt3509 {
			yyrr3509 = yyrl3509
		}
		yyv3509 = make([]Capability, yyrl3509)
		yyc3509 = true
	}

	if yyl3509 == 0 {
		if len(yyv3509) != 0 {
			yyv3509 = yyv3509[:0]
			yyc3509 = true
		}
	} else if yyl3509 > 0 {

		if yyl3509 > cap(yyv3509) {
			yyrl3509, yyrt3509 = z.DecInferLen(yyl3509, z.DecBasicHandle().MaxInitLen, 16)

			yyv23509 := yyv3509
			yyv3509 = make([]Capability, yyrl3509)
			if len(yyv3509) > 0 {
				copy(yyv3509, yyv23509[:cap(yyv23509)])
			}
			yyc3509 = true

			yyrr3509 = len(yyv3509)
		} else if yyl3509 != len(yyv3509) {
			yyv3509 = yyv3509[:yyl3509]
			yyc3509 = true
		}
		yyj3509 := 0
		for ; yyj3509 < yyrr3509; yyj3509++ {
			if r.TryDecodeAsNil() {
				yyv3509[yyj3509] = ""
			} else {
				yyv3509[yyj3509] = Capability(r.DecodeString())
			}

		}
		if yyrt3509 {
			for ; yyj3509 < yyl3509; yyj3509++ {
				yyv3509 = append(yyv3509, "")
				if r.TryDecodeAsNil() {
					yyv3509[yyj3509] = ""
				} else {
					yyv3509[yyj3509] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3509 := 0; !r.CheckBreak(); yyj3509++ {
			if yyj3509 >= len(yyv3509) {
				yyv3509 = append(yyv3509, "") // var yyz3509 Capability
				yyc3509 = true
			}

			if yyj3509 < len(yyv3509) {
				if r.TryDecodeAsNil() {
					yyv3509[yyj3509] = ""
				} else {
					yyv3509[yyj3509] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3509.End()
	}
	if yyc3509 {
		*v = yyv3509
	}

}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3513 := range v {
		yy3514 := &yyv3513
		yy3514.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3515 := *v
	yyh3515, yyl3515 := z.DecSliceHelperStart()

	var yyrr3515, yyrl3515 int
	var yyc3515, yyrt3515 bool
	_, _, _ = yyc3515, yyrt3515, yyrl3515
	yyrr3515 = yyl3515

	if yyv3515 == nil {
		if yyrl3515, yyrt3515 = z.DecInferLen(yyl3515, z.DecBasicHandle().MaxInitLen, 64); yyrt3515 {
			yyrr3515 = yyrl3515
		}
		yyv3515 = make([]ContainerPort, yyrl3515)
		yyc3515 = true
	}

	if yyl3515 == 0 {
		if len(yyv3515) != 0 {
			yyv3515 = yyv3515[:0]
			yyc3515 = true
		}
	} else if yyl3515 > 0 {

		if yyl3515 > cap(yyv3515) {
			yyrl3515, yyrt3515 = z.DecInferLen(yyl3515, z.DecBasicHandle().MaxInitLen, 64)
			yyv3515 = make([]ContainerPort, yyrl3515)
			yyc3515 = true

			yyrr3515 = len(yyv3515)
		} else if yyl3515 != len(yyv3515) {
			yyv3515 = yyv3515[:yyl3515]
			yyc3515 = true
		}
		yyj3515 := 0
		for ; yyj3515 < yyrr3515; yyj3515++ {
			if r.TryDecodeAsNil() {
				yyv3515[yyj3515] = ContainerPort{}
			} else {
				yyv3516 := &yyv3515[yyj3515]
				yyv3516.CodecDecodeSelf(d)
			}

		}
		if yyrt3515 {
			for ; yyj3515 < yyl3515; yyj3515++ {
				yyv3515 = append(yyv3515, ContainerPort{})
				if r.TryDecodeAsNil() {
					yyv3515[yyj3515] = ContainerPort{}
				} else {
					yyv3517 := &yyv3515[yyj3515]
					yyv3517.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3515 := 0; !r.CheckBreak(); yyj3515++ {
			if yyj3515 >= len(yyv3515) {
				yyv3515 = append(yyv3515, ContainerPort{}) // var yyz3515 ContainerPort
				yyc3515 = true
			}

			if yyj3515 < len(yyv3515) {
				if r.TryDecodeAsNil() {
					yyv3515[yyj3515] = ContainerPort{}
				} else {
					yyv3518 := &yyv3515[yyj3515]
					yyv3518.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3515.End()
	}
	if yyc3515 {
		*v = yyv3515
	}

}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3519 := range v {
		yy3520 := &yyv3519
		yy3520.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3521 := *v
	yyh3521, yyl3521 := z.DecSliceHelperStart()

	var yyrr3521, yyrl3521 int
	var yyc3521, yyrt3521 bool
	_, _, _ = yyc3521, yyrt3521, yyrl3521
	yyrr3521 = yyl3521

	if yyv3521 == nil {
		if yyrl3521, yyrt3521 = z.DecInferLen(yyl3521, z.DecBasicHandle().MaxInitLen, 40); yyrt3521 {
			yyrr3521 = yyrl3521
		}
		yyv3521 = make([]EnvVar, yyrl3521)
		yyc3521 = true
	}

	if yyl3521 == 0 {
		if len(yyv3521) != 0 {
			yyv3521 = yyv3521[:0]
			yyc3521 = true
		}
	} else if yyl3521 > 0 {

		if yyl3521 > cap(yyv3521) {
			yyrl3521, yyrt3521 = z.DecInferLen(yyl3521, z.DecBasicHandle().MaxInitLen, 40)
			yyv3521 = make([]EnvVar, yyrl3521)
			yyc3521 = true

			yyrr3521 = len(yyv3521)
		} else if yyl3521 != len(yyv3521) {
			yyv3521 = yyv3521[:yyl3521]
			yyc3521 = true
		}
		yyj3521 := 0
		for ; yyj3521 < yyrr3521; yyj3521++ {
			if r.TryDecodeAsNil() {
				yyv3521[yyj3521] = EnvVar{}
			} else {
				yyv3522 := &yyv3521[yyj3521]
				yyv3522.CodecDecodeSelf(d)
			}

		}
		if yyrt3521 {
			for ; yyj3521 < yyl3521; yyj3521++ {
				yyv3521 = append(yyv3521, EnvVar{})
				if r.TryDecodeAsNil() {
					yyv3521[yyj3521] = EnvVar{}
				} else {
					yyv3523 := &yyv3521[yyj3521]
					yyv3523.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3521 := 0; !r.CheckBreak(); yyj3521++ {
			if yyj3521 >= len(yyv3521) {
				yyv3521 = append(yyv3521, EnvVar{}) // var yyz3521 EnvVar
				yyc3521 = true
			}

			if yyj3521 < len(yyv3521) {
				if r.TryDecodeAsNil() {
					yyv3521[yyj3521] = EnvVar{}
				} else {
					yyv3524 := &yyv3521[yyj3521]
					yyv3524.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3521.End()
	}
	if yyc3521 {
		*v = yyv3521
	}

}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3525 := range v {
		yy3526 := &yyv3525
		yy3526.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3527 := *v
	yyh3527, yyl3527 := z.DecSliceHelperStart()

	var yyrr3527, yyrl3527 int
	var yyc3527, yyrt3527 bool
	_, _, _ = yyc3527, yyrt3527, yyrl3527
	yyrr3527 = yyl3527

	if yyv3527 == nil {
		if yyrl3527, yyrt3527 = z.DecInferLen(yyl3527, z.DecBasicHandle().MaxInitLen, 40); yyrt3527 {
			yyrr3527 = yyrl3527
		}
		yyv3527 = make([]VolumeMount, yyrl3527)
		yyc3527 = true
	}

	if yyl3527 == 0 {
		if len(yyv3527) != 0 {
			yyv3527 = yyv3527[:0]
			yyc3527 = true
		}
	} else if yyl3527 > 0 {

		if yyl3527 > cap(yyv3527) {
			yyrl3527, yyrt3527 = z.DecInferLen(yyl3527, z.DecBasicHandle().MaxInitLen, 40)
			yyv3527 = make([]VolumeMount, yyrl3527)
			yyc3527 = true

			yyrr3527 = len(yyv3527)
		} else if yyl3527 != len(yyv3527) {
			yyv3527 = yyv3527[:yyl3527]
			yyc3527 = true
		}
		yyj3527 := 0
		for ; yyj3527 < yyrr3527; yyj3527++ {
			if r.TryDecodeAsNil() {
				yyv3527[yyj3527] = VolumeMount{}
			} else {
				yyv3528 := &yyv3527[yyj3527]
				yyv3528.CodecDecodeSelf(d)
			}

		}
		if yyrt3527 {
			for ; yyj3527 < yyl3527; yyj3527++ {
				yyv3527 = append(yyv3527, VolumeMount{})
				if r.TryDecodeAsNil() {
					yyv3527[yyj3527] = VolumeMount{}
				} else {
					yyv3529 := &yyv3527[yyj3527]
					yyv3529.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3527 := 0; !r.CheckBreak(); yyj3527++ {
			if yyj3527 >= len(yyv3527) {
				yyv3527 = append(yyv3527, VolumeMount{}) // var yyz3527 VolumeMount
				yyc3527 = true
			}

			if yyj3527 < len(yyv3527) {
				if r.TryDecodeAsNil() {
					yyv3527[yyj3527] = VolumeMount{}
				} else {
					yyv3530 := &yyv3527[yyj3527]
					yyv3530.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3527.End()
	}
	if yyc3527 {
		*v = yyv3527
	}

}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3531 := range v {
		yy3532 := &yyv3531
		yy3532.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3533 := *v
	yyh3533, yyl3533 := z.DecSliceHelperStart()

	var yyrr3533, yyrl3533 int
	var yyc3533, yyrt3533 bool
	_, _, _ = yyc3533, yyrt3533, yyrl3533
	yyrr3533 = yyl3533

	if yyv3533 == nil {
		if yyrl3533, yyrt3533 = z.DecInferLen(yyl3533, z.DecBasicHandle().MaxInitLen, 488); yyrt3533 {
			yyrr3533 = yyrl3533
		}
		yyv3533 = make([]Pod, yyrl3533)
		yyc3533 = true
	}

	if yyl3533 == 0 {
		if len(yyv3533) != 0 {
			yyv3533 = yyv3533[:0]
			yyc3533 = true
		}
	} else if yyl3533 > 0 {

		if yyl3533 > cap(yyv3533) {
			yyrl3533, yyrt3533 = z.DecInferLen(yyl3533, z.DecBasicHandle().MaxInitLen, 488)
			yyv3533 = make([]Pod, yyrl3533)
			yyc3533 = true

			yyrr3533 = len(yyv3533)
		} else if yyl3533 != len(yyv3533) {
			yyv3533 = yyv3533[:yyl3533]
			yyc3533 = true
		}
		yyj3533 := 0
		for ; yyj3533 < yyrr3533; yyj3533++ {
			if r.TryDecodeAsNil() {
				yyv3533[yyj3533] = Pod{}
			} else {
				yyv3534 := &yyv3533[yyj3533]
				yyv3534.CodecDecodeSelf(d)
			}

		}
		if yyrt3533 {
			for ; yyj3533 < yyl3533; yyj3533++ {
				yyv3533 = append(yyv3533, Pod{})
				if r.TryDecodeAsNil() {
					yyv3533[yyj3533] = Pod{}
				} else {
					yyv3535 := &yyv3533[yyj3533]
					yyv3535.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3533 := 0; !r.CheckBreak(); yyj3533++ {
			if yyj3533 >= len(yyv3533) {
				yyv3533 = append(yyv3533, Pod{}) // var yyz3533 Pod
				yyc3533 = true
			}

			if yyj3533 < len(yyv3533) {
				if r.TryDecodeAsNil() {
					yyv3533[yyj3533] = Pod{}
				} else {
					yyv3536 := &yyv3533[yyj3533]
					yyv3536.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3533.End()
	}
	if yyc3533 {
		*v = yyv3533
	}

}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3537 := range v {
		yy3538 := &yyv3537
		yy3538.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3539 := *v
	yyh3539, yyl3539 := z.DecSliceHelperStart()

	var yyrr3539, yyrl3539 int
	var yyc3539, yyrt3539 bool
	_, _, _ = yyc3539, yyrt3539, yyrl3539
	yyrr3539 = yyl3539

	if yyv3539 == nil {
		if yyrl3539, yyrt3539 = z.DecInferLen(yyl3539, z.DecBasicHandle().MaxInitLen, 144); yyrt3539 {
			yyrr3539 = yyrl3539
		}
		yyv3539 = make([]Volume, yyrl3539)
		yyc3539 = true
	}

	if yyl3539 == 0 {
		if len(yyv3539) != 0 {
			yyv3539 = yyv3539[:0]
			yyc3539 = true
		}
	} else if yyl3539 > 0 {

		if yyl3539 > cap(yyv3539) {
			yyrl3539, yyrt3539 = z.DecInferLen(yyl3539, z.DecBasicHandle().MaxInitLen, 144)
			yyv3539 = make([]Volume, yyrl3539)
			yyc3539 = true

			yyrr3539 = len(yyv3539)
		} else if yyl3539 != len(yyv3539) {
			yyv3539 = yyv3539[:yyl3539]
			yyc3539 = true
		}
		yyj3539 := 0
		for ; yyj3539 < yyrr3539; yyj3539++ {
			if r.TryDecodeAsNil() {
				yyv3539[yyj3539] = Volume{}
			} else {
				yyv3540 := &yyv3539[yyj3539]
				yyv3540.CodecDecodeSelf(d)
			}

		}
		if yyrt3539 {
			for ; yyj3539 < yyl3539; yyj3539++ {
				yyv3539 = append(yyv3539, Volume{})
				if r.TryDecodeAsNil() {
					yyv3539[yyj3539] = Volume{}
				} else {
					yyv3541 := &yyv3539[yyj3539]
					yyv3541.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3539 := 0; !r.CheckBreak(); yyj3539++ {
			if yyj3539 >= len(yyv3539) {
				yyv3539 = append(yyv3539, Volume{}) // var yyz3539 Volume
				yyc3539 = true
			}

			if yyj3539 < len(yyv3539) {
				if r.TryDecodeAsNil() {
					yyv3539[yyj3539] = Volume{}
				} else {
					yyv3542 := &yyv3539[yyj3539]
					yyv3542.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3539.End()
	}
	if yyc3539 {
		*v = yyv3539
	}

}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3543 := range v {
		yy3544 := &yyv3543
		yy3544.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3545 := *v
	yyh3545, yyl3545 := z.DecSliceHelperStart()

	var yyrr3545, yyrl3545 int
	var yyc3545, yyrt3545 bool
	_, _, _ = yyc3545, yyrt3545, yyrl3545
	yyrr3545 = yyl3545

	if yyv3545 == nil {
		if yyrl3545, yyrt3545 = z.DecInferLen(yyl3545, z.DecBasicHandle().MaxInitLen, 256); yyrt3545 {
			yyrr3545 = yyrl3545
		}
		yyv3545 = make([]Container, yyrl3545)
		yyc3545 = true
	}

	if yyl3545 == 0 {
		if len(yyv3545) != 0 {
			yyv3545 = yyv3545[:0]
			yyc3545 = true
		}
	} else if yyl3545 > 0 {

		if yyl3545 > cap(yyv3545) {
			yyrl3545, yyrt3545 = z.DecInferLen(yyl3545, z.DecBasicHandle().MaxInitLen, 256)
			yyv3545 = make([]Container, yyrl3545)
			yyc3545 = true

			yyrr3545 = len(yyv3545)
		} else if yyl3545 != len(yyv3545) {
			yyv3545 = yyv3545[:yyl3545]
			yyc3545 = true
		}
		yyj3545 := 0
		for ; yyj3545 < yyrr3545; yyj3545++ {
			if r.TryDecodeAsNil() {
				yyv3545[yyj3545] = Container{}
			} else {
				yyv3546 := &yyv3545[yyj3545]
				yyv3546.CodecDecodeSelf(d)
			}

		}
		if yyrt3545 {
			for ; yyj3545 < yyl3545; yyj3545++ {
				yyv3545 = append(yyv3545, Container{})
				if r.TryDecodeAsNil() {
					yyv3545[yyj3545] = Container{}
				} else {
					yyv3547 := &yyv3545[yyj3545]
					yyv3547.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3545 := 0; !r.CheckBreak(); yyj3545++ {
			if yyj3545 >= len(yyv3545) {
				yyv3545 = append(yyv3545, Container{}) // var yyz3545 Container
				yyc3545 = true
			}

			if yyj3545 < len(yyv3545) {
				if r.TryDecodeAsNil() {
					yyv3545[yyj3545] = Container{}
				} else {
					yyv3548 := &yyv3545[yyj3545]
					yyv3548.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3545.End()
	}
	if yyc3545 {
		*v = yyv3545
	}

}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3549 := range v {
		yy3550 := &yyv3549
		yy3550.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3551 := *v
	yyh3551, yyl3551 := z.DecSliceHelperStart()

	var yyrr3551, yyrl3551 int
	var yyc3551, yyrt3551 bool
	_, _, _ = yyc3551, yyrt3551, yyrl3551
	yyrr3551 = yyl3551

	if yyv3551 == nil {
		if yyrl3551, yyrt3551 = z.DecInferLen(yyl3551, z.DecBasicHandle().MaxInitLen, 16); yyrt3551 {
			yyrr3551 = yyrl3551
		}
		yyv3551 = make([]LocalObjectReference, yyrl3551)
		yyc3551 = true
	}

	if yyl3551 == 0 {
		if len(yyv3551) != 0 {
			yyv3551 = yyv3551[:0]
			yyc3551 = true
		}
	} else if yyl3551 > 0 {

		if yyl3551 > cap(yyv3551) {
			yyrl3551, yyrt3551 = z.DecInferLen(yyl3551, z.DecBasicHandle().MaxInitLen, 16)
			yyv3551 = make([]LocalObjectReference, yyrl3551)
			yyc3551 = true

			yyrr3551 = len(yyv3551)
		} else if yyl3551 != len(yyv3551) {
			yyv3551 = yyv3551[:yyl3551]
			yyc3551 = true
		}
		yyj3551 := 0
		for ; yyj3551 < yyrr3551; yyj3551++ {
			if r.TryDecodeAsNil() {
				yyv3551[yyj3551] = LocalObjectReference{}
			} else {
				yyv3552 := &yyv3551[yyj3551]
				yyv3552.CodecDecodeSelf(d)
			}

		}
		if yyrt3551 {
			for ; yyj3551 < yyl3551; yyj3551++ {
				yyv3551 = append(yyv3551, LocalObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3551[yyj3551] = LocalObjectReference{}
				} else {
					yyv3553 := &yyv3551[yyj3551]
					yyv3553.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3551 := 0; !r.CheckBreak(); yyj3551++ {
			if yyj3551 >= len(yyv3551) {
				yyv3551 = append(yyv3551, LocalObjectReference{}) // var yyz3551 LocalObjectReference
				yyc3551 = true
			}

			if yyj3551 < len(yyv3551) {
				if r.TryDecodeAsNil() {
					yyv3551[yyj3551] = LocalObjectReference{}
				} else {
					yyv3554 := &yyv3551[yyj3551]
					yyv3554.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3551.End()
	}
	if yyc3551 {
		*v = yyv3551
	}

}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3555 := range v {
		yy3556 := &yyv3555
		yy3556.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3557 := *v
	yyh3557, yyl3557 := z.DecSliceHelperStart()

	var yyrr3557, yyrl3557 int
	var yyc3557, yyrt3557 bool
	_, _, _ = yyc3557, yyrt3557, yyrl3557
	yyrr3557 = yyl3557

	if yyv3557 == nil {
		if yyrl3557, yyrt3557 = z.DecInferLen(yyl3557, z.DecBasicHandle().MaxInitLen, 112); yyrt3557 {
			yyrr3557 = yyrl3557
		}
		yyv3557 = make([]PodCondition, yyrl3557)
		yyc3557 = true
	}

	if yyl3557 == 0 {
		if len(yyv3557) != 0 {
			yyv3557 = yyv3557[:0]
			yyc3557 = true
		}
	} else if yyl3557 > 0 {

		if yyl3557 > cap(yyv3557) {
			yyrl3557, yyrt3557 = z.DecInferLen(yyl3557, z.DecBasicHandle().MaxInitLen, 112)
			yyv3557 = make([]PodCondition, yyrl3557)
			yyc3557 = true

			yyrr3557 = len(yyv3557)
		} else if yyl3557 != len(yyv3557) {
			yyv3557 = yyv3557[:yyl3557]
			yyc3557 = true
		}
		yyj3557 := 0
		for ; yyj3557 < yyrr3557; yyj3557++ {
			if r.TryDecodeAsNil() {
				yyv3557[yyj3557] = PodCondition{}
			} else {
				yyv3558 := &yyv3557[yyj3557]
				yyv3558.CodecDecodeSelf(d)
			}

		}
		if yyrt3557 {
			for ; yyj3557 < yyl3557; yyj3557++ {
				yyv3557 = append(yyv3557, PodCondition{})
				if r.TryDecodeAsNil() {
					yyv3557[yyj3557] = PodCondition{}
				} else {
					yyv3559 := &yyv3557[yyj3557]
					yyv3559.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3557 := 0; !r.CheckBreak(); yyj3557++ {
			if yyj3557 >= len(yyv3557) {
				yyv3557 = append(yyv3557, PodCondition{}) // var yyz3557 PodCondition
				yyc3557 = true
			}

			if yyj3557 < len(yyv3557) {
				if r.TryDecodeAsNil() {
					yyv3557[yyj3557] = PodCondition{}
				} else {
					yyv3560 := &yyv3557[yyj3557]
					yyv3560.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3557.End()
	}
	if yyc3557 {
		*v = yyv3557
	}

}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3561 := range v {
		yy3562 := &yyv3561
		yy3562.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3563 := *v
	yyh3563, yyl3563 := z.DecSliceHelperStart()

	var yyrr3563, yyrl3563 int
	var yyc3563, yyrt3563 bool
	_, _, _ = yyc3563, yyrt3563, yyrl3563
	yyrr3563 = yyl3563

	if yyv3563 == nil {
		if yyrl3563, yyrt3563 = z.DecInferLen(yyl3563, z.DecBasicHandle().MaxInitLen, 128); yyrt3563 {
			yyrr3563 = yyrl3563
		}
		yyv3563 = make([]ContainerStatus, yyrl3563)
		yyc3563 = true
	}

	if yyl3563 == 0 {
		if len(yyv3563) != 0 {
			yyv3563 = yyv3563[:0]
			yyc3563 = true
		}
	} else if yyl3563 > 0 {

		if yyl3563 > cap(yyv3563) {
			yyrl3563, yyrt3563 = z.DecInferLen(yyl3563, z.DecBasicHandle().MaxInitLen, 128)
			yyv3563 = make([]ContainerStatus, yyrl3563)
			yyc3563 = true

			yyrr3563 = len(yyv3563)
		} else if yyl3563 != len(yyv3563) {
			yyv3563 = yyv3563[:yyl3563]
			yyc3563 = true
		}
		yyj3563 := 0
		for ; yyj3563 < yyrr3563; yyj3563++ {
			if r.TryDecodeAsNil() {
				yyv3563[yyj3563] = ContainerStatus{}
			} else {
				yyv3564 := &yyv3563[yyj3563]
				yyv3564.CodecDecodeSelf(d)
			}

		}
		if yyrt3563 {
			for ; yyj3563 < yyl3563; yyj3563++ {
				yyv3563 = append(yyv3563, ContainerStatus{})
				if r.TryDecodeAsNil() {
					yyv3563[yyj3563] = ContainerStatus{}
				} else {
					yyv3565 := &yyv3563[yyj3563]
					yyv3565.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3563 := 0; !r.CheckBreak(); yyj3563++ {
			if yyj3563 >= len(yyv3563) {
				yyv3563 = append(yyv3563, ContainerStatus{}) // var yyz3563 ContainerStatus
				yyc3563 = true
			}

			if yyj3563 < len(yyv3563) {
				if r.TryDecodeAsNil() {
					yyv3563[yyj3563] = ContainerStatus{}
				} else {
					yyv3566 := &yyv3563[yyj3563]
					yyv3566.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3563.End()
	}
	if yyc3563 {
		*v = yyv3563
	}

}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3567 := range v {
		yy3568 := &yyv3567
		yy3568.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3569 := *v
	yyh3569, yyl3569 := z.DecSliceHelperStart()

	var yyrr3569, yyrl3569 int
	var yyc3569, yyrt3569 bool
	_, _, _ = yyc3569, yyrt3569, yyrl3569
	yyrr3569 = yyl3569

	if yyv3569 == nil {
		if yyrl3569, yyrt3569 = z.DecInferLen(yyl3569, z.DecBasicHandle().MaxInitLen, 512); yyrt3569 {
			yyrr3569 = yyrl3569
		}
		yyv3569 = make([]PodTemplate, yyrl3569)
		yyc3569 = true
	}

	if yyl3569 == 0 {
		if len(yyv3569) != 0 {
			yyv3569 = yyv3569[:0]
			yyc3569 = true
		}
	} else if yyl3569 > 0 {

		if yyl3569 > cap(yyv3569) {
			yyrl3569, yyrt3569 = z.DecInferLen(yyl3569, z.DecBasicHandle().MaxInitLen, 512)
			yyv3569 = make([]PodTemplate, yyrl3569)
			yyc3569 = true

			yyrr3569 = len(yyv3569)
		} else if yyl3569 != len(yyv3569) {
			yyv3569 = yyv3569[:yyl3569]
			yyc3569 = true
		}
		yyj3569 := 0
		for ; yyj3569 < yyrr3569; yyj3569++ {
			if r.TryDecodeAsNil() {
				yyv3569[yyj3569] = PodTemplate{}
			} else {
				yyv3570 := &yyv3569[yyj3569]
				yyv3570.CodecDecodeSelf(d)
			}

		}
		if yyrt3569 {
			for ; yyj3569 < yyl3569; yyj3569++ {
				yyv3569 = append(yyv3569, PodTemplate{})
				if r.TryDecodeAsNil() {
					yyv3569[yyj3569] = PodTemplate{}
				} else {
					yyv3571 := &yyv3569[yyj3569]
					yyv3571.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3569 := 0; !r.CheckBreak(); yyj3569++ {
			if yyj3569 >= len(yyv3569) {
				yyv3569 = append(yyv3569, PodTemplate{}) // var yyz3569 PodTemplate
				yyc3569 = true
			}

			if yyj3569 < len(yyv3569) {
				if r.TryDecodeAsNil() {
					yyv3569[yyj3569] = PodTemplate{}
				} else {
					yyv3572 := &yyv3569[yyj3569]
					yyv3572.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3569.End()
	}
	if yyc3569 {
		*v = yyv3569
	}

}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3573 := range v {
		yy3574 := &yyv3573
		yy3574.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3575 := *v
	yyh3575, yyl3575 := z.DecSliceHelperStart()

	var yyrr3575, yyrl3575 int
	var yyc3575, yyrt3575 bool
	_, _, _ = yyc3575, yyrt3575, yyrl3575
	yyrr3575 = yyl3575

	if yyv3575 == nil {
		if yyrl3575, yyrt3575 = z.DecInferLen(yyl3575, z.DecBasicHandle().MaxInitLen, 232); yyrt3575 {
			yyrr3575 = yyrl3575
		}
		yyv3575 = make([]ReplicationController, yyrl3575)
		yyc3575 = true
	}

	if yyl3575 == 0 {
		if len(yyv3575) != 0 {
			yyv3575 = yyv3575[:0]
			yyc3575 = true
		}
	} else if yyl3575 > 0 {

		if yyl3575 > cap(yyv3575) {
			yyrl3575, yyrt3575 = z.DecInferLen(yyl3575, z.DecBasicHandle().MaxInitLen, 232)
			yyv3575 = make([]ReplicationController, yyrl3575)
			yyc3575 = true

			yyrr3575 = len(yyv3575)
		} else if yyl3575 != len(yyv3575) {
			yyv3575 = yyv3575[:yyl3575]
			yyc3575 = true
		}
		yyj3575 := 0
		for ; yyj3575 < yyrr3575; yyj3575++ {
			if r.TryDecodeAsNil() {
				yyv3575[yyj3575] = ReplicationController{}
			} else {
				yyv3576 := &yyv3575[yyj3575]
				yyv3576.CodecDecodeSelf(d)
			}

		}
		if yyrt3575 {
			for ; yyj3575 < yyl3575; yyj3575++ {
				yyv3575 = append(yyv3575, ReplicationController{})
				if r.TryDecodeAsNil() {
					yyv3575[yyj3575] = ReplicationController{}
				} else {
					yyv3577 := &yyv3575[yyj3575]
					yyv3577.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3575 := 0; !r.CheckBreak(); yyj3575++ {
			if yyj3575 >= len(yyv3575) {
				yyv3575 = append(yyv3575, ReplicationController{}) // var yyz3575 ReplicationController
				yyc3575 = true
			}

			if yyj3575 < len(yyv3575) {
				if r.TryDecodeAsNil() {
					yyv3575[yyj3575] = ReplicationController{}
				} else {
					yyv3578 := &yyv3575[yyj3575]
					yyv3578.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3575.End()
	}
	if yyc3575 {
		*v = yyv3575
	}

}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3579 := range v {
		yy3580 := &yyv3579
		yy3580.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3581 := *v
	yyh3581, yyl3581 := z.DecSliceHelperStart()

	var yyrr3581, yyrl3581 int
	var yyc3581, yyrt3581 bool
	_, _, _ = yyc3581, yyrt3581, yyrl3581
	yyrr3581 = yyl3581

	if yyv3581 == nil {
		if yyrl3581, yyrt3581 = z.DecInferLen(yyl3581, z.DecBasicHandle().MaxInitLen, 336); yyrt3581 {
			yyrr3581 = yyrl3581
		}
		yyv3581 = make([]Service, yyrl3581)
		yyc3581 = true
	}

	if yyl3581 == 0 {
		if len(yyv3581) != 0 {
			yyv3581 = yyv3581[:0]
			yyc3581 = true
		}
	} else if yyl3581 > 0 {

		if yyl3581 > cap(yyv3581) {
			yyrl3581, yyrt3581 = z.DecInferLen(yyl3581, z.DecBasicHandle().MaxInitLen, 336)
			yyv3581 = make([]Service, yyrl3581)
			yyc3581 = true

			yyrr3581 = len(yyv3581)
		} else if yyl3581 != len(yyv3581) {
			yyv3581 = yyv3581[:yyl3581]
			yyc3581 = true
		}
		yyj3581 := 0
		for ; yyj3581 < yyrr3581; yyj3581++ {
			if r.TryDecodeAsNil() {
				yyv3581[yyj3581] = Service{}
			} else {
				yyv3582 := &yyv3581[yyj3581]
				yyv3582.CodecDecodeSelf(d)
			}

		}
		if yyrt3581 {
			for ; yyj3581 < yyl3581; yyj3581++ {
				yyv3581 = append(yyv3581, Service{})
				if r.TryDecodeAsNil() {
					yyv3581[yyj3581] = Service{}
				} else {
					yyv3583 := &yyv3581[yyj3581]
					yyv3583.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3581 := 0; !r.CheckBreak(); yyj3581++ {
			if yyj3581 >= len(yyv3581) {
				yyv3581 = append(yyv3581, Service{}) // var yyz3581 Service
				yyc3581 = true
			}

			if yyj3581 < len(yyv3581) {
				if r.TryDecodeAsNil() {
					yyv3581[yyj3581] = Service{}
				} else {
					yyv3584 := &yyv3581[yyj3581]
					yyv3584.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3581.End()
	}
	if yyc3581 {
		*v = yyv3581
	}

}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3585 := range v {
		yy3586 := &yyv3585
		yy3586.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3587 := *v
	yyh3587, yyl3587 := z.DecSliceHelperStart()

	var yyrr3587, yyrl3587 int
	var yyc3587, yyrt3587 bool
	_, _, _ = yyc3587, yyrt3587, yyrl3587
	yyrr3587 = yyl3587

	if yyv3587 == nil {
		if yyrl3587, yyrt3587 = z.DecInferLen(yyl3587, z.DecBasicHandle().MaxInitLen, 32); yyrt3587 {
			yyrr3587 = yyrl3587
		}
		yyv3587 = make([]LoadBalancerIngress, yyrl3587)
		yyc3587 = true
	}

	if yyl3587 == 0 {
		if len(yyv3587) != 0 {
			yyv3587 = yyv3587[:0]
			yyc3587 = true
		}
	} else if yyl3587 > 0 {

		if yyl3587 > cap(yyv3587) {
			yyrl3587, yyrt3587 = z.DecInferLen(yyl3587, z.DecBasicHandle().MaxInitLen, 32)
			yyv3587 = make([]LoadBalancerIngress, yyrl3587)
			yyc3587 = true

			yyrr3587 = len(yyv3587)
		} else if yyl3587 != len(yyv3587) {
			yyv3587 = yyv3587[:yyl3587]
			yyc3587 = true
		}
		yyj3587 := 0
		for ; yyj3587 < yyrr3587; yyj3587++ {
			if r.TryDecodeAsNil() {
				yyv3587[yyj3587] = LoadBalancerIngress{}
			} else {
				yyv3588 := &yyv3587[yyj3587]
				yyv3588.CodecDecodeSelf(d)
			}

		}
		if yyrt3587 {
			for ; yyj3587 < yyl3587; yyj3587++ {
				yyv3587 = append(yyv3587, LoadBalancerIngress{})
				if r.TryDecodeAsNil() {
					yyv3587[yyj3587] = LoadBalancerIngress{}
				} else {
					yyv3589 := &yyv3587[yyj3587]
					yyv3589.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3587 := 0; !r.CheckBreak(); yyj3587++ {
			if yyj3587 >= len(yyv3587) {
				yyv3587 = append(yyv3587, LoadBalancerIngress{}) // var yyz3587 LoadBalancerIngress
				yyc3587 = true
			}

			if yyj3587 < len(yyv3587) {
				if r.TryDecodeAsNil() {
					yyv3587[yyj3587] = LoadBalancerIngress{}
				} else {
					yyv3590 := &yyv3587[yyj3587]
					yyv3590.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3587.End()
	}
	if yyc3587 {
		*v = yyv3587
	}

}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3591 := range v {
		yy3592 := &yyv3591
		yy3592.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3593 := *v
	yyh3593, yyl3593 := z.DecSliceHelperStart()

	var yyrr3593, yyrl3593 int
	var yyc3593, yyrt3593 bool
	_, _, _ = yyc3593, yyrt3593, yyrl3593
	yyrr3593 = yyl3593

	if yyv3593 == nil {
		if yyrl3593, yyrt3593 = z.DecInferLen(yyl3593, z.DecBasicHandle().MaxInitLen, 80); yyrt3593 {
			yyrr3593 = yyrl3593
		}
		yyv3593 = make([]ServicePort, yyrl3593)
		yyc3593 = true
	}

	if yyl3593 == 0 {
		if len(yyv3593) != 0 {
			yyv3593 = yyv3593[:0]
			yyc3593 = true
		}
	} else if yyl3593 > 0 {

		if yyl3593 > cap(yyv3593) {
			yyrl3593, yyrt3593 = z.DecInferLen(yyl3593, z.DecBasicHandle().MaxInitLen, 80)
			yyv3593 = make([]ServicePort, yyrl3593)
			yyc3593 = true

			yyrr3593 = len(yyv3593)
		} else if yyl3593 != len(yyv3593) {
			yyv3593 = yyv3593[:yyl3593]
			yyc3593 = true
		}
		yyj3593 := 0
		for ; yyj3593 < yyrr3593; yyj3593++ {
			if r.TryDecodeAsNil() {
				yyv3593[yyj3593] = ServicePort{}
			} else {
				yyv3594 := &yyv3593[yyj3593]
				yyv3594.CodecDecodeSelf(d)
			}

		}
		if yyrt3593 {
			for ; yyj3593 < yyl3593; yyj3593++ {
				yyv3593 = append(yyv3593, ServicePort{})
				if r.TryDecodeAsNil() {
					yyv3593[yyj3593] = ServicePort{}
				} else {
					yyv3595 := &yyv3593[yyj3593]
					yyv3595.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3593 := 0; !r.CheckBreak(); yyj3593++ {
			if yyj3593 >= len(yyv3593) {
				yyv3593 = append(yyv3593, ServicePort{}) // var yyz3593 ServicePort
				yyc3593 = true
			}

			if yyj3593 < len(yyv3593) {
				if r.TryDecodeAsNil() {
					yyv3593[yyj3593] = ServicePort{}
				} else {
					yyv3596 := &yyv3593[yyj3593]
					yyv3596.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3593.End()
	}
	if yyc3593 {
		*v = yyv3593
	}

}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3597 := range v {
		yy3598 := &yyv3597
		yy3598.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3599 := *v
	yyh3599, yyl3599 := z.DecSliceHelperStart()

	var yyrr3599, yyrl3599 int
	var yyc3599, yyrt3599 bool
	_, _, _ = yyc3599, yyrt3599, yyrl3599
	yyrr3599 = yyl3599

	if yyv3599 == nil {
		if yyrl3599, yyrt3599 = z.DecInferLen(yyl3599, z.DecBasicHandle().MaxInitLen, 112); yyrt3599 {
			yyrr3599 = yyrl3599
		}
		yyv3599 = make([]ObjectReference, yyrl3599)
		yyc3599 = true
	}

	if yyl3599 == 0 {
		if len(yyv3599) != 0 {
			yyv3599 = yyv3599[:0]
			yyc3599 = true
		}
	} else if yyl3599 > 0 {

		if yyl3599 > cap(yyv3599) {
			yyrl3599, yyrt3599 = z.DecInferLen(yyl3599, z.DecBasicHandle().MaxInitLen, 112)
			yyv3599 = make([]ObjectReference, yyrl3599)
			yyc3599 = true

			yyrr3599 = len(yyv3599)
		} else if yyl3599 != len(yyv3599) {
			yyv3599 = yyv3599[:yyl3599]
			yyc3599 = true
		}
		yyj3599 := 0
		for ; yyj3599 < yyrr3599; yyj3599++ {
			if r.TryDecodeAsNil() {
				yyv3599[yyj3599] = ObjectReference{}
			} else {
				yyv3600 := &yyv3599[yyj3599]
				yyv3600.CodecDecodeSelf(d)
			}

		}
		if yyrt3599 {
			for ; yyj3599 < yyl3599; yyj3599++ {
				yyv3599 = append(yyv3599, ObjectReference{})
				if r.TryDecodeAsNil() {
					yyv3599[yyj3599] = ObjectReference{}
				} else {
					yyv3601 := &yyv3599[yyj3599]
					yyv3601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3599 := 0; !r.CheckBreak(); yyj3599++ {
			if yyj3599 >= len(yyv3599) {
				yyv3599 = append(yyv3599, ObjectReference{}) // var yyz3599 ObjectReference
				yyc3599 = true
			}

			if yyj3599 < len(yyv3599) {
				if r.TryDecodeAsNil() {
					yyv3599[yyj3599] = ObjectReference{}
				} else {
					yyv3602 := &yyv3599[yyj3599]
					yyv3602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3599.End()
	}
	if yyc3599 {
		*v = yyv3599
	}

}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3603 := range v {
		yy3604 := &yyv3603
		yy3604.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3605 := *v
	yyh3605, yyl3605 := z.DecSliceHelperStart()

	var yyrr3605, yyrl3605 int
	var yyc3605, yyrt3605 bool
	_, _, _ = yyc3605, yyrt3605, yyrl3605
	yyrr3605 = yyl3605

	if yyv3605 == nil {
		if yyrl3605, yyrt3605 = z.DecInferLen(yyl3605, z.DecBasicHandle().MaxInitLen, 240); yyrt3605 {
			yyrr3605 = yyrl3605
		}
		yyv3605 = make([]ServiceAccount, yyrl3605)
		yyc3605 = true
	}

	if yyl3605 == 0 {
		if len(yyv3605) != 0 {
			yyv3605 = yyv3605[:0]
			yyc3605 = true
		}
	} else if yyl3605 > 0 {

		if yyl3605 > cap(yyv3605) {
			yyrl3605, yyrt3605 = z.DecInferLen(yyl3605, z.DecBasicHandle().MaxInitLen, 240)
			yyv3605 = make([]ServiceAccount, yyrl3605)
			yyc3605 = true

			yyrr3605 = len(yyv3605)
		} else if yyl3605 != len(yyv3605) {
			yyv3605 = yyv3605[:yyl3605]
			yyc3605 = true
		}
		yyj3605 := 0
		for ; yyj3605 < yyrr3605; yyj3605++ {
			if r.TryDecodeAsNil() {
				yyv3605[yyj3605] = ServiceAccount{}
			} else {
				yyv3606 := &yyv3605[yyj3605]
				yyv3606.CodecDecodeSelf(d)
			}

		}
		if yyrt3605 {
			for ; yyj3605 < yyl3605; yyj3605++ {
				yyv3605 = append(yyv3605, ServiceAccount{})
				if r.TryDecodeAsNil() {
					yyv3605[yyj3605] = ServiceAccount{}
				} else {
					yyv3607 := &yyv3605[yyj3605]
					yyv3607.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3605 := 0; !r.CheckBreak(); yyj3605++ {
			if yyj3605 >= len(yyv3605) {
				yyv3605 = append(yyv3605, ServiceAccount{}) // var yyz3605 ServiceAccount
				yyc3605 = true
			}

			if yyj3605 < len(yyv3605) {
				if r.TryDecodeAsNil() {
					yyv3605[yyj3605] = ServiceAccount{}
				} else {
					yyv3608 := &yyv3605[yyj3605]
					yyv3608.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3605.End()
	}
	if yyc3605 {
		*v = yyv3605
	}

}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3609 := range v {
		yy3610 := &yyv3609
		yy3610.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3611 := *v
	yyh3611, yyl3611 := z.DecSliceHelperStart()

	var yyrr3611, yyrl3611 int
	var yyc3611, yyrt3611 bool
	_, _, _ = yyc3611, yyrt3611, yyrl3611
	yyrr3611 = yyl3611

	if yyv3611 == nil {
		if yyrl3611, yyrt3611 = z.DecInferLen(yyl3611, z.DecBasicHandle().MaxInitLen, 72); yyrt3611 {
			yyrr3611 = yyrl3611
		}
		yyv3611 = make([]EndpointSubset, yyrl3611)
		yyc3611 = true
	}

	if yyl3611 == 0 {
		if len(yyv3611) != 0 {
			yyv3611 = yyv3611[:0]
			yyc3611 = true
		}
	} else if yyl3611 > 0 {

		if yyl3611 > cap(yyv3611) {
			yyrl3611, yyrt3611 = z.DecInferLen(yyl3611, z.DecBasicHandle().MaxInitLen, 72)
			yyv3611 = make([]EndpointSubset, yyrl3611)
			yyc3611 = true

			yyrr3611 = len(yyv3611)
		} else if yyl3611 != len(yyv3611) {
			yyv3611 = yyv3611[:yyl3611]
			yyc3611 = true
		}
		yyj3611 := 0
		for ; yyj3611 < yyrr3611; yyj3611++ {
			if r.TryDecodeAsNil() {
				yyv3611[yyj3611] = EndpointSubset{}
			} else {
				yyv3612 := &yyv3611[yyj3611]
				yyv3612.CodecDecodeSelf(d)
			}

		}
		if yyrt3611 {
			for ; yyj3611 < yyl3611; yyj3611++ {
				yyv3611 = append(yyv3611, EndpointSubset{})
				if r.TryDecodeAsNil() {
					yyv3611[yyj3611] = EndpointSubset{}
				} else {
					yyv3613 := &yyv3611[yyj3611]
					yyv3613.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3611 := 0; !r.CheckBreak(); yyj3611++ {
			if yyj3611 >= len(yyv3611) {
				yyv3611 = append(yyv3611, EndpointSubset{}) // var yyz3611 EndpointSubset
				yyc3611 = true
			}

			if yyj3611 < len(yyv3611) {
				if r.TryDecodeAsNil() {
					yyv3611[yyj3611] = EndpointSubset{}
				} else {
					yyv3614 := &yyv3611[yyj3611]
					yyv3614.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3611.End()
	}
	if yyc3611 {
		*v = yyv3611
	}

}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3615 := range v {
		yy3616 := &yyv3615
		yy3616.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3617 := *v
	yyh3617, yyl3617 := z.DecSliceHelperStart()

	var yyrr3617, yyrl3617 int
	var yyc3617, yyrt3617 bool
	_, _, _ = yyc3617, yyrt3617, yyrl3617
	yyrr3617 = yyl3617

	if yyv3617 == nil {
		if yyrl3617, yyrt3617 = z.DecInferLen(yyl3617, z.DecBasicHandle().MaxInitLen, 24); yyrt3617 {
			yyrr3617 = yyrl3617
		}
		yyv3617 = make([]EndpointAddress, yyrl3617)
		yyc3617 = true
	}

	if yyl3617 == 0 {
		if len(yyv3617) != 0 {
			yyv3617 = yyv3617[:0]
			yyc3617 = true
		}
	} else if yyl3617 > 0 {

		if yyl3617 > cap(yyv3617) {
			yyrl3617, yyrt3617 = z.DecInferLen(yyl3617, z.DecBasicHandle().MaxInitLen, 24)
			yyv3617 = make([]EndpointAddress, yyrl3617)
			yyc3617 = true

			yyrr3617 = len(yyv3617)
		} else if yyl3617 != len(yyv3617) {
			yyv3617 = yyv3617[:yyl3617]
			yyc3617 = true
		}
		yyj3617 := 0
		for ; yyj3617 < yyrr3617; yyj3617++ {
			if r.TryDecodeAsNil() {
				yyv3617[yyj3617] = EndpointAddress{}
			} else {
				yyv3618 := &yyv3617[yyj3617]
				yyv3618.CodecDecodeSelf(d)
			}

		}
		if yyrt3617 {
			for ; yyj3617 < yyl3617; yyj3617++ {
				yyv3617 = append(yyv3617, EndpointAddress{})
				if r.TryDecodeAsNil() {
					yyv3617[yyj3617] = EndpointAddress{}
				} else {
					yyv3619 := &yyv3617[yyj3617]
					yyv3619.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3617 := 0; !r.CheckBreak(); yyj3617++ {
			if yyj3617 >= len(yyv3617) {
				yyv3617 = append(yyv3617, EndpointAddress{}) // var yyz3617 EndpointAddress
				yyc3617 = true
			}

			if yyj3617 < len(yyv3617) {
				if r.TryDecodeAsNil() {
					yyv3617[yyj3617] = EndpointAddress{}
				} else {
					yyv3620 := &yyv3617[yyj3617]
					yyv3620.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3617.End()
	}
	if yyc3617 {
		*v = yyv3617
	}

}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3621 := range v {
		yy3622 := &yyv3621
		yy3622.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3623 := *v
	yyh3623, yyl3623 := z.DecSliceHelperStart()

	var yyrr3623, yyrl3623 int
	var yyc3623, yyrt3623 bool
	_, _, _ = yyc3623, yyrt3623, yyrl3623
	yyrr3623 = yyl3623

	if yyv3623 == nil {
		if yyrl3623, yyrt3623 = z.DecInferLen(yyl3623, z.DecBasicHandle().MaxInitLen, 40); yyrt3623 {
			yyrr3623 = yyrl3623
		}
		yyv3623 = make([]EndpointPort, yyrl3623)
		yyc3623 = true
	}

	if yyl3623 == 0 {
		if len(yyv3623) != 0 {
			yyv3623 = yyv3623[:0]
			yyc3623 = true
		}
	} else if yyl3623 > 0 {

		if yyl3623 > cap(yyv3623) {
			yyrl3623, yyrt3623 = z.DecInferLen(yyl3623, z.DecBasicHandle().MaxInitLen, 40)
			yyv3623 = make([]EndpointPort, yyrl3623)
			yyc3623 = true

			yyrr3623 = len(yyv3623)
		} else if yyl3623 != len(yyv3623) {
			yyv3623 = yyv3623[:yyl3623]
			yyc3623 = true
		}
		yyj3623 := 0
		for ; yyj3623 < yyrr3623; yyj3623++ {
			if r.TryDecodeAsNil() {
				yyv3623[yyj3623] = EndpointPort{}
			} else {
				yyv3624 := &yyv3623[yyj3623]
				yyv3624.CodecDecodeSelf(d)
			}

		}
		if yyrt3623 {
			for ; yyj3623 < yyl3623; yyj3623++ {
				yyv3623 = append(yyv3623, EndpointPort{})
				if r.TryDecodeAsNil() {
					yyv3623[yyj3623] = EndpointPort{}
				} else {
					yyv3625 := &yyv3623[yyj3623]
					yyv3625.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3623 := 0; !r.CheckBreak(); yyj3623++ {
			if yyj3623 >= len(yyv3623) {
				yyv3623 = append(yyv3623, EndpointPort{}) // var yyz3623 EndpointPort
				yyc3623 = true
			}

			if yyj3623 < len(yyv3623) {
				if r.TryDecodeAsNil() {
					yyv3623[yyj3623] = EndpointPort{}
				} else {
					yyv3626 := &yyv3623[yyj3623]
					yyv3626.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3623.End()
	}
	if yyc3623 {
		*v = yyv3623
	}

}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3627 := range v {
		yy3628 := &yyv3627
		yy3628.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3629 := *v
	yyh3629, yyl3629 := z.DecSliceHelperStart()

	var yyrr3629, yyrl3629 int
	var yyc3629, yyrt3629 bool
	_, _, _ = yyc3629, yyrt3629, yyrl3629
	yyrr3629 = yyl3629

	if yyv3629 == nil {
		if yyrl3629, yyrt3629 = z.DecInferLen(yyl3629, z.DecBasicHandle().MaxInitLen, 216); yyrt3629 {
			yyrr3629 = yyrl3629
		}
		yyv3629 = make([]Endpoints, yyrl3629)
		yyc3629 = true
	}

	if yyl3629 == 0 {
		if len(yyv3629) != 0 {
			yyv3629 = yyv3629[:0]
			yyc3629 = true
		}
	} else if yyl3629 > 0 {

		if yyl3629 > cap(yyv3629) {
			yyrl3629, yyrt3629 = z.DecInferLen(yyl3629, z.DecBasicHandle().MaxInitLen, 216)
			yyv3629 = make([]Endpoints, yyrl3629)
			yyc3629 = true

			yyrr3629 = len(yyv3629)
		} else if yyl3629 != len(yyv3629) {
			yyv3629 = yyv3629[:yyl3629]
			yyc3629 = true
		}
		yyj3629 := 0
		for ; yyj3629 < yyrr3629; yyj3629++ {
			if r.TryDecodeAsNil() {
				yyv3629[yyj3629] = Endpoints{}
			} else {
				yyv3630 := &yyv3629[yyj3629]
				yyv3630.CodecDecodeSelf(d)
			}

		}
		if yyrt3629 {
			for ; yyj3629 < yyl3629; yyj3629++ {
				yyv3629 = append(yyv3629, Endpoints{})
				if r.TryDecodeAsNil() {
					yyv3629[yyj3629] = Endpoints{}
				} else {
					yyv3631 := &yyv3629[yyj3629]
					yyv3631.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3629 := 0; !r.CheckBreak(); yyj3629++ {
			if yyj3629 >= len(yyv3629) {
				yyv3629 = append(yyv3629, Endpoints{}) // var yyz3629 Endpoints
				yyc3629 = true
			}

			if yyj3629 < len(yyv3629) {
				if r.TryDecodeAsNil() {
					yyv3629[yyj3629] = Endpoints{}
				} else {
					yyv3632 := &yyv3629[yyj3629]
					yyv3632.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3629.End()
	}
	if yyc3629 {
		*v = yyv3629
	}

}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3633 := range v {
		yy3634 := &yyv3633
		yy3634.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3635 := *v
	yyh3635, yyl3635 := z.DecSliceHelperStart()

	var yyrr3635, yyrl3635 int
	var yyc3635, yyrt3635 bool
	_, _, _ = yyc3635, yyrt3635, yyrl3635
	yyrr3635 = yyl3635

	if yyv3635 == nil {
		if yyrl3635, yyrt3635 = z.DecInferLen(yyl3635, z.DecBasicHandle().MaxInitLen, 112); yyrt3635 {
			yyrr3635 = yyrl3635
		}
		yyv3635 = make([]NodeCondition, yyrl3635)
		yyc3635 = true
	}

	if yyl3635 == 0 {
		if len(yyv3635) != 0 {
			yyv3635 = yyv3635[:0]
			yyc3635 = true
		}
	} else if yyl3635 > 0 {

		if yyl3635 > cap(yyv3635) {
			yyrl3635, yyrt3635 = z.DecInferLen(yyl3635, z.DecBasicHandle().MaxInitLen, 112)
			yyv3635 = make([]NodeCondition, yyrl3635)
			yyc3635 = true

			yyrr3635 = len(yyv3635)
		} else if yyl3635 != len(yyv3635) {
			yyv3635 = yyv3635[:yyl3635]
			yyc3635 = true
		}
		yyj3635 := 0
		for ; yyj3635 < yyrr3635; yyj3635++ {
			if r.TryDecodeAsNil() {
				yyv3635[yyj3635] = NodeCondition{}
			} else {
				yyv3636 := &yyv3635[yyj3635]
				yyv3636.CodecDecodeSelf(d)
			}

		}
		if yyrt3635 {
			for ; yyj3635 < yyl3635; yyj3635++ {
				yyv3635 = append(yyv3635, NodeCondition{})
				if r.TryDecodeAsNil() {
					yyv3635[yyj3635] = NodeCondition{}
				} else {
					yyv3637 := &yyv3635[yyj3635]
					yyv3637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3635 := 0; !r.CheckBreak(); yyj3635++ {
			if yyj3635 >= len(yyv3635) {
				yyv3635 = append(yyv3635, NodeCondition{}) // var yyz3635 NodeCondition
				yyc3635 = true
			}

			if yyj3635 < len(yyv3635) {
				if r.TryDecodeAsNil() {
					yyv3635[yyj3635] = NodeCondition{}
				} else {
					yyv3638 := &yyv3635[yyj3635]
					yyv3638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3635.End()
	}
	if yyc3635 {
		*v = yyv3635
	}

}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3639 := range v {
		yy3640 := &yyv3639
		yy3640.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3641 := *v
	yyh3641, yyl3641 := z.DecSliceHelperStart()

	var yyrr3641, yyrl3641 int
	var yyc3641, yyrt3641 bool
	_, _, _ = yyc3641, yyrt3641, yyrl3641
	yyrr3641 = yyl3641

	if yyv3641 == nil {
		if yyrl3641, yyrt3641 = z.DecInferLen(yyl3641, z.DecBasicHandle().MaxInitLen, 32); yyrt3641 {
			yyrr3641 = yyrl3641
		}
		yyv3641 = make([]NodeAddress, yyrl3641)
		yyc3641 = true
	}

	if yyl3641 == 0 {
		if len(yyv3641) != 0 {
			yyv3641 = yyv3641[:0]
			yyc3641 = true
		}
	} else if yyl3641 > 0 {

		if yyl3641 > cap(yyv3641) {
			yyrl3641, yyrt3641 = z.DecInferLen(yyl3641, z.DecBasicHandle().MaxInitLen, 32)
			yyv3641 = make([]NodeAddress, yyrl3641)
			yyc3641 = true

			yyrr3641 = len(yyv3641)
		} else if yyl3641 != len(yyv3641) {
			yyv3641 = yyv3641[:yyl3641]
			yyc3641 = true
		}
		yyj3641 := 0
		for ; yyj3641 < yyrr3641; yyj3641++ {
			if r.TryDecodeAsNil() {
				yyv3641[yyj3641] = NodeAddress{}
			} else {
				yyv3642 := &yyv3641[yyj3641]
				yyv3642.CodecDecodeSelf(d)
			}

		}
		if yyrt3641 {
			for ; yyj3641 < yyl3641; yyj3641++ {
				yyv3641 = append(yyv3641, NodeAddress{})
				if r.TryDecodeAsNil() {
					yyv3641[yyj3641] = NodeAddress{}
				} else {
					yyv3643 := &yyv3641[yyj3641]
					yyv3643.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3641 := 0; !r.CheckBreak(); yyj3641++ {
			if yyj3641 >= len(yyv3641) {
				yyv3641 = append(yyv3641, NodeAddress{}) // var yyz3641 NodeAddress
				yyc3641 = true
			}

			if yyj3641 < len(yyv3641) {
				if r.TryDecodeAsNil() {
					yyv3641[yyj3641] = NodeAddress{}
				} else {
					yyv3644 := &yyv3641[yyj3641]
					yyv3644.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3641.End()
	}
	if yyc3641 {
		*v = yyv3641
	}

}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3645, yyv3645 := range v {
		yyk3645.CodecEncodeSelf(e)
		yy3646 := &yyv3645
		yym3647 := z.EncBinary()
		_ = yym3647
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3646) {
		} else if !yym3647 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3646)
		} else {
			z.EncFallback(yy3646)
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3648 := *v
	yyl3648 := r.ReadMapStart()
	yybh3648 := z.DecBasicHandle()
	if yyv3648 == nil {
		yyrl3648, _ := z.DecInferLen(yyl3648, yybh3648.MaxInitLen, 40)
		yyv3648 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3648)
		*v = yyv3648
	}
	var yymk3648 ResourceName
	var yymv3648 pkg3_resource.Quantity
	var yymg3648 bool
	if yybh3648.MapValueReset {
		yymg3648 = true
	}
	if yyl3648 > 0 {
		for yyj3648 := 0; yyj3648 < yyl3648; yyj3648++ {
			if r.TryDecodeAsNil() {
				yymk3648 = ""
			} else {
				yymk3648 = ResourceName(r.DecodeString())
			}

			if yymg3648 {
				yymv3648 = yyv3648[yymk3648]
			} else {
				yymv3648 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3648 = pkg3_resource.Quantity{}
			} else {
				yyv3650 := &yymv3648
				yym3651 := z.DecBinary()
				_ = yym3651
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3650) {
				} else if !yym3651 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3650)
				} else {
					z.DecFallback(yyv3650, false)
				}
			}

			if yyv3648 != nil {
				yyv3648[yymk3648] = yymv3648
			}
		}
	} else if yyl3648 < 0 {
		for yyj3648 := 0; !r.CheckBreak(); yyj3648++ {
			if r.TryDecodeAsNil() {
				yymk3648 = ""
			} else {
				yymk3648 = ResourceName(r.DecodeString())
			}

			if yymg3648 {
				yymv3648 = yyv3648[yymk3648]
			} else {
				yymv3648 = pkg3_resource.Quantity{}
			}
			if r.TryDecodeAsNil() {
				yymv3648 = pkg3_resource.Quantity{}
			} else {
				yyv3653 := &yymv3648
				yym3654 := z.DecBinary()
				_ = yym3654
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3653) {
				} else if !yym3654 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3653)
				} else {
					z.DecFallback(yyv3653, false)
				}
			}

			if yyv3648 != nil {
				yyv3648[yymk3648] = yymv3648
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3655 := range v {
		yy3656 := &yyv3655
		yy3656.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3657 := *v
	yyh3657, yyl3657 := z.DecSliceHelperStart()

	var yyrr3657, yyrl3657 int
	var yyc3657, yyrt3657 bool
	_, _, _ = yyc3657, yyrt3657, yyrl3657
	yyrr3657 = yyl3657

	if yyv3657 == nil {
		if yyrl3657, yyrt3657 = z.DecInferLen(yyl3657, z.DecBasicHandle().MaxInitLen, 456); yyrt3657 {
			yyrr3657 = yyrl3657
		}
		yyv3657 = make([]Node, yyrl3657)
		yyc3657 = true
	}

	if yyl3657 == 0 {
		if len(yyv3657) != 0 {
			yyv3657 = yyv3657[:0]
			yyc3657 = true
		}
	} else if yyl3657 > 0 {

		if yyl3657 > cap(yyv3657) {
			yyrl3657, yyrt3657 = z.DecInferLen(yyl3657, z.DecBasicHandle().MaxInitLen, 456)
			yyv3657 = make([]Node, yyrl3657)
			yyc3657 = true

			yyrr3657 = len(yyv3657)
		} else if yyl3657 != len(yyv3657) {
			yyv3657 = yyv3657[:yyl3657]
			yyc3657 = true
		}
		yyj3657 := 0
		for ; yyj3657 < yyrr3657; yyj3657++ {
			if r.TryDecodeAsNil() {
				yyv3657[yyj3657] = Node{}
			} else {
				yyv3658 := &yyv3657[yyj3657]
				yyv3658.CodecDecodeSelf(d)
			}

		}
		if yyrt3657 {
			for ; yyj3657 < yyl3657; yyj3657++ {
				yyv3657 = append(yyv3657, Node{})
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = Node{}
				} else {
					yyv3659 := &yyv3657[yyj3657]
					yyv3659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3657 := 0; !r.CheckBreak(); yyj3657++ {
			if yyj3657 >= len(yyv3657) {
				yyv3657 = append(yyv3657, Node{}) // var yyz3657 Node
				yyc3657 = true
			}

			if yyj3657 < len(yyv3657) {
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = Node{}
				} else {
					yyv3660 := &yyv3657[yyj3657]
					yyv3660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3657.End()
	}
	if yyc3657 {
		*v = yyv3657
	}

}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3661 := range v {
		yyv3661.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3662 := *v
	yyh3662, yyl3662 := z.DecSliceHelperStart()

	var yyrr3662, yyrl3662 int
	var yyc3662, yyrt3662 bool
	_, _, _ = yyc3662, yyrt3662, yyrl3662
	yyrr3662 = yyl3662

	if yyv3662 == nil {
		if yyrl3662, yyrt3662 = z.DecInferLen(yyl3662, z.DecBasicHandle().MaxInitLen, 16); yyrt3662 {
			yyrr3662 = yyrl3662
		}
		yyv3662 = make([]FinalizerName, yyrl3662)
		yyc3662 = true
	}

	if yyl3662 == 0 {
		if len(yyv3662) != 0 {
			yyv3662 = yyv3662[:0]
			yyc3662 = true
		}
	} else if yyl3662 > 0 {

		if yyl3662 > cap(yyv3662) {
			yyrl3662, yyrt3662 = z.DecInferLen(yyl3662, z.DecBasicHandle().MaxInitLen, 16)

			yyv23662 := yyv3662
			yyv3662 = make([]FinalizerName, yyrl3662)
			if len(yyv3662) > 0 {
				copy(yyv3662, yyv23662[:cap(yyv23662)])
			}
			yyc3662 = true

			yyrr3662 = len(yyv3662)
		} else if yyl3662 != len(yyv3662) {
			yyv3662 = yyv3662[:yyl3662]
			yyc3662 = true
		}
		yyj3662 := 0
		for ; yyj3662 < yyrr3662; yyj3662++ {
			if r.TryDecodeAsNil() {
				yyv3662[yyj3662] = ""
			} else {
				yyv3662[yyj3662] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3662 {
			for ; yyj3662 < yyl3662; yyj3662++ {
				yyv3662 = append(yyv3662, "")
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = ""
				} else {
					yyv3662[yyj3662] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		for yyj3662 := 0; !r.CheckBreak(); yyj3662++ {
			if yyj3662 >= len(yyv3662) {
				yyv3662 = append(yyv3662, "") // var yyz3662 FinalizerName
				yyc3662 = true
			}

			if yyj3662 < len(yyv3662) {
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = ""
				} else {
					yyv3662[yyj3662] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3662.End()
	}
	if yyc3662 {
		*v = yyv3662
	}

}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3666 := range v {
		yy3667 := &yyv3666
		yy3667.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3668 := *v
	yyh3668, yyl3668 := z.DecSliceHelperStart()

	var yyrr3668, yyrl3668 int
	var yyc3668, yyrt3668 bool
	_, _, _ = yyc3668, yyrt3668, yyrl3668
	yyrr3668 = yyl3668

	if yyv3668 == nil {
		if yyrl3668, yyrt3668 = z.DecInferLen(yyl3668, z.DecBasicHandle().MaxInitLen, 232); yyrt3668 {
			yyrr3668 = yyrl3668
		}
		yyv3668 = make([]Namespace, yyrl3668)
		yyc3668 = true
	}

	if yyl3668 == 0 {
		if len(yyv3668) != 0 {
			yyv3668 = yyv3668[:0]
			yyc3668 = true
		}
	} else if yyl3668 > 0 {

		if yyl3668 > cap(yyv3668) {
			yyrl3668, yyrt3668 = z.DecInferLen(yyl3668, z.DecBasicHandle().MaxInitLen, 232)
			yyv3668 = make([]Namespace, yyrl3668)
			yyc3668 = true

			yyrr3668 = len(yyv3668)
		} else if yyl3668 != len(yyv3668) {
			yyv3668 = yyv3668[:yyl3668]
			yyc3668 = true
		}
		yyj3668 := 0
		for ; yyj3668 < yyrr3668; yyj3668++ {
			if r.TryDecodeAsNil() {
				yyv3668[yyj3668] = Namespace{}
			} else {
				yyv3669 := &yyv3668[yyj3668]
				yyv3669.CodecDecodeSelf(d)
			}

		}
		if yyrt3668 {
			for ; yyj3668 < yyl3668; yyj3668++ {
				yyv3668 = append(yyv3668, Namespace{})
				if r.TryDecodeAsNil() {
					yyv3668[yyj3668] = Namespace{}
				} else {
					yyv3670 := &yyv3668[yyj3668]
					yyv3670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3668 := 0; !r.CheckBreak(); yyj3668++ {
			if yyj3668 >= len(yyv3668) {
				yyv3668 = append(yyv3668, Namespace{}) // var yyz3668 Namespace
				yyc3668 = true
			}

			if yyj3668 < len(yyv3668) {
				if r.TryDecodeAsNil() {
					yyv3668[yyj3668] = Namespace{}
				} else {
					yyv3671 := &yyv3668[yyj3668]
					yyv3671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3668.End()
	}
	if yyc3668 {
		*v = yyv3668
	}

}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3672 := range v {
		yy3673 := &yyv3672
		yy3673.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3674 := *v
	yyh3674, yyl3674 := z.DecSliceHelperStart()

	var yyrr3674, yyrl3674 int
	var yyc3674, yyrt3674 bool
	_, _, _ = yyc3674, yyrt3674, yyrl3674
	yyrr3674 = yyl3674

	if yyv3674 == nil {
		if yyrl3674, yyrt3674 = z.DecInferLen(yyl3674, z.DecBasicHandle().MaxInitLen, 424); yyrt3674 {
			yyrr3674 = yyrl3674
		}
		yyv3674 = make([]Event, yyrl3674)
		yyc3674 = true
	}

	if yyl3674 == 0 {
		if len(yyv3674) != 0 {
			yyv3674 = yyv3674[:0]
			yyc3674 = true
		}
	} else if yyl3674 > 0 {

		if yyl3674 > cap(yyv3674) {
			yyrl3674, yyrt3674 = z.DecInferLen(yyl3674, z.DecBasicHandle().MaxInitLen, 424)
			yyv3674 = make([]Event, yyrl3674)
			yyc3674 = true

			yyrr3674 = len(yyv3674)
		} else if yyl3674 != len(yyv3674) {
			yyv3674 = yyv3674[:yyl3674]
			yyc3674 = true
		}
		yyj3674 := 0
		for ; yyj3674 < yyrr3674; yyj3674++ {
			if r.TryDecodeAsNil() {
				yyv3674[yyj3674] = Event{}
			} else {
				yyv3675 := &yyv3674[yyj3674]
				yyv3675.CodecDecodeSelf(d)
			}

		}
		if yyrt3674 {
			for ; yyj3674 < yyl3674; yyj3674++ {
				yyv3674 = append(yyv3674, Event{})
				if r.TryDecodeAsNil() {
					yyv3674[yyj3674] = Event{}
				} else {
					yyv3676 := &yyv3674[yyj3674]
					yyv3676.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3674 := 0; !r.CheckBreak(); yyj3674++ {
			if yyj3674 >= len(yyv3674) {
				yyv3674 = append(yyv3674, Event{}) // var yyz3674 Event
				yyc3674 = true
			}

			if yyj3674 < len(yyv3674) {
				if r.TryDecodeAsNil() {
					yyv3674[yyj3674] = Event{}
				} else {
					yyv3677 := &yyv3674[yyj3674]
					yyv3677.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3674.End()
	}
	if yyc3674 {
		*v = yyv3674
	}

}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg8_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3678 := range v {
		if yyv3678 == nil {
			r.EncodeNil()
		} else {
			yym3679 := z.EncBinary()
			_ = yym3679
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3678) {
			} else {
				z.EncFallback(yyv3678)
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg8_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3680 := *v
	yyh3680, yyl3680 := z.DecSliceHelperStart()

	var yyrr3680, yyrl3680 int
	var yyc3680, yyrt3680 bool
	_, _, _ = yyc3680, yyrt3680, yyrl3680
	yyrr3680 = yyl3680

	if yyv3680 == nil {
		if yyrl3680, yyrt3680 = z.DecInferLen(yyl3680, z.DecBasicHandle().MaxInitLen, 16); yyrt3680 {
			yyrr3680 = yyrl3680
		}
		yyv3680 = make([]pkg8_runtime.Object, yyrl3680)
		yyc3680 = true
	}

	if yyl3680 == 0 {
		if len(yyv3680) != 0 {
			yyv3680 = yyv3680[:0]
			yyc3680 = true
		}
	} else if yyl3680 > 0 {

		if yyl3680 > cap(yyv3680) {
			yyrl3680, yyrt3680 = z.DecInferLen(yyl3680, z.DecBasicHandle().MaxInitLen, 16)
			yyv3680 = make([]pkg8_runtime.Object, yyrl3680)
			yyc3680 = true

			yyrr3680 = len(yyv3680)
		} else if yyl3680 != len(yyv3680) {
			yyv3680 = yyv3680[:yyl3680]
			yyc3680 = true
		}
		yyj3680 := 0
		for ; yyj3680 < yyrr3680; yyj3680++ {
			if r.TryDecodeAsNil() {
				yyv3680[yyj3680] = nil
			} else {
				yyv3681 := &yyv3680[yyj3680]
				yym3682 := z.DecBinary()
				_ = yym3682
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3681) {
				} else {
					z.DecFallback(yyv3681, true)
				}
			}

		}
		if yyrt3680 {
			for ; yyj3680 < yyl3680; yyj3680++ {
				yyv3680 = append(yyv3680, nil)
				if r.TryDecodeAsNil() {
					yyv3680[yyj3680] = nil
				} else {
					yyv3683 := &yyv3680[yyj3680]
					yym3684 := z.DecBinary()
					_ = yym3684
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3683) {
					} else {
						z.DecFallback(yyv3683, true)
					}
				}

			}
		}

	} else {
		for yyj3680 := 0; !r.CheckBreak(); yyj3680++ {
			if yyj3680 >= len(yyv3680) {
				yyv3680 = append(yyv3680, nil) // var yyz3680 pkg8_runtime.Object
				yyc3680 = true
			}

			if yyj3680 < len(yyv3680) {
				if r.TryDecodeAsNil() {
					yyv3680[yyj3680] = nil
				} else {
					yyv3685 := &yyv3680[yyj3680]
					yym3686 := z.DecBinary()
					_ = yym3686
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3685) {
					} else {
						z.DecFallback(yyv3685, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3680.End()
	}
	if yyc3680 {
		*v = yyv3680
	}

}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3687 := range v {
		yy3688 := &yyv3687
		yy3688.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3689 := *v
	yyh3689, yyl3689 := z.DecSliceHelperStart()

	var yyrr3689, yyrl3689 int
	var yyc3689, yyrt3689 bool
	_, _, _ = yyc3689, yyrt3689, yyrl3689
	yyrr3689 = yyl3689

	if yyv3689 == nil {
		if yyrl3689, yyrt3689 = z.DecInferLen(yyl3689, z.DecBasicHandle().MaxInitLen, 56); yyrt3689 {
			yyrr3689 = yyrl3689
		}
		yyv3689 = make([]LimitRangeItem, yyrl3689)
		yyc3689 = true
	}

	if yyl3689 == 0 {
		if len(yyv3689) != 0 {
			yyv3689 = yyv3689[:0]
			yyc3689 = true
		}
	} else if yyl3689 > 0 {

		if yyl3689 > cap(yyv3689) {
			yyrl3689, yyrt3689 = z.DecInferLen(yyl3689, z.DecBasicHandle().MaxInitLen, 56)
			yyv3689 = make([]LimitRangeItem, yyrl3689)
			yyc3689 = true

			yyrr3689 = len(yyv3689)
		} else if yyl3689 != len(yyv3689) {
			yyv3689 = yyv3689[:yyl3689]
			yyc3689 = true
		}
		yyj3689 := 0
		for ; yyj3689 < yyrr3689; yyj3689++ {
			if r.TryDecodeAsNil() {
				yyv3689[yyj3689] = LimitRangeItem{}
			} else {
				yyv3690 := &yyv3689[yyj3689]
				yyv3690.CodecDecodeSelf(d)
			}

		}
		if yyrt3689 {
			for ; yyj3689 < yyl3689; yyj3689++ {
				yyv3689 = append(yyv3689, LimitRangeItem{})
				if r.TryDecodeAsNil() {
					yyv3689[yyj3689] = LimitRangeItem{}
				} else {
					yyv3691 := &yyv3689[yyj3689]
					yyv3691.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3689 := 0; !r.CheckBreak(); yyj3689++ {
			if yyj3689 >= len(yyv3689) {
				yyv3689 = append(yyv3689, LimitRangeItem{}) // var yyz3689 LimitRangeItem
				yyc3689 = true
			}

			if yyj3689 < len(yyv3689) {
				if r.TryDecodeAsNil() {
					yyv3689[yyj3689] = LimitRangeItem{}
				} else {
					yyv3692 := &yyv3689[yyj3689]
					yyv3692.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3689.End()
	}
	if yyc3689 {
		*v = yyv3689
	}

}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3693 := range v {
		yy3694 := &yyv3693
		yy3694.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3695 := *v
	yyh3695, yyl3695 := z.DecSliceHelperStart()

	var yyrr3695, yyrl3695 int
	var yyc3695, yyrt3695 bool
	_, _, _ = yyc3695, yyrt3695, yyrl3695
	yyrr3695 = yyl3695

	if yyv3695 == nil {
		if yyrl3695, yyrt3695 = z.DecInferLen(yyl3695, z.DecBasicHandle().MaxInitLen, 216); yyrt3695 {
			yyrr3695 = yyrl3695
		}
		yyv3695 = make([]LimitRange, yyrl3695)
		yyc3695 = true
	}

	if yyl3695 == 0 {
		if len(yyv3695) != 0 {
			yyv3695 = yyv3695[:0]
			yyc3695 = true
		}
	} else if yyl3695 > 0 {

		if yyl3695 > cap(yyv3695) {
			yyrl3695, yyrt3695 = z.DecInferLen(yyl3695, z.DecBasicHandle().MaxInitLen, 216)
			yyv3695 = make([]LimitRange, yyrl3695)
			yyc3695 = true

			yyrr3695 = len(yyv3695)
		} else if yyl3695 != len(yyv3695) {
			yyv3695 = yyv3695[:yyl3695]
			yyc3695 = true
		}
		yyj3695 := 0
		for ; yyj3695 < yyrr3695; yyj3695++ {
			if r.TryDecodeAsNil() {
				yyv3695[yyj3695] = LimitRange{}
			} else {
				yyv3696 := &yyv3695[yyj3695]
				yyv3696.CodecDecodeSelf(d)
			}

		}
		if yyrt3695 {
			for ; yyj3695 < yyl3695; yyj3695++ {
				yyv3695 = append(yyv3695, LimitRange{})
				if r.TryDecodeAsNil() {
					yyv3695[yyj3695] = LimitRange{}
				} else {
					yyv3697 := &yyv3695[yyj3695]
					yyv3697.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3695 := 0; !r.CheckBreak(); yyj3695++ {
			if yyj3695 >= len(yyv3695) {
				yyv3695 = append(yyv3695, LimitRange{}) // var yyz3695 LimitRange
				yyc3695 = true
			}

			if yyj3695 < len(yyv3695) {
				if r.TryDecodeAsNil() {
					yyv3695[yyj3695] = LimitRange{}
				} else {
					yyv3698 := &yyv3695[yyj3695]
					yyv3698.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3695.End()
	}
	if yyc3695 {
		*v = yyv3695
	}

}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3699 := range v {
		yy3700 := &yyv3699
		yy3700.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3701 := *v
	yyh3701, yyl3701 := z.DecSliceHelperStart()

	var yyrr3701, yyrl3701 int
	var yyc3701, yyrt3701 bool
	_, _, _ = yyc3701, yyrt3701, yyrl3701
	yyrr3701 = yyl3701

	if yyv3701 == nil {
		if yyrl3701, yyrt3701 = z.DecInferLen(yyl3701, z.DecBasicHandle().MaxInitLen, 216); yyrt3701 {
			yyrr3701 = yyrl3701
		}
		yyv3701 = make([]ResourceQuota, yyrl3701)
		yyc3701 = true
	}

	if yyl3701 == 0 {
		if len(yyv3701) != 0 {
			yyv3701 = yyv3701[:0]
			yyc3701 = true
		}
	} else if yyl3701 > 0 {

		if yyl3701 > cap(yyv3701) {
			yyrl3701, yyrt3701 = z.DecInferLen(yyl3701, z.DecBasicHandle().MaxInitLen, 216)
			yyv3701 = make([]ResourceQuota, yyrl3701)
			yyc3701 = true

			yyrr3701 = len(yyv3701)
		} else if yyl3701 != len(yyv3701) {
			yyv3701 = yyv3701[:yyl3701]
			yyc3701 = true
		}
		yyj3701 := 0
		for ; yyj3701 < yyrr3701; yyj3701++ {
			if r.TryDecodeAsNil() {
				yyv3701[yyj3701] = ResourceQuota{}
			} else {
				yyv3702 := &yyv3701[yyj3701]
				yyv3702.CodecDecodeSelf(d)
			}

		}
		if yyrt3701 {
			for ; yyj3701 < yyl3701; yyj3701++ {
				yyv3701 = append(yyv3701, ResourceQuota{})
				if r.TryDecodeAsNil() {
					yyv3701[yyj3701] = ResourceQuota{}
				} else {
					yyv3703 := &yyv3701[yyj3701]
					yyv3703.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3701 := 0; !r.CheckBreak(); yyj3701++ {
			if yyj3701 >= len(yyv3701) {
				yyv3701 = append(yyv3701, ResourceQuota{}) // var yyz3701 ResourceQuota
				yyc3701 = true
			}

			if yyj3701 < len(yyv3701) {
				if r.TryDecodeAsNil() {
					yyv3701[yyj3701] = ResourceQuota{}
				} else {
					yyv3704 := &yyv3701[yyj3701]
					yyv3704.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3701.End()
	}
	if yyc3701 {
		*v = yyv3701
	}

}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3705, yyv3705 := range v {
		yym3706 := z.EncBinary()
		_ = yym3706
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3705))
		}
		if yyv3705 == nil {
			r.EncodeNil()
		} else {
			yym3707 := z.EncBinary()
			_ = yym3707
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3705))
			}
		}
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3708 := *v
	yyl3708 := r.ReadMapStart()
	yybh3708 := z.DecBasicHandle()
	if yyv3708 == nil {
		yyrl3708, _ := z.DecInferLen(yyl3708, yybh3708.MaxInitLen, 40)
		yyv3708 = make(map[string][]uint8, yyrl3708)
		*v = yyv3708
	}
	var yymk3708 string
	var yymv3708 []uint8
	var yymg3708 bool
	if yybh3708.MapValueReset {
		yymg3708 = true
	}
	if yyl3708 > 0 {
		for yyj3708 := 0; yyj3708 < yyl3708; yyj3708++ {
			if r.TryDecodeAsNil() {
				yymk3708 = ""
			} else {
				yymk3708 = string(r.DecodeString())
			}

			if yymg3708 {
				yymv3708 = yyv3708[yymk3708]
			} else {
				yymv3708 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3708 = nil
			} else {
				yyv3710 := &yymv3708
				yym3711 := z.DecBinary()
				_ = yym3711
				if false {
				} else {
					*yyv3710 = r.DecodeBytes(*(*[]byte)(yyv3710), false, false)
				}
			}

			if yyv3708 != nil {
				yyv3708[yymk3708] = yymv3708
			}
		}
	} else if yyl3708 < 0 {
		for yyj3708 := 0; !r.CheckBreak(); yyj3708++ {
			if r.TryDecodeAsNil() {
				yymk3708 = ""
			} else {
				yymk3708 = string(r.DecodeString())
			}

			if yymg3708 {
				yymv3708 = yyv3708[yymk3708]
			} else {
				yymv3708 = nil
			}
			if r.TryDecodeAsNil() {
				yymv3708 = nil
			} else {
				yyv3713 := &yymv3708
				yym3714 := z.DecBinary()
				_ = yym3714
				if false {
				} else {
					*yyv3713 = r.DecodeBytes(*(*[]byte)(yyv3713), false, false)
				}
			}

			if yyv3708 != nil {
				yyv3708[yymk3708] = yymv3708
			}
		}
		r.ReadEnd()
	} // else len==0: TODO: Should we clear map entries?
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3715 := range v {
		yy3716 := &yyv3715
		yy3716.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3717 := *v
	yyh3717, yyl3717 := z.DecSliceHelperStart()

	var yyrr3717, yyrl3717 int
	var yyc3717, yyrt3717 bool
	_, _, _ = yyc3717, yyrt3717, yyrl3717
	yyrr3717 = yyl3717

	if yyv3717 == nil {
		if yyrl3717, yyrt3717 = z.DecInferLen(yyl3717, z.DecBasicHandle().MaxInitLen, 216); yyrt3717 {
			yyrr3717 = yyrl3717
		}
		yyv3717 = make([]Secret, yyrl3717)
		yyc3717 = true
	}

	if yyl3717 == 0 {
		if len(yyv3717) != 0 {
			yyv3717 = yyv3717[:0]
			yyc3717 = true
		}
	} else if yyl3717 > 0 {

		if yyl3717 > cap(yyv3717) {
			yyrl3717, yyrt3717 = z.DecInferLen(yyl3717, z.DecBasicHandle().MaxInitLen, 216)
			yyv3717 = make([]Secret, yyrl3717)
			yyc3717 = true

			yyrr3717 = len(yyv3717)
		} else if yyl3717 != len(yyv3717) {
			yyv3717 = yyv3717[:yyl3717]
			yyc3717 = true
		}
		yyj3717 := 0
		for ; yyj3717 < yyrr3717; yyj3717++ {
			if r.TryDecodeAsNil() {
				yyv3717[yyj3717] = Secret{}
			} else {
				yyv3718 := &yyv3717[yyj3717]
				yyv3718.CodecDecodeSelf(d)
			}

		}
		if yyrt3717 {
			for ; yyj3717 < yyl3717; yyj3717++ {
				yyv3717 = append(yyv3717, Secret{})
				if r.TryDecodeAsNil() {
					yyv3717[yyj3717] = Secret{}
				} else {
					yyv3719 := &yyv3717[yyj3717]
					yyv3719.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3717 := 0; !r.CheckBreak(); yyj3717++ {
			if yyj3717 >= len(yyv3717) {
				yyv3717 = append(yyv3717, Secret{}) // var yyz3717 Secret
				yyc3717 = true
			}

			if yyj3717 < len(yyv3717) {
				if r.TryDecodeAsNil() {
					yyv3717[yyj3717] = Secret{}
				} else {
					yyv3720 := &yyv3717[yyj3717]
					yyv3720.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3717.End()
	}
	if yyc3717 {
		*v = yyv3717
	}

}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3721 := range v {
		yy3722 := &yyv3721
		yy3722.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3723 := *v
	yyh3723, yyl3723 := z.DecSliceHelperStart()

	var yyrr3723, yyrl3723 int
	var yyc3723, yyrt3723 bool
	_, _, _ = yyc3723, yyrt3723, yyrl3723
	yyrr3723 = yyl3723

	if yyv3723 == nil {
		if yyrl3723, yyrt3723 = z.DecInferLen(yyl3723, z.DecBasicHandle().MaxInitLen, 64); yyrt3723 {
			yyrr3723 = yyrl3723
		}
		yyv3723 = make([]ComponentCondition, yyrl3723)
		yyc3723 = true
	}

	if yyl3723 == 0 {
		if len(yyv3723) != 0 {
			yyv3723 = yyv3723[:0]
			yyc3723 = true
		}
	} else if yyl3723 > 0 {

		if yyl3723 > cap(yyv3723) {
			yyrl3723, yyrt3723 = z.DecInferLen(yyl3723, z.DecBasicHandle().MaxInitLen, 64)
			yyv3723 = make([]ComponentCondition, yyrl3723)
			yyc3723 = true

			yyrr3723 = len(yyv3723)
		} else if yyl3723 != len(yyv3723) {
			yyv3723 = yyv3723[:yyl3723]
			yyc3723 = true
		}
		yyj3723 := 0
		for ; yyj3723 < yyrr3723; yyj3723++ {
			if r.TryDecodeAsNil() {
				yyv3723[yyj3723] = ComponentCondition{}
			} else {
				yyv3724 := &yyv3723[yyj3723]
				yyv3724.CodecDecodeSelf(d)
			}

		}
		if yyrt3723 {
			for ; yyj3723 < yyl3723; yyj3723++ {
				yyv3723 = append(yyv3723, ComponentCondition{})
				if r.TryDecodeAsNil() {
					yyv3723[yyj3723] = ComponentCondition{}
				} else {
					yyv3725 := &yyv3723[yyj3723]
					yyv3725.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3723 := 0; !r.CheckBreak(); yyj3723++ {
			if yyj3723 >= len(yyv3723) {
				yyv3723 = append(yyv3723, ComponentCondition{}) // var yyz3723 ComponentCondition
				yyc3723 = true
			}

			if yyj3723 < len(yyv3723) {
				if r.TryDecodeAsNil() {
					yyv3723[yyj3723] = ComponentCondition{}
				} else {
					yyv3726 := &yyv3723[yyj3723]
					yyv3726.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3723.End()
	}
	if yyc3723 {
		*v = yyv3723
	}

}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3727 := range v {
		yy3728 := &yyv3727
		yy3728.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3729 := *v
	yyh3729, yyl3729 := z.DecSliceHelperStart()

	var yyrr3729, yyrl3729 int
	var yyc3729, yyrt3729 bool
	_, _, _ = yyc3729, yyrt3729, yyrl3729
	yyrr3729 = yyl3729

	if yyv3729 == nil {
		if yyrl3729, yyrt3729 = z.DecInferLen(yyl3729, z.DecBasicHandle().MaxInitLen, 216); yyrt3729 {
			yyrr3729 = yyrl3729
		}
		yyv3729 = make([]ComponentStatus, yyrl3729)
		yyc3729 = true
	}

	if yyl3729 == 0 {
		if len(yyv3729) != 0 {
			yyv3729 = yyv3729[:0]
			yyc3729 = true
		}
	} else if yyl3729 > 0 {

		if yyl3729 > cap(yyv3729) {
			yyrl3729, yyrt3729 = z.DecInferLen(yyl3729, z.DecBasicHandle().MaxInitLen, 216)
			yyv3729 = make([]ComponentStatus, yyrl3729)
			yyc3729 = true

			yyrr3729 = len(yyv3729)
		} else if yyl3729 != len(yyv3729) {
			yyv3729 = yyv3729[:yyl3729]
			yyc3729 = true
		}
		yyj3729 := 0
		for ; yyj3729 < yyrr3729; yyj3729++ {
			if r.TryDecodeAsNil() {
				yyv3729[yyj3729] = ComponentStatus{}
			} else {
				yyv3730 := &yyv3729[yyj3729]
				yyv3730.CodecDecodeSelf(d)
			}

		}
		if yyrt3729 {
			for ; yyj3729 < yyl3729; yyj3729++ {
				yyv3729 = append(yyv3729, ComponentStatus{})
				if r.TryDecodeAsNil() {
					yyv3729[yyj3729] = ComponentStatus{}
				} else {
					yyv3731 := &yyv3729[yyj3729]
					yyv3731.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj3729 := 0; !r.CheckBreak(); yyj3729++ {
			if yyj3729 >= len(yyv3729) {
				yyv3729 = append(yyv3729, ComponentStatus{}) // var yyz3729 ComponentStatus
				yyc3729 = true
			}

			if yyj3729 < len(yyv3729) {
				if r.TryDecodeAsNil() {
					yyv3729[yyj3729] = ComponentStatus{}
				} else {
					yyv3732 := &yyv3729[yyj3729]
					yyv3732.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh3729.End()
	}
	if yyc3729 {
		*v = yyv3729
	}

}
