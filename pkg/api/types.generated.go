/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.Object
		var v3 pkg1_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct103 := r.ContainerType()
		if yyct103 == codecSelferValueTypeMap1234 {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if yyct103 == codecSelferValueTypeArray1234 {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			var yynn141 int
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				yynn141 = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
				yynn141 = 0
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct159 := r.ContainerType()
		if yyct159 == codecSelferValueTypeMap1234 {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if yyct159 == codecSelferValueTypeArray1234 {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [11]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[0] = x.GCEPersistentDisk != nil
			yyq195[1] = x.AWSElasticBlockStore != nil
			yyq195[2] = x.HostPath != nil
			yyq195[3] = x.Glusterfs != nil
			yyq195[4] = x.NFS != nil
			yyq195[5] = x.RBD != nil
			yyq195[6] = x.ISCSI != nil
			yyq195[7] = x.Cinder != nil
			yyq195[8] = x.CephFS != nil
			yyq195[9] = x.FC != nil
			yyq195[10] = x.Flocker != nil
			var yynn195 int
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(11)
			} else {
				yynn195 = 0
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
				yynn195 = 0
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct208 := r.ContainerType()
		if yyct208 == codecSelferValueTypeMap1234 {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if yyct208 == codecSelferValueTypeArray1234 {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys209 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym233 := z.EncBinary()
		_ = yym233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep234 := !z.EncBinary()
			yy2arr234 := z.EncBasicHandle().StructToArray
			var yyq234 [2]bool
			_, _, _ = yysep234, yyq234, yy2arr234
			const yyr234 bool = false
			yyq234[1] = x.ReadOnly != false
			var yynn234 int
			if yyr234 || yy2arr234 {
				r.EncodeArrayStart(2)
			} else {
				yynn234 = 1
				for _, b := range yyq234 {
					if b {
						yynn234++
					}
				}
				r.EncodeMapStart(yynn234)
				yynn234 = 0
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym237 := z.EncBinary()
				_ = yym237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq234[1] {
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq234[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct242 := r.ContainerType()
		if yyct242 == codecSelferValueTypeMap1234 {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if yyct242 == codecSelferValueTypeArray1234 {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys243 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				yynn250 = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct267 := r.ContainerType()
		if yyct267 == codecSelferValueTypeMap1234 {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if yyct267 == codecSelferValueTypeArray1234 {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			var yynn281 int
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				yynn281 = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
				yynn281 = 0
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct300 := r.ContainerType()
		if yyct300 == codecSelferValueTypeMap1234 {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if yyct300 == codecSelferValueTypeArray1234 {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			var yynn338 int
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				yynn338 = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
				yynn338 = 0
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct347 := r.ContainerType()
		if yyct347 == codecSelferValueTypeMap1234 {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if yyct347 == codecSelferValueTypeArray1234 {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			var yynn357 int
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				yynn357 = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
				yynn357 = 0
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct373 := r.ContainerType()
		if yyct373 == codecSelferValueTypeMap1234 {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if yyct373 == codecSelferValueTypeArray1234 {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			var yynn389 int
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				yynn389 = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
				yynn389 = 0
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct406 := r.ContainerType()
		if yyct406 == codecSelferValueTypeMap1234 {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if yyct406 == codecSelferValueTypeArray1234 {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			var yynn420 int
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				yynn420 = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
				yynn420 = 0
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct436 := r.ContainerType()
		if yyct436 == codecSelferValueTypeMap1234 {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if yyct436 == codecSelferValueTypeArray1234 {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			var yynn452 int
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				yynn452 = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
				yynn452 = 0
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct463 := r.ContainerType()
		if yyct463 == codecSelferValueTypeMap1234 {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if yyct463 == codecSelferValueTypeArray1234 {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			var yynn475 int
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				yynn475 = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
				yynn475 = 0
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			var yynn500 int
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				yynn500 = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
				yynn500 = 0
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct505 := r.ContainerType()
		if yyct505 == codecSelferValueTypeMap1234 {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if yyct505 == codecSelferValueTypeArray1234 {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			var yynn511 int
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				yynn511 = 1
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
				yynn511 = 0
			}
			if yyr511 || yy2arr511 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Medium.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("medium"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Medium.CodecEncodeSelf(e)
			}
			if yyr511 || yy2arr511 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct514 := r.ContainerType()
		if yyct514 == codecSelferValueTypeMap1234 {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if yyct514 == codecSelferValueTypeArray1234 {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [4]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[1] = x.FSType != ""
			yyq524[2] = x.Partition != 0
			yyq524[3] = x.ReadOnly != false
			var yynn524 int
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(4)
			} else {
				yynn524 = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
				yynn524 = 0
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[1] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[2] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq524[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[3] {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq524[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct538 := r.ContainerType()
		if yyct538 == codecSelferValueTypeMap1234 {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if yyct538 == codecSelferValueTypeArray1234 {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys539 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [5]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.TargetPortal != ""
			yyq550[1] = x.IQN != ""
			yyq550[2] = x.Lun != 0
			yyq550[3] = x.FSType != ""
			yyq550[4] = x.ReadOnly != false
			var yynn550 int
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(5)
			} else {
				yynn550 = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
				yynn550 = 0
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[0] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[1] {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[2] {
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq550[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[3] {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[4] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq550[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct567 := r.ContainerType()
		if yyct567 == codecSelferValueTypeMap1234 {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if yyct567 == codecSelferValueTypeArray1234 {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys568 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj574 int
	var yyb574 bool
	var yyhl574 bool = l >= 0
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj574++
		if yyhl574 {
			yyb574 = yyj574 > l
		} else {
			yyb574 = r.CheckBreak()
		}
		if yyb574 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj574-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym580 := z.EncBinary()
		_ = yym580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep581 := !z.EncBinary()
			yy2arr581 := z.EncBasicHandle().StructToArray
			var yyq581 [4]bool
			_, _, _ = yysep581, yyq581, yy2arr581
			const yyr581 bool = false
			yyq581[3] = x.ReadOnly != false
			var yynn581 int
			if yyr581 || yy2arr581 {
				r.EncodeArrayStart(4)
			} else {
				yynn581 = 3
				for _, b := range yyq581 {
					if b {
						yynn581++
					}
				}
				r.EncodeMapStart(yynn581)
				yynn581 = 0
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy586 := *x.Lun
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeInt(int64(yy586))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy588 := *x.Lun
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						r.EncodeInt(int64(yy588))
					}
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym592 := z.EncBinary()
				_ = yym592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq581[3] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq581[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr581 || yy2arr581 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct597 := r.ContainerType()
		if yyct597 == codecSelferValueTypeMap1234 {
			yyl597 := r.ReadMapStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl597, d)
			}
		} else if yyct597 == codecSelferValueTypeArray1234 {
			yyl597 := r.ReadArrayStart()
			if yyl597 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl597, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys598Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys598Slc
	var yyhl598 bool = l >= 0
	for yyj598 := 0; ; yyj598++ {
		if yyhl598 {
			if yyj598 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys598Slc = r.DecodeBytes(yys598Slc, true, true)
		yys598 := string(yys598Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys598 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv599 := &x.TargetWWNs
				yym600 := z.DecBinary()
				_ = yym600
				if false {
				} else {
					z.F.DecSliceStringX(yyv599, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys598)
		} // end switch yys598
	} // end for yyj598
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj605 int
	var yyb605 bool
	var yyhl605 bool = l >= 0
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv606 := &x.TargetWWNs
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			z.F.DecSliceStringX(yyv606, false, d)
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym609 := z.DecBinary()
		_ = yym609
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj605++
	if yyhl605 {
		yyb605 = yyj605 > l
	} else {
		yyb605 = r.CheckBreak()
	}
	if yyb605 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj605++
		if yyhl605 {
			yyb605 = yyj605 > l
		} else {
			yyb605 = r.CheckBreak()
		}
		if yyb605 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj605-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym612 := z.EncBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep613 := !z.EncBinary()
			yy2arr613 := z.EncBasicHandle().StructToArray
			var yyq613 [4]bool
			_, _, _ = yysep613, yyq613, yy2arr613
			const yyr613 bool = false
			yyq613[1] = x.FSType != ""
			yyq613[2] = x.Partition != 0
			yyq613[3] = x.ReadOnly != false
			var yynn613 int
			if yyr613 || yy2arr613 {
				r.EncodeArrayStart(4)
			} else {
				yynn613 = 1
				for _, b := range yyq613 {
					if b {
						yynn613++
					}
				}
				r.EncodeMapStart(yynn613)
				yynn613 = 0
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym616 := z.EncBinary()
				_ = yym616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[1] {
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq613[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[2] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq613[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq613[3] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq613[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr613 || yy2arr613 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct627 := r.ContainerType()
		if yyct627 == codecSelferValueTypeMap1234 {
			yyl627 := r.ReadMapStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl627, d)
			}
		} else if yyct627 == codecSelferValueTypeArray1234 {
			yyl627 := r.ReadArrayStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys628Slc
	var yyhl628 bool = l >= 0
	for yyj628 := 0; ; yyj628++ {
		if yyhl628 {
			if yyj628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys628Slc = r.DecodeBytes(yys628Slc, true, true)
		yys628 := string(yys628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys628 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys628)
		} // end switch yys628
	} // end for yyj628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym638 := z.EncBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep639 := !z.EncBinary()
			yy2arr639 := z.EncBasicHandle().StructToArray
			var yyq639 [3]bool
			_, _, _ = yysep639, yyq639, yy2arr639
			const yyr639 bool = false
			yyq639[1] = x.Revision != ""
			yyq639[2] = x.Directory != ""
			var yynn639 int
			if yyr639 || yy2arr639 {
				r.EncodeArrayStart(3)
			} else {
				yynn639 = 1
				for _, b := range yyq639 {
					if b {
						yynn639++
					}
				}
				r.EncodeMapStart(yynn639)
				yynn639 = 0
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym641 := z.EncBinary()
				_ = yym641
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym642 := z.EncBinary()
				_ = yym642
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq639[1] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq639[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq639[2] {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq639[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr639 || yy2arr639 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym649 := z.DecBinary()
	_ = yym649
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct650 := r.ContainerType()
		if yyct650 == codecSelferValueTypeMap1234 {
			yyl650 := r.ReadMapStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl650, d)
			}
		} else if yyct650 == codecSelferValueTypeArray1234 {
			yyl650 := r.ReadArrayStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl650, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys651Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys651Slc
	var yyhl651 bool = l >= 0
	for yyj651 := 0; ; yyj651++ {
		if yyhl651 {
			if yyj651 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys651Slc = r.DecodeBytes(yys651Slc, true, true)
		yys651 := string(yys651Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys651 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys651)
		} // end switch yys651
	} // end for yyj651
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj655 int
	var yyb655 bool
	var yyhl655 bool = l >= 0
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj655++
		if yyhl655 {
			yyb655 = yyj655 > l
		} else {
			yyb655 = r.CheckBreak()
		}
		if yyb655 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj655-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym659 := z.EncBinary()
		_ = yym659
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep660 := !z.EncBinary()
			yy2arr660 := z.EncBasicHandle().StructToArray
			var yyq660 [1]bool
			_, _, _ = yysep660, yyq660, yy2arr660
			const yyr660 bool = false
			var yynn660 int
			if yyr660 || yy2arr660 {
				r.EncodeArrayStart(1)
			} else {
				yynn660 = 1
				for _, b := range yyq660 {
					if b {
						yynn660++
					}
				}
				r.EncodeMapStart(yynn660)
				yynn660 = 0
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym662 := z.EncBinary()
				_ = yym662
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr660 || yy2arr660 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym664 := z.DecBinary()
	_ = yym664
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct665 := r.ContainerType()
		if yyct665 == codecSelferValueTypeMap1234 {
			yyl665 := r.ReadMapStart()
			if yyl665 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl665, d)
			}
		} else if yyct665 == codecSelferValueTypeArray1234 {
			yyl665 := r.ReadArrayStart()
			if yyl665 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl665, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys666Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys666Slc
	var yyhl666 bool = l >= 0
	for yyj666 := 0; ; yyj666++ {
		if yyhl666 {
			if yyj666 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys666Slc = r.DecodeBytes(yys666Slc, true, true)
		yys666 := string(yys666Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys666 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys666)
		} // end switch yys666
	} // end for yyj666
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj668 int
	var yyb668 bool
	var yyhl668 bool = l >= 0
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj668++
		if yyhl668 {
			yyb668 = yyj668 > l
		} else {
			yyb668 = r.CheckBreak()
		}
		if yyb668 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj668-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym670 := z.EncBinary()
		_ = yym670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep671 := !z.EncBinary()
			yy2arr671 := z.EncBasicHandle().StructToArray
			var yyq671 [3]bool
			_, _, _ = yysep671, yyq671, yy2arr671
			const yyr671 bool = false
			yyq671[2] = x.ReadOnly != false
			var yynn671 int
			if yyr671 || yy2arr671 {
				r.EncodeArrayStart(3)
			} else {
				yynn671 = 2
				for _, b := range yyq671 {
					if b {
						yynn671++
					}
				}
				r.EncodeMapStart(yynn671)
				yynn671 = 0
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym673 := z.EncBinary()
				_ = yym673
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym674 := z.EncBinary()
				_ = yym674
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym676 := z.EncBinary()
				_ = yym676
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym677 := z.EncBinary()
				_ = yym677
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq671[2] {
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq671[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr671 || yy2arr671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym681 := z.DecBinary()
	_ = yym681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct682 := r.ContainerType()
		if yyct682 == codecSelferValueTypeMap1234 {
			yyl682 := r.ReadMapStart()
			if yyl682 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl682, d)
			}
		} else if yyct682 == codecSelferValueTypeArray1234 {
			yyl682 := r.ReadArrayStart()
			if yyl682 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys683Slc
	var yyhl683 bool = l >= 0
	for yyj683 := 0; ; yyj683++ {
		if yyhl683 {
			if yyj683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys683Slc = r.DecodeBytes(yys683Slc, true, true)
		yys683 := string(yys683Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys683 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys683)
		} // end switch yys683
	} // end for yyj683
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj687 int
	var yyb687 bool
	var yyhl687 bool = l >= 0
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj687++
		if yyhl687 {
			yyb687 = yyj687 > l
		} else {
			yyb687 = r.CheckBreak()
		}
		if yyb687 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj687-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym691 := z.EncBinary()
		_ = yym691
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep692 := !z.EncBinary()
			yy2arr692 := z.EncBasicHandle().StructToArray
			var yyq692 [3]bool
			_, _, _ = yysep692, yyq692, yy2arr692
			const yyr692 bool = false
			yyq692[2] = x.ReadOnly != false
			var yynn692 int
			if yyr692 || yy2arr692 {
				r.EncodeArrayStart(3)
			} else {
				yynn692 = 2
				for _, b := range yyq692 {
					if b {
						yynn692++
					}
				}
				r.EncodeMapStart(yynn692)
				yynn692 = 0
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym694 := z.EncBinary()
				_ = yym694
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym695 := z.EncBinary()
				_ = yym695
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym697 := z.EncBinary()
				_ = yym697
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym698 := z.EncBinary()
				_ = yym698
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq692[2] {
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq692[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr692 || yy2arr692 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym702 := z.DecBinary()
	_ = yym702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct703 := r.ContainerType()
		if yyct703 == codecSelferValueTypeMap1234 {
			yyl703 := r.ReadMapStart()
			if yyl703 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl703, d)
			}
		} else if yyct703 == codecSelferValueTypeArray1234 {
			yyl703 := r.ReadArrayStart()
			if yyl703 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys704Slc
	var yyhl704 bool = l >= 0
	for yyj704 := 0; ; yyj704++ {
		if yyhl704 {
			if yyj704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys704Slc = r.DecodeBytes(yys704Slc, true, true)
		yys704 := string(yys704Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys704 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys704)
		} // end switch yys704
	} // end for yyj704
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj708 int
	var yyb708 bool
	var yyhl708 bool = l >= 0
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj708++
		if yyhl708 {
			yyb708 = yyj708 > l
		} else {
			yyb708 = r.CheckBreak()
		}
		if yyb708 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj708-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym712 := z.EncBinary()
		_ = yym712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep713 := !z.EncBinary()
			yy2arr713 := z.EncBasicHandle().StructToArray
			var yyq713 [8]bool
			_, _, _ = yysep713, yyq713, yy2arr713
			const yyr713 bool = false
			yyq713[2] = x.FSType != ""
			yyq713[7] = x.ReadOnly != false
			var yynn713 int
			if yyr713 || yy2arr713 {
				r.EncodeArrayStart(8)
			} else {
				yynn713 = 6
				for _, b := range yyq713 {
					if b {
						yynn713++
					}
				}
				r.EncodeMapStart(yynn713)
				yynn713 = 0
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym718 := z.EncBinary()
				_ = yym718
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym719 := z.EncBinary()
				_ = yym719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq713[2] {
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq713[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym722 := z.EncBinary()
					_ = yym722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym725 := z.EncBinary()
				_ = yym725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym727 := z.EncBinary()
				_ = yym727
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym728 := z.EncBinary()
				_ = yym728
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym730 := z.EncBinary()
				_ = yym730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym731 := z.EncBinary()
				_ = yym731
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq713[7] {
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq713[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym736 := z.DecBinary()
	_ = yym736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct737 := r.ContainerType()
		if yyct737 == codecSelferValueTypeMap1234 {
			yyl737 := r.ReadMapStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl737, d)
			}
		} else if yyct737 == codecSelferValueTypeArray1234 {
			yyl737 := r.ReadArrayStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys738Slc
	var yyhl738 bool = l >= 0
	for yyj738 := 0; ; yyj738++ {
		if yyhl738 {
			if yyj738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys738Slc = r.DecodeBytes(yys738Slc, true, true)
		yys738 := string(yys738Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys738 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv739 := &x.CephMonitors
				yym740 := z.DecBinary()
				_ = yym740
				if false {
				} else {
					z.F.DecSliceStringX(yyv739, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys738)
		} // end switch yys738
	} // end for yyj738
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj748 int
	var yyb748 bool
	var yyhl748 bool = l >= 0
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv749 := &x.CephMonitors
		yym750 := z.DecBinary()
		_ = yym750
		if false {
		} else {
			z.F.DecSliceStringX(yyv749, false, d)
		}
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj748++
	if yyhl748 {
		yyb748 = yyj748 > l
	} else {
		yyb748 = r.CheckBreak()
	}
	if yyb748 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj748++
		if yyhl748 {
			yyb748 = yyj748 > l
		} else {
			yyb748 = r.CheckBreak()
		}
		if yyb748 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj748-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym758 := z.EncBinary()
		_ = yym758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep759 := !z.EncBinary()
			yy2arr759 := z.EncBasicHandle().StructToArray
			var yyq759 [3]bool
			_, _, _ = yysep759, yyq759, yy2arr759
			const yyr759 bool = false
			yyq759[1] = x.FSType != ""
			yyq759[2] = x.ReadOnly != false
			var yynn759 int
			if yyr759 || yy2arr759 {
				r.EncodeArrayStart(3)
			} else {
				yynn759 = 1
				for _, b := range yyq759 {
					if b {
						yynn759++
					}
				}
				r.EncodeMapStart(yynn759)
				yynn759 = 0
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym761 := z.EncBinary()
				_ = yym761
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[1] {
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq759[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq759[2] {
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq759[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym769 := z.DecBinary()
	_ = yym769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct770 := r.ContainerType()
		if yyct770 == codecSelferValueTypeMap1234 {
			yyl770 := r.ReadMapStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl770, d)
			}
		} else if yyct770 == codecSelferValueTypeArray1234 {
			yyl770 := r.ReadArrayStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys771Slc
	var yyhl771 bool = l >= 0
	for yyj771 := 0; ; yyj771++ {
		if yyhl771 {
			if yyj771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys771Slc = r.DecodeBytes(yys771Slc, true, true)
		yys771 := string(yys771Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys771 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys771)
		} // end switch yys771
	} // end for yyj771
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj775 int
	var yyb775 bool
	var yyhl775 bool = l >= 0
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj775++
		if yyhl775 {
			yyb775 = yyj775 > l
		} else {
			yyb775 = r.CheckBreak()
		}
		if yyb775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym779 := z.EncBinary()
		_ = yym779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep780 := !z.EncBinary()
			yy2arr780 := z.EncBasicHandle().StructToArray
			var yyq780 [5]bool
			_, _, _ = yysep780, yyq780, yy2arr780
			const yyr780 bool = false
			yyq780[1] = x.User != ""
			yyq780[2] = x.SecretFile != ""
			yyq780[3] = x.SecretRef != nil
			yyq780[4] = x.ReadOnly != false
			var yynn780 int
			if yyr780 || yy2arr780 {
				r.EncodeArrayStart(5)
			} else {
				yynn780 = 1
				for _, b := range yyq780 {
					if b {
						yynn780++
					}
				}
				r.EncodeMapStart(yynn780)
				yynn780 = 0
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[1] {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[2] {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq780[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym789 := z.EncBinary()
					_ = yym789
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq780[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[4] {
					yym792 := z.EncBinary()
					_ = yym792
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq780[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym794 := z.DecBinary()
	_ = yym794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct795 := r.ContainerType()
		if yyct795 == codecSelferValueTypeMap1234 {
			yyl795 := r.ReadMapStart()
			if yyl795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl795, d)
			}
		} else if yyct795 == codecSelferValueTypeArray1234 {
			yyl795 := r.ReadArrayStart()
			if yyl795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys796Slc
	var yyhl796 bool = l >= 0
	for yyj796 := 0; ; yyj796++ {
		if yyhl796 {
			if yyj796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys796Slc = r.DecodeBytes(yys796Slc, true, true)
		yys796 := string(yys796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys796 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv797 := &x.Monitors
				yym798 := z.DecBinary()
				_ = yym798
				if false {
				} else {
					z.F.DecSliceStringX(yyv797, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys796)
		} // end switch yys796
	} // end for yyj796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj803 int
	var yyb803 bool
	var yyhl803 bool = l >= 0
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv804 := &x.Monitors
		yym805 := z.DecBinary()
		_ = yym805
		if false {
		} else {
			z.F.DecSliceStringX(yyv804, false, d)
		}
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj803++
		if yyhl803 {
			yyb803 = yyj803 > l
		} else {
			yyb803 = r.CheckBreak()
		}
		if yyb803 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj803-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym810 := z.EncBinary()
		_ = yym810
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep811 := !z.EncBinary()
			yy2arr811 := z.EncBasicHandle().StructToArray
			var yyq811 [1]bool
			_, _, _ = yysep811, yyq811, yy2arr811
			const yyr811 bool = false
			var yynn811 int
			if yyr811 || yy2arr811 {
				r.EncodeArrayStart(1)
			} else {
				yynn811 = 1
				for _, b := range yyq811 {
					if b {
						yynn811++
					}
				}
				r.EncodeMapStart(yynn811)
				yynn811 = 0
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym813 := z.EncBinary()
				_ = yym813
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym814 := z.EncBinary()
				_ = yym814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym815 := z.DecBinary()
	_ = yym815
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct816 := r.ContainerType()
		if yyct816 == codecSelferValueTypeMap1234 {
			yyl816 := r.ReadMapStart()
			if yyl816 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl816, d)
			}
		} else if yyct816 == codecSelferValueTypeArray1234 {
			yyl816 := r.ReadArrayStart()
			if yyl816 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl816, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys817Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys817Slc
	var yyhl817 bool = l >= 0
	for yyj817 := 0; ; yyj817++ {
		if yyhl817 {
			if yyj817 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys817Slc = r.DecodeBytes(yys817Slc, true, true)
		yys817 := string(yys817Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys817 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys817)
		} // end switch yys817
	} // end for yyj817
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj819 int
	var yyb819 bool
	var yyhl819 bool = l >= 0
	yyj819++
	if yyhl819 {
		yyb819 = yyj819 > l
	} else {
		yyb819 = r.CheckBreak()
	}
	if yyb819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj819++
		if yyhl819 {
			yyb819 = yyj819 > l
		} else {
			yyb819 = r.CheckBreak()
		}
		if yyb819 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj819-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym821 := z.EncBinary()
		_ = yym821
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep822 := !z.EncBinary()
			yy2arr822 := z.EncBasicHandle().StructToArray
			var yyq822 [1]bool
			_, _, _ = yysep822, yyq822, yy2arr822
			const yyr822 bool = false
			yyq822[0] = len(x.Items) != 0
			var yynn822 int
			if yyr822 || yy2arr822 {
				r.EncodeArrayStart(1)
			} else {
				yynn822 = 0
				for _, b := range yyq822 {
					if b {
						yynn822++
					}
				}
				r.EncodeMapStart(yynn822)
				yynn822 = 0
			}
			if yyr822 || yy2arr822 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq822[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym824 := z.EncBinary()
						_ = yym824
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq822[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym825 := z.EncBinary()
						_ = yym825
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr822 || yy2arr822 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym826 := z.DecBinary()
	_ = yym826
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct827 := r.ContainerType()
		if yyct827 == codecSelferValueTypeMap1234 {
			yyl827 := r.ReadMapStart()
			if yyl827 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl827, d)
			}
		} else if yyct827 == codecSelferValueTypeArray1234 {
			yyl827 := r.ReadArrayStart()
			if yyl827 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl827, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys828Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys828Slc
	var yyhl828 bool = l >= 0
	for yyj828 := 0; ; yyj828++ {
		if yyhl828 {
			if yyj828 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys828Slc = r.DecodeBytes(yys828Slc, true, true)
		yys828 := string(yys828Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys828 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv829 := &x.Items
				yym830 := z.DecBinary()
				_ = yym830
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv829), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys828)
		} // end switch yys828
	} // end for yyj828
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj831 int
	var yyb831 bool
	var yyhl831 bool = l >= 0
	yyj831++
	if yyhl831 {
		yyb831 = yyj831 > l
	} else {
		yyb831 = r.CheckBreak()
	}
	if yyb831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv832 := &x.Items
		yym833 := z.DecBinary()
		_ = yym833
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv832), d)
		}
	}
	for {
		yyj831++
		if yyhl831 {
			yyb831 = yyj831 > l
		} else {
			yyb831 = r.CheckBreak()
		}
		if yyb831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym834 := z.EncBinary()
		_ = yym834
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep835 := !z.EncBinary()
			yy2arr835 := z.EncBasicHandle().StructToArray
			var yyq835 [2]bool
			_, _, _ = yysep835, yyq835, yy2arr835
			const yyr835 bool = false
			var yynn835 int
			if yyr835 || yy2arr835 {
				r.EncodeArrayStart(2)
			} else {
				yynn835 = 2
				for _, b := range yyq835 {
					if b {
						yynn835++
					}
				}
				r.EncodeMapStart(yynn835)
				yynn835 = 0
			}
			if yyr835 || yy2arr835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym837 := z.EncBinary()
				_ = yym837
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym838 := z.EncBinary()
				_ = yym838
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr835 || yy2arr835 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy840 := &x.FieldRef
				yy840.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy841 := &x.FieldRef
				yy841.CodecEncodeSelf(e)
			}
			if yyr835 || yy2arr835 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym842 := z.DecBinary()
	_ = yym842
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct843 := r.ContainerType()
		if yyct843 == codecSelferValueTypeMap1234 {
			yyl843 := r.ReadMapStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl843, d)
			}
		} else if yyct843 == codecSelferValueTypeArray1234 {
			yyl843 := r.ReadArrayStart()
			if yyl843 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl843, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys844Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys844Slc
	var yyhl844 bool = l >= 0
	for yyj844 := 0; ; yyj844++ {
		if yyhl844 {
			if yyj844 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys844Slc = r.DecodeBytes(yys844Slc, true, true)
		yys844 := string(yys844Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys844 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv846 := &x.FieldRef
				yyv846.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys844)
		} // end switch yys844
	} // end for yyj844
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj847 int
	var yyb847 bool
	var yyhl847 bool = l >= 0
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj847++
	if yyhl847 {
		yyb847 = yyj847 > l
	} else {
		yyb847 = r.CheckBreak()
	}
	if yyb847 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv849 := &x.FieldRef
		yyv849.CodecDecodeSelf(d)
	}
	for {
		yyj847++
		if yyhl847 {
			yyb847 = yyj847 > l
		} else {
			yyb847 = r.CheckBreak()
		}
		if yyb847 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj847-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym850 := z.EncBinary()
		_ = yym850
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep851 := !z.EncBinary()
			yy2arr851 := z.EncBasicHandle().StructToArray
			var yyq851 [5]bool
			_, _, _ = yysep851, yyq851, yy2arr851
			const yyr851 bool = false
			yyq851[0] = x.Name != ""
			yyq851[1] = x.HostPort != 0
			yyq851[3] = x.Protocol != ""
			yyq851[4] = x.HostIP != ""
			var yynn851 int
			if yyr851 || yy2arr851 {
				r.EncodeArrayStart(5)
			} else {
				yynn851 = 1
				for _, b := range yyq851 {
					if b {
						yynn851++
					}
				}
				r.EncodeMapStart(yynn851)
				yynn851 = 0
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq851[0] {
					yym853 := z.EncBinary()
					_ = yym853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq851[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym854 := z.EncBinary()
					_ = yym854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq851[1] {
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq851[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym859 := z.EncBinary()
				_ = yym859
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym860 := z.EncBinary()
				_ = yym860
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq851[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq851[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq851[4] {
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq851[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym864 := z.EncBinary()
					_ = yym864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr851 || yy2arr851 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym865 := z.DecBinary()
	_ = yym865
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct866 := r.ContainerType()
		if yyct866 == codecSelferValueTypeMap1234 {
			yyl866 := r.ReadMapStart()
			if yyl866 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl866, d)
			}
		} else if yyct866 == codecSelferValueTypeArray1234 {
			yyl866 := r.ReadArrayStart()
			if yyl866 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl866, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys867Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys867Slc
	var yyhl867 bool = l >= 0
	for yyj867 := 0; ; yyj867++ {
		if yyhl867 {
			if yyj867 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys867Slc = r.DecodeBytes(yys867Slc, true, true)
		yys867 := string(yys867Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys867 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys867)
		} // end switch yys867
	} // end for yyj867
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj873 int
	var yyb873 bool
	var yyhl873 bool = l >= 0
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj873++
		if yyhl873 {
			yyb873 = yyj873 > l
		} else {
			yyb873 = r.CheckBreak()
		}
		if yyb873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym879 := z.EncBinary()
		_ = yym879
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep880 := !z.EncBinary()
			yy2arr880 := z.EncBasicHandle().StructToArray
			var yyq880 [3]bool
			_, _, _ = yysep880, yyq880, yy2arr880
			const yyr880 bool = false
			yyq880[1] = x.ReadOnly != false
			var yynn880 int
			if yyr880 || yy2arr880 {
				r.EncodeArrayStart(3)
			} else {
				yynn880 = 2
				for _, b := range yyq880 {
					if b {
						yynn880++
					}
				}
				r.EncodeMapStart(yynn880)
				yynn880 = 0
			}
			if yyr880 || yy2arr880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym882 := z.EncBinary()
				_ = yym882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym883 := z.EncBinary()
				_ = yym883
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr880 || yy2arr880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq880[1] {
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq880[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym886 := z.EncBinary()
					_ = yym886
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr880 || yy2arr880 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym888 := z.EncBinary()
				_ = yym888
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym889 := z.EncBinary()
				_ = yym889
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr880 || yy2arr880 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym890 := z.DecBinary()
	_ = yym890
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct891 := r.ContainerType()
		if yyct891 == codecSelferValueTypeMap1234 {
			yyl891 := r.ReadMapStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl891, d)
			}
		} else if yyct891 == codecSelferValueTypeArray1234 {
			yyl891 := r.ReadArrayStart()
			if yyl891 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl891, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys892Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys892Slc
	var yyhl892 bool = l >= 0
	for yyj892 := 0; ; yyj892++ {
		if yyhl892 {
			if yyj892 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys892Slc = r.DecodeBytes(yys892Slc, true, true)
		yys892 := string(yys892Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys892 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys892)
		} // end switch yys892
	} // end for yyj892
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj896 int
	var yyb896 bool
	var yyhl896 bool = l >= 0
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj896++
	if yyhl896 {
		yyb896 = yyj896 > l
	} else {
		yyb896 = r.CheckBreak()
	}
	if yyb896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj896++
		if yyhl896 {
			yyb896 = yyj896 > l
		} else {
			yyb896 = r.CheckBreak()
		}
		if yyb896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym900 := z.EncBinary()
		_ = yym900
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep901 := !z.EncBinary()
			yy2arr901 := z.EncBasicHandle().StructToArray
			var yyq901 [3]bool
			_, _, _ = yysep901, yyq901, yy2arr901
			const yyr901 bool = false
			yyq901[1] = x.Value != ""
			yyq901[2] = x.ValueFrom != nil
			var yynn901 int
			if yyr901 || yy2arr901 {
				r.EncodeArrayStart(3)
			} else {
				yynn901 = 1
				for _, b := range yyq901 {
					if b {
						yynn901++
					}
				}
				r.EncodeMapStart(yynn901)
				yynn901 = 0
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym903 := z.EncBinary()
				_ = yym903
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym904 := z.EncBinary()
				_ = yym904
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq901[1] {
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq901[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq901[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq901[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr901 || yy2arr901 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym909 := z.DecBinary()
	_ = yym909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct910 := r.ContainerType()
		if yyct910 == codecSelferValueTypeMap1234 {
			yyl910 := r.ReadMapStart()
			if yyl910 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl910, d)
			}
		} else if yyct910 == codecSelferValueTypeArray1234 {
			yyl910 := r.ReadArrayStart()
			if yyl910 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys911Slc
	var yyhl911 bool = l >= 0
	for yyj911 := 0; ; yyj911++ {
		if yyhl911 {
			if yyj911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys911Slc = r.DecodeBytes(yys911Slc, true, true)
		yys911 := string(yys911Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys911 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys911)
		} // end switch yys911
	} // end for yyj911
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj915 int
	var yyb915 bool
	var yyhl915 bool = l >= 0
	yyj915++
	if yyhl915 {
		yyb915 = yyj915 > l
	} else {
		yyb915 = r.CheckBreak()
	}
	if yyb915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj915++
	if yyhl915 {
		yyb915 = yyj915 > l
	} else {
		yyb915 = r.CheckBreak()
	}
	if yyb915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj915++
	if yyhl915 {
		yyb915 = yyj915 > l
	} else {
		yyb915 = r.CheckBreak()
	}
	if yyb915 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj915++
		if yyhl915 {
			yyb915 = yyj915 > l
		} else {
			yyb915 = r.CheckBreak()
		}
		if yyb915 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj915-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym919 := z.EncBinary()
		_ = yym919
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep920 := !z.EncBinary()
			yy2arr920 := z.EncBasicHandle().StructToArray
			var yyq920 [1]bool
			_, _, _ = yysep920, yyq920, yy2arr920
			const yyr920 bool = false
			var yynn920 int
			if yyr920 || yy2arr920 {
				r.EncodeArrayStart(1)
			} else {
				yynn920 = 1
				for _, b := range yyq920 {
					if b {
						yynn920++
					}
				}
				r.EncodeMapStart(yynn920)
				yynn920 = 0
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yyr920 || yy2arr920 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym922 := z.DecBinary()
	_ = yym922
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct923 := r.ContainerType()
		if yyct923 == codecSelferValueTypeMap1234 {
			yyl923 := r.ReadMapStart()
			if yyl923 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl923, d)
			}
		} else if yyct923 == codecSelferValueTypeArray1234 {
			yyl923 := r.ReadArrayStart()
			if yyl923 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl923, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys924Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys924Slc
	var yyhl924 bool = l >= 0
	for yyj924 := 0; ; yyj924++ {
		if yyhl924 {
			if yyj924 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys924Slc = r.DecodeBytes(yys924Slc, true, true)
		yys924 := string(yys924Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys924 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys924)
		} // end switch yys924
	} // end for yyj924
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj926 int
	var yyb926 bool
	var yyhl926 bool = l >= 0
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj926++
		if yyhl926 {
			yyb926 = yyj926 > l
		} else {
			yyb926 = r.CheckBreak()
		}
		if yyb926 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj926-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym928 := z.EncBinary()
		_ = yym928
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep929 := !z.EncBinary()
			yy2arr929 := z.EncBasicHandle().StructToArray
			var yyq929 [4]bool
			_, _, _ = yysep929, yyq929, yy2arr929
			const yyr929 bool = false
			var yynn929 int
			if yyr929 || yy2arr929 {
				r.EncodeArrayStart(4)
			} else {
				yynn929 = 4
				for _, b := range yyq929 {
					if b {
						yynn929++
					}
				}
				r.EncodeMapStart(yynn929)
				yynn929 = 0
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym931 := z.EncBinary()
				_ = yym931
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym932 := z.EncBinary()
				_ = yym932
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym934 := z.EncBinary()
				_ = yym934
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym937 := z.EncBinary()
				_ = yym937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym938 := z.EncBinary()
				_ = yym938
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym940 := z.EncBinary()
				_ = yym940
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym941 := z.EncBinary()
				_ = yym941
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr929 || yy2arr929 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym942 := z.DecBinary()
	_ = yym942
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct943 := r.ContainerType()
		if yyct943 == codecSelferValueTypeMap1234 {
			yyl943 := r.ReadMapStart()
			if yyl943 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl943, d)
			}
		} else if yyct943 == codecSelferValueTypeArray1234 {
			yyl943 := r.ReadArrayStart()
			if yyl943 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl943, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys944Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys944Slc
	var yyhl944 bool = l >= 0
	for yyj944 := 0; ; yyj944++ {
		if yyhl944 {
			if yyj944 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys944Slc = r.DecodeBytes(yys944Slc, true, true)
		yys944 := string(yys944Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys944 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys944)
		} // end switch yys944
	} // end for yyj944
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj949 int
	var yyb949 bool
	var yyhl949 bool = l >= 0
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj949++
	if yyhl949 {
		yyb949 = yyj949 > l
	} else {
		yyb949 = r.CheckBreak()
	}
	if yyb949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj949++
		if yyhl949 {
			yyb949 = yyj949 > l
		} else {
			yyb949 = r.CheckBreak()
		}
		if yyb949 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj949-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym954 := z.EncBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep955 := !z.EncBinary()
			yy2arr955 := z.EncBasicHandle().StructToArray
			var yyq955 [4]bool
			_, _, _ = yysep955, yyq955, yy2arr955
			const yyr955 bool = false
			yyq955[0] = x.Path != ""
			yyq955[1] = true
			yyq955[2] = x.Host != ""
			yyq955[3] = x.Scheme != ""
			var yynn955 int
			if yyr955 || yy2arr955 {
				r.EncodeArrayStart(4)
			} else {
				yynn955 = 0
				for _, b := range yyq955 {
					if b {
						yynn955++
					}
				}
				r.EncodeMapStart(yynn955)
				yynn955 = 0
			}
			if yyr955 || yy2arr955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq955[0] {
					yym957 := z.EncBinary()
					_ = yym957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq955[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym958 := z.EncBinary()
					_ = yym958
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr955 || yy2arr955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq955[1] {
					yy960 := &x.Port
					yym961 := z.EncBinary()
					_ = yym961
					if false {
					} else if z.HasExtensions() && z.EncExt(yy960) {
					} else if !yym961 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy960)
					} else {
						z.EncFallback(yy960)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq955[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy962 := &x.Port
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else if z.HasExtensions() && z.EncExt(yy962) {
					} else if !yym963 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy962)
					} else {
						z.EncFallback(yy962)
					}
				}
			}
			if yyr955 || yy2arr955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq955[2] {
					yym965 := z.EncBinary()
					_ = yym965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq955[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr955 || yy2arr955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq955[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq955[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr955 || yy2arr955 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym968 := z.DecBinary()
	_ = yym968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct969 := r.ContainerType()
		if yyct969 == codecSelferValueTypeMap1234 {
			yyl969 := r.ReadMapStart()
			if yyl969 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl969, d)
			}
		} else if yyct969 == codecSelferValueTypeArray1234 {
			yyl969 := r.ReadArrayStart()
			if yyl969 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys970Slc
	var yyhl970 bool = l >= 0
	for yyj970 := 0; ; yyj970++ {
		if yyhl970 {
			if yyj970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys970Slc = r.DecodeBytes(yys970Slc, true, true)
		yys970 := string(yys970Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys970 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv972 := &x.Port
				yym973 := z.DecBinary()
				_ = yym973
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv972) {
				} else if !yym973 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv972)
				} else {
					z.DecFallback(yyv972, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys970)
		} // end switch yys970
	} // end for yyj970
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj976 int
	var yyb976 bool
	var yyhl976 bool = l >= 0
	yyj976++
	if yyhl976 {
		yyb976 = yyj976 > l
	} else {
		yyb976 = r.CheckBreak()
	}
	if yyb976 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj976++
	if yyhl976 {
		yyb976 = yyj976 > l
	} else {
		yyb976 = r.CheckBreak()
	}
	if yyb976 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv978 := &x.Port
		yym979 := z.DecBinary()
		_ = yym979
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv978) {
		} else if !yym979 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv978)
		} else {
			z.DecFallback(yyv978, false)
		}
	}
	yyj976++
	if yyhl976 {
		yyb976 = yyj976 > l
	} else {
		yyb976 = r.CheckBreak()
	}
	if yyb976 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj976++
	if yyhl976 {
		yyb976 = yyj976 > l
	} else {
		yyb976 = r.CheckBreak()
	}
	if yyb976 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj976++
		if yyhl976 {
			yyb976 = yyj976 > l
		} else {
			yyb976 = r.CheckBreak()
		}
		if yyb976 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj976-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym982 := z.EncBinary()
	_ = yym982
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym983 := z.DecBinary()
	_ = yym983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym984 := z.EncBinary()
		_ = yym984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep985 := !z.EncBinary()
			yy2arr985 := z.EncBasicHandle().StructToArray
			var yyq985 [1]bool
			_, _, _ = yysep985, yyq985, yy2arr985
			const yyr985 bool = false
			yyq985[0] = true
			var yynn985 int
			if yyr985 || yy2arr985 {
				r.EncodeArrayStart(1)
			} else {
				yynn985 = 0
				for _, b := range yyq985 {
					if b {
						yynn985++
					}
				}
				r.EncodeMapStart(yynn985)
				yynn985 = 0
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq985[0] {
					yy987 := &x.Port
					yym988 := z.EncBinary()
					_ = yym988
					if false {
					} else if z.HasExtensions() && z.EncExt(yy987) {
					} else if !yym988 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy987)
					} else {
						z.EncFallback(yy987)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq985[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy989 := &x.Port
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else if z.HasExtensions() && z.EncExt(yy989) {
					} else if !yym990 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy989)
					} else {
						z.EncFallback(yy989)
					}
				}
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym991 := z.DecBinary()
	_ = yym991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct992 := r.ContainerType()
		if yyct992 == codecSelferValueTypeMap1234 {
			yyl992 := r.ReadMapStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl992, d)
			}
		} else if yyct992 == codecSelferValueTypeArray1234 {
			yyl992 := r.ReadArrayStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys993Slc
	var yyhl993 bool = l >= 0
	for yyj993 := 0; ; yyj993++ {
		if yyhl993 {
			if yyj993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys993Slc = r.DecodeBytes(yys993Slc, true, true)
		yys993 := string(yys993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys993 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv994 := &x.Port
				yym995 := z.DecBinary()
				_ = yym995
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv994) {
				} else if !yym995 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv994)
				} else {
					z.DecFallback(yyv994, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys993)
		} // end switch yys993
	} // end for yyj993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj996 int
	var yyb996 bool
	var yyhl996 bool = l >= 0
	yyj996++
	if yyhl996 {
		yyb996 = yyj996 > l
	} else {
		yyb996 = r.CheckBreak()
	}
	if yyb996 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv997 := &x.Port
		yym998 := z.DecBinary()
		_ = yym998
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv997) {
		} else if !yym998 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv997)
		} else {
			z.DecFallback(yyv997, false)
		}
	}
	for {
		yyj996++
		if yyhl996 {
			yyb996 = yyj996 > l
		} else {
			yyb996 = r.CheckBreak()
		}
		if yyb996 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj996-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym999 := z.EncBinary()
		_ = yym999
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1000 := !z.EncBinary()
			yy2arr1000 := z.EncBasicHandle().StructToArray
			var yyq1000 [1]bool
			_, _, _ = yysep1000, yyq1000, yy2arr1000
			const yyr1000 bool = false
			yyq1000[0] = len(x.Command) != 0
			var yynn1000 int
			if yyr1000 || yy2arr1000 {
				r.EncodeArrayStart(1)
			} else {
				yynn1000 = 0
				for _, b := range yyq1000 {
					if b {
						yynn1000++
					}
				}
				r.EncodeMapStart(yynn1000)
				yynn1000 = 0
			}
			if yyr1000 || yy2arr1000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1000[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1002 := z.EncBinary()
						_ = yym1002
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1000[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1003 := z.EncBinary()
						_ = yym1003
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1000 || yy2arr1000 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1004 := z.DecBinary()
	_ = yym1004
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1005 := r.ContainerType()
		if yyct1005 == codecSelferValueTypeMap1234 {
			yyl1005 := r.ReadMapStart()
			if yyl1005 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1005, d)
			}
		} else if yyct1005 == codecSelferValueTypeArray1234 {
			yyl1005 := r.ReadArrayStart()
			if yyl1005 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1005, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1006Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1006Slc
	var yyhl1006 bool = l >= 0
	for yyj1006 := 0; ; yyj1006++ {
		if yyhl1006 {
			if yyj1006 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1006Slc = r.DecodeBytes(yys1006Slc, true, true)
		yys1006 := string(yys1006Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1006 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1007 := &x.Command
				yym1008 := z.DecBinary()
				_ = yym1008
				if false {
				} else {
					z.F.DecSliceStringX(yyv1007, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1006)
		} // end switch yys1006
	} // end for yyj1006
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1009 int
	var yyb1009 bool
	var yyhl1009 bool = l >= 0
	yyj1009++
	if yyhl1009 {
		yyb1009 = yyj1009 > l
	} else {
		yyb1009 = r.CheckBreak()
	}
	if yyb1009 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1010 := &x.Command
		yym1011 := z.DecBinary()
		_ = yym1011
		if false {
		} else {
			z.F.DecSliceStringX(yyv1010, false, d)
		}
	}
	for {
		yyj1009++
		if yyhl1009 {
			yyb1009 = yyj1009 > l
		} else {
			yyb1009 = r.CheckBreak()
		}
		if yyb1009 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1009-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1012 := z.EncBinary()
		_ = yym1012
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1013 := !z.EncBinary()
			yy2arr1013 := z.EncBasicHandle().StructToArray
			var yyq1013 [8]bool
			_, _, _ = yysep1013, yyq1013, yy2arr1013
			const yyr1013 bool = false
			yyq1013[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1013[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1013[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1013[3] = x.InitialDelaySeconds != 0
			yyq1013[4] = x.TimeoutSeconds != 0
			yyq1013[5] = x.PeriodSeconds != 0
			yyq1013[6] = x.SuccessThreshold != 0
			yyq1013[7] = x.FailureThreshold != 0
			var yynn1013 int
			if yyr1013 || yy2arr1013 {
				r.EncodeArrayStart(8)
			} else {
				yynn1013 = 0
				for _, b := range yyq1013 {
					if b {
						yynn1013++
					}
				}
				r.EncodeMapStart(yynn1013)
				yynn1013 = 0
			}
			var yyn1014 bool
			if x.Handler.Exec == nil {
				yyn1014 = true
				goto LABEL1014
			}
		LABEL1014:
			if yyr1013 || yy2arr1013 {
				if yyn1014 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1013[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1013[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1014 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1015 bool
			if x.Handler.HTTPGet == nil {
				yyn1015 = true
				goto LABEL1015
			}
		LABEL1015:
			if yyr1013 || yy2arr1013 {
				if yyn1015 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1013[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1013[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1015 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1016 bool
			if x.Handler.TCPSocket == nil {
				yyn1016 = true
				goto LABEL1016
			}
		LABEL1016:
			if yyr1013 || yy2arr1013 {
				if yyn1016 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1013[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1013[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1016 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1013 || yy2arr1013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1013[3] {
					yym1018 := z.EncBinary()
					_ = yym1018
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1013[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1013 || yy2arr1013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1013[4] {
					yym1021 := z.EncBinary()
					_ = yym1021
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1013[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1013 || yy2arr1013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1013[5] {
					yym1024 := z.EncBinary()
					_ = yym1024
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1013[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1013 || yy2arr1013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1013[6] {
					yym1027 := z.EncBinary()
					_ = yym1027
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1013[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1013 || yy2arr1013 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1013[7] {
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1013[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1031 := z.EncBinary()
					_ = yym1031
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1013 || yy2arr1013 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1032 := z.DecBinary()
	_ = yym1032
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1033 := r.ContainerType()
		if yyct1033 == codecSelferValueTypeMap1234 {
			yyl1033 := r.ReadMapStart()
			if yyl1033 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1033, d)
			}
		} else if yyct1033 == codecSelferValueTypeArray1234 {
			yyl1033 := r.ReadArrayStart()
			if yyl1033 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1033, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1034Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1034Slc
	var yyhl1034 bool = l >= 0
	for yyj1034 := 0; ; yyj1034++ {
		if yyhl1034 {
			if yyj1034 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1034Slc = r.DecodeBytes(yys1034Slc, true, true)
		yys1034 := string(yys1034Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1034 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1034)
		} // end switch yys1034
	} // end for yyj1034
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1043 int
	var yyb1043 bool
	var yyhl1043 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1043++
	if yyhl1043 {
		yyb1043 = yyj1043 > l
	} else {
		yyb1043 = r.CheckBreak()
	}
	if yyb1043 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1043++
		if yyhl1043 {
			yyb1043 = yyj1043 > l
		} else {
			yyb1043 = r.CheckBreak()
		}
		if yyb1043 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1043-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1052 := z.EncBinary()
	_ = yym1052
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1053 := z.DecBinary()
	_ = yym1053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1054 := z.EncBinary()
	_ = yym1054
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1055 := z.DecBinary()
	_ = yym1055
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1056 := z.EncBinary()
		_ = yym1056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1057 := !z.EncBinary()
			yy2arr1057 := z.EncBasicHandle().StructToArray
			var yyq1057 [2]bool
			_, _, _ = yysep1057, yyq1057, yy2arr1057
			const yyr1057 bool = false
			yyq1057[0] = len(x.Add) != 0
			yyq1057[1] = len(x.Drop) != 0
			var yynn1057 int
			if yyr1057 || yy2arr1057 {
				r.EncodeArrayStart(2)
			} else {
				yynn1057 = 0
				for _, b := range yyq1057 {
					if b {
						yynn1057++
					}
				}
				r.EncodeMapStart(yynn1057)
				yynn1057 = 0
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1059 := z.EncBinary()
						_ = yym1059
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1057[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1060 := z.EncBinary()
						_ = yym1060
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1062 := z.EncBinary()
						_ = yym1062
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1057[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1063 := z.EncBinary()
						_ = yym1063
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1064 := z.DecBinary()
	_ = yym1064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1065 := r.ContainerType()
		if yyct1065 == codecSelferValueTypeMap1234 {
			yyl1065 := r.ReadMapStart()
			if yyl1065 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1065, d)
			}
		} else if yyct1065 == codecSelferValueTypeArray1234 {
			yyl1065 := r.ReadArrayStart()
			if yyl1065 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1065, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1066Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1066Slc
	var yyhl1066 bool = l >= 0
	for yyj1066 := 0; ; yyj1066++ {
		if yyhl1066 {
			if yyj1066 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1066Slc = r.DecodeBytes(yys1066Slc, true, true)
		yys1066 := string(yys1066Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1066 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1067 := &x.Add
				yym1068 := z.DecBinary()
				_ = yym1068
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1067), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1069 := &x.Drop
				yym1070 := z.DecBinary()
				_ = yym1070
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1069), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1066)
		} // end switch yys1066
	} // end for yyj1066
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1071 int
	var yyb1071 bool
	var yyhl1071 bool = l >= 0
	yyj1071++
	if yyhl1071 {
		yyb1071 = yyj1071 > l
	} else {
		yyb1071 = r.CheckBreak()
	}
	if yyb1071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1072 := &x.Add
		yym1073 := z.DecBinary()
		_ = yym1073
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1072), d)
		}
	}
	yyj1071++
	if yyhl1071 {
		yyb1071 = yyj1071 > l
	} else {
		yyb1071 = r.CheckBreak()
	}
	if yyb1071 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1074 := &x.Drop
		yym1075 := z.DecBinary()
		_ = yym1075
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1074), d)
		}
	}
	for {
		yyj1071++
		if yyhl1071 {
			yyb1071 = yyj1071 > l
		} else {
			yyb1071 = r.CheckBreak()
		}
		if yyb1071 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1071-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1076 := z.EncBinary()
		_ = yym1076
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1077 := !z.EncBinary()
			yy2arr1077 := z.EncBasicHandle().StructToArray
			var yyq1077 [2]bool
			_, _, _ = yysep1077, yyq1077, yy2arr1077
			const yyr1077 bool = false
			yyq1077[0] = len(x.Limits) != 0
			yyq1077[1] = len(x.Requests) != 0
			var yynn1077 int
			if yyr1077 || yy2arr1077 {
				r.EncodeArrayStart(2)
			} else {
				yynn1077 = 0
				for _, b := range yyq1077 {
					if b {
						yynn1077++
					}
				}
				r.EncodeMapStart(yynn1077)
				yynn1077 = 0
			}
			if yyr1077 || yy2arr1077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1077[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1077[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1077 || yy2arr1077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1077[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1077[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1077 || yy2arr1077 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1080 := z.DecBinary()
	_ = yym1080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1081 := r.ContainerType()
		if yyct1081 == codecSelferValueTypeMap1234 {
			yyl1081 := r.ReadMapStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1081, d)
			}
		} else if yyct1081 == codecSelferValueTypeArray1234 {
			yyl1081 := r.ReadArrayStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1082Slc
	var yyhl1082 bool = l >= 0
	for yyj1082 := 0; ; yyj1082++ {
		if yyhl1082 {
			if yyj1082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1082Slc = r.DecodeBytes(yys1082Slc, true, true)
		yys1082 := string(yys1082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1082 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1083 := &x.Limits
				yyv1083.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1084 := &x.Requests
				yyv1084.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1082)
		} // end switch yys1082
	} // end for yyj1082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1085 int
	var yyb1085 bool
	var yyhl1085 bool = l >= 0
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1086 := &x.Limits
		yyv1086.CodecDecodeSelf(d)
	}
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1087 := &x.Requests
		yyv1087.CodecDecodeSelf(d)
	}
	for {
		yyj1085++
		if yyhl1085 {
			yyb1085 = yyj1085 > l
		} else {
			yyb1085 = r.CheckBreak()
		}
		if yyb1085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1088 := z.EncBinary()
		_ = yym1088
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1089 := !z.EncBinary()
			yy2arr1089 := z.EncBasicHandle().StructToArray
			var yyq1089 [18]bool
			_, _, _ = yysep1089, yyq1089, yy2arr1089
			const yyr1089 bool = false
			yyq1089[2] = len(x.Command) != 0
			yyq1089[3] = len(x.Args) != 0
			yyq1089[4] = x.WorkingDir != ""
			yyq1089[5] = len(x.Ports) != 0
			yyq1089[6] = len(x.Env) != 0
			yyq1089[7] = true
			yyq1089[8] = len(x.VolumeMounts) != 0
			yyq1089[9] = x.LivenessProbe != nil
			yyq1089[10] = x.ReadinessProbe != nil
			yyq1089[11] = x.Lifecycle != nil
			yyq1089[12] = x.TerminationMessagePath != ""
			yyq1089[14] = x.SecurityContext != nil
			yyq1089[15] = x.Stdin != false
			yyq1089[16] = x.StdinOnce != false
			yyq1089[17] = x.TTY != false
			var yynn1089 int
			if yyr1089 || yy2arr1089 {
				r.EncodeArrayStart(18)
			} else {
				yynn1089 = 3
				for _, b := range yyq1089 {
					if b {
						yynn1089++
					}
				}
				r.EncodeMapStart(yynn1089)
				yynn1089 = 0
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1091 := z.EncBinary()
				_ = yym1091
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1092 := z.EncBinary()
				_ = yym1092
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1094 := z.EncBinary()
				_ = yym1094
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1095 := z.EncBinary()
				_ = yym1095
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1097 := z.EncBinary()
						_ = yym1097
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1098 := z.EncBinary()
						_ = yym1098
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1100 := z.EncBinary()
						_ = yym1100
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1101 := z.EncBinary()
						_ = yym1101
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[4] {
					yym1103 := z.EncBinary()
					_ = yym1103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1089[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1106 := z.EncBinary()
						_ = yym1106
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1107 := z.EncBinary()
						_ = yym1107
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1109 := z.EncBinary()
						_ = yym1109
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1110 := z.EncBinary()
						_ = yym1110
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[7] {
					yy1112 := &x.Resources
					yy1112.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1113 := &x.Resources
					yy1113.CodecEncodeSelf(e)
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1115 := z.EncBinary()
						_ = yym1115
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1116 := z.EncBinary()
						_ = yym1116
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[12] {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1089[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[15] {
					yym1126 := z.EncBinary()
					_ = yym1126
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1089[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[16] {
					yym1129 := z.EncBinary()
					_ = yym1129
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1089[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1130 := z.EncBinary()
					_ = yym1130
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[17] {
					yym1132 := z.EncBinary()
					_ = yym1132
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1089[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1133 := z.EncBinary()
					_ = yym1133
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1134 := z.DecBinary()
	_ = yym1134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1135 := r.ContainerType()
		if yyct1135 == codecSelferValueTypeMap1234 {
			yyl1135 := r.ReadMapStart()
			if yyl1135 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1135, d)
			}
		} else if yyct1135 == codecSelferValueTypeArray1234 {
			yyl1135 := r.ReadArrayStart()
			if yyl1135 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1135, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1136Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1136Slc
	var yyhl1136 bool = l >= 0
	for yyj1136 := 0; ; yyj1136++ {
		if yyhl1136 {
			if yyj1136 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1136Slc = r.DecodeBytes(yys1136Slc, true, true)
		yys1136 := string(yys1136Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1136 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1139 := &x.Command
				yym1140 := z.DecBinary()
				_ = yym1140
				if false {
				} else {
					z.F.DecSliceStringX(yyv1139, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1141 := &x.Args
				yym1142 := z.DecBinary()
				_ = yym1142
				if false {
				} else {
					z.F.DecSliceStringX(yyv1141, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1144 := &x.Ports
				yym1145 := z.DecBinary()
				_ = yym1145
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1144), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1146 := &x.Env
				yym1147 := z.DecBinary()
				_ = yym1147
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1146), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1148 := &x.Resources
				yyv1148.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1149 := &x.VolumeMounts
				yym1150 := z.DecBinary()
				_ = yym1150
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1149), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1136)
		} // end switch yys1136
	} // end for yyj1136
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1160 int
	var yyb1160 bool
	var yyhl1160 bool = l >= 0
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1163 := &x.Command
		yym1164 := z.DecBinary()
		_ = yym1164
		if false {
		} else {
			z.F.DecSliceStringX(yyv1163, false, d)
		}
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1165 := &x.Args
		yym1166 := z.DecBinary()
		_ = yym1166
		if false {
		} else {
			z.F.DecSliceStringX(yyv1165, false, d)
		}
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1168 := &x.Ports
		yym1169 := z.DecBinary()
		_ = yym1169
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1168), d)
		}
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1170 := &x.Env
		yym1171 := z.DecBinary()
		_ = yym1171
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1170), d)
		}
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1172 := &x.Resources
		yyv1172.CodecDecodeSelf(d)
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1173 := &x.VolumeMounts
		yym1174 := z.DecBinary()
		_ = yym1174
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1173), d)
		}
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1160++
	if yyhl1160 {
		yyb1160 = yyj1160 > l
	} else {
		yyb1160 = r.CheckBreak()
	}
	if yyb1160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1160++
		if yyhl1160 {
			yyb1160 = yyj1160 > l
		} else {
			yyb1160 = r.CheckBreak()
		}
		if yyb1160 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1160-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1184 := z.EncBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1185 := !z.EncBinary()
			yy2arr1185 := z.EncBasicHandle().StructToArray
			var yyq1185 [3]bool
			_, _, _ = yysep1185, yyq1185, yy2arr1185
			const yyr1185 bool = false
			yyq1185[0] = x.Exec != nil
			yyq1185[1] = x.HTTPGet != nil
			yyq1185[2] = x.TCPSocket != nil
			var yynn1185 int
			if yyr1185 || yy2arr1185 {
				r.EncodeArrayStart(3)
			} else {
				yynn1185 = 0
				for _, b := range yyq1185 {
					if b {
						yynn1185++
					}
				}
				r.EncodeMapStart(yynn1185)
				yynn1185 = 0
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1185[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1185[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1185[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1185[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1185[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1185[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1189 := z.DecBinary()
	_ = yym1189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1190 := r.ContainerType()
		if yyct1190 == codecSelferValueTypeMap1234 {
			yyl1190 := r.ReadMapStart()
			if yyl1190 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1190, d)
			}
		} else if yyct1190 == codecSelferValueTypeArray1234 {
			yyl1190 := r.ReadArrayStart()
			if yyl1190 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1190, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1191Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1191Slc
	var yyhl1191 bool = l >= 0
	for yyj1191 := 0; ; yyj1191++ {
		if yyhl1191 {
			if yyj1191 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1191Slc = r.DecodeBytes(yys1191Slc, true, true)
		yys1191 := string(yys1191Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1191 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1191)
		} // end switch yys1191
	} // end for yyj1191
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1195 int
	var yyb1195 bool
	var yyhl1195 bool = l >= 0
	yyj1195++
	if yyhl1195 {
		yyb1195 = yyj1195 > l
	} else {
		yyb1195 = r.CheckBreak()
	}
	if yyb1195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1195++
	if yyhl1195 {
		yyb1195 = yyj1195 > l
	} else {
		yyb1195 = r.CheckBreak()
	}
	if yyb1195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1195++
	if yyhl1195 {
		yyb1195 = yyj1195 > l
	} else {
		yyb1195 = r.CheckBreak()
	}
	if yyb1195 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1195++
		if yyhl1195 {
			yyb1195 = yyj1195 > l
		} else {
			yyb1195 = r.CheckBreak()
		}
		if yyb1195 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1195-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1199 := z.EncBinary()
		_ = yym1199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1200 := !z.EncBinary()
			yy2arr1200 := z.EncBasicHandle().StructToArray
			var yyq1200 [2]bool
			_, _, _ = yysep1200, yyq1200, yy2arr1200
			const yyr1200 bool = false
			yyq1200[0] = x.PostStart != nil
			yyq1200[1] = x.PreStop != nil
			var yynn1200 int
			if yyr1200 || yy2arr1200 {
				r.EncodeArrayStart(2)
			} else {
				yynn1200 = 0
				for _, b := range yyq1200 {
					if b {
						yynn1200++
					}
				}
				r.EncodeMapStart(yynn1200)
				yynn1200 = 0
			}
			if yyr1200 || yy2arr1200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1200[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1200[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1200 || yy2arr1200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1200[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1200[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1200 || yy2arr1200 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1203 := z.DecBinary()
	_ = yym1203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1204 := r.ContainerType()
		if yyct1204 == codecSelferValueTypeMap1234 {
			yyl1204 := r.ReadMapStart()
			if yyl1204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1204, d)
			}
		} else if yyct1204 == codecSelferValueTypeArray1234 {
			yyl1204 := r.ReadArrayStart()
			if yyl1204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1205Slc
	var yyhl1205 bool = l >= 0
	for yyj1205 := 0; ; yyj1205++ {
		if yyhl1205 {
			if yyj1205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1205Slc = r.DecodeBytes(yys1205Slc, true, true)
		yys1205 := string(yys1205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1205 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1205)
		} // end switch yys1205
	} // end for yyj1205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1208 int
	var yyb1208 bool
	var yyhl1208 bool = l >= 0
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1208++
		if yyhl1208 {
			yyb1208 = yyj1208 > l
		} else {
			yyb1208 = r.CheckBreak()
		}
		if yyb1208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1211 := z.EncBinary()
	_ = yym1211
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1212 := z.DecBinary()
	_ = yym1212
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1213 := z.EncBinary()
		_ = yym1213
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1214 := !z.EncBinary()
			yy2arr1214 := z.EncBasicHandle().StructToArray
			var yyq1214 [2]bool
			_, _, _ = yysep1214, yyq1214, yy2arr1214
			const yyr1214 bool = false
			yyq1214[0] = x.Reason != ""
			yyq1214[1] = x.Message != ""
			var yynn1214 int
			if yyr1214 || yy2arr1214 {
				r.EncodeArrayStart(2)
			} else {
				yynn1214 = 0
				for _, b := range yyq1214 {
					if b {
						yynn1214++
					}
				}
				r.EncodeMapStart(yynn1214)
				yynn1214 = 0
			}
			if yyr1214 || yy2arr1214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1214[0] {
					yym1216 := z.EncBinary()
					_ = yym1216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1214[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1217 := z.EncBinary()
					_ = yym1217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1214 || yy2arr1214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1214[1] {
					yym1219 := z.EncBinary()
					_ = yym1219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1214[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1214 || yy2arr1214 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1221 := z.DecBinary()
	_ = yym1221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1222 := r.ContainerType()
		if yyct1222 == codecSelferValueTypeMap1234 {
			yyl1222 := r.ReadMapStart()
			if yyl1222 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1222, d)
			}
		} else if yyct1222 == codecSelferValueTypeArray1234 {
			yyl1222 := r.ReadArrayStart()
			if yyl1222 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1223Slc
	var yyhl1223 bool = l >= 0
	for yyj1223 := 0; ; yyj1223++ {
		if yyhl1223 {
			if yyj1223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1223Slc = r.DecodeBytes(yys1223Slc, true, true)
		yys1223 := string(yys1223Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1223 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1223)
		} // end switch yys1223
	} // end for yyj1223
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1226 int
	var yyb1226 bool
	var yyhl1226 bool = l >= 0
	yyj1226++
	if yyhl1226 {
		yyb1226 = yyj1226 > l
	} else {
		yyb1226 = r.CheckBreak()
	}
	if yyb1226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1226++
	if yyhl1226 {
		yyb1226 = yyj1226 > l
	} else {
		yyb1226 = r.CheckBreak()
	}
	if yyb1226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1226++
		if yyhl1226 {
			yyb1226 = yyj1226 > l
		} else {
			yyb1226 = r.CheckBreak()
		}
		if yyb1226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1229 := z.EncBinary()
		_ = yym1229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1230 := !z.EncBinary()
			yy2arr1230 := z.EncBasicHandle().StructToArray
			var yyq1230 [1]bool
			_, _, _ = yysep1230, yyq1230, yy2arr1230
			const yyr1230 bool = false
			yyq1230[0] = true
			var yynn1230 int
			if yyr1230 || yy2arr1230 {
				r.EncodeArrayStart(1)
			} else {
				yynn1230 = 0
				for _, b := range yyq1230 {
					if b {
						yynn1230++
					}
				}
				r.EncodeMapStart(yynn1230)
				yynn1230 = 0
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[0] {
					yy1232 := &x.StartedAt
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1232) {
					} else if yym1233 {
						z.EncBinaryMarshal(yy1232)
					} else if !yym1233 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1232)
					} else {
						z.EncFallback(yy1232)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1234 := &x.StartedAt
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1234) {
					} else if yym1235 {
						z.EncBinaryMarshal(yy1234)
					} else if !yym1235 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1234)
					} else {
						z.EncFallback(yy1234)
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1236 := z.DecBinary()
	_ = yym1236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1237 := r.ContainerType()
		if yyct1237 == codecSelferValueTypeMap1234 {
			yyl1237 := r.ReadMapStart()
			if yyl1237 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1237, d)
			}
		} else if yyct1237 == codecSelferValueTypeArray1234 {
			yyl1237 := r.ReadArrayStart()
			if yyl1237 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1238Slc
	var yyhl1238 bool = l >= 0
	for yyj1238 := 0; ; yyj1238++ {
		if yyhl1238 {
			if yyj1238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1238Slc = r.DecodeBytes(yys1238Slc, true, true)
		yys1238 := string(yys1238Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1238 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1239 := &x.StartedAt
				yym1240 := z.DecBinary()
				_ = yym1240
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1239) {
				} else if yym1240 {
					z.DecBinaryUnmarshal(yyv1239)
				} else if !yym1240 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1239)
				} else {
					z.DecFallback(yyv1239, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1238)
		} // end switch yys1238
	} // end for yyj1238
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1241 int
	var yyb1241 bool
	var yyhl1241 bool = l >= 0
	yyj1241++
	if yyhl1241 {
		yyb1241 = yyj1241 > l
	} else {
		yyb1241 = r.CheckBreak()
	}
	if yyb1241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1242 := &x.StartedAt
		yym1243 := z.DecBinary()
		_ = yym1243
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1242) {
		} else if yym1243 {
			z.DecBinaryUnmarshal(yyv1242)
		} else if !yym1243 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1242)
		} else {
			z.DecFallback(yyv1242, false)
		}
	}
	for {
		yyj1241++
		if yyhl1241 {
			yyb1241 = yyj1241 > l
		} else {
			yyb1241 = r.CheckBreak()
		}
		if yyb1241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1244 := z.EncBinary()
		_ = yym1244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1245 := !z.EncBinary()
			yy2arr1245 := z.EncBasicHandle().StructToArray
			var yyq1245 [7]bool
			_, _, _ = yysep1245, yyq1245, yy2arr1245
			const yyr1245 bool = false
			yyq1245[1] = x.Signal != 0
			yyq1245[2] = x.Reason != ""
			yyq1245[3] = x.Message != ""
			yyq1245[4] = true
			yyq1245[5] = true
			yyq1245[6] = x.ContainerID != ""
			var yynn1245 int
			if yyr1245 || yy2arr1245 {
				r.EncodeArrayStart(7)
			} else {
				yynn1245 = 1
				for _, b := range yyq1245 {
					if b {
						yynn1245++
					}
				}
				r.EncodeMapStart(yynn1245)
				yynn1245 = 0
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1247 := z.EncBinary()
				_ = yym1247
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1248 := z.EncBinary()
				_ = yym1248
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[1] {
					yym1250 := z.EncBinary()
					_ = yym1250
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1245[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1251 := z.EncBinary()
					_ = yym1251
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[2] {
					yym1253 := z.EncBinary()
					_ = yym1253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1245[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1254 := z.EncBinary()
					_ = yym1254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[3] {
					yym1256 := z.EncBinary()
					_ = yym1256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1245[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1257 := z.EncBinary()
					_ = yym1257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[4] {
					yy1259 := &x.StartedAt
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1259) {
					} else if yym1260 {
						z.EncBinaryMarshal(yy1259)
					} else if !yym1260 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1259)
					} else {
						z.EncFallback(yy1259)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1245[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1261 := &x.StartedAt
					yym1262 := z.EncBinary()
					_ = yym1262
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1261) {
					} else if yym1262 {
						z.EncBinaryMarshal(yy1261)
					} else if !yym1262 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1261)
					} else {
						z.EncFallback(yy1261)
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[5] {
					yy1264 := &x.FinishedAt
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1264) {
					} else if yym1265 {
						z.EncBinaryMarshal(yy1264)
					} else if !yym1265 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1264)
					} else {
						z.EncFallback(yy1264)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1245[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1266 := &x.FinishedAt
					yym1267 := z.EncBinary()
					_ = yym1267
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1266) {
					} else if yym1267 {
						z.EncBinaryMarshal(yy1266)
					} else if !yym1267 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1266)
					} else {
						z.EncFallback(yy1266)
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1245[6] {
					yym1269 := z.EncBinary()
					_ = yym1269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1245[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1270 := z.EncBinary()
					_ = yym1270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1245 || yy2arr1245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1271 := z.DecBinary()
	_ = yym1271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1272 := r.ContainerType()
		if yyct1272 == codecSelferValueTypeMap1234 {
			yyl1272 := r.ReadMapStart()
			if yyl1272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1272, d)
			}
		} else if yyct1272 == codecSelferValueTypeArray1234 {
			yyl1272 := r.ReadArrayStart()
			if yyl1272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1273Slc
	var yyhl1273 bool = l >= 0
	for yyj1273 := 0; ; yyj1273++ {
		if yyhl1273 {
			if yyj1273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1273Slc = r.DecodeBytes(yys1273Slc, true, true)
		yys1273 := string(yys1273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1273 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1278 := &x.StartedAt
				yym1279 := z.DecBinary()
				_ = yym1279
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1278) {
				} else if yym1279 {
					z.DecBinaryUnmarshal(yyv1278)
				} else if !yym1279 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1278)
				} else {
					z.DecFallback(yyv1278, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1280 := &x.FinishedAt
				yym1281 := z.DecBinary()
				_ = yym1281
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1280) {
				} else if yym1281 {
					z.DecBinaryUnmarshal(yyv1280)
				} else if !yym1281 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1280)
				} else {
					z.DecFallback(yyv1280, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1273)
		} // end switch yys1273
	} // end for yyj1273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1283 int
	var yyb1283 bool
	var yyhl1283 bool = l >= 0
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1288 := &x.StartedAt
		yym1289 := z.DecBinary()
		_ = yym1289
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1288) {
		} else if yym1289 {
			z.DecBinaryUnmarshal(yyv1288)
		} else if !yym1289 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1288)
		} else {
			z.DecFallback(yyv1288, false)
		}
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1290 := &x.FinishedAt
		yym1291 := z.DecBinary()
		_ = yym1291
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1290) {
		} else if yym1291 {
			z.DecBinaryUnmarshal(yyv1290)
		} else if !yym1291 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1290)
		} else {
			z.DecFallback(yyv1290, false)
		}
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1283++
		if yyhl1283 {
			yyb1283 = yyj1283 > l
		} else {
			yyb1283 = r.CheckBreak()
		}
		if yyb1283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1293 := z.EncBinary()
		_ = yym1293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1294 := !z.EncBinary()
			yy2arr1294 := z.EncBasicHandle().StructToArray
			var yyq1294 [3]bool
			_, _, _ = yysep1294, yyq1294, yy2arr1294
			const yyr1294 bool = false
			yyq1294[0] = x.Waiting != nil
			yyq1294[1] = x.Running != nil
			yyq1294[2] = x.Terminated != nil
			var yynn1294 int
			if yyr1294 || yy2arr1294 {
				r.EncodeArrayStart(3)
			} else {
				yynn1294 = 0
				for _, b := range yyq1294 {
					if b {
						yynn1294++
					}
				}
				r.EncodeMapStart(yynn1294)
				yynn1294 = 0
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1294[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1294[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1294[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1294[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1294[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1298 := z.DecBinary()
	_ = yym1298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1299 := r.ContainerType()
		if yyct1299 == codecSelferValueTypeMap1234 {
			yyl1299 := r.ReadMapStart()
			if yyl1299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1299, d)
			}
		} else if yyct1299 == codecSelferValueTypeArray1234 {
			yyl1299 := r.ReadArrayStart()
			if yyl1299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1300Slc
	var yyhl1300 bool = l >= 0
	for yyj1300 := 0; ; yyj1300++ {
		if yyhl1300 {
			if yyj1300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1300Slc = r.DecodeBytes(yys1300Slc, true, true)
		yys1300 := string(yys1300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1300 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1300)
		} // end switch yys1300
	} // end for yyj1300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1304 int
	var yyb1304 bool
	var yyhl1304 bool = l >= 0
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1304++
	if yyhl1304 {
		yyb1304 = yyj1304 > l
	} else {
		yyb1304 = r.CheckBreak()
	}
	if yyb1304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1304++
		if yyhl1304 {
			yyb1304 = yyj1304 > l
		} else {
			yyb1304 = r.CheckBreak()
		}
		if yyb1304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1308 := z.EncBinary()
		_ = yym1308
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1309 := !z.EncBinary()
			yy2arr1309 := z.EncBasicHandle().StructToArray
			var yyq1309 [8]bool
			_, _, _ = yysep1309, yyq1309, yy2arr1309
			const yyr1309 bool = false
			yyq1309[1] = true
			yyq1309[2] = true
			yyq1309[7] = x.ContainerID != ""
			var yynn1309 int
			if yyr1309 || yy2arr1309 {
				r.EncodeArrayStart(8)
			} else {
				yynn1309 = 5
				for _, b := range yyq1309 {
					if b {
						yynn1309++
					}
				}
				r.EncodeMapStart(yynn1309)
				yynn1309 = 0
			}
			if yyr1309 || yy2arr1309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1311 := z.EncBinary()
				_ = yym1311
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1312 := z.EncBinary()
				_ = yym1312
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1309 || yy2arr1309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1309[1] {
					yy1314 := &x.State
					yy1314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1309[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1315 := &x.State
					yy1315.CodecEncodeSelf(e)
				}
			}
			if yyr1309 || yy2arr1309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1309[2] {
					yy1317 := &x.LastTerminationState
					yy1317.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1309[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1318 := &x.LastTerminationState
					yy1318.CodecEncodeSelf(e)
				}
			}
			if yyr1309 || yy2arr1309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1320 := z.EncBinary()
				_ = yym1320
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1321 := z.EncBinary()
				_ = yym1321
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1309 || yy2arr1309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1323 := z.EncBinary()
				_ = yym1323
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1324 := z.EncBinary()
				_ = yym1324
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1309 || yy2arr1309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1326 := z.EncBinary()
				_ = yym1326
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1327 := z.EncBinary()
				_ = yym1327
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1309 || yy2arr1309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1329 := z.EncBinary()
				_ = yym1329
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1330 := z.EncBinary()
				_ = yym1330
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1309 || yy2arr1309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1309[7] {
					yym1332 := z.EncBinary()
					_ = yym1332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1309[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1309 || yy2arr1309 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1334 := z.DecBinary()
	_ = yym1334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1335 := r.ContainerType()
		if yyct1335 == codecSelferValueTypeMap1234 {
			yyl1335 := r.ReadMapStart()
			if yyl1335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1335, d)
			}
		} else if yyct1335 == codecSelferValueTypeArray1234 {
			yyl1335 := r.ReadArrayStart()
			if yyl1335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1336Slc
	var yyhl1336 bool = l >= 0
	for yyj1336 := 0; ; yyj1336++ {
		if yyhl1336 {
			if yyj1336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1336Slc = r.DecodeBytes(yys1336Slc, true, true)
		yys1336 := string(yys1336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1336 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1338 := &x.State
				yyv1338.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1339 := &x.LastTerminationState
				yyv1339.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1336)
		} // end switch yys1336
	} // end for yyj1336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1345 int
	var yyb1345 bool
	var yyhl1345 bool = l >= 0
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1347 := &x.State
		yyv1347.CodecDecodeSelf(d)
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1348 := &x.LastTerminationState
		yyv1348.CodecDecodeSelf(d)
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1345++
	if yyhl1345 {
		yyb1345 = yyj1345 > l
	} else {
		yyb1345 = r.CheckBreak()
	}
	if yyb1345 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1345++
		if yyhl1345 {
			yyb1345 = yyj1345 > l
		} else {
			yyb1345 = r.CheckBreak()
		}
		if yyb1345 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1345-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1354 := z.EncBinary()
	_ = yym1354
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1355 := z.DecBinary()
	_ = yym1355
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1356 := z.EncBinary()
	_ = yym1356
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1357 := z.DecBinary()
	_ = yym1357
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1358 := z.EncBinary()
		_ = yym1358
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1359 := !z.EncBinary()
			yy2arr1359 := z.EncBasicHandle().StructToArray
			var yyq1359 [6]bool
			_, _, _ = yysep1359, yyq1359, yy2arr1359
			const yyr1359 bool = false
			yyq1359[2] = true
			yyq1359[3] = true
			yyq1359[4] = x.Reason != ""
			yyq1359[5] = x.Message != ""
			var yynn1359 int
			if yyr1359 || yy2arr1359 {
				r.EncodeArrayStart(6)
			} else {
				yynn1359 = 2
				for _, b := range yyq1359 {
					if b {
						yynn1359++
					}
				}
				r.EncodeMapStart(yynn1359)
				yynn1359 = 0
			}
			if yyr1359 || yy2arr1359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1359 || yy2arr1359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1359 || yy2arr1359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1359[2] {
					yy1363 := &x.LastProbeTime
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1363) {
					} else if yym1364 {
						z.EncBinaryMarshal(yy1363)
					} else if !yym1364 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1363)
					} else {
						z.EncFallback(yy1363)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1359[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1365 := &x.LastProbeTime
					yym1366 := z.EncBinary()
					_ = yym1366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1365) {
					} else if yym1366 {
						z.EncBinaryMarshal(yy1365)
					} else if !yym1366 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1365)
					} else {
						z.EncFallback(yy1365)
					}
				}
			}
			if yyr1359 || yy2arr1359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1359[3] {
					yy1368 := &x.LastTransitionTime
					yym1369 := z.EncBinary()
					_ = yym1369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1368) {
					} else if yym1369 {
						z.EncBinaryMarshal(yy1368)
					} else if !yym1369 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1368)
					} else {
						z.EncFallback(yy1368)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1359[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1370 := &x.LastTransitionTime
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1370) {
					} else if yym1371 {
						z.EncBinaryMarshal(yy1370)
					} else if !yym1371 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1370)
					} else {
						z.EncFallback(yy1370)
					}
				}
			}
			if yyr1359 || yy2arr1359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1359[4] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1359[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1359 || yy2arr1359 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1359[5] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1359[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1359 || yy2arr1359 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1378 := z.DecBinary()
	_ = yym1378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1379 := r.ContainerType()
		if yyct1379 == codecSelferValueTypeMap1234 {
			yyl1379 := r.ReadMapStart()
			if yyl1379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1379, d)
			}
		} else if yyct1379 == codecSelferValueTypeArray1234 {
			yyl1379 := r.ReadArrayStart()
			if yyl1379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1380Slc
	var yyhl1380 bool = l >= 0
	for yyj1380 := 0; ; yyj1380++ {
		if yyhl1380 {
			if yyj1380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1380Slc = r.DecodeBytes(yys1380Slc, true, true)
		yys1380 := string(yys1380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1380 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1383 := &x.LastProbeTime
				yym1384 := z.DecBinary()
				_ = yym1384
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1383) {
				} else if yym1384 {
					z.DecBinaryUnmarshal(yyv1383)
				} else if !yym1384 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1383)
				} else {
					z.DecFallback(yyv1383, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1385 := &x.LastTransitionTime
				yym1386 := z.DecBinary()
				_ = yym1386
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1385) {
				} else if yym1386 {
					z.DecBinaryUnmarshal(yyv1385)
				} else if !yym1386 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1385)
				} else {
					z.DecFallback(yyv1385, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1380)
		} // end switch yys1380
	} // end for yyj1380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1389 int
	var yyb1389 bool
	var yyhl1389 bool = l >= 0
	yyj1389++
	if yyhl1389 {
		yyb1389 = yyj1389 > l
	} else {
		yyb1389 = r.CheckBreak()
	}
	if yyb1389 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1389++
	if yyhl1389 {
		yyb1389 = yyj1389 > l
	} else {
		yyb1389 = r.CheckBreak()
	}
	if yyb1389 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1389++
	if yyhl1389 {
		yyb1389 = yyj1389 > l
	} else {
		yyb1389 = r.CheckBreak()
	}
	if yyb1389 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1392 := &x.LastProbeTime
		yym1393 := z.DecBinary()
		_ = yym1393
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1392) {
		} else if yym1393 {
			z.DecBinaryUnmarshal(yyv1392)
		} else if !yym1393 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1392)
		} else {
			z.DecFallback(yyv1392, false)
		}
	}
	yyj1389++
	if yyhl1389 {
		yyb1389 = yyj1389 > l
	} else {
		yyb1389 = r.CheckBreak()
	}
	if yyb1389 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1394 := &x.LastTransitionTime
		yym1395 := z.DecBinary()
		_ = yym1395
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1394) {
		} else if yym1395 {
			z.DecBinaryUnmarshal(yyv1394)
		} else if !yym1395 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1394)
		} else {
			z.DecFallback(yyv1394, false)
		}
	}
	yyj1389++
	if yyhl1389 {
		yyb1389 = yyj1389 > l
	} else {
		yyb1389 = r.CheckBreak()
	}
	if yyb1389 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1389++
	if yyhl1389 {
		yyb1389 = yyj1389 > l
	} else {
		yyb1389 = r.CheckBreak()
	}
	if yyb1389 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1389++
		if yyhl1389 {
			yyb1389 = yyj1389 > l
		} else {
			yyb1389 = r.CheckBreak()
		}
		if yyb1389 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1389-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1398 := z.EncBinary()
	_ = yym1398
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1399 := z.DecBinary()
	_ = yym1399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1400 := z.EncBinary()
		_ = yym1400
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1401 := !z.EncBinary()
			yy2arr1401 := z.EncBasicHandle().StructToArray
			var yyq1401 [4]bool
			_, _, _ = yysep1401, yyq1401, yy2arr1401
			const yyr1401 bool = false
			yyq1401[0] = x.Kind != ""
			yyq1401[1] = x.APIVersion != ""
			yyq1401[2] = true
			var yynn1401 int
			if yyr1401 || yy2arr1401 {
				r.EncodeArrayStart(4)
			} else {
				yynn1401 = 1
				for _, b := range yyq1401 {
					if b {
						yynn1401++
					}
				}
				r.EncodeMapStart(yynn1401)
				yynn1401 = 0
			}
			if yyr1401 || yy2arr1401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1401[0] {
					yym1403 := z.EncBinary()
					_ = yym1403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1401[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1404 := z.EncBinary()
					_ = yym1404
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1401 || yy2arr1401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1401[1] {
					yym1406 := z.EncBinary()
					_ = yym1406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1401[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1401 || yy2arr1401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1401[2] {
					yy1409 := &x.ListMeta
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1409) {
					} else {
						z.EncFallback(yy1409)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1401[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1411 := &x.ListMeta
					yym1412 := z.EncBinary()
					_ = yym1412
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1411) {
					} else {
						z.EncFallback(yy1411)
					}
				}
			}
			if yyr1401 || yy2arr1401 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1414 := z.EncBinary()
					_ = yym1414
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1415 := z.EncBinary()
					_ = yym1415
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1401 || yy2arr1401 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1416 := z.DecBinary()
	_ = yym1416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1417 := r.ContainerType()
		if yyct1417 == codecSelferValueTypeMap1234 {
			yyl1417 := r.ReadMapStart()
			if yyl1417 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1417, d)
			}
		} else if yyct1417 == codecSelferValueTypeArray1234 {
			yyl1417 := r.ReadArrayStart()
			if yyl1417 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1417, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1418Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1418Slc
	var yyhl1418 bool = l >= 0
	for yyj1418 := 0; ; yyj1418++ {
		if yyhl1418 {
			if yyj1418 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1418Slc = r.DecodeBytes(yys1418Slc, true, true)
		yys1418 := string(yys1418Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1418 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1421 := &x.ListMeta
				yym1422 := z.DecBinary()
				_ = yym1422
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1421) {
				} else {
					z.DecFallback(yyv1421, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1423 := &x.Items
				yym1424 := z.DecBinary()
				_ = yym1424
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1423), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1418)
		} // end switch yys1418
	} // end for yyj1418
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1425 int
	var yyb1425 bool
	var yyhl1425 bool = l >= 0
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1428 := &x.ListMeta
		yym1429 := z.DecBinary()
		_ = yym1429
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1428) {
		} else {
			z.DecFallback(yyv1428, false)
		}
	}
	yyj1425++
	if yyhl1425 {
		yyb1425 = yyj1425 > l
	} else {
		yyb1425 = r.CheckBreak()
	}
	if yyb1425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1430 := &x.Items
		yym1431 := z.DecBinary()
		_ = yym1431
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1430), d)
		}
	}
	for {
		yyj1425++
		if yyhl1425 {
			yyb1425 = yyj1425 > l
		} else {
			yyb1425 = r.CheckBreak()
		}
		if yyb1425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1432 := z.EncBinary()
	_ = yym1432
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1433 := z.DecBinary()
	_ = yym1433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1434 := z.EncBinary()
		_ = yym1434
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1435 := !z.EncBinary()
			yy2arr1435 := z.EncBasicHandle().StructToArray
			var yyq1435 [11]bool
			_, _, _ = yysep1435, yyq1435, yy2arr1435
			const yyr1435 bool = false
			yyq1435[2] = x.RestartPolicy != ""
			yyq1435[3] = x.TerminationGracePeriodSeconds != nil
			yyq1435[4] = x.ActiveDeadlineSeconds != nil
			yyq1435[5] = x.DNSPolicy != ""
			yyq1435[6] = len(x.NodeSelector) != 0
			yyq1435[8] = x.NodeName != ""
			yyq1435[9] = x.SecurityContext != nil
			yyq1435[10] = len(x.ImagePullSecrets) != 0
			var yynn1435 int
			if yyr1435 || yy2arr1435 {
				r.EncodeArrayStart(11)
			} else {
				yynn1435 = 3
				for _, b := range yyq1435 {
					if b {
						yynn1435++
					}
				}
				r.EncodeMapStart(yynn1435)
				yynn1435 = 0
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1437 := z.EncBinary()
					_ = yym1437
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1438 := z.EncBinary()
					_ = yym1438
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1440 := z.EncBinary()
					_ = yym1440
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1441 := z.EncBinary()
					_ = yym1441
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1435[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1444 := *x.TerminationGracePeriodSeconds
						yym1445 := z.EncBinary()
						_ = yym1445
						if false {
						} else {
							r.EncodeInt(int64(yy1444))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1446 := *x.TerminationGracePeriodSeconds
						yym1447 := z.EncBinary()
						_ = yym1447
						if false {
						} else {
							r.EncodeInt(int64(yy1446))
						}
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1449 := *x.ActiveDeadlineSeconds
						yym1450 := z.EncBinary()
						_ = yym1450
						if false {
						} else {
							r.EncodeInt(int64(yy1449))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1451 := *x.ActiveDeadlineSeconds
						yym1452 := z.EncBinary()
						_ = yym1452
						if false {
						} else {
							r.EncodeInt(int64(yy1451))
						}
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1435[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1455 := z.EncBinary()
						_ = yym1455
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1456 := z.EncBinary()
						_ = yym1456
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1458 := z.EncBinary()
				_ = yym1458
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1459 := z.EncBinary()
				_ = yym1459
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[8] {
					yym1461 := z.EncBinary()
					_ = yym1461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1435[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1462 := z.EncBinary()
					_ = yym1462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1435[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1465 := z.EncBinary()
						_ = yym1465
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1435[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1466 := z.EncBinary()
						_ = yym1466
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1435 || yy2arr1435 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1467 := z.DecBinary()
	_ = yym1467
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1468 := r.ContainerType()
		if yyct1468 == codecSelferValueTypeMap1234 {
			yyl1468 := r.ReadMapStart()
			if yyl1468 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1468, d)
			}
		} else if yyct1468 == codecSelferValueTypeArray1234 {
			yyl1468 := r.ReadArrayStart()
			if yyl1468 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1468, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1469Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1469Slc
	var yyhl1469 bool = l >= 0
	for yyj1469 := 0; ; yyj1469++ {
		if yyhl1469 {
			if yyj1469 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1469Slc = r.DecodeBytes(yys1469Slc, true, true)
		yys1469 := string(yys1469Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1469 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1470 := &x.Volumes
				yym1471 := z.DecBinary()
				_ = yym1471
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1470), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1472 := &x.Containers
				yym1473 := z.DecBinary()
				_ = yym1473
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1472), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1476 := z.DecBinary()
				_ = yym1476
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1478 := z.DecBinary()
				_ = yym1478
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1480 := &x.NodeSelector
				yym1481 := z.DecBinary()
				_ = yym1481
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1480, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1485 := &x.ImagePullSecrets
				yym1486 := z.DecBinary()
				_ = yym1486
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1485), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1469)
		} // end switch yys1469
	} // end for yyj1469
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1487 int
	var yyb1487 bool
	var yyhl1487 bool = l >= 0
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1488 := &x.Volumes
		yym1489 := z.DecBinary()
		_ = yym1489
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1488), d)
		}
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1490 := &x.Containers
		yym1491 := z.DecBinary()
		_ = yym1491
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1490), d)
		}
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1496 := z.DecBinary()
		_ = yym1496
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1498 := &x.NodeSelector
		yym1499 := z.DecBinary()
		_ = yym1499
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1498, false, d)
		}
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1487++
	if yyhl1487 {
		yyb1487 = yyj1487 > l
	} else {
		yyb1487 = r.CheckBreak()
	}
	if yyb1487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1503 := &x.ImagePullSecrets
		yym1504 := z.DecBinary()
		_ = yym1504
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1503), d)
		}
	}
	for {
		yyj1487++
		if yyhl1487 {
			yyb1487 = yyj1487 > l
		} else {
			yyb1487 = r.CheckBreak()
		}
		if yyb1487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1505 := z.EncBinary()
		_ = yym1505
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1506 := !z.EncBinary()
			yy2arr1506 := z.EncBasicHandle().StructToArray
			var yyq1506 [8]bool
			_, _, _ = yysep1506, yyq1506, yy2arr1506
			const yyr1506 bool = false
			yyq1506[0] = x.HostNetwork != false
			yyq1506[1] = x.HostPID != false
			yyq1506[2] = x.HostIPC != false
			yyq1506[3] = x.SELinuxOptions != nil
			yyq1506[4] = x.RunAsUser != nil
			yyq1506[5] = x.RunAsNonRoot != nil
			yyq1506[6] = len(x.SupplementalGroups) != 0
			yyq1506[7] = x.FSGroup != nil
			var yynn1506 int
			if yyr1506 || yy2arr1506 {
				r.EncodeArrayStart(8)
			} else {
				yynn1506 = 0
				for _, b := range yyq1506 {
					if b {
						yynn1506++
					}
				}
				r.EncodeMapStart(yynn1506)
				yynn1506 = 0
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[0] {
					yym1508 := z.EncBinary()
					_ = yym1508
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1506[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[1] {
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1506[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1512 := z.EncBinary()
					_ = yym1512
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[2] {
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1506[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1515 := z.EncBinary()
					_ = yym1515
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1506[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1518 := *x.RunAsUser
						yym1519 := z.EncBinary()
						_ = yym1519
						if false {
						} else {
							r.EncodeInt(int64(yy1518))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1506[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1520 := *x.RunAsUser
						yym1521 := z.EncBinary()
						_ = yym1521
						if false {
						} else {
							r.EncodeInt(int64(yy1520))
						}
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1523 := *x.RunAsNonRoot
						yym1524 := z.EncBinary()
						_ = yym1524
						if false {
						} else {
							r.EncodeBool(bool(yy1523))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1506[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1525 := *x.RunAsNonRoot
						yym1526 := z.EncBinary()
						_ = yym1526
						if false {
						} else {
							r.EncodeBool(bool(yy1525))
						}
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1528 := z.EncBinary()
						_ = yym1528
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1506[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1506[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1531 := *x.FSGroup
						yym1532 := z.EncBinary()
						_ = yym1532
						if false {
						} else {
							r.EncodeInt(int64(yy1531))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1506[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1533 := *x.FSGroup
						yym1534 := z.EncBinary()
						_ = yym1534
						if false {
						} else {
							r.EncodeInt(int64(yy1533))
						}
					}
				}
			}
			if yyr1506 || yy2arr1506 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1535 := z.DecBinary()
	_ = yym1535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1536 := r.ContainerType()
		if yyct1536 == codecSelferValueTypeMap1234 {
			yyl1536 := r.ReadMapStart()
			if yyl1536 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1536, d)
			}
		} else if yyct1536 == codecSelferValueTypeArray1234 {
			yyl1536 := r.ReadArrayStart()
			if yyl1536 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1536, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1537Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1537Slc
	var yyhl1537 bool = l >= 0
	for yyj1537 := 0; ; yyj1537++ {
		if yyhl1537 {
			if yyj1537 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1537Slc = r.DecodeBytes(yys1537Slc, true, true)
		yys1537 := string(yys1537Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1537 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1543 := z.DecBinary()
				_ = yym1543
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1545 := z.DecBinary()
				_ = yym1545
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1546 := &x.SupplementalGroups
				yym1547 := z.DecBinary()
				_ = yym1547
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1546, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1549 := z.DecBinary()
				_ = yym1549
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1537)
		} // end switch yys1537
	} // end for yyj1537
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1550 int
	var yyb1550 bool
	var yyhl1550 bool = l >= 0
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1556 := z.DecBinary()
		_ = yym1556
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1558 := z.DecBinary()
		_ = yym1558
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1559 := &x.SupplementalGroups
		yym1560 := z.DecBinary()
		_ = yym1560
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1559, false, d)
		}
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1562 := z.DecBinary()
		_ = yym1562
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1550++
		if yyhl1550 {
			yyb1550 = yyj1550 > l
		} else {
			yyb1550 = r.CheckBreak()
		}
		if yyb1550 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1550-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1563 := z.EncBinary()
		_ = yym1563
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1564 := !z.EncBinary()
			yy2arr1564 := z.EncBasicHandle().StructToArray
			var yyq1564 [8]bool
			_, _, _ = yysep1564, yyq1564, yy2arr1564
			const yyr1564 bool = false
			yyq1564[0] = x.Phase != ""
			yyq1564[1] = len(x.Conditions) != 0
			yyq1564[2] = x.Message != ""
			yyq1564[3] = x.Reason != ""
			yyq1564[4] = x.HostIP != ""
			yyq1564[5] = x.PodIP != ""
			yyq1564[6] = x.StartTime != nil
			yyq1564[7] = len(x.ContainerStatuses) != 0
			var yynn1564 int
			if yyr1564 || yy2arr1564 {
				r.EncodeArrayStart(8)
			} else {
				yynn1564 = 0
				for _, b := range yyq1564 {
					if b {
						yynn1564++
					}
				}
				r.EncodeMapStart(yynn1564)
				yynn1564 = 0
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1564[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1567 := z.EncBinary()
						_ = yym1567
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1564[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1568 := z.EncBinary()
						_ = yym1568
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[2] {
					yym1570 := z.EncBinary()
					_ = yym1570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1564[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1571 := z.EncBinary()
					_ = yym1571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[3] {
					yym1573 := z.EncBinary()
					_ = yym1573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1564[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1574 := z.EncBinary()
					_ = yym1574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[4] {
					yym1576 := z.EncBinary()
					_ = yym1576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1564[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1577 := z.EncBinary()
					_ = yym1577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[5] {
					yym1579 := z.EncBinary()
					_ = yym1579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1564[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1580 := z.EncBinary()
					_ = yym1580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1582 := z.EncBinary()
						_ = yym1582
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1582 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1582 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1564[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1583 := z.EncBinary()
						_ = yym1583
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1583 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1583 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1585 := z.EncBinary()
						_ = yym1585
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1564[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1586 := z.EncBinary()
						_ = yym1586
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1587 := z.DecBinary()
	_ = yym1587
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1588 := r.ContainerType()
		if yyct1588 == codecSelferValueTypeMap1234 {
			yyl1588 := r.ReadMapStart()
			if yyl1588 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1588, d)
			}
		} else if yyct1588 == codecSelferValueTypeArray1234 {
			yyl1588 := r.ReadArrayStart()
			if yyl1588 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1588, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1589Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1589Slc
	var yyhl1589 bool = l >= 0
	for yyj1589 := 0; ; yyj1589++ {
		if yyhl1589 {
			if yyj1589 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1589Slc = r.DecodeBytes(yys1589Slc, true, true)
		yys1589 := string(yys1589Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1589 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1591 := &x.Conditions
				yym1592 := z.DecBinary()
				_ = yym1592
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1591), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1598 := z.DecBinary()
				_ = yym1598
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1598 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1598 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1599 := &x.ContainerStatuses
				yym1600 := z.DecBinary()
				_ = yym1600
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1599), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1589)
		} // end switch yys1589
	} // end for yyj1589
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1601 int
	var yyb1601 bool
	var yyhl1601 bool = l >= 0
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1603 := &x.Conditions
		yym1604 := z.DecBinary()
		_ = yym1604
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1603), d)
		}
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1610 := z.DecBinary()
		_ = yym1610
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1610 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1610 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1601++
	if yyhl1601 {
		yyb1601 = yyj1601 > l
	} else {
		yyb1601 = r.CheckBreak()
	}
	if yyb1601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1611 := &x.ContainerStatuses
		yym1612 := z.DecBinary()
		_ = yym1612
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1611), d)
		}
	}
	for {
		yyj1601++
		if yyhl1601 {
			yyb1601 = yyj1601 > l
		} else {
			yyb1601 = r.CheckBreak()
		}
		if yyb1601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1613 := z.EncBinary()
		_ = yym1613
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1614 := !z.EncBinary()
			yy2arr1614 := z.EncBasicHandle().StructToArray
			var yyq1614 [4]bool
			_, _, _ = yysep1614, yyq1614, yy2arr1614
			const yyr1614 bool = false
			yyq1614[0] = x.Kind != ""
			yyq1614[1] = x.APIVersion != ""
			yyq1614[2] = true
			yyq1614[3] = true
			var yynn1614 int
			if yyr1614 || yy2arr1614 {
				r.EncodeArrayStart(4)
			} else {
				yynn1614 = 0
				for _, b := range yyq1614 {
					if b {
						yynn1614++
					}
				}
				r.EncodeMapStart(yynn1614)
				yynn1614 = 0
			}
			if yyr1614 || yy2arr1614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1614[0] {
					yym1616 := z.EncBinary()
					_ = yym1616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1614[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1614 || yy2arr1614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1614[1] {
					yym1619 := z.EncBinary()
					_ = yym1619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1614[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1614 || yy2arr1614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1614[2] {
					yy1622 := &x.ObjectMeta
					yy1622.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1614[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1623 := &x.ObjectMeta
					yy1623.CodecEncodeSelf(e)
				}
			}
			if yyr1614 || yy2arr1614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1614[3] {
					yy1625 := &x.Status
					yy1625.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1614[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1626 := &x.Status
					yy1626.CodecEncodeSelf(e)
				}
			}
			if yyr1614 || yy2arr1614 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1627 := z.DecBinary()
	_ = yym1627
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1628 := r.ContainerType()
		if yyct1628 == codecSelferValueTypeMap1234 {
			yyl1628 := r.ReadMapStart()
			if yyl1628 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1628, d)
			}
		} else if yyct1628 == codecSelferValueTypeArray1234 {
			yyl1628 := r.ReadArrayStart()
			if yyl1628 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1628, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1629Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1629Slc
	var yyhl1629 bool = l >= 0
	for yyj1629 := 0; ; yyj1629++ {
		if yyhl1629 {
			if yyj1629 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1629Slc = r.DecodeBytes(yys1629Slc, true, true)
		yys1629 := string(yys1629Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1629 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1632 := &x.ObjectMeta
				yyv1632.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1633 := &x.Status
				yyv1633.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1629)
		} // end switch yys1629
	} // end for yyj1629
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1634 int
	var yyb1634 bool
	var yyhl1634 bool = l >= 0
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1637 := &x.ObjectMeta
		yyv1637.CodecDecodeSelf(d)
	}
	yyj1634++
	if yyhl1634 {
		yyb1634 = yyj1634 > l
	} else {
		yyb1634 = r.CheckBreak()
	}
	if yyb1634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1638 := &x.Status
		yyv1638.CodecDecodeSelf(d)
	}
	for {
		yyj1634++
		if yyhl1634 {
			yyb1634 = yyj1634 > l
		} else {
			yyb1634 = r.CheckBreak()
		}
		if yyb1634 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1634-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1639 := z.EncBinary()
		_ = yym1639
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1640 := !z.EncBinary()
			yy2arr1640 := z.EncBasicHandle().StructToArray
			var yyq1640 [5]bool
			_, _, _ = yysep1640, yyq1640, yy2arr1640
			const yyr1640 bool = false
			yyq1640[0] = x.Kind != ""
			yyq1640[1] = x.APIVersion != ""
			yyq1640[2] = true
			yyq1640[3] = true
			yyq1640[4] = true
			var yynn1640 int
			if yyr1640 || yy2arr1640 {
				r.EncodeArrayStart(5)
			} else {
				yynn1640 = 0
				for _, b := range yyq1640 {
					if b {
						yynn1640++
					}
				}
				r.EncodeMapStart(yynn1640)
				yynn1640 = 0
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1640[0] {
					yym1642 := z.EncBinary()
					_ = yym1642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1640[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1643 := z.EncBinary()
					_ = yym1643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1640[1] {
					yym1645 := z.EncBinary()
					_ = yym1645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1640[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1646 := z.EncBinary()
					_ = yym1646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1640[2] {
					yy1648 := &x.ObjectMeta
					yy1648.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1640[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1649 := &x.ObjectMeta
					yy1649.CodecEncodeSelf(e)
				}
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1640[3] {
					yy1651 := &x.Spec
					yy1651.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1640[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1652 := &x.Spec
					yy1652.CodecEncodeSelf(e)
				}
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1640[4] {
					yy1654 := &x.Status
					yy1654.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1640[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1655 := &x.Status
					yy1655.CodecEncodeSelf(e)
				}
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1656 := z.DecBinary()
	_ = yym1656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1657 := r.ContainerType()
		if yyct1657 == codecSelferValueTypeMap1234 {
			yyl1657 := r.ReadMapStart()
			if yyl1657 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1657, d)
			}
		} else if yyct1657 == codecSelferValueTypeArray1234 {
			yyl1657 := r.ReadArrayStart()
			if yyl1657 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1657, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1658Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1658Slc
	var yyhl1658 bool = l >= 0
	for yyj1658 := 0; ; yyj1658++ {
		if yyhl1658 {
			if yyj1658 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1658Slc = r.DecodeBytes(yys1658Slc, true, true)
		yys1658 := string(yys1658Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1658 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1661 := &x.ObjectMeta
				yyv1661.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1662 := &x.Spec
				yyv1662.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1663 := &x.Status
				yyv1663.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1658)
		} // end switch yys1658
	} // end for yyj1658
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1664 int
	var yyb1664 bool
	var yyhl1664 bool = l >= 0
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1667 := &x.ObjectMeta
		yyv1667.CodecDecodeSelf(d)
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1668 := &x.Spec
		yyv1668.CodecDecodeSelf(d)
	}
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1669 := &x.Status
		yyv1669.CodecDecodeSelf(d)
	}
	for {
		yyj1664++
		if yyhl1664 {
			yyb1664 = yyj1664 > l
		} else {
			yyb1664 = r.CheckBreak()
		}
		if yyb1664 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1664-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1670 := z.EncBinary()
		_ = yym1670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1671 := !z.EncBinary()
			yy2arr1671 := z.EncBasicHandle().StructToArray
			var yyq1671 [2]bool
			_, _, _ = yysep1671, yyq1671, yy2arr1671
			const yyr1671 bool = false
			yyq1671[0] = true
			yyq1671[1] = true
			var yynn1671 int
			if yyr1671 || yy2arr1671 {
				r.EncodeArrayStart(2)
			} else {
				yynn1671 = 0
				for _, b := range yyq1671 {
					if b {
						yynn1671++
					}
				}
				r.EncodeMapStart(yynn1671)
				yynn1671 = 0
			}
			if yyr1671 || yy2arr1671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1671[0] {
					yy1673 := &x.ObjectMeta
					yy1673.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1671[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1674 := &x.ObjectMeta
					yy1674.CodecEncodeSelf(e)
				}
			}
			if yyr1671 || yy2arr1671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1671[1] {
					yy1676 := &x.Spec
					yy1676.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1671[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1677 := &x.Spec
					yy1677.CodecEncodeSelf(e)
				}
			}
			if yyr1671 || yy2arr1671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1678 := z.DecBinary()
	_ = yym1678
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1679 := r.ContainerType()
		if yyct1679 == codecSelferValueTypeMap1234 {
			yyl1679 := r.ReadMapStart()
			if yyl1679 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1679, d)
			}
		} else if yyct1679 == codecSelferValueTypeArray1234 {
			yyl1679 := r.ReadArrayStart()
			if yyl1679 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1679, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1680Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1680Slc
	var yyhl1680 bool = l >= 0
	for yyj1680 := 0; ; yyj1680++ {
		if yyhl1680 {
			if yyj1680 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1680Slc = r.DecodeBytes(yys1680Slc, true, true)
		yys1680 := string(yys1680Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1680 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1681 := &x.ObjectMeta
				yyv1681.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1682 := &x.Spec
				yyv1682.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1680)
		} // end switch yys1680
	} // end for yyj1680
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1683 int
	var yyb1683 bool
	var yyhl1683 bool = l >= 0
	yyj1683++
	if yyhl1683 {
		yyb1683 = yyj1683 > l
	} else {
		yyb1683 = r.CheckBreak()
	}
	if yyb1683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1684 := &x.ObjectMeta
		yyv1684.CodecDecodeSelf(d)
	}
	yyj1683++
	if yyhl1683 {
		yyb1683 = yyj1683 > l
	} else {
		yyb1683 = r.CheckBreak()
	}
	if yyb1683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1685 := &x.Spec
		yyv1685.CodecDecodeSelf(d)
	}
	for {
		yyj1683++
		if yyhl1683 {
			yyb1683 = yyj1683 > l
		} else {
			yyb1683 = r.CheckBreak()
		}
		if yyb1683 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1683-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1686 := z.EncBinary()
		_ = yym1686
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1687 := !z.EncBinary()
			yy2arr1687 := z.EncBasicHandle().StructToArray
			var yyq1687 [4]bool
			_, _, _ = yysep1687, yyq1687, yy2arr1687
			const yyr1687 bool = false
			yyq1687[0] = x.Kind != ""
			yyq1687[1] = x.APIVersion != ""
			yyq1687[2] = true
			yyq1687[3] = true
			var yynn1687 int
			if yyr1687 || yy2arr1687 {
				r.EncodeArrayStart(4)
			} else {
				yynn1687 = 0
				for _, b := range yyq1687 {
					if b {
						yynn1687++
					}
				}
				r.EncodeMapStart(yynn1687)
				yynn1687 = 0
			}
			if yyr1687 || yy2arr1687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1687[0] {
					yym1689 := z.EncBinary()
					_ = yym1689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1687[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1687 || yy2arr1687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1687[1] {
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1687[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1687 || yy2arr1687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1687[2] {
					yy1695 := &x.ObjectMeta
					yy1695.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1687[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1696 := &x.ObjectMeta
					yy1696.CodecEncodeSelf(e)
				}
			}
			if yyr1687 || yy2arr1687 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1687[3] {
					yy1698 := &x.Template
					yy1698.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1687[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1699 := &x.Template
					yy1699.CodecEncodeSelf(e)
				}
			}
			if yyr1687 || yy2arr1687 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1700 := z.DecBinary()
	_ = yym1700
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1701 := r.ContainerType()
		if yyct1701 == codecSelferValueTypeMap1234 {
			yyl1701 := r.ReadMapStart()
			if yyl1701 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1701, d)
			}
		} else if yyct1701 == codecSelferValueTypeArray1234 {
			yyl1701 := r.ReadArrayStart()
			if yyl1701 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1701, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1702Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1702Slc
	var yyhl1702 bool = l >= 0
	for yyj1702 := 0; ; yyj1702++ {
		if yyhl1702 {
			if yyj1702 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1702Slc = r.DecodeBytes(yys1702Slc, true, true)
		yys1702 := string(yys1702Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1702 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1705 := &x.ObjectMeta
				yyv1705.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1706 := &x.Template
				yyv1706.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1702)
		} // end switch yys1702
	} // end for yyj1702
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1707 int
	var yyb1707 bool
	var yyhl1707 bool = l >= 0
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1710 := &x.ObjectMeta
		yyv1710.CodecDecodeSelf(d)
	}
	yyj1707++
	if yyhl1707 {
		yyb1707 = yyj1707 > l
	} else {
		yyb1707 = r.CheckBreak()
	}
	if yyb1707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1711 := &x.Template
		yyv1711.CodecDecodeSelf(d)
	}
	for {
		yyj1707++
		if yyhl1707 {
			yyb1707 = yyj1707 > l
		} else {
			yyb1707 = r.CheckBreak()
		}
		if yyb1707 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1707-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1712 := z.EncBinary()
		_ = yym1712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1713 := !z.EncBinary()
			yy2arr1713 := z.EncBasicHandle().StructToArray
			var yyq1713 [4]bool
			_, _, _ = yysep1713, yyq1713, yy2arr1713
			const yyr1713 bool = false
			yyq1713[0] = x.Kind != ""
			yyq1713[1] = x.APIVersion != ""
			yyq1713[2] = true
			var yynn1713 int
			if yyr1713 || yy2arr1713 {
				r.EncodeArrayStart(4)
			} else {
				yynn1713 = 1
				for _, b := range yyq1713 {
					if b {
						yynn1713++
					}
				}
				r.EncodeMapStart(yynn1713)
				yynn1713 = 0
			}
			if yyr1713 || yy2arr1713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1713[0] {
					yym1715 := z.EncBinary()
					_ = yym1715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1713[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1716 := z.EncBinary()
					_ = yym1716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1713 || yy2arr1713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1713[1] {
					yym1718 := z.EncBinary()
					_ = yym1718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1713[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1719 := z.EncBinary()
					_ = yym1719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1713 || yy2arr1713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1713[2] {
					yy1721 := &x.ListMeta
					yym1722 := z.EncBinary()
					_ = yym1722
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1721) {
					} else {
						z.EncFallback(yy1721)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1713[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1723 := &x.ListMeta
					yym1724 := z.EncBinary()
					_ = yym1724
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1723) {
					} else {
						z.EncFallback(yy1723)
					}
				}
			}
			if yyr1713 || yy2arr1713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1727 := z.EncBinary()
					_ = yym1727
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1713 || yy2arr1713 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1728 := z.DecBinary()
	_ = yym1728
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1729 := r.ContainerType()
		if yyct1729 == codecSelferValueTypeMap1234 {
			yyl1729 := r.ReadMapStart()
			if yyl1729 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1729, d)
			}
		} else if yyct1729 == codecSelferValueTypeArray1234 {
			yyl1729 := r.ReadArrayStart()
			if yyl1729 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1729, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1730Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1730Slc
	var yyhl1730 bool = l >= 0
	for yyj1730 := 0; ; yyj1730++ {
		if yyhl1730 {
			if yyj1730 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1730Slc = r.DecodeBytes(yys1730Slc, true, true)
		yys1730 := string(yys1730Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1730 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1733 := &x.ListMeta
				yym1734 := z.DecBinary()
				_ = yym1734
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1733) {
				} else {
					z.DecFallback(yyv1733, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1735 := &x.Items
				yym1736 := z.DecBinary()
				_ = yym1736
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1735), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1730)
		} // end switch yys1730
	} // end for yyj1730
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1737 int
	var yyb1737 bool
	var yyhl1737 bool = l >= 0
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1740 := &x.ListMeta
		yym1741 := z.DecBinary()
		_ = yym1741
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1740) {
		} else {
			z.DecFallback(yyv1740, false)
		}
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1742 := &x.Items
		yym1743 := z.DecBinary()
		_ = yym1743
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1742), d)
		}
	}
	for {
		yyj1737++
		if yyhl1737 {
			yyb1737 = yyj1737 > l
		} else {
			yyb1737 = r.CheckBreak()
		}
		if yyb1737 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1737-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1744 := z.EncBinary()
		_ = yym1744
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1745 := !z.EncBinary()
			yy2arr1745 := z.EncBasicHandle().StructToArray
			var yyq1745 [3]bool
			_, _, _ = yysep1745, yyq1745, yy2arr1745
			const yyr1745 bool = false
			yyq1745[2] = x.Template != nil
			var yynn1745 int
			if yyr1745 || yy2arr1745 {
				r.EncodeArrayStart(3)
			} else {
				yynn1745 = 2
				for _, b := range yyq1745 {
					if b {
						yynn1745++
					}
				}
				r.EncodeMapStart(yynn1745)
				yynn1745 = 0
			}
			if yyr1745 || yy2arr1745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1747 := z.EncBinary()
				_ = yym1747
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1748 := z.EncBinary()
				_ = yym1748
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1745 || yy2arr1745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1750 := z.EncBinary()
					_ = yym1750
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1751 := z.EncBinary()
					_ = yym1751
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1745 || yy2arr1745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1745[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1745[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1745 || yy2arr1745 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1753 := z.DecBinary()
	_ = yym1753
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1754 := r.ContainerType()
		if yyct1754 == codecSelferValueTypeMap1234 {
			yyl1754 := r.ReadMapStart()
			if yyl1754 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1754, d)
			}
		} else if yyct1754 == codecSelferValueTypeArray1234 {
			yyl1754 := r.ReadArrayStart()
			if yyl1754 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1754, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1755Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1755Slc
	var yyhl1755 bool = l >= 0
	for yyj1755 := 0; ; yyj1755++ {
		if yyhl1755 {
			if yyj1755 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1755Slc = r.DecodeBytes(yys1755Slc, true, true)
		yys1755 := string(yys1755Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1755 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1757 := &x.Selector
				yym1758 := z.DecBinary()
				_ = yym1758
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1757, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1755)
		} // end switch yys1755
	} // end for yyj1755
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1760 int
	var yyb1760 bool
	var yyhl1760 bool = l >= 0
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1762 := &x.Selector
		yym1763 := z.DecBinary()
		_ = yym1763
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1762, false, d)
		}
	}
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1760++
		if yyhl1760 {
			yyb1760 = yyj1760 > l
		} else {
			yyb1760 = r.CheckBreak()
		}
		if yyb1760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1765 := z.EncBinary()
		_ = yym1765
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1766 := !z.EncBinary()
			yy2arr1766 := z.EncBasicHandle().StructToArray
			var yyq1766 [2]bool
			_, _, _ = yysep1766, yyq1766, yy2arr1766
			const yyr1766 bool = false
			yyq1766[1] = x.ObservedGeneration != 0
			var yynn1766 int
			if yyr1766 || yy2arr1766 {
				r.EncodeArrayStart(2)
			} else {
				yynn1766 = 1
				for _, b := range yyq1766 {
					if b {
						yynn1766++
					}
				}
				r.EncodeMapStart(yynn1766)
				yynn1766 = 0
			}
			if yyr1766 || yy2arr1766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1768 := z.EncBinary()
				_ = yym1768
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1769 := z.EncBinary()
				_ = yym1769
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1766 || yy2arr1766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1766[1] {
					yym1771 := z.EncBinary()
					_ = yym1771
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1766[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1772 := z.EncBinary()
					_ = yym1772
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1766 || yy2arr1766 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1773 := z.DecBinary()
	_ = yym1773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1774 := r.ContainerType()
		if yyct1774 == codecSelferValueTypeMap1234 {
			yyl1774 := r.ReadMapStart()
			if yyl1774 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1774, d)
			}
		} else if yyct1774 == codecSelferValueTypeArray1234 {
			yyl1774 := r.ReadArrayStart()
			if yyl1774 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1774, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1775Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1775Slc
	var yyhl1775 bool = l >= 0
	for yyj1775 := 0; ; yyj1775++ {
		if yyhl1775 {
			if yyj1775 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1775Slc = r.DecodeBytes(yys1775Slc, true, true)
		yys1775 := string(yys1775Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1775 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1775)
		} // end switch yys1775
	} // end for yyj1775
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1778 int
	var yyb1778 bool
	var yyhl1778 bool = l >= 0
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1778++
	if yyhl1778 {
		yyb1778 = yyj1778 > l
	} else {
		yyb1778 = r.CheckBreak()
	}
	if yyb1778 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1778++
		if yyhl1778 {
			yyb1778 = yyj1778 > l
		} else {
			yyb1778 = r.CheckBreak()
		}
		if yyb1778 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1778-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1781 := z.EncBinary()
		_ = yym1781
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1782 := !z.EncBinary()
			yy2arr1782 := z.EncBasicHandle().StructToArray
			var yyq1782 [5]bool
			_, _, _ = yysep1782, yyq1782, yy2arr1782
			const yyr1782 bool = false
			yyq1782[0] = x.Kind != ""
			yyq1782[1] = x.APIVersion != ""
			yyq1782[2] = true
			yyq1782[3] = true
			yyq1782[4] = true
			var yynn1782 int
			if yyr1782 || yy2arr1782 {
				r.EncodeArrayStart(5)
			} else {
				yynn1782 = 0
				for _, b := range yyq1782 {
					if b {
						yynn1782++
					}
				}
				r.EncodeMapStart(yynn1782)
				yynn1782 = 0
			}
			if yyr1782 || yy2arr1782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1782[0] {
					yym1784 := z.EncBinary()
					_ = yym1784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1782[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1785 := z.EncBinary()
					_ = yym1785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1782 || yy2arr1782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1782[1] {
					yym1787 := z.EncBinary()
					_ = yym1787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1782[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1788 := z.EncBinary()
					_ = yym1788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1782 || yy2arr1782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1782[2] {
					yy1790 := &x.ObjectMeta
					yy1790.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1782[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1791 := &x.ObjectMeta
					yy1791.CodecEncodeSelf(e)
				}
			}
			if yyr1782 || yy2arr1782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1782[3] {
					yy1793 := &x.Spec
					yy1793.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1782[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1794 := &x.Spec
					yy1794.CodecEncodeSelf(e)
				}
			}
			if yyr1782 || yy2arr1782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1782[4] {
					yy1796 := &x.Status
					yy1796.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1782[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1797 := &x.Status
					yy1797.CodecEncodeSelf(e)
				}
			}
			if yyr1782 || yy2arr1782 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1798 := z.DecBinary()
	_ = yym1798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1799 := r.ContainerType()
		if yyct1799 == codecSelferValueTypeMap1234 {
			yyl1799 := r.ReadMapStart()
			if yyl1799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1799, d)
			}
		} else if yyct1799 == codecSelferValueTypeArray1234 {
			yyl1799 := r.ReadArrayStart()
			if yyl1799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1800Slc
	var yyhl1800 bool = l >= 0
	for yyj1800 := 0; ; yyj1800++ {
		if yyhl1800 {
			if yyj1800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1800Slc = r.DecodeBytes(yys1800Slc, true, true)
		yys1800 := string(yys1800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1800 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1803 := &x.ObjectMeta
				yyv1803.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1804 := &x.Spec
				yyv1804.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1805 := &x.Status
				yyv1805.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1800)
		} // end switch yys1800
	} // end for yyj1800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1806 int
	var yyb1806 bool
	var yyhl1806 bool = l >= 0
	yyj1806++
	if yyhl1806 {
		yyb1806 = yyj1806 > l
	} else {
		yyb1806 = r.CheckBreak()
	}
	if yyb1806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1806++
	if yyhl1806 {
		yyb1806 = yyj1806 > l
	} else {
		yyb1806 = r.CheckBreak()
	}
	if yyb1806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1806++
	if yyhl1806 {
		yyb1806 = yyj1806 > l
	} else {
		yyb1806 = r.CheckBreak()
	}
	if yyb1806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1809 := &x.ObjectMeta
		yyv1809.CodecDecodeSelf(d)
	}
	yyj1806++
	if yyhl1806 {
		yyb1806 = yyj1806 > l
	} else {
		yyb1806 = r.CheckBreak()
	}
	if yyb1806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1810 := &x.Spec
		yyv1810.CodecDecodeSelf(d)
	}
	yyj1806++
	if yyhl1806 {
		yyb1806 = yyj1806 > l
	} else {
		yyb1806 = r.CheckBreak()
	}
	if yyb1806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1811 := &x.Status
		yyv1811.CodecDecodeSelf(d)
	}
	for {
		yyj1806++
		if yyhl1806 {
			yyb1806 = yyj1806 > l
		} else {
			yyb1806 = r.CheckBreak()
		}
		if yyb1806 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1806-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1812 := z.EncBinary()
		_ = yym1812
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1813 := !z.EncBinary()
			yy2arr1813 := z.EncBasicHandle().StructToArray
			var yyq1813 [4]bool
			_, _, _ = yysep1813, yyq1813, yy2arr1813
			const yyr1813 bool = false
			yyq1813[0] = x.Kind != ""
			yyq1813[1] = x.APIVersion != ""
			yyq1813[2] = true
			var yynn1813 int
			if yyr1813 || yy2arr1813 {
				r.EncodeArrayStart(4)
			} else {
				yynn1813 = 1
				for _, b := range yyq1813 {
					if b {
						yynn1813++
					}
				}
				r.EncodeMapStart(yynn1813)
				yynn1813 = 0
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1813[0] {
					yym1815 := z.EncBinary()
					_ = yym1815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1813[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1816 := z.EncBinary()
					_ = yym1816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1813[1] {
					yym1818 := z.EncBinary()
					_ = yym1818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1813[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1819 := z.EncBinary()
					_ = yym1819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1813[2] {
					yy1821 := &x.ListMeta
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1821) {
					} else {
						z.EncFallback(yy1821)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1813[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1823 := &x.ListMeta
					yym1824 := z.EncBinary()
					_ = yym1824
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1823) {
					} else {
						z.EncFallback(yy1823)
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1826 := z.EncBinary()
					_ = yym1826
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1827 := z.EncBinary()
					_ = yym1827
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr1813 || yy2arr1813 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1828 := z.DecBinary()
	_ = yym1828
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1829 := r.ContainerType()
		if yyct1829 == codecSelferValueTypeMap1234 {
			yyl1829 := r.ReadMapStart()
			if yyl1829 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1829, d)
			}
		} else if yyct1829 == codecSelferValueTypeArray1234 {
			yyl1829 := r.ReadArrayStart()
			if yyl1829 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1829, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1830Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1830Slc
	var yyhl1830 bool = l >= 0
	for yyj1830 := 0; ; yyj1830++ {
		if yyhl1830 {
			if yyj1830 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1830Slc = r.DecodeBytes(yys1830Slc, true, true)
		yys1830 := string(yys1830Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1830 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1833 := &x.ListMeta
				yym1834 := z.DecBinary()
				_ = yym1834
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1833) {
				} else {
					z.DecFallback(yyv1833, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1835 := &x.Items
				yym1836 := z.DecBinary()
				_ = yym1836
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1835), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1830)
		} // end switch yys1830
	} // end for yyj1830
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1837 int
	var yyb1837 bool
	var yyhl1837 bool = l >= 0
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1840 := &x.ListMeta
		yym1841 := z.DecBinary()
		_ = yym1841
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1840) {
		} else {
			z.DecFallback(yyv1840, false)
		}
	}
	yyj1837++
	if yyhl1837 {
		yyb1837 = yyj1837 > l
	} else {
		yyb1837 = r.CheckBreak()
	}
	if yyb1837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1842 := &x.Items
		yym1843 := z.DecBinary()
		_ = yym1843
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1842), d)
		}
	}
	for {
		yyj1837++
		if yyhl1837 {
			yyb1837 = yyj1837 > l
		} else {
			yyb1837 = r.CheckBreak()
		}
		if yyb1837 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1837-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1844 := z.EncBinary()
		_ = yym1844
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1845 := !z.EncBinary()
			yy2arr1845 := z.EncBasicHandle().StructToArray
			var yyq1845 [4]bool
			_, _, _ = yysep1845, yyq1845, yy2arr1845
			const yyr1845 bool = false
			yyq1845[0] = x.Kind != ""
			yyq1845[1] = x.APIVersion != ""
			yyq1845[2] = true
			var yynn1845 int
			if yyr1845 || yy2arr1845 {
				r.EncodeArrayStart(4)
			} else {
				yynn1845 = 1
				for _, b := range yyq1845 {
					if b {
						yynn1845++
					}
				}
				r.EncodeMapStart(yynn1845)
				yynn1845 = 0
			}
			if yyr1845 || yy2arr1845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1845[0] {
					yym1847 := z.EncBinary()
					_ = yym1847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1845[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1845 || yy2arr1845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1845[1] {
					yym1850 := z.EncBinary()
					_ = yym1850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1845[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1845 || yy2arr1845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1845[2] {
					yy1853 := &x.ListMeta
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1853) {
					} else {
						z.EncFallback(yy1853)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1845[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1855 := &x.ListMeta
					yym1856 := z.EncBinary()
					_ = yym1856
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1855) {
					} else {
						z.EncFallback(yy1855)
					}
				}
			}
			if yyr1845 || yy2arr1845 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1859 := z.EncBinary()
					_ = yym1859
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr1845 || yy2arr1845 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1860 := z.DecBinary()
	_ = yym1860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1861 := r.ContainerType()
		if yyct1861 == codecSelferValueTypeMap1234 {
			yyl1861 := r.ReadMapStart()
			if yyl1861 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1861, d)
			}
		} else if yyct1861 == codecSelferValueTypeArray1234 {
			yyl1861 := r.ReadArrayStart()
			if yyl1861 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1862Slc
	var yyhl1862 bool = l >= 0
	for yyj1862 := 0; ; yyj1862++ {
		if yyhl1862 {
			if yyj1862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1862Slc = r.DecodeBytes(yys1862Slc, true, true)
		yys1862 := string(yys1862Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1862 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1865 := &x.ListMeta
				yym1866 := z.DecBinary()
				_ = yym1866
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1865) {
				} else {
					z.DecFallback(yyv1865, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1867 := &x.Items
				yym1868 := z.DecBinary()
				_ = yym1868
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1867), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1862)
		} // end switch yys1862
	} // end for yyj1862
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1869 int
	var yyb1869 bool
	var yyhl1869 bool = l >= 0
	yyj1869++
	if yyhl1869 {
		yyb1869 = yyj1869 > l
	} else {
		yyb1869 = r.CheckBreak()
	}
	if yyb1869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1869++
	if yyhl1869 {
		yyb1869 = yyj1869 > l
	} else {
		yyb1869 = r.CheckBreak()
	}
	if yyb1869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1869++
	if yyhl1869 {
		yyb1869 = yyj1869 > l
	} else {
		yyb1869 = r.CheckBreak()
	}
	if yyb1869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1872 := &x.ListMeta
		yym1873 := z.DecBinary()
		_ = yym1873
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1872) {
		} else {
			z.DecFallback(yyv1872, false)
		}
	}
	yyj1869++
	if yyhl1869 {
		yyb1869 = yyj1869 > l
	} else {
		yyb1869 = r.CheckBreak()
	}
	if yyb1869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1874 := &x.Items
		yym1875 := z.DecBinary()
		_ = yym1875
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1874), d)
		}
	}
	for {
		yyj1869++
		if yyhl1869 {
			yyb1869 = yyj1869 > l
		} else {
			yyb1869 = r.CheckBreak()
		}
		if yyb1869 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1869-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1876 := z.EncBinary()
	_ = yym1876
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1877 := z.DecBinary()
	_ = yym1877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1878 := z.EncBinary()
	_ = yym1878
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1879 := z.DecBinary()
	_ = yym1879
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1880 := z.EncBinary()
		_ = yym1880
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1881 := !z.EncBinary()
			yy2arr1881 := z.EncBasicHandle().StructToArray
			var yyq1881 [1]bool
			_, _, _ = yysep1881, yyq1881, yy2arr1881
			const yyr1881 bool = false
			yyq1881[0] = true
			var yynn1881 int
			if yyr1881 || yy2arr1881 {
				r.EncodeArrayStart(1)
			} else {
				yynn1881 = 0
				for _, b := range yyq1881 {
					if b {
						yynn1881++
					}
				}
				r.EncodeMapStart(yynn1881)
				yynn1881 = 0
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1881[0] {
					yy1883 := &x.LoadBalancer
					yy1883.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1881[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1884 := &x.LoadBalancer
					yy1884.CodecEncodeSelf(e)
				}
			}
			if yyr1881 || yy2arr1881 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1885 := z.DecBinary()
	_ = yym1885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1886 := r.ContainerType()
		if yyct1886 == codecSelferValueTypeMap1234 {
			yyl1886 := r.ReadMapStart()
			if yyl1886 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1886, d)
			}
		} else if yyct1886 == codecSelferValueTypeArray1234 {
			yyl1886 := r.ReadArrayStart()
			if yyl1886 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1887Slc
	var yyhl1887 bool = l >= 0
	for yyj1887 := 0; ; yyj1887++ {
		if yyhl1887 {
			if yyj1887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1887Slc = r.DecodeBytes(yys1887Slc, true, true)
		yys1887 := string(yys1887Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1887 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1888 := &x.LoadBalancer
				yyv1888.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1887)
		} // end switch yys1887
	} // end for yyj1887
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1889 int
	var yyb1889 bool
	var yyhl1889 bool = l >= 0
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1890 := &x.LoadBalancer
		yyv1890.CodecDecodeSelf(d)
	}
	for {
		yyj1889++
		if yyhl1889 {
			yyb1889 = yyj1889 > l
		} else {
			yyb1889 = r.CheckBreak()
		}
		if yyb1889 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1889-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1891 := z.EncBinary()
		_ = yym1891
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1892 := !z.EncBinary()
			yy2arr1892 := z.EncBasicHandle().StructToArray
			var yyq1892 [1]bool
			_, _, _ = yysep1892, yyq1892, yy2arr1892
			const yyr1892 bool = false
			yyq1892[0] = len(x.Ingress) != 0
			var yynn1892 int
			if yyr1892 || yy2arr1892 {
				r.EncodeArrayStart(1)
			} else {
				yynn1892 = 0
				for _, b := range yyq1892 {
					if b {
						yynn1892++
					}
				}
				r.EncodeMapStart(yynn1892)
				yynn1892 = 0
			}
			if yyr1892 || yy2arr1892 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1892[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1894 := z.EncBinary()
						_ = yym1894
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1892[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1895 := z.EncBinary()
						_ = yym1895
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1892 || yy2arr1892 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1896 := z.DecBinary()
	_ = yym1896
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1897 := r.ContainerType()
		if yyct1897 == codecSelferValueTypeMap1234 {
			yyl1897 := r.ReadMapStart()
			if yyl1897 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1897, d)
			}
		} else if yyct1897 == codecSelferValueTypeArray1234 {
			yyl1897 := r.ReadArrayStart()
			if yyl1897 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1897, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1898Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1898Slc
	var yyhl1898 bool = l >= 0
	for yyj1898 := 0; ; yyj1898++ {
		if yyhl1898 {
			if yyj1898 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1898Slc = r.DecodeBytes(yys1898Slc, true, true)
		yys1898 := string(yys1898Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1898 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1899 := &x.Ingress
				yym1900 := z.DecBinary()
				_ = yym1900
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1899), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1898)
		} // end switch yys1898
	} // end for yyj1898
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1901 int
	var yyb1901 bool
	var yyhl1901 bool = l >= 0
	yyj1901++
	if yyhl1901 {
		yyb1901 = yyj1901 > l
	} else {
		yyb1901 = r.CheckBreak()
	}
	if yyb1901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1902 := &x.Ingress
		yym1903 := z.DecBinary()
		_ = yym1903
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1902), d)
		}
	}
	for {
		yyj1901++
		if yyhl1901 {
			yyb1901 = yyj1901 > l
		} else {
			yyb1901 = r.CheckBreak()
		}
		if yyb1901 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1901-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1904 := z.EncBinary()
		_ = yym1904
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1905 := !z.EncBinary()
			yy2arr1905 := z.EncBasicHandle().StructToArray
			var yyq1905 [2]bool
			_, _, _ = yysep1905, yyq1905, yy2arr1905
			const yyr1905 bool = false
			yyq1905[0] = x.IP != ""
			yyq1905[1] = x.Hostname != ""
			var yynn1905 int
			if yyr1905 || yy2arr1905 {
				r.EncodeArrayStart(2)
			} else {
				yynn1905 = 0
				for _, b := range yyq1905 {
					if b {
						yynn1905++
					}
				}
				r.EncodeMapStart(yynn1905)
				yynn1905 = 0
			}
			if yyr1905 || yy2arr1905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1905[0] {
					yym1907 := z.EncBinary()
					_ = yym1907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1905[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1908 := z.EncBinary()
					_ = yym1908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1905 || yy2arr1905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1905[1] {
					yym1910 := z.EncBinary()
					_ = yym1910
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1905[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1911 := z.EncBinary()
					_ = yym1911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1905 || yy2arr1905 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1912 := z.DecBinary()
	_ = yym1912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1913 := r.ContainerType()
		if yyct1913 == codecSelferValueTypeMap1234 {
			yyl1913 := r.ReadMapStart()
			if yyl1913 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1913, d)
			}
		} else if yyct1913 == codecSelferValueTypeArray1234 {
			yyl1913 := r.ReadArrayStart()
			if yyl1913 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1913, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1914Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1914Slc
	var yyhl1914 bool = l >= 0
	for yyj1914 := 0; ; yyj1914++ {
		if yyhl1914 {
			if yyj1914 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1914Slc = r.DecodeBytes(yys1914Slc, true, true)
		yys1914 := string(yys1914Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1914 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1914)
		} // end switch yys1914
	} // end for yyj1914
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1917 int
	var yyb1917 bool
	var yyhl1917 bool = l >= 0
	yyj1917++
	if yyhl1917 {
		yyb1917 = yyj1917 > l
	} else {
		yyb1917 = r.CheckBreak()
	}
	if yyb1917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1917++
	if yyhl1917 {
		yyb1917 = yyj1917 > l
	} else {
		yyb1917 = r.CheckBreak()
	}
	if yyb1917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1917++
		if yyhl1917 {
			yyb1917 = yyj1917 > l
		} else {
			yyb1917 = r.CheckBreak()
		}
		if yyb1917 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1917-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1920 := z.EncBinary()
		_ = yym1920
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1921 := !z.EncBinary()
			yy2arr1921 := z.EncBasicHandle().StructToArray
			var yyq1921 [7]bool
			_, _, _ = yysep1921, yyq1921, yy2arr1921
			const yyr1921 bool = false
			yyq1921[0] = x.Type != ""
			yyq1921[3] = x.ClusterIP != ""
			yyq1921[4] = len(x.ExternalIPs) != 0
			yyq1921[5] = x.LoadBalancerIP != ""
			yyq1921[6] = x.SessionAffinity != ""
			var yynn1921 int
			if yyr1921 || yy2arr1921 {
				r.EncodeArrayStart(7)
			} else {
				yynn1921 = 2
				for _, b := range yyq1921 {
					if b {
						yynn1921++
					}
				}
				r.EncodeMapStart(yynn1921)
				yynn1921 = 0
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1921[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1927 := z.EncBinary()
					_ = yym1927
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1928 := z.EncBinary()
					_ = yym1928
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[3] {
					yym1930 := z.EncBinary()
					_ = yym1930
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1921[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1933 := z.EncBinary()
						_ = yym1933
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1921[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1934 := z.EncBinary()
						_ = yym1934
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[5] {
					yym1936 := z.EncBinary()
					_ = yym1936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1921[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1937 := z.EncBinary()
					_ = yym1937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1921[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1921[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1921 || yy2arr1921 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1939 := z.DecBinary()
	_ = yym1939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1940 := r.ContainerType()
		if yyct1940 == codecSelferValueTypeMap1234 {
			yyl1940 := r.ReadMapStart()
			if yyl1940 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1940, d)
			}
		} else if yyct1940 == codecSelferValueTypeArray1234 {
			yyl1940 := r.ReadArrayStart()
			if yyl1940 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1940, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1941Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1941Slc
	var yyhl1941 bool = l >= 0
	for yyj1941 := 0; ; yyj1941++ {
		if yyhl1941 {
			if yyj1941 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1941Slc = r.DecodeBytes(yys1941Slc, true, true)
		yys1941 := string(yys1941Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1941 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1943 := &x.Ports
				yym1944 := z.DecBinary()
				_ = yym1944
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1943), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1945 := &x.Selector
				yym1946 := z.DecBinary()
				_ = yym1946
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1945, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1948 := &x.ExternalIPs
				yym1949 := z.DecBinary()
				_ = yym1949
				if false {
				} else {
					z.F.DecSliceStringX(yyv1948, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1941)
		} // end switch yys1941
	} // end for yyj1941
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1952 int
	var yyb1952 bool
	var yyhl1952 bool = l >= 0
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1954 := &x.Ports
		yym1955 := z.DecBinary()
		_ = yym1955
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1954), d)
		}
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1956 := &x.Selector
		yym1957 := z.DecBinary()
		_ = yym1957
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1956, false, d)
		}
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1959 := &x.ExternalIPs
		yym1960 := z.DecBinary()
		_ = yym1960
		if false {
		} else {
			z.F.DecSliceStringX(yyv1959, false, d)
		}
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1952++
	if yyhl1952 {
		yyb1952 = yyj1952 > l
	} else {
		yyb1952 = r.CheckBreak()
	}
	if yyb1952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1952++
		if yyhl1952 {
			yyb1952 = yyj1952 > l
		} else {
			yyb1952 = r.CheckBreak()
		}
		if yyb1952 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1952-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1963 := z.EncBinary()
		_ = yym1963
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1964 := !z.EncBinary()
			yy2arr1964 := z.EncBasicHandle().StructToArray
			var yyq1964 [5]bool
			_, _, _ = yysep1964, yyq1964, yy2arr1964
			const yyr1964 bool = false
			var yynn1964 int
			if yyr1964 || yy2arr1964 {
				r.EncodeArrayStart(5)
			} else {
				yynn1964 = 5
				for _, b := range yyq1964 {
					if b {
						yynn1964++
					}
				}
				r.EncodeMapStart(yynn1964)
				yynn1964 = 0
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1966 := z.EncBinary()
				_ = yym1966
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1967 := z.EncBinary()
				_ = yym1967
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1970 := z.EncBinary()
				_ = yym1970
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1971 := z.EncBinary()
				_ = yym1971
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1973 := &x.TargetPort
				yym1974 := z.EncBinary()
				_ = yym1974
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1973) {
				} else if !yym1974 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1973)
				} else {
					z.EncFallback(yy1973)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1975 := &x.TargetPort
				yym1976 := z.EncBinary()
				_ = yym1976
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1975) {
				} else if !yym1976 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1975)
				} else {
					z.EncFallback(yy1975)
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1978 := z.EncBinary()
				_ = yym1978
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1979 := z.EncBinary()
				_ = yym1979
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr1964 || yy2arr1964 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1980 := z.DecBinary()
	_ = yym1980
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1981 := r.ContainerType()
		if yyct1981 == codecSelferValueTypeMap1234 {
			yyl1981 := r.ReadMapStart()
			if yyl1981 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1981, d)
			}
		} else if yyct1981 == codecSelferValueTypeArray1234 {
			yyl1981 := r.ReadArrayStart()
			if yyl1981 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1981, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1982Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1982Slc
	var yyhl1982 bool = l >= 0
	for yyj1982 := 0; ; yyj1982++ {
		if yyhl1982 {
			if yyj1982 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1982Slc = r.DecodeBytes(yys1982Slc, true, true)
		yys1982 := string(yys1982Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1982 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv1986 := &x.TargetPort
				yym1987 := z.DecBinary()
				_ = yym1987
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1986) {
				} else if !yym1987 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1986)
				} else {
					z.DecFallback(yyv1986, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1982)
		} // end switch yys1982
	} // end for yyj1982
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1989 int
	var yyb1989 bool
	var yyhl1989 bool = l >= 0
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv1993 := &x.TargetPort
		yym1994 := z.DecBinary()
		_ = yym1994
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1993) {
		} else if !yym1994 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1993)
		} else {
			z.DecFallback(yyv1993, false)
		}
	}
	yyj1989++
	if yyhl1989 {
		yyb1989 = yyj1989 > l
	} else {
		yyb1989 = r.CheckBreak()
	}
	if yyb1989 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1989++
		if yyhl1989 {
			yyb1989 = yyj1989 > l
		} else {
			yyb1989 = r.CheckBreak()
		}
		if yyb1989 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1989-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1996 := z.EncBinary()
		_ = yym1996
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1997 := !z.EncBinary()
			yy2arr1997 := z.EncBasicHandle().StructToArray
			var yyq1997 [5]bool
			_, _, _ = yysep1997, yyq1997, yy2arr1997
			const yyr1997 bool = false
			yyq1997[0] = x.Kind != ""
			yyq1997[1] = x.APIVersion != ""
			yyq1997[2] = true
			yyq1997[3] = true
			yyq1997[4] = true
			var yynn1997 int
			if yyr1997 || yy2arr1997 {
				r.EncodeArrayStart(5)
			} else {
				yynn1997 = 0
				for _, b := range yyq1997 {
					if b {
						yynn1997++
					}
				}
				r.EncodeMapStart(yynn1997)
				yynn1997 = 0
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[0] {
					yym1999 := z.EncBinary()
					_ = yym1999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1997[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2000 := z.EncBinary()
					_ = yym2000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[1] {
					yym2002 := z.EncBinary()
					_ = yym2002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1997[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2003 := z.EncBinary()
					_ = yym2003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[2] {
					yy2005 := &x.ObjectMeta
					yy2005.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1997[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2006 := &x.ObjectMeta
					yy2006.CodecEncodeSelf(e)
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[3] {
					yy2008 := &x.Spec
					yy2008.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1997[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2009 := &x.Spec
					yy2009.CodecEncodeSelf(e)
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1997[4] {
					yy2011 := &x.Status
					yy2011.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1997[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2012 := &x.Status
					yy2012.CodecEncodeSelf(e)
				}
			}
			if yyr1997 || yy2arr1997 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2013 := z.DecBinary()
	_ = yym2013
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2014 := r.ContainerType()
		if yyct2014 == codecSelferValueTypeMap1234 {
			yyl2014 := r.ReadMapStart()
			if yyl2014 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2014, d)
			}
		} else if yyct2014 == codecSelferValueTypeArray1234 {
			yyl2014 := r.ReadArrayStart()
			if yyl2014 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2014, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2015Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2015Slc
	var yyhl2015 bool = l >= 0
	for yyj2015 := 0; ; yyj2015++ {
		if yyhl2015 {
			if yyj2015 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2015Slc = r.DecodeBytes(yys2015Slc, true, true)
		yys2015 := string(yys2015Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2015 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2018 := &x.ObjectMeta
				yyv2018.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2019 := &x.Spec
				yyv2019.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2020 := &x.Status
				yyv2020.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2015)
		} // end switch yys2015
	} // end for yyj2015
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2021 int
	var yyb2021 bool
	var yyhl2021 bool = l >= 0
	yyj2021++
	if yyhl2021 {
		yyb2021 = yyj2021 > l
	} else {
		yyb2021 = r.CheckBreak()
	}
	if yyb2021 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2021++
	if yyhl2021 {
		yyb2021 = yyj2021 > l
	} else {
		yyb2021 = r.CheckBreak()
	}
	if yyb2021 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2021++
	if yyhl2021 {
		yyb2021 = yyj2021 > l
	} else {
		yyb2021 = r.CheckBreak()
	}
	if yyb2021 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2024 := &x.ObjectMeta
		yyv2024.CodecDecodeSelf(d)
	}
	yyj2021++
	if yyhl2021 {
		yyb2021 = yyj2021 > l
	} else {
		yyb2021 = r.CheckBreak()
	}
	if yyb2021 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2025 := &x.Spec
		yyv2025.CodecDecodeSelf(d)
	}
	yyj2021++
	if yyhl2021 {
		yyb2021 = yyj2021 > l
	} else {
		yyb2021 = r.CheckBreak()
	}
	if yyb2021 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2026 := &x.Status
		yyv2026.CodecDecodeSelf(d)
	}
	for {
		yyj2021++
		if yyhl2021 {
			yyb2021 = yyj2021 > l
		} else {
			yyb2021 = r.CheckBreak()
		}
		if yyb2021 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2021-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2027 := z.EncBinary()
		_ = yym2027
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2028 := !z.EncBinary()
			yy2arr2028 := z.EncBasicHandle().StructToArray
			var yyq2028 [5]bool
			_, _, _ = yysep2028, yyq2028, yy2arr2028
			const yyr2028 bool = false
			yyq2028[0] = x.Kind != ""
			yyq2028[1] = x.APIVersion != ""
			yyq2028[2] = true
			yyq2028[4] = len(x.ImagePullSecrets) != 0
			var yynn2028 int
			if yyr2028 || yy2arr2028 {
				r.EncodeArrayStart(5)
			} else {
				yynn2028 = 1
				for _, b := range yyq2028 {
					if b {
						yynn2028++
					}
				}
				r.EncodeMapStart(yynn2028)
				yynn2028 = 0
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[0] {
					yym2030 := z.EncBinary()
					_ = yym2030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[1] {
					yym2033 := z.EncBinary()
					_ = yym2033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2028[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[2] {
					yy2036 := &x.ObjectMeta
					yy2036.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2037 := &x.ObjectMeta
					yy2037.CodecEncodeSelf(e)
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2039 := z.EncBinary()
					_ = yym2039
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2040 := z.EncBinary()
					_ = yym2040
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2028[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2042 := z.EncBinary()
						_ = yym2042
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2028[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2043 := z.EncBinary()
						_ = yym2043
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2028 || yy2arr2028 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2044 := z.DecBinary()
	_ = yym2044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2045 := r.ContainerType()
		if yyct2045 == codecSelferValueTypeMap1234 {
			yyl2045 := r.ReadMapStart()
			if yyl2045 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2045, d)
			}
		} else if yyct2045 == codecSelferValueTypeArray1234 {
			yyl2045 := r.ReadArrayStart()
			if yyl2045 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2046Slc
	var yyhl2046 bool = l >= 0
	for yyj2046 := 0; ; yyj2046++ {
		if yyhl2046 {
			if yyj2046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2046Slc = r.DecodeBytes(yys2046Slc, true, true)
		yys2046 := string(yys2046Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2046 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2049 := &x.ObjectMeta
				yyv2049.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2050 := &x.Secrets
				yym2051 := z.DecBinary()
				_ = yym2051
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2050), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2052 := &x.ImagePullSecrets
				yym2053 := z.DecBinary()
				_ = yym2053
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2052), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2046)
		} // end switch yys2046
	} // end for yyj2046
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2054 int
	var yyb2054 bool
	var yyhl2054 bool = l >= 0
	yyj2054++
	if yyhl2054 {
		yyb2054 = yyj2054 > l
	} else {
		yyb2054 = r.CheckBreak()
	}
	if yyb2054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2054++
	if yyhl2054 {
		yyb2054 = yyj2054 > l
	} else {
		yyb2054 = r.CheckBreak()
	}
	if yyb2054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2054++
	if yyhl2054 {
		yyb2054 = yyj2054 > l
	} else {
		yyb2054 = r.CheckBreak()
	}
	if yyb2054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2057 := &x.ObjectMeta
		yyv2057.CodecDecodeSelf(d)
	}
	yyj2054++
	if yyhl2054 {
		yyb2054 = yyj2054 > l
	} else {
		yyb2054 = r.CheckBreak()
	}
	if yyb2054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2058 := &x.Secrets
		yym2059 := z.DecBinary()
		_ = yym2059
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2058), d)
		}
	}
	yyj2054++
	if yyhl2054 {
		yyb2054 = yyj2054 > l
	} else {
		yyb2054 = r.CheckBreak()
	}
	if yyb2054 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2060 := &x.ImagePullSecrets
		yym2061 := z.DecBinary()
		_ = yym2061
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2060), d)
		}
	}
	for {
		yyj2054++
		if yyhl2054 {
			yyb2054 = yyj2054 > l
		} else {
			yyb2054 = r.CheckBreak()
		}
		if yyb2054 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2054-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2062 := z.EncBinary()
		_ = yym2062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2063 := !z.EncBinary()
			yy2arr2063 := z.EncBasicHandle().StructToArray
			var yyq2063 [4]bool
			_, _, _ = yysep2063, yyq2063, yy2arr2063
			const yyr2063 bool = false
			yyq2063[0] = x.Kind != ""
			yyq2063[1] = x.APIVersion != ""
			yyq2063[2] = true
			var yynn2063 int
			if yyr2063 || yy2arr2063 {
				r.EncodeArrayStart(4)
			} else {
				yynn2063 = 1
				for _, b := range yyq2063 {
					if b {
						yynn2063++
					}
				}
				r.EncodeMapStart(yynn2063)
				yynn2063 = 0
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[0] {
					yym2065 := z.EncBinary()
					_ = yym2065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2063[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2066 := z.EncBinary()
					_ = yym2066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[1] {
					yym2068 := z.EncBinary()
					_ = yym2068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2063[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2063[2] {
					yy2071 := &x.ListMeta
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2071) {
					} else {
						z.EncFallback(yy2071)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2063[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2073 := &x.ListMeta
					yym2074 := z.EncBinary()
					_ = yym2074
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2073) {
					} else {
						z.EncFallback(yy2073)
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2076 := z.EncBinary()
					_ = yym2076
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2077 := z.EncBinary()
					_ = yym2077
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2063 || yy2arr2063 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2078 := z.DecBinary()
	_ = yym2078
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2079 := r.ContainerType()
		if yyct2079 == codecSelferValueTypeMap1234 {
			yyl2079 := r.ReadMapStart()
			if yyl2079 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2079, d)
			}
		} else if yyct2079 == codecSelferValueTypeArray1234 {
			yyl2079 := r.ReadArrayStart()
			if yyl2079 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2079, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2080Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2080Slc
	var yyhl2080 bool = l >= 0
	for yyj2080 := 0; ; yyj2080++ {
		if yyhl2080 {
			if yyj2080 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2080Slc = r.DecodeBytes(yys2080Slc, true, true)
		yys2080 := string(yys2080Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2080 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2083 := &x.ListMeta
				yym2084 := z.DecBinary()
				_ = yym2084
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2083) {
				} else {
					z.DecFallback(yyv2083, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2085 := &x.Items
				yym2086 := z.DecBinary()
				_ = yym2086
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2085), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2080)
		} // end switch yys2080
	} // end for yyj2080
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2087 int
	var yyb2087 bool
	var yyhl2087 bool = l >= 0
	yyj2087++
	if yyhl2087 {
		yyb2087 = yyj2087 > l
	} else {
		yyb2087 = r.CheckBreak()
	}
	if yyb2087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2087++
	if yyhl2087 {
		yyb2087 = yyj2087 > l
	} else {
		yyb2087 = r.CheckBreak()
	}
	if yyb2087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2087++
	if yyhl2087 {
		yyb2087 = yyj2087 > l
	} else {
		yyb2087 = r.CheckBreak()
	}
	if yyb2087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2090 := &x.ListMeta
		yym2091 := z.DecBinary()
		_ = yym2091
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2090) {
		} else {
			z.DecFallback(yyv2090, false)
		}
	}
	yyj2087++
	if yyhl2087 {
		yyb2087 = yyj2087 > l
	} else {
		yyb2087 = r.CheckBreak()
	}
	if yyb2087 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2092 := &x.Items
		yym2093 := z.DecBinary()
		_ = yym2093
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2092), d)
		}
	}
	for {
		yyj2087++
		if yyhl2087 {
			yyb2087 = yyj2087 > l
		} else {
			yyb2087 = r.CheckBreak()
		}
		if yyb2087 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2087-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2094 := z.EncBinary()
		_ = yym2094
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2095 := !z.EncBinary()
			yy2arr2095 := z.EncBasicHandle().StructToArray
			var yyq2095 [4]bool
			_, _, _ = yysep2095, yyq2095, yy2arr2095
			const yyr2095 bool = false
			yyq2095[0] = x.Kind != ""
			yyq2095[1] = x.APIVersion != ""
			yyq2095[2] = true
			var yynn2095 int
			if yyr2095 || yy2arr2095 {
				r.EncodeArrayStart(4)
			} else {
				yynn2095 = 1
				for _, b := range yyq2095 {
					if b {
						yynn2095++
					}
				}
				r.EncodeMapStart(yynn2095)
				yynn2095 = 0
			}
			if yyr2095 || yy2arr2095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2095[0] {
					yym2097 := z.EncBinary()
					_ = yym2097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2095[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2098 := z.EncBinary()
					_ = yym2098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2095 || yy2arr2095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2095[1] {
					yym2100 := z.EncBinary()
					_ = yym2100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2095[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2095 || yy2arr2095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2095[2] {
					yy2103 := &x.ObjectMeta
					yy2103.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2095[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2104 := &x.ObjectMeta
					yy2104.CodecEncodeSelf(e)
				}
			}
			if yyr2095 || yy2arr2095 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2106 := z.EncBinary()
					_ = yym2106
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2107 := z.EncBinary()
					_ = yym2107
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2095 || yy2arr2095 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2108 := z.DecBinary()
	_ = yym2108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2109 := r.ContainerType()
		if yyct2109 == codecSelferValueTypeMap1234 {
			yyl2109 := r.ReadMapStart()
			if yyl2109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2109, d)
			}
		} else if yyct2109 == codecSelferValueTypeArray1234 {
			yyl2109 := r.ReadArrayStart()
			if yyl2109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2110Slc
	var yyhl2110 bool = l >= 0
	for yyj2110 := 0; ; yyj2110++ {
		if yyhl2110 {
			if yyj2110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2110Slc = r.DecodeBytes(yys2110Slc, true, true)
		yys2110 := string(yys2110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2110 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2113 := &x.ObjectMeta
				yyv2113.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2114 := &x.Subsets
				yym2115 := z.DecBinary()
				_ = yym2115
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2114), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2110)
		} // end switch yys2110
	} // end for yyj2110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2116 int
	var yyb2116 bool
	var yyhl2116 bool = l >= 0
	yyj2116++
	if yyhl2116 {
		yyb2116 = yyj2116 > l
	} else {
		yyb2116 = r.CheckBreak()
	}
	if yyb2116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2116++
	if yyhl2116 {
		yyb2116 = yyj2116 > l
	} else {
		yyb2116 = r.CheckBreak()
	}
	if yyb2116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2116++
	if yyhl2116 {
		yyb2116 = yyj2116 > l
	} else {
		yyb2116 = r.CheckBreak()
	}
	if yyb2116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2119 := &x.ObjectMeta
		yyv2119.CodecDecodeSelf(d)
	}
	yyj2116++
	if yyhl2116 {
		yyb2116 = yyj2116 > l
	} else {
		yyb2116 = r.CheckBreak()
	}
	if yyb2116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2120 := &x.Subsets
		yym2121 := z.DecBinary()
		_ = yym2121
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2120), d)
		}
	}
	for {
		yyj2116++
		if yyhl2116 {
			yyb2116 = yyj2116 > l
		} else {
			yyb2116 = r.CheckBreak()
		}
		if yyb2116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2122 := z.EncBinary()
		_ = yym2122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2123 := !z.EncBinary()
			yy2arr2123 := z.EncBasicHandle().StructToArray
			var yyq2123 [3]bool
			_, _, _ = yysep2123, yyq2123, yy2arr2123
			const yyr2123 bool = false
			var yynn2123 int
			if yyr2123 || yy2arr2123 {
				r.EncodeArrayStart(3)
			} else {
				yynn2123 = 3
				for _, b := range yyq2123 {
					if b {
						yynn2123++
					}
				}
				r.EncodeMapStart(yynn2123)
				yynn2123 = 0
			}
			if yyr2123 || yy2arr2123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2125 := z.EncBinary()
					_ = yym2125
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2128 := z.EncBinary()
					_ = yym2128
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2129 := z.EncBinary()
					_ = yym2129
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2131 := z.EncBinary()
					_ = yym2131
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2132 := z.EncBinary()
					_ = yym2132
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2123 || yy2arr2123 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2133 := z.DecBinary()
	_ = yym2133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2134 := r.ContainerType()
		if yyct2134 == codecSelferValueTypeMap1234 {
			yyl2134 := r.ReadMapStart()
			if yyl2134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2134, d)
			}
		} else if yyct2134 == codecSelferValueTypeArray1234 {
			yyl2134 := r.ReadArrayStart()
			if yyl2134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2135Slc
	var yyhl2135 bool = l >= 0
	for yyj2135 := 0; ; yyj2135++ {
		if yyhl2135 {
			if yyj2135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2135Slc = r.DecodeBytes(yys2135Slc, true, true)
		yys2135 := string(yys2135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2135 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2136 := &x.Addresses
				yym2137 := z.DecBinary()
				_ = yym2137
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2136), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2138 := &x.NotReadyAddresses
				yym2139 := z.DecBinary()
				_ = yym2139
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2138), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2140 := &x.Ports
				yym2141 := z.DecBinary()
				_ = yym2141
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2140), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2135)
		} // end switch yys2135
	} // end for yyj2135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2142 int
	var yyb2142 bool
	var yyhl2142 bool = l >= 0
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2143 := &x.Addresses
		yym2144 := z.DecBinary()
		_ = yym2144
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2143), d)
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2145 := &x.NotReadyAddresses
		yym2146 := z.DecBinary()
		_ = yym2146
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2145), d)
		}
	}
	yyj2142++
	if yyhl2142 {
		yyb2142 = yyj2142 > l
	} else {
		yyb2142 = r.CheckBreak()
	}
	if yyb2142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2147 := &x.Ports
		yym2148 := z.DecBinary()
		_ = yym2148
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2147), d)
		}
	}
	for {
		yyj2142++
		if yyhl2142 {
			yyb2142 = yyj2142 > l
		} else {
			yyb2142 = r.CheckBreak()
		}
		if yyb2142 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2142-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2149 := z.EncBinary()
		_ = yym2149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2150 := !z.EncBinary()
			yy2arr2150 := z.EncBasicHandle().StructToArray
			var yyq2150 [2]bool
			_, _, _ = yysep2150, yyq2150, yy2arr2150
			const yyr2150 bool = false
			var yynn2150 int
			if yyr2150 || yy2arr2150 {
				r.EncodeArrayStart(2)
			} else {
				yynn2150 = 2
				for _, b := range yyq2150 {
					if b {
						yynn2150++
					}
				}
				r.EncodeMapStart(yynn2150)
				yynn2150 = 0
			}
			if yyr2150 || yy2arr2150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2152 := z.EncBinary()
				_ = yym2152
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2153 := z.EncBinary()
				_ = yym2153
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2150 || yy2arr2150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2150 || yy2arr2150 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2155 := z.DecBinary()
	_ = yym2155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2156 := r.ContainerType()
		if yyct2156 == codecSelferValueTypeMap1234 {
			yyl2156 := r.ReadMapStart()
			if yyl2156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2156, d)
			}
		} else if yyct2156 == codecSelferValueTypeArray1234 {
			yyl2156 := r.ReadArrayStart()
			if yyl2156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2157Slc
	var yyhl2157 bool = l >= 0
	for yyj2157 := 0; ; yyj2157++ {
		if yyhl2157 {
			if yyj2157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2157Slc = r.DecodeBytes(yys2157Slc, true, true)
		yys2157 := string(yys2157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2157 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2157)
		} // end switch yys2157
	} // end for yyj2157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2160 int
	var yyb2160 bool
	var yyhl2160 bool = l >= 0
	yyj2160++
	if yyhl2160 {
		yyb2160 = yyj2160 > l
	} else {
		yyb2160 = r.CheckBreak()
	}
	if yyb2160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2160++
	if yyhl2160 {
		yyb2160 = yyj2160 > l
	} else {
		yyb2160 = r.CheckBreak()
	}
	if yyb2160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2160++
		if yyhl2160 {
			yyb2160 = yyj2160 > l
		} else {
			yyb2160 = r.CheckBreak()
		}
		if yyb2160 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2160-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2163 := z.EncBinary()
		_ = yym2163
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2164 := !z.EncBinary()
			yy2arr2164 := z.EncBasicHandle().StructToArray
			var yyq2164 [3]bool
			_, _, _ = yysep2164, yyq2164, yy2arr2164
			const yyr2164 bool = false
			var yynn2164 int
			if yyr2164 || yy2arr2164 {
				r.EncodeArrayStart(3)
			} else {
				yynn2164 = 3
				for _, b := range yyq2164 {
					if b {
						yynn2164++
					}
				}
				r.EncodeMapStart(yynn2164)
				yynn2164 = 0
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2166 := z.EncBinary()
				_ = yym2166
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2167 := z.EncBinary()
				_ = yym2167
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2169 := z.EncBinary()
				_ = yym2169
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2170 := z.EncBinary()
				_ = yym2170
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2172 := z.DecBinary()
	_ = yym2172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2173 := r.ContainerType()
		if yyct2173 == codecSelferValueTypeMap1234 {
			yyl2173 := r.ReadMapStart()
			if yyl2173 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2173, d)
			}
		} else if yyct2173 == codecSelferValueTypeArray1234 {
			yyl2173 := r.ReadArrayStart()
			if yyl2173 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2174Slc
	var yyhl2174 bool = l >= 0
	for yyj2174 := 0; ; yyj2174++ {
		if yyhl2174 {
			if yyj2174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2174Slc = r.DecodeBytes(yys2174Slc, true, true)
		yys2174 := string(yys2174Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2174 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2174)
		} // end switch yys2174
	} // end for yyj2174
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2178 int
	var yyb2178 bool
	var yyhl2178 bool = l >= 0
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2178++
	if yyhl2178 {
		yyb2178 = yyj2178 > l
	} else {
		yyb2178 = r.CheckBreak()
	}
	if yyb2178 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2178++
		if yyhl2178 {
			yyb2178 = yyj2178 > l
		} else {
			yyb2178 = r.CheckBreak()
		}
		if yyb2178 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2178-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2182 := z.EncBinary()
		_ = yym2182
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2183 := !z.EncBinary()
			yy2arr2183 := z.EncBasicHandle().StructToArray
			var yyq2183 [4]bool
			_, _, _ = yysep2183, yyq2183, yy2arr2183
			const yyr2183 bool = false
			yyq2183[0] = x.Kind != ""
			yyq2183[1] = x.APIVersion != ""
			yyq2183[2] = true
			var yynn2183 int
			if yyr2183 || yy2arr2183 {
				r.EncodeArrayStart(4)
			} else {
				yynn2183 = 1
				for _, b := range yyq2183 {
					if b {
						yynn2183++
					}
				}
				r.EncodeMapStart(yynn2183)
				yynn2183 = 0
			}
			if yyr2183 || yy2arr2183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2183[0] {
					yym2185 := z.EncBinary()
					_ = yym2185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2183[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2186 := z.EncBinary()
					_ = yym2186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2183 || yy2arr2183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2183[1] {
					yym2188 := z.EncBinary()
					_ = yym2188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2183[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2183 || yy2arr2183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2183[2] {
					yy2191 := &x.ListMeta
					yym2192 := z.EncBinary()
					_ = yym2192
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2191) {
					} else {
						z.EncFallback(yy2191)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2183[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2193 := &x.ListMeta
					yym2194 := z.EncBinary()
					_ = yym2194
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2193) {
					} else {
						z.EncFallback(yy2193)
					}
				}
			}
			if yyr2183 || yy2arr2183 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2196 := z.EncBinary()
					_ = yym2196
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2197 := z.EncBinary()
					_ = yym2197
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2183 || yy2arr2183 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2198 := z.DecBinary()
	_ = yym2198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2199 := r.ContainerType()
		if yyct2199 == codecSelferValueTypeMap1234 {
			yyl2199 := r.ReadMapStart()
			if yyl2199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2199, d)
			}
		} else if yyct2199 == codecSelferValueTypeArray1234 {
			yyl2199 := r.ReadArrayStart()
			if yyl2199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2200Slc
	var yyhl2200 bool = l >= 0
	for yyj2200 := 0; ; yyj2200++ {
		if yyhl2200 {
			if yyj2200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2200Slc = r.DecodeBytes(yys2200Slc, true, true)
		yys2200 := string(yys2200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2200 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2203 := &x.ListMeta
				yym2204 := z.DecBinary()
				_ = yym2204
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2203) {
				} else {
					z.DecFallback(yyv2203, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2205 := &x.Items
				yym2206 := z.DecBinary()
				_ = yym2206
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2205), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2200)
		} // end switch yys2200
	} // end for yyj2200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2207 int
	var yyb2207 bool
	var yyhl2207 bool = l >= 0
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2210 := &x.ListMeta
		yym2211 := z.DecBinary()
		_ = yym2211
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2210) {
		} else {
			z.DecFallback(yyv2210, false)
		}
	}
	yyj2207++
	if yyhl2207 {
		yyb2207 = yyj2207 > l
	} else {
		yyb2207 = r.CheckBreak()
	}
	if yyb2207 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2212 := &x.Items
		yym2213 := z.DecBinary()
		_ = yym2213
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2212), d)
		}
	}
	for {
		yyj2207++
		if yyhl2207 {
			yyb2207 = yyj2207 > l
		} else {
			yyb2207 = r.CheckBreak()
		}
		if yyb2207 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2207-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2214 := z.EncBinary()
		_ = yym2214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2215 := !z.EncBinary()
			yy2arr2215 := z.EncBasicHandle().StructToArray
			var yyq2215 [4]bool
			_, _, _ = yysep2215, yyq2215, yy2arr2215
			const yyr2215 bool = false
			yyq2215[0] = x.PodCIDR != ""
			yyq2215[1] = x.ExternalID != ""
			yyq2215[2] = x.ProviderID != ""
			yyq2215[3] = x.Unschedulable != false
			var yynn2215 int
			if yyr2215 || yy2arr2215 {
				r.EncodeArrayStart(4)
			} else {
				yynn2215 = 0
				for _, b := range yyq2215 {
					if b {
						yynn2215++
					}
				}
				r.EncodeMapStart(yynn2215)
				yynn2215 = 0
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2215[0] {
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2215[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2218 := z.EncBinary()
					_ = yym2218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2215[1] {
					yym2220 := z.EncBinary()
					_ = yym2220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2215[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2221 := z.EncBinary()
					_ = yym2221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2215[2] {
					yym2223 := z.EncBinary()
					_ = yym2223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2215[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2224 := z.EncBinary()
					_ = yym2224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2215[3] {
					yym2226 := z.EncBinary()
					_ = yym2226
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2215[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2227 := z.EncBinary()
					_ = yym2227
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2215 || yy2arr2215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2228 := z.DecBinary()
	_ = yym2228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2229 := r.ContainerType()
		if yyct2229 == codecSelferValueTypeMap1234 {
			yyl2229 := r.ReadMapStart()
			if yyl2229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2229, d)
			}
		} else if yyct2229 == codecSelferValueTypeArray1234 {
			yyl2229 := r.ReadArrayStart()
			if yyl2229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2230Slc
	var yyhl2230 bool = l >= 0
	for yyj2230 := 0; ; yyj2230++ {
		if yyhl2230 {
			if yyj2230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2230Slc = r.DecodeBytes(yys2230Slc, true, true)
		yys2230 := string(yys2230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2230 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2230)
		} // end switch yys2230
	} // end for yyj2230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2235 int
	var yyb2235 bool
	var yyhl2235 bool = l >= 0
	yyj2235++
	if yyhl2235 {
		yyb2235 = yyj2235 > l
	} else {
		yyb2235 = r.CheckBreak()
	}
	if yyb2235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2235++
	if yyhl2235 {
		yyb2235 = yyj2235 > l
	} else {
		yyb2235 = r.CheckBreak()
	}
	if yyb2235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2235++
	if yyhl2235 {
		yyb2235 = yyj2235 > l
	} else {
		yyb2235 = r.CheckBreak()
	}
	if yyb2235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2235++
	if yyhl2235 {
		yyb2235 = yyj2235 > l
	} else {
		yyb2235 = r.CheckBreak()
	}
	if yyb2235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2235++
		if yyhl2235 {
			yyb2235 = yyj2235 > l
		} else {
			yyb2235 = r.CheckBreak()
		}
		if yyb2235 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2235-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2240 := z.EncBinary()
		_ = yym2240
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2241 := !z.EncBinary()
			yy2arr2241 := z.EncBasicHandle().StructToArray
			var yyq2241 [1]bool
			_, _, _ = yysep2241, yyq2241, yy2arr2241
			const yyr2241 bool = false
			var yynn2241 int
			if yyr2241 || yy2arr2241 {
				r.EncodeArrayStart(1)
			} else {
				yynn2241 = 1
				for _, b := range yyq2241 {
					if b {
						yynn2241++
					}
				}
				r.EncodeMapStart(yynn2241)
				yynn2241 = 0
			}
			if yyr2241 || yy2arr2241 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2243 := z.EncBinary()
				_ = yym2243
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2244 := z.EncBinary()
				_ = yym2244
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2241 || yy2arr2241 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2245 := z.DecBinary()
	_ = yym2245
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2246 := r.ContainerType()
		if yyct2246 == codecSelferValueTypeMap1234 {
			yyl2246 := r.ReadMapStart()
			if yyl2246 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2246, d)
			}
		} else if yyct2246 == codecSelferValueTypeArray1234 {
			yyl2246 := r.ReadArrayStart()
			if yyl2246 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2246, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2247Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2247Slc
	var yyhl2247 bool = l >= 0
	for yyj2247 := 0; ; yyj2247++ {
		if yyhl2247 {
			if yyj2247 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2247Slc = r.DecodeBytes(yys2247Slc, true, true)
		yys2247 := string(yys2247Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2247 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2247)
		} // end switch yys2247
	} // end for yyj2247
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2249 int
	var yyb2249 bool
	var yyhl2249 bool = l >= 0
	yyj2249++
	if yyhl2249 {
		yyb2249 = yyj2249 > l
	} else {
		yyb2249 = r.CheckBreak()
	}
	if yyb2249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2249++
		if yyhl2249 {
			yyb2249 = yyj2249 > l
		} else {
			yyb2249 = r.CheckBreak()
		}
		if yyb2249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2251 := z.EncBinary()
		_ = yym2251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2252 := !z.EncBinary()
			yy2arr2252 := z.EncBasicHandle().StructToArray
			var yyq2252 [1]bool
			_, _, _ = yysep2252, yyq2252, yy2arr2252
			const yyr2252 bool = false
			yyq2252[0] = true
			var yynn2252 int
			if yyr2252 || yy2arr2252 {
				r.EncodeArrayStart(1)
			} else {
				yynn2252 = 0
				for _, b := range yyq2252 {
					if b {
						yynn2252++
					}
				}
				r.EncodeMapStart(yynn2252)
				yynn2252 = 0
			}
			if yyr2252 || yy2arr2252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2252[0] {
					yy2254 := &x.KubeletEndpoint
					yy2254.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2252[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2255 := &x.KubeletEndpoint
					yy2255.CodecEncodeSelf(e)
				}
			}
			if yyr2252 || yy2arr2252 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2256 := z.DecBinary()
	_ = yym2256
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2257 := r.ContainerType()
		if yyct2257 == codecSelferValueTypeMap1234 {
			yyl2257 := r.ReadMapStart()
			if yyl2257 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2257, d)
			}
		} else if yyct2257 == codecSelferValueTypeArray1234 {
			yyl2257 := r.ReadArrayStart()
			if yyl2257 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2257, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2258Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2258Slc
	var yyhl2258 bool = l >= 0
	for yyj2258 := 0; ; yyj2258++ {
		if yyhl2258 {
			if yyj2258 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2258Slc = r.DecodeBytes(yys2258Slc, true, true)
		yys2258 := string(yys2258Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2258 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2259 := &x.KubeletEndpoint
				yyv2259.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2258)
		} // end switch yys2258
	} // end for yyj2258
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2260 int
	var yyb2260 bool
	var yyhl2260 bool = l >= 0
	yyj2260++
	if yyhl2260 {
		yyb2260 = yyj2260 > l
	} else {
		yyb2260 = r.CheckBreak()
	}
	if yyb2260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2261 := &x.KubeletEndpoint
		yyv2261.CodecDecodeSelf(d)
	}
	for {
		yyj2260++
		if yyhl2260 {
			yyb2260 = yyj2260 > l
		} else {
			yyb2260 = r.CheckBreak()
		}
		if yyb2260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2262 := z.EncBinary()
		_ = yym2262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2263 := !z.EncBinary()
			yy2arr2263 := z.EncBasicHandle().StructToArray
			var yyq2263 [8]bool
			_, _, _ = yysep2263, yyq2263, yy2arr2263
			const yyr2263 bool = false
			var yynn2263 int
			if yyr2263 || yy2arr2263 {
				r.EncodeArrayStart(8)
			} else {
				yynn2263 = 8
				for _, b := range yyq2263 {
					if b {
						yynn2263++
					}
				}
				r.EncodeMapStart(yynn2263)
				yynn2263 = 0
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2265 := z.EncBinary()
				_ = yym2265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2266 := z.EncBinary()
				_ = yym2266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2268 := z.EncBinary()
				_ = yym2268
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2269 := z.EncBinary()
				_ = yym2269
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2271 := z.EncBinary()
				_ = yym2271
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2272 := z.EncBinary()
				_ = yym2272
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2274 := z.EncBinary()
				_ = yym2274
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2275 := z.EncBinary()
				_ = yym2275
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2277 := z.EncBinary()
				_ = yym2277
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2278 := z.EncBinary()
				_ = yym2278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2280 := z.EncBinary()
				_ = yym2280
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2281 := z.EncBinary()
				_ = yym2281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2283 := z.EncBinary()
				_ = yym2283
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2284 := z.EncBinary()
				_ = yym2284
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2286 := z.EncBinary()
				_ = yym2286
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2287 := z.EncBinary()
				_ = yym2287
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2263 || yy2arr2263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2288 := z.DecBinary()
	_ = yym2288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2289 := r.ContainerType()
		if yyct2289 == codecSelferValueTypeMap1234 {
			yyl2289 := r.ReadMapStart()
			if yyl2289 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2289, d)
			}
		} else if yyct2289 == codecSelferValueTypeArray1234 {
			yyl2289 := r.ReadArrayStart()
			if yyl2289 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2289, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2290Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2290Slc
	var yyhl2290 bool = l >= 0
	for yyj2290 := 0; ; yyj2290++ {
		if yyhl2290 {
			if yyj2290 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2290Slc = r.DecodeBytes(yys2290Slc, true, true)
		yys2290 := string(yys2290Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2290 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2290)
		} // end switch yys2290
	} // end for yyj2290
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2299 int
	var yyb2299 bool
	var yyhl2299 bool = l >= 0
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2299++
	if yyhl2299 {
		yyb2299 = yyj2299 > l
	} else {
		yyb2299 = r.CheckBreak()
	}
	if yyb2299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2299++
		if yyhl2299 {
			yyb2299 = yyj2299 > l
		} else {
			yyb2299 = r.CheckBreak()
		}
		if yyb2299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2308 := z.EncBinary()
		_ = yym2308
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2309 := !z.EncBinary()
			yy2arr2309 := z.EncBasicHandle().StructToArray
			var yyq2309 [6]bool
			_, _, _ = yysep2309, yyq2309, yy2arr2309
			const yyr2309 bool = false
			yyq2309[0] = len(x.Capacity) != 0
			yyq2309[1] = x.Phase != ""
			yyq2309[2] = len(x.Conditions) != 0
			yyq2309[3] = len(x.Addresses) != 0
			yyq2309[4] = true
			yyq2309[5] = true
			var yynn2309 int
			if yyr2309 || yy2arr2309 {
				r.EncodeArrayStart(6)
			} else {
				yynn2309 = 0
				for _, b := range yyq2309 {
					if b {
						yynn2309++
					}
				}
				r.EncodeMapStart(yynn2309)
				yynn2309 = 0
			}
			if yyr2309 || yy2arr2309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2309[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2309[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2309 || yy2arr2309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2309[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2309[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2309 || yy2arr2309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2309[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2313 := z.EncBinary()
						_ = yym2313
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2309[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2314 := z.EncBinary()
						_ = yym2314
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2309 || yy2arr2309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2309[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2316 := z.EncBinary()
						_ = yym2316
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2309[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2317 := z.EncBinary()
						_ = yym2317
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2309 || yy2arr2309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2309[4] {
					yy2319 := &x.DaemonEndpoints
					yy2319.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2309[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2320 := &x.DaemonEndpoints
					yy2320.CodecEncodeSelf(e)
				}
			}
			if yyr2309 || yy2arr2309 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2309[5] {
					yy2322 := &x.NodeInfo
					yy2322.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2309[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2323 := &x.NodeInfo
					yy2323.CodecEncodeSelf(e)
				}
			}
			if yyr2309 || yy2arr2309 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2324 := z.DecBinary()
	_ = yym2324
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2325 := r.ContainerType()
		if yyct2325 == codecSelferValueTypeMap1234 {
			yyl2325 := r.ReadMapStart()
			if yyl2325 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2325, d)
			}
		} else if yyct2325 == codecSelferValueTypeArray1234 {
			yyl2325 := r.ReadArrayStart()
			if yyl2325 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2325, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2326Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2326Slc
	var yyhl2326 bool = l >= 0
	for yyj2326 := 0; ; yyj2326++ {
		if yyhl2326 {
			if yyj2326 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2326Slc = r.DecodeBytes(yys2326Slc, true, true)
		yys2326 := string(yys2326Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2326 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2327 := &x.Capacity
				yyv2327.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2329 := &x.Conditions
				yym2330 := z.DecBinary()
				_ = yym2330
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2329), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2331 := &x.Addresses
				yym2332 := z.DecBinary()
				_ = yym2332
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2331), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2333 := &x.DaemonEndpoints
				yyv2333.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2334 := &x.NodeInfo
				yyv2334.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2326)
		} // end switch yys2326
	} // end for yyj2326
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2335 int
	var yyb2335 bool
	var yyhl2335 bool = l >= 0
	yyj2335++
	if yyhl2335 {
		yyb2335 = yyj2335 > l
	} else {
		yyb2335 = r.CheckBreak()
	}
	if yyb2335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2336 := &x.Capacity
		yyv2336.CodecDecodeSelf(d)
	}
	yyj2335++
	if yyhl2335 {
		yyb2335 = yyj2335 > l
	} else {
		yyb2335 = r.CheckBreak()
	}
	if yyb2335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2335++
	if yyhl2335 {
		yyb2335 = yyj2335 > l
	} else {
		yyb2335 = r.CheckBreak()
	}
	if yyb2335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2338 := &x.Conditions
		yym2339 := z.DecBinary()
		_ = yym2339
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2338), d)
		}
	}
	yyj2335++
	if yyhl2335 {
		yyb2335 = yyj2335 > l
	} else {
		yyb2335 = r.CheckBreak()
	}
	if yyb2335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2340 := &x.Addresses
		yym2341 := z.DecBinary()
		_ = yym2341
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2340), d)
		}
	}
	yyj2335++
	if yyhl2335 {
		yyb2335 = yyj2335 > l
	} else {
		yyb2335 = r.CheckBreak()
	}
	if yyb2335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2342 := &x.DaemonEndpoints
		yyv2342.CodecDecodeSelf(d)
	}
	yyj2335++
	if yyhl2335 {
		yyb2335 = yyj2335 > l
	} else {
		yyb2335 = r.CheckBreak()
	}
	if yyb2335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2343 := &x.NodeInfo
		yyv2343.CodecDecodeSelf(d)
	}
	for {
		yyj2335++
		if yyhl2335 {
			yyb2335 = yyj2335 > l
		} else {
			yyb2335 = r.CheckBreak()
		}
		if yyb2335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2344 := z.EncBinary()
	_ = yym2344
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2345 := z.DecBinary()
	_ = yym2345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2346 := z.EncBinary()
	_ = yym2346
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2347 := z.DecBinary()
	_ = yym2347
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2348 := z.EncBinary()
		_ = yym2348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2349 := !z.EncBinary()
			yy2arr2349 := z.EncBasicHandle().StructToArray
			var yyq2349 [6]bool
			_, _, _ = yysep2349, yyq2349, yy2arr2349
			const yyr2349 bool = false
			yyq2349[2] = true
			yyq2349[3] = true
			yyq2349[4] = x.Reason != ""
			yyq2349[5] = x.Message != ""
			var yynn2349 int
			if yyr2349 || yy2arr2349 {
				r.EncodeArrayStart(6)
			} else {
				yynn2349 = 2
				for _, b := range yyq2349 {
					if b {
						yynn2349++
					}
				}
				r.EncodeMapStart(yynn2349)
				yynn2349 = 0
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[2] {
					yy2353 := &x.LastHeartbeatTime
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2353) {
					} else if yym2354 {
						z.EncBinaryMarshal(yy2353)
					} else if !yym2354 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2353)
					} else {
						z.EncFallback(yy2353)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2355 := &x.LastHeartbeatTime
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2355) {
					} else if yym2356 {
						z.EncBinaryMarshal(yy2355)
					} else if !yym2356 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2355)
					} else {
						z.EncFallback(yy2355)
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[3] {
					yy2358 := &x.LastTransitionTime
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2358) {
					} else if yym2359 {
						z.EncBinaryMarshal(yy2358)
					} else if !yym2359 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2358)
					} else {
						z.EncFallback(yy2358)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2349[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2360 := &x.LastTransitionTime
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2360) {
					} else if yym2361 {
						z.EncBinaryMarshal(yy2360)
					} else if !yym2361 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2360)
					} else {
						z.EncFallback(yy2360)
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[4] {
					yym2363 := z.EncBinary()
					_ = yym2363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2349[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2364 := z.EncBinary()
					_ = yym2364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2349[5] {
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2349[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2367 := z.EncBinary()
					_ = yym2367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2349 || yy2arr2349 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2368 := z.DecBinary()
	_ = yym2368
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2369 := r.ContainerType()
		if yyct2369 == codecSelferValueTypeMap1234 {
			yyl2369 := r.ReadMapStart()
			if yyl2369 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2369, d)
			}
		} else if yyct2369 == codecSelferValueTypeArray1234 {
			yyl2369 := r.ReadArrayStart()
			if yyl2369 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2369, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2370Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2370Slc
	var yyhl2370 bool = l >= 0
	for yyj2370 := 0; ; yyj2370++ {
		if yyhl2370 {
			if yyj2370 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2370Slc = r.DecodeBytes(yys2370Slc, true, true)
		yys2370 := string(yys2370Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2370 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2373 := &x.LastHeartbeatTime
				yym2374 := z.DecBinary()
				_ = yym2374
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2373) {
				} else if yym2374 {
					z.DecBinaryUnmarshal(yyv2373)
				} else if !yym2374 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2373)
				} else {
					z.DecFallback(yyv2373, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2375 := &x.LastTransitionTime
				yym2376 := z.DecBinary()
				_ = yym2376
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2375) {
				} else if yym2376 {
					z.DecBinaryUnmarshal(yyv2375)
				} else if !yym2376 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2375)
				} else {
					z.DecFallback(yyv2375, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2370)
		} // end switch yys2370
	} // end for yyj2370
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2379 int
	var yyb2379 bool
	var yyhl2379 bool = l >= 0
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2382 := &x.LastHeartbeatTime
		yym2383 := z.DecBinary()
		_ = yym2383
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2382) {
		} else if yym2383 {
			z.DecBinaryUnmarshal(yyv2382)
		} else if !yym2383 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2382)
		} else {
			z.DecFallback(yyv2382, false)
		}
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2384 := &x.LastTransitionTime
		yym2385 := z.DecBinary()
		_ = yym2385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2384) {
		} else if yym2385 {
			z.DecBinaryUnmarshal(yyv2384)
		} else if !yym2385 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2384)
		} else {
			z.DecFallback(yyv2384, false)
		}
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2379++
	if yyhl2379 {
		yyb2379 = yyj2379 > l
	} else {
		yyb2379 = r.CheckBreak()
	}
	if yyb2379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2379++
		if yyhl2379 {
			yyb2379 = yyj2379 > l
		} else {
			yyb2379 = r.CheckBreak()
		}
		if yyb2379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2388 := z.EncBinary()
	_ = yym2388
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2389 := z.DecBinary()
	_ = yym2389
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2390 := z.EncBinary()
		_ = yym2390
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2391 := !z.EncBinary()
			yy2arr2391 := z.EncBasicHandle().StructToArray
			var yyq2391 [2]bool
			_, _, _ = yysep2391, yyq2391, yy2arr2391
			const yyr2391 bool = false
			var yynn2391 int
			if yyr2391 || yy2arr2391 {
				r.EncodeArrayStart(2)
			} else {
				yynn2391 = 2
				for _, b := range yyq2391 {
					if b {
						yynn2391++
					}
				}
				r.EncodeMapStart(yynn2391)
				yynn2391 = 0
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2394 := z.EncBinary()
				_ = yym2394
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2395 := z.EncBinary()
				_ = yym2395
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2391 || yy2arr2391 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2396 := z.DecBinary()
	_ = yym2396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2397 := r.ContainerType()
		if yyct2397 == codecSelferValueTypeMap1234 {
			yyl2397 := r.ReadMapStart()
			if yyl2397 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2397, d)
			}
		} else if yyct2397 == codecSelferValueTypeArray1234 {
			yyl2397 := r.ReadArrayStart()
			if yyl2397 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2398Slc
	var yyhl2398 bool = l >= 0
	for yyj2398 := 0; ; yyj2398++ {
		if yyhl2398 {
			if yyj2398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2398Slc = r.DecodeBytes(yys2398Slc, true, true)
		yys2398 := string(yys2398Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2398 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2398)
		} // end switch yys2398
	} // end for yyj2398
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2401 int
	var yyb2401 bool
	var yyhl2401 bool = l >= 0
	yyj2401++
	if yyhl2401 {
		yyb2401 = yyj2401 > l
	} else {
		yyb2401 = r.CheckBreak()
	}
	if yyb2401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2401++
	if yyhl2401 {
		yyb2401 = yyj2401 > l
	} else {
		yyb2401 = r.CheckBreak()
	}
	if yyb2401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2401++
		if yyhl2401 {
			yyb2401 = yyj2401 > l
		} else {
			yyb2401 = r.CheckBreak()
		}
		if yyb2401 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2401-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2404 := z.EncBinary()
		_ = yym2404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2405 := !z.EncBinary()
			yy2arr2405 := z.EncBasicHandle().StructToArray
			var yyq2405 [1]bool
			_, _, _ = yysep2405, yyq2405, yy2arr2405
			const yyr2405 bool = false
			yyq2405[0] = len(x.Capacity) != 0
			var yynn2405 int
			if yyr2405 || yy2arr2405 {
				r.EncodeArrayStart(1)
			} else {
				yynn2405 = 0
				for _, b := range yyq2405 {
					if b {
						yynn2405++
					}
				}
				r.EncodeMapStart(yynn2405)
				yynn2405 = 0
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2405[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2407 := z.DecBinary()
	_ = yym2407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2408 := r.ContainerType()
		if yyct2408 == codecSelferValueTypeMap1234 {
			yyl2408 := r.ReadMapStart()
			if yyl2408 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2408, d)
			}
		} else if yyct2408 == codecSelferValueTypeArray1234 {
			yyl2408 := r.ReadArrayStart()
			if yyl2408 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2409Slc
	var yyhl2409 bool = l >= 0
	for yyj2409 := 0; ; yyj2409++ {
		if yyhl2409 {
			if yyj2409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2409Slc = r.DecodeBytes(yys2409Slc, true, true)
		yys2409 := string(yys2409Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2409 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2410 := &x.Capacity
				yyv2410.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2409)
		} // end switch yys2409
	} // end for yyj2409
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2411 int
	var yyb2411 bool
	var yyhl2411 bool = l >= 0
	yyj2411++
	if yyhl2411 {
		yyb2411 = yyj2411 > l
	} else {
		yyb2411 = r.CheckBreak()
	}
	if yyb2411 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2412 := &x.Capacity
		yyv2412.CodecDecodeSelf(d)
	}
	for {
		yyj2411++
		if yyhl2411 {
			yyb2411 = yyj2411 > l
		} else {
			yyb2411 = r.CheckBreak()
		}
		if yyb2411 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2411-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2413 := z.EncBinary()
	_ = yym2413
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2414 := z.DecBinary()
	_ = yym2414
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2415 := z.EncBinary()
		_ = yym2415
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2416 := z.DecBinary()
	_ = yym2416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2417 := z.EncBinary()
		_ = yym2417
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2418 := !z.EncBinary()
			yy2arr2418 := z.EncBasicHandle().StructToArray
			var yyq2418 [5]bool
			_, _, _ = yysep2418, yyq2418, yy2arr2418
			const yyr2418 bool = false
			yyq2418[0] = x.Kind != ""
			yyq2418[1] = x.APIVersion != ""
			yyq2418[2] = true
			yyq2418[3] = true
			yyq2418[4] = true
			var yynn2418 int
			if yyr2418 || yy2arr2418 {
				r.EncodeArrayStart(5)
			} else {
				yynn2418 = 0
				for _, b := range yyq2418 {
					if b {
						yynn2418++
					}
				}
				r.EncodeMapStart(yynn2418)
				yynn2418 = 0
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2418[0] {
					yym2420 := z.EncBinary()
					_ = yym2420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2418[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2418[1] {
					yym2423 := z.EncBinary()
					_ = yym2423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2418[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2424 := z.EncBinary()
					_ = yym2424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2418[2] {
					yy2426 := &x.ObjectMeta
					yy2426.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2418[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2427 := &x.ObjectMeta
					yy2427.CodecEncodeSelf(e)
				}
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2418[3] {
					yy2429 := &x.Spec
					yy2429.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2418[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2430 := &x.Spec
					yy2430.CodecEncodeSelf(e)
				}
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2418[4] {
					yy2432 := &x.Status
					yy2432.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2418[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2433 := &x.Status
					yy2433.CodecEncodeSelf(e)
				}
			}
			if yyr2418 || yy2arr2418 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2434 := z.DecBinary()
	_ = yym2434
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2435 := r.ContainerType()
		if yyct2435 == codecSelferValueTypeMap1234 {
			yyl2435 := r.ReadMapStart()
			if yyl2435 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2435, d)
			}
		} else if yyct2435 == codecSelferValueTypeArray1234 {
			yyl2435 := r.ReadArrayStart()
			if yyl2435 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2435, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2436Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2436Slc
	var yyhl2436 bool = l >= 0
	for yyj2436 := 0; ; yyj2436++ {
		if yyhl2436 {
			if yyj2436 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2436Slc = r.DecodeBytes(yys2436Slc, true, true)
		yys2436 := string(yys2436Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2436 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2439 := &x.ObjectMeta
				yyv2439.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2440 := &x.Spec
				yyv2440.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2441 := &x.Status
				yyv2441.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2436)
		} // end switch yys2436
	} // end for yyj2436
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2442 int
	var yyb2442 bool
	var yyhl2442 bool = l >= 0
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2445 := &x.ObjectMeta
		yyv2445.CodecDecodeSelf(d)
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2446 := &x.Spec
		yyv2446.CodecDecodeSelf(d)
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2447 := &x.Status
		yyv2447.CodecDecodeSelf(d)
	}
	for {
		yyj2442++
		if yyhl2442 {
			yyb2442 = yyj2442 > l
		} else {
			yyb2442 = r.CheckBreak()
		}
		if yyb2442 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2442-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2448 := z.EncBinary()
		_ = yym2448
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2449 := !z.EncBinary()
			yy2arr2449 := z.EncBasicHandle().StructToArray
			var yyq2449 [4]bool
			_, _, _ = yysep2449, yyq2449, yy2arr2449
			const yyr2449 bool = false
			yyq2449[0] = x.Kind != ""
			yyq2449[1] = x.APIVersion != ""
			yyq2449[2] = true
			var yynn2449 int
			if yyr2449 || yy2arr2449 {
				r.EncodeArrayStart(4)
			} else {
				yynn2449 = 1
				for _, b := range yyq2449 {
					if b {
						yynn2449++
					}
				}
				r.EncodeMapStart(yynn2449)
				yynn2449 = 0
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2449[0] {
					yym2451 := z.EncBinary()
					_ = yym2451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2449[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2452 := z.EncBinary()
					_ = yym2452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2449[1] {
					yym2454 := z.EncBinary()
					_ = yym2454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2449[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2449[2] {
					yy2457 := &x.ListMeta
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2457) {
					} else {
						z.EncFallback(yy2457)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2449[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2459 := &x.ListMeta
					yym2460 := z.EncBinary()
					_ = yym2460
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2459) {
					} else {
						z.EncFallback(yy2459)
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2462 := z.EncBinary()
					_ = yym2462
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2463 := z.EncBinary()
					_ = yym2463
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2449 || yy2arr2449 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2464 := z.DecBinary()
	_ = yym2464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2465 := r.ContainerType()
		if yyct2465 == codecSelferValueTypeMap1234 {
			yyl2465 := r.ReadMapStart()
			if yyl2465 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2465, d)
			}
		} else if yyct2465 == codecSelferValueTypeArray1234 {
			yyl2465 := r.ReadArrayStart()
			if yyl2465 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2466Slc
	var yyhl2466 bool = l >= 0
	for yyj2466 := 0; ; yyj2466++ {
		if yyhl2466 {
			if yyj2466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2466Slc = r.DecodeBytes(yys2466Slc, true, true)
		yys2466 := string(yys2466Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2466 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2469 := &x.ListMeta
				yym2470 := z.DecBinary()
				_ = yym2470
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2469) {
				} else {
					z.DecFallback(yyv2469, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2471 := &x.Items
				yym2472 := z.DecBinary()
				_ = yym2472
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2471), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2466)
		} // end switch yys2466
	} // end for yyj2466
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2473 int
	var yyb2473 bool
	var yyhl2473 bool = l >= 0
	yyj2473++
	if yyhl2473 {
		yyb2473 = yyj2473 > l
	} else {
		yyb2473 = r.CheckBreak()
	}
	if yyb2473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2473++
	if yyhl2473 {
		yyb2473 = yyj2473 > l
	} else {
		yyb2473 = r.CheckBreak()
	}
	if yyb2473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2473++
	if yyhl2473 {
		yyb2473 = yyj2473 > l
	} else {
		yyb2473 = r.CheckBreak()
	}
	if yyb2473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2476 := &x.ListMeta
		yym2477 := z.DecBinary()
		_ = yym2477
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2476) {
		} else {
			z.DecFallback(yyv2476, false)
		}
	}
	yyj2473++
	if yyhl2473 {
		yyb2473 = yyj2473 > l
	} else {
		yyb2473 = r.CheckBreak()
	}
	if yyb2473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2478 := &x.Items
		yym2479 := z.DecBinary()
		_ = yym2479
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2478), d)
		}
	}
	for {
		yyj2473++
		if yyhl2473 {
			yyb2473 = yyj2473 > l
		} else {
			yyb2473 = r.CheckBreak()
		}
		if yyb2473 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2473-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2480 := z.EncBinary()
		_ = yym2480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2481 := !z.EncBinary()
			yy2arr2481 := z.EncBasicHandle().StructToArray
			var yyq2481 [1]bool
			_, _, _ = yysep2481, yyq2481, yy2arr2481
			const yyr2481 bool = false
			var yynn2481 int
			if yyr2481 || yy2arr2481 {
				r.EncodeArrayStart(1)
			} else {
				yynn2481 = 1
				for _, b := range yyq2481 {
					if b {
						yynn2481++
					}
				}
				r.EncodeMapStart(yynn2481)
				yynn2481 = 0
			}
			if yyr2481 || yy2arr2481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2483 := z.EncBinary()
					_ = yym2483
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2484 := z.EncBinary()
					_ = yym2484
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr2481 || yy2arr2481 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2485 := z.DecBinary()
	_ = yym2485
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2486 := r.ContainerType()
		if yyct2486 == codecSelferValueTypeMap1234 {
			yyl2486 := r.ReadMapStart()
			if yyl2486 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2486, d)
			}
		} else if yyct2486 == codecSelferValueTypeArray1234 {
			yyl2486 := r.ReadArrayStart()
			if yyl2486 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2486, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2487Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2487Slc
	var yyhl2487 bool = l >= 0
	for yyj2487 := 0; ; yyj2487++ {
		if yyhl2487 {
			if yyj2487 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2487Slc = r.DecodeBytes(yys2487Slc, true, true)
		yys2487 := string(yys2487Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2487 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2488 := &x.Finalizers
				yym2489 := z.DecBinary()
				_ = yym2489
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2488), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2487)
		} // end switch yys2487
	} // end for yyj2487
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2490 int
	var yyb2490 bool
	var yyhl2490 bool = l >= 0
	yyj2490++
	if yyhl2490 {
		yyb2490 = yyj2490 > l
	} else {
		yyb2490 = r.CheckBreak()
	}
	if yyb2490 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2491 := &x.Finalizers
		yym2492 := z.DecBinary()
		_ = yym2492
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2491), d)
		}
	}
	for {
		yyj2490++
		if yyhl2490 {
			yyb2490 = yyj2490 > l
		} else {
			yyb2490 = r.CheckBreak()
		}
		if yyb2490 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2490-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2493 := z.EncBinary()
	_ = yym2493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2494 := z.DecBinary()
	_ = yym2494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2495 := z.EncBinary()
		_ = yym2495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2496 := !z.EncBinary()
			yy2arr2496 := z.EncBasicHandle().StructToArray
			var yyq2496 [1]bool
			_, _, _ = yysep2496, yyq2496, yy2arr2496
			const yyr2496 bool = false
			yyq2496[0] = x.Phase != ""
			var yynn2496 int
			if yyr2496 || yy2arr2496 {
				r.EncodeArrayStart(1)
			} else {
				yynn2496 = 0
				for _, b := range yyq2496 {
					if b {
						yynn2496++
					}
				}
				r.EncodeMapStart(yynn2496)
				yynn2496 = 0
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2496[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2496[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2496 || yy2arr2496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2498 := z.DecBinary()
	_ = yym2498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2499 := r.ContainerType()
		if yyct2499 == codecSelferValueTypeMap1234 {
			yyl2499 := r.ReadMapStart()
			if yyl2499 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2499, d)
			}
		} else if yyct2499 == codecSelferValueTypeArray1234 {
			yyl2499 := r.ReadArrayStart()
			if yyl2499 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2499, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2500Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2500Slc
	var yyhl2500 bool = l >= 0
	for yyj2500 := 0; ; yyj2500++ {
		if yyhl2500 {
			if yyj2500 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2500Slc = r.DecodeBytes(yys2500Slc, true, true)
		yys2500 := string(yys2500Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2500 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2500)
		} // end switch yys2500
	} // end for yyj2500
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2502 int
	var yyb2502 bool
	var yyhl2502 bool = l >= 0
	yyj2502++
	if yyhl2502 {
		yyb2502 = yyj2502 > l
	} else {
		yyb2502 = r.CheckBreak()
	}
	if yyb2502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2502++
		if yyhl2502 {
			yyb2502 = yyj2502 > l
		} else {
			yyb2502 = r.CheckBreak()
		}
		if yyb2502 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2502-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2504 := z.EncBinary()
	_ = yym2504
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2505 := z.DecBinary()
	_ = yym2505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2506 := z.EncBinary()
		_ = yym2506
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2507 := !z.EncBinary()
			yy2arr2507 := z.EncBasicHandle().StructToArray
			var yyq2507 [5]bool
			_, _, _ = yysep2507, yyq2507, yy2arr2507
			const yyr2507 bool = false
			yyq2507[0] = x.Kind != ""
			yyq2507[1] = x.APIVersion != ""
			yyq2507[2] = true
			yyq2507[3] = true
			yyq2507[4] = true
			var yynn2507 int
			if yyr2507 || yy2arr2507 {
				r.EncodeArrayStart(5)
			} else {
				yynn2507 = 0
				for _, b := range yyq2507 {
					if b {
						yynn2507++
					}
				}
				r.EncodeMapStart(yynn2507)
				yynn2507 = 0
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2507[0] {
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2507[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2510 := z.EncBinary()
					_ = yym2510
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2507[1] {
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2507[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2513 := z.EncBinary()
					_ = yym2513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2507[2] {
					yy2515 := &x.ObjectMeta
					yy2515.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2507[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2516 := &x.ObjectMeta
					yy2516.CodecEncodeSelf(e)
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2507[3] {
					yy2518 := &x.Spec
					yy2518.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2507[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2519 := &x.Spec
					yy2519.CodecEncodeSelf(e)
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2507[4] {
					yy2521 := &x.Status
					yy2521.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2507[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2522 := &x.Status
					yy2522.CodecEncodeSelf(e)
				}
			}
			if yyr2507 || yy2arr2507 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2523 := z.DecBinary()
	_ = yym2523
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2524 := r.ContainerType()
		if yyct2524 == codecSelferValueTypeMap1234 {
			yyl2524 := r.ReadMapStart()
			if yyl2524 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2524, d)
			}
		} else if yyct2524 == codecSelferValueTypeArray1234 {
			yyl2524 := r.ReadArrayStart()
			if yyl2524 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2524, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2525Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2525Slc
	var yyhl2525 bool = l >= 0
	for yyj2525 := 0; ; yyj2525++ {
		if yyhl2525 {
			if yyj2525 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2525Slc = r.DecodeBytes(yys2525Slc, true, true)
		yys2525 := string(yys2525Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2525 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2528 := &x.ObjectMeta
				yyv2528.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2529 := &x.Spec
				yyv2529.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2530 := &x.Status
				yyv2530.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2525)
		} // end switch yys2525
	} // end for yyj2525
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2531 int
	var yyb2531 bool
	var yyhl2531 bool = l >= 0
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2534 := &x.ObjectMeta
		yyv2534.CodecDecodeSelf(d)
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2535 := &x.Spec
		yyv2535.CodecDecodeSelf(d)
	}
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2536 := &x.Status
		yyv2536.CodecDecodeSelf(d)
	}
	for {
		yyj2531++
		if yyhl2531 {
			yyb2531 = yyj2531 > l
		} else {
			yyb2531 = r.CheckBreak()
		}
		if yyb2531 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2531-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2537 := z.EncBinary()
		_ = yym2537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2538 := !z.EncBinary()
			yy2arr2538 := z.EncBasicHandle().StructToArray
			var yyq2538 [4]bool
			_, _, _ = yysep2538, yyq2538, yy2arr2538
			const yyr2538 bool = false
			yyq2538[0] = x.Kind != ""
			yyq2538[1] = x.APIVersion != ""
			yyq2538[2] = true
			var yynn2538 int
			if yyr2538 || yy2arr2538 {
				r.EncodeArrayStart(4)
			} else {
				yynn2538 = 1
				for _, b := range yyq2538 {
					if b {
						yynn2538++
					}
				}
				r.EncodeMapStart(yynn2538)
				yynn2538 = 0
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2538[0] {
					yym2540 := z.EncBinary()
					_ = yym2540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2538[1] {
					yym2543 := z.EncBinary()
					_ = yym2543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2538[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2538[2] {
					yy2546 := &x.ListMeta
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2546) {
					} else {
						z.EncFallback(yy2546)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2538[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2548 := &x.ListMeta
					yym2549 := z.EncBinary()
					_ = yym2549
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2548) {
					} else {
						z.EncFallback(yy2548)
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2551 := z.EncBinary()
					_ = yym2551
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2552 := z.EncBinary()
					_ = yym2552
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2538 || yy2arr2538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2553 := z.DecBinary()
	_ = yym2553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2554 := r.ContainerType()
		if yyct2554 == codecSelferValueTypeMap1234 {
			yyl2554 := r.ReadMapStart()
			if yyl2554 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2554, d)
			}
		} else if yyct2554 == codecSelferValueTypeArray1234 {
			yyl2554 := r.ReadArrayStart()
			if yyl2554 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2554, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2555Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2555Slc
	var yyhl2555 bool = l >= 0
	for yyj2555 := 0; ; yyj2555++ {
		if yyhl2555 {
			if yyj2555 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2555Slc = r.DecodeBytes(yys2555Slc, true, true)
		yys2555 := string(yys2555Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2555 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2558 := &x.ListMeta
				yym2559 := z.DecBinary()
				_ = yym2559
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2558) {
				} else {
					z.DecFallback(yyv2558, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2560 := &x.Items
				yym2561 := z.DecBinary()
				_ = yym2561
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2560), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2555)
		} // end switch yys2555
	} // end for yyj2555
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2562 int
	var yyb2562 bool
	var yyhl2562 bool = l >= 0
	yyj2562++
	if yyhl2562 {
		yyb2562 = yyj2562 > l
	} else {
		yyb2562 = r.CheckBreak()
	}
	if yyb2562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2562++
	if yyhl2562 {
		yyb2562 = yyj2562 > l
	} else {
		yyb2562 = r.CheckBreak()
	}
	if yyb2562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2562++
	if yyhl2562 {
		yyb2562 = yyj2562 > l
	} else {
		yyb2562 = r.CheckBreak()
	}
	if yyb2562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2565 := &x.ListMeta
		yym2566 := z.DecBinary()
		_ = yym2566
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2565) {
		} else {
			z.DecFallback(yyv2565, false)
		}
	}
	yyj2562++
	if yyhl2562 {
		yyb2562 = yyj2562 > l
	} else {
		yyb2562 = r.CheckBreak()
	}
	if yyb2562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2567 := &x.Items
		yym2568 := z.DecBinary()
		_ = yym2568
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2567), d)
		}
	}
	for {
		yyj2562++
		if yyhl2562 {
			yyb2562 = yyj2562 > l
		} else {
			yyb2562 = r.CheckBreak()
		}
		if yyb2562 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2562-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2569 := z.EncBinary()
		_ = yym2569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2570 := !z.EncBinary()
			yy2arr2570 := z.EncBasicHandle().StructToArray
			var yyq2570 [4]bool
			_, _, _ = yysep2570, yyq2570, yy2arr2570
			const yyr2570 bool = false
			yyq2570[0] = x.Kind != ""
			yyq2570[1] = x.APIVersion != ""
			yyq2570[2] = true
			var yynn2570 int
			if yyr2570 || yy2arr2570 {
				r.EncodeArrayStart(4)
			} else {
				yynn2570 = 1
				for _, b := range yyq2570 {
					if b {
						yynn2570++
					}
				}
				r.EncodeMapStart(yynn2570)
				yynn2570 = 0
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2570[0] {
					yym2572 := z.EncBinary()
					_ = yym2572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2570[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2573 := z.EncBinary()
					_ = yym2573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2570[1] {
					yym2575 := z.EncBinary()
					_ = yym2575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2570[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2576 := z.EncBinary()
					_ = yym2576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2570[2] {
					yy2578 := &x.ObjectMeta
					yy2578.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2570[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2579 := &x.ObjectMeta
					yy2579.CodecEncodeSelf(e)
				}
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2581 := &x.Target
				yy2581.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2582 := &x.Target
				yy2582.CodecEncodeSelf(e)
			}
			if yyr2570 || yy2arr2570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2583 := z.DecBinary()
	_ = yym2583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2584 := r.ContainerType()
		if yyct2584 == codecSelferValueTypeMap1234 {
			yyl2584 := r.ReadMapStart()
			if yyl2584 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2584, d)
			}
		} else if yyct2584 == codecSelferValueTypeArray1234 {
			yyl2584 := r.ReadArrayStart()
			if yyl2584 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2584, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2585Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2585Slc
	var yyhl2585 bool = l >= 0
	for yyj2585 := 0; ; yyj2585++ {
		if yyhl2585 {
			if yyj2585 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2585Slc = r.DecodeBytes(yys2585Slc, true, true)
		yys2585 := string(yys2585Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2585 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2588 := &x.ObjectMeta
				yyv2588.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2589 := &x.Target
				yyv2589.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2585)
		} // end switch yys2585
	} // end for yyj2585
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2590 int
	var yyb2590 bool
	var yyhl2590 bool = l >= 0
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2593 := &x.ObjectMeta
		yyv2593.CodecDecodeSelf(d)
	}
	yyj2590++
	if yyhl2590 {
		yyb2590 = yyj2590 > l
	} else {
		yyb2590 = r.CheckBreak()
	}
	if yyb2590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2594 := &x.Target
		yyv2594.CodecDecodeSelf(d)
	}
	for {
		yyj2590++
		if yyhl2590 {
			yyb2590 = yyj2590 > l
		} else {
			yyb2590 = r.CheckBreak()
		}
		if yyb2590 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2590-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2595 := z.EncBinary()
		_ = yym2595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2596 := !z.EncBinary()
			yy2arr2596 := z.EncBasicHandle().StructToArray
			var yyq2596 [3]bool
			_, _, _ = yysep2596, yyq2596, yy2arr2596
			const yyr2596 bool = false
			yyq2596[0] = x.Kind != ""
			yyq2596[1] = x.APIVersion != ""
			var yynn2596 int
			if yyr2596 || yy2arr2596 {
				r.EncodeArrayStart(3)
			} else {
				yynn2596 = 1
				for _, b := range yyq2596 {
					if b {
						yynn2596++
					}
				}
				r.EncodeMapStart(yynn2596)
				yynn2596 = 0
			}
			if yyr2596 || yy2arr2596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2596[0] {
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2596[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2596[1] {
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2596[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2604 := *x.GracePeriodSeconds
					yym2605 := z.EncBinary()
					_ = yym2605
					if false {
					} else {
						r.EncodeInt(int64(yy2604))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2606 := *x.GracePeriodSeconds
					yym2607 := z.EncBinary()
					_ = yym2607
					if false {
					} else {
						r.EncodeInt(int64(yy2606))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2608 := z.DecBinary()
	_ = yym2608
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2609 := r.ContainerType()
		if yyct2609 == codecSelferValueTypeMap1234 {
			yyl2609 := r.ReadMapStart()
			if yyl2609 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2609, d)
			}
		} else if yyct2609 == codecSelferValueTypeArray1234 {
			yyl2609 := r.ReadArrayStart()
			if yyl2609 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2609, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2610Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2610Slc
	var yyhl2610 bool = l >= 0
	for yyj2610 := 0; ; yyj2610++ {
		if yyhl2610 {
			if yyj2610 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2610Slc = r.DecodeBytes(yys2610Slc, true, true)
		yys2610 := string(yys2610Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2610 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2614 := z.DecBinary()
				_ = yym2614
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2610)
		} // end switch yys2610
	} // end for yyj2610
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2615 int
	var yyb2615 bool
	var yyhl2615 bool = l >= 0
	yyj2615++
	if yyhl2615 {
		yyb2615 = yyj2615 > l
	} else {
		yyb2615 = r.CheckBreak()
	}
	if yyb2615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2615++
	if yyhl2615 {
		yyb2615 = yyj2615 > l
	} else {
		yyb2615 = r.CheckBreak()
	}
	if yyb2615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2615++
	if yyhl2615 {
		yyb2615 = yyj2615 > l
	} else {
		yyb2615 = r.CheckBreak()
	}
	if yyb2615 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2619 := z.DecBinary()
		_ = yym2619
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2615++
		if yyhl2615 {
			yyb2615 = yyj2615 > l
		} else {
			yyb2615 = r.CheckBreak()
		}
		if yyb2615 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2615-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2620 := z.EncBinary()
		_ = yym2620
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2621 := !z.EncBinary()
			yy2arr2621 := z.EncBasicHandle().StructToArray
			var yyq2621 [10]bool
			_, _, _ = yysep2621, yyq2621, yy2arr2621
			const yyr2621 bool = false
			yyq2621[0] = x.Kind != ""
			yyq2621[1] = x.APIVersion != ""
			var yynn2621 int
			if yyr2621 || yy2arr2621 {
				r.EncodeArrayStart(10)
			} else {
				yynn2621 = 8
				for _, b := range yyq2621 {
					if b {
						yynn2621++
					}
				}
				r.EncodeMapStart(yynn2621)
				yynn2621 = 0
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2621[0] {
					yym2623 := z.EncBinary()
					_ = yym2623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2621[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2624 := z.EncBinary()
					_ = yym2624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2621[1] {
					yym2626 := z.EncBinary()
					_ = yym2626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2621[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2627 := z.EncBinary()
					_ = yym2627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2629 := z.EncBinary()
				_ = yym2629
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2630 := z.EncBinary()
				_ = yym2630
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2632 := z.EncBinary()
				_ = yym2632
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2633 := z.EncBinary()
				_ = yym2633
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2635 := z.EncBinary()
				_ = yym2635
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2636 := z.EncBinary()
				_ = yym2636
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2638 := *x.SinceSeconds
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						r.EncodeInt(int64(yy2638))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2640 := *x.SinceSeconds
					yym2641 := z.EncBinary()
					_ = yym2641
					if false {
					} else {
						r.EncodeInt(int64(yy2640))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2643 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2643 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2644 := z.EncBinary()
					_ = yym2644
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2644 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2644 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2646 := z.EncBinary()
				_ = yym2646
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2647 := z.EncBinary()
				_ = yym2647
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2649 := *x.TailLines
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						r.EncodeInt(int64(yy2649))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2651 := *x.TailLines
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeInt(int64(yy2651))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2654 := *x.LimitBytes
					yym2655 := z.EncBinary()
					_ = yym2655
					if false {
					} else {
						r.EncodeInt(int64(yy2654))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2656 := *x.LimitBytes
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else {
						r.EncodeInt(int64(yy2656))
					}
				}
			}
			if yyr2621 || yy2arr2621 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2658 := z.DecBinary()
	_ = yym2658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2659 := r.ContainerType()
		if yyct2659 == codecSelferValueTypeMap1234 {
			yyl2659 := r.ReadMapStart()
			if yyl2659 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2659, d)
			}
		} else if yyct2659 == codecSelferValueTypeArray1234 {
			yyl2659 := r.ReadArrayStart()
			if yyl2659 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2660Slc
	var yyhl2660 bool = l >= 0
	for yyj2660 := 0; ; yyj2660++ {
		if yyhl2660 {
			if yyj2660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2660Slc = r.DecodeBytes(yys2660Slc, true, true)
		yys2660 := string(yys2660Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2660 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2667 := z.DecBinary()
				_ = yym2667
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2669 := z.DecBinary()
				_ = yym2669
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2669 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2669 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2672 := z.DecBinary()
				_ = yym2672
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2674 := z.DecBinary()
				_ = yym2674
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2660)
		} // end switch yys2660
	} // end for yyj2660
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2675 int
	var yyb2675 bool
	var yyhl2675 bool = l >= 0
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2682 := z.DecBinary()
		_ = yym2682
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2684 := z.DecBinary()
		_ = yym2684
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2684 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2684 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2687 := z.DecBinary()
		_ = yym2687
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2675++
	if yyhl2675 {
		yyb2675 = yyj2675 > l
	} else {
		yyb2675 = r.CheckBreak()
	}
	if yyb2675 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2689 := z.DecBinary()
		_ = yym2689
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2675++
		if yyhl2675 {
			yyb2675 = yyj2675 > l
		} else {
			yyb2675 = r.CheckBreak()
		}
		if yyb2675 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2675-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2690 := z.EncBinary()
		_ = yym2690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2691 := !z.EncBinary()
			yy2arr2691 := z.EncBasicHandle().StructToArray
			var yyq2691 [7]bool
			_, _, _ = yysep2691, yyq2691, yy2arr2691
			const yyr2691 bool = false
			yyq2691[0] = x.Kind != ""
			yyq2691[1] = x.APIVersion != ""
			yyq2691[2] = x.Stdin != false
			yyq2691[3] = x.Stdout != false
			yyq2691[4] = x.Stderr != false
			yyq2691[5] = x.TTY != false
			yyq2691[6] = x.Container != ""
			var yynn2691 int
			if yyr2691 || yy2arr2691 {
				r.EncodeArrayStart(7)
			} else {
				yynn2691 = 0
				for _, b := range yyq2691 {
					if b {
						yynn2691++
					}
				}
				r.EncodeMapStart(yynn2691)
				yynn2691 = 0
			}
			if yyr2691 || yy2arr2691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2691[0] {
					yym2693 := z.EncBinary()
					_ = yym2693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2691[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2694 := z.EncBinary()
					_ = yym2694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2691[1] {
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2691[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2691[2] {
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2691[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2691[3] {
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2691[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2703 := z.EncBinary()
					_ = yym2703
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2691[4] {
					yym2705 := z.EncBinary()
					_ = yym2705
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2691[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2691[5] {
					yym2708 := z.EncBinary()
					_ = yym2708
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2691[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2691[6] {
					yym2711 := z.EncBinary()
					_ = yym2711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2691[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2712 := z.EncBinary()
					_ = yym2712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2691 || yy2arr2691 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2713 := z.DecBinary()
	_ = yym2713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2714 := r.ContainerType()
		if yyct2714 == codecSelferValueTypeMap1234 {
			yyl2714 := r.ReadMapStart()
			if yyl2714 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2714, d)
			}
		} else if yyct2714 == codecSelferValueTypeArray1234 {
			yyl2714 := r.ReadArrayStart()
			if yyl2714 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2715Slc
	var yyhl2715 bool = l >= 0
	for yyj2715 := 0; ; yyj2715++ {
		if yyhl2715 {
			if yyj2715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2715Slc = r.DecodeBytes(yys2715Slc, true, true)
		yys2715 := string(yys2715Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2715 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2715)
		} // end switch yys2715
	} // end for yyj2715
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2723 int
	var yyb2723 bool
	var yyhl2723 bool = l >= 0
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2723++
	if yyhl2723 {
		yyb2723 = yyj2723 > l
	} else {
		yyb2723 = r.CheckBreak()
	}
	if yyb2723 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2723++
		if yyhl2723 {
			yyb2723 = yyj2723 > l
		} else {
			yyb2723 = r.CheckBreak()
		}
		if yyb2723 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2723-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2731 := z.EncBinary()
		_ = yym2731
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2732 := !z.EncBinary()
			yy2arr2732 := z.EncBasicHandle().StructToArray
			var yyq2732 [8]bool
			_, _, _ = yysep2732, yyq2732, yy2arr2732
			const yyr2732 bool = false
			yyq2732[0] = x.Kind != ""
			yyq2732[1] = x.APIVersion != ""
			var yynn2732 int
			if yyr2732 || yy2arr2732 {
				r.EncodeArrayStart(8)
			} else {
				yynn2732 = 6
				for _, b := range yyq2732 {
					if b {
						yynn2732++
					}
				}
				r.EncodeMapStart(yynn2732)
				yynn2732 = 0
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2732[0] {
					yym2734 := z.EncBinary()
					_ = yym2734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2732[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2735 := z.EncBinary()
					_ = yym2735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2732[1] {
					yym2737 := z.EncBinary()
					_ = yym2737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2732[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2738 := z.EncBinary()
					_ = yym2738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2740 := z.EncBinary()
				_ = yym2740
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2741 := z.EncBinary()
				_ = yym2741
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2743 := z.EncBinary()
				_ = yym2743
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2744 := z.EncBinary()
				_ = yym2744
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2746 := z.EncBinary()
				_ = yym2746
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2747 := z.EncBinary()
				_ = yym2747
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2749 := z.EncBinary()
				_ = yym2749
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2750 := z.EncBinary()
				_ = yym2750
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2752 := z.EncBinary()
				_ = yym2752
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2753 := z.EncBinary()
				_ = yym2753
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr2732 || yy2arr2732 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2757 := z.DecBinary()
	_ = yym2757
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2758 := r.ContainerType()
		if yyct2758 == codecSelferValueTypeMap1234 {
			yyl2758 := r.ReadMapStart()
			if yyl2758 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2758, d)
			}
		} else if yyct2758 == codecSelferValueTypeArray1234 {
			yyl2758 := r.ReadArrayStart()
			if yyl2758 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2758, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2759Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2759Slc
	var yyhl2759 bool = l >= 0
	for yyj2759 := 0; ; yyj2759++ {
		if yyhl2759 {
			if yyj2759 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2759Slc = r.DecodeBytes(yys2759Slc, true, true)
		yys2759 := string(yys2759Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2759 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2767 := &x.Command
				yym2768 := z.DecBinary()
				_ = yym2768
				if false {
				} else {
					z.F.DecSliceStringX(yyv2767, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2759)
		} // end switch yys2759
	} // end for yyj2759
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2769 int
	var yyb2769 bool
	var yyhl2769 bool = l >= 0
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2769++
	if yyhl2769 {
		yyb2769 = yyj2769 > l
	} else {
		yyb2769 = r.CheckBreak()
	}
	if yyb2769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2777 := &x.Command
		yym2778 := z.DecBinary()
		_ = yym2778
		if false {
		} else {
			z.F.DecSliceStringX(yyv2777, false, d)
		}
	}
	for {
		yyj2769++
		if yyhl2769 {
			yyb2769 = yyj2769 > l
		} else {
			yyb2769 = r.CheckBreak()
		}
		if yyb2769 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2769-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2779 := z.EncBinary()
		_ = yym2779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2780 := !z.EncBinary()
			yy2arr2780 := z.EncBasicHandle().StructToArray
			var yyq2780 [3]bool
			_, _, _ = yysep2780, yyq2780, yy2arr2780
			const yyr2780 bool = false
			yyq2780[0] = x.Kind != ""
			yyq2780[1] = x.APIVersion != ""
			var yynn2780 int
			if yyr2780 || yy2arr2780 {
				r.EncodeArrayStart(3)
			} else {
				yynn2780 = 1
				for _, b := range yyq2780 {
					if b {
						yynn2780++
					}
				}
				r.EncodeMapStart(yynn2780)
				yynn2780 = 0
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2780[0] {
					yym2782 := z.EncBinary()
					_ = yym2782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2780[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2783 := z.EncBinary()
					_ = yym2783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2780[1] {
					yym2785 := z.EncBinary()
					_ = yym2785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2788 := z.EncBinary()
				_ = yym2788
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2789 := z.EncBinary()
				_ = yym2789
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr2780 || yy2arr2780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2790 := z.DecBinary()
	_ = yym2790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2791 := r.ContainerType()
		if yyct2791 == codecSelferValueTypeMap1234 {
			yyl2791 := r.ReadMapStart()
			if yyl2791 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2791, d)
			}
		} else if yyct2791 == codecSelferValueTypeArray1234 {
			yyl2791 := r.ReadArrayStart()
			if yyl2791 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2791, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2792Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2792Slc
	var yyhl2792 bool = l >= 0
	for yyj2792 := 0; ; yyj2792++ {
		if yyhl2792 {
			if yyj2792 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2792Slc = r.DecodeBytes(yys2792Slc, true, true)
		yys2792 := string(yys2792Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2792 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2792)
		} // end switch yys2792
	} // end for yyj2792
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2796 int
	var yyb2796 bool
	var yyhl2796 bool = l >= 0
	yyj2796++
	if yyhl2796 {
		yyb2796 = yyj2796 > l
	} else {
		yyb2796 = r.CheckBreak()
	}
	if yyb2796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2796++
	if yyhl2796 {
		yyb2796 = yyj2796 > l
	} else {
		yyb2796 = r.CheckBreak()
	}
	if yyb2796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2796++
	if yyhl2796 {
		yyb2796 = yyj2796 > l
	} else {
		yyb2796 = r.CheckBreak()
	}
	if yyb2796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2796++
		if yyhl2796 {
			yyb2796 = yyj2796 > l
		} else {
			yyb2796 = r.CheckBreak()
		}
		if yyb2796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2800 := z.EncBinary()
		_ = yym2800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2801 := !z.EncBinary()
			yy2arr2801 := z.EncBasicHandle().StructToArray
			var yyq2801 [7]bool
			_, _, _ = yysep2801, yyq2801, yy2arr2801
			const yyr2801 bool = false
			yyq2801[0] = x.Kind != ""
			yyq2801[1] = x.Namespace != ""
			yyq2801[2] = x.Name != ""
			yyq2801[3] = x.UID != ""
			yyq2801[4] = x.APIVersion != ""
			yyq2801[5] = x.ResourceVersion != ""
			yyq2801[6] = x.FieldPath != ""
			var yynn2801 int
			if yyr2801 || yy2arr2801 {
				r.EncodeArrayStart(7)
			} else {
				yynn2801 = 0
				for _, b := range yyq2801 {
					if b {
						yynn2801++
					}
				}
				r.EncodeMapStart(yynn2801)
				yynn2801 = 0
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[0] {
					yym2803 := z.EncBinary()
					_ = yym2803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2804 := z.EncBinary()
					_ = yym2804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[1] {
					yym2806 := z.EncBinary()
					_ = yym2806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[2] {
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[3] {
					yym2812 := z.EncBinary()
					_ = yym2812
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2813 := z.EncBinary()
					_ = yym2813
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[4] {
					yym2815 := z.EncBinary()
					_ = yym2815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[5] {
					yym2818 := z.EncBinary()
					_ = yym2818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2819 := z.EncBinary()
					_ = yym2819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2801[6] {
					yym2821 := z.EncBinary()
					_ = yym2821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2801[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2822 := z.EncBinary()
					_ = yym2822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr2801 || yy2arr2801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2823 := z.DecBinary()
	_ = yym2823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2824 := r.ContainerType()
		if yyct2824 == codecSelferValueTypeMap1234 {
			yyl2824 := r.ReadMapStart()
			if yyl2824 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2824, d)
			}
		} else if yyct2824 == codecSelferValueTypeArray1234 {
			yyl2824 := r.ReadArrayStart()
			if yyl2824 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2825Slc
	var yyhl2825 bool = l >= 0
	for yyj2825 := 0; ; yyj2825++ {
		if yyhl2825 {
			if yyj2825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2825Slc = r.DecodeBytes(yys2825Slc, true, true)
		yys2825 := string(yys2825Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2825 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2825)
		} // end switch yys2825
	} // end for yyj2825
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2833 int
	var yyb2833 bool
	var yyhl2833 bool = l >= 0
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2833++
	if yyhl2833 {
		yyb2833 = yyj2833 > l
	} else {
		yyb2833 = r.CheckBreak()
	}
	if yyb2833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2833++
		if yyhl2833 {
			yyb2833 = yyj2833 > l
		} else {
			yyb2833 = r.CheckBreak()
		}
		if yyb2833 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2833-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2841 := z.EncBinary()
		_ = yym2841
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2842 := !z.EncBinary()
			yy2arr2842 := z.EncBasicHandle().StructToArray
			var yyq2842 [1]bool
			_, _, _ = yysep2842, yyq2842, yy2arr2842
			const yyr2842 bool = false
			var yynn2842 int
			if yyr2842 || yy2arr2842 {
				r.EncodeArrayStart(1)
			} else {
				yynn2842 = 1
				for _, b := range yyq2842 {
					if b {
						yynn2842++
					}
				}
				r.EncodeMapStart(yynn2842)
				yynn2842 = 0
			}
			if yyr2842 || yy2arr2842 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2844 := z.EncBinary()
				_ = yym2844
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2845 := z.EncBinary()
				_ = yym2845
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2842 || yy2arr2842 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2846 := z.DecBinary()
	_ = yym2846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2847 := r.ContainerType()
		if yyct2847 == codecSelferValueTypeMap1234 {
			yyl2847 := r.ReadMapStart()
			if yyl2847 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2847, d)
			}
		} else if yyct2847 == codecSelferValueTypeArray1234 {
			yyl2847 := r.ReadArrayStart()
			if yyl2847 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2848Slc
	var yyhl2848 bool = l >= 0
	for yyj2848 := 0; ; yyj2848++ {
		if yyhl2848 {
			if yyj2848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2848Slc = r.DecodeBytes(yys2848Slc, true, true)
		yys2848 := string(yys2848Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2848 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2848)
		} // end switch yys2848
	} // end for yyj2848
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2850 int
	var yyb2850 bool
	var yyhl2850 bool = l >= 0
	yyj2850++
	if yyhl2850 {
		yyb2850 = yyj2850 > l
	} else {
		yyb2850 = r.CheckBreak()
	}
	if yyb2850 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2850++
		if yyhl2850 {
			yyb2850 = yyj2850 > l
		} else {
			yyb2850 = r.CheckBreak()
		}
		if yyb2850 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2850-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2852 := z.EncBinary()
		_ = yym2852
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2853 := !z.EncBinary()
			yy2arr2853 := z.EncBasicHandle().StructToArray
			var yyq2853 [3]bool
			_, _, _ = yysep2853, yyq2853, yy2arr2853
			const yyr2853 bool = false
			yyq2853[0] = x.Kind != ""
			yyq2853[1] = x.APIVersion != ""
			yyq2853[2] = true
			var yynn2853 int
			if yyr2853 || yy2arr2853 {
				r.EncodeArrayStart(3)
			} else {
				yynn2853 = 0
				for _, b := range yyq2853 {
					if b {
						yynn2853++
					}
				}
				r.EncodeMapStart(yynn2853)
				yynn2853 = 0
			}
			if yyr2853 || yy2arr2853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2853[0] {
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2853[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2853 || yy2arr2853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2853[1] {
					yym2858 := z.EncBinary()
					_ = yym2858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2853[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2859 := z.EncBinary()
					_ = yym2859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2853 || yy2arr2853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2853[2] {
					yy2861 := &x.Reference
					yy2861.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2853[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2862 := &x.Reference
					yy2862.CodecEncodeSelf(e)
				}
			}
			if yyr2853 || yy2arr2853 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2863 := z.DecBinary()
	_ = yym2863
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2864 := r.ContainerType()
		if yyct2864 == codecSelferValueTypeMap1234 {
			yyl2864 := r.ReadMapStart()
			if yyl2864 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2864, d)
			}
		} else if yyct2864 == codecSelferValueTypeArray1234 {
			yyl2864 := r.ReadArrayStart()
			if yyl2864 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2864, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2865Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2865Slc
	var yyhl2865 bool = l >= 0
	for yyj2865 := 0; ; yyj2865++ {
		if yyhl2865 {
			if yyj2865 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2865Slc = r.DecodeBytes(yys2865Slc, true, true)
		yys2865 := string(yys2865Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2865 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2868 := &x.Reference
				yyv2868.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2865)
		} // end switch yys2865
	} // end for yyj2865
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2869 int
	var yyb2869 bool
	var yyhl2869 bool = l >= 0
	yyj2869++
	if yyhl2869 {
		yyb2869 = yyj2869 > l
	} else {
		yyb2869 = r.CheckBreak()
	}
	if yyb2869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2869++
	if yyhl2869 {
		yyb2869 = yyj2869 > l
	} else {
		yyb2869 = r.CheckBreak()
	}
	if yyb2869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2869++
	if yyhl2869 {
		yyb2869 = yyj2869 > l
	} else {
		yyb2869 = r.CheckBreak()
	}
	if yyb2869 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2872 := &x.Reference
		yyv2872.CodecDecodeSelf(d)
	}
	for {
		yyj2869++
		if yyhl2869 {
			yyb2869 = yyj2869 > l
		} else {
			yyb2869 = r.CheckBreak()
		}
		if yyb2869 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2869-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2873 := z.EncBinary()
		_ = yym2873
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2874 := !z.EncBinary()
			yy2arr2874 := z.EncBasicHandle().StructToArray
			var yyq2874 [2]bool
			_, _, _ = yysep2874, yyq2874, yy2arr2874
			const yyr2874 bool = false
			yyq2874[0] = x.Component != ""
			yyq2874[1] = x.Host != ""
			var yynn2874 int
			if yyr2874 || yy2arr2874 {
				r.EncodeArrayStart(2)
			} else {
				yynn2874 = 0
				for _, b := range yyq2874 {
					if b {
						yynn2874++
					}
				}
				r.EncodeMapStart(yynn2874)
				yynn2874 = 0
			}
			if yyr2874 || yy2arr2874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2874[0] {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2874[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2874[1] {
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2874[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr2874 || yy2arr2874 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2881 := z.DecBinary()
	_ = yym2881
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2882 := r.ContainerType()
		if yyct2882 == codecSelferValueTypeMap1234 {
			yyl2882 := r.ReadMapStart()
			if yyl2882 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2882, d)
			}
		} else if yyct2882 == codecSelferValueTypeArray1234 {
			yyl2882 := r.ReadArrayStart()
			if yyl2882 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2882, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2883Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2883Slc
	var yyhl2883 bool = l >= 0
	for yyj2883 := 0; ; yyj2883++ {
		if yyhl2883 {
			if yyj2883 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2883Slc = r.DecodeBytes(yys2883Slc, true, true)
		yys2883 := string(yys2883Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2883 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2883)
		} // end switch yys2883
	} // end for yyj2883
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2886 int
	var yyb2886 bool
	var yyhl2886 bool = l >= 0
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2886++
	if yyhl2886 {
		yyb2886 = yyj2886 > l
	} else {
		yyb2886 = r.CheckBreak()
	}
	if yyb2886 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2886++
		if yyhl2886 {
			yyb2886 = yyj2886 > l
		} else {
			yyb2886 = r.CheckBreak()
		}
		if yyb2886 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2886-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2889 := z.EncBinary()
		_ = yym2889
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2890 := !z.EncBinary()
			yy2arr2890 := z.EncBasicHandle().StructToArray
			var yyq2890 [11]bool
			_, _, _ = yysep2890, yyq2890, yy2arr2890
			const yyr2890 bool = false
			yyq2890[0] = x.Kind != ""
			yyq2890[1] = x.APIVersion != ""
			yyq2890[2] = true
			yyq2890[3] = true
			yyq2890[4] = x.Reason != ""
			yyq2890[5] = x.Message != ""
			yyq2890[6] = true
			yyq2890[7] = true
			yyq2890[8] = true
			yyq2890[9] = x.Count != 0
			yyq2890[10] = x.Type != ""
			var yynn2890 int
			if yyr2890 || yy2arr2890 {
				r.EncodeArrayStart(11)
			} else {
				yynn2890 = 0
				for _, b := range yyq2890 {
					if b {
						yynn2890++
					}
				}
				r.EncodeMapStart(yynn2890)
				yynn2890 = 0
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[0] {
					yym2892 := z.EncBinary()
					_ = yym2892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2890[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2893 := z.EncBinary()
					_ = yym2893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[1] {
					yym2895 := z.EncBinary()
					_ = yym2895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2890[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2896 := z.EncBinary()
					_ = yym2896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[2] {
					yy2898 := &x.ObjectMeta
					yy2898.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2890[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2899 := &x.ObjectMeta
					yy2899.CodecEncodeSelf(e)
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[3] {
					yy2901 := &x.InvolvedObject
					yy2901.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2890[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2902 := &x.InvolvedObject
					yy2902.CodecEncodeSelf(e)
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[4] {
					yym2904 := z.EncBinary()
					_ = yym2904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2890[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2905 := z.EncBinary()
					_ = yym2905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[5] {
					yym2907 := z.EncBinary()
					_ = yym2907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2890[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2908 := z.EncBinary()
					_ = yym2908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[6] {
					yy2910 := &x.Source
					yy2910.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2890[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2911 := &x.Source
					yy2911.CodecEncodeSelf(e)
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[7] {
					yy2913 := &x.FirstTimestamp
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2913) {
					} else if yym2914 {
						z.EncBinaryMarshal(yy2913)
					} else if !yym2914 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2913)
					} else {
						z.EncFallback(yy2913)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2890[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2915 := &x.FirstTimestamp
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2915) {
					} else if yym2916 {
						z.EncBinaryMarshal(yy2915)
					} else if !yym2916 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2915)
					} else {
						z.EncFallback(yy2915)
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[8] {
					yy2918 := &x.LastTimestamp
					yym2919 := z.EncBinary()
					_ = yym2919
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2918) {
					} else if yym2919 {
						z.EncBinaryMarshal(yy2918)
					} else if !yym2919 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2918)
					} else {
						z.EncFallback(yy2918)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2890[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2920 := &x.LastTimestamp
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2920) {
					} else if yym2921 {
						z.EncBinaryMarshal(yy2920)
					} else if !yym2921 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2920)
					} else {
						z.EncFallback(yy2920)
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[9] {
					yym2923 := z.EncBinary()
					_ = yym2923
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2890[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2890[10] {
					yym2926 := z.EncBinary()
					_ = yym2926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2890[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr2890 || yy2arr2890 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2928 := z.DecBinary()
	_ = yym2928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2929 := r.ContainerType()
		if yyct2929 == codecSelferValueTypeMap1234 {
			yyl2929 := r.ReadMapStart()
			if yyl2929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2929, d)
			}
		} else if yyct2929 == codecSelferValueTypeArray1234 {
			yyl2929 := r.ReadArrayStart()
			if yyl2929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2930Slc
	var yyhl2930 bool = l >= 0
	for yyj2930 := 0; ; yyj2930++ {
		if yyhl2930 {
			if yyj2930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2930Slc = r.DecodeBytes(yys2930Slc, true, true)
		yys2930 := string(yys2930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2930 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2933 := &x.ObjectMeta
				yyv2933.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2934 := &x.InvolvedObject
				yyv2934.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2937 := &x.Source
				yyv2937.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2938 := &x.FirstTimestamp
				yym2939 := z.DecBinary()
				_ = yym2939
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2938) {
				} else if yym2939 {
					z.DecBinaryUnmarshal(yyv2938)
				} else if !yym2939 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2938)
				} else {
					z.DecFallback(yyv2938, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2940 := &x.LastTimestamp
				yym2941 := z.DecBinary()
				_ = yym2941
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2940) {
				} else if yym2941 {
					z.DecBinaryUnmarshal(yyv2940)
				} else if !yym2941 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2940)
				} else {
					z.DecFallback(yyv2940, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2930)
		} // end switch yys2930
	} // end for yyj2930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2944 int
	var yyb2944 bool
	var yyhl2944 bool = l >= 0
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2947 := &x.ObjectMeta
		yyv2947.CodecDecodeSelf(d)
	}
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2948 := &x.InvolvedObject
		yyv2948.CodecDecodeSelf(d)
	}
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2951 := &x.Source
		yyv2951.CodecDecodeSelf(d)
	}
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2952 := &x.FirstTimestamp
		yym2953 := z.DecBinary()
		_ = yym2953
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2952) {
		} else if yym2953 {
			z.DecBinaryUnmarshal(yyv2952)
		} else if !yym2953 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2952)
		} else {
			z.DecFallback(yyv2952, false)
		}
	}
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2954 := &x.LastTimestamp
		yym2955 := z.DecBinary()
		_ = yym2955
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2954) {
		} else if yym2955 {
			z.DecBinaryUnmarshal(yyv2954)
		} else if !yym2955 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2954)
		} else {
			z.DecFallback(yyv2954, false)
		}
	}
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2944++
	if yyhl2944 {
		yyb2944 = yyj2944 > l
	} else {
		yyb2944 = r.CheckBreak()
	}
	if yyb2944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj2944++
		if yyhl2944 {
			yyb2944 = yyj2944 > l
		} else {
			yyb2944 = r.CheckBreak()
		}
		if yyb2944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2958 := z.EncBinary()
		_ = yym2958
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2959 := !z.EncBinary()
			yy2arr2959 := z.EncBasicHandle().StructToArray
			var yyq2959 [4]bool
			_, _, _ = yysep2959, yyq2959, yy2arr2959
			const yyr2959 bool = false
			yyq2959[0] = x.Kind != ""
			yyq2959[1] = x.APIVersion != ""
			yyq2959[2] = true
			var yynn2959 int
			if yyr2959 || yy2arr2959 {
				r.EncodeArrayStart(4)
			} else {
				yynn2959 = 1
				for _, b := range yyq2959 {
					if b {
						yynn2959++
					}
				}
				r.EncodeMapStart(yynn2959)
				yynn2959 = 0
			}
			if yyr2959 || yy2arr2959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2959[0] {
					yym2961 := z.EncBinary()
					_ = yym2961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2959[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2959 || yy2arr2959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2959[1] {
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2959[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2959 || yy2arr2959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2959[2] {
					yy2967 := &x.ListMeta
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2967) {
					} else {
						z.EncFallback(yy2967)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2959[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2969 := &x.ListMeta
					yym2970 := z.EncBinary()
					_ = yym2970
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2969) {
					} else {
						z.EncFallback(yy2969)
					}
				}
			}
			if yyr2959 || yy2arr2959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2972 := z.EncBinary()
					_ = yym2972
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2973 := z.EncBinary()
					_ = yym2973
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr2959 || yy2arr2959 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2974 := z.DecBinary()
	_ = yym2974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2975 := r.ContainerType()
		if yyct2975 == codecSelferValueTypeMap1234 {
			yyl2975 := r.ReadMapStart()
			if yyl2975 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2975, d)
			}
		} else if yyct2975 == codecSelferValueTypeArray1234 {
			yyl2975 := r.ReadArrayStart()
			if yyl2975 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2975, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2976Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2976Slc
	var yyhl2976 bool = l >= 0
	for yyj2976 := 0; ; yyj2976++ {
		if yyhl2976 {
			if yyj2976 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2976Slc = r.DecodeBytes(yys2976Slc, true, true)
		yys2976 := string(yys2976Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2976 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2979 := &x.ListMeta
				yym2980 := z.DecBinary()
				_ = yym2980
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2979) {
				} else {
					z.DecFallback(yyv2979, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2981 := &x.Items
				yym2982 := z.DecBinary()
				_ = yym2982
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2981), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2976)
		} // end switch yys2976
	} // end for yyj2976
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2983 int
	var yyb2983 bool
	var yyhl2983 bool = l >= 0
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2986 := &x.ListMeta
		yym2987 := z.DecBinary()
		_ = yym2987
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2986) {
		} else {
			z.DecFallback(yyv2986, false)
		}
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2988 := &x.Items
		yym2989 := z.DecBinary()
		_ = yym2989
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2988), d)
		}
	}
	for {
		yyj2983++
		if yyhl2983 {
			yyb2983 = yyj2983 > l
		} else {
			yyb2983 = r.CheckBreak()
		}
		if yyb2983 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2983-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2990 := z.EncBinary()
		_ = yym2990
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2991 := !z.EncBinary()
			yy2arr2991 := z.EncBasicHandle().StructToArray
			var yyq2991 [4]bool
			_, _, _ = yysep2991, yyq2991, yy2arr2991
			const yyr2991 bool = false
			yyq2991[0] = x.Kind != ""
			yyq2991[1] = x.APIVersion != ""
			yyq2991[2] = true
			var yynn2991 int
			if yyr2991 || yy2arr2991 {
				r.EncodeArrayStart(4)
			} else {
				yynn2991 = 1
				for _, b := range yyq2991 {
					if b {
						yynn2991++
					}
				}
				r.EncodeMapStart(yynn2991)
				yynn2991 = 0
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2991[0] {
					yym2993 := z.EncBinary()
					_ = yym2993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2991[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2994 := z.EncBinary()
					_ = yym2994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2991[1] {
					yym2996 := z.EncBinary()
					_ = yym2996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2991[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2997 := z.EncBinary()
					_ = yym2997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2991[2] {
					yy2999 := &x.ListMeta
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2999) {
					} else {
						z.EncFallback(yy2999)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2991[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3001 := &x.ListMeta
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3001) {
					} else {
						z.EncFallback(yy3001)
					}
				}
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg6_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg6_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr2991 || yy2arr2991 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3006 := z.DecBinary()
	_ = yym3006
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3007 := r.ContainerType()
		if yyct3007 == codecSelferValueTypeMap1234 {
			yyl3007 := r.ReadMapStart()
			if yyl3007 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3007, d)
			}
		} else if yyct3007 == codecSelferValueTypeArray1234 {
			yyl3007 := r.ReadArrayStart()
			if yyl3007 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3007, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3008Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3008Slc
	var yyhl3008 bool = l >= 0
	for yyj3008 := 0; ; yyj3008++ {
		if yyhl3008 {
			if yyj3008 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3008Slc = r.DecodeBytes(yys3008Slc, true, true)
		yys3008 := string(yys3008Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3008 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3011 := &x.ListMeta
				yym3012 := z.DecBinary()
				_ = yym3012
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3011) {
				} else {
					z.DecFallback(yyv3011, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3013 := &x.Items
				yym3014 := z.DecBinary()
				_ = yym3014
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg6_runtime.Object)(yyv3013), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3008)
		} // end switch yys3008
	} // end for yyj3008
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3015 int
	var yyb3015 bool
	var yyhl3015 bool = l >= 0
	yyj3015++
	if yyhl3015 {
		yyb3015 = yyj3015 > l
	} else {
		yyb3015 = r.CheckBreak()
	}
	if yyb3015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3015++
	if yyhl3015 {
		yyb3015 = yyj3015 > l
	} else {
		yyb3015 = r.CheckBreak()
	}
	if yyb3015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3015++
	if yyhl3015 {
		yyb3015 = yyj3015 > l
	} else {
		yyb3015 = r.CheckBreak()
	}
	if yyb3015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3018 := &x.ListMeta
		yym3019 := z.DecBinary()
		_ = yym3019
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3018) {
		} else {
			z.DecFallback(yyv3018, false)
		}
	}
	yyj3015++
	if yyhl3015 {
		yyb3015 = yyj3015 > l
	} else {
		yyb3015 = r.CheckBreak()
	}
	if yyb3015 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3020 := &x.Items
		yym3021 := z.DecBinary()
		_ = yym3021
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg6_runtime.Object)(yyv3020), d)
		}
	}
	for {
		yyj3015++
		if yyhl3015 {
			yyb3015 = yyj3015 > l
		} else {
			yyb3015 = r.CheckBreak()
		}
		if yyb3015 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3015-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3022 := z.EncBinary()
	_ = yym3022
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3023 := z.DecBinary()
	_ = yym3023
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3024 := z.EncBinary()
		_ = yym3024
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3025 := !z.EncBinary()
			yy2arr3025 := z.EncBasicHandle().StructToArray
			var yyq3025 [6]bool
			_, _, _ = yysep3025, yyq3025, yy2arr3025
			const yyr3025 bool = false
			yyq3025[0] = x.Type != ""
			yyq3025[1] = len(x.Max) != 0
			yyq3025[2] = len(x.Min) != 0
			yyq3025[3] = len(x.Default) != 0
			yyq3025[4] = len(x.DefaultRequest) != 0
			yyq3025[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3025 int
			if yyr3025 || yy2arr3025 {
				r.EncodeArrayStart(6)
			} else {
				yynn3025 = 0
				for _, b := range yyq3025 {
					if b {
						yynn3025++
					}
				}
				r.EncodeMapStart(yynn3025)
				yynn3025 = 0
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3025[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3025[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3025[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3025[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3025[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3025[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3025[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3025[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3025[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3025[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3025[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3025[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3025 || yy2arr3025 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3032 := z.DecBinary()
	_ = yym3032
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3033 := r.ContainerType()
		if yyct3033 == codecSelferValueTypeMap1234 {
			yyl3033 := r.ReadMapStart()
			if yyl3033 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3033, d)
			}
		} else if yyct3033 == codecSelferValueTypeArray1234 {
			yyl3033 := r.ReadArrayStart()
			if yyl3033 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3033, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3034Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3034Slc
	var yyhl3034 bool = l >= 0
	for yyj3034 := 0; ; yyj3034++ {
		if yyhl3034 {
			if yyj3034 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3034Slc = r.DecodeBytes(yys3034Slc, true, true)
		yys3034 := string(yys3034Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3034 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3036 := &x.Max
				yyv3036.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3037 := &x.Min
				yyv3037.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3038 := &x.Default
				yyv3038.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3039 := &x.DefaultRequest
				yyv3039.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3040 := &x.MaxLimitRequestRatio
				yyv3040.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3034)
		} // end switch yys3034
	} // end for yyj3034
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3041 int
	var yyb3041 bool
	var yyhl3041 bool = l >= 0
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3043 := &x.Max
		yyv3043.CodecDecodeSelf(d)
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3044 := &x.Min
		yyv3044.CodecDecodeSelf(d)
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3045 := &x.Default
		yyv3045.CodecDecodeSelf(d)
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3046 := &x.DefaultRequest
		yyv3046.CodecDecodeSelf(d)
	}
	yyj3041++
	if yyhl3041 {
		yyb3041 = yyj3041 > l
	} else {
		yyb3041 = r.CheckBreak()
	}
	if yyb3041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3047 := &x.MaxLimitRequestRatio
		yyv3047.CodecDecodeSelf(d)
	}
	for {
		yyj3041++
		if yyhl3041 {
			yyb3041 = yyj3041 > l
		} else {
			yyb3041 = r.CheckBreak()
		}
		if yyb3041 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3041-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3048 := z.EncBinary()
		_ = yym3048
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3049 := !z.EncBinary()
			yy2arr3049 := z.EncBasicHandle().StructToArray
			var yyq3049 [1]bool
			_, _, _ = yysep3049, yyq3049, yy2arr3049
			const yyr3049 bool = false
			var yynn3049 int
			if yyr3049 || yy2arr3049 {
				r.EncodeArrayStart(1)
			} else {
				yynn3049 = 1
				for _, b := range yyq3049 {
					if b {
						yynn3049++
					}
				}
				r.EncodeMapStart(yynn3049)
				yynn3049 = 0
			}
			if yyr3049 || yy2arr3049 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3051 := z.EncBinary()
					_ = yym3051
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3052 := z.EncBinary()
					_ = yym3052
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3049 || yy2arr3049 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3053 := z.DecBinary()
	_ = yym3053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3054 := r.ContainerType()
		if yyct3054 == codecSelferValueTypeMap1234 {
			yyl3054 := r.ReadMapStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3054, d)
			}
		} else if yyct3054 == codecSelferValueTypeArray1234 {
			yyl3054 := r.ReadArrayStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3055Slc
	var yyhl3055 bool = l >= 0
	for yyj3055 := 0; ; yyj3055++ {
		if yyhl3055 {
			if yyj3055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3055Slc = r.DecodeBytes(yys3055Slc, true, true)
		yys3055 := string(yys3055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3055 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3056 := &x.Limits
				yym3057 := z.DecBinary()
				_ = yym3057
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3056), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3055)
		} // end switch yys3055
	} // end for yyj3055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3058 int
	var yyb3058 bool
	var yyhl3058 bool = l >= 0
	yyj3058++
	if yyhl3058 {
		yyb3058 = yyj3058 > l
	} else {
		yyb3058 = r.CheckBreak()
	}
	if yyb3058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3059 := &x.Limits
		yym3060 := z.DecBinary()
		_ = yym3060
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3059), d)
		}
	}
	for {
		yyj3058++
		if yyhl3058 {
			yyb3058 = yyj3058 > l
		} else {
			yyb3058 = r.CheckBreak()
		}
		if yyb3058 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3058-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3061 := z.EncBinary()
		_ = yym3061
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3062 := !z.EncBinary()
			yy2arr3062 := z.EncBasicHandle().StructToArray
			var yyq3062 [4]bool
			_, _, _ = yysep3062, yyq3062, yy2arr3062
			const yyr3062 bool = false
			yyq3062[0] = x.Kind != ""
			yyq3062[1] = x.APIVersion != ""
			yyq3062[2] = true
			yyq3062[3] = true
			var yynn3062 int
			if yyr3062 || yy2arr3062 {
				r.EncodeArrayStart(4)
			} else {
				yynn3062 = 0
				for _, b := range yyq3062 {
					if b {
						yynn3062++
					}
				}
				r.EncodeMapStart(yynn3062)
				yynn3062 = 0
			}
			if yyr3062 || yy2arr3062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3062[0] {
					yym3064 := z.EncBinary()
					_ = yym3064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3062[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3065 := z.EncBinary()
					_ = yym3065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3062 || yy2arr3062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3062[1] {
					yym3067 := z.EncBinary()
					_ = yym3067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3062[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3068 := z.EncBinary()
					_ = yym3068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3062 || yy2arr3062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3062[2] {
					yy3070 := &x.ObjectMeta
					yy3070.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3062[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3071 := &x.ObjectMeta
					yy3071.CodecEncodeSelf(e)
				}
			}
			if yyr3062 || yy2arr3062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3062[3] {
					yy3073 := &x.Spec
					yy3073.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3062[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3074 := &x.Spec
					yy3074.CodecEncodeSelf(e)
				}
			}
			if yyr3062 || yy2arr3062 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3075 := z.DecBinary()
	_ = yym3075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3076 := r.ContainerType()
		if yyct3076 == codecSelferValueTypeMap1234 {
			yyl3076 := r.ReadMapStart()
			if yyl3076 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3076, d)
			}
		} else if yyct3076 == codecSelferValueTypeArray1234 {
			yyl3076 := r.ReadArrayStart()
			if yyl3076 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3077Slc
	var yyhl3077 bool = l >= 0
	for yyj3077 := 0; ; yyj3077++ {
		if yyhl3077 {
			if yyj3077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3077Slc = r.DecodeBytes(yys3077Slc, true, true)
		yys3077 := string(yys3077Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3077 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3080 := &x.ObjectMeta
				yyv3080.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3081 := &x.Spec
				yyv3081.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3077)
		} // end switch yys3077
	} // end for yyj3077
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3082 int
	var yyb3082 bool
	var yyhl3082 bool = l >= 0
	yyj3082++
	if yyhl3082 {
		yyb3082 = yyj3082 > l
	} else {
		yyb3082 = r.CheckBreak()
	}
	if yyb3082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3082++
	if yyhl3082 {
		yyb3082 = yyj3082 > l
	} else {
		yyb3082 = r.CheckBreak()
	}
	if yyb3082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3082++
	if yyhl3082 {
		yyb3082 = yyj3082 > l
	} else {
		yyb3082 = r.CheckBreak()
	}
	if yyb3082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3085 := &x.ObjectMeta
		yyv3085.CodecDecodeSelf(d)
	}
	yyj3082++
	if yyhl3082 {
		yyb3082 = yyj3082 > l
	} else {
		yyb3082 = r.CheckBreak()
	}
	if yyb3082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3086 := &x.Spec
		yyv3086.CodecDecodeSelf(d)
	}
	for {
		yyj3082++
		if yyhl3082 {
			yyb3082 = yyj3082 > l
		} else {
			yyb3082 = r.CheckBreak()
		}
		if yyb3082 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3082-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3087 := z.EncBinary()
		_ = yym3087
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3088 := !z.EncBinary()
			yy2arr3088 := z.EncBasicHandle().StructToArray
			var yyq3088 [4]bool
			_, _, _ = yysep3088, yyq3088, yy2arr3088
			const yyr3088 bool = false
			yyq3088[0] = x.Kind != ""
			yyq3088[1] = x.APIVersion != ""
			yyq3088[2] = true
			var yynn3088 int
			if yyr3088 || yy2arr3088 {
				r.EncodeArrayStart(4)
			} else {
				yynn3088 = 1
				for _, b := range yyq3088 {
					if b {
						yynn3088++
					}
				}
				r.EncodeMapStart(yynn3088)
				yynn3088 = 0
			}
			if yyr3088 || yy2arr3088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3088[0] {
					yym3090 := z.EncBinary()
					_ = yym3090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3088[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3091 := z.EncBinary()
					_ = yym3091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3088 || yy2arr3088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3088[1] {
					yym3093 := z.EncBinary()
					_ = yym3093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3088[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3088 || yy2arr3088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3088[2] {
					yy3096 := &x.ListMeta
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3096) {
					} else {
						z.EncFallback(yy3096)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3088[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3098 := &x.ListMeta
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3098) {
					} else {
						z.EncFallback(yy3098)
					}
				}
			}
			if yyr3088 || yy2arr3088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3101 := z.EncBinary()
					_ = yym3101
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3102 := z.EncBinary()
					_ = yym3102
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3088 || yy2arr3088 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3103 := z.DecBinary()
	_ = yym3103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3104 := r.ContainerType()
		if yyct3104 == codecSelferValueTypeMap1234 {
			yyl3104 := r.ReadMapStart()
			if yyl3104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3104, d)
			}
		} else if yyct3104 == codecSelferValueTypeArray1234 {
			yyl3104 := r.ReadArrayStart()
			if yyl3104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3105Slc
	var yyhl3105 bool = l >= 0
	for yyj3105 := 0; ; yyj3105++ {
		if yyhl3105 {
			if yyj3105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3105Slc = r.DecodeBytes(yys3105Slc, true, true)
		yys3105 := string(yys3105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3105 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3108 := &x.ListMeta
				yym3109 := z.DecBinary()
				_ = yym3109
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3108) {
				} else {
					z.DecFallback(yyv3108, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3110 := &x.Items
				yym3111 := z.DecBinary()
				_ = yym3111
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3110), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3105)
		} // end switch yys3105
	} // end for yyj3105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3112 int
	var yyb3112 bool
	var yyhl3112 bool = l >= 0
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3115 := &x.ListMeta
		yym3116 := z.DecBinary()
		_ = yym3116
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3115) {
		} else {
			z.DecFallback(yyv3115, false)
		}
	}
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3117 := &x.Items
		yym3118 := z.DecBinary()
		_ = yym3118
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3117), d)
		}
	}
	for {
		yyj3112++
		if yyhl3112 {
			yyb3112 = yyj3112 > l
		} else {
			yyb3112 = r.CheckBreak()
		}
		if yyb3112 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3112-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3119 := z.EncBinary()
		_ = yym3119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3120 := !z.EncBinary()
			yy2arr3120 := z.EncBasicHandle().StructToArray
			var yyq3120 [1]bool
			_, _, _ = yysep3120, yyq3120, yy2arr3120
			const yyr3120 bool = false
			yyq3120[0] = len(x.Hard) != 0
			var yynn3120 int
			if yyr3120 || yy2arr3120 {
				r.EncodeArrayStart(1)
			} else {
				yynn3120 = 0
				for _, b := range yyq3120 {
					if b {
						yynn3120++
					}
				}
				r.EncodeMapStart(yynn3120)
				yynn3120 = 0
			}
			if yyr3120 || yy2arr3120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3120[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3120[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3120 || yy2arr3120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3122 := z.DecBinary()
	_ = yym3122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3123 := r.ContainerType()
		if yyct3123 == codecSelferValueTypeMap1234 {
			yyl3123 := r.ReadMapStart()
			if yyl3123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3123, d)
			}
		} else if yyct3123 == codecSelferValueTypeArray1234 {
			yyl3123 := r.ReadArrayStart()
			if yyl3123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3124Slc
	var yyhl3124 bool = l >= 0
	for yyj3124 := 0; ; yyj3124++ {
		if yyhl3124 {
			if yyj3124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3124Slc = r.DecodeBytes(yys3124Slc, true, true)
		yys3124 := string(yys3124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3124 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3125 := &x.Hard
				yyv3125.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3124)
		} // end switch yys3124
	} // end for yyj3124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3126 int
	var yyb3126 bool
	var yyhl3126 bool = l >= 0
	yyj3126++
	if yyhl3126 {
		yyb3126 = yyj3126 > l
	} else {
		yyb3126 = r.CheckBreak()
	}
	if yyb3126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3127 := &x.Hard
		yyv3127.CodecDecodeSelf(d)
	}
	for {
		yyj3126++
		if yyhl3126 {
			yyb3126 = yyj3126 > l
		} else {
			yyb3126 = r.CheckBreak()
		}
		if yyb3126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3128 := z.EncBinary()
		_ = yym3128
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3129 := !z.EncBinary()
			yy2arr3129 := z.EncBasicHandle().StructToArray
			var yyq3129 [2]bool
			_, _, _ = yysep3129, yyq3129, yy2arr3129
			const yyr3129 bool = false
			yyq3129[0] = len(x.Hard) != 0
			yyq3129[1] = len(x.Used) != 0
			var yynn3129 int
			if yyr3129 || yy2arr3129 {
				r.EncodeArrayStart(2)
			} else {
				yynn3129 = 0
				for _, b := range yyq3129 {
					if b {
						yynn3129++
					}
				}
				r.EncodeMapStart(yynn3129)
				yynn3129 = 0
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3129[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3129[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3129[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3129[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3129 || yy2arr3129 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3132 := z.DecBinary()
	_ = yym3132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3133 := r.ContainerType()
		if yyct3133 == codecSelferValueTypeMap1234 {
			yyl3133 := r.ReadMapStart()
			if yyl3133 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3133, d)
			}
		} else if yyct3133 == codecSelferValueTypeArray1234 {
			yyl3133 := r.ReadArrayStart()
			if yyl3133 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3134Slc
	var yyhl3134 bool = l >= 0
	for yyj3134 := 0; ; yyj3134++ {
		if yyhl3134 {
			if yyj3134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3134Slc = r.DecodeBytes(yys3134Slc, true, true)
		yys3134 := string(yys3134Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3134 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3135 := &x.Hard
				yyv3135.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3136 := &x.Used
				yyv3136.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3134)
		} // end switch yys3134
	} // end for yyj3134
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3137 int
	var yyb3137 bool
	var yyhl3137 bool = l >= 0
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3138 := &x.Hard
		yyv3138.CodecDecodeSelf(d)
	}
	yyj3137++
	if yyhl3137 {
		yyb3137 = yyj3137 > l
	} else {
		yyb3137 = r.CheckBreak()
	}
	if yyb3137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3139 := &x.Used
		yyv3139.CodecDecodeSelf(d)
	}
	for {
		yyj3137++
		if yyhl3137 {
			yyb3137 = yyj3137 > l
		} else {
			yyb3137 = r.CheckBreak()
		}
		if yyb3137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3140 := z.EncBinary()
		_ = yym3140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3141 := !z.EncBinary()
			yy2arr3141 := z.EncBasicHandle().StructToArray
			var yyq3141 [5]bool
			_, _, _ = yysep3141, yyq3141, yy2arr3141
			const yyr3141 bool = false
			yyq3141[0] = x.Kind != ""
			yyq3141[1] = x.APIVersion != ""
			yyq3141[2] = true
			yyq3141[3] = true
			yyq3141[4] = true
			var yynn3141 int
			if yyr3141 || yy2arr3141 {
				r.EncodeArrayStart(5)
			} else {
				yynn3141 = 0
				for _, b := range yyq3141 {
					if b {
						yynn3141++
					}
				}
				r.EncodeMapStart(yynn3141)
				yynn3141 = 0
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[0] {
					yym3143 := z.EncBinary()
					_ = yym3143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3144 := z.EncBinary()
					_ = yym3144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[1] {
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3147 := z.EncBinary()
					_ = yym3147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[2] {
					yy3149 := &x.ObjectMeta
					yy3149.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3141[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3150 := &x.ObjectMeta
					yy3150.CodecEncodeSelf(e)
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[3] {
					yy3152 := &x.Spec
					yy3152.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3141[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3153 := &x.Spec
					yy3153.CodecEncodeSelf(e)
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3141[4] {
					yy3155 := &x.Status
					yy3155.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3141[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3156 := &x.Status
					yy3156.CodecEncodeSelf(e)
				}
			}
			if yyr3141 || yy2arr3141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3157 := z.DecBinary()
	_ = yym3157
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3158 := r.ContainerType()
		if yyct3158 == codecSelferValueTypeMap1234 {
			yyl3158 := r.ReadMapStart()
			if yyl3158 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3158, d)
			}
		} else if yyct3158 == codecSelferValueTypeArray1234 {
			yyl3158 := r.ReadArrayStart()
			if yyl3158 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3158, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3159Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3159Slc
	var yyhl3159 bool = l >= 0
	for yyj3159 := 0; ; yyj3159++ {
		if yyhl3159 {
			if yyj3159 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3159Slc = r.DecodeBytes(yys3159Slc, true, true)
		yys3159 := string(yys3159Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3159 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3162 := &x.ObjectMeta
				yyv3162.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3163 := &x.Spec
				yyv3163.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3164 := &x.Status
				yyv3164.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3159)
		} // end switch yys3159
	} // end for yyj3159
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3165 int
	var yyb3165 bool
	var yyhl3165 bool = l >= 0
	yyj3165++
	if yyhl3165 {
		yyb3165 = yyj3165 > l
	} else {
		yyb3165 = r.CheckBreak()
	}
	if yyb3165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3165++
	if yyhl3165 {
		yyb3165 = yyj3165 > l
	} else {
		yyb3165 = r.CheckBreak()
	}
	if yyb3165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3165++
	if yyhl3165 {
		yyb3165 = yyj3165 > l
	} else {
		yyb3165 = r.CheckBreak()
	}
	if yyb3165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3168 := &x.ObjectMeta
		yyv3168.CodecDecodeSelf(d)
	}
	yyj3165++
	if yyhl3165 {
		yyb3165 = yyj3165 > l
	} else {
		yyb3165 = r.CheckBreak()
	}
	if yyb3165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3169 := &x.Spec
		yyv3169.CodecDecodeSelf(d)
	}
	yyj3165++
	if yyhl3165 {
		yyb3165 = yyj3165 > l
	} else {
		yyb3165 = r.CheckBreak()
	}
	if yyb3165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3170 := &x.Status
		yyv3170.CodecDecodeSelf(d)
	}
	for {
		yyj3165++
		if yyhl3165 {
			yyb3165 = yyj3165 > l
		} else {
			yyb3165 = r.CheckBreak()
		}
		if yyb3165 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3165-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3171 := z.EncBinary()
		_ = yym3171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3172 := !z.EncBinary()
			yy2arr3172 := z.EncBasicHandle().StructToArray
			var yyq3172 [4]bool
			_, _, _ = yysep3172, yyq3172, yy2arr3172
			const yyr3172 bool = false
			yyq3172[0] = x.Kind != ""
			yyq3172[1] = x.APIVersion != ""
			yyq3172[2] = true
			var yynn3172 int
			if yyr3172 || yy2arr3172 {
				r.EncodeArrayStart(4)
			} else {
				yynn3172 = 1
				for _, b := range yyq3172 {
					if b {
						yynn3172++
					}
				}
				r.EncodeMapStart(yynn3172)
				yynn3172 = 0
			}
			if yyr3172 || yy2arr3172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3172[0] {
					yym3174 := z.EncBinary()
					_ = yym3174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3172[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3175 := z.EncBinary()
					_ = yym3175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3172 || yy2arr3172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3172[1] {
					yym3177 := z.EncBinary()
					_ = yym3177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3172[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3172 || yy2arr3172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3172[2] {
					yy3180 := &x.ListMeta
					yym3181 := z.EncBinary()
					_ = yym3181
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3180) {
					} else {
						z.EncFallback(yy3180)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3172[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3182 := &x.ListMeta
					yym3183 := z.EncBinary()
					_ = yym3183
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3182) {
					} else {
						z.EncFallback(yy3182)
					}
				}
			}
			if yyr3172 || yy2arr3172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3186 := z.EncBinary()
					_ = yym3186
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3172 || yy2arr3172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3187 := z.DecBinary()
	_ = yym3187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3188 := r.ContainerType()
		if yyct3188 == codecSelferValueTypeMap1234 {
			yyl3188 := r.ReadMapStart()
			if yyl3188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3188, d)
			}
		} else if yyct3188 == codecSelferValueTypeArray1234 {
			yyl3188 := r.ReadArrayStart()
			if yyl3188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3189Slc
	var yyhl3189 bool = l >= 0
	for yyj3189 := 0; ; yyj3189++ {
		if yyhl3189 {
			if yyj3189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3189Slc = r.DecodeBytes(yys3189Slc, true, true)
		yys3189 := string(yys3189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3189 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3192 := &x.ListMeta
				yym3193 := z.DecBinary()
				_ = yym3193
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3192) {
				} else {
					z.DecFallback(yyv3192, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3194 := &x.Items
				yym3195 := z.DecBinary()
				_ = yym3195
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3194), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3189)
		} // end switch yys3189
	} // end for yyj3189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3196 int
	var yyb3196 bool
	var yyhl3196 bool = l >= 0
	yyj3196++
	if yyhl3196 {
		yyb3196 = yyj3196 > l
	} else {
		yyb3196 = r.CheckBreak()
	}
	if yyb3196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3196++
	if yyhl3196 {
		yyb3196 = yyj3196 > l
	} else {
		yyb3196 = r.CheckBreak()
	}
	if yyb3196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3196++
	if yyhl3196 {
		yyb3196 = yyj3196 > l
	} else {
		yyb3196 = r.CheckBreak()
	}
	if yyb3196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3199 := &x.ListMeta
		yym3200 := z.DecBinary()
		_ = yym3200
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3199) {
		} else {
			z.DecFallback(yyv3199, false)
		}
	}
	yyj3196++
	if yyhl3196 {
		yyb3196 = yyj3196 > l
	} else {
		yyb3196 = r.CheckBreak()
	}
	if yyb3196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3201 := &x.Items
		yym3202 := z.DecBinary()
		_ = yym3202
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3201), d)
		}
	}
	for {
		yyj3196++
		if yyhl3196 {
			yyb3196 = yyj3196 > l
		} else {
			yyb3196 = r.CheckBreak()
		}
		if yyb3196 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3196-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3203 := z.EncBinary()
		_ = yym3203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3204 := !z.EncBinary()
			yy2arr3204 := z.EncBasicHandle().StructToArray
			var yyq3204 [5]bool
			_, _, _ = yysep3204, yyq3204, yy2arr3204
			const yyr3204 bool = false
			yyq3204[0] = x.Kind != ""
			yyq3204[1] = x.APIVersion != ""
			yyq3204[2] = true
			yyq3204[3] = len(x.Data) != 0
			yyq3204[4] = x.Type != ""
			var yynn3204 int
			if yyr3204 || yy2arr3204 {
				r.EncodeArrayStart(5)
			} else {
				yynn3204 = 0
				for _, b := range yyq3204 {
					if b {
						yynn3204++
					}
				}
				r.EncodeMapStart(yynn3204)
				yynn3204 = 0
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[0] {
					yym3206 := z.EncBinary()
					_ = yym3206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3207 := z.EncBinary()
					_ = yym3207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[1] {
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3210 := z.EncBinary()
					_ = yym3210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[2] {
					yy3212 := &x.ObjectMeta
					yy3212.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3204[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3213 := &x.ObjectMeta
					yy3213.CodecEncodeSelf(e)
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3215 := z.EncBinary()
						_ = yym3215
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3204[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3216 := z.EncBinary()
						_ = yym3216
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3204[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3204[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3204 || yy2arr3204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3218 := z.DecBinary()
	_ = yym3218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3219 := r.ContainerType()
		if yyct3219 == codecSelferValueTypeMap1234 {
			yyl3219 := r.ReadMapStart()
			if yyl3219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3219, d)
			}
		} else if yyct3219 == codecSelferValueTypeArray1234 {
			yyl3219 := r.ReadArrayStart()
			if yyl3219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3220Slc
	var yyhl3220 bool = l >= 0
	for yyj3220 := 0; ; yyj3220++ {
		if yyhl3220 {
			if yyj3220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3220Slc = r.DecodeBytes(yys3220Slc, true, true)
		yys3220 := string(yys3220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3220 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3223 := &x.ObjectMeta
				yyv3223.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3224 := &x.Data
				yym3225 := z.DecBinary()
				_ = yym3225
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3224), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3220)
		} // end switch yys3220
	} // end for yyj3220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3227 int
	var yyb3227 bool
	var yyhl3227 bool = l >= 0
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3230 := &x.ObjectMeta
		yyv3230.CodecDecodeSelf(d)
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3231 := &x.Data
		yym3232 := z.DecBinary()
		_ = yym3232
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3231), d)
		}
	}
	yyj3227++
	if yyhl3227 {
		yyb3227 = yyj3227 > l
	} else {
		yyb3227 = r.CheckBreak()
	}
	if yyb3227 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3227++
		if yyhl3227 {
			yyb3227 = yyj3227 > l
		} else {
			yyb3227 = r.CheckBreak()
		}
		if yyb3227 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3227-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3234 := z.EncBinary()
	_ = yym3234
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3235 := z.DecBinary()
	_ = yym3235
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3236 := z.EncBinary()
		_ = yym3236
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3237 := !z.EncBinary()
			yy2arr3237 := z.EncBasicHandle().StructToArray
			var yyq3237 [4]bool
			_, _, _ = yysep3237, yyq3237, yy2arr3237
			const yyr3237 bool = false
			yyq3237[0] = x.Kind != ""
			yyq3237[1] = x.APIVersion != ""
			yyq3237[2] = true
			var yynn3237 int
			if yyr3237 || yy2arr3237 {
				r.EncodeArrayStart(4)
			} else {
				yynn3237 = 1
				for _, b := range yyq3237 {
					if b {
						yynn3237++
					}
				}
				r.EncodeMapStart(yynn3237)
				yynn3237 = 0
			}
			if yyr3237 || yy2arr3237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3237[0] {
					yym3239 := z.EncBinary()
					_ = yym3239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3237[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3240 := z.EncBinary()
					_ = yym3240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3237 || yy2arr3237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3237[1] {
					yym3242 := z.EncBinary()
					_ = yym3242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3237[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3243 := z.EncBinary()
					_ = yym3243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3237 || yy2arr3237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3237[2] {
					yy3245 := &x.ListMeta
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3245) {
					} else {
						z.EncFallback(yy3245)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3237[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3247 := &x.ListMeta
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3247) {
					} else {
						z.EncFallback(yy3247)
					}
				}
			}
			if yyr3237 || yy2arr3237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3251 := z.EncBinary()
					_ = yym3251
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3237 || yy2arr3237 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3252 := z.DecBinary()
	_ = yym3252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3253 := r.ContainerType()
		if yyct3253 == codecSelferValueTypeMap1234 {
			yyl3253 := r.ReadMapStart()
			if yyl3253 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3253, d)
			}
		} else if yyct3253 == codecSelferValueTypeArray1234 {
			yyl3253 := r.ReadArrayStart()
			if yyl3253 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3253, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3254Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3254Slc
	var yyhl3254 bool = l >= 0
	for yyj3254 := 0; ; yyj3254++ {
		if yyhl3254 {
			if yyj3254 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3254Slc = r.DecodeBytes(yys3254Slc, true, true)
		yys3254 := string(yys3254Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3254 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3257 := &x.ListMeta
				yym3258 := z.DecBinary()
				_ = yym3258
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3257) {
				} else {
					z.DecFallback(yyv3257, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3259 := &x.Items
				yym3260 := z.DecBinary()
				_ = yym3260
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3259), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3254)
		} // end switch yys3254
	} // end for yyj3254
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3261 int
	var yyb3261 bool
	var yyhl3261 bool = l >= 0
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3264 := &x.ListMeta
		yym3265 := z.DecBinary()
		_ = yym3265
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3264) {
		} else {
			z.DecFallback(yyv3264, false)
		}
	}
	yyj3261++
	if yyhl3261 {
		yyb3261 = yyj3261 > l
	} else {
		yyb3261 = r.CheckBreak()
	}
	if yyb3261 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3266 := &x.Items
		yym3267 := z.DecBinary()
		_ = yym3267
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3266), d)
		}
	}
	for {
		yyj3261++
		if yyhl3261 {
			yyb3261 = yyj3261 > l
		} else {
			yyb3261 = r.CheckBreak()
		}
		if yyb3261 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3261-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3268 := z.EncBinary()
	_ = yym3268
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3269 := z.DecBinary()
	_ = yym3269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3270 := z.EncBinary()
	_ = yym3270
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3271 := z.DecBinary()
	_ = yym3271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3272 := z.EncBinary()
		_ = yym3272
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3273 := !z.EncBinary()
			yy2arr3273 := z.EncBasicHandle().StructToArray
			var yyq3273 [4]bool
			_, _, _ = yysep3273, yyq3273, yy2arr3273
			const yyr3273 bool = false
			yyq3273[2] = x.Message != ""
			yyq3273[3] = x.Error != ""
			var yynn3273 int
			if yyr3273 || yy2arr3273 {
				r.EncodeArrayStart(4)
			} else {
				yynn3273 = 2
				for _, b := range yyq3273 {
					if b {
						yynn3273++
					}
				}
				r.EncodeMapStart(yynn3273)
				yynn3273 = 0
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3273[2] {
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3273[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3278 := z.EncBinary()
					_ = yym3278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3273[3] {
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3273[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3281 := z.EncBinary()
					_ = yym3281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3273 || yy2arr3273 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3282 := z.DecBinary()
	_ = yym3282
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3283 := r.ContainerType()
		if yyct3283 == codecSelferValueTypeMap1234 {
			yyl3283 := r.ReadMapStart()
			if yyl3283 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3283, d)
			}
		} else if yyct3283 == codecSelferValueTypeArray1234 {
			yyl3283 := r.ReadArrayStart()
			if yyl3283 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3283, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3284Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3284Slc
	var yyhl3284 bool = l >= 0
	for yyj3284 := 0; ; yyj3284++ {
		if yyhl3284 {
			if yyj3284 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3284Slc = r.DecodeBytes(yys3284Slc, true, true)
		yys3284 := string(yys3284Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3284 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3284)
		} // end switch yys3284
	} // end for yyj3284
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3289 int
	var yyb3289 bool
	var yyhl3289 bool = l >= 0
	yyj3289++
	if yyhl3289 {
		yyb3289 = yyj3289 > l
	} else {
		yyb3289 = r.CheckBreak()
	}
	if yyb3289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3289++
	if yyhl3289 {
		yyb3289 = yyj3289 > l
	} else {
		yyb3289 = r.CheckBreak()
	}
	if yyb3289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3289++
	if yyhl3289 {
		yyb3289 = yyj3289 > l
	} else {
		yyb3289 = r.CheckBreak()
	}
	if yyb3289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3289++
	if yyhl3289 {
		yyb3289 = yyj3289 > l
	} else {
		yyb3289 = r.CheckBreak()
	}
	if yyb3289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3289++
		if yyhl3289 {
			yyb3289 = yyj3289 > l
		} else {
			yyb3289 = r.CheckBreak()
		}
		if yyb3289 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3289-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3294 := z.EncBinary()
		_ = yym3294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3295 := !z.EncBinary()
			yy2arr3295 := z.EncBasicHandle().StructToArray
			var yyq3295 [4]bool
			_, _, _ = yysep3295, yyq3295, yy2arr3295
			const yyr3295 bool = false
			yyq3295[0] = x.Kind != ""
			yyq3295[1] = x.APIVersion != ""
			yyq3295[2] = true
			yyq3295[3] = len(x.Conditions) != 0
			var yynn3295 int
			if yyr3295 || yy2arr3295 {
				r.EncodeArrayStart(4)
			} else {
				yynn3295 = 0
				for _, b := range yyq3295 {
					if b {
						yynn3295++
					}
				}
				r.EncodeMapStart(yynn3295)
				yynn3295 = 0
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[0] {
					yym3297 := z.EncBinary()
					_ = yym3297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3295[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3298 := z.EncBinary()
					_ = yym3298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[1] {
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3295[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3301 := z.EncBinary()
					_ = yym3301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[2] {
					yy3303 := &x.ObjectMeta
					yy3303.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3295[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3304 := &x.ObjectMeta
					yy3304.CodecEncodeSelf(e)
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3306 := z.EncBinary()
						_ = yym3306
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3295[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3307 := z.EncBinary()
						_ = yym3307
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3308 := z.DecBinary()
	_ = yym3308
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3309 := r.ContainerType()
		if yyct3309 == codecSelferValueTypeMap1234 {
			yyl3309 := r.ReadMapStart()
			if yyl3309 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3309, d)
			}
		} else if yyct3309 == codecSelferValueTypeArray1234 {
			yyl3309 := r.ReadArrayStart()
			if yyl3309 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3309, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3310Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3310Slc
	var yyhl3310 bool = l >= 0
	for yyj3310 := 0; ; yyj3310++ {
		if yyhl3310 {
			if yyj3310 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3310Slc = r.DecodeBytes(yys3310Slc, true, true)
		yys3310 := string(yys3310Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3310 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3313 := &x.ObjectMeta
				yyv3313.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3314 := &x.Conditions
				yym3315 := z.DecBinary()
				_ = yym3315
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3314), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3310)
		} // end switch yys3310
	} // end for yyj3310
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3316 int
	var yyb3316 bool
	var yyhl3316 bool = l >= 0
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3319 := &x.ObjectMeta
		yyv3319.CodecDecodeSelf(d)
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3320 := &x.Conditions
		yym3321 := z.DecBinary()
		_ = yym3321
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3320), d)
		}
	}
	for {
		yyj3316++
		if yyhl3316 {
			yyb3316 = yyj3316 > l
		} else {
			yyb3316 = r.CheckBreak()
		}
		if yyb3316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3322 := z.EncBinary()
		_ = yym3322
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3323 := !z.EncBinary()
			yy2arr3323 := z.EncBasicHandle().StructToArray
			var yyq3323 [4]bool
			_, _, _ = yysep3323, yyq3323, yy2arr3323
			const yyr3323 bool = false
			yyq3323[0] = x.Kind != ""
			yyq3323[1] = x.APIVersion != ""
			yyq3323[2] = true
			var yynn3323 int
			if yyr3323 || yy2arr3323 {
				r.EncodeArrayStart(4)
			} else {
				yynn3323 = 1
				for _, b := range yyq3323 {
					if b {
						yynn3323++
					}
				}
				r.EncodeMapStart(yynn3323)
				yynn3323 = 0
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3323[0] {
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3323[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3323[1] {
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3323[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3323[2] {
					yy3331 := &x.ListMeta
					yym3332 := z.EncBinary()
					_ = yym3332
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3331) {
					} else {
						z.EncFallback(yy3331)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3323[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3333 := &x.ListMeta
					yym3334 := z.EncBinary()
					_ = yym3334
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3333) {
					} else {
						z.EncFallback(yy3333)
					}
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3336 := z.EncBinary()
					_ = yym3336
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3337 := z.EncBinary()
					_ = yym3337
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3323 || yy2arr3323 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3338 := z.DecBinary()
	_ = yym3338
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3339 := r.ContainerType()
		if yyct3339 == codecSelferValueTypeMap1234 {
			yyl3339 := r.ReadMapStart()
			if yyl3339 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3339, d)
			}
		} else if yyct3339 == codecSelferValueTypeArray1234 {
			yyl3339 := r.ReadArrayStart()
			if yyl3339 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3339, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3340Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3340Slc
	var yyhl3340 bool = l >= 0
	for yyj3340 := 0; ; yyj3340++ {
		if yyhl3340 {
			if yyj3340 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3340Slc = r.DecodeBytes(yys3340Slc, true, true)
		yys3340 := string(yys3340Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3340 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3343 := &x.ListMeta
				yym3344 := z.DecBinary()
				_ = yym3344
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3343) {
				} else {
					z.DecFallback(yyv3343, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3345 := &x.Items
				yym3346 := z.DecBinary()
				_ = yym3346
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3345), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3340)
		} // end switch yys3340
	} // end for yyj3340
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3347 int
	var yyb3347 bool
	var yyhl3347 bool = l >= 0
	yyj3347++
	if yyhl3347 {
		yyb3347 = yyj3347 > l
	} else {
		yyb3347 = r.CheckBreak()
	}
	if yyb3347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3347++
	if yyhl3347 {
		yyb3347 = yyj3347 > l
	} else {
		yyb3347 = r.CheckBreak()
	}
	if yyb3347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3347++
	if yyhl3347 {
		yyb3347 = yyj3347 > l
	} else {
		yyb3347 = r.CheckBreak()
	}
	if yyb3347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3350 := &x.ListMeta
		yym3351 := z.DecBinary()
		_ = yym3351
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3350) {
		} else {
			z.DecFallback(yyv3350, false)
		}
	}
	yyj3347++
	if yyhl3347 {
		yyb3347 = yyj3347 > l
	} else {
		yyb3347 = r.CheckBreak()
	}
	if yyb3347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3352 := &x.Items
		yym3353 := z.DecBinary()
		_ = yym3353
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3352), d)
		}
	}
	for {
		yyj3347++
		if yyhl3347 {
			yyb3347 = yyj3347 > l
		} else {
			yyb3347 = r.CheckBreak()
		}
		if yyb3347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3354 := z.EncBinary()
		_ = yym3354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3355 := !z.EncBinary()
			yy2arr3355 := z.EncBasicHandle().StructToArray
			var yyq3355 [5]bool
			_, _, _ = yysep3355, yyq3355, yy2arr3355
			const yyr3355 bool = false
			yyq3355[0] = x.Capabilities != nil
			yyq3355[1] = x.Privileged != nil
			yyq3355[2] = x.SELinuxOptions != nil
			yyq3355[3] = x.RunAsUser != nil
			yyq3355[4] = x.RunAsNonRoot != nil
			var yynn3355 int
			if yyr3355 || yy2arr3355 {
				r.EncodeArrayStart(5)
			} else {
				yynn3355 = 0
				for _, b := range yyq3355 {
					if b {
						yynn3355++
					}
				}
				r.EncodeMapStart(yynn3355)
				yynn3355 = 0
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3355[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3358 := *x.Privileged
						yym3359 := z.EncBinary()
						_ = yym3359
						if false {
						} else {
							r.EncodeBool(bool(yy3358))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3355[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3360 := *x.Privileged
						yym3361 := z.EncBinary()
						_ = yym3361
						if false {
						} else {
							r.EncodeBool(bool(yy3360))
						}
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3355[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3364 := *x.RunAsUser
						yym3365 := z.EncBinary()
						_ = yym3365
						if false {
						} else {
							r.EncodeInt(int64(yy3364))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3355[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3366 := *x.RunAsUser
						yym3367 := z.EncBinary()
						_ = yym3367
						if false {
						} else {
							r.EncodeInt(int64(yy3366))
						}
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3355[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3369 := *x.RunAsNonRoot
						yym3370 := z.EncBinary()
						_ = yym3370
						if false {
						} else {
							r.EncodeBool(bool(yy3369))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3355[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3371 := *x.RunAsNonRoot
						yym3372 := z.EncBinary()
						_ = yym3372
						if false {
						} else {
							r.EncodeBool(bool(yy3371))
						}
					}
				}
			}
			if yyr3355 || yy2arr3355 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3373 := z.DecBinary()
	_ = yym3373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3374 := r.ContainerType()
		if yyct3374 == codecSelferValueTypeMap1234 {
			yyl3374 := r.ReadMapStart()
			if yyl3374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3374, d)
			}
		} else if yyct3374 == codecSelferValueTypeArray1234 {
			yyl3374 := r.ReadArrayStart()
			if yyl3374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3375Slc
	var yyhl3375 bool = l >= 0
	for yyj3375 := 0; ; yyj3375++ {
		if yyhl3375 {
			if yyj3375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3375Slc = r.DecodeBytes(yys3375Slc, true, true)
		yys3375 := string(yys3375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3375 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3378 := z.DecBinary()
				_ = yym3378
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3381 := z.DecBinary()
				_ = yym3381
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3383 := z.DecBinary()
				_ = yym3383
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3375)
		} // end switch yys3375
	} // end for yyj3375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3384 int
	var yyb3384 bool
	var yyhl3384 bool = l >= 0
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3387 := z.DecBinary()
		_ = yym3387
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3390 := z.DecBinary()
		_ = yym3390
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3384++
	if yyhl3384 {
		yyb3384 = yyj3384 > l
	} else {
		yyb3384 = r.CheckBreak()
	}
	if yyb3384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3392 := z.DecBinary()
		_ = yym3392
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3384++
		if yyhl3384 {
			yyb3384 = yyj3384 > l
		} else {
			yyb3384 = r.CheckBreak()
		}
		if yyb3384 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3384-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3393 := z.EncBinary()
		_ = yym3393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3394 := !z.EncBinary()
			yy2arr3394 := z.EncBasicHandle().StructToArray
			var yyq3394 [4]bool
			_, _, _ = yysep3394, yyq3394, yy2arr3394
			const yyr3394 bool = false
			yyq3394[0] = x.User != ""
			yyq3394[1] = x.Role != ""
			yyq3394[2] = x.Type != ""
			yyq3394[3] = x.Level != ""
			var yynn3394 int
			if yyr3394 || yy2arr3394 {
				r.EncodeArrayStart(4)
			} else {
				yynn3394 = 0
				for _, b := range yyq3394 {
					if b {
						yynn3394++
					}
				}
				r.EncodeMapStart(yynn3394)
				yynn3394 = 0
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[0] {
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3394[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[1] {
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[2] {
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3394[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3394[3] {
					yym3405 := z.EncBinary()
					_ = yym3405
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3394[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3406 := z.EncBinary()
					_ = yym3406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3394 || yy2arr3394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3407 := z.DecBinary()
	_ = yym3407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3408 := r.ContainerType()
		if yyct3408 == codecSelferValueTypeMap1234 {
			yyl3408 := r.ReadMapStart()
			if yyl3408 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3408, d)
			}
		} else if yyct3408 == codecSelferValueTypeArray1234 {
			yyl3408 := r.ReadArrayStart()
			if yyl3408 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3409Slc
	var yyhl3409 bool = l >= 0
	for yyj3409 := 0; ; yyj3409++ {
		if yyhl3409 {
			if yyj3409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3409Slc = r.DecodeBytes(yys3409Slc, true, true)
		yys3409 := string(yys3409Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3409 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3409)
		} // end switch yys3409
	} // end for yyj3409
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3414 int
	var yyb3414 bool
	var yyhl3414 bool = l >= 0
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3414++
	if yyhl3414 {
		yyb3414 = yyj3414 > l
	} else {
		yyb3414 = r.CheckBreak()
	}
	if yyb3414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3414++
		if yyhl3414 {
			yyb3414 = yyj3414 > l
		} else {
			yyb3414 = r.CheckBreak()
		}
		if yyb3414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3419 := z.EncBinary()
		_ = yym3419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3420 := !z.EncBinary()
			yy2arr3420 := z.EncBasicHandle().StructToArray
			var yyq3420 [5]bool
			_, _, _ = yysep3420, yyq3420, yy2arr3420
			const yyr3420 bool = false
			yyq3420[0] = x.Kind != ""
			yyq3420[1] = x.APIVersion != ""
			yyq3420[2] = true
			var yynn3420 int
			if yyr3420 || yy2arr3420 {
				r.EncodeArrayStart(5)
			} else {
				yynn3420 = 2
				for _, b := range yyq3420 {
					if b {
						yynn3420++
					}
				}
				r.EncodeMapStart(yynn3420)
				yynn3420 = 0
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3420[0] {
					yym3422 := z.EncBinary()
					_ = yym3422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3423 := z.EncBinary()
					_ = yym3423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3420[1] {
					yym3425 := z.EncBinary()
					_ = yym3425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3426 := z.EncBinary()
					_ = yym3426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3420[2] {
					yy3428 := &x.ObjectMeta
					yy3428.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3429 := &x.ObjectMeta
					yy3429.CodecEncodeSelf(e)
				}
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3431 := z.EncBinary()
				_ = yym3431
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3432 := z.EncBinary()
				_ = yym3432
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3434 := z.EncBinary()
					_ = yym3434
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3435 := z.EncBinary()
					_ = yym3435
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3420 || yy2arr3420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3436 := z.DecBinary()
	_ = yym3436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3437 := r.ContainerType()
		if yyct3437 == codecSelferValueTypeMap1234 {
			yyl3437 := r.ReadMapStart()
			if yyl3437 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3437, d)
			}
		} else if yyct3437 == codecSelferValueTypeArray1234 {
			yyl3437 := r.ReadArrayStart()
			if yyl3437 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3438Slc
	var yyhl3438 bool = l >= 0
	for yyj3438 := 0; ; yyj3438++ {
		if yyhl3438 {
			if yyj3438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3438Slc = r.DecodeBytes(yys3438Slc, true, true)
		yys3438 := string(yys3438Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3438 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3441 := &x.ObjectMeta
				yyv3441.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3443 := &x.Data
				yym3444 := z.DecBinary()
				_ = yym3444
				if false {
				} else {
					*yyv3443 = r.DecodeBytes(*(*[]byte)(yyv3443), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3438)
		} // end switch yys3438
	} // end for yyj3438
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3445 int
	var yyb3445 bool
	var yyhl3445 bool = l >= 0
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3448 := &x.ObjectMeta
		yyv3448.CodecDecodeSelf(d)
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3445++
	if yyhl3445 {
		yyb3445 = yyj3445 > l
	} else {
		yyb3445 = r.CheckBreak()
	}
	if yyb3445 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3450 := &x.Data
		yym3451 := z.DecBinary()
		_ = yym3451
		if false {
		} else {
			*yyv3450 = r.DecodeBytes(*(*[]byte)(yyv3450), false, false)
		}
	}
	for {
		yyj3445++
		if yyhl3445 {
			yyb3445 = yyj3445 > l
		} else {
			yyb3445 = r.CheckBreak()
		}
		if yyb3445 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3445-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3452 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3452.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3453 := *v
	yyh3453, yyl3453 := z.DecSliceHelperStart()
	var yyc3453 bool
	if yyl3453 == 0 {
		if yyv3453 == nil {
			yyv3453 = []PersistentVolumeAccessMode{}
			yyc3453 = true
		} else if len(yyv3453) != 0 {
			yyv3453 = yyv3453[:0]
			yyc3453 = true
		}
	} else if yyl3453 > 0 {
		var yyrr3453, yyrl3453 int
		var yyrt3453 bool
		if yyl3453 > cap(yyv3453) {

			yyrl3453, yyrt3453 = z.DecInferLen(yyl3453, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3453 {
				if yyrl3453 <= cap(yyv3453) {
					yyv3453 = yyv3453[:yyrl3453]
				} else {
					yyv3453 = make([]PersistentVolumeAccessMode, yyrl3453)
				}
			} else {
				yyv3453 = make([]PersistentVolumeAccessMode, yyrl3453)
			}
			yyc3453 = true
			yyrr3453 = len(yyv3453)
		} else if yyl3453 != len(yyv3453) {
			yyv3453 = yyv3453[:yyl3453]
			yyc3453 = true
		}
		yyj3453 := 0
		for ; yyj3453 < yyrr3453; yyj3453++ {
			yyh3453.ElemContainerState(yyj3453)
			if r.TryDecodeAsNil() {
				yyv3453[yyj3453] = ""
			} else {
				yyv3453[yyj3453] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3453 {
			for ; yyj3453 < yyl3453; yyj3453++ {
				yyv3453 = append(yyv3453, "")
				yyh3453.ElemContainerState(yyj3453)
				if r.TryDecodeAsNil() {
					yyv3453[yyj3453] = ""
				} else {
					yyv3453[yyj3453] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3453 := 0
		for ; !r.CheckBreak(); yyj3453++ {

			if yyj3453 >= len(yyv3453) {
				yyv3453 = append(yyv3453, "") // var yyz3453 PersistentVolumeAccessMode
				yyc3453 = true
			}
			yyh3453.ElemContainerState(yyj3453)
			if yyj3453 < len(yyv3453) {
				if r.TryDecodeAsNil() {
					yyv3453[yyj3453] = ""
				} else {
					yyv3453[yyj3453] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3453 < len(yyv3453) {
			yyv3453 = yyv3453[:yyj3453]
			yyc3453 = true
		} else if yyj3453 == 0 && yyv3453 == nil {
			yyv3453 = []PersistentVolumeAccessMode{}
			yyc3453 = true
		}
	}
	yyh3453.End()
	if yyc3453 {
		*v = yyv3453
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3457 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3458 := &yyv3457
		yy3458.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3459 := *v
	yyh3459, yyl3459 := z.DecSliceHelperStart()
	var yyc3459 bool
	if yyl3459 == 0 {
		if yyv3459 == nil {
			yyv3459 = []PersistentVolume{}
			yyc3459 = true
		} else if len(yyv3459) != 0 {
			yyv3459 = yyv3459[:0]
			yyc3459 = true
		}
	} else if yyl3459 > 0 {
		var yyrr3459, yyrl3459 int
		var yyrt3459 bool
		if yyl3459 > cap(yyv3459) {

			yyrg3459 := len(yyv3459) > 0
			yyv23459 := yyv3459
			yyrl3459, yyrt3459 = z.DecInferLen(yyl3459, z.DecBasicHandle().MaxInitLen, 384)
			if yyrt3459 {
				if yyrl3459 <= cap(yyv3459) {
					yyv3459 = yyv3459[:yyrl3459]
				} else {
					yyv3459 = make([]PersistentVolume, yyrl3459)
				}
			} else {
				yyv3459 = make([]PersistentVolume, yyrl3459)
			}
			yyc3459 = true
			yyrr3459 = len(yyv3459)
			if yyrg3459 {
				copy(yyv3459, yyv23459)
			}
		} else if yyl3459 != len(yyv3459) {
			yyv3459 = yyv3459[:yyl3459]
			yyc3459 = true
		}
		yyj3459 := 0
		for ; yyj3459 < yyrr3459; yyj3459++ {
			yyh3459.ElemContainerState(yyj3459)
			if r.TryDecodeAsNil() {
				yyv3459[yyj3459] = PersistentVolume{}
			} else {
				yyv3460 := &yyv3459[yyj3459]
				yyv3460.CodecDecodeSelf(d)
			}

		}
		if yyrt3459 {
			for ; yyj3459 < yyl3459; yyj3459++ {
				yyv3459 = append(yyv3459, PersistentVolume{})
				yyh3459.ElemContainerState(yyj3459)
				if r.TryDecodeAsNil() {
					yyv3459[yyj3459] = PersistentVolume{}
				} else {
					yyv3461 := &yyv3459[yyj3459]
					yyv3461.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3459 := 0
		for ; !r.CheckBreak(); yyj3459++ {

			if yyj3459 >= len(yyv3459) {
				yyv3459 = append(yyv3459, PersistentVolume{}) // var yyz3459 PersistentVolume
				yyc3459 = true
			}
			yyh3459.ElemContainerState(yyj3459)
			if yyj3459 < len(yyv3459) {
				if r.TryDecodeAsNil() {
					yyv3459[yyj3459] = PersistentVolume{}
				} else {
					yyv3462 := &yyv3459[yyj3459]
					yyv3462.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3459 < len(yyv3459) {
			yyv3459 = yyv3459[:yyj3459]
			yyc3459 = true
		} else if yyj3459 == 0 && yyv3459 == nil {
			yyv3459 = []PersistentVolume{}
			yyc3459 = true
		}
	}
	yyh3459.End()
	if yyc3459 {
		*v = yyv3459
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3463 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3464 := &yyv3463
		yy3464.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3465 := *v
	yyh3465, yyl3465 := z.DecSliceHelperStart()
	var yyc3465 bool
	if yyl3465 == 0 {
		if yyv3465 == nil {
			yyv3465 = []PersistentVolumeClaim{}
			yyc3465 = true
		} else if len(yyv3465) != 0 {
			yyv3465 = yyv3465[:0]
			yyc3465 = true
		}
	} else if yyl3465 > 0 {
		var yyrr3465, yyrl3465 int
		var yyrt3465 bool
		if yyl3465 > cap(yyv3465) {

			yyrg3465 := len(yyv3465) > 0
			yyv23465 := yyv3465
			yyrl3465, yyrt3465 = z.DecInferLen(yyl3465, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt3465 {
				if yyrl3465 <= cap(yyv3465) {
					yyv3465 = yyv3465[:yyrl3465]
				} else {
					yyv3465 = make([]PersistentVolumeClaim, yyrl3465)
				}
			} else {
				yyv3465 = make([]PersistentVolumeClaim, yyrl3465)
			}
			yyc3465 = true
			yyrr3465 = len(yyv3465)
			if yyrg3465 {
				copy(yyv3465, yyv23465)
			}
		} else if yyl3465 != len(yyv3465) {
			yyv3465 = yyv3465[:yyl3465]
			yyc3465 = true
		}
		yyj3465 := 0
		for ; yyj3465 < yyrr3465; yyj3465++ {
			yyh3465.ElemContainerState(yyj3465)
			if r.TryDecodeAsNil() {
				yyv3465[yyj3465] = PersistentVolumeClaim{}
			} else {
				yyv3466 := &yyv3465[yyj3465]
				yyv3466.CodecDecodeSelf(d)
			}

		}
		if yyrt3465 {
			for ; yyj3465 < yyl3465; yyj3465++ {
				yyv3465 = append(yyv3465, PersistentVolumeClaim{})
				yyh3465.ElemContainerState(yyj3465)
				if r.TryDecodeAsNil() {
					yyv3465[yyj3465] = PersistentVolumeClaim{}
				} else {
					yyv3467 := &yyv3465[yyj3465]
					yyv3467.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3465 := 0
		for ; !r.CheckBreak(); yyj3465++ {

			if yyj3465 >= len(yyv3465) {
				yyv3465 = append(yyv3465, PersistentVolumeClaim{}) // var yyz3465 PersistentVolumeClaim
				yyc3465 = true
			}
			yyh3465.ElemContainerState(yyj3465)
			if yyj3465 < len(yyv3465) {
				if r.TryDecodeAsNil() {
					yyv3465[yyj3465] = PersistentVolumeClaim{}
				} else {
					yyv3468 := &yyv3465[yyj3465]
					yyv3468.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3465 < len(yyv3465) {
			yyv3465 = yyv3465[:yyj3465]
			yyc3465 = true
		} else if yyj3465 == 0 && yyv3465 == nil {
			yyv3465 = []PersistentVolumeClaim{}
			yyc3465 = true
		}
	}
	yyh3465.End()
	if yyc3465 {
		*v = yyv3465
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3469 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3470 := &yyv3469
		yy3470.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3471 := *v
	yyh3471, yyl3471 := z.DecSliceHelperStart()
	var yyc3471 bool
	if yyl3471 == 0 {
		if yyv3471 == nil {
			yyv3471 = []DownwardAPIVolumeFile{}
			yyc3471 = true
		} else if len(yyv3471) != 0 {
			yyv3471 = yyv3471[:0]
			yyc3471 = true
		}
	} else if yyl3471 > 0 {
		var yyrr3471, yyrl3471 int
		var yyrt3471 bool
		if yyl3471 > cap(yyv3471) {

			yyrg3471 := len(yyv3471) > 0
			yyv23471 := yyv3471
			yyrl3471, yyrt3471 = z.DecInferLen(yyl3471, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3471 {
				if yyrl3471 <= cap(yyv3471) {
					yyv3471 = yyv3471[:yyrl3471]
				} else {
					yyv3471 = make([]DownwardAPIVolumeFile, yyrl3471)
				}
			} else {
				yyv3471 = make([]DownwardAPIVolumeFile, yyrl3471)
			}
			yyc3471 = true
			yyrr3471 = len(yyv3471)
			if yyrg3471 {
				copy(yyv3471, yyv23471)
			}
		} else if yyl3471 != len(yyv3471) {
			yyv3471 = yyv3471[:yyl3471]
			yyc3471 = true
		}
		yyj3471 := 0
		for ; yyj3471 < yyrr3471; yyj3471++ {
			yyh3471.ElemContainerState(yyj3471)
			if r.TryDecodeAsNil() {
				yyv3471[yyj3471] = DownwardAPIVolumeFile{}
			} else {
				yyv3472 := &yyv3471[yyj3471]
				yyv3472.CodecDecodeSelf(d)
			}

		}
		if yyrt3471 {
			for ; yyj3471 < yyl3471; yyj3471++ {
				yyv3471 = append(yyv3471, DownwardAPIVolumeFile{})
				yyh3471.ElemContainerState(yyj3471)
				if r.TryDecodeAsNil() {
					yyv3471[yyj3471] = DownwardAPIVolumeFile{}
				} else {
					yyv3473 := &yyv3471[yyj3471]
					yyv3473.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3471 := 0
		for ; !r.CheckBreak(); yyj3471++ {

			if yyj3471 >= len(yyv3471) {
				yyv3471 = append(yyv3471, DownwardAPIVolumeFile{}) // var yyz3471 DownwardAPIVolumeFile
				yyc3471 = true
			}
			yyh3471.ElemContainerState(yyj3471)
			if yyj3471 < len(yyv3471) {
				if r.TryDecodeAsNil() {
					yyv3471[yyj3471] = DownwardAPIVolumeFile{}
				} else {
					yyv3474 := &yyv3471[yyj3471]
					yyv3474.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3471 < len(yyv3471) {
			yyv3471 = yyv3471[:yyj3471]
			yyc3471 = true
		} else if yyj3471 == 0 && yyv3471 == nil {
			yyv3471 = []DownwardAPIVolumeFile{}
			yyc3471 = true
		}
	}
	yyh3471.End()
	if yyc3471 {
		*v = yyv3471
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3475 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3475.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3476 := *v
	yyh3476, yyl3476 := z.DecSliceHelperStart()
	var yyc3476 bool
	if yyl3476 == 0 {
		if yyv3476 == nil {
			yyv3476 = []Capability{}
			yyc3476 = true
		} else if len(yyv3476) != 0 {
			yyv3476 = yyv3476[:0]
			yyc3476 = true
		}
	} else if yyl3476 > 0 {
		var yyrr3476, yyrl3476 int
		var yyrt3476 bool
		if yyl3476 > cap(yyv3476) {

			yyrl3476, yyrt3476 = z.DecInferLen(yyl3476, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3476 {
				if yyrl3476 <= cap(yyv3476) {
					yyv3476 = yyv3476[:yyrl3476]
				} else {
					yyv3476 = make([]Capability, yyrl3476)
				}
			} else {
				yyv3476 = make([]Capability, yyrl3476)
			}
			yyc3476 = true
			yyrr3476 = len(yyv3476)
		} else if yyl3476 != len(yyv3476) {
			yyv3476 = yyv3476[:yyl3476]
			yyc3476 = true
		}
		yyj3476 := 0
		for ; yyj3476 < yyrr3476; yyj3476++ {
			yyh3476.ElemContainerState(yyj3476)
			if r.TryDecodeAsNil() {
				yyv3476[yyj3476] = ""
			} else {
				yyv3476[yyj3476] = Capability(r.DecodeString())
			}

		}
		if yyrt3476 {
			for ; yyj3476 < yyl3476; yyj3476++ {
				yyv3476 = append(yyv3476, "")
				yyh3476.ElemContainerState(yyj3476)
				if r.TryDecodeAsNil() {
					yyv3476[yyj3476] = ""
				} else {
					yyv3476[yyj3476] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3476 := 0
		for ; !r.CheckBreak(); yyj3476++ {

			if yyj3476 >= len(yyv3476) {
				yyv3476 = append(yyv3476, "") // var yyz3476 Capability
				yyc3476 = true
			}
			yyh3476.ElemContainerState(yyj3476)
			if yyj3476 < len(yyv3476) {
				if r.TryDecodeAsNil() {
					yyv3476[yyj3476] = ""
				} else {
					yyv3476[yyj3476] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3476 < len(yyv3476) {
			yyv3476 = yyv3476[:yyj3476]
			yyc3476 = true
		} else if yyj3476 == 0 && yyv3476 == nil {
			yyv3476 = []Capability{}
			yyc3476 = true
		}
	}
	yyh3476.End()
	if yyc3476 {
		*v = yyv3476
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3480 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3481 := &yyv3480
		yy3481.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3482 := *v
	yyh3482, yyl3482 := z.DecSliceHelperStart()
	var yyc3482 bool
	if yyl3482 == 0 {
		if yyv3482 == nil {
			yyv3482 = []ContainerPort{}
			yyc3482 = true
		} else if len(yyv3482) != 0 {
			yyv3482 = yyv3482[:0]
			yyc3482 = true
		}
	} else if yyl3482 > 0 {
		var yyrr3482, yyrl3482 int
		var yyrt3482 bool
		if yyl3482 > cap(yyv3482) {

			yyrg3482 := len(yyv3482) > 0
			yyv23482 := yyv3482
			yyrl3482, yyrt3482 = z.DecInferLen(yyl3482, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3482 {
				if yyrl3482 <= cap(yyv3482) {
					yyv3482 = yyv3482[:yyrl3482]
				} else {
					yyv3482 = make([]ContainerPort, yyrl3482)
				}
			} else {
				yyv3482 = make([]ContainerPort, yyrl3482)
			}
			yyc3482 = true
			yyrr3482 = len(yyv3482)
			if yyrg3482 {
				copy(yyv3482, yyv23482)
			}
		} else if yyl3482 != len(yyv3482) {
			yyv3482 = yyv3482[:yyl3482]
			yyc3482 = true
		}
		yyj3482 := 0
		for ; yyj3482 < yyrr3482; yyj3482++ {
			yyh3482.ElemContainerState(yyj3482)
			if r.TryDecodeAsNil() {
				yyv3482[yyj3482] = ContainerPort{}
			} else {
				yyv3483 := &yyv3482[yyj3482]
				yyv3483.CodecDecodeSelf(d)
			}

		}
		if yyrt3482 {
			for ; yyj3482 < yyl3482; yyj3482++ {
				yyv3482 = append(yyv3482, ContainerPort{})
				yyh3482.ElemContainerState(yyj3482)
				if r.TryDecodeAsNil() {
					yyv3482[yyj3482] = ContainerPort{}
				} else {
					yyv3484 := &yyv3482[yyj3482]
					yyv3484.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3482 := 0
		for ; !r.CheckBreak(); yyj3482++ {

			if yyj3482 >= len(yyv3482) {
				yyv3482 = append(yyv3482, ContainerPort{}) // var yyz3482 ContainerPort
				yyc3482 = true
			}
			yyh3482.ElemContainerState(yyj3482)
			if yyj3482 < len(yyv3482) {
				if r.TryDecodeAsNil() {
					yyv3482[yyj3482] = ContainerPort{}
				} else {
					yyv3485 := &yyv3482[yyj3482]
					yyv3485.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3482 < len(yyv3482) {
			yyv3482 = yyv3482[:yyj3482]
			yyc3482 = true
		} else if yyj3482 == 0 && yyv3482 == nil {
			yyv3482 = []ContainerPort{}
			yyc3482 = true
		}
	}
	yyh3482.End()
	if yyc3482 {
		*v = yyv3482
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3486 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3487 := &yyv3486
		yy3487.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3488 := *v
	yyh3488, yyl3488 := z.DecSliceHelperStart()
	var yyc3488 bool
	if yyl3488 == 0 {
		if yyv3488 == nil {
			yyv3488 = []EnvVar{}
			yyc3488 = true
		} else if len(yyv3488) != 0 {
			yyv3488 = yyv3488[:0]
			yyc3488 = true
		}
	} else if yyl3488 > 0 {
		var yyrr3488, yyrl3488 int
		var yyrt3488 bool
		if yyl3488 > cap(yyv3488) {

			yyrg3488 := len(yyv3488) > 0
			yyv23488 := yyv3488
			yyrl3488, yyrt3488 = z.DecInferLen(yyl3488, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3488 {
				if yyrl3488 <= cap(yyv3488) {
					yyv3488 = yyv3488[:yyrl3488]
				} else {
					yyv3488 = make([]EnvVar, yyrl3488)
				}
			} else {
				yyv3488 = make([]EnvVar, yyrl3488)
			}
			yyc3488 = true
			yyrr3488 = len(yyv3488)
			if yyrg3488 {
				copy(yyv3488, yyv23488)
			}
		} else if yyl3488 != len(yyv3488) {
			yyv3488 = yyv3488[:yyl3488]
			yyc3488 = true
		}
		yyj3488 := 0
		for ; yyj3488 < yyrr3488; yyj3488++ {
			yyh3488.ElemContainerState(yyj3488)
			if r.TryDecodeAsNil() {
				yyv3488[yyj3488] = EnvVar{}
			} else {
				yyv3489 := &yyv3488[yyj3488]
				yyv3489.CodecDecodeSelf(d)
			}

		}
		if yyrt3488 {
			for ; yyj3488 < yyl3488; yyj3488++ {
				yyv3488 = append(yyv3488, EnvVar{})
				yyh3488.ElemContainerState(yyj3488)
				if r.TryDecodeAsNil() {
					yyv3488[yyj3488] = EnvVar{}
				} else {
					yyv3490 := &yyv3488[yyj3488]
					yyv3490.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3488 := 0
		for ; !r.CheckBreak(); yyj3488++ {

			if yyj3488 >= len(yyv3488) {
				yyv3488 = append(yyv3488, EnvVar{}) // var yyz3488 EnvVar
				yyc3488 = true
			}
			yyh3488.ElemContainerState(yyj3488)
			if yyj3488 < len(yyv3488) {
				if r.TryDecodeAsNil() {
					yyv3488[yyj3488] = EnvVar{}
				} else {
					yyv3491 := &yyv3488[yyj3488]
					yyv3491.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3488 < len(yyv3488) {
			yyv3488 = yyv3488[:yyj3488]
			yyc3488 = true
		} else if yyj3488 == 0 && yyv3488 == nil {
			yyv3488 = []EnvVar{}
			yyc3488 = true
		}
	}
	yyh3488.End()
	if yyc3488 {
		*v = yyv3488
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3492 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3493 := &yyv3492
		yy3493.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3494 := *v
	yyh3494, yyl3494 := z.DecSliceHelperStart()
	var yyc3494 bool
	if yyl3494 == 0 {
		if yyv3494 == nil {
			yyv3494 = []VolumeMount{}
			yyc3494 = true
		} else if len(yyv3494) != 0 {
			yyv3494 = yyv3494[:0]
			yyc3494 = true
		}
	} else if yyl3494 > 0 {
		var yyrr3494, yyrl3494 int
		var yyrt3494 bool
		if yyl3494 > cap(yyv3494) {

			yyrg3494 := len(yyv3494) > 0
			yyv23494 := yyv3494
			yyrl3494, yyrt3494 = z.DecInferLen(yyl3494, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3494 {
				if yyrl3494 <= cap(yyv3494) {
					yyv3494 = yyv3494[:yyrl3494]
				} else {
					yyv3494 = make([]VolumeMount, yyrl3494)
				}
			} else {
				yyv3494 = make([]VolumeMount, yyrl3494)
			}
			yyc3494 = true
			yyrr3494 = len(yyv3494)
			if yyrg3494 {
				copy(yyv3494, yyv23494)
			}
		} else if yyl3494 != len(yyv3494) {
			yyv3494 = yyv3494[:yyl3494]
			yyc3494 = true
		}
		yyj3494 := 0
		for ; yyj3494 < yyrr3494; yyj3494++ {
			yyh3494.ElemContainerState(yyj3494)
			if r.TryDecodeAsNil() {
				yyv3494[yyj3494] = VolumeMount{}
			} else {
				yyv3495 := &yyv3494[yyj3494]
				yyv3495.CodecDecodeSelf(d)
			}

		}
		if yyrt3494 {
			for ; yyj3494 < yyl3494; yyj3494++ {
				yyv3494 = append(yyv3494, VolumeMount{})
				yyh3494.ElemContainerState(yyj3494)
				if r.TryDecodeAsNil() {
					yyv3494[yyj3494] = VolumeMount{}
				} else {
					yyv3496 := &yyv3494[yyj3494]
					yyv3496.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3494 := 0
		for ; !r.CheckBreak(); yyj3494++ {

			if yyj3494 >= len(yyv3494) {
				yyv3494 = append(yyv3494, VolumeMount{}) // var yyz3494 VolumeMount
				yyc3494 = true
			}
			yyh3494.ElemContainerState(yyj3494)
			if yyj3494 < len(yyv3494) {
				if r.TryDecodeAsNil() {
					yyv3494[yyj3494] = VolumeMount{}
				} else {
					yyv3497 := &yyv3494[yyj3494]
					yyv3497.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3494 < len(yyv3494) {
			yyv3494 = yyv3494[:yyj3494]
			yyc3494 = true
		} else if yyj3494 == 0 && yyv3494 == nil {
			yyv3494 = []VolumeMount{}
			yyc3494 = true
		}
	}
	yyh3494.End()
	if yyc3494 {
		*v = yyv3494
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3498 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3499 := &yyv3498
		yy3499.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3500 := *v
	yyh3500, yyl3500 := z.DecSliceHelperStart()
	var yyc3500 bool
	if yyl3500 == 0 {
		if yyv3500 == nil {
			yyv3500 = []Pod{}
			yyc3500 = true
		} else if len(yyv3500) != 0 {
			yyv3500 = yyv3500[:0]
			yyc3500 = true
		}
	} else if yyl3500 > 0 {
		var yyrr3500, yyrl3500 int
		var yyrt3500 bool
		if yyl3500 > cap(yyv3500) {

			yyrg3500 := len(yyv3500) > 0
			yyv23500 := yyv3500
			yyrl3500, yyrt3500 = z.DecInferLen(yyl3500, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt3500 {
				if yyrl3500 <= cap(yyv3500) {
					yyv3500 = yyv3500[:yyrl3500]
				} else {
					yyv3500 = make([]Pod, yyrl3500)
				}
			} else {
				yyv3500 = make([]Pod, yyrl3500)
			}
			yyc3500 = true
			yyrr3500 = len(yyv3500)
			if yyrg3500 {
				copy(yyv3500, yyv23500)
			}
		} else if yyl3500 != len(yyv3500) {
			yyv3500 = yyv3500[:yyl3500]
			yyc3500 = true
		}
		yyj3500 := 0
		for ; yyj3500 < yyrr3500; yyj3500++ {
			yyh3500.ElemContainerState(yyj3500)
			if r.TryDecodeAsNil() {
				yyv3500[yyj3500] = Pod{}
			} else {
				yyv3501 := &yyv3500[yyj3500]
				yyv3501.CodecDecodeSelf(d)
			}

		}
		if yyrt3500 {
			for ; yyj3500 < yyl3500; yyj3500++ {
				yyv3500 = append(yyv3500, Pod{})
				yyh3500.ElemContainerState(yyj3500)
				if r.TryDecodeAsNil() {
					yyv3500[yyj3500] = Pod{}
				} else {
					yyv3502 := &yyv3500[yyj3500]
					yyv3502.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3500 := 0
		for ; !r.CheckBreak(); yyj3500++ {

			if yyj3500 >= len(yyv3500) {
				yyv3500 = append(yyv3500, Pod{}) // var yyz3500 Pod
				yyc3500 = true
			}
			yyh3500.ElemContainerState(yyj3500)
			if yyj3500 < len(yyv3500) {
				if r.TryDecodeAsNil() {
					yyv3500[yyj3500] = Pod{}
				} else {
					yyv3503 := &yyv3500[yyj3500]
					yyv3503.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3500 < len(yyv3500) {
			yyv3500 = yyv3500[:yyj3500]
			yyc3500 = true
		} else if yyj3500 == 0 && yyv3500 == nil {
			yyv3500 = []Pod{}
			yyc3500 = true
		}
	}
	yyh3500.End()
	if yyc3500 {
		*v = yyv3500
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3504 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3505 := &yyv3504
		yy3505.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3506 := *v
	yyh3506, yyl3506 := z.DecSliceHelperStart()
	var yyc3506 bool
	if yyl3506 == 0 {
		if yyv3506 == nil {
			yyv3506 = []Volume{}
			yyc3506 = true
		} else if len(yyv3506) != 0 {
			yyv3506 = yyv3506[:0]
			yyc3506 = true
		}
	} else if yyl3506 > 0 {
		var yyrr3506, yyrl3506 int
		var yyrt3506 bool
		if yyl3506 > cap(yyv3506) {

			yyrg3506 := len(yyv3506) > 0
			yyv23506 := yyv3506
			yyrl3506, yyrt3506 = z.DecInferLen(yyl3506, z.DecBasicHandle().MaxInitLen, 144)
			if yyrt3506 {
				if yyrl3506 <= cap(yyv3506) {
					yyv3506 = yyv3506[:yyrl3506]
				} else {
					yyv3506 = make([]Volume, yyrl3506)
				}
			} else {
				yyv3506 = make([]Volume, yyrl3506)
			}
			yyc3506 = true
			yyrr3506 = len(yyv3506)
			if yyrg3506 {
				copy(yyv3506, yyv23506)
			}
		} else if yyl3506 != len(yyv3506) {
			yyv3506 = yyv3506[:yyl3506]
			yyc3506 = true
		}
		yyj3506 := 0
		for ; yyj3506 < yyrr3506; yyj3506++ {
			yyh3506.ElemContainerState(yyj3506)
			if r.TryDecodeAsNil() {
				yyv3506[yyj3506] = Volume{}
			} else {
				yyv3507 := &yyv3506[yyj3506]
				yyv3507.CodecDecodeSelf(d)
			}

		}
		if yyrt3506 {
			for ; yyj3506 < yyl3506; yyj3506++ {
				yyv3506 = append(yyv3506, Volume{})
				yyh3506.ElemContainerState(yyj3506)
				if r.TryDecodeAsNil() {
					yyv3506[yyj3506] = Volume{}
				} else {
					yyv3508 := &yyv3506[yyj3506]
					yyv3508.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3506 := 0
		for ; !r.CheckBreak(); yyj3506++ {

			if yyj3506 >= len(yyv3506) {
				yyv3506 = append(yyv3506, Volume{}) // var yyz3506 Volume
				yyc3506 = true
			}
			yyh3506.ElemContainerState(yyj3506)
			if yyj3506 < len(yyv3506) {
				if r.TryDecodeAsNil() {
					yyv3506[yyj3506] = Volume{}
				} else {
					yyv3509 := &yyv3506[yyj3506]
					yyv3509.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3506 < len(yyv3506) {
			yyv3506 = yyv3506[:yyj3506]
			yyc3506 = true
		} else if yyj3506 == 0 && yyv3506 == nil {
			yyv3506 = []Volume{}
			yyc3506 = true
		}
	}
	yyh3506.End()
	if yyc3506 {
		*v = yyv3506
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3510 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3511 := &yyv3510
		yy3511.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3512 := *v
	yyh3512, yyl3512 := z.DecSliceHelperStart()
	var yyc3512 bool
	if yyl3512 == 0 {
		if yyv3512 == nil {
			yyv3512 = []Container{}
			yyc3512 = true
		} else if len(yyv3512) != 0 {
			yyv3512 = yyv3512[:0]
			yyc3512 = true
		}
	} else if yyl3512 > 0 {
		var yyrr3512, yyrl3512 int
		var yyrt3512 bool
		if yyl3512 > cap(yyv3512) {

			yyrg3512 := len(yyv3512) > 0
			yyv23512 := yyv3512
			yyrl3512, yyrt3512 = z.DecInferLen(yyl3512, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt3512 {
				if yyrl3512 <= cap(yyv3512) {
					yyv3512 = yyv3512[:yyrl3512]
				} else {
					yyv3512 = make([]Container, yyrl3512)
				}
			} else {
				yyv3512 = make([]Container, yyrl3512)
			}
			yyc3512 = true
			yyrr3512 = len(yyv3512)
			if yyrg3512 {
				copy(yyv3512, yyv23512)
			}
		} else if yyl3512 != len(yyv3512) {
			yyv3512 = yyv3512[:yyl3512]
			yyc3512 = true
		}
		yyj3512 := 0
		for ; yyj3512 < yyrr3512; yyj3512++ {
			yyh3512.ElemContainerState(yyj3512)
			if r.TryDecodeAsNil() {
				yyv3512[yyj3512] = Container{}
			} else {
				yyv3513 := &yyv3512[yyj3512]
				yyv3513.CodecDecodeSelf(d)
			}

		}
		if yyrt3512 {
			for ; yyj3512 < yyl3512; yyj3512++ {
				yyv3512 = append(yyv3512, Container{})
				yyh3512.ElemContainerState(yyj3512)
				if r.TryDecodeAsNil() {
					yyv3512[yyj3512] = Container{}
				} else {
					yyv3514 := &yyv3512[yyj3512]
					yyv3514.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3512 := 0
		for ; !r.CheckBreak(); yyj3512++ {

			if yyj3512 >= len(yyv3512) {
				yyv3512 = append(yyv3512, Container{}) // var yyz3512 Container
				yyc3512 = true
			}
			yyh3512.ElemContainerState(yyj3512)
			if yyj3512 < len(yyv3512) {
				if r.TryDecodeAsNil() {
					yyv3512[yyj3512] = Container{}
				} else {
					yyv3515 := &yyv3512[yyj3512]
					yyv3515.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3512 < len(yyv3512) {
			yyv3512 = yyv3512[:yyj3512]
			yyc3512 = true
		} else if yyj3512 == 0 && yyv3512 == nil {
			yyv3512 = []Container{}
			yyc3512 = true
		}
	}
	yyh3512.End()
	if yyc3512 {
		*v = yyv3512
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3516 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3517 := &yyv3516
		yy3517.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3518 := *v
	yyh3518, yyl3518 := z.DecSliceHelperStart()
	var yyc3518 bool
	if yyl3518 == 0 {
		if yyv3518 == nil {
			yyv3518 = []LocalObjectReference{}
			yyc3518 = true
		} else if len(yyv3518) != 0 {
			yyv3518 = yyv3518[:0]
			yyc3518 = true
		}
	} else if yyl3518 > 0 {
		var yyrr3518, yyrl3518 int
		var yyrt3518 bool
		if yyl3518 > cap(yyv3518) {

			yyrg3518 := len(yyv3518) > 0
			yyv23518 := yyv3518
			yyrl3518, yyrt3518 = z.DecInferLen(yyl3518, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3518 {
				if yyrl3518 <= cap(yyv3518) {
					yyv3518 = yyv3518[:yyrl3518]
				} else {
					yyv3518 = make([]LocalObjectReference, yyrl3518)
				}
			} else {
				yyv3518 = make([]LocalObjectReference, yyrl3518)
			}
			yyc3518 = true
			yyrr3518 = len(yyv3518)
			if yyrg3518 {
				copy(yyv3518, yyv23518)
			}
		} else if yyl3518 != len(yyv3518) {
			yyv3518 = yyv3518[:yyl3518]
			yyc3518 = true
		}
		yyj3518 := 0
		for ; yyj3518 < yyrr3518; yyj3518++ {
			yyh3518.ElemContainerState(yyj3518)
			if r.TryDecodeAsNil() {
				yyv3518[yyj3518] = LocalObjectReference{}
			} else {
				yyv3519 := &yyv3518[yyj3518]
				yyv3519.CodecDecodeSelf(d)
			}

		}
		if yyrt3518 {
			for ; yyj3518 < yyl3518; yyj3518++ {
				yyv3518 = append(yyv3518, LocalObjectReference{})
				yyh3518.ElemContainerState(yyj3518)
				if r.TryDecodeAsNil() {
					yyv3518[yyj3518] = LocalObjectReference{}
				} else {
					yyv3520 := &yyv3518[yyj3518]
					yyv3520.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3518 := 0
		for ; !r.CheckBreak(); yyj3518++ {

			if yyj3518 >= len(yyv3518) {
				yyv3518 = append(yyv3518, LocalObjectReference{}) // var yyz3518 LocalObjectReference
				yyc3518 = true
			}
			yyh3518.ElemContainerState(yyj3518)
			if yyj3518 < len(yyv3518) {
				if r.TryDecodeAsNil() {
					yyv3518[yyj3518] = LocalObjectReference{}
				} else {
					yyv3521 := &yyv3518[yyj3518]
					yyv3521.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3518 < len(yyv3518) {
			yyv3518 = yyv3518[:yyj3518]
			yyc3518 = true
		} else if yyj3518 == 0 && yyv3518 == nil {
			yyv3518 = []LocalObjectReference{}
			yyc3518 = true
		}
	}
	yyh3518.End()
	if yyc3518 {
		*v = yyv3518
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3522 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3523 := &yyv3522
		yy3523.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3524 := *v
	yyh3524, yyl3524 := z.DecSliceHelperStart()
	var yyc3524 bool
	if yyl3524 == 0 {
		if yyv3524 == nil {
			yyv3524 = []PodCondition{}
			yyc3524 = true
		} else if len(yyv3524) != 0 {
			yyv3524 = yyv3524[:0]
			yyc3524 = true
		}
	} else if yyl3524 > 0 {
		var yyrr3524, yyrl3524 int
		var yyrt3524 bool
		if yyl3524 > cap(yyv3524) {

			yyrg3524 := len(yyv3524) > 0
			yyv23524 := yyv3524
			yyrl3524, yyrt3524 = z.DecInferLen(yyl3524, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3524 {
				if yyrl3524 <= cap(yyv3524) {
					yyv3524 = yyv3524[:yyrl3524]
				} else {
					yyv3524 = make([]PodCondition, yyrl3524)
				}
			} else {
				yyv3524 = make([]PodCondition, yyrl3524)
			}
			yyc3524 = true
			yyrr3524 = len(yyv3524)
			if yyrg3524 {
				copy(yyv3524, yyv23524)
			}
		} else if yyl3524 != len(yyv3524) {
			yyv3524 = yyv3524[:yyl3524]
			yyc3524 = true
		}
		yyj3524 := 0
		for ; yyj3524 < yyrr3524; yyj3524++ {
			yyh3524.ElemContainerState(yyj3524)
			if r.TryDecodeAsNil() {
				yyv3524[yyj3524] = PodCondition{}
			} else {
				yyv3525 := &yyv3524[yyj3524]
				yyv3525.CodecDecodeSelf(d)
			}

		}
		if yyrt3524 {
			for ; yyj3524 < yyl3524; yyj3524++ {
				yyv3524 = append(yyv3524, PodCondition{})
				yyh3524.ElemContainerState(yyj3524)
				if r.TryDecodeAsNil() {
					yyv3524[yyj3524] = PodCondition{}
				} else {
					yyv3526 := &yyv3524[yyj3524]
					yyv3526.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3524 := 0
		for ; !r.CheckBreak(); yyj3524++ {

			if yyj3524 >= len(yyv3524) {
				yyv3524 = append(yyv3524, PodCondition{}) // var yyz3524 PodCondition
				yyc3524 = true
			}
			yyh3524.ElemContainerState(yyj3524)
			if yyj3524 < len(yyv3524) {
				if r.TryDecodeAsNil() {
					yyv3524[yyj3524] = PodCondition{}
				} else {
					yyv3527 := &yyv3524[yyj3524]
					yyv3527.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3524 < len(yyv3524) {
			yyv3524 = yyv3524[:yyj3524]
			yyc3524 = true
		} else if yyj3524 == 0 && yyv3524 == nil {
			yyv3524 = []PodCondition{}
			yyc3524 = true
		}
	}
	yyh3524.End()
	if yyc3524 {
		*v = yyv3524
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3528 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3529 := &yyv3528
		yy3529.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3530 := *v
	yyh3530, yyl3530 := z.DecSliceHelperStart()
	var yyc3530 bool
	if yyl3530 == 0 {
		if yyv3530 == nil {
			yyv3530 = []ContainerStatus{}
			yyc3530 = true
		} else if len(yyv3530) != 0 {
			yyv3530 = yyv3530[:0]
			yyc3530 = true
		}
	} else if yyl3530 > 0 {
		var yyrr3530, yyrl3530 int
		var yyrt3530 bool
		if yyl3530 > cap(yyv3530) {

			yyrg3530 := len(yyv3530) > 0
			yyv23530 := yyv3530
			yyrl3530, yyrt3530 = z.DecInferLen(yyl3530, z.DecBasicHandle().MaxInitLen, 128)
			if yyrt3530 {
				if yyrl3530 <= cap(yyv3530) {
					yyv3530 = yyv3530[:yyrl3530]
				} else {
					yyv3530 = make([]ContainerStatus, yyrl3530)
				}
			} else {
				yyv3530 = make([]ContainerStatus, yyrl3530)
			}
			yyc3530 = true
			yyrr3530 = len(yyv3530)
			if yyrg3530 {
				copy(yyv3530, yyv23530)
			}
		} else if yyl3530 != len(yyv3530) {
			yyv3530 = yyv3530[:yyl3530]
			yyc3530 = true
		}
		yyj3530 := 0
		for ; yyj3530 < yyrr3530; yyj3530++ {
			yyh3530.ElemContainerState(yyj3530)
			if r.TryDecodeAsNil() {
				yyv3530[yyj3530] = ContainerStatus{}
			} else {
				yyv3531 := &yyv3530[yyj3530]
				yyv3531.CodecDecodeSelf(d)
			}

		}
		if yyrt3530 {
			for ; yyj3530 < yyl3530; yyj3530++ {
				yyv3530 = append(yyv3530, ContainerStatus{})
				yyh3530.ElemContainerState(yyj3530)
				if r.TryDecodeAsNil() {
					yyv3530[yyj3530] = ContainerStatus{}
				} else {
					yyv3532 := &yyv3530[yyj3530]
					yyv3532.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3530 := 0
		for ; !r.CheckBreak(); yyj3530++ {

			if yyj3530 >= len(yyv3530) {
				yyv3530 = append(yyv3530, ContainerStatus{}) // var yyz3530 ContainerStatus
				yyc3530 = true
			}
			yyh3530.ElemContainerState(yyj3530)
			if yyj3530 < len(yyv3530) {
				if r.TryDecodeAsNil() {
					yyv3530[yyj3530] = ContainerStatus{}
				} else {
					yyv3533 := &yyv3530[yyj3530]
					yyv3533.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3530 < len(yyv3530) {
			yyv3530 = yyv3530[:yyj3530]
			yyc3530 = true
		} else if yyj3530 == 0 && yyv3530 == nil {
			yyv3530 = []ContainerStatus{}
			yyc3530 = true
		}
	}
	yyh3530.End()
	if yyc3530 {
		*v = yyv3530
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3534 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3535 := &yyv3534
		yy3535.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3536 := *v
	yyh3536, yyl3536 := z.DecSliceHelperStart()
	var yyc3536 bool
	if yyl3536 == 0 {
		if yyv3536 == nil {
			yyv3536 = []PodTemplate{}
			yyc3536 = true
		} else if len(yyv3536) != 0 {
			yyv3536 = yyv3536[:0]
			yyc3536 = true
		}
	} else if yyl3536 > 0 {
		var yyrr3536, yyrl3536 int
		var yyrt3536 bool
		if yyl3536 > cap(yyv3536) {

			yyrg3536 := len(yyv3536) > 0
			yyv23536 := yyv3536
			yyrl3536, yyrt3536 = z.DecInferLen(yyl3536, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt3536 {
				if yyrl3536 <= cap(yyv3536) {
					yyv3536 = yyv3536[:yyrl3536]
				} else {
					yyv3536 = make([]PodTemplate, yyrl3536)
				}
			} else {
				yyv3536 = make([]PodTemplate, yyrl3536)
			}
			yyc3536 = true
			yyrr3536 = len(yyv3536)
			if yyrg3536 {
				copy(yyv3536, yyv23536)
			}
		} else if yyl3536 != len(yyv3536) {
			yyv3536 = yyv3536[:yyl3536]
			yyc3536 = true
		}
		yyj3536 := 0
		for ; yyj3536 < yyrr3536; yyj3536++ {
			yyh3536.ElemContainerState(yyj3536)
			if r.TryDecodeAsNil() {
				yyv3536[yyj3536] = PodTemplate{}
			} else {
				yyv3537 := &yyv3536[yyj3536]
				yyv3537.CodecDecodeSelf(d)
			}

		}
		if yyrt3536 {
			for ; yyj3536 < yyl3536; yyj3536++ {
				yyv3536 = append(yyv3536, PodTemplate{})
				yyh3536.ElemContainerState(yyj3536)
				if r.TryDecodeAsNil() {
					yyv3536[yyj3536] = PodTemplate{}
				} else {
					yyv3538 := &yyv3536[yyj3536]
					yyv3538.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3536 := 0
		for ; !r.CheckBreak(); yyj3536++ {

			if yyj3536 >= len(yyv3536) {
				yyv3536 = append(yyv3536, PodTemplate{}) // var yyz3536 PodTemplate
				yyc3536 = true
			}
			yyh3536.ElemContainerState(yyj3536)
			if yyj3536 < len(yyv3536) {
				if r.TryDecodeAsNil() {
					yyv3536[yyj3536] = PodTemplate{}
				} else {
					yyv3539 := &yyv3536[yyj3536]
					yyv3539.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3536 < len(yyv3536) {
			yyv3536 = yyv3536[:yyj3536]
			yyc3536 = true
		} else if yyj3536 == 0 && yyv3536 == nil {
			yyv3536 = []PodTemplate{}
			yyc3536 = true
		}
	}
	yyh3536.End()
	if yyc3536 {
		*v = yyv3536
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3540 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3541 := &yyv3540
		yy3541.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3542 := *v
	yyh3542, yyl3542 := z.DecSliceHelperStart()
	var yyc3542 bool
	if yyl3542 == 0 {
		if yyv3542 == nil {
			yyv3542 = []ReplicationController{}
			yyc3542 = true
		} else if len(yyv3542) != 0 {
			yyv3542 = yyv3542[:0]
			yyc3542 = true
		}
	} else if yyl3542 > 0 {
		var yyrr3542, yyrl3542 int
		var yyrt3542 bool
		if yyl3542 > cap(yyv3542) {

			yyrg3542 := len(yyv3542) > 0
			yyv23542 := yyv3542
			yyrl3542, yyrt3542 = z.DecInferLen(yyl3542, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3542 {
				if yyrl3542 <= cap(yyv3542) {
					yyv3542 = yyv3542[:yyrl3542]
				} else {
					yyv3542 = make([]ReplicationController, yyrl3542)
				}
			} else {
				yyv3542 = make([]ReplicationController, yyrl3542)
			}
			yyc3542 = true
			yyrr3542 = len(yyv3542)
			if yyrg3542 {
				copy(yyv3542, yyv23542)
			}
		} else if yyl3542 != len(yyv3542) {
			yyv3542 = yyv3542[:yyl3542]
			yyc3542 = true
		}
		yyj3542 := 0
		for ; yyj3542 < yyrr3542; yyj3542++ {
			yyh3542.ElemContainerState(yyj3542)
			if r.TryDecodeAsNil() {
				yyv3542[yyj3542] = ReplicationController{}
			} else {
				yyv3543 := &yyv3542[yyj3542]
				yyv3543.CodecDecodeSelf(d)
			}

		}
		if yyrt3542 {
			for ; yyj3542 < yyl3542; yyj3542++ {
				yyv3542 = append(yyv3542, ReplicationController{})
				yyh3542.ElemContainerState(yyj3542)
				if r.TryDecodeAsNil() {
					yyv3542[yyj3542] = ReplicationController{}
				} else {
					yyv3544 := &yyv3542[yyj3542]
					yyv3544.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3542 := 0
		for ; !r.CheckBreak(); yyj3542++ {

			if yyj3542 >= len(yyv3542) {
				yyv3542 = append(yyv3542, ReplicationController{}) // var yyz3542 ReplicationController
				yyc3542 = true
			}
			yyh3542.ElemContainerState(yyj3542)
			if yyj3542 < len(yyv3542) {
				if r.TryDecodeAsNil() {
					yyv3542[yyj3542] = ReplicationController{}
				} else {
					yyv3545 := &yyv3542[yyj3542]
					yyv3545.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3542 < len(yyv3542) {
			yyv3542 = yyv3542[:yyj3542]
			yyc3542 = true
		} else if yyj3542 == 0 && yyv3542 == nil {
			yyv3542 = []ReplicationController{}
			yyc3542 = true
		}
	}
	yyh3542.End()
	if yyc3542 {
		*v = yyv3542
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3546 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3547 := &yyv3546
		yy3547.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3548 := *v
	yyh3548, yyl3548 := z.DecSliceHelperStart()
	var yyc3548 bool
	if yyl3548 == 0 {
		if yyv3548 == nil {
			yyv3548 = []Service{}
			yyc3548 = true
		} else if len(yyv3548) != 0 {
			yyv3548 = yyv3548[:0]
			yyc3548 = true
		}
	} else if yyl3548 > 0 {
		var yyrr3548, yyrl3548 int
		var yyrt3548 bool
		if yyl3548 > cap(yyv3548) {

			yyrg3548 := len(yyv3548) > 0
			yyv23548 := yyv3548
			yyrl3548, yyrt3548 = z.DecInferLen(yyl3548, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt3548 {
				if yyrl3548 <= cap(yyv3548) {
					yyv3548 = yyv3548[:yyrl3548]
				} else {
					yyv3548 = make([]Service, yyrl3548)
				}
			} else {
				yyv3548 = make([]Service, yyrl3548)
			}
			yyc3548 = true
			yyrr3548 = len(yyv3548)
			if yyrg3548 {
				copy(yyv3548, yyv23548)
			}
		} else if yyl3548 != len(yyv3548) {
			yyv3548 = yyv3548[:yyl3548]
			yyc3548 = true
		}
		yyj3548 := 0
		for ; yyj3548 < yyrr3548; yyj3548++ {
			yyh3548.ElemContainerState(yyj3548)
			if r.TryDecodeAsNil() {
				yyv3548[yyj3548] = Service{}
			} else {
				yyv3549 := &yyv3548[yyj3548]
				yyv3549.CodecDecodeSelf(d)
			}

		}
		if yyrt3548 {
			for ; yyj3548 < yyl3548; yyj3548++ {
				yyv3548 = append(yyv3548, Service{})
				yyh3548.ElemContainerState(yyj3548)
				if r.TryDecodeAsNil() {
					yyv3548[yyj3548] = Service{}
				} else {
					yyv3550 := &yyv3548[yyj3548]
					yyv3550.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3548 := 0
		for ; !r.CheckBreak(); yyj3548++ {

			if yyj3548 >= len(yyv3548) {
				yyv3548 = append(yyv3548, Service{}) // var yyz3548 Service
				yyc3548 = true
			}
			yyh3548.ElemContainerState(yyj3548)
			if yyj3548 < len(yyv3548) {
				if r.TryDecodeAsNil() {
					yyv3548[yyj3548] = Service{}
				} else {
					yyv3551 := &yyv3548[yyj3548]
					yyv3551.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3548 < len(yyv3548) {
			yyv3548 = yyv3548[:yyj3548]
			yyc3548 = true
		} else if yyj3548 == 0 && yyv3548 == nil {
			yyv3548 = []Service{}
			yyc3548 = true
		}
	}
	yyh3548.End()
	if yyc3548 {
		*v = yyv3548
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3552 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3553 := &yyv3552
		yy3553.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3554 := *v
	yyh3554, yyl3554 := z.DecSliceHelperStart()
	var yyc3554 bool
	if yyl3554 == 0 {
		if yyv3554 == nil {
			yyv3554 = []LoadBalancerIngress{}
			yyc3554 = true
		} else if len(yyv3554) != 0 {
			yyv3554 = yyv3554[:0]
			yyc3554 = true
		}
	} else if yyl3554 > 0 {
		var yyrr3554, yyrl3554 int
		var yyrt3554 bool
		if yyl3554 > cap(yyv3554) {

			yyrg3554 := len(yyv3554) > 0
			yyv23554 := yyv3554
			yyrl3554, yyrt3554 = z.DecInferLen(yyl3554, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3554 {
				if yyrl3554 <= cap(yyv3554) {
					yyv3554 = yyv3554[:yyrl3554]
				} else {
					yyv3554 = make([]LoadBalancerIngress, yyrl3554)
				}
			} else {
				yyv3554 = make([]LoadBalancerIngress, yyrl3554)
			}
			yyc3554 = true
			yyrr3554 = len(yyv3554)
			if yyrg3554 {
				copy(yyv3554, yyv23554)
			}
		} else if yyl3554 != len(yyv3554) {
			yyv3554 = yyv3554[:yyl3554]
			yyc3554 = true
		}
		yyj3554 := 0
		for ; yyj3554 < yyrr3554; yyj3554++ {
			yyh3554.ElemContainerState(yyj3554)
			if r.TryDecodeAsNil() {
				yyv3554[yyj3554] = LoadBalancerIngress{}
			} else {
				yyv3555 := &yyv3554[yyj3554]
				yyv3555.CodecDecodeSelf(d)
			}

		}
		if yyrt3554 {
			for ; yyj3554 < yyl3554; yyj3554++ {
				yyv3554 = append(yyv3554, LoadBalancerIngress{})
				yyh3554.ElemContainerState(yyj3554)
				if r.TryDecodeAsNil() {
					yyv3554[yyj3554] = LoadBalancerIngress{}
				} else {
					yyv3556 := &yyv3554[yyj3554]
					yyv3556.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3554 := 0
		for ; !r.CheckBreak(); yyj3554++ {

			if yyj3554 >= len(yyv3554) {
				yyv3554 = append(yyv3554, LoadBalancerIngress{}) // var yyz3554 LoadBalancerIngress
				yyc3554 = true
			}
			yyh3554.ElemContainerState(yyj3554)
			if yyj3554 < len(yyv3554) {
				if r.TryDecodeAsNil() {
					yyv3554[yyj3554] = LoadBalancerIngress{}
				} else {
					yyv3557 := &yyv3554[yyj3554]
					yyv3557.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3554 < len(yyv3554) {
			yyv3554 = yyv3554[:yyj3554]
			yyc3554 = true
		} else if yyj3554 == 0 && yyv3554 == nil {
			yyv3554 = []LoadBalancerIngress{}
			yyc3554 = true
		}
	}
	yyh3554.End()
	if yyc3554 {
		*v = yyv3554
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3558 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3559 := &yyv3558
		yy3559.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3560 := *v
	yyh3560, yyl3560 := z.DecSliceHelperStart()
	var yyc3560 bool
	if yyl3560 == 0 {
		if yyv3560 == nil {
			yyv3560 = []ServicePort{}
			yyc3560 = true
		} else if len(yyv3560) != 0 {
			yyv3560 = yyv3560[:0]
			yyc3560 = true
		}
	} else if yyl3560 > 0 {
		var yyrr3560, yyrl3560 int
		var yyrt3560 bool
		if yyl3560 > cap(yyv3560) {

			yyrg3560 := len(yyv3560) > 0
			yyv23560 := yyv3560
			yyrl3560, yyrt3560 = z.DecInferLen(yyl3560, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3560 {
				if yyrl3560 <= cap(yyv3560) {
					yyv3560 = yyv3560[:yyrl3560]
				} else {
					yyv3560 = make([]ServicePort, yyrl3560)
				}
			} else {
				yyv3560 = make([]ServicePort, yyrl3560)
			}
			yyc3560 = true
			yyrr3560 = len(yyv3560)
			if yyrg3560 {
				copy(yyv3560, yyv23560)
			}
		} else if yyl3560 != len(yyv3560) {
			yyv3560 = yyv3560[:yyl3560]
			yyc3560 = true
		}
		yyj3560 := 0
		for ; yyj3560 < yyrr3560; yyj3560++ {
			yyh3560.ElemContainerState(yyj3560)
			if r.TryDecodeAsNil() {
				yyv3560[yyj3560] = ServicePort{}
			} else {
				yyv3561 := &yyv3560[yyj3560]
				yyv3561.CodecDecodeSelf(d)
			}

		}
		if yyrt3560 {
			for ; yyj3560 < yyl3560; yyj3560++ {
				yyv3560 = append(yyv3560, ServicePort{})
				yyh3560.ElemContainerState(yyj3560)
				if r.TryDecodeAsNil() {
					yyv3560[yyj3560] = ServicePort{}
				} else {
					yyv3562 := &yyv3560[yyj3560]
					yyv3562.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3560 := 0
		for ; !r.CheckBreak(); yyj3560++ {

			if yyj3560 >= len(yyv3560) {
				yyv3560 = append(yyv3560, ServicePort{}) // var yyz3560 ServicePort
				yyc3560 = true
			}
			yyh3560.ElemContainerState(yyj3560)
			if yyj3560 < len(yyv3560) {
				if r.TryDecodeAsNil() {
					yyv3560[yyj3560] = ServicePort{}
				} else {
					yyv3563 := &yyv3560[yyj3560]
					yyv3563.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3560 < len(yyv3560) {
			yyv3560 = yyv3560[:yyj3560]
			yyc3560 = true
		} else if yyj3560 == 0 && yyv3560 == nil {
			yyv3560 = []ServicePort{}
			yyc3560 = true
		}
	}
	yyh3560.End()
	if yyc3560 {
		*v = yyv3560
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3564 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3565 := &yyv3564
		yy3565.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3566 := *v
	yyh3566, yyl3566 := z.DecSliceHelperStart()
	var yyc3566 bool
	if yyl3566 == 0 {
		if yyv3566 == nil {
			yyv3566 = []ObjectReference{}
			yyc3566 = true
		} else if len(yyv3566) != 0 {
			yyv3566 = yyv3566[:0]
			yyc3566 = true
		}
	} else if yyl3566 > 0 {
		var yyrr3566, yyrl3566 int
		var yyrt3566 bool
		if yyl3566 > cap(yyv3566) {

			yyrg3566 := len(yyv3566) > 0
			yyv23566 := yyv3566
			yyrl3566, yyrt3566 = z.DecInferLen(yyl3566, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3566 {
				if yyrl3566 <= cap(yyv3566) {
					yyv3566 = yyv3566[:yyrl3566]
				} else {
					yyv3566 = make([]ObjectReference, yyrl3566)
				}
			} else {
				yyv3566 = make([]ObjectReference, yyrl3566)
			}
			yyc3566 = true
			yyrr3566 = len(yyv3566)
			if yyrg3566 {
				copy(yyv3566, yyv23566)
			}
		} else if yyl3566 != len(yyv3566) {
			yyv3566 = yyv3566[:yyl3566]
			yyc3566 = true
		}
		yyj3566 := 0
		for ; yyj3566 < yyrr3566; yyj3566++ {
			yyh3566.ElemContainerState(yyj3566)
			if r.TryDecodeAsNil() {
				yyv3566[yyj3566] = ObjectReference{}
			} else {
				yyv3567 := &yyv3566[yyj3566]
				yyv3567.CodecDecodeSelf(d)
			}

		}
		if yyrt3566 {
			for ; yyj3566 < yyl3566; yyj3566++ {
				yyv3566 = append(yyv3566, ObjectReference{})
				yyh3566.ElemContainerState(yyj3566)
				if r.TryDecodeAsNil() {
					yyv3566[yyj3566] = ObjectReference{}
				} else {
					yyv3568 := &yyv3566[yyj3566]
					yyv3568.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3566 := 0
		for ; !r.CheckBreak(); yyj3566++ {

			if yyj3566 >= len(yyv3566) {
				yyv3566 = append(yyv3566, ObjectReference{}) // var yyz3566 ObjectReference
				yyc3566 = true
			}
			yyh3566.ElemContainerState(yyj3566)
			if yyj3566 < len(yyv3566) {
				if r.TryDecodeAsNil() {
					yyv3566[yyj3566] = ObjectReference{}
				} else {
					yyv3569 := &yyv3566[yyj3566]
					yyv3569.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3566 < len(yyv3566) {
			yyv3566 = yyv3566[:yyj3566]
			yyc3566 = true
		} else if yyj3566 == 0 && yyv3566 == nil {
			yyv3566 = []ObjectReference{}
			yyc3566 = true
		}
	}
	yyh3566.End()
	if yyc3566 {
		*v = yyv3566
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3570 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3571 := &yyv3570
		yy3571.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3572 := *v
	yyh3572, yyl3572 := z.DecSliceHelperStart()
	var yyc3572 bool
	if yyl3572 == 0 {
		if yyv3572 == nil {
			yyv3572 = []ServiceAccount{}
			yyc3572 = true
		} else if len(yyv3572) != 0 {
			yyv3572 = yyv3572[:0]
			yyc3572 = true
		}
	} else if yyl3572 > 0 {
		var yyrr3572, yyrl3572 int
		var yyrt3572 bool
		if yyl3572 > cap(yyv3572) {

			yyrg3572 := len(yyv3572) > 0
			yyv23572 := yyv3572
			yyrl3572, yyrt3572 = z.DecInferLen(yyl3572, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt3572 {
				if yyrl3572 <= cap(yyv3572) {
					yyv3572 = yyv3572[:yyrl3572]
				} else {
					yyv3572 = make([]ServiceAccount, yyrl3572)
				}
			} else {
				yyv3572 = make([]ServiceAccount, yyrl3572)
			}
			yyc3572 = true
			yyrr3572 = len(yyv3572)
			if yyrg3572 {
				copy(yyv3572, yyv23572)
			}
		} else if yyl3572 != len(yyv3572) {
			yyv3572 = yyv3572[:yyl3572]
			yyc3572 = true
		}
		yyj3572 := 0
		for ; yyj3572 < yyrr3572; yyj3572++ {
			yyh3572.ElemContainerState(yyj3572)
			if r.TryDecodeAsNil() {
				yyv3572[yyj3572] = ServiceAccount{}
			} else {
				yyv3573 := &yyv3572[yyj3572]
				yyv3573.CodecDecodeSelf(d)
			}

		}
		if yyrt3572 {
			for ; yyj3572 < yyl3572; yyj3572++ {
				yyv3572 = append(yyv3572, ServiceAccount{})
				yyh3572.ElemContainerState(yyj3572)
				if r.TryDecodeAsNil() {
					yyv3572[yyj3572] = ServiceAccount{}
				} else {
					yyv3574 := &yyv3572[yyj3572]
					yyv3574.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3572 := 0
		for ; !r.CheckBreak(); yyj3572++ {

			if yyj3572 >= len(yyv3572) {
				yyv3572 = append(yyv3572, ServiceAccount{}) // var yyz3572 ServiceAccount
				yyc3572 = true
			}
			yyh3572.ElemContainerState(yyj3572)
			if yyj3572 < len(yyv3572) {
				if r.TryDecodeAsNil() {
					yyv3572[yyj3572] = ServiceAccount{}
				} else {
					yyv3575 := &yyv3572[yyj3572]
					yyv3575.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3572 < len(yyv3572) {
			yyv3572 = yyv3572[:yyj3572]
			yyc3572 = true
		} else if yyj3572 == 0 && yyv3572 == nil {
			yyv3572 = []ServiceAccount{}
			yyc3572 = true
		}
	}
	yyh3572.End()
	if yyc3572 {
		*v = yyv3572
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3576 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3577 := &yyv3576
		yy3577.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3578 := *v
	yyh3578, yyl3578 := z.DecSliceHelperStart()
	var yyc3578 bool
	if yyl3578 == 0 {
		if yyv3578 == nil {
			yyv3578 = []EndpointSubset{}
			yyc3578 = true
		} else if len(yyv3578) != 0 {
			yyv3578 = yyv3578[:0]
			yyc3578 = true
		}
	} else if yyl3578 > 0 {
		var yyrr3578, yyrl3578 int
		var yyrt3578 bool
		if yyl3578 > cap(yyv3578) {

			yyrg3578 := len(yyv3578) > 0
			yyv23578 := yyv3578
			yyrl3578, yyrt3578 = z.DecInferLen(yyl3578, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt3578 {
				if yyrl3578 <= cap(yyv3578) {
					yyv3578 = yyv3578[:yyrl3578]
				} else {
					yyv3578 = make([]EndpointSubset, yyrl3578)
				}
			} else {
				yyv3578 = make([]EndpointSubset, yyrl3578)
			}
			yyc3578 = true
			yyrr3578 = len(yyv3578)
			if yyrg3578 {
				copy(yyv3578, yyv23578)
			}
		} else if yyl3578 != len(yyv3578) {
			yyv3578 = yyv3578[:yyl3578]
			yyc3578 = true
		}
		yyj3578 := 0
		for ; yyj3578 < yyrr3578; yyj3578++ {
			yyh3578.ElemContainerState(yyj3578)
			if r.TryDecodeAsNil() {
				yyv3578[yyj3578] = EndpointSubset{}
			} else {
				yyv3579 := &yyv3578[yyj3578]
				yyv3579.CodecDecodeSelf(d)
			}

		}
		if yyrt3578 {
			for ; yyj3578 < yyl3578; yyj3578++ {
				yyv3578 = append(yyv3578, EndpointSubset{})
				yyh3578.ElemContainerState(yyj3578)
				if r.TryDecodeAsNil() {
					yyv3578[yyj3578] = EndpointSubset{}
				} else {
					yyv3580 := &yyv3578[yyj3578]
					yyv3580.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3578 := 0
		for ; !r.CheckBreak(); yyj3578++ {

			if yyj3578 >= len(yyv3578) {
				yyv3578 = append(yyv3578, EndpointSubset{}) // var yyz3578 EndpointSubset
				yyc3578 = true
			}
			yyh3578.ElemContainerState(yyj3578)
			if yyj3578 < len(yyv3578) {
				if r.TryDecodeAsNil() {
					yyv3578[yyj3578] = EndpointSubset{}
				} else {
					yyv3581 := &yyv3578[yyj3578]
					yyv3581.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3578 < len(yyv3578) {
			yyv3578 = yyv3578[:yyj3578]
			yyc3578 = true
		} else if yyj3578 == 0 && yyv3578 == nil {
			yyv3578 = []EndpointSubset{}
			yyc3578 = true
		}
	}
	yyh3578.End()
	if yyc3578 {
		*v = yyv3578
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3582 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3583 := &yyv3582
		yy3583.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3584 := *v
	yyh3584, yyl3584 := z.DecSliceHelperStart()
	var yyc3584 bool
	if yyl3584 == 0 {
		if yyv3584 == nil {
			yyv3584 = []EndpointAddress{}
			yyc3584 = true
		} else if len(yyv3584) != 0 {
			yyv3584 = yyv3584[:0]
			yyc3584 = true
		}
	} else if yyl3584 > 0 {
		var yyrr3584, yyrl3584 int
		var yyrt3584 bool
		if yyl3584 > cap(yyv3584) {

			yyrg3584 := len(yyv3584) > 0
			yyv23584 := yyv3584
			yyrl3584, yyrt3584 = z.DecInferLen(yyl3584, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3584 {
				if yyrl3584 <= cap(yyv3584) {
					yyv3584 = yyv3584[:yyrl3584]
				} else {
					yyv3584 = make([]EndpointAddress, yyrl3584)
				}
			} else {
				yyv3584 = make([]EndpointAddress, yyrl3584)
			}
			yyc3584 = true
			yyrr3584 = len(yyv3584)
			if yyrg3584 {
				copy(yyv3584, yyv23584)
			}
		} else if yyl3584 != len(yyv3584) {
			yyv3584 = yyv3584[:yyl3584]
			yyc3584 = true
		}
		yyj3584 := 0
		for ; yyj3584 < yyrr3584; yyj3584++ {
			yyh3584.ElemContainerState(yyj3584)
			if r.TryDecodeAsNil() {
				yyv3584[yyj3584] = EndpointAddress{}
			} else {
				yyv3585 := &yyv3584[yyj3584]
				yyv3585.CodecDecodeSelf(d)
			}

		}
		if yyrt3584 {
			for ; yyj3584 < yyl3584; yyj3584++ {
				yyv3584 = append(yyv3584, EndpointAddress{})
				yyh3584.ElemContainerState(yyj3584)
				if r.TryDecodeAsNil() {
					yyv3584[yyj3584] = EndpointAddress{}
				} else {
					yyv3586 := &yyv3584[yyj3584]
					yyv3586.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3584 := 0
		for ; !r.CheckBreak(); yyj3584++ {

			if yyj3584 >= len(yyv3584) {
				yyv3584 = append(yyv3584, EndpointAddress{}) // var yyz3584 EndpointAddress
				yyc3584 = true
			}
			yyh3584.ElemContainerState(yyj3584)
			if yyj3584 < len(yyv3584) {
				if r.TryDecodeAsNil() {
					yyv3584[yyj3584] = EndpointAddress{}
				} else {
					yyv3587 := &yyv3584[yyj3584]
					yyv3587.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3584 < len(yyv3584) {
			yyv3584 = yyv3584[:yyj3584]
			yyc3584 = true
		} else if yyj3584 == 0 && yyv3584 == nil {
			yyv3584 = []EndpointAddress{}
			yyc3584 = true
		}
	}
	yyh3584.End()
	if yyc3584 {
		*v = yyv3584
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3588 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3589 := &yyv3588
		yy3589.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3590 := *v
	yyh3590, yyl3590 := z.DecSliceHelperStart()
	var yyc3590 bool
	if yyl3590 == 0 {
		if yyv3590 == nil {
			yyv3590 = []EndpointPort{}
			yyc3590 = true
		} else if len(yyv3590) != 0 {
			yyv3590 = yyv3590[:0]
			yyc3590 = true
		}
	} else if yyl3590 > 0 {
		var yyrr3590, yyrl3590 int
		var yyrt3590 bool
		if yyl3590 > cap(yyv3590) {

			yyrg3590 := len(yyv3590) > 0
			yyv23590 := yyv3590
			yyrl3590, yyrt3590 = z.DecInferLen(yyl3590, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3590 {
				if yyrl3590 <= cap(yyv3590) {
					yyv3590 = yyv3590[:yyrl3590]
				} else {
					yyv3590 = make([]EndpointPort, yyrl3590)
				}
			} else {
				yyv3590 = make([]EndpointPort, yyrl3590)
			}
			yyc3590 = true
			yyrr3590 = len(yyv3590)
			if yyrg3590 {
				copy(yyv3590, yyv23590)
			}
		} else if yyl3590 != len(yyv3590) {
			yyv3590 = yyv3590[:yyl3590]
			yyc3590 = true
		}
		yyj3590 := 0
		for ; yyj3590 < yyrr3590; yyj3590++ {
			yyh3590.ElemContainerState(yyj3590)
			if r.TryDecodeAsNil() {
				yyv3590[yyj3590] = EndpointPort{}
			} else {
				yyv3591 := &yyv3590[yyj3590]
				yyv3591.CodecDecodeSelf(d)
			}

		}
		if yyrt3590 {
			for ; yyj3590 < yyl3590; yyj3590++ {
				yyv3590 = append(yyv3590, EndpointPort{})
				yyh3590.ElemContainerState(yyj3590)
				if r.TryDecodeAsNil() {
					yyv3590[yyj3590] = EndpointPort{}
				} else {
					yyv3592 := &yyv3590[yyj3590]
					yyv3592.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3590 := 0
		for ; !r.CheckBreak(); yyj3590++ {

			if yyj3590 >= len(yyv3590) {
				yyv3590 = append(yyv3590, EndpointPort{}) // var yyz3590 EndpointPort
				yyc3590 = true
			}
			yyh3590.ElemContainerState(yyj3590)
			if yyj3590 < len(yyv3590) {
				if r.TryDecodeAsNil() {
					yyv3590[yyj3590] = EndpointPort{}
				} else {
					yyv3593 := &yyv3590[yyj3590]
					yyv3593.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3590 < len(yyv3590) {
			yyv3590 = yyv3590[:yyj3590]
			yyc3590 = true
		} else if yyj3590 == 0 && yyv3590 == nil {
			yyv3590 = []EndpointPort{}
			yyc3590 = true
		}
	}
	yyh3590.End()
	if yyc3590 {
		*v = yyv3590
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3594 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3595 := &yyv3594
		yy3595.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3596 := *v
	yyh3596, yyl3596 := z.DecSliceHelperStart()
	var yyc3596 bool
	if yyl3596 == 0 {
		if yyv3596 == nil {
			yyv3596 = []Endpoints{}
			yyc3596 = true
		} else if len(yyv3596) != 0 {
			yyv3596 = yyv3596[:0]
			yyc3596 = true
		}
	} else if yyl3596 > 0 {
		var yyrr3596, yyrl3596 int
		var yyrt3596 bool
		if yyl3596 > cap(yyv3596) {

			yyrg3596 := len(yyv3596) > 0
			yyv23596 := yyv3596
			yyrl3596, yyrt3596 = z.DecInferLen(yyl3596, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3596 {
				if yyrl3596 <= cap(yyv3596) {
					yyv3596 = yyv3596[:yyrl3596]
				} else {
					yyv3596 = make([]Endpoints, yyrl3596)
				}
			} else {
				yyv3596 = make([]Endpoints, yyrl3596)
			}
			yyc3596 = true
			yyrr3596 = len(yyv3596)
			if yyrg3596 {
				copy(yyv3596, yyv23596)
			}
		} else if yyl3596 != len(yyv3596) {
			yyv3596 = yyv3596[:yyl3596]
			yyc3596 = true
		}
		yyj3596 := 0
		for ; yyj3596 < yyrr3596; yyj3596++ {
			yyh3596.ElemContainerState(yyj3596)
			if r.TryDecodeAsNil() {
				yyv3596[yyj3596] = Endpoints{}
			} else {
				yyv3597 := &yyv3596[yyj3596]
				yyv3597.CodecDecodeSelf(d)
			}

		}
		if yyrt3596 {
			for ; yyj3596 < yyl3596; yyj3596++ {
				yyv3596 = append(yyv3596, Endpoints{})
				yyh3596.ElemContainerState(yyj3596)
				if r.TryDecodeAsNil() {
					yyv3596[yyj3596] = Endpoints{}
				} else {
					yyv3598 := &yyv3596[yyj3596]
					yyv3598.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3596 := 0
		for ; !r.CheckBreak(); yyj3596++ {

			if yyj3596 >= len(yyv3596) {
				yyv3596 = append(yyv3596, Endpoints{}) // var yyz3596 Endpoints
				yyc3596 = true
			}
			yyh3596.ElemContainerState(yyj3596)
			if yyj3596 < len(yyv3596) {
				if r.TryDecodeAsNil() {
					yyv3596[yyj3596] = Endpoints{}
				} else {
					yyv3599 := &yyv3596[yyj3596]
					yyv3599.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3596 < len(yyv3596) {
			yyv3596 = yyv3596[:yyj3596]
			yyc3596 = true
		} else if yyj3596 == 0 && yyv3596 == nil {
			yyv3596 = []Endpoints{}
			yyc3596 = true
		}
	}
	yyh3596.End()
	if yyc3596 {
		*v = yyv3596
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3600 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3601 := &yyv3600
		yy3601.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3602 := *v
	yyh3602, yyl3602 := z.DecSliceHelperStart()
	var yyc3602 bool
	if yyl3602 == 0 {
		if yyv3602 == nil {
			yyv3602 = []NodeCondition{}
			yyc3602 = true
		} else if len(yyv3602) != 0 {
			yyv3602 = yyv3602[:0]
			yyc3602 = true
		}
	} else if yyl3602 > 0 {
		var yyrr3602, yyrl3602 int
		var yyrt3602 bool
		if yyl3602 > cap(yyv3602) {

			yyrg3602 := len(yyv3602) > 0
			yyv23602 := yyv3602
			yyrl3602, yyrt3602 = z.DecInferLen(yyl3602, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3602 {
				if yyrl3602 <= cap(yyv3602) {
					yyv3602 = yyv3602[:yyrl3602]
				} else {
					yyv3602 = make([]NodeCondition, yyrl3602)
				}
			} else {
				yyv3602 = make([]NodeCondition, yyrl3602)
			}
			yyc3602 = true
			yyrr3602 = len(yyv3602)
			if yyrg3602 {
				copy(yyv3602, yyv23602)
			}
		} else if yyl3602 != len(yyv3602) {
			yyv3602 = yyv3602[:yyl3602]
			yyc3602 = true
		}
		yyj3602 := 0
		for ; yyj3602 < yyrr3602; yyj3602++ {
			yyh3602.ElemContainerState(yyj3602)
			if r.TryDecodeAsNil() {
				yyv3602[yyj3602] = NodeCondition{}
			} else {
				yyv3603 := &yyv3602[yyj3602]
				yyv3603.CodecDecodeSelf(d)
			}

		}
		if yyrt3602 {
			for ; yyj3602 < yyl3602; yyj3602++ {
				yyv3602 = append(yyv3602, NodeCondition{})
				yyh3602.ElemContainerState(yyj3602)
				if r.TryDecodeAsNil() {
					yyv3602[yyj3602] = NodeCondition{}
				} else {
					yyv3604 := &yyv3602[yyj3602]
					yyv3604.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3602 := 0
		for ; !r.CheckBreak(); yyj3602++ {

			if yyj3602 >= len(yyv3602) {
				yyv3602 = append(yyv3602, NodeCondition{}) // var yyz3602 NodeCondition
				yyc3602 = true
			}
			yyh3602.ElemContainerState(yyj3602)
			if yyj3602 < len(yyv3602) {
				if r.TryDecodeAsNil() {
					yyv3602[yyj3602] = NodeCondition{}
				} else {
					yyv3605 := &yyv3602[yyj3602]
					yyv3605.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3602 < len(yyv3602) {
			yyv3602 = yyv3602[:yyj3602]
			yyc3602 = true
		} else if yyj3602 == 0 && yyv3602 == nil {
			yyv3602 = []NodeCondition{}
			yyc3602 = true
		}
	}
	yyh3602.End()
	if yyc3602 {
		*v = yyv3602
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3606 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3607 := &yyv3606
		yy3607.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3608 := *v
	yyh3608, yyl3608 := z.DecSliceHelperStart()
	var yyc3608 bool
	if yyl3608 == 0 {
		if yyv3608 == nil {
			yyv3608 = []NodeAddress{}
			yyc3608 = true
		} else if len(yyv3608) != 0 {
			yyv3608 = yyv3608[:0]
			yyc3608 = true
		}
	} else if yyl3608 > 0 {
		var yyrr3608, yyrl3608 int
		var yyrt3608 bool
		if yyl3608 > cap(yyv3608) {

			yyrg3608 := len(yyv3608) > 0
			yyv23608 := yyv3608
			yyrl3608, yyrt3608 = z.DecInferLen(yyl3608, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3608 {
				if yyrl3608 <= cap(yyv3608) {
					yyv3608 = yyv3608[:yyrl3608]
				} else {
					yyv3608 = make([]NodeAddress, yyrl3608)
				}
			} else {
				yyv3608 = make([]NodeAddress, yyrl3608)
			}
			yyc3608 = true
			yyrr3608 = len(yyv3608)
			if yyrg3608 {
				copy(yyv3608, yyv23608)
			}
		} else if yyl3608 != len(yyv3608) {
			yyv3608 = yyv3608[:yyl3608]
			yyc3608 = true
		}
		yyj3608 := 0
		for ; yyj3608 < yyrr3608; yyj3608++ {
			yyh3608.ElemContainerState(yyj3608)
			if r.TryDecodeAsNil() {
				yyv3608[yyj3608] = NodeAddress{}
			} else {
				yyv3609 := &yyv3608[yyj3608]
				yyv3609.CodecDecodeSelf(d)
			}

		}
		if yyrt3608 {
			for ; yyj3608 < yyl3608; yyj3608++ {
				yyv3608 = append(yyv3608, NodeAddress{})
				yyh3608.ElemContainerState(yyj3608)
				if r.TryDecodeAsNil() {
					yyv3608[yyj3608] = NodeAddress{}
				} else {
					yyv3610 := &yyv3608[yyj3608]
					yyv3610.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3608 := 0
		for ; !r.CheckBreak(); yyj3608++ {

			if yyj3608 >= len(yyv3608) {
				yyv3608 = append(yyv3608, NodeAddress{}) // var yyz3608 NodeAddress
				yyc3608 = true
			}
			yyh3608.ElemContainerState(yyj3608)
			if yyj3608 < len(yyv3608) {
				if r.TryDecodeAsNil() {
					yyv3608[yyj3608] = NodeAddress{}
				} else {
					yyv3611 := &yyv3608[yyj3608]
					yyv3611.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3608 < len(yyv3608) {
			yyv3608 = yyv3608[:yyj3608]
			yyc3608 = true
		} else if yyj3608 == 0 && yyv3608 == nil {
			yyv3608 = []NodeAddress{}
			yyc3608 = true
		}
	}
	yyh3608.End()
	if yyc3608 {
		*v = yyv3608
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3612, yyv3612 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk3612.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3613 := &yyv3612
		yym3614 := z.EncBinary()
		_ = yym3614
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3613) {
		} else if !yym3614 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3613)
		} else {
			z.EncFallback(yy3613)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3615 := *v
	yyl3615 := r.ReadMapStart()
	yybh3615 := z.DecBasicHandle()
	if yyv3615 == nil {
		yyrl3615, _ := z.DecInferLen(yyl3615, yybh3615.MaxInitLen, 40)
		yyv3615 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3615)
		*v = yyv3615
	}
	var yymk3615 ResourceName
	var yymv3615 pkg3_resource.Quantity
	var yymg3615 bool
	if yybh3615.MapValueReset {
		yymg3615 = true
	}
	if yyl3615 > 0 {
		for yyj3615 := 0; yyj3615 < yyl3615; yyj3615++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3615 = ""
			} else {
				yymk3615 = ResourceName(r.DecodeString())
			}

			if yymg3615 {
				yymv3615 = yyv3615[yymk3615]
			} else {
				yymv3615 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3615 = pkg3_resource.Quantity{}
			} else {
				yyv3617 := &yymv3615
				yym3618 := z.DecBinary()
				_ = yym3618
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3617) {
				} else if !yym3618 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3617)
				} else {
					z.DecFallback(yyv3617, false)
				}
			}

			if yyv3615 != nil {
				yyv3615[yymk3615] = yymv3615
			}
		}
	} else if yyl3615 < 0 {
		for yyj3615 := 0; !r.CheckBreak(); yyj3615++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3615 = ""
			} else {
				yymk3615 = ResourceName(r.DecodeString())
			}

			if yymg3615 {
				yymv3615 = yyv3615[yymk3615]
			} else {
				yymv3615 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3615 = pkg3_resource.Quantity{}
			} else {
				yyv3620 := &yymv3615
				yym3621 := z.DecBinary()
				_ = yym3621
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3620) {
				} else if !yym3621 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3620)
				} else {
					z.DecFallback(yyv3620, false)
				}
			}

			if yyv3615 != nil {
				yyv3615[yymk3615] = yymv3615
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3622 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3623 := &yyv3622
		yy3623.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3624 := *v
	yyh3624, yyl3624 := z.DecSliceHelperStart()
	var yyc3624 bool
	if yyl3624 == 0 {
		if yyv3624 == nil {
			yyv3624 = []Node{}
			yyc3624 = true
		} else if len(yyv3624) != 0 {
			yyv3624 = yyv3624[:0]
			yyc3624 = true
		}
	} else if yyl3624 > 0 {
		var yyrr3624, yyrl3624 int
		var yyrt3624 bool
		if yyl3624 > cap(yyv3624) {

			yyrg3624 := len(yyv3624) > 0
			yyv23624 := yyv3624
			yyrl3624, yyrt3624 = z.DecInferLen(yyl3624, z.DecBasicHandle().MaxInitLen, 456)
			if yyrt3624 {
				if yyrl3624 <= cap(yyv3624) {
					yyv3624 = yyv3624[:yyrl3624]
				} else {
					yyv3624 = make([]Node, yyrl3624)
				}
			} else {
				yyv3624 = make([]Node, yyrl3624)
			}
			yyc3624 = true
			yyrr3624 = len(yyv3624)
			if yyrg3624 {
				copy(yyv3624, yyv23624)
			}
		} else if yyl3624 != len(yyv3624) {
			yyv3624 = yyv3624[:yyl3624]
			yyc3624 = true
		}
		yyj3624 := 0
		for ; yyj3624 < yyrr3624; yyj3624++ {
			yyh3624.ElemContainerState(yyj3624)
			if r.TryDecodeAsNil() {
				yyv3624[yyj3624] = Node{}
			} else {
				yyv3625 := &yyv3624[yyj3624]
				yyv3625.CodecDecodeSelf(d)
			}

		}
		if yyrt3624 {
			for ; yyj3624 < yyl3624; yyj3624++ {
				yyv3624 = append(yyv3624, Node{})
				yyh3624.ElemContainerState(yyj3624)
				if r.TryDecodeAsNil() {
					yyv3624[yyj3624] = Node{}
				} else {
					yyv3626 := &yyv3624[yyj3624]
					yyv3626.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3624 := 0
		for ; !r.CheckBreak(); yyj3624++ {

			if yyj3624 >= len(yyv3624) {
				yyv3624 = append(yyv3624, Node{}) // var yyz3624 Node
				yyc3624 = true
			}
			yyh3624.ElemContainerState(yyj3624)
			if yyj3624 < len(yyv3624) {
				if r.TryDecodeAsNil() {
					yyv3624[yyj3624] = Node{}
				} else {
					yyv3627 := &yyv3624[yyj3624]
					yyv3627.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3624 < len(yyv3624) {
			yyv3624 = yyv3624[:yyj3624]
			yyc3624 = true
		} else if yyj3624 == 0 && yyv3624 == nil {
			yyv3624 = []Node{}
			yyc3624 = true
		}
	}
	yyh3624.End()
	if yyc3624 {
		*v = yyv3624
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3628 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3628.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3629 := *v
	yyh3629, yyl3629 := z.DecSliceHelperStart()
	var yyc3629 bool
	if yyl3629 == 0 {
		if yyv3629 == nil {
			yyv3629 = []FinalizerName{}
			yyc3629 = true
		} else if len(yyv3629) != 0 {
			yyv3629 = yyv3629[:0]
			yyc3629 = true
		}
	} else if yyl3629 > 0 {
		var yyrr3629, yyrl3629 int
		var yyrt3629 bool
		if yyl3629 > cap(yyv3629) {

			yyrl3629, yyrt3629 = z.DecInferLen(yyl3629, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3629 {
				if yyrl3629 <= cap(yyv3629) {
					yyv3629 = yyv3629[:yyrl3629]
				} else {
					yyv3629 = make([]FinalizerName, yyrl3629)
				}
			} else {
				yyv3629 = make([]FinalizerName, yyrl3629)
			}
			yyc3629 = true
			yyrr3629 = len(yyv3629)
		} else if yyl3629 != len(yyv3629) {
			yyv3629 = yyv3629[:yyl3629]
			yyc3629 = true
		}
		yyj3629 := 0
		for ; yyj3629 < yyrr3629; yyj3629++ {
			yyh3629.ElemContainerState(yyj3629)
			if r.TryDecodeAsNil() {
				yyv3629[yyj3629] = ""
			} else {
				yyv3629[yyj3629] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3629 {
			for ; yyj3629 < yyl3629; yyj3629++ {
				yyv3629 = append(yyv3629, "")
				yyh3629.ElemContainerState(yyj3629)
				if r.TryDecodeAsNil() {
					yyv3629[yyj3629] = ""
				} else {
					yyv3629[yyj3629] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj3629 := 0
		for ; !r.CheckBreak(); yyj3629++ {

			if yyj3629 >= len(yyv3629) {
				yyv3629 = append(yyv3629, "") // var yyz3629 FinalizerName
				yyc3629 = true
			}
			yyh3629.ElemContainerState(yyj3629)
			if yyj3629 < len(yyv3629) {
				if r.TryDecodeAsNil() {
					yyv3629[yyj3629] = ""
				} else {
					yyv3629[yyj3629] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3629 < len(yyv3629) {
			yyv3629 = yyv3629[:yyj3629]
			yyc3629 = true
		} else if yyj3629 == 0 && yyv3629 == nil {
			yyv3629 = []FinalizerName{}
			yyc3629 = true
		}
	}
	yyh3629.End()
	if yyc3629 {
		*v = yyv3629
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3633 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3634 := &yyv3633
		yy3634.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3635 := *v
	yyh3635, yyl3635 := z.DecSliceHelperStart()
	var yyc3635 bool
	if yyl3635 == 0 {
		if yyv3635 == nil {
			yyv3635 = []Namespace{}
			yyc3635 = true
		} else if len(yyv3635) != 0 {
			yyv3635 = yyv3635[:0]
			yyc3635 = true
		}
	} else if yyl3635 > 0 {
		var yyrr3635, yyrl3635 int
		var yyrt3635 bool
		if yyl3635 > cap(yyv3635) {

			yyrg3635 := len(yyv3635) > 0
			yyv23635 := yyv3635
			yyrl3635, yyrt3635 = z.DecInferLen(yyl3635, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3635 {
				if yyrl3635 <= cap(yyv3635) {
					yyv3635 = yyv3635[:yyrl3635]
				} else {
					yyv3635 = make([]Namespace, yyrl3635)
				}
			} else {
				yyv3635 = make([]Namespace, yyrl3635)
			}
			yyc3635 = true
			yyrr3635 = len(yyv3635)
			if yyrg3635 {
				copy(yyv3635, yyv23635)
			}
		} else if yyl3635 != len(yyv3635) {
			yyv3635 = yyv3635[:yyl3635]
			yyc3635 = true
		}
		yyj3635 := 0
		for ; yyj3635 < yyrr3635; yyj3635++ {
			yyh3635.ElemContainerState(yyj3635)
			if r.TryDecodeAsNil() {
				yyv3635[yyj3635] = Namespace{}
			} else {
				yyv3636 := &yyv3635[yyj3635]
				yyv3636.CodecDecodeSelf(d)
			}

		}
		if yyrt3635 {
			for ; yyj3635 < yyl3635; yyj3635++ {
				yyv3635 = append(yyv3635, Namespace{})
				yyh3635.ElemContainerState(yyj3635)
				if r.TryDecodeAsNil() {
					yyv3635[yyj3635] = Namespace{}
				} else {
					yyv3637 := &yyv3635[yyj3635]
					yyv3637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3635 := 0
		for ; !r.CheckBreak(); yyj3635++ {

			if yyj3635 >= len(yyv3635) {
				yyv3635 = append(yyv3635, Namespace{}) // var yyz3635 Namespace
				yyc3635 = true
			}
			yyh3635.ElemContainerState(yyj3635)
			if yyj3635 < len(yyv3635) {
				if r.TryDecodeAsNil() {
					yyv3635[yyj3635] = Namespace{}
				} else {
					yyv3638 := &yyv3635[yyj3635]
					yyv3638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3635 < len(yyv3635) {
			yyv3635 = yyv3635[:yyj3635]
			yyc3635 = true
		} else if yyj3635 == 0 && yyv3635 == nil {
			yyv3635 = []Namespace{}
			yyc3635 = true
		}
	}
	yyh3635.End()
	if yyc3635 {
		*v = yyv3635
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3639 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3640 := &yyv3639
		yy3640.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3641 := *v
	yyh3641, yyl3641 := z.DecSliceHelperStart()
	var yyc3641 bool
	if yyl3641 == 0 {
		if yyv3641 == nil {
			yyv3641 = []Event{}
			yyc3641 = true
		} else if len(yyv3641) != 0 {
			yyv3641 = yyv3641[:0]
			yyc3641 = true
		}
	} else if yyl3641 > 0 {
		var yyrr3641, yyrl3641 int
		var yyrt3641 bool
		if yyl3641 > cap(yyv3641) {

			yyrg3641 := len(yyv3641) > 0
			yyv23641 := yyv3641
			yyrl3641, yyrt3641 = z.DecInferLen(yyl3641, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt3641 {
				if yyrl3641 <= cap(yyv3641) {
					yyv3641 = yyv3641[:yyrl3641]
				} else {
					yyv3641 = make([]Event, yyrl3641)
				}
			} else {
				yyv3641 = make([]Event, yyrl3641)
			}
			yyc3641 = true
			yyrr3641 = len(yyv3641)
			if yyrg3641 {
				copy(yyv3641, yyv23641)
			}
		} else if yyl3641 != len(yyv3641) {
			yyv3641 = yyv3641[:yyl3641]
			yyc3641 = true
		}
		yyj3641 := 0
		for ; yyj3641 < yyrr3641; yyj3641++ {
			yyh3641.ElemContainerState(yyj3641)
			if r.TryDecodeAsNil() {
				yyv3641[yyj3641] = Event{}
			} else {
				yyv3642 := &yyv3641[yyj3641]
				yyv3642.CodecDecodeSelf(d)
			}

		}
		if yyrt3641 {
			for ; yyj3641 < yyl3641; yyj3641++ {
				yyv3641 = append(yyv3641, Event{})
				yyh3641.ElemContainerState(yyj3641)
				if r.TryDecodeAsNil() {
					yyv3641[yyj3641] = Event{}
				} else {
					yyv3643 := &yyv3641[yyj3641]
					yyv3643.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3641 := 0
		for ; !r.CheckBreak(); yyj3641++ {

			if yyj3641 >= len(yyv3641) {
				yyv3641 = append(yyv3641, Event{}) // var yyz3641 Event
				yyc3641 = true
			}
			yyh3641.ElemContainerState(yyj3641)
			if yyj3641 < len(yyv3641) {
				if r.TryDecodeAsNil() {
					yyv3641[yyj3641] = Event{}
				} else {
					yyv3644 := &yyv3641[yyj3641]
					yyv3644.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3641 < len(yyv3641) {
			yyv3641 = yyv3641[:yyj3641]
			yyc3641 = true
		} else if yyj3641 == 0 && yyv3641 == nil {
			yyv3641 = []Event{}
			yyc3641 = true
		}
	}
	yyh3641.End()
	if yyc3641 {
		*v = yyv3641
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg6_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3645 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv3645 == nil {
			r.EncodeNil()
		} else {
			yym3646 := z.EncBinary()
			_ = yym3646
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3645) {
			} else {
				z.EncFallback(yyv3645)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg6_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3647 := *v
	yyh3647, yyl3647 := z.DecSliceHelperStart()
	var yyc3647 bool
	if yyl3647 == 0 {
		if yyv3647 == nil {
			yyv3647 = []pkg6_runtime.Object{}
			yyc3647 = true
		} else if len(yyv3647) != 0 {
			yyv3647 = yyv3647[:0]
			yyc3647 = true
		}
	} else if yyl3647 > 0 {
		var yyrr3647, yyrl3647 int
		var yyrt3647 bool
		if yyl3647 > cap(yyv3647) {

			yyrg3647 := len(yyv3647) > 0
			yyv23647 := yyv3647
			yyrl3647, yyrt3647 = z.DecInferLen(yyl3647, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3647 {
				if yyrl3647 <= cap(yyv3647) {
					yyv3647 = yyv3647[:yyrl3647]
				} else {
					yyv3647 = make([]pkg6_runtime.Object, yyrl3647)
				}
			} else {
				yyv3647 = make([]pkg6_runtime.Object, yyrl3647)
			}
			yyc3647 = true
			yyrr3647 = len(yyv3647)
			if yyrg3647 {
				copy(yyv3647, yyv23647)
			}
		} else if yyl3647 != len(yyv3647) {
			yyv3647 = yyv3647[:yyl3647]
			yyc3647 = true
		}
		yyj3647 := 0
		for ; yyj3647 < yyrr3647; yyj3647++ {
			yyh3647.ElemContainerState(yyj3647)
			if r.TryDecodeAsNil() {
				yyv3647[yyj3647] = nil
			} else {
				yyv3648 := &yyv3647[yyj3647]
				yym3649 := z.DecBinary()
				_ = yym3649
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3648) {
				} else {
					z.DecFallback(yyv3648, true)
				}
			}

		}
		if yyrt3647 {
			for ; yyj3647 < yyl3647; yyj3647++ {
				yyv3647 = append(yyv3647, nil)
				yyh3647.ElemContainerState(yyj3647)
				if r.TryDecodeAsNil() {
					yyv3647[yyj3647] = nil
				} else {
					yyv3650 := &yyv3647[yyj3647]
					yym3651 := z.DecBinary()
					_ = yym3651
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3650) {
					} else {
						z.DecFallback(yyv3650, true)
					}
				}

			}
		}

	} else {
		yyj3647 := 0
		for ; !r.CheckBreak(); yyj3647++ {

			if yyj3647 >= len(yyv3647) {
				yyv3647 = append(yyv3647, nil) // var yyz3647 pkg6_runtime.Object
				yyc3647 = true
			}
			yyh3647.ElemContainerState(yyj3647)
			if yyj3647 < len(yyv3647) {
				if r.TryDecodeAsNil() {
					yyv3647[yyj3647] = nil
				} else {
					yyv3652 := &yyv3647[yyj3647]
					yym3653 := z.DecBinary()
					_ = yym3653
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3652) {
					} else {
						z.DecFallback(yyv3652, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3647 < len(yyv3647) {
			yyv3647 = yyv3647[:yyj3647]
			yyc3647 = true
		} else if yyj3647 == 0 && yyv3647 == nil {
			yyv3647 = []pkg6_runtime.Object{}
			yyc3647 = true
		}
	}
	yyh3647.End()
	if yyc3647 {
		*v = yyv3647
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3654 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3655 := &yyv3654
		yy3655.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3656 := *v
	yyh3656, yyl3656 := z.DecSliceHelperStart()
	var yyc3656 bool
	if yyl3656 == 0 {
		if yyv3656 == nil {
			yyv3656 = []LimitRangeItem{}
			yyc3656 = true
		} else if len(yyv3656) != 0 {
			yyv3656 = yyv3656[:0]
			yyc3656 = true
		}
	} else if yyl3656 > 0 {
		var yyrr3656, yyrl3656 int
		var yyrt3656 bool
		if yyl3656 > cap(yyv3656) {

			yyrg3656 := len(yyv3656) > 0
			yyv23656 := yyv3656
			yyrl3656, yyrt3656 = z.DecInferLen(yyl3656, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3656 {
				if yyrl3656 <= cap(yyv3656) {
					yyv3656 = yyv3656[:yyrl3656]
				} else {
					yyv3656 = make([]LimitRangeItem, yyrl3656)
				}
			} else {
				yyv3656 = make([]LimitRangeItem, yyrl3656)
			}
			yyc3656 = true
			yyrr3656 = len(yyv3656)
			if yyrg3656 {
				copy(yyv3656, yyv23656)
			}
		} else if yyl3656 != len(yyv3656) {
			yyv3656 = yyv3656[:yyl3656]
			yyc3656 = true
		}
		yyj3656 := 0
		for ; yyj3656 < yyrr3656; yyj3656++ {
			yyh3656.ElemContainerState(yyj3656)
			if r.TryDecodeAsNil() {
				yyv3656[yyj3656] = LimitRangeItem{}
			} else {
				yyv3657 := &yyv3656[yyj3656]
				yyv3657.CodecDecodeSelf(d)
			}

		}
		if yyrt3656 {
			for ; yyj3656 < yyl3656; yyj3656++ {
				yyv3656 = append(yyv3656, LimitRangeItem{})
				yyh3656.ElemContainerState(yyj3656)
				if r.TryDecodeAsNil() {
					yyv3656[yyj3656] = LimitRangeItem{}
				} else {
					yyv3658 := &yyv3656[yyj3656]
					yyv3658.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3656 := 0
		for ; !r.CheckBreak(); yyj3656++ {

			if yyj3656 >= len(yyv3656) {
				yyv3656 = append(yyv3656, LimitRangeItem{}) // var yyz3656 LimitRangeItem
				yyc3656 = true
			}
			yyh3656.ElemContainerState(yyj3656)
			if yyj3656 < len(yyv3656) {
				if r.TryDecodeAsNil() {
					yyv3656[yyj3656] = LimitRangeItem{}
				} else {
					yyv3659 := &yyv3656[yyj3656]
					yyv3659.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3656 < len(yyv3656) {
			yyv3656 = yyv3656[:yyj3656]
			yyc3656 = true
		} else if yyj3656 == 0 && yyv3656 == nil {
			yyv3656 = []LimitRangeItem{}
			yyc3656 = true
		}
	}
	yyh3656.End()
	if yyc3656 {
		*v = yyv3656
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3660 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3661 := &yyv3660
		yy3661.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3662 := *v
	yyh3662, yyl3662 := z.DecSliceHelperStart()
	var yyc3662 bool
	if yyl3662 == 0 {
		if yyv3662 == nil {
			yyv3662 = []LimitRange{}
			yyc3662 = true
		} else if len(yyv3662) != 0 {
			yyv3662 = yyv3662[:0]
			yyc3662 = true
		}
	} else if yyl3662 > 0 {
		var yyrr3662, yyrl3662 int
		var yyrt3662 bool
		if yyl3662 > cap(yyv3662) {

			yyrg3662 := len(yyv3662) > 0
			yyv23662 := yyv3662
			yyrl3662, yyrt3662 = z.DecInferLen(yyl3662, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3662 {
				if yyrl3662 <= cap(yyv3662) {
					yyv3662 = yyv3662[:yyrl3662]
				} else {
					yyv3662 = make([]LimitRange, yyrl3662)
				}
			} else {
				yyv3662 = make([]LimitRange, yyrl3662)
			}
			yyc3662 = true
			yyrr3662 = len(yyv3662)
			if yyrg3662 {
				copy(yyv3662, yyv23662)
			}
		} else if yyl3662 != len(yyv3662) {
			yyv3662 = yyv3662[:yyl3662]
			yyc3662 = true
		}
		yyj3662 := 0
		for ; yyj3662 < yyrr3662; yyj3662++ {
			yyh3662.ElemContainerState(yyj3662)
			if r.TryDecodeAsNil() {
				yyv3662[yyj3662] = LimitRange{}
			} else {
				yyv3663 := &yyv3662[yyj3662]
				yyv3663.CodecDecodeSelf(d)
			}

		}
		if yyrt3662 {
			for ; yyj3662 < yyl3662; yyj3662++ {
				yyv3662 = append(yyv3662, LimitRange{})
				yyh3662.ElemContainerState(yyj3662)
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = LimitRange{}
				} else {
					yyv3664 := &yyv3662[yyj3662]
					yyv3664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3662 := 0
		for ; !r.CheckBreak(); yyj3662++ {

			if yyj3662 >= len(yyv3662) {
				yyv3662 = append(yyv3662, LimitRange{}) // var yyz3662 LimitRange
				yyc3662 = true
			}
			yyh3662.ElemContainerState(yyj3662)
			if yyj3662 < len(yyv3662) {
				if r.TryDecodeAsNil() {
					yyv3662[yyj3662] = LimitRange{}
				} else {
					yyv3665 := &yyv3662[yyj3662]
					yyv3665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3662 < len(yyv3662) {
			yyv3662 = yyv3662[:yyj3662]
			yyc3662 = true
		} else if yyj3662 == 0 && yyv3662 == nil {
			yyv3662 = []LimitRange{}
			yyc3662 = true
		}
	}
	yyh3662.End()
	if yyc3662 {
		*v = yyv3662
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3666 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3667 := &yyv3666
		yy3667.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3668 := *v
	yyh3668, yyl3668 := z.DecSliceHelperStart()
	var yyc3668 bool
	if yyl3668 == 0 {
		if yyv3668 == nil {
			yyv3668 = []ResourceQuota{}
			yyc3668 = true
		} else if len(yyv3668) != 0 {
			yyv3668 = yyv3668[:0]
			yyc3668 = true
		}
	} else if yyl3668 > 0 {
		var yyrr3668, yyrl3668 int
		var yyrt3668 bool
		if yyl3668 > cap(yyv3668) {

			yyrg3668 := len(yyv3668) > 0
			yyv23668 := yyv3668
			yyrl3668, yyrt3668 = z.DecInferLen(yyl3668, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3668 {
				if yyrl3668 <= cap(yyv3668) {
					yyv3668 = yyv3668[:yyrl3668]
				} else {
					yyv3668 = make([]ResourceQuota, yyrl3668)
				}
			} else {
				yyv3668 = make([]ResourceQuota, yyrl3668)
			}
			yyc3668 = true
			yyrr3668 = len(yyv3668)
			if yyrg3668 {
				copy(yyv3668, yyv23668)
			}
		} else if yyl3668 != len(yyv3668) {
			yyv3668 = yyv3668[:yyl3668]
			yyc3668 = true
		}
		yyj3668 := 0
		for ; yyj3668 < yyrr3668; yyj3668++ {
			yyh3668.ElemContainerState(yyj3668)
			if r.TryDecodeAsNil() {
				yyv3668[yyj3668] = ResourceQuota{}
			} else {
				yyv3669 := &yyv3668[yyj3668]
				yyv3669.CodecDecodeSelf(d)
			}

		}
		if yyrt3668 {
			for ; yyj3668 < yyl3668; yyj3668++ {
				yyv3668 = append(yyv3668, ResourceQuota{})
				yyh3668.ElemContainerState(yyj3668)
				if r.TryDecodeAsNil() {
					yyv3668[yyj3668] = ResourceQuota{}
				} else {
					yyv3670 := &yyv3668[yyj3668]
					yyv3670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3668 := 0
		for ; !r.CheckBreak(); yyj3668++ {

			if yyj3668 >= len(yyv3668) {
				yyv3668 = append(yyv3668, ResourceQuota{}) // var yyz3668 ResourceQuota
				yyc3668 = true
			}
			yyh3668.ElemContainerState(yyj3668)
			if yyj3668 < len(yyv3668) {
				if r.TryDecodeAsNil() {
					yyv3668[yyj3668] = ResourceQuota{}
				} else {
					yyv3671 := &yyv3668[yyj3668]
					yyv3671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3668 < len(yyv3668) {
			yyv3668 = yyv3668[:yyj3668]
			yyc3668 = true
		} else if yyj3668 == 0 && yyv3668 == nil {
			yyv3668 = []ResourceQuota{}
			yyc3668 = true
		}
	}
	yyh3668.End()
	if yyc3668 {
		*v = yyv3668
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3672, yyv3672 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3673 := z.EncBinary()
		_ = yym3673
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3672))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv3672 == nil {
			r.EncodeNil()
		} else {
			yym3674 := z.EncBinary()
			_ = yym3674
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3672))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3675 := *v
	yyl3675 := r.ReadMapStart()
	yybh3675 := z.DecBasicHandle()
	if yyv3675 == nil {
		yyrl3675, _ := z.DecInferLen(yyl3675, yybh3675.MaxInitLen, 40)
		yyv3675 = make(map[string][]uint8, yyrl3675)
		*v = yyv3675
	}
	var yymk3675 string
	var yymv3675 []uint8
	var yymg3675 bool
	if yybh3675.MapValueReset {
		yymg3675 = true
	}
	if yyl3675 > 0 {
		for yyj3675 := 0; yyj3675 < yyl3675; yyj3675++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3675 = ""
			} else {
				yymk3675 = string(r.DecodeString())
			}

			if yymg3675 {
				yymv3675 = yyv3675[yymk3675]
			} else {
				yymv3675 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3675 = nil
			} else {
				yyv3677 := &yymv3675
				yym3678 := z.DecBinary()
				_ = yym3678
				if false {
				} else {
					*yyv3677 = r.DecodeBytes(*(*[]byte)(yyv3677), false, false)
				}
			}

			if yyv3675 != nil {
				yyv3675[yymk3675] = yymv3675
			}
		}
	} else if yyl3675 < 0 {
		for yyj3675 := 0; !r.CheckBreak(); yyj3675++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3675 = ""
			} else {
				yymk3675 = string(r.DecodeString())
			}

			if yymg3675 {
				yymv3675 = yyv3675[yymk3675]
			} else {
				yymv3675 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3675 = nil
			} else {
				yyv3680 := &yymv3675
				yym3681 := z.DecBinary()
				_ = yym3681
				if false {
				} else {
					*yyv3680 = r.DecodeBytes(*(*[]byte)(yyv3680), false, false)
				}
			}

			if yyv3675 != nil {
				yyv3675[yymk3675] = yymv3675
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3682 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3683 := &yyv3682
		yy3683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3684 := *v
	yyh3684, yyl3684 := z.DecSliceHelperStart()
	var yyc3684 bool
	if yyl3684 == 0 {
		if yyv3684 == nil {
			yyv3684 = []Secret{}
			yyc3684 = true
		} else if len(yyv3684) != 0 {
			yyv3684 = yyv3684[:0]
			yyc3684 = true
		}
	} else if yyl3684 > 0 {
		var yyrr3684, yyrl3684 int
		var yyrt3684 bool
		if yyl3684 > cap(yyv3684) {

			yyrg3684 := len(yyv3684) > 0
			yyv23684 := yyv3684
			yyrl3684, yyrt3684 = z.DecInferLen(yyl3684, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3684 {
				if yyrl3684 <= cap(yyv3684) {
					yyv3684 = yyv3684[:yyrl3684]
				} else {
					yyv3684 = make([]Secret, yyrl3684)
				}
			} else {
				yyv3684 = make([]Secret, yyrl3684)
			}
			yyc3684 = true
			yyrr3684 = len(yyv3684)
			if yyrg3684 {
				copy(yyv3684, yyv23684)
			}
		} else if yyl3684 != len(yyv3684) {
			yyv3684 = yyv3684[:yyl3684]
			yyc3684 = true
		}
		yyj3684 := 0
		for ; yyj3684 < yyrr3684; yyj3684++ {
			yyh3684.ElemContainerState(yyj3684)
			if r.TryDecodeAsNil() {
				yyv3684[yyj3684] = Secret{}
			} else {
				yyv3685 := &yyv3684[yyj3684]
				yyv3685.CodecDecodeSelf(d)
			}

		}
		if yyrt3684 {
			for ; yyj3684 < yyl3684; yyj3684++ {
				yyv3684 = append(yyv3684, Secret{})
				yyh3684.ElemContainerState(yyj3684)
				if r.TryDecodeAsNil() {
					yyv3684[yyj3684] = Secret{}
				} else {
					yyv3686 := &yyv3684[yyj3684]
					yyv3686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3684 := 0
		for ; !r.CheckBreak(); yyj3684++ {

			if yyj3684 >= len(yyv3684) {
				yyv3684 = append(yyv3684, Secret{}) // var yyz3684 Secret
				yyc3684 = true
			}
			yyh3684.ElemContainerState(yyj3684)
			if yyj3684 < len(yyv3684) {
				if r.TryDecodeAsNil() {
					yyv3684[yyj3684] = Secret{}
				} else {
					yyv3687 := &yyv3684[yyj3684]
					yyv3687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3684 < len(yyv3684) {
			yyv3684 = yyv3684[:yyj3684]
			yyc3684 = true
		} else if yyj3684 == 0 && yyv3684 == nil {
			yyv3684 = []Secret{}
			yyc3684 = true
		}
	}
	yyh3684.End()
	if yyc3684 {
		*v = yyv3684
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3689 := &yyv3688
		yy3689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3690 := *v
	yyh3690, yyl3690 := z.DecSliceHelperStart()
	var yyc3690 bool
	if yyl3690 == 0 {
		if yyv3690 == nil {
			yyv3690 = []ComponentCondition{}
			yyc3690 = true
		} else if len(yyv3690) != 0 {
			yyv3690 = yyv3690[:0]
			yyc3690 = true
		}
	} else if yyl3690 > 0 {
		var yyrr3690, yyrl3690 int
		var yyrt3690 bool
		if yyl3690 > cap(yyv3690) {

			yyrg3690 := len(yyv3690) > 0
			yyv23690 := yyv3690
			yyrl3690, yyrt3690 = z.DecInferLen(yyl3690, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3690 {
				if yyrl3690 <= cap(yyv3690) {
					yyv3690 = yyv3690[:yyrl3690]
				} else {
					yyv3690 = make([]ComponentCondition, yyrl3690)
				}
			} else {
				yyv3690 = make([]ComponentCondition, yyrl3690)
			}
			yyc3690 = true
			yyrr3690 = len(yyv3690)
			if yyrg3690 {
				copy(yyv3690, yyv23690)
			}
		} else if yyl3690 != len(yyv3690) {
			yyv3690 = yyv3690[:yyl3690]
			yyc3690 = true
		}
		yyj3690 := 0
		for ; yyj3690 < yyrr3690; yyj3690++ {
			yyh3690.ElemContainerState(yyj3690)
			if r.TryDecodeAsNil() {
				yyv3690[yyj3690] = ComponentCondition{}
			} else {
				yyv3691 := &yyv3690[yyj3690]
				yyv3691.CodecDecodeSelf(d)
			}

		}
		if yyrt3690 {
			for ; yyj3690 < yyl3690; yyj3690++ {
				yyv3690 = append(yyv3690, ComponentCondition{})
				yyh3690.ElemContainerState(yyj3690)
				if r.TryDecodeAsNil() {
					yyv3690[yyj3690] = ComponentCondition{}
				} else {
					yyv3692 := &yyv3690[yyj3690]
					yyv3692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3690 := 0
		for ; !r.CheckBreak(); yyj3690++ {

			if yyj3690 >= len(yyv3690) {
				yyv3690 = append(yyv3690, ComponentCondition{}) // var yyz3690 ComponentCondition
				yyc3690 = true
			}
			yyh3690.ElemContainerState(yyj3690)
			if yyj3690 < len(yyv3690) {
				if r.TryDecodeAsNil() {
					yyv3690[yyj3690] = ComponentCondition{}
				} else {
					yyv3693 := &yyv3690[yyj3690]
					yyv3693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3690 < len(yyv3690) {
			yyv3690 = yyv3690[:yyj3690]
			yyc3690 = true
		} else if yyj3690 == 0 && yyv3690 == nil {
			yyv3690 = []ComponentCondition{}
			yyc3690 = true
		}
	}
	yyh3690.End()
	if yyc3690 {
		*v = yyv3690
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3695 := &yyv3694
		yy3695.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3696 := *v
	yyh3696, yyl3696 := z.DecSliceHelperStart()
	var yyc3696 bool
	if yyl3696 == 0 {
		if yyv3696 == nil {
			yyv3696 = []ComponentStatus{}
			yyc3696 = true
		} else if len(yyv3696) != 0 {
			yyv3696 = yyv3696[:0]
			yyc3696 = true
		}
	} else if yyl3696 > 0 {
		var yyrr3696, yyrl3696 int
		var yyrt3696 bool
		if yyl3696 > cap(yyv3696) {

			yyrg3696 := len(yyv3696) > 0
			yyv23696 := yyv3696
			yyrl3696, yyrt3696 = z.DecInferLen(yyl3696, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3696 {
				if yyrl3696 <= cap(yyv3696) {
					yyv3696 = yyv3696[:yyrl3696]
				} else {
					yyv3696 = make([]ComponentStatus, yyrl3696)
				}
			} else {
				yyv3696 = make([]ComponentStatus, yyrl3696)
			}
			yyc3696 = true
			yyrr3696 = len(yyv3696)
			if yyrg3696 {
				copy(yyv3696, yyv23696)
			}
		} else if yyl3696 != len(yyv3696) {
			yyv3696 = yyv3696[:yyl3696]
			yyc3696 = true
		}
		yyj3696 := 0
		for ; yyj3696 < yyrr3696; yyj3696++ {
			yyh3696.ElemContainerState(yyj3696)
			if r.TryDecodeAsNil() {
				yyv3696[yyj3696] = ComponentStatus{}
			} else {
				yyv3697 := &yyv3696[yyj3696]
				yyv3697.CodecDecodeSelf(d)
			}

		}
		if yyrt3696 {
			for ; yyj3696 < yyl3696; yyj3696++ {
				yyv3696 = append(yyv3696, ComponentStatus{})
				yyh3696.ElemContainerState(yyj3696)
				if r.TryDecodeAsNil() {
					yyv3696[yyj3696] = ComponentStatus{}
				} else {
					yyv3698 := &yyv3696[yyj3696]
					yyv3698.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3696 := 0
		for ; !r.CheckBreak(); yyj3696++ {

			if yyj3696 >= len(yyv3696) {
				yyv3696 = append(yyv3696, ComponentStatus{}) // var yyz3696 ComponentStatus
				yyc3696 = true
			}
			yyh3696.ElemContainerState(yyj3696)
			if yyj3696 < len(yyv3696) {
				if r.TryDecodeAsNil() {
					yyv3696[yyj3696] = ComponentStatus{}
				} else {
					yyv3699 := &yyv3696[yyj3696]
					yyv3699.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3696 < len(yyv3696) {
			yyv3696 = yyv3696[:yyj3696]
			yyc3696 = true
		} else if yyj3696 == 0 && yyv3696 == nil {
			yyv3696 = []ComponentStatus{}
			yyc3696 = true
		}
	}
	yyh3696.End()
	if yyc3696 {
		*v = yyv3696
	}
}
