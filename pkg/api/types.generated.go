/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			yyq2[14] = x.Cluster != nil
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[14] {
					if x.Cluster == nil {
						r.EncodeNil()
					} else {
						x.Cluster.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cluser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cluster == nil {
						r.EncodeNil()
					} else {
						x.Cluster.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym50 := z.DecBinary()
	_ = yym50
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct51 := r.ContainerType()
		if yyct51 == codecSelferValueTypeMap1234 {
			yyl51 := r.ReadMapStart()
			if yyl51 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl51, d)
			}
		} else if yyct51 == codecSelferValueTypeArray1234 {
			yyl51 := r.ReadArrayStart()
			if yyl51 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl51, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys52Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys52Slc
	var yyhl52 bool = l >= 0
	for yyj52 := 0; ; yyj52++ {
		if yyhl52 {
			if yyj52 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys52Slc = r.DecodeBytes(yys52Slc, true, true)
		yys52 := string(yys52Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys52 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv60 := &x.CreationTimestamp
				yym61 := z.DecBinary()
				_ = yym61
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv60) {
				} else if yym61 {
					z.DecBinaryUnmarshal(yyv60)
				} else if !yym61 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv60)
				} else {
					z.DecFallback(yyv60, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym63 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym63 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym65 := z.DecBinary()
				_ = yym65
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv66 := &x.Labels
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else {
					z.F.DecMapStringStringX(yyv66, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv68 := &x.Annotations
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else {
					z.F.DecMapStringStringX(yyv68, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv70 := &x.OwnerReferences
				yym71 := z.DecBinary()
				_ = yym71
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv70), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv72 := &x.Finalizers
				yym73 := z.DecBinary()
				_ = yym73
				if false {
				} else {
					z.F.DecSliceStringX(yyv72, false, d)
				}
			}
		case "cluser":
			if r.TryDecodeAsNil() {
				if x.Cluster != nil {
					x.Cluster = nil
				}
			} else {
				if x.Cluster == nil {
					x.Cluster = new(ClusterReference)
				}
				x.Cluster.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys52)
		} // end switch yys52
	} // end for yyj52
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj75 int
	var yyb75 bool
	var yyhl75 bool = l >= 0
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv83 := &x.CreationTimestamp
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv83) {
		} else if yym84 {
			z.DecBinaryUnmarshal(yyv83)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv83)
		} else {
			z.DecFallback(yyv83, false)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym86 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym86 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv89 := &x.Labels
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv91 := &x.Annotations
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			z.F.DecMapStringStringX(yyv91, false, d)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv93 := &x.OwnerReferences
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv93), d)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv95 := &x.Finalizers
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			z.F.DecSliceStringX(yyv95, false, d)
		}
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cluster != nil {
			x.Cluster = nil
		}
	} else {
		if x.Cluster == nil {
			x.Cluster = new(ClusterReference)
		}
		x.Cluster.CodecDecodeSelf(d)
	}
	for {
		yyj75++
		if yyhl75 {
			yyb75 = yyj75 > l
		} else {
			yyb75 = r.CheckBreak()
		}
		if yyb75 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj75-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym98 := z.EncBinary()
		_ = yym98
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep99 := !z.EncBinary()
			yy2arr99 := z.EncBasicHandle().StructToArray
			var yyq99 [1]bool
			_, _, _ = yysep99, yyq99, yy2arr99
			const yyr99 bool = false
			yyq99[0] = x.ClusterName != ""
			var yynn99 int
			if yyr99 || yy2arr99 {
				r.EncodeArrayStart(1)
			} else {
				yynn99 = 0
				for _, b := range yyq99 {
					if b {
						yynn99++
					}
				}
				r.EncodeMapStart(yynn99)
				yynn99 = 0
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq99[0] {
					yym101 := z.EncBinary()
					_ = yym101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq99[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym102 := z.EncBinary()
					_ = yym102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterName))
					}
				}
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym103 := z.DecBinary()
	_ = yym103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct104 := r.ContainerType()
		if yyct104 == codecSelferValueTypeMap1234 {
			yyl104 := r.ReadMapStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl104, d)
			}
		} else if yyct104 == codecSelferValueTypeArray1234 {
			yyl104 := r.ReadArrayStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys105Slc
	var yyhl105 bool = l >= 0
	for yyj105 := 0; ; yyj105++ {
		if yyhl105 {
			if yyj105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys105Slc = r.DecodeBytes(yys105Slc, true, true)
		yys105 := string(yys105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys105 {
		case "clusterName":
			if r.TryDecodeAsNil() {
				x.ClusterName = ""
			} else {
				x.ClusterName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys105)
		} // end switch yys105
	} // end for yyj105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj107 int
	var yyb107 bool
	var yyhl107 bool = l >= 0
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterName = ""
	} else {
		x.ClusterName = string(r.DecodeString())
	}
	for {
		yyj107++
		if yyhl107 {
			yyb107 = yyj107 > l
		} else {
			yyb107 = r.CheckBreak()
		}
		if yyb107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym109 := z.EncBinary()
		_ = yym109
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep110 := !z.EncBinary()
			yy2arr110 := z.EncBasicHandle().StructToArray
			var yyq110 [21]bool
			_, _, _ = yysep110, yyq110, yy2arr110
			const yyr110 bool = false
			yyq110[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq110[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq110[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq110[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq110[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq110[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq110[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq110[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq110[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq110[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq110[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq110[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq110[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq110[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq110[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq110[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq110[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq110[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq110[19] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq110[20] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			var yynn110 int
			if yyr110 || yy2arr110 {
				r.EncodeArrayStart(21)
			} else {
				yynn110 = 1
				for _, b := range yyq110 {
					if b {
						yynn110++
					}
				}
				r.EncodeMapStart(yynn110)
				yynn110 = 0
			}
			if yyr110 || yy2arr110 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym112 := z.EncBinary()
				_ = yym112
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym113 := z.EncBinary()
				_ = yym113
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn114 bool
			if x.VolumeSource.HostPath == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr110 || yy2arr110 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr110 || yy2arr110 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr110 || yy2arr110 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr110 || yy2arr110 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.GitRepo == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr110 || yy2arr110 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.Secret == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr110 || yy2arr110 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.NFS == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr110 || yy2arr110 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn121 bool
			if x.VolumeSource.ISCSI == nil {
				yyn121 = true
				goto LABEL121
			}
		LABEL121:
			if yyr110 || yy2arr110 {
				if yyn121 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn121 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn122 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn122 = true
				goto LABEL122
			}
		LABEL122:
			if yyr110 || yy2arr110 {
				if yyn122 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn122 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn123 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn123 = true
				goto LABEL123
			}
		LABEL123:
			if yyr110 || yy2arr110 {
				if yyn123 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn123 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn124 bool
			if x.VolumeSource.RBD == nil {
				yyn124 = true
				goto LABEL124
			}
		LABEL124:
			if yyr110 || yy2arr110 {
				if yyn124 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn124 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn125 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn125 = true
				goto LABEL125
			}
		LABEL125:
			if yyr110 || yy2arr110 {
				if yyn125 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn125 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn126 bool
			if x.VolumeSource.Cinder == nil {
				yyn126 = true
				goto LABEL126
			}
		LABEL126:
			if yyr110 || yy2arr110 {
				if yyn126 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn126 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn127 bool
			if x.VolumeSource.CephFS == nil {
				yyn127 = true
				goto LABEL127
			}
		LABEL127:
			if yyr110 || yy2arr110 {
				if yyn127 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn127 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn128 bool
			if x.VolumeSource.Flocker == nil {
				yyn128 = true
				goto LABEL128
			}
		LABEL128:
			if yyr110 || yy2arr110 {
				if yyn128 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn128 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn129 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn129 = true
				goto LABEL129
			}
		LABEL129:
			if yyr110 || yy2arr110 {
				if yyn129 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn129 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn130 bool
			if x.VolumeSource.FC == nil {
				yyn130 = true
				goto LABEL130
			}
		LABEL130:
			if yyr110 || yy2arr110 {
				if yyn130 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn130 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn131 bool
			if x.VolumeSource.AzureFile == nil {
				yyn131 = true
				goto LABEL131
			}
		LABEL131:
			if yyr110 || yy2arr110 {
				if yyn131 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn131 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn132 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn132 = true
				goto LABEL132
			}
		LABEL132:
			if yyr110 || yy2arr110 {
				if yyn132 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[19] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn132 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn133 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn133 = true
				goto LABEL133
			}
		LABEL133:
			if yyr110 || yy2arr110 {
				if yyn133 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq110[20] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq110[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn133 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr110 || yy2arr110 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym134 := z.DecBinary()
	_ = yym134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct135 := r.ContainerType()
		if yyct135 == codecSelferValueTypeMap1234 {
			yyl135 := r.ReadMapStart()
			if yyl135 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl135, d)
			}
		} else if yyct135 == codecSelferValueTypeArray1234 {
			yyl135 := r.ReadArrayStart()
			if yyl135 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl135, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys136Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys136Slc
	var yyhl136 bool = l >= 0
	for yyj136 := 0; ; yyj136++ {
		if yyhl136 {
			if yyj136 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys136Slc = r.DecodeBytes(yys136Slc, true, true)
		yys136 := string(yys136Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys136 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys136)
		} // end switch yys136
	} // end for yyj136
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj158 int
	var yyb158 bool
	var yyhl158 bool = l >= 0
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj158++
	if yyhl158 {
		yyb158 = yyj158 > l
	} else {
		yyb158 = r.CheckBreak()
	}
	if yyb158 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj158++
		if yyhl158 {
			yyb158 = yyj158 > l
		} else {
			yyb158 = r.CheckBreak()
		}
		if yyb158 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj158-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym180 := z.EncBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep181 := !z.EncBinary()
			yy2arr181 := z.EncBasicHandle().StructToArray
			var yyq181 [20]bool
			_, _, _ = yysep181, yyq181, yy2arr181
			const yyr181 bool = false
			yyq181[0] = x.HostPath != nil
			yyq181[1] = x.EmptyDir != nil
			yyq181[2] = x.GCEPersistentDisk != nil
			yyq181[3] = x.AWSElasticBlockStore != nil
			yyq181[4] = x.GitRepo != nil
			yyq181[5] = x.Secret != nil
			yyq181[6] = x.NFS != nil
			yyq181[7] = x.ISCSI != nil
			yyq181[8] = x.Glusterfs != nil
			yyq181[9] = x.PersistentVolumeClaim != nil
			yyq181[10] = x.RBD != nil
			yyq181[11] = x.FlexVolume != nil
			yyq181[12] = x.Cinder != nil
			yyq181[13] = x.CephFS != nil
			yyq181[14] = x.Flocker != nil
			yyq181[15] = x.DownwardAPI != nil
			yyq181[16] = x.FC != nil
			yyq181[17] = x.AzureFile != nil
			yyq181[18] = x.ConfigMap != nil
			yyq181[19] = x.VsphereVolume != nil
			var yynn181 int
			if yyr181 || yy2arr181 {
				r.EncodeArrayStart(20)
			} else {
				yynn181 = 0
				for _, b := range yyq181 {
					if b {
						yynn181++
					}
				}
				r.EncodeMapStart(yynn181)
				yynn181 = 0
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[18] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq181[19] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq181[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr181 || yy2arr181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym202 := z.DecBinary()
	_ = yym202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct203 := r.ContainerType()
		if yyct203 == codecSelferValueTypeMap1234 {
			yyl203 := r.ReadMapStart()
			if yyl203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl203, d)
			}
		} else if yyct203 == codecSelferValueTypeArray1234 {
			yyl203 := r.ReadArrayStart()
			if yyl203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys204Slc
	var yyhl204 bool = l >= 0
	for yyj204 := 0; ; yyj204++ {
		if yyhl204 {
			if yyj204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys204Slc = r.DecodeBytes(yys204Slc, true, true)
		yys204 := string(yys204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys204 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys204)
		} // end switch yys204
	} // end for yyj204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj225 int
	var yyb225 bool
	var yyhl225 bool = l >= 0
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj225++
		if yyhl225 {
			yyb225 = yyj225 > l
		} else {
			yyb225 = r.CheckBreak()
		}
		if yyb225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym246 := z.EncBinary()
		_ = yym246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep247 := !z.EncBinary()
			yy2arr247 := z.EncBasicHandle().StructToArray
			var yyq247 [14]bool
			_, _, _ = yysep247, yyq247, yy2arr247
			const yyr247 bool = false
			yyq247[0] = x.GCEPersistentDisk != nil
			yyq247[1] = x.AWSElasticBlockStore != nil
			yyq247[2] = x.HostPath != nil
			yyq247[3] = x.Glusterfs != nil
			yyq247[4] = x.NFS != nil
			yyq247[5] = x.RBD != nil
			yyq247[6] = x.ISCSI != nil
			yyq247[7] = x.FlexVolume != nil
			yyq247[8] = x.Cinder != nil
			yyq247[9] = x.CephFS != nil
			yyq247[10] = x.FC != nil
			yyq247[11] = x.Flocker != nil
			yyq247[12] = x.AzureFile != nil
			yyq247[13] = x.VsphereVolume != nil
			var yynn247 int
			if yyr247 || yy2arr247 {
				r.EncodeArrayStart(14)
			} else {
				yynn247 = 0
				for _, b := range yyq247 {
					if b {
						yynn247++
					}
				}
				r.EncodeMapStart(yynn247)
				yynn247 = 0
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[7] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[8] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[9] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[10] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[11] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq247[13] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq247[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr247 || yy2arr247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym262 := z.DecBinary()
	_ = yym262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct263 := r.ContainerType()
		if yyct263 == codecSelferValueTypeMap1234 {
			yyl263 := r.ReadMapStart()
			if yyl263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl263, d)
			}
		} else if yyct263 == codecSelferValueTypeArray1234 {
			yyl263 := r.ReadArrayStart()
			if yyl263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys264Slc
	var yyhl264 bool = l >= 0
	for yyj264 := 0; ; yyj264++ {
		if yyhl264 {
			if yyj264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys264Slc = r.DecodeBytes(yys264Slc, true, true)
		yys264 := string(yys264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys264 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys264)
		} // end switch yys264
	} // end for yyj264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj279 int
	var yyb279 bool
	var yyhl279 bool = l >= 0
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj279++
	if yyhl279 {
		yyb279 = yyj279 > l
	} else {
		yyb279 = r.CheckBreak()
	}
	if yyb279 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj279++
		if yyhl279 {
			yyb279 = yyj279 > l
		} else {
			yyb279 = r.CheckBreak()
		}
		if yyb279 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj279-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym294 := z.EncBinary()
		_ = yym294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep295 := !z.EncBinary()
			yy2arr295 := z.EncBasicHandle().StructToArray
			var yyq295 [2]bool
			_, _, _ = yysep295, yyq295, yy2arr295
			const yyr295 bool = false
			yyq295[1] = x.ReadOnly != false
			var yynn295 int
			if yyr295 || yy2arr295 {
				r.EncodeArrayStart(2)
			} else {
				yynn295 = 1
				for _, b := range yyq295 {
					if b {
						yynn295++
					}
				}
				r.EncodeMapStart(yynn295)
				yynn295 = 0
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym297 := z.EncBinary()
				_ = yym297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym298 := z.EncBinary()
				_ = yym298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq295[1] {
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq295[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym301 := z.EncBinary()
					_ = yym301
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym302 := z.DecBinary()
	_ = yym302
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct303 := r.ContainerType()
		if yyct303 == codecSelferValueTypeMap1234 {
			yyl303 := r.ReadMapStart()
			if yyl303 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl303, d)
			}
		} else if yyct303 == codecSelferValueTypeArray1234 {
			yyl303 := r.ReadArrayStart()
			if yyl303 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl303, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys304Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys304Slc
	var yyhl304 bool = l >= 0
	for yyj304 := 0; ; yyj304++ {
		if yyhl304 {
			if yyj304 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys304Slc = r.DecodeBytes(yys304Slc, true, true)
		yys304 := string(yys304Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys304 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys304)
		} // end switch yys304
	} // end for yyj304
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj307 int
	var yyb307 bool
	var yyhl307 bool = l >= 0
	yyj307++
	if yyhl307 {
		yyb307 = yyj307 > l
	} else {
		yyb307 = r.CheckBreak()
	}
	if yyb307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj307++
	if yyhl307 {
		yyb307 = yyj307 > l
	} else {
		yyb307 = r.CheckBreak()
	}
	if yyb307 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj307++
		if yyhl307 {
			yyb307 = yyj307 > l
		} else {
			yyb307 = r.CheckBreak()
		}
		if yyb307 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj307-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym310 := z.EncBinary()
		_ = yym310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep311 := !z.EncBinary()
			yy2arr311 := z.EncBasicHandle().StructToArray
			var yyq311 [5]bool
			_, _, _ = yysep311, yyq311, yy2arr311
			const yyr311 bool = false
			yyq311[0] = x.Kind != ""
			yyq311[1] = x.APIVersion != ""
			yyq311[2] = true
			yyq311[3] = true
			yyq311[4] = true
			var yynn311 int
			if yyr311 || yy2arr311 {
				r.EncodeArrayStart(5)
			} else {
				yynn311 = 0
				for _, b := range yyq311 {
					if b {
						yynn311++
					}
				}
				r.EncodeMapStart(yynn311)
				yynn311 = 0
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[0] {
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq311[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym314 := z.EncBinary()
					_ = yym314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[1] {
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq311[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym317 := z.EncBinary()
					_ = yym317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[2] {
					yy319 := &x.ObjectMeta
					yy319.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy320 := &x.ObjectMeta
					yy320.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[3] {
					yy322 := &x.Spec
					yy322.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy323 := &x.Spec
					yy323.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[4] {
					yy325 := &x.Status
					yy325.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy326 := &x.Status
					yy326.CodecEncodeSelf(e)
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym327 := z.DecBinary()
	_ = yym327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct328 := r.ContainerType()
		if yyct328 == codecSelferValueTypeMap1234 {
			yyl328 := r.ReadMapStart()
			if yyl328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl328, d)
			}
		} else if yyct328 == codecSelferValueTypeArray1234 {
			yyl328 := r.ReadArrayStart()
			if yyl328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys329Slc
	var yyhl329 bool = l >= 0
	for yyj329 := 0; ; yyj329++ {
		if yyhl329 {
			if yyj329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys329Slc = r.DecodeBytes(yys329Slc, true, true)
		yys329 := string(yys329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv332 := &x.ObjectMeta
				yyv332.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv333 := &x.Spec
				yyv333.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv334 := &x.Status
				yyv334.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys329)
		} // end switch yys329
	} // end for yyj329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj335 int
	var yyb335 bool
	var yyhl335 bool = l >= 0
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv338 := &x.ObjectMeta
		yyv338.CodecDecodeSelf(d)
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv339 := &x.Spec
		yyv339.CodecDecodeSelf(d)
	}
	yyj335++
	if yyhl335 {
		yyb335 = yyj335 > l
	} else {
		yyb335 = r.CheckBreak()
	}
	if yyb335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv340 := &x.Status
		yyv340.CodecDecodeSelf(d)
	}
	for {
		yyj335++
		if yyhl335 {
			yyb335 = yyj335 > l
		} else {
			yyb335 = r.CheckBreak()
		}
		if yyb335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym341 := z.EncBinary()
		_ = yym341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep342 := !z.EncBinary()
			yy2arr342 := z.EncBasicHandle().StructToArray
			var yyq342 [18]bool
			_, _, _ = yysep342, yyq342, yy2arr342
			const yyr342 bool = false
			yyq342[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq342[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq342[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq342[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq342[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq342[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq342[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq342[8] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq342[9] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq342[10] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq342[11] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq342[12] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq342[13] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq342[14] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq342[15] = len(x.AccessModes) != 0
			yyq342[16] = x.ClaimRef != nil
			yyq342[17] = x.PersistentVolumeReclaimPolicy != ""
			var yynn342 int
			if yyr342 || yy2arr342 {
				r.EncodeArrayStart(18)
			} else {
				yynn342 = 1
				for _, b := range yyq342 {
					if b {
						yynn342++
					}
				}
				r.EncodeMapStart(yynn342)
				yynn342 = 0
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn344 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn344 = true
				goto LABEL344
			}
		LABEL344:
			if yyr342 || yy2arr342 {
				if yyn344 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn344 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn345 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn345 = true
				goto LABEL345
			}
		LABEL345:
			if yyr342 || yy2arr342 {
				if yyn345 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn345 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn346 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn346 = true
				goto LABEL346
			}
		LABEL346:
			if yyr342 || yy2arr342 {
				if yyn346 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn346 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn347 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn347 = true
				goto LABEL347
			}
		LABEL347:
			if yyr342 || yy2arr342 {
				if yyn347 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn347 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn348 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn348 = true
				goto LABEL348
			}
		LABEL348:
			if yyr342 || yy2arr342 {
				if yyn348 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn348 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn349 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn349 = true
				goto LABEL349
			}
		LABEL349:
			if yyr342 || yy2arr342 {
				if yyn349 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn349 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn350 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn350 = true
				goto LABEL350
			}
		LABEL350:
			if yyr342 || yy2arr342 {
				if yyn350 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn350 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn351 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn351 = true
				goto LABEL351
			}
		LABEL351:
			if yyr342 || yy2arr342 {
				if yyn351 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[8] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn351 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn352 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn352 = true
				goto LABEL352
			}
		LABEL352:
			if yyr342 || yy2arr342 {
				if yyn352 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[9] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn352 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr342 || yy2arr342 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[10] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn354 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn354 = true
				goto LABEL354
			}
		LABEL354:
			if yyr342 || yy2arr342 {
				if yyn354 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[11] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn354 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn355 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn355 = true
				goto LABEL355
			}
		LABEL355:
			if yyr342 || yy2arr342 {
				if yyn355 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[12] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn355 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn356 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn356 = true
				goto LABEL356
			}
		LABEL356:
			if yyr342 || yy2arr342 {
				if yyn356 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[13] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn356 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn357 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn357 = true
				goto LABEL357
			}
		LABEL357:
			if yyr342 || yy2arr342 {
				if yyn357 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq342[14] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq342[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn357 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[15] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym359 := z.EncBinary()
						_ = yym359
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq342[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym360 := z.EncBinary()
						_ = yym360
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[16] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq342[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[17] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym363 := z.DecBinary()
	_ = yym363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct364 := r.ContainerType()
		if yyct364 == codecSelferValueTypeMap1234 {
			yyl364 := r.ReadMapStart()
			if yyl364 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl364, d)
			}
		} else if yyct364 == codecSelferValueTypeArray1234 {
			yyl364 := r.ReadArrayStart()
			if yyl364 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys365Slc
	var yyhl365 bool = l >= 0
	for yyj365 := 0; ; yyj365++ {
		if yyhl365 {
			if yyj365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys365Slc = r.DecodeBytes(yys365Slc, true, true)
		yys365 := string(yys365Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys365 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv366 := &x.Capacity
				yyv366.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv381 := &x.AccessModes
				yym382 := z.DecBinary()
				_ = yym382
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv381), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys365)
		} // end switch yys365
	} // end for yyj365
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj385 int
	var yyb385 bool
	var yyhl385 bool = l >= 0
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv386 := &x.Capacity
		yyv386.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv401 := &x.AccessModes
		yym402 := z.DecBinary()
		_ = yym402
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv401), d)
		}
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj385++
		if yyhl385 {
			yyb385 = yyj385 > l
		} else {
			yyb385 = r.CheckBreak()
		}
		if yyb385 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj385-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym405 := z.EncBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym406 := z.DecBinary()
	_ = yym406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym407 := z.EncBinary()
		_ = yym407
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep408 := !z.EncBinary()
			yy2arr408 := z.EncBasicHandle().StructToArray
			var yyq408 [3]bool
			_, _, _ = yysep408, yyq408, yy2arr408
			const yyr408 bool = false
			yyq408[0] = x.Phase != ""
			yyq408[1] = x.Message != ""
			yyq408[2] = x.Reason != ""
			var yynn408 int
			if yyr408 || yy2arr408 {
				r.EncodeArrayStart(3)
			} else {
				yynn408 = 0
				for _, b := range yyq408 {
					if b {
						yynn408++
					}
				}
				r.EncodeMapStart(yynn408)
				yynn408 = 0
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq408[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[1] {
					yym411 := z.EncBinary()
					_ = yym411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq408[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym412 := z.EncBinary()
					_ = yym412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[2] {
					yym414 := z.EncBinary()
					_ = yym414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq408[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym416 := z.DecBinary()
	_ = yym416
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct417 := r.ContainerType()
		if yyct417 == codecSelferValueTypeMap1234 {
			yyl417 := r.ReadMapStart()
			if yyl417 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl417, d)
			}
		} else if yyct417 == codecSelferValueTypeArray1234 {
			yyl417 := r.ReadArrayStart()
			if yyl417 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl417, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys418Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys418Slc
	var yyhl418 bool = l >= 0
	for yyj418 := 0; ; yyj418++ {
		if yyhl418 {
			if yyj418 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys418Slc = r.DecodeBytes(yys418Slc, true, true)
		yys418 := string(yys418Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys418 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys418)
		} // end switch yys418
	} // end for yyj418
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj422 int
	var yyb422 bool
	var yyhl422 bool = l >= 0
	yyj422++
	if yyhl422 {
		yyb422 = yyj422 > l
	} else {
		yyb422 = r.CheckBreak()
	}
	if yyb422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj422++
	if yyhl422 {
		yyb422 = yyj422 > l
	} else {
		yyb422 = r.CheckBreak()
	}
	if yyb422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj422++
	if yyhl422 {
		yyb422 = yyj422 > l
	} else {
		yyb422 = r.CheckBreak()
	}
	if yyb422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj422++
		if yyhl422 {
			yyb422 = yyj422 > l
		} else {
			yyb422 = r.CheckBreak()
		}
		if yyb422 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj422-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym426 := z.EncBinary()
		_ = yym426
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep427 := !z.EncBinary()
			yy2arr427 := z.EncBasicHandle().StructToArray
			var yyq427 [4]bool
			_, _, _ = yysep427, yyq427, yy2arr427
			const yyr427 bool = false
			yyq427[0] = x.Kind != ""
			yyq427[1] = x.APIVersion != ""
			yyq427[2] = true
			var yynn427 int
			if yyr427 || yy2arr427 {
				r.EncodeArrayStart(4)
			} else {
				yynn427 = 1
				for _, b := range yyq427 {
					if b {
						yynn427++
					}
				}
				r.EncodeMapStart(yynn427)
				yynn427 = 0
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq427[0] {
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq427[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq427[1] {
					yym432 := z.EncBinary()
					_ = yym432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq427[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq427[2] {
					yy435 := &x.ListMeta
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else if z.HasExtensions() && z.EncExt(yy435) {
					} else {
						z.EncFallback(yy435)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq427[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy437 := &x.ListMeta
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else if z.HasExtensions() && z.EncExt(yy437) {
					} else {
						z.EncFallback(yy437)
					}
				}
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr427 || yy2arr427 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym442 := z.DecBinary()
	_ = yym442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct443 := r.ContainerType()
		if yyct443 == codecSelferValueTypeMap1234 {
			yyl443 := r.ReadMapStart()
			if yyl443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl443, d)
			}
		} else if yyct443 == codecSelferValueTypeArray1234 {
			yyl443 := r.ReadArrayStart()
			if yyl443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys444Slc
	var yyhl444 bool = l >= 0
	for yyj444 := 0; ; yyj444++ {
		if yyhl444 {
			if yyj444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys444Slc = r.DecodeBytes(yys444Slc, true, true)
		yys444 := string(yys444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys444 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv447 := &x.ListMeta
				yym448 := z.DecBinary()
				_ = yym448
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv447) {
				} else {
					z.DecFallback(yyv447, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv449 := &x.Items
				yym450 := z.DecBinary()
				_ = yym450
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv449), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys444)
		} // end switch yys444
	} // end for yyj444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj451 int
	var yyb451 bool
	var yyhl451 bool = l >= 0
	yyj451++
	if yyhl451 {
		yyb451 = yyj451 > l
	} else {
		yyb451 = r.CheckBreak()
	}
	if yyb451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj451++
	if yyhl451 {
		yyb451 = yyj451 > l
	} else {
		yyb451 = r.CheckBreak()
	}
	if yyb451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj451++
	if yyhl451 {
		yyb451 = yyj451 > l
	} else {
		yyb451 = r.CheckBreak()
	}
	if yyb451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv454 := &x.ListMeta
		yym455 := z.DecBinary()
		_ = yym455
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv454) {
		} else {
			z.DecFallback(yyv454, false)
		}
	}
	yyj451++
	if yyhl451 {
		yyb451 = yyj451 > l
	} else {
		yyb451 = r.CheckBreak()
	}
	if yyb451 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv456 := &x.Items
		yym457 := z.DecBinary()
		_ = yym457
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv456), d)
		}
	}
	for {
		yyj451++
		if yyhl451 {
			yyb451 = yyj451 > l
		} else {
			yyb451 = r.CheckBreak()
		}
		if yyb451 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj451-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym458 := z.EncBinary()
		_ = yym458
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep459 := !z.EncBinary()
			yy2arr459 := z.EncBasicHandle().StructToArray
			var yyq459 [5]bool
			_, _, _ = yysep459, yyq459, yy2arr459
			const yyr459 bool = false
			yyq459[0] = x.Kind != ""
			yyq459[1] = x.APIVersion != ""
			yyq459[2] = true
			yyq459[3] = true
			yyq459[4] = true
			var yynn459 int
			if yyr459 || yy2arr459 {
				r.EncodeArrayStart(5)
			} else {
				yynn459 = 0
				for _, b := range yyq459 {
					if b {
						yynn459++
					}
				}
				r.EncodeMapStart(yynn459)
				yynn459 = 0
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[0] {
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq459[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym462 := z.EncBinary()
					_ = yym462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[1] {
					yym464 := z.EncBinary()
					_ = yym464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq459[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[2] {
					yy467 := &x.ObjectMeta
					yy467.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq459[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy468 := &x.ObjectMeta
					yy468.CodecEncodeSelf(e)
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[3] {
					yy470 := &x.Spec
					yy470.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq459[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy471 := &x.Spec
					yy471.CodecEncodeSelf(e)
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq459[4] {
					yy473 := &x.Status
					yy473.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq459[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy474 := &x.Status
					yy474.CodecEncodeSelf(e)
				}
			}
			if yyr459 || yy2arr459 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym475 := z.DecBinary()
	_ = yym475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct476 := r.ContainerType()
		if yyct476 == codecSelferValueTypeMap1234 {
			yyl476 := r.ReadMapStart()
			if yyl476 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl476, d)
			}
		} else if yyct476 == codecSelferValueTypeArray1234 {
			yyl476 := r.ReadArrayStart()
			if yyl476 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl476, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys477Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys477Slc
	var yyhl477 bool = l >= 0
	for yyj477 := 0; ; yyj477++ {
		if yyhl477 {
			if yyj477 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys477Slc = r.DecodeBytes(yys477Slc, true, true)
		yys477 := string(yys477Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys477 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv480 := &x.ObjectMeta
				yyv480.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv481 := &x.Spec
				yyv481.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv482 := &x.Status
				yyv482.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys477)
		} // end switch yys477
	} // end for yyj477
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj483 int
	var yyb483 bool
	var yyhl483 bool = l >= 0
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv486 := &x.ObjectMeta
		yyv486.CodecDecodeSelf(d)
	}
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv487 := &x.Spec
		yyv487.CodecDecodeSelf(d)
	}
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv488 := &x.Status
		yyv488.CodecDecodeSelf(d)
	}
	for {
		yyj483++
		if yyhl483 {
			yyb483 = yyj483 > l
		} else {
			yyb483 = r.CheckBreak()
		}
		if yyb483 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj483-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym489 := z.EncBinary()
		_ = yym489
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep490 := !z.EncBinary()
			yy2arr490 := z.EncBasicHandle().StructToArray
			var yyq490 [4]bool
			_, _, _ = yysep490, yyq490, yy2arr490
			const yyr490 bool = false
			yyq490[0] = x.Kind != ""
			yyq490[1] = x.APIVersion != ""
			yyq490[2] = true
			var yynn490 int
			if yyr490 || yy2arr490 {
				r.EncodeArrayStart(4)
			} else {
				yynn490 = 1
				for _, b := range yyq490 {
					if b {
						yynn490++
					}
				}
				r.EncodeMapStart(yynn490)
				yynn490 = 0
			}
			if yyr490 || yy2arr490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq490[0] {
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq490[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr490 || yy2arr490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq490[1] {
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq490[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr490 || yy2arr490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq490[2] {
					yy498 := &x.ListMeta
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else if z.HasExtensions() && z.EncExt(yy498) {
					} else {
						z.EncFallback(yy498)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq490[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy500 := &x.ListMeta
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else if z.HasExtensions() && z.EncExt(yy500) {
					} else {
						z.EncFallback(yy500)
					}
				}
			}
			if yyr490 || yy2arr490 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym503 := z.EncBinary()
					_ = yym503
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr490 || yy2arr490 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym505 := z.DecBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct506 := r.ContainerType()
		if yyct506 == codecSelferValueTypeMap1234 {
			yyl506 := r.ReadMapStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl506, d)
			}
		} else if yyct506 == codecSelferValueTypeArray1234 {
			yyl506 := r.ReadArrayStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys507Slc
	var yyhl507 bool = l >= 0
	for yyj507 := 0; ; yyj507++ {
		if yyhl507 {
			if yyj507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys507Slc = r.DecodeBytes(yys507Slc, true, true)
		yys507 := string(yys507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys507 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv510 := &x.ListMeta
				yym511 := z.DecBinary()
				_ = yym511
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv510) {
				} else {
					z.DecFallback(yyv510, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv512 := &x.Items
				yym513 := z.DecBinary()
				_ = yym513
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv512), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys507)
		} // end switch yys507
	} // end for yyj507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj514 int
	var yyb514 bool
	var yyhl514 bool = l >= 0
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv517 := &x.ListMeta
		yym518 := z.DecBinary()
		_ = yym518
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv517) {
		} else {
			z.DecFallback(yyv517, false)
		}
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv519 := &x.Items
		yym520 := z.DecBinary()
		_ = yym520
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv519), d)
		}
	}
	for {
		yyj514++
		if yyhl514 {
			yyb514 = yyj514 > l
		} else {
			yyb514 = r.CheckBreak()
		}
		if yyb514 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj514-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym521 := z.EncBinary()
		_ = yym521
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep522 := !z.EncBinary()
			yy2arr522 := z.EncBasicHandle().StructToArray
			var yyq522 [4]bool
			_, _, _ = yysep522, yyq522, yy2arr522
			const yyr522 bool = false
			yyq522[0] = len(x.AccessModes) != 0
			yyq522[1] = x.Selector != nil
			yyq522[2] = true
			yyq522[3] = x.VolumeName != ""
			var yynn522 int
			if yyr522 || yy2arr522 {
				r.EncodeArrayStart(4)
			} else {
				yynn522 = 0
				for _, b := range yyq522 {
					if b {
						yynn522++
					}
				}
				r.EncodeMapStart(yynn522)
				yynn522 = 0
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym524 := z.EncBinary()
						_ = yym524
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq522[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym525 := z.EncBinary()
						_ = yym525
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym527 := z.EncBinary()
						_ = yym527
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq522[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym528 := z.EncBinary()
						_ = yym528
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[2] {
					yy530 := &x.Resources
					yy530.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq522[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy531 := &x.Resources
					yy531.CodecEncodeSelf(e)
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq522[3] {
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq522[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym534 := z.EncBinary()
					_ = yym534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr522 || yy2arr522 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym535 := z.DecBinary()
	_ = yym535
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct536 := r.ContainerType()
		if yyct536 == codecSelferValueTypeMap1234 {
			yyl536 := r.ReadMapStart()
			if yyl536 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl536, d)
			}
		} else if yyct536 == codecSelferValueTypeArray1234 {
			yyl536 := r.ReadArrayStart()
			if yyl536 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl536, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys537Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys537Slc
	var yyhl537 bool = l >= 0
	for yyj537 := 0; ; yyj537++ {
		if yyhl537 {
			if yyj537 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys537Slc = r.DecodeBytes(yys537Slc, true, true)
		yys537 := string(yys537Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys537 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv538 := &x.AccessModes
				yym539 := z.DecBinary()
				_ = yym539
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv538), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym541 := z.DecBinary()
				_ = yym541
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv542 := &x.Resources
				yyv542.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys537)
		} // end switch yys537
	} // end for yyj537
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv545 := &x.AccessModes
		yym546 := z.DecBinary()
		_ = yym546
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv545), d)
		}
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym548 := z.DecBinary()
		_ = yym548
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv549 := &x.Resources
		yyv549.CodecDecodeSelf(d)
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym551 := z.EncBinary()
		_ = yym551
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep552 := !z.EncBinary()
			yy2arr552 := z.EncBasicHandle().StructToArray
			var yyq552 [3]bool
			_, _, _ = yysep552, yyq552, yy2arr552
			const yyr552 bool = false
			yyq552[0] = x.Phase != ""
			yyq552[1] = len(x.AccessModes) != 0
			yyq552[2] = len(x.Capacity) != 0
			var yynn552 int
			if yyr552 || yy2arr552 {
				r.EncodeArrayStart(3)
			} else {
				yynn552 = 0
				for _, b := range yyq552 {
					if b {
						yynn552++
					}
				}
				r.EncodeMapStart(yynn552)
				yynn552 = 0
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq552[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq552[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq552[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym555 := z.EncBinary()
						_ = yym555
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq552[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym556 := z.EncBinary()
						_ = yym556
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq552[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq552[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr552 || yy2arr552 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym558 := z.DecBinary()
	_ = yym558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct559 := r.ContainerType()
		if yyct559 == codecSelferValueTypeMap1234 {
			yyl559 := r.ReadMapStart()
			if yyl559 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl559, d)
			}
		} else if yyct559 == codecSelferValueTypeArray1234 {
			yyl559 := r.ReadArrayStart()
			if yyl559 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl559, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys560Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys560Slc
	var yyhl560 bool = l >= 0
	for yyj560 := 0; ; yyj560++ {
		if yyhl560 {
			if yyj560 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys560Slc = r.DecodeBytes(yys560Slc, true, true)
		yys560 := string(yys560Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys560 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv562 := &x.AccessModes
				yym563 := z.DecBinary()
				_ = yym563
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv562), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv564 := &x.Capacity
				yyv564.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys560)
		} // end switch yys560
	} // end for yyj560
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj565 int
	var yyb565 bool
	var yyhl565 bool = l >= 0
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv567 := &x.AccessModes
		yym568 := z.DecBinary()
		_ = yym568
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv567), d)
		}
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv569 := &x.Capacity
		yyv569.CodecDecodeSelf(d)
	}
	for {
		yyj565++
		if yyhl565 {
			yyb565 = yyj565 > l
		} else {
			yyb565 = r.CheckBreak()
		}
		if yyb565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym570 := z.EncBinary()
	_ = yym570
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym571 := z.DecBinary()
	_ = yym571
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym572 := z.EncBinary()
	_ = yym572
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym574 := z.EncBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym575 := z.DecBinary()
	_ = yym575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym576 := z.EncBinary()
		_ = yym576
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep577 := !z.EncBinary()
			yy2arr577 := z.EncBasicHandle().StructToArray
			var yyq577 [1]bool
			_, _, _ = yysep577, yyq577, yy2arr577
			const yyr577 bool = false
			var yynn577 int
			if yyr577 || yy2arr577 {
				r.EncodeArrayStart(1)
			} else {
				yynn577 = 1
				for _, b := range yyq577 {
					if b {
						yynn577++
					}
				}
				r.EncodeMapStart(yynn577)
				yynn577 = 0
			}
			if yyr577 || yy2arr577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym579 := z.EncBinary()
				_ = yym579
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym580 := z.EncBinary()
				_ = yym580
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr577 || yy2arr577 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym581 := z.DecBinary()
	_ = yym581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct582 := r.ContainerType()
		if yyct582 == codecSelferValueTypeMap1234 {
			yyl582 := r.ReadMapStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl582, d)
			}
		} else if yyct582 == codecSelferValueTypeArray1234 {
			yyl582 := r.ReadArrayStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys583Slc
	var yyhl583 bool = l >= 0
	for yyj583 := 0; ; yyj583++ {
		if yyhl583 {
			if yyj583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys583Slc = r.DecodeBytes(yys583Slc, true, true)
		yys583 := string(yys583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys583 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys583)
		} // end switch yys583
	} // end for yyj583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj585 int
	var yyb585 bool
	var yyhl585 bool = l >= 0
	yyj585++
	if yyhl585 {
		yyb585 = yyj585 > l
	} else {
		yyb585 = r.CheckBreak()
	}
	if yyb585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj585++
		if yyhl585 {
			yyb585 = yyj585 > l
		} else {
			yyb585 = r.CheckBreak()
		}
		if yyb585 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj585-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym587 := z.EncBinary()
		_ = yym587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep588 := !z.EncBinary()
			yy2arr588 := z.EncBasicHandle().StructToArray
			var yyq588 [1]bool
			_, _, _ = yysep588, yyq588, yy2arr588
			const yyr588 bool = false
			yyq588[0] = x.Medium != ""
			var yynn588 int
			if yyr588 || yy2arr588 {
				r.EncodeArrayStart(1)
			} else {
				yynn588 = 0
				for _, b := range yyq588 {
					if b {
						yynn588++
					}
				}
				r.EncodeMapStart(yynn588)
				yynn588 = 0
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq588[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq588[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym590 := z.DecBinary()
	_ = yym590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct591 := r.ContainerType()
		if yyct591 == codecSelferValueTypeMap1234 {
			yyl591 := r.ReadMapStart()
			if yyl591 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl591, d)
			}
		} else if yyct591 == codecSelferValueTypeArray1234 {
			yyl591 := r.ReadArrayStart()
			if yyl591 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys592Slc
	var yyhl592 bool = l >= 0
	for yyj592 := 0; ; yyj592++ {
		if yyhl592 {
			if yyj592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys592Slc = r.DecodeBytes(yys592Slc, true, true)
		yys592 := string(yys592Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys592 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys592)
		} // end switch yys592
	} // end for yyj592
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj594 int
	var yyb594 bool
	var yyhl594 bool = l >= 0
	yyj594++
	if yyhl594 {
		yyb594 = yyj594 > l
	} else {
		yyb594 = r.CheckBreak()
	}
	if yyb594 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj594++
		if yyhl594 {
			yyb594 = yyj594 > l
		} else {
			yyb594 = r.CheckBreak()
		}
		if yyb594 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj594-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym596 := z.EncBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym597 := z.DecBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym598 := z.EncBinary()
	_ = yym598
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym600 := z.EncBinary()
		_ = yym600
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep601 := !z.EncBinary()
			yy2arr601 := z.EncBasicHandle().StructToArray
			var yyq601 [4]bool
			_, _, _ = yysep601, yyq601, yy2arr601
			const yyr601 bool = false
			yyq601[1] = x.FSType != ""
			yyq601[2] = x.Partition != 0
			yyq601[3] = x.ReadOnly != false
			var yynn601 int
			if yyr601 || yy2arr601 {
				r.EncodeArrayStart(4)
			} else {
				yynn601 = 1
				for _, b := range yyq601 {
					if b {
						yynn601++
					}
				}
				r.EncodeMapStart(yynn601)
				yynn601 = 0
			}
			if yyr601 || yy2arr601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym603 := z.EncBinary()
				_ = yym603
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym604 := z.EncBinary()
				_ = yym604
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr601 || yy2arr601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq601[1] {
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq601[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym607 := z.EncBinary()
					_ = yym607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr601 || yy2arr601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq601[2] {
					yym609 := z.EncBinary()
					_ = yym609
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq601[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr601 || yy2arr601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq601[3] {
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq601[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr601 || yy2arr601 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym614 := z.DecBinary()
	_ = yym614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct615 := r.ContainerType()
		if yyct615 == codecSelferValueTypeMap1234 {
			yyl615 := r.ReadMapStart()
			if yyl615 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl615, d)
			}
		} else if yyct615 == codecSelferValueTypeArray1234 {
			yyl615 := r.ReadArrayStart()
			if yyl615 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl615, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys616Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys616Slc
	var yyhl616 bool = l >= 0
	for yyj616 := 0; ; yyj616++ {
		if yyhl616 {
			if yyj616 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys616Slc = r.DecodeBytes(yys616Slc, true, true)
		yys616 := string(yys616Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys616 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys616)
		} // end switch yys616
	} // end for yyj616
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj621 int
	var yyb621 bool
	var yyhl621 bool = l >= 0
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj621++
	if yyhl621 {
		yyb621 = yyj621 > l
	} else {
		yyb621 = r.CheckBreak()
	}
	if yyb621 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj621++
		if yyhl621 {
			yyb621 = yyj621 > l
		} else {
			yyb621 = r.CheckBreak()
		}
		if yyb621 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj621-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym626 := z.EncBinary()
		_ = yym626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep627 := !z.EncBinary()
			yy2arr627 := z.EncBasicHandle().StructToArray
			var yyq627 [6]bool
			_, _, _ = yysep627, yyq627, yy2arr627
			const yyr627 bool = false
			yyq627[0] = x.TargetPortal != ""
			yyq627[1] = x.IQN != ""
			yyq627[2] = x.Lun != 0
			yyq627[3] = x.ISCSIInterface != ""
			yyq627[4] = x.FSType != ""
			yyq627[5] = x.ReadOnly != false
			var yynn627 int
			if yyr627 || yy2arr627 {
				r.EncodeArrayStart(6)
			} else {
				yynn627 = 0
				for _, b := range yyq627 {
					if b {
						yynn627++
					}
				}
				r.EncodeMapStart(yynn627)
				yynn627 = 0
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[0] {
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[1] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq627[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[2] {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq627[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[3] {
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq627[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[4] {
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq627[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[5] {
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq627[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym646 := z.DecBinary()
	_ = yym646
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct647 := r.ContainerType()
		if yyct647 == codecSelferValueTypeMap1234 {
			yyl647 := r.ReadMapStart()
			if yyl647 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl647, d)
			}
		} else if yyct647 == codecSelferValueTypeArray1234 {
			yyl647 := r.ReadArrayStart()
			if yyl647 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl647, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys648Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys648Slc
	var yyhl648 bool = l >= 0
	for yyj648 := 0; ; yyj648++ {
		if yyhl648 {
			if yyj648 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys648Slc = r.DecodeBytes(yys648Slc, true, true)
		yys648 := string(yys648Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys648 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys648)
		} // end switch yys648
	} // end for yyj648
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj655 int
	var yyb655 bool
	var yyhl655 bool = l >= 0
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj655++
	if yyhl655 {
		yyb655 = yyj655 > l
	} else {
		yyb655 = r.CheckBreak()
	}
	if yyb655 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj655++
		if yyhl655 {
			yyb655 = yyj655 > l
		} else {
			yyb655 = r.CheckBreak()
		}
		if yyb655 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj655-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym662 := z.EncBinary()
		_ = yym662
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep663 := !z.EncBinary()
			yy2arr663 := z.EncBasicHandle().StructToArray
			var yyq663 [4]bool
			_, _, _ = yysep663, yyq663, yy2arr663
			const yyr663 bool = false
			yyq663[2] = x.FSType != ""
			yyq663[3] = x.ReadOnly != false
			var yynn663 int
			if yyr663 || yy2arr663 {
				r.EncodeArrayStart(4)
			} else {
				yynn663 = 2
				for _, b := range yyq663 {
					if b {
						yynn663++
					}
				}
				r.EncodeMapStart(yynn663)
				yynn663 = 0
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy668 := *x.Lun
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeInt(int64(yy668))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy670 := *x.Lun
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeInt(int64(yy670))
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq663[2] {
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq663[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq663[3] {
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq663[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym678 := z.DecBinary()
	_ = yym678
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct679 := r.ContainerType()
		if yyct679 == codecSelferValueTypeMap1234 {
			yyl679 := r.ReadMapStart()
			if yyl679 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl679, d)
			}
		} else if yyct679 == codecSelferValueTypeArray1234 {
			yyl679 := r.ReadArrayStart()
			if yyl679 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl679, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys680Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys680Slc
	var yyhl680 bool = l >= 0
	for yyj680 := 0; ; yyj680++ {
		if yyhl680 {
			if yyj680 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys680Slc = r.DecodeBytes(yys680Slc, true, true)
		yys680 := string(yys680Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys680 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv681 := &x.TargetWWNs
				yym682 := z.DecBinary()
				_ = yym682
				if false {
				} else {
					z.F.DecSliceStringX(yyv681, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym684 := z.DecBinary()
				_ = yym684
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys680)
		} // end switch yys680
	} // end for yyj680
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj687 int
	var yyb687 bool
	var yyhl687 bool = l >= 0
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv688 := &x.TargetWWNs
		yym689 := z.DecBinary()
		_ = yym689
		if false {
		} else {
			z.F.DecSliceStringX(yyv688, false, d)
		}
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym691 := z.DecBinary()
		_ = yym691
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj687++
		if yyhl687 {
			yyb687 = yyj687 > l
		} else {
			yyb687 = r.CheckBreak()
		}
		if yyb687 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj687-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym694 := z.EncBinary()
		_ = yym694
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep695 := !z.EncBinary()
			yy2arr695 := z.EncBasicHandle().StructToArray
			var yyq695 [5]bool
			_, _, _ = yysep695, yyq695, yy2arr695
			const yyr695 bool = false
			yyq695[1] = x.FSType != ""
			yyq695[2] = x.SecretRef != nil
			yyq695[3] = x.ReadOnly != false
			yyq695[4] = len(x.Options) != 0
			var yynn695 int
			if yyr695 || yy2arr695 {
				r.EncodeArrayStart(5)
			} else {
				yynn695 = 1
				for _, b := range yyq695 {
					if b {
						yynn695++
					}
				}
				r.EncodeMapStart(yynn695)
				yynn695 = 0
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym697 := z.EncBinary()
				_ = yym697
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym698 := z.EncBinary()
				_ = yym698
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[1] {
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq695[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq695[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[3] {
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq695[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym707 := z.EncBinary()
						_ = yym707
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq695[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym708 := z.EncBinary()
						_ = yym708
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym709 := z.DecBinary()
	_ = yym709
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct710 := r.ContainerType()
		if yyct710 == codecSelferValueTypeMap1234 {
			yyl710 := r.ReadMapStart()
			if yyl710 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl710, d)
			}
		} else if yyct710 == codecSelferValueTypeArray1234 {
			yyl710 := r.ReadArrayStart()
			if yyl710 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl710, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys711Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys711Slc
	var yyhl711 bool = l >= 0
	for yyj711 := 0; ; yyj711++ {
		if yyhl711 {
			if yyj711 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys711Slc = r.DecodeBytes(yys711Slc, true, true)
		yys711 := string(yys711Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys711 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv716 := &x.Options
				yym717 := z.DecBinary()
				_ = yym717
				if false {
				} else {
					z.F.DecMapStringStringX(yyv716, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys711)
		} // end switch yys711
	} // end for yyj711
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj718 int
	var yyb718 bool
	var yyhl718 bool = l >= 0
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv723 := &x.Options
		yym724 := z.DecBinary()
		_ = yym724
		if false {
		} else {
			z.F.DecMapStringStringX(yyv723, false, d)
		}
	}
	for {
		yyj718++
		if yyhl718 {
			yyb718 = yyj718 > l
		} else {
			yyb718 = r.CheckBreak()
		}
		if yyb718 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj718-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym725 := z.EncBinary()
		_ = yym725
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep726 := !z.EncBinary()
			yy2arr726 := z.EncBasicHandle().StructToArray
			var yyq726 [4]bool
			_, _, _ = yysep726, yyq726, yy2arr726
			const yyr726 bool = false
			yyq726[1] = x.FSType != ""
			yyq726[2] = x.Partition != 0
			yyq726[3] = x.ReadOnly != false
			var yynn726 int
			if yyr726 || yy2arr726 {
				r.EncodeArrayStart(4)
			} else {
				yynn726 = 1
				for _, b := range yyq726 {
					if b {
						yynn726++
					}
				}
				r.EncodeMapStart(yynn726)
				yynn726 = 0
			}
			if yyr726 || yy2arr726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym728 := z.EncBinary()
				_ = yym728
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym729 := z.EncBinary()
				_ = yym729
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr726 || yy2arr726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq726[1] {
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq726[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr726 || yy2arr726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq726[2] {
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq726[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr726 || yy2arr726 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq726[3] {
					yym737 := z.EncBinary()
					_ = yym737
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq726[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr726 || yy2arr726 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym739 := z.DecBinary()
	_ = yym739
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct740 := r.ContainerType()
		if yyct740 == codecSelferValueTypeMap1234 {
			yyl740 := r.ReadMapStart()
			if yyl740 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl740, d)
			}
		} else if yyct740 == codecSelferValueTypeArray1234 {
			yyl740 := r.ReadArrayStart()
			if yyl740 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl740, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys741Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys741Slc
	var yyhl741 bool = l >= 0
	for yyj741 := 0; ; yyj741++ {
		if yyhl741 {
			if yyj741 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys741Slc = r.DecodeBytes(yys741Slc, true, true)
		yys741 := string(yys741Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys741 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys741)
		} // end switch yys741
	} // end for yyj741
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj746 int
	var yyb746 bool
	var yyhl746 bool = l >= 0
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj746++
		if yyhl746 {
			yyb746 = yyj746 > l
		} else {
			yyb746 = r.CheckBreak()
		}
		if yyb746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym751 := z.EncBinary()
		_ = yym751
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep752 := !z.EncBinary()
			yy2arr752 := z.EncBasicHandle().StructToArray
			var yyq752 [3]bool
			_, _, _ = yysep752, yyq752, yy2arr752
			const yyr752 bool = false
			yyq752[1] = x.Revision != ""
			yyq752[2] = x.Directory != ""
			var yynn752 int
			if yyr752 || yy2arr752 {
				r.EncodeArrayStart(3)
			} else {
				yynn752 = 1
				for _, b := range yyq752 {
					if b {
						yynn752++
					}
				}
				r.EncodeMapStart(yynn752)
				yynn752 = 0
			}
			if yyr752 || yy2arr752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym754 := z.EncBinary()
				_ = yym754
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym755 := z.EncBinary()
				_ = yym755
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr752 || yy2arr752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq752[1] {
					yym757 := z.EncBinary()
					_ = yym757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq752[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr752 || yy2arr752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq752[2] {
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq752[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr752 || yy2arr752 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym762 := z.DecBinary()
	_ = yym762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct763 := r.ContainerType()
		if yyct763 == codecSelferValueTypeMap1234 {
			yyl763 := r.ReadMapStart()
			if yyl763 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl763, d)
			}
		} else if yyct763 == codecSelferValueTypeArray1234 {
			yyl763 := r.ReadArrayStart()
			if yyl763 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl763, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys764Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys764Slc
	var yyhl764 bool = l >= 0
	for yyj764 := 0; ; yyj764++ {
		if yyhl764 {
			if yyj764 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys764Slc = r.DecodeBytes(yys764Slc, true, true)
		yys764 := string(yys764Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys764 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys764)
		} // end switch yys764
	} // end for yyj764
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj768 int
	var yyb768 bool
	var yyhl768 bool = l >= 0
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj768++
	if yyhl768 {
		yyb768 = yyj768 > l
	} else {
		yyb768 = r.CheckBreak()
	}
	if yyb768 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj768++
		if yyhl768 {
			yyb768 = yyj768 > l
		} else {
			yyb768 = r.CheckBreak()
		}
		if yyb768 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj768-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym772 := z.EncBinary()
		_ = yym772
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep773 := !z.EncBinary()
			yy2arr773 := z.EncBasicHandle().StructToArray
			var yyq773 [2]bool
			_, _, _ = yysep773, yyq773, yy2arr773
			const yyr773 bool = false
			yyq773[0] = x.SecretName != ""
			yyq773[1] = len(x.Items) != 0
			var yynn773 int
			if yyr773 || yy2arr773 {
				r.EncodeArrayStart(2)
			} else {
				yynn773 = 0
				for _, b := range yyq773 {
					if b {
						yynn773++
					}
				}
				r.EncodeMapStart(yynn773)
				yynn773 = 0
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq773[0] {
					yym775 := z.EncBinary()
					_ = yym775
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq773[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq773[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym778 := z.EncBinary()
						_ = yym778
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq773[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym779 := z.EncBinary()
						_ = yym779
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr773 || yy2arr773 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym780 := z.DecBinary()
	_ = yym780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct781 := r.ContainerType()
		if yyct781 == codecSelferValueTypeMap1234 {
			yyl781 := r.ReadMapStart()
			if yyl781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl781, d)
			}
		} else if yyct781 == codecSelferValueTypeArray1234 {
			yyl781 := r.ReadArrayStart()
			if yyl781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys782Slc
	var yyhl782 bool = l >= 0
	for yyj782 := 0; ; yyj782++ {
		if yyhl782 {
			if yyj782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys782Slc = r.DecodeBytes(yys782Slc, true, true)
		yys782 := string(yys782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys782 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv784 := &x.Items
				yym785 := z.DecBinary()
				_ = yym785
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv784), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys782)
		} // end switch yys782
	} // end for yyj782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj786 int
	var yyb786 bool
	var yyhl786 bool = l >= 0
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv788 := &x.Items
		yym789 := z.DecBinary()
		_ = yym789
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv788), d)
		}
	}
	for {
		yyj786++
		if yyhl786 {
			yyb786 = yyj786 > l
		} else {
			yyb786 = r.CheckBreak()
		}
		if yyb786 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj786-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym790 := z.EncBinary()
		_ = yym790
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep791 := !z.EncBinary()
			yy2arr791 := z.EncBasicHandle().StructToArray
			var yyq791 [3]bool
			_, _, _ = yysep791, yyq791, yy2arr791
			const yyr791 bool = false
			yyq791[2] = x.ReadOnly != false
			var yynn791 int
			if yyr791 || yy2arr791 {
				r.EncodeArrayStart(3)
			} else {
				yynn791 = 2
				for _, b := range yyq791 {
					if b {
						yynn791++
					}
				}
				r.EncodeMapStart(yynn791)
				yynn791 = 0
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym793 := z.EncBinary()
				_ = yym793
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym794 := z.EncBinary()
				_ = yym794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym796 := z.EncBinary()
				_ = yym796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym797 := z.EncBinary()
				_ = yym797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq791[2] {
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq791[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr791 || yy2arr791 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym801 := z.DecBinary()
	_ = yym801
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct802 := r.ContainerType()
		if yyct802 == codecSelferValueTypeMap1234 {
			yyl802 := r.ReadMapStart()
			if yyl802 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl802, d)
			}
		} else if yyct802 == codecSelferValueTypeArray1234 {
			yyl802 := r.ReadArrayStart()
			if yyl802 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl802, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys803Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys803Slc
	var yyhl803 bool = l >= 0
	for yyj803 := 0; ; yyj803++ {
		if yyhl803 {
			if yyj803 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys803Slc = r.DecodeBytes(yys803Slc, true, true)
		yys803 := string(yys803Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys803 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys803)
		} // end switch yys803
	} // end for yyj803
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj807 int
	var yyb807 bool
	var yyhl807 bool = l >= 0
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj807++
	if yyhl807 {
		yyb807 = yyj807 > l
	} else {
		yyb807 = r.CheckBreak()
	}
	if yyb807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj807++
		if yyhl807 {
			yyb807 = yyj807 > l
		} else {
			yyb807 = r.CheckBreak()
		}
		if yyb807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym811 := z.EncBinary()
		_ = yym811
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep812 := !z.EncBinary()
			yy2arr812 := z.EncBasicHandle().StructToArray
			var yyq812 [3]bool
			_, _, _ = yysep812, yyq812, yy2arr812
			const yyr812 bool = false
			yyq812[2] = x.ReadOnly != false
			var yynn812 int
			if yyr812 || yy2arr812 {
				r.EncodeArrayStart(3)
			} else {
				yynn812 = 2
				for _, b := range yyq812 {
					if b {
						yynn812++
					}
				}
				r.EncodeMapStart(yynn812)
				yynn812 = 0
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym814 := z.EncBinary()
				_ = yym814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym815 := z.EncBinary()
				_ = yym815
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym817 := z.EncBinary()
				_ = yym817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym818 := z.EncBinary()
				_ = yym818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq812[2] {
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq812[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym821 := z.EncBinary()
					_ = yym821
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr812 || yy2arr812 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym822 := z.DecBinary()
	_ = yym822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct823 := r.ContainerType()
		if yyct823 == codecSelferValueTypeMap1234 {
			yyl823 := r.ReadMapStart()
			if yyl823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl823, d)
			}
		} else if yyct823 == codecSelferValueTypeArray1234 {
			yyl823 := r.ReadArrayStart()
			if yyl823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys824Slc
	var yyhl824 bool = l >= 0
	for yyj824 := 0; ; yyj824++ {
		if yyhl824 {
			if yyj824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys824Slc = r.DecodeBytes(yys824Slc, true, true)
		yys824 := string(yys824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys824 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys824)
		} // end switch yys824
	} // end for yyj824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj828 int
	var yyb828 bool
	var yyhl828 bool = l >= 0
	yyj828++
	if yyhl828 {
		yyb828 = yyj828 > l
	} else {
		yyb828 = r.CheckBreak()
	}
	if yyb828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj828++
	if yyhl828 {
		yyb828 = yyj828 > l
	} else {
		yyb828 = r.CheckBreak()
	}
	if yyb828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj828++
	if yyhl828 {
		yyb828 = yyj828 > l
	} else {
		yyb828 = r.CheckBreak()
	}
	if yyb828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj828++
		if yyhl828 {
			yyb828 = yyj828 > l
		} else {
			yyb828 = r.CheckBreak()
		}
		if yyb828 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj828-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym832 := z.EncBinary()
		_ = yym832
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep833 := !z.EncBinary()
			yy2arr833 := z.EncBasicHandle().StructToArray
			var yyq833 [8]bool
			_, _, _ = yysep833, yyq833, yy2arr833
			const yyr833 bool = false
			yyq833[2] = x.FSType != ""
			yyq833[3] = x.RBDPool != ""
			yyq833[4] = x.RadosUser != ""
			yyq833[5] = x.Keyring != ""
			yyq833[6] = x.SecretRef != nil
			yyq833[7] = x.ReadOnly != false
			var yynn833 int
			if yyr833 || yy2arr833 {
				r.EncodeArrayStart(8)
			} else {
				yynn833 = 2
				for _, b := range yyq833 {
					if b {
						yynn833++
					}
				}
				r.EncodeMapStart(yynn833)
				yynn833 = 0
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym838 := z.EncBinary()
				_ = yym838
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym839 := z.EncBinary()
				_ = yym839
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq833[2] {
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq833[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq833[3] {
					yym844 := z.EncBinary()
					_ = yym844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq833[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq833[4] {
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq833[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq833[5] {
					yym850 := z.EncBinary()
					_ = yym850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq833[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq833[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq833[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq833[7] {
					yym854 := z.EncBinary()
					_ = yym854
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq833[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr833 || yy2arr833 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym856 := z.DecBinary()
	_ = yym856
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct857 := r.ContainerType()
		if yyct857 == codecSelferValueTypeMap1234 {
			yyl857 := r.ReadMapStart()
			if yyl857 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl857, d)
			}
		} else if yyct857 == codecSelferValueTypeArray1234 {
			yyl857 := r.ReadArrayStart()
			if yyl857 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl857, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys858Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys858Slc
	var yyhl858 bool = l >= 0
	for yyj858 := 0; ; yyj858++ {
		if yyhl858 {
			if yyj858 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys858Slc = r.DecodeBytes(yys858Slc, true, true)
		yys858 := string(yys858Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys858 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv859 := &x.CephMonitors
				yym860 := z.DecBinary()
				_ = yym860
				if false {
				} else {
					z.F.DecSliceStringX(yyv859, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys858)
		} // end switch yys858
	} // end for yyj858
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj868 int
	var yyb868 bool
	var yyhl868 bool = l >= 0
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv869 := &x.CephMonitors
		yym870 := z.DecBinary()
		_ = yym870
		if false {
		} else {
			z.F.DecSliceStringX(yyv869, false, d)
		}
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj868++
		if yyhl868 {
			yyb868 = yyj868 > l
		} else {
			yyb868 = r.CheckBreak()
		}
		if yyb868 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj868-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym878 := z.EncBinary()
		_ = yym878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep879 := !z.EncBinary()
			yy2arr879 := z.EncBasicHandle().StructToArray
			var yyq879 [3]bool
			_, _, _ = yysep879, yyq879, yy2arr879
			const yyr879 bool = false
			yyq879[1] = x.FSType != ""
			yyq879[2] = x.ReadOnly != false
			var yynn879 int
			if yyr879 || yy2arr879 {
				r.EncodeArrayStart(3)
			} else {
				yynn879 = 1
				for _, b := range yyq879 {
					if b {
						yynn879++
					}
				}
				r.EncodeMapStart(yynn879)
				yynn879 = 0
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym881 := z.EncBinary()
				_ = yym881
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym882 := z.EncBinary()
				_ = yym882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[1] {
					yym884 := z.EncBinary()
					_ = yym884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq879[2] {
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq879[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr879 || yy2arr879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym889 := z.DecBinary()
	_ = yym889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct890 := r.ContainerType()
		if yyct890 == codecSelferValueTypeMap1234 {
			yyl890 := r.ReadMapStart()
			if yyl890 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl890, d)
			}
		} else if yyct890 == codecSelferValueTypeArray1234 {
			yyl890 := r.ReadArrayStart()
			if yyl890 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys891Slc
	var yyhl891 bool = l >= 0
	for yyj891 := 0; ; yyj891++ {
		if yyhl891 {
			if yyj891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys891Slc = r.DecodeBytes(yys891Slc, true, true)
		yys891 := string(yys891Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys891 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys891)
		} // end switch yys891
	} // end for yyj891
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj895 int
	var yyb895 bool
	var yyhl895 bool = l >= 0
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj895++
		if yyhl895 {
			yyb895 = yyj895 > l
		} else {
			yyb895 = r.CheckBreak()
		}
		if yyb895 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj895-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym899 := z.EncBinary()
		_ = yym899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep900 := !z.EncBinary()
			yy2arr900 := z.EncBasicHandle().StructToArray
			var yyq900 [6]bool
			_, _, _ = yysep900, yyq900, yy2arr900
			const yyr900 bool = false
			yyq900[1] = x.Path != ""
			yyq900[2] = x.User != ""
			yyq900[3] = x.SecretFile != ""
			yyq900[4] = x.SecretRef != nil
			yyq900[5] = x.ReadOnly != false
			var yynn900 int
			if yyr900 || yy2arr900 {
				r.EncodeArrayStart(6)
			} else {
				yynn900 = 1
				for _, b := range yyq900 {
					if b {
						yynn900++
					}
				}
				r.EncodeMapStart(yynn900)
				yynn900 = 0
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[1] {
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[2] {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[3] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq900[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[5] {
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq900[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym916 := z.EncBinary()
					_ = yym916
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym917 := z.DecBinary()
	_ = yym917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct918 := r.ContainerType()
		if yyct918 == codecSelferValueTypeMap1234 {
			yyl918 := r.ReadMapStart()
			if yyl918 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl918, d)
			}
		} else if yyct918 == codecSelferValueTypeArray1234 {
			yyl918 := r.ReadArrayStart()
			if yyl918 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys919Slc
	var yyhl919 bool = l >= 0
	for yyj919 := 0; ; yyj919++ {
		if yyhl919 {
			if yyj919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys919Slc = r.DecodeBytes(yys919Slc, true, true)
		yys919 := string(yys919Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys919 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv920 := &x.Monitors
				yym921 := z.DecBinary()
				_ = yym921
				if false {
				} else {
					z.F.DecSliceStringX(yyv920, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys919)
		} // end switch yys919
	} // end for yyj919
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj927 int
	var yyb927 bool
	var yyhl927 bool = l >= 0
	yyj927++
	if yyhl927 {
		yyb927 = yyj927 > l
	} else {
		yyb927 = r.CheckBreak()
	}
	if yyb927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv928 := &x.Monitors
		yym929 := z.DecBinary()
		_ = yym929
		if false {
		} else {
			z.F.DecSliceStringX(yyv928, false, d)
		}
	}
	yyj927++
	if yyhl927 {
		yyb927 = yyj927 > l
	} else {
		yyb927 = r.CheckBreak()
	}
	if yyb927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj927++
	if yyhl927 {
		yyb927 = yyj927 > l
	} else {
		yyb927 = r.CheckBreak()
	}
	if yyb927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj927++
	if yyhl927 {
		yyb927 = yyj927 > l
	} else {
		yyb927 = r.CheckBreak()
	}
	if yyb927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj927++
	if yyhl927 {
		yyb927 = yyj927 > l
	} else {
		yyb927 = r.CheckBreak()
	}
	if yyb927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj927++
	if yyhl927 {
		yyb927 = yyj927 > l
	} else {
		yyb927 = r.CheckBreak()
	}
	if yyb927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj927++
		if yyhl927 {
			yyb927 = yyj927 > l
		} else {
			yyb927 = r.CheckBreak()
		}
		if yyb927 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj927-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym935 := z.EncBinary()
		_ = yym935
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep936 := !z.EncBinary()
			yy2arr936 := z.EncBasicHandle().StructToArray
			var yyq936 [1]bool
			_, _, _ = yysep936, yyq936, yy2arr936
			const yyr936 bool = false
			var yynn936 int
			if yyr936 || yy2arr936 {
				r.EncodeArrayStart(1)
			} else {
				yynn936 = 1
				for _, b := range yyq936 {
					if b {
						yynn936++
					}
				}
				r.EncodeMapStart(yynn936)
				yynn936 = 0
			}
			if yyr936 || yy2arr936 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym938 := z.EncBinary()
				_ = yym938
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym939 := z.EncBinary()
				_ = yym939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr936 || yy2arr936 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym940 := z.DecBinary()
	_ = yym940
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct941 := r.ContainerType()
		if yyct941 == codecSelferValueTypeMap1234 {
			yyl941 := r.ReadMapStart()
			if yyl941 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl941, d)
			}
		} else if yyct941 == codecSelferValueTypeArray1234 {
			yyl941 := r.ReadArrayStart()
			if yyl941 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl941, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys942Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys942Slc
	var yyhl942 bool = l >= 0
	for yyj942 := 0; ; yyj942++ {
		if yyhl942 {
			if yyj942 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys942Slc = r.DecodeBytes(yys942Slc, true, true)
		yys942 := string(yys942Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys942 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys942)
		} // end switch yys942
	} // end for yyj942
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj944 int
	var yyb944 bool
	var yyhl944 bool = l >= 0
	yyj944++
	if yyhl944 {
		yyb944 = yyj944 > l
	} else {
		yyb944 = r.CheckBreak()
	}
	if yyb944 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj944++
		if yyhl944 {
			yyb944 = yyj944 > l
		} else {
			yyb944 = r.CheckBreak()
		}
		if yyb944 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj944-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym946 := z.EncBinary()
		_ = yym946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep947 := !z.EncBinary()
			yy2arr947 := z.EncBasicHandle().StructToArray
			var yyq947 [1]bool
			_, _, _ = yysep947, yyq947, yy2arr947
			const yyr947 bool = false
			yyq947[0] = len(x.Items) != 0
			var yynn947 int
			if yyr947 || yy2arr947 {
				r.EncodeArrayStart(1)
			} else {
				yynn947 = 0
				for _, b := range yyq947 {
					if b {
						yynn947++
					}
				}
				r.EncodeMapStart(yynn947)
				yynn947 = 0
			}
			if yyr947 || yy2arr947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq947[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym949 := z.EncBinary()
						_ = yym949
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq947[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym950 := z.EncBinary()
						_ = yym950
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr947 || yy2arr947 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym951 := z.DecBinary()
	_ = yym951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct952 := r.ContainerType()
		if yyct952 == codecSelferValueTypeMap1234 {
			yyl952 := r.ReadMapStart()
			if yyl952 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl952, d)
			}
		} else if yyct952 == codecSelferValueTypeArray1234 {
			yyl952 := r.ReadArrayStart()
			if yyl952 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl952, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys953Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys953Slc
	var yyhl953 bool = l >= 0
	for yyj953 := 0; ; yyj953++ {
		if yyhl953 {
			if yyj953 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys953Slc = r.DecodeBytes(yys953Slc, true, true)
		yys953 := string(yys953Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys953 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv954 := &x.Items
				yym955 := z.DecBinary()
				_ = yym955
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv954), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys953)
		} // end switch yys953
	} // end for yyj953
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj956 int
	var yyb956 bool
	var yyhl956 bool = l >= 0
	yyj956++
	if yyhl956 {
		yyb956 = yyj956 > l
	} else {
		yyb956 = r.CheckBreak()
	}
	if yyb956 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv957 := &x.Items
		yym958 := z.DecBinary()
		_ = yym958
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv957), d)
		}
	}
	for {
		yyj956++
		if yyhl956 {
			yyb956 = yyj956 > l
		} else {
			yyb956 = r.CheckBreak()
		}
		if yyb956 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj956-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym959 := z.EncBinary()
		_ = yym959
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep960 := !z.EncBinary()
			yy2arr960 := z.EncBasicHandle().StructToArray
			var yyq960 [3]bool
			_, _, _ = yysep960, yyq960, yy2arr960
			const yyr960 bool = false
			yyq960[1] = x.FieldRef != nil
			yyq960[2] = x.ResourceFieldRef != nil
			var yynn960 int
			if yyr960 || yy2arr960 {
				r.EncodeArrayStart(3)
			} else {
				yynn960 = 1
				for _, b := range yyq960 {
					if b {
						yynn960++
					}
				}
				r.EncodeMapStart(yynn960)
				yynn960 = 0
			}
			if yyr960 || yy2arr960 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym962 := z.EncBinary()
				_ = yym962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym963 := z.EncBinary()
				_ = yym963
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr960 || yy2arr960 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq960[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq960[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr960 || yy2arr960 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq960[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq960[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr960 || yy2arr960 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym966 := z.DecBinary()
	_ = yym966
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct967 := r.ContainerType()
		if yyct967 == codecSelferValueTypeMap1234 {
			yyl967 := r.ReadMapStart()
			if yyl967 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl967, d)
			}
		} else if yyct967 == codecSelferValueTypeArray1234 {
			yyl967 := r.ReadArrayStart()
			if yyl967 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl967, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys968Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys968Slc
	var yyhl968 bool = l >= 0
	for yyj968 := 0; ; yyj968++ {
		if yyhl968 {
			if yyj968 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys968Slc = r.DecodeBytes(yys968Slc, true, true)
		yys968 := string(yys968Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys968 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys968)
		} // end switch yys968
	} // end for yyj968
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj972 int
	var yyb972 bool
	var yyhl972 bool = l >= 0
	yyj972++
	if yyhl972 {
		yyb972 = yyj972 > l
	} else {
		yyb972 = r.CheckBreak()
	}
	if yyb972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj972++
	if yyhl972 {
		yyb972 = yyj972 > l
	} else {
		yyb972 = r.CheckBreak()
	}
	if yyb972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj972++
	if yyhl972 {
		yyb972 = yyj972 > l
	} else {
		yyb972 = r.CheckBreak()
	}
	if yyb972 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj972++
		if yyhl972 {
			yyb972 = yyj972 > l
		} else {
			yyb972 = r.CheckBreak()
		}
		if yyb972 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj972-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym976 := z.EncBinary()
		_ = yym976
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep977 := !z.EncBinary()
			yy2arr977 := z.EncBasicHandle().StructToArray
			var yyq977 [3]bool
			_, _, _ = yysep977, yyq977, yy2arr977
			const yyr977 bool = false
			yyq977[2] = x.ReadOnly != false
			var yynn977 int
			if yyr977 || yy2arr977 {
				r.EncodeArrayStart(3)
			} else {
				yynn977 = 2
				for _, b := range yyq977 {
					if b {
						yynn977++
					}
				}
				r.EncodeMapStart(yynn977)
				yynn977 = 0
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym979 := z.EncBinary()
				_ = yym979
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym980 := z.EncBinary()
				_ = yym980
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym982 := z.EncBinary()
				_ = yym982
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym983 := z.EncBinary()
				_ = yym983
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq977[2] {
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq977[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr977 || yy2arr977 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym987 := z.DecBinary()
	_ = yym987
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct988 := r.ContainerType()
		if yyct988 == codecSelferValueTypeMap1234 {
			yyl988 := r.ReadMapStart()
			if yyl988 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl988, d)
			}
		} else if yyct988 == codecSelferValueTypeArray1234 {
			yyl988 := r.ReadArrayStart()
			if yyl988 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl988, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys989Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys989Slc
	var yyhl989 bool = l >= 0
	for yyj989 := 0; ; yyj989++ {
		if yyhl989 {
			if yyj989 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys989Slc = r.DecodeBytes(yys989Slc, true, true)
		yys989 := string(yys989Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys989 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys989)
		} // end switch yys989
	} // end for yyj989
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj993 int
	var yyb993 bool
	var yyhl993 bool = l >= 0
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj993++
	if yyhl993 {
		yyb993 = yyj993 > l
	} else {
		yyb993 = r.CheckBreak()
	}
	if yyb993 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj993++
		if yyhl993 {
			yyb993 = yyj993 > l
		} else {
			yyb993 = r.CheckBreak()
		}
		if yyb993 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj993-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym997 := z.EncBinary()
		_ = yym997
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep998 := !z.EncBinary()
			yy2arr998 := z.EncBasicHandle().StructToArray
			var yyq998 [2]bool
			_, _, _ = yysep998, yyq998, yy2arr998
			const yyr998 bool = false
			yyq998[1] = x.FSType != ""
			var yynn998 int
			if yyr998 || yy2arr998 {
				r.EncodeArrayStart(2)
			} else {
				yynn998 = 1
				for _, b := range yyq998 {
					if b {
						yynn998++
					}
				}
				r.EncodeMapStart(yynn998)
				yynn998 = 0
			}
			if yyr998 || yy2arr998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1000 := z.EncBinary()
				_ = yym1000
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1001 := z.EncBinary()
				_ = yym1001
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr998 || yy2arr998 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq998[1] {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq998[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr998 || yy2arr998 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1006 := r.ContainerType()
		if yyct1006 == codecSelferValueTypeMap1234 {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if yyct1006 == codecSelferValueTypeArray1234 {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1007 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1010 int
	var yyb1010 bool
	var yyhl1010 bool = l >= 0
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1010++
		if yyhl1010 {
			yyb1010 = yyj1010 > l
		} else {
			yyb1010 = r.CheckBreak()
		}
		if yyb1010 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1010-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1013 := z.EncBinary()
		_ = yym1013
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1014 := !z.EncBinary()
			yy2arr1014 := z.EncBasicHandle().StructToArray
			var yyq1014 [2]bool
			_, _, _ = yysep1014, yyq1014, yy2arr1014
			const yyr1014 bool = false
			yyq1014[1] = len(x.Items) != 0
			var yynn1014 int
			if yyr1014 || yy2arr1014 {
				r.EncodeArrayStart(2)
			} else {
				yynn1014 = 1
				for _, b := range yyq1014 {
					if b {
						yynn1014++
					}
				}
				r.EncodeMapStart(yynn1014)
				yynn1014 = 0
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1016 := z.EncBinary()
				_ = yym1016
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1017 := z.EncBinary()
				_ = yym1017
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1014[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1019 := z.EncBinary()
						_ = yym1019
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1014[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1020 := z.EncBinary()
						_ = yym1020
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1022 := r.ContainerType()
		if yyct1022 == codecSelferValueTypeMap1234 {
			yyl1022 := r.ReadMapStart()
			if yyl1022 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1022, d)
			}
		} else if yyct1022 == codecSelferValueTypeArray1234 {
			yyl1022 := r.ReadArrayStart()
			if yyl1022 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1023Slc
	var yyhl1023 bool = l >= 0
	for yyj1023 := 0; ; yyj1023++ {
		if yyhl1023 {
			if yyj1023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1023Slc = r.DecodeBytes(yys1023Slc, true, true)
		yys1023 := string(yys1023Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1023 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1025 := &x.Items
				yym1026 := z.DecBinary()
				_ = yym1026
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1025), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1023)
		} // end switch yys1023
	} // end for yyj1023
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1027 int
	var yyb1027 bool
	var yyhl1027 bool = l >= 0
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1027++
	if yyhl1027 {
		yyb1027 = yyj1027 > l
	} else {
		yyb1027 = r.CheckBreak()
	}
	if yyb1027 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1029 := &x.Items
		yym1030 := z.DecBinary()
		_ = yym1030
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1029), d)
		}
	}
	for {
		yyj1027++
		if yyhl1027 {
			yyb1027 = yyj1027 > l
		} else {
			yyb1027 = r.CheckBreak()
		}
		if yyb1027 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1027-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1031 := z.EncBinary()
		_ = yym1031
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1032 := !z.EncBinary()
			yy2arr1032 := z.EncBasicHandle().StructToArray
			var yyq1032 [2]bool
			_, _, _ = yysep1032, yyq1032, yy2arr1032
			const yyr1032 bool = false
			var yynn1032 int
			if yyr1032 || yy2arr1032 {
				r.EncodeArrayStart(2)
			} else {
				yynn1032 = 2
				for _, b := range yyq1032 {
					if b {
						yynn1032++
					}
				}
				r.EncodeMapStart(yynn1032)
				yynn1032 = 0
			}
			if yyr1032 || yy2arr1032 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1034 := z.EncBinary()
				_ = yym1034
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1035 := z.EncBinary()
				_ = yym1035
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1032 || yy2arr1032 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1037 := z.EncBinary()
				_ = yym1037
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1038 := z.EncBinary()
				_ = yym1038
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1032 || yy2arr1032 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1039 := z.DecBinary()
	_ = yym1039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1040 := r.ContainerType()
		if yyct1040 == codecSelferValueTypeMap1234 {
			yyl1040 := r.ReadMapStart()
			if yyl1040 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1040, d)
			}
		} else if yyct1040 == codecSelferValueTypeArray1234 {
			yyl1040 := r.ReadArrayStart()
			if yyl1040 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1041Slc
	var yyhl1041 bool = l >= 0
	for yyj1041 := 0; ; yyj1041++ {
		if yyhl1041 {
			if yyj1041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1041Slc = r.DecodeBytes(yys1041Slc, true, true)
		yys1041 := string(yys1041Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1041 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1041)
		} // end switch yys1041
	} // end for yyj1041
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1044 int
	var yyb1044 bool
	var yyhl1044 bool = l >= 0
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1044++
	if yyhl1044 {
		yyb1044 = yyj1044 > l
	} else {
		yyb1044 = r.CheckBreak()
	}
	if yyb1044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj1044++
		if yyhl1044 {
			yyb1044 = yyj1044 > l
		} else {
			yyb1044 = r.CheckBreak()
		}
		if yyb1044 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1044-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1047 := z.EncBinary()
		_ = yym1047
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1048 := !z.EncBinary()
			yy2arr1048 := z.EncBasicHandle().StructToArray
			var yyq1048 [5]bool
			_, _, _ = yysep1048, yyq1048, yy2arr1048
			const yyr1048 bool = false
			yyq1048[0] = x.Name != ""
			yyq1048[1] = x.HostPort != 0
			yyq1048[3] = x.Protocol != ""
			yyq1048[4] = x.HostIP != ""
			var yynn1048 int
			if yyr1048 || yy2arr1048 {
				r.EncodeArrayStart(5)
			} else {
				yynn1048 = 1
				for _, b := range yyq1048 {
					if b {
						yynn1048++
					}
				}
				r.EncodeMapStart(yynn1048)
				yynn1048 = 0
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[0] {
					yym1050 := z.EncBinary()
					_ = yym1050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1048[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1051 := z.EncBinary()
					_ = yym1051
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[1] {
					yym1053 := z.EncBinary()
					_ = yym1053
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1048[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1054 := z.EncBinary()
					_ = yym1054
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1056 := z.EncBinary()
				_ = yym1056
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1057 := z.EncBinary()
				_ = yym1057
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1048[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1048[4] {
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1048[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1048 || yy2arr1048 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1062 := z.DecBinary()
	_ = yym1062
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1063 := r.ContainerType()
		if yyct1063 == codecSelferValueTypeMap1234 {
			yyl1063 := r.ReadMapStart()
			if yyl1063 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1063, d)
			}
		} else if yyct1063 == codecSelferValueTypeArray1234 {
			yyl1063 := r.ReadArrayStart()
			if yyl1063 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1063, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1064Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1064Slc
	var yyhl1064 bool = l >= 0
	for yyj1064 := 0; ; yyj1064++ {
		if yyhl1064 {
			if yyj1064 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1064Slc = r.DecodeBytes(yys1064Slc, true, true)
		yys1064 := string(yys1064Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1064 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1064)
		} // end switch yys1064
	} // end for yyj1064
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1070 int
	var yyb1070 bool
	var yyhl1070 bool = l >= 0
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1070++
		if yyhl1070 {
			yyb1070 = yyj1070 > l
		} else {
			yyb1070 = r.CheckBreak()
		}
		if yyb1070 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1070-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1076 := z.EncBinary()
		_ = yym1076
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1077 := !z.EncBinary()
			yy2arr1077 := z.EncBasicHandle().StructToArray
			var yyq1077 [4]bool
			_, _, _ = yysep1077, yyq1077, yy2arr1077
			const yyr1077 bool = false
			yyq1077[1] = x.ReadOnly != false
			yyq1077[3] = x.SubPath != ""
			var yynn1077 int
			if yyr1077 || yy2arr1077 {
				r.EncodeArrayStart(4)
			} else {
				yynn1077 = 2
				for _, b := range yyq1077 {
					if b {
						yynn1077++
					}
				}
				r.EncodeMapStart(yynn1077)
				yynn1077 = 0
			}
			if yyr1077 || yy2arr1077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1079 := z.EncBinary()
				_ = yym1079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1080 := z.EncBinary()
				_ = yym1080
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1077 || yy2arr1077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1077[1] {
					yym1082 := z.EncBinary()
					_ = yym1082
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1077[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1083 := z.EncBinary()
					_ = yym1083
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1077 || yy2arr1077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1085 := z.EncBinary()
				_ = yym1085
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1077 || yy2arr1077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1077[3] {
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1077[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1077 || yy2arr1077 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1090 := z.DecBinary()
	_ = yym1090
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1091 := r.ContainerType()
		if yyct1091 == codecSelferValueTypeMap1234 {
			yyl1091 := r.ReadMapStart()
			if yyl1091 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1091, d)
			}
		} else if yyct1091 == codecSelferValueTypeArray1234 {
			yyl1091 := r.ReadArrayStart()
			if yyl1091 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1091, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1092Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1092Slc
	var yyhl1092 bool = l >= 0
	for yyj1092 := 0; ; yyj1092++ {
		if yyhl1092 {
			if yyj1092 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1092Slc = r.DecodeBytes(yys1092Slc, true, true)
		yys1092 := string(yys1092Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1092 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1092)
		} // end switch yys1092
	} // end for yyj1092
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1097 int
	var yyb1097 bool
	var yyhl1097 bool = l >= 0
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1097++
	if yyhl1097 {
		yyb1097 = yyj1097 > l
	} else {
		yyb1097 = r.CheckBreak()
	}
	if yyb1097 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1097++
		if yyhl1097 {
			yyb1097 = yyj1097 > l
		} else {
			yyb1097 = r.CheckBreak()
		}
		if yyb1097 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1097-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1102 := z.EncBinary()
		_ = yym1102
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1103 := !z.EncBinary()
			yy2arr1103 := z.EncBasicHandle().StructToArray
			var yyq1103 [3]bool
			_, _, _ = yysep1103, yyq1103, yy2arr1103
			const yyr1103 bool = false
			yyq1103[1] = x.Value != ""
			yyq1103[2] = x.ValueFrom != nil
			var yynn1103 int
			if yyr1103 || yy2arr1103 {
				r.EncodeArrayStart(3)
			} else {
				yynn1103 = 1
				for _, b := range yyq1103 {
					if b {
						yynn1103++
					}
				}
				r.EncodeMapStart(yynn1103)
				yynn1103 = 0
			}
			if yyr1103 || yy2arr1103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1105 := z.EncBinary()
				_ = yym1105
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1106 := z.EncBinary()
				_ = yym1106
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1103 || yy2arr1103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1103[1] {
					yym1108 := z.EncBinary()
					_ = yym1108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1103[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1109 := z.EncBinary()
					_ = yym1109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1103 || yy2arr1103 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1103[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1103[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1103 || yy2arr1103 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1111 := z.DecBinary()
	_ = yym1111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1112 := r.ContainerType()
		if yyct1112 == codecSelferValueTypeMap1234 {
			yyl1112 := r.ReadMapStart()
			if yyl1112 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1112, d)
			}
		} else if yyct1112 == codecSelferValueTypeArray1234 {
			yyl1112 := r.ReadArrayStart()
			if yyl1112 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1113Slc
	var yyhl1113 bool = l >= 0
	for yyj1113 := 0; ; yyj1113++ {
		if yyhl1113 {
			if yyj1113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1113Slc = r.DecodeBytes(yys1113Slc, true, true)
		yys1113 := string(yys1113Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1113 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1113)
		} // end switch yys1113
	} // end for yyj1113
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1117 int
	var yyb1117 bool
	var yyhl1117 bool = l >= 0
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1117++
		if yyhl1117 {
			yyb1117 = yyj1117 > l
		} else {
			yyb1117 = r.CheckBreak()
		}
		if yyb1117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1121 := z.EncBinary()
		_ = yym1121
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1122 := !z.EncBinary()
			yy2arr1122 := z.EncBasicHandle().StructToArray
			var yyq1122 [4]bool
			_, _, _ = yysep1122, yyq1122, yy2arr1122
			const yyr1122 bool = false
			yyq1122[0] = x.FieldRef != nil
			yyq1122[1] = x.ResourceFieldRef != nil
			yyq1122[2] = x.ConfigMapKeyRef != nil
			yyq1122[3] = x.SecretKeyRef != nil
			var yynn1122 int
			if yyr1122 || yy2arr1122 {
				r.EncodeArrayStart(4)
			} else {
				yynn1122 = 0
				for _, b := range yyq1122 {
					if b {
						yynn1122++
					}
				}
				r.EncodeMapStart(yynn1122)
				yynn1122 = 0
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1127 := z.DecBinary()
	_ = yym1127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1128 := r.ContainerType()
		if yyct1128 == codecSelferValueTypeMap1234 {
			yyl1128 := r.ReadMapStart()
			if yyl1128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1128, d)
			}
		} else if yyct1128 == codecSelferValueTypeArray1234 {
			yyl1128 := r.ReadArrayStart()
			if yyl1128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1129Slc
	var yyhl1129 bool = l >= 0
	for yyj1129 := 0; ; yyj1129++ {
		if yyhl1129 {
			if yyj1129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1129Slc = r.DecodeBytes(yys1129Slc, true, true)
		yys1129 := string(yys1129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1129 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1129)
		} // end switch yys1129
	} // end for yyj1129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1134 int
	var yyb1134 bool
	var yyhl1134 bool = l >= 0
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1134++
		if yyhl1134 {
			yyb1134 = yyj1134 > l
		} else {
			yyb1134 = r.CheckBreak()
		}
		if yyb1134 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1134-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1139 := z.EncBinary()
		_ = yym1139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1140 := !z.EncBinary()
			yy2arr1140 := z.EncBasicHandle().StructToArray
			var yyq1140 [2]bool
			_, _, _ = yysep1140, yyq1140, yy2arr1140
			const yyr1140 bool = false
			var yynn1140 int
			if yyr1140 || yy2arr1140 {
				r.EncodeArrayStart(2)
			} else {
				yynn1140 = 2
				for _, b := range yyq1140 {
					if b {
						yynn1140++
					}
				}
				r.EncodeMapStart(yynn1140)
				yynn1140 = 0
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1142 := z.EncBinary()
				_ = yym1142
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1143 := z.EncBinary()
				_ = yym1143
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1145 := z.EncBinary()
				_ = yym1145
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1146 := z.EncBinary()
				_ = yym1146
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1140 || yy2arr1140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1147 := z.DecBinary()
	_ = yym1147
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1148 := r.ContainerType()
		if yyct1148 == codecSelferValueTypeMap1234 {
			yyl1148 := r.ReadMapStart()
			if yyl1148 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1148, d)
			}
		} else if yyct1148 == codecSelferValueTypeArray1234 {
			yyl1148 := r.ReadArrayStart()
			if yyl1148 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1148, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1149Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1149Slc
	var yyhl1149 bool = l >= 0
	for yyj1149 := 0; ; yyj1149++ {
		if yyhl1149 {
			if yyj1149 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1149Slc = r.DecodeBytes(yys1149Slc, true, true)
		yys1149 := string(yys1149Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1149 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1149)
		} // end switch yys1149
	} // end for yyj1149
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1152 int
	var yyb1152 bool
	var yyhl1152 bool = l >= 0
	yyj1152++
	if yyhl1152 {
		yyb1152 = yyj1152 > l
	} else {
		yyb1152 = r.CheckBreak()
	}
	if yyb1152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1152++
	if yyhl1152 {
		yyb1152 = yyj1152 > l
	} else {
		yyb1152 = r.CheckBreak()
	}
	if yyb1152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1152++
		if yyhl1152 {
			yyb1152 = yyj1152 > l
		} else {
			yyb1152 = r.CheckBreak()
		}
		if yyb1152 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1152-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1155 := z.EncBinary()
		_ = yym1155
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1156 := !z.EncBinary()
			yy2arr1156 := z.EncBasicHandle().StructToArray
			var yyq1156 [3]bool
			_, _, _ = yysep1156, yyq1156, yy2arr1156
			const yyr1156 bool = false
			yyq1156[0] = x.ContainerName != ""
			yyq1156[2] = true
			var yynn1156 int
			if yyr1156 || yy2arr1156 {
				r.EncodeArrayStart(3)
			} else {
				yynn1156 = 1
				for _, b := range yyq1156 {
					if b {
						yynn1156++
					}
				}
				r.EncodeMapStart(yynn1156)
				yynn1156 = 0
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[0] {
					yym1158 := z.EncBinary()
					_ = yym1158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1156[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1159 := z.EncBinary()
					_ = yym1159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1161 := z.EncBinary()
				_ = yym1161
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1162 := z.EncBinary()
				_ = yym1162
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1156[2] {
					yy1164 := &x.Divisor
					yym1165 := z.EncBinary()
					_ = yym1165
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1164) {
					} else if !yym1165 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1164)
					} else {
						z.EncFallback(yy1164)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1156[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1166 := &x.Divisor
					yym1167 := z.EncBinary()
					_ = yym1167
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1166) {
					} else if !yym1167 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1166)
					} else {
						z.EncFallback(yy1166)
					}
				}
			}
			if yyr1156 || yy2arr1156 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1168 := z.DecBinary()
	_ = yym1168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1169 := r.ContainerType()
		if yyct1169 == codecSelferValueTypeMap1234 {
			yyl1169 := r.ReadMapStart()
			if yyl1169 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1169, d)
			}
		} else if yyct1169 == codecSelferValueTypeArray1234 {
			yyl1169 := r.ReadArrayStart()
			if yyl1169 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1170Slc
	var yyhl1170 bool = l >= 0
	for yyj1170 := 0; ; yyj1170++ {
		if yyhl1170 {
			if yyj1170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1170Slc = r.DecodeBytes(yys1170Slc, true, true)
		yys1170 := string(yys1170Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1170 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1173 := &x.Divisor
				yym1174 := z.DecBinary()
				_ = yym1174
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1173) {
				} else if !yym1174 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1173)
				} else {
					z.DecFallback(yyv1173, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1170)
		} // end switch yys1170
	} // end for yyj1170
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1175 int
	var yyb1175 bool
	var yyhl1175 bool = l >= 0
	yyj1175++
	if yyhl1175 {
		yyb1175 = yyj1175 > l
	} else {
		yyb1175 = r.CheckBreak()
	}
	if yyb1175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1175++
	if yyhl1175 {
		yyb1175 = yyj1175 > l
	} else {
		yyb1175 = r.CheckBreak()
	}
	if yyb1175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1175++
	if yyhl1175 {
		yyb1175 = yyj1175 > l
	} else {
		yyb1175 = r.CheckBreak()
	}
	if yyb1175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1178 := &x.Divisor
		yym1179 := z.DecBinary()
		_ = yym1179
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1178) {
		} else if !yym1179 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1178)
		} else {
			z.DecFallback(yyv1178, false)
		}
	}
	for {
		yyj1175++
		if yyhl1175 {
			yyb1175 = yyj1175 > l
		} else {
			yyb1175 = r.CheckBreak()
		}
		if yyb1175 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1175-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1180 := z.EncBinary()
		_ = yym1180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1181 := !z.EncBinary()
			yy2arr1181 := z.EncBasicHandle().StructToArray
			var yyq1181 [2]bool
			_, _, _ = yysep1181, yyq1181, yy2arr1181
			const yyr1181 bool = false
			var yynn1181 int
			if yyr1181 || yy2arr1181 {
				r.EncodeArrayStart(2)
			} else {
				yynn1181 = 2
				for _, b := range yyq1181 {
					if b {
						yynn1181++
					}
				}
				r.EncodeMapStart(yynn1181)
				yynn1181 = 0
			}
			if yyr1181 || yy2arr1181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1183 := z.EncBinary()
				_ = yym1183
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1184 := z.EncBinary()
				_ = yym1184
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1181 || yy2arr1181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1186 := z.EncBinary()
				_ = yym1186
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1187 := z.EncBinary()
				_ = yym1187
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1181 || yy2arr1181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1188 := z.DecBinary()
	_ = yym1188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1189 := r.ContainerType()
		if yyct1189 == codecSelferValueTypeMap1234 {
			yyl1189 := r.ReadMapStart()
			if yyl1189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1189, d)
			}
		} else if yyct1189 == codecSelferValueTypeArray1234 {
			yyl1189 := r.ReadArrayStart()
			if yyl1189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1190Slc
	var yyhl1190 bool = l >= 0
	for yyj1190 := 0; ; yyj1190++ {
		if yyhl1190 {
			if yyj1190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1190Slc = r.DecodeBytes(yys1190Slc, true, true)
		yys1190 := string(yys1190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1190 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1190)
		} // end switch yys1190
	} // end for yyj1190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1193 int
	var yyb1193 bool
	var yyhl1193 bool = l >= 0
	yyj1193++
	if yyhl1193 {
		yyb1193 = yyj1193 > l
	} else {
		yyb1193 = r.CheckBreak()
	}
	if yyb1193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1193++
	if yyhl1193 {
		yyb1193 = yyj1193 > l
	} else {
		yyb1193 = r.CheckBreak()
	}
	if yyb1193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1193++
		if yyhl1193 {
			yyb1193 = yyj1193 > l
		} else {
			yyb1193 = r.CheckBreak()
		}
		if yyb1193 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1193-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1196 := z.EncBinary()
		_ = yym1196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1197 := !z.EncBinary()
			yy2arr1197 := z.EncBasicHandle().StructToArray
			var yyq1197 [2]bool
			_, _, _ = yysep1197, yyq1197, yy2arr1197
			const yyr1197 bool = false
			var yynn1197 int
			if yyr1197 || yy2arr1197 {
				r.EncodeArrayStart(2)
			} else {
				yynn1197 = 2
				for _, b := range yyq1197 {
					if b {
						yynn1197++
					}
				}
				r.EncodeMapStart(yynn1197)
				yynn1197 = 0
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1199 := z.EncBinary()
				_ = yym1199
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1200 := z.EncBinary()
				_ = yym1200
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1202 := z.EncBinary()
				_ = yym1202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1203 := z.EncBinary()
				_ = yym1203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1197 || yy2arr1197 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1204 := z.DecBinary()
	_ = yym1204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1205 := r.ContainerType()
		if yyct1205 == codecSelferValueTypeMap1234 {
			yyl1205 := r.ReadMapStart()
			if yyl1205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1205, d)
			}
		} else if yyct1205 == codecSelferValueTypeArray1234 {
			yyl1205 := r.ReadArrayStart()
			if yyl1205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1206Slc
	var yyhl1206 bool = l >= 0
	for yyj1206 := 0; ; yyj1206++ {
		if yyhl1206 {
			if yyj1206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1206Slc = r.DecodeBytes(yys1206Slc, true, true)
		yys1206 := string(yys1206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1206 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1206)
		} // end switch yys1206
	} // end for yyj1206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1209 int
	var yyb1209 bool
	var yyhl1209 bool = l >= 0
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1209++
	if yyhl1209 {
		yyb1209 = yyj1209 > l
	} else {
		yyb1209 = r.CheckBreak()
	}
	if yyb1209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1209++
		if yyhl1209 {
			yyb1209 = yyj1209 > l
		} else {
			yyb1209 = r.CheckBreak()
		}
		if yyb1209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1212 := z.EncBinary()
		_ = yym1212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1213 := !z.EncBinary()
			yy2arr1213 := z.EncBasicHandle().StructToArray
			var yyq1213 [2]bool
			_, _, _ = yysep1213, yyq1213, yy2arr1213
			const yyr1213 bool = false
			var yynn1213 int
			if yyr1213 || yy2arr1213 {
				r.EncodeArrayStart(2)
			} else {
				yynn1213 = 2
				for _, b := range yyq1213 {
					if b {
						yynn1213++
					}
				}
				r.EncodeMapStart(yynn1213)
				yynn1213 = 0
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1215 := z.EncBinary()
				_ = yym1215
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1216 := z.EncBinary()
				_ = yym1216
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1218 := z.EncBinary()
				_ = yym1218
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1219 := z.EncBinary()
				_ = yym1219
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1220 := z.DecBinary()
	_ = yym1220
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1221 := r.ContainerType()
		if yyct1221 == codecSelferValueTypeMap1234 {
			yyl1221 := r.ReadMapStart()
			if yyl1221 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1221, d)
			}
		} else if yyct1221 == codecSelferValueTypeArray1234 {
			yyl1221 := r.ReadArrayStart()
			if yyl1221 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1221, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1222Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1222Slc
	var yyhl1222 bool = l >= 0
	for yyj1222 := 0; ; yyj1222++ {
		if yyhl1222 {
			if yyj1222 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1222Slc = r.DecodeBytes(yys1222Slc, true, true)
		yys1222 := string(yys1222Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1222 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1222)
		} // end switch yys1222
	} // end for yyj1222
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1225 int
	var yyb1225 bool
	var yyhl1225 bool = l >= 0
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1225++
	if yyhl1225 {
		yyb1225 = yyj1225 > l
	} else {
		yyb1225 = r.CheckBreak()
	}
	if yyb1225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1225++
		if yyhl1225 {
			yyb1225 = yyj1225 > l
		} else {
			yyb1225 = r.CheckBreak()
		}
		if yyb1225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1228 := z.EncBinary()
		_ = yym1228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1229 := !z.EncBinary()
			yy2arr1229 := z.EncBasicHandle().StructToArray
			var yyq1229 [5]bool
			_, _, _ = yysep1229, yyq1229, yy2arr1229
			const yyr1229 bool = false
			yyq1229[0] = x.Path != ""
			yyq1229[1] = true
			yyq1229[2] = x.Host != ""
			yyq1229[3] = x.Scheme != ""
			yyq1229[4] = len(x.HTTPHeaders) != 0
			var yynn1229 int
			if yyr1229 || yy2arr1229 {
				r.EncodeArrayStart(5)
			} else {
				yynn1229 = 0
				for _, b := range yyq1229 {
					if b {
						yynn1229++
					}
				}
				r.EncodeMapStart(yynn1229)
				yynn1229 = 0
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1229[0] {
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1229[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1229[1] {
					yy1234 := &x.Port
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1234) {
					} else if !yym1235 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1234)
					} else {
						z.EncFallback(yy1234)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1229[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1236 := &x.Port
					yym1237 := z.EncBinary()
					_ = yym1237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1236) {
					} else if !yym1237 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1236)
					} else {
						z.EncFallback(yy1236)
					}
				}
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1229[2] {
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1229[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1240 := z.EncBinary()
					_ = yym1240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1229[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1229[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1229[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1243 := z.EncBinary()
						_ = yym1243
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1229[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1244 := z.EncBinary()
						_ = yym1244
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1245 := z.DecBinary()
	_ = yym1245
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1246 := r.ContainerType()
		if yyct1246 == codecSelferValueTypeMap1234 {
			yyl1246 := r.ReadMapStart()
			if yyl1246 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1246, d)
			}
		} else if yyct1246 == codecSelferValueTypeArray1234 {
			yyl1246 := r.ReadArrayStart()
			if yyl1246 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1246, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1247Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1247Slc
	var yyhl1247 bool = l >= 0
	for yyj1247 := 0; ; yyj1247++ {
		if yyhl1247 {
			if yyj1247 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1247Slc = r.DecodeBytes(yys1247Slc, true, true)
		yys1247 := string(yys1247Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1247 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1249 := &x.Port
				yym1250 := z.DecBinary()
				_ = yym1250
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1249) {
				} else if !yym1250 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1249)
				} else {
					z.DecFallback(yyv1249, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1253 := &x.HTTPHeaders
				yym1254 := z.DecBinary()
				_ = yym1254
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1253), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1247)
		} // end switch yys1247
	} // end for yyj1247
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1255 int
	var yyb1255 bool
	var yyhl1255 bool = l >= 0
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1257 := &x.Port
		yym1258 := z.DecBinary()
		_ = yym1258
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1257) {
		} else if !yym1258 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1257)
		} else {
			z.DecFallback(yyv1257, false)
		}
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1255++
	if yyhl1255 {
		yyb1255 = yyj1255 > l
	} else {
		yyb1255 = r.CheckBreak()
	}
	if yyb1255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1261 := &x.HTTPHeaders
		yym1262 := z.DecBinary()
		_ = yym1262
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1261), d)
		}
	}
	for {
		yyj1255++
		if yyhl1255 {
			yyb1255 = yyj1255 > l
		} else {
			yyb1255 = r.CheckBreak()
		}
		if yyb1255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1263 := z.EncBinary()
	_ = yym1263
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1264 := z.DecBinary()
	_ = yym1264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1265 := z.EncBinary()
		_ = yym1265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1266 := !z.EncBinary()
			yy2arr1266 := z.EncBasicHandle().StructToArray
			var yyq1266 [1]bool
			_, _, _ = yysep1266, yyq1266, yy2arr1266
			const yyr1266 bool = false
			yyq1266[0] = true
			var yynn1266 int
			if yyr1266 || yy2arr1266 {
				r.EncodeArrayStart(1)
			} else {
				yynn1266 = 0
				for _, b := range yyq1266 {
					if b {
						yynn1266++
					}
				}
				r.EncodeMapStart(yynn1266)
				yynn1266 = 0
			}
			if yyr1266 || yy2arr1266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1266[0] {
					yy1268 := &x.Port
					yym1269 := z.EncBinary()
					_ = yym1269
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1268) {
					} else if !yym1269 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1268)
					} else {
						z.EncFallback(yy1268)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1266[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1270 := &x.Port
					yym1271 := z.EncBinary()
					_ = yym1271
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1270) {
					} else if !yym1271 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1270)
					} else {
						z.EncFallback(yy1270)
					}
				}
			}
			if yyr1266 || yy2arr1266 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1272 := z.DecBinary()
	_ = yym1272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1273 := r.ContainerType()
		if yyct1273 == codecSelferValueTypeMap1234 {
			yyl1273 := r.ReadMapStart()
			if yyl1273 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1273, d)
			}
		} else if yyct1273 == codecSelferValueTypeArray1234 {
			yyl1273 := r.ReadArrayStart()
			if yyl1273 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1274Slc
	var yyhl1274 bool = l >= 0
	for yyj1274 := 0; ; yyj1274++ {
		if yyhl1274 {
			if yyj1274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1274Slc = r.DecodeBytes(yys1274Slc, true, true)
		yys1274 := string(yys1274Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1274 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1275 := &x.Port
				yym1276 := z.DecBinary()
				_ = yym1276
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1275) {
				} else if !yym1276 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1275)
				} else {
					z.DecFallback(yyv1275, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1274)
		} // end switch yys1274
	} // end for yyj1274
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1277 int
	var yyb1277 bool
	var yyhl1277 bool = l >= 0
	yyj1277++
	if yyhl1277 {
		yyb1277 = yyj1277 > l
	} else {
		yyb1277 = r.CheckBreak()
	}
	if yyb1277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1278 := &x.Port
		yym1279 := z.DecBinary()
		_ = yym1279
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1278) {
		} else if !yym1279 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1278)
		} else {
			z.DecFallback(yyv1278, false)
		}
	}
	for {
		yyj1277++
		if yyhl1277 {
			yyb1277 = yyj1277 > l
		} else {
			yyb1277 = r.CheckBreak()
		}
		if yyb1277 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1277-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1280 := z.EncBinary()
		_ = yym1280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1281 := !z.EncBinary()
			yy2arr1281 := z.EncBasicHandle().StructToArray
			var yyq1281 [1]bool
			_, _, _ = yysep1281, yyq1281, yy2arr1281
			const yyr1281 bool = false
			yyq1281[0] = len(x.Command) != 0
			var yynn1281 int
			if yyr1281 || yy2arr1281 {
				r.EncodeArrayStart(1)
			} else {
				yynn1281 = 0
				for _, b := range yyq1281 {
					if b {
						yynn1281++
					}
				}
				r.EncodeMapStart(yynn1281)
				yynn1281 = 0
			}
			if yyr1281 || yy2arr1281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1281[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1283 := z.EncBinary()
						_ = yym1283
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1281[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1284 := z.EncBinary()
						_ = yym1284
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1281 || yy2arr1281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1285 := z.DecBinary()
	_ = yym1285
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1286 := r.ContainerType()
		if yyct1286 == codecSelferValueTypeMap1234 {
			yyl1286 := r.ReadMapStart()
			if yyl1286 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1286, d)
			}
		} else if yyct1286 == codecSelferValueTypeArray1234 {
			yyl1286 := r.ReadArrayStart()
			if yyl1286 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1286, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1287Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1287Slc
	var yyhl1287 bool = l >= 0
	for yyj1287 := 0; ; yyj1287++ {
		if yyhl1287 {
			if yyj1287 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1287Slc = r.DecodeBytes(yys1287Slc, true, true)
		yys1287 := string(yys1287Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1287 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1288 := &x.Command
				yym1289 := z.DecBinary()
				_ = yym1289
				if false {
				} else {
					z.F.DecSliceStringX(yyv1288, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1287)
		} // end switch yys1287
	} // end for yyj1287
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1290 int
	var yyb1290 bool
	var yyhl1290 bool = l >= 0
	yyj1290++
	if yyhl1290 {
		yyb1290 = yyj1290 > l
	} else {
		yyb1290 = r.CheckBreak()
	}
	if yyb1290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1291 := &x.Command
		yym1292 := z.DecBinary()
		_ = yym1292
		if false {
		} else {
			z.F.DecSliceStringX(yyv1291, false, d)
		}
	}
	for {
		yyj1290++
		if yyhl1290 {
			yyb1290 = yyj1290 > l
		} else {
			yyb1290 = r.CheckBreak()
		}
		if yyb1290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1293 := z.EncBinary()
		_ = yym1293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1294 := !z.EncBinary()
			yy2arr1294 := z.EncBasicHandle().StructToArray
			var yyq1294 [8]bool
			_, _, _ = yysep1294, yyq1294, yy2arr1294
			const yyr1294 bool = false
			yyq1294[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1294[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1294[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1294[3] = x.InitialDelaySeconds != 0
			yyq1294[4] = x.TimeoutSeconds != 0
			yyq1294[5] = x.PeriodSeconds != 0
			yyq1294[6] = x.SuccessThreshold != 0
			yyq1294[7] = x.FailureThreshold != 0
			var yynn1294 int
			if yyr1294 || yy2arr1294 {
				r.EncodeArrayStart(8)
			} else {
				yynn1294 = 0
				for _, b := range yyq1294 {
					if b {
						yynn1294++
					}
				}
				r.EncodeMapStart(yynn1294)
				yynn1294 = 0
			}
			var yyn1295 bool
			if x.Handler.Exec == nil {
				yyn1295 = true
				goto LABEL1295
			}
		LABEL1295:
			if yyr1294 || yy2arr1294 {
				if yyn1295 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1294[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1295 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1296 bool
			if x.Handler.HTTPGet == nil {
				yyn1296 = true
				goto LABEL1296
			}
		LABEL1296:
			if yyr1294 || yy2arr1294 {
				if yyn1296 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1294[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1294[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1296 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1297 bool
			if x.Handler.TCPSocket == nil {
				yyn1297 = true
				goto LABEL1297
			}
		LABEL1297:
			if yyr1294 || yy2arr1294 {
				if yyn1297 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1294[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1294[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1297 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1294[3] {
					yym1299 := z.EncBinary()
					_ = yym1299
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1294[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1294[4] {
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1294[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1294[5] {
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1294[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1306 := z.EncBinary()
					_ = yym1306
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1294[6] {
					yym1308 := z.EncBinary()
					_ = yym1308
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1294[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1309 := z.EncBinary()
					_ = yym1309
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1294[7] {
					yym1311 := z.EncBinary()
					_ = yym1311
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1294[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1312 := z.EncBinary()
					_ = yym1312
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1294 || yy2arr1294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1313 := z.DecBinary()
	_ = yym1313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1314 := r.ContainerType()
		if yyct1314 == codecSelferValueTypeMap1234 {
			yyl1314 := r.ReadMapStart()
			if yyl1314 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1314, d)
			}
		} else if yyct1314 == codecSelferValueTypeArray1234 {
			yyl1314 := r.ReadArrayStart()
			if yyl1314 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1315Slc
	var yyhl1315 bool = l >= 0
	for yyj1315 := 0; ; yyj1315++ {
		if yyhl1315 {
			if yyj1315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1315Slc = r.DecodeBytes(yys1315Slc, true, true)
		yys1315 := string(yys1315Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1315 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1315)
		} // end switch yys1315
	} // end for yyj1315
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1324 int
	var yyb1324 bool
	var yyhl1324 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1324++
	if yyhl1324 {
		yyb1324 = yyj1324 > l
	} else {
		yyb1324 = r.CheckBreak()
	}
	if yyb1324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1324++
	if yyhl1324 {
		yyb1324 = yyj1324 > l
	} else {
		yyb1324 = r.CheckBreak()
	}
	if yyb1324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1324++
	if yyhl1324 {
		yyb1324 = yyj1324 > l
	} else {
		yyb1324 = r.CheckBreak()
	}
	if yyb1324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1324++
	if yyhl1324 {
		yyb1324 = yyj1324 > l
	} else {
		yyb1324 = r.CheckBreak()
	}
	if yyb1324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1324++
	if yyhl1324 {
		yyb1324 = yyj1324 > l
	} else {
		yyb1324 = r.CheckBreak()
	}
	if yyb1324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1324++
	if yyhl1324 {
		yyb1324 = yyj1324 > l
	} else {
		yyb1324 = r.CheckBreak()
	}
	if yyb1324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1324++
	if yyhl1324 {
		yyb1324 = yyj1324 > l
	} else {
		yyb1324 = r.CheckBreak()
	}
	if yyb1324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1324++
	if yyhl1324 {
		yyb1324 = yyj1324 > l
	} else {
		yyb1324 = r.CheckBreak()
	}
	if yyb1324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1324++
		if yyhl1324 {
			yyb1324 = yyj1324 > l
		} else {
			yyb1324 = r.CheckBreak()
		}
		if yyb1324 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1324-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1333 := z.EncBinary()
	_ = yym1333
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1334 := z.DecBinary()
	_ = yym1334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1335 := z.EncBinary()
	_ = yym1335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1336 := z.DecBinary()
	_ = yym1336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1337 := z.EncBinary()
		_ = yym1337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1338 := !z.EncBinary()
			yy2arr1338 := z.EncBasicHandle().StructToArray
			var yyq1338 [2]bool
			_, _, _ = yysep1338, yyq1338, yy2arr1338
			const yyr1338 bool = false
			yyq1338[0] = len(x.Add) != 0
			yyq1338[1] = len(x.Drop) != 0
			var yynn1338 int
			if yyr1338 || yy2arr1338 {
				r.EncodeArrayStart(2)
			} else {
				yynn1338 = 0
				for _, b := range yyq1338 {
					if b {
						yynn1338++
					}
				}
				r.EncodeMapStart(yynn1338)
				yynn1338 = 0
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1338[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1340 := z.EncBinary()
						_ = yym1340
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1341 := z.EncBinary()
						_ = yym1341
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1338[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1343 := z.EncBinary()
						_ = yym1343
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1344 := z.EncBinary()
						_ = yym1344
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1345 := z.DecBinary()
	_ = yym1345
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1346 := r.ContainerType()
		if yyct1346 == codecSelferValueTypeMap1234 {
			yyl1346 := r.ReadMapStart()
			if yyl1346 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1346, d)
			}
		} else if yyct1346 == codecSelferValueTypeArray1234 {
			yyl1346 := r.ReadArrayStart()
			if yyl1346 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1346, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1347Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1347Slc
	var yyhl1347 bool = l >= 0
	for yyj1347 := 0; ; yyj1347++ {
		if yyhl1347 {
			if yyj1347 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1347Slc = r.DecodeBytes(yys1347Slc, true, true)
		yys1347 := string(yys1347Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1347 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1348 := &x.Add
				yym1349 := z.DecBinary()
				_ = yym1349
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1348), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1350 := &x.Drop
				yym1351 := z.DecBinary()
				_ = yym1351
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1350), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1347)
		} // end switch yys1347
	} // end for yyj1347
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1352 int
	var yyb1352 bool
	var yyhl1352 bool = l >= 0
	yyj1352++
	if yyhl1352 {
		yyb1352 = yyj1352 > l
	} else {
		yyb1352 = r.CheckBreak()
	}
	if yyb1352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1353 := &x.Add
		yym1354 := z.DecBinary()
		_ = yym1354
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1353), d)
		}
	}
	yyj1352++
	if yyhl1352 {
		yyb1352 = yyj1352 > l
	} else {
		yyb1352 = r.CheckBreak()
	}
	if yyb1352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1355 := &x.Drop
		yym1356 := z.DecBinary()
		_ = yym1356
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1355), d)
		}
	}
	for {
		yyj1352++
		if yyhl1352 {
			yyb1352 = yyj1352 > l
		} else {
			yyb1352 = r.CheckBreak()
		}
		if yyb1352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1357 := z.EncBinary()
		_ = yym1357
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1358 := !z.EncBinary()
			yy2arr1358 := z.EncBasicHandle().StructToArray
			var yyq1358 [2]bool
			_, _, _ = yysep1358, yyq1358, yy2arr1358
			const yyr1358 bool = false
			yyq1358[0] = len(x.Limits) != 0
			yyq1358[1] = len(x.Requests) != 0
			var yynn1358 int
			if yyr1358 || yy2arr1358 {
				r.EncodeArrayStart(2)
			} else {
				yynn1358 = 0
				for _, b := range yyq1358 {
					if b {
						yynn1358++
					}
				}
				r.EncodeMapStart(yynn1358)
				yynn1358 = 0
			}
			if yyr1358 || yy2arr1358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1358[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1358[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1358 || yy2arr1358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1358[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1358[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1358 || yy2arr1358 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1361 := z.DecBinary()
	_ = yym1361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1362 := r.ContainerType()
		if yyct1362 == codecSelferValueTypeMap1234 {
			yyl1362 := r.ReadMapStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1362, d)
			}
		} else if yyct1362 == codecSelferValueTypeArray1234 {
			yyl1362 := r.ReadArrayStart()
			if yyl1362 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1362, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1363Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1363Slc
	var yyhl1363 bool = l >= 0
	for yyj1363 := 0; ; yyj1363++ {
		if yyhl1363 {
			if yyj1363 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1363Slc = r.DecodeBytes(yys1363Slc, true, true)
		yys1363 := string(yys1363Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1363 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1364 := &x.Limits
				yyv1364.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1365 := &x.Requests
				yyv1365.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1363)
		} // end switch yys1363
	} // end for yyj1363
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1366 int
	var yyb1366 bool
	var yyhl1366 bool = l >= 0
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1367 := &x.Limits
		yyv1367.CodecDecodeSelf(d)
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1368 := &x.Requests
		yyv1368.CodecDecodeSelf(d)
	}
	for {
		yyj1366++
		if yyhl1366 {
			yyb1366 = yyj1366 > l
		} else {
			yyb1366 = r.CheckBreak()
		}
		if yyb1366 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1366-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1369 := z.EncBinary()
		_ = yym1369
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1370 := !z.EncBinary()
			yy2arr1370 := z.EncBasicHandle().StructToArray
			var yyq1370 [18]bool
			_, _, _ = yysep1370, yyq1370, yy2arr1370
			const yyr1370 bool = false
			yyq1370[2] = len(x.Command) != 0
			yyq1370[3] = len(x.Args) != 0
			yyq1370[4] = x.WorkingDir != ""
			yyq1370[5] = len(x.Ports) != 0
			yyq1370[6] = len(x.Env) != 0
			yyq1370[7] = true
			yyq1370[8] = len(x.VolumeMounts) != 0
			yyq1370[9] = x.LivenessProbe != nil
			yyq1370[10] = x.ReadinessProbe != nil
			yyq1370[11] = x.Lifecycle != nil
			yyq1370[12] = x.TerminationMessagePath != ""
			yyq1370[14] = x.SecurityContext != nil
			yyq1370[15] = x.Stdin != false
			yyq1370[16] = x.StdinOnce != false
			yyq1370[17] = x.TTY != false
			var yynn1370 int
			if yyr1370 || yy2arr1370 {
				r.EncodeArrayStart(18)
			} else {
				yynn1370 = 3
				for _, b := range yyq1370 {
					if b {
						yynn1370++
					}
				}
				r.EncodeMapStart(yynn1370)
				yynn1370 = 0
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1372 := z.EncBinary()
				_ = yym1372
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1373 := z.EncBinary()
				_ = yym1373
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1375 := z.EncBinary()
				_ = yym1375
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1376 := z.EncBinary()
				_ = yym1376
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1378 := z.EncBinary()
						_ = yym1378
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1379 := z.EncBinary()
						_ = yym1379
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1381 := z.EncBinary()
						_ = yym1381
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1382 := z.EncBinary()
						_ = yym1382
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[4] {
					yym1384 := z.EncBinary()
					_ = yym1384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1370[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1387 := z.EncBinary()
						_ = yym1387
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1388 := z.EncBinary()
						_ = yym1388
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1390 := z.EncBinary()
						_ = yym1390
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1391 := z.EncBinary()
						_ = yym1391
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[7] {
					yy1393 := &x.Resources
					yy1393.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1394 := &x.Resources
					yy1394.CodecEncodeSelf(e)
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1396 := z.EncBinary()
						_ = yym1396
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1397 := z.EncBinary()
						_ = yym1397
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[12] {
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1370[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1403 := z.EncBinary()
					_ = yym1403
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1370[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[15] {
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1370[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[16] {
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1370[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1411 := z.EncBinary()
					_ = yym1411
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1370[17] {
					yym1413 := z.EncBinary()
					_ = yym1413
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1370[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1414 := z.EncBinary()
					_ = yym1414
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1370 || yy2arr1370 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1415 := z.DecBinary()
	_ = yym1415
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1416 := r.ContainerType()
		if yyct1416 == codecSelferValueTypeMap1234 {
			yyl1416 := r.ReadMapStart()
			if yyl1416 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1416, d)
			}
		} else if yyct1416 == codecSelferValueTypeArray1234 {
			yyl1416 := r.ReadArrayStart()
			if yyl1416 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1416, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1417Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1417Slc
	var yyhl1417 bool = l >= 0
	for yyj1417 := 0; ; yyj1417++ {
		if yyhl1417 {
			if yyj1417 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1417Slc = r.DecodeBytes(yys1417Slc, true, true)
		yys1417 := string(yys1417Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1417 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1420 := &x.Command
				yym1421 := z.DecBinary()
				_ = yym1421
				if false {
				} else {
					z.F.DecSliceStringX(yyv1420, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1422 := &x.Args
				yym1423 := z.DecBinary()
				_ = yym1423
				if false {
				} else {
					z.F.DecSliceStringX(yyv1422, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1425 := &x.Ports
				yym1426 := z.DecBinary()
				_ = yym1426
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1425), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1427 := &x.Env
				yym1428 := z.DecBinary()
				_ = yym1428
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1427), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1429 := &x.Resources
				yyv1429.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1430 := &x.VolumeMounts
				yym1431 := z.DecBinary()
				_ = yym1431
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1430), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1417)
		} // end switch yys1417
	} // end for yyj1417
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1441 int
	var yyb1441 bool
	var yyhl1441 bool = l >= 0
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1444 := &x.Command
		yym1445 := z.DecBinary()
		_ = yym1445
		if false {
		} else {
			z.F.DecSliceStringX(yyv1444, false, d)
		}
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1446 := &x.Args
		yym1447 := z.DecBinary()
		_ = yym1447
		if false {
		} else {
			z.F.DecSliceStringX(yyv1446, false, d)
		}
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1449 := &x.Ports
		yym1450 := z.DecBinary()
		_ = yym1450
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1449), d)
		}
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1451 := &x.Env
		yym1452 := z.DecBinary()
		_ = yym1452
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1451), d)
		}
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1453 := &x.Resources
		yyv1453.CodecDecodeSelf(d)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1454 := &x.VolumeMounts
		yym1455 := z.DecBinary()
		_ = yym1455
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1454), d)
		}
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1441++
	if yyhl1441 {
		yyb1441 = yyj1441 > l
	} else {
		yyb1441 = r.CheckBreak()
	}
	if yyb1441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1441++
		if yyhl1441 {
			yyb1441 = yyj1441 > l
		} else {
			yyb1441 = r.CheckBreak()
		}
		if yyb1441 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1441-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1465 := z.EncBinary()
		_ = yym1465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1466 := !z.EncBinary()
			yy2arr1466 := z.EncBasicHandle().StructToArray
			var yyq1466 [3]bool
			_, _, _ = yysep1466, yyq1466, yy2arr1466
			const yyr1466 bool = false
			yyq1466[0] = x.Exec != nil
			yyq1466[1] = x.HTTPGet != nil
			yyq1466[2] = x.TCPSocket != nil
			var yynn1466 int
			if yyr1466 || yy2arr1466 {
				r.EncodeArrayStart(3)
			} else {
				yynn1466 = 0
				for _, b := range yyq1466 {
					if b {
						yynn1466++
					}
				}
				r.EncodeMapStart(yynn1466)
				yynn1466 = 0
			}
			if yyr1466 || yy2arr1466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1466[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1466[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1466 || yy2arr1466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1466[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1466[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1466 || yy2arr1466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1466[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1466[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1466 || yy2arr1466 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1470 := z.DecBinary()
	_ = yym1470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1471 := r.ContainerType()
		if yyct1471 == codecSelferValueTypeMap1234 {
			yyl1471 := r.ReadMapStart()
			if yyl1471 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1471, d)
			}
		} else if yyct1471 == codecSelferValueTypeArray1234 {
			yyl1471 := r.ReadArrayStart()
			if yyl1471 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1471, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1472Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1472Slc
	var yyhl1472 bool = l >= 0
	for yyj1472 := 0; ; yyj1472++ {
		if yyhl1472 {
			if yyj1472 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1472Slc = r.DecodeBytes(yys1472Slc, true, true)
		yys1472 := string(yys1472Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1472 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1472)
		} // end switch yys1472
	} // end for yyj1472
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1476 int
	var yyb1476 bool
	var yyhl1476 bool = l >= 0
	yyj1476++
	if yyhl1476 {
		yyb1476 = yyj1476 > l
	} else {
		yyb1476 = r.CheckBreak()
	}
	if yyb1476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1476++
	if yyhl1476 {
		yyb1476 = yyj1476 > l
	} else {
		yyb1476 = r.CheckBreak()
	}
	if yyb1476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1476++
	if yyhl1476 {
		yyb1476 = yyj1476 > l
	} else {
		yyb1476 = r.CheckBreak()
	}
	if yyb1476 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1476++
		if yyhl1476 {
			yyb1476 = yyj1476 > l
		} else {
			yyb1476 = r.CheckBreak()
		}
		if yyb1476 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1476-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1480 := z.EncBinary()
		_ = yym1480
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1481 := !z.EncBinary()
			yy2arr1481 := z.EncBasicHandle().StructToArray
			var yyq1481 [2]bool
			_, _, _ = yysep1481, yyq1481, yy2arr1481
			const yyr1481 bool = false
			yyq1481[0] = x.PostStart != nil
			yyq1481[1] = x.PreStop != nil
			var yynn1481 int
			if yyr1481 || yy2arr1481 {
				r.EncodeArrayStart(2)
			} else {
				yynn1481 = 0
				for _, b := range yyq1481 {
					if b {
						yynn1481++
					}
				}
				r.EncodeMapStart(yynn1481)
				yynn1481 = 0
			}
			if yyr1481 || yy2arr1481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1481[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1481[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1481 || yy2arr1481 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1481[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1481[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1481 || yy2arr1481 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1484 := z.DecBinary()
	_ = yym1484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1485 := r.ContainerType()
		if yyct1485 == codecSelferValueTypeMap1234 {
			yyl1485 := r.ReadMapStart()
			if yyl1485 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1485, d)
			}
		} else if yyct1485 == codecSelferValueTypeArray1234 {
			yyl1485 := r.ReadArrayStart()
			if yyl1485 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1485, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1486Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1486Slc
	var yyhl1486 bool = l >= 0
	for yyj1486 := 0; ; yyj1486++ {
		if yyhl1486 {
			if yyj1486 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1486Slc = r.DecodeBytes(yys1486Slc, true, true)
		yys1486 := string(yys1486Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1486 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1486)
		} // end switch yys1486
	} // end for yyj1486
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1489 int
	var yyb1489 bool
	var yyhl1489 bool = l >= 0
	yyj1489++
	if yyhl1489 {
		yyb1489 = yyj1489 > l
	} else {
		yyb1489 = r.CheckBreak()
	}
	if yyb1489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1489++
	if yyhl1489 {
		yyb1489 = yyj1489 > l
	} else {
		yyb1489 = r.CheckBreak()
	}
	if yyb1489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1489++
		if yyhl1489 {
			yyb1489 = yyj1489 > l
		} else {
			yyb1489 = r.CheckBreak()
		}
		if yyb1489 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1489-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1492 := z.EncBinary()
	_ = yym1492
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1493 := z.DecBinary()
	_ = yym1493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1494 := z.EncBinary()
		_ = yym1494
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1495 := !z.EncBinary()
			yy2arr1495 := z.EncBasicHandle().StructToArray
			var yyq1495 [2]bool
			_, _, _ = yysep1495, yyq1495, yy2arr1495
			const yyr1495 bool = false
			yyq1495[0] = x.Reason != ""
			yyq1495[1] = x.Message != ""
			var yynn1495 int
			if yyr1495 || yy2arr1495 {
				r.EncodeArrayStart(2)
			} else {
				yynn1495 = 0
				for _, b := range yyq1495 {
					if b {
						yynn1495++
					}
				}
				r.EncodeMapStart(yynn1495)
				yynn1495 = 0
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[0] {
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1495[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1495[1] {
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1495[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1495 || yy2arr1495 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1502 := z.DecBinary()
	_ = yym1502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1503 := r.ContainerType()
		if yyct1503 == codecSelferValueTypeMap1234 {
			yyl1503 := r.ReadMapStart()
			if yyl1503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1503, d)
			}
		} else if yyct1503 == codecSelferValueTypeArray1234 {
			yyl1503 := r.ReadArrayStart()
			if yyl1503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1504Slc
	var yyhl1504 bool = l >= 0
	for yyj1504 := 0; ; yyj1504++ {
		if yyhl1504 {
			if yyj1504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1504Slc = r.DecodeBytes(yys1504Slc, true, true)
		yys1504 := string(yys1504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1504 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1504)
		} // end switch yys1504
	} // end for yyj1504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1507 int
	var yyb1507 bool
	var yyhl1507 bool = l >= 0
	yyj1507++
	if yyhl1507 {
		yyb1507 = yyj1507 > l
	} else {
		yyb1507 = r.CheckBreak()
	}
	if yyb1507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1507++
	if yyhl1507 {
		yyb1507 = yyj1507 > l
	} else {
		yyb1507 = r.CheckBreak()
	}
	if yyb1507 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1507++
		if yyhl1507 {
			yyb1507 = yyj1507 > l
		} else {
			yyb1507 = r.CheckBreak()
		}
		if yyb1507 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1507-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1510 := z.EncBinary()
		_ = yym1510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1511 := !z.EncBinary()
			yy2arr1511 := z.EncBasicHandle().StructToArray
			var yyq1511 [1]bool
			_, _, _ = yysep1511, yyq1511, yy2arr1511
			const yyr1511 bool = false
			yyq1511[0] = true
			var yynn1511 int
			if yyr1511 || yy2arr1511 {
				r.EncodeArrayStart(1)
			} else {
				yynn1511 = 0
				for _, b := range yyq1511 {
					if b {
						yynn1511++
					}
				}
				r.EncodeMapStart(yynn1511)
				yynn1511 = 0
			}
			if yyr1511 || yy2arr1511 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1511[0] {
					yy1513 := &x.StartedAt
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1513) {
					} else if yym1514 {
						z.EncBinaryMarshal(yy1513)
					} else if !yym1514 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1513)
					} else {
						z.EncFallback(yy1513)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1511[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1515 := &x.StartedAt
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1515) {
					} else if yym1516 {
						z.EncBinaryMarshal(yy1515)
					} else if !yym1516 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1515)
					} else {
						z.EncFallback(yy1515)
					}
				}
			}
			if yyr1511 || yy2arr1511 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1517 := z.DecBinary()
	_ = yym1517
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1518 := r.ContainerType()
		if yyct1518 == codecSelferValueTypeMap1234 {
			yyl1518 := r.ReadMapStart()
			if yyl1518 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1518, d)
			}
		} else if yyct1518 == codecSelferValueTypeArray1234 {
			yyl1518 := r.ReadArrayStart()
			if yyl1518 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1518, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1519Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1519Slc
	var yyhl1519 bool = l >= 0
	for yyj1519 := 0; ; yyj1519++ {
		if yyhl1519 {
			if yyj1519 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1519Slc = r.DecodeBytes(yys1519Slc, true, true)
		yys1519 := string(yys1519Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1519 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1520 := &x.StartedAt
				yym1521 := z.DecBinary()
				_ = yym1521
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1520) {
				} else if yym1521 {
					z.DecBinaryUnmarshal(yyv1520)
				} else if !yym1521 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1520)
				} else {
					z.DecFallback(yyv1520, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1519)
		} // end switch yys1519
	} // end for yyj1519
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1522 int
	var yyb1522 bool
	var yyhl1522 bool = l >= 0
	yyj1522++
	if yyhl1522 {
		yyb1522 = yyj1522 > l
	} else {
		yyb1522 = r.CheckBreak()
	}
	if yyb1522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1523 := &x.StartedAt
		yym1524 := z.DecBinary()
		_ = yym1524
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1523) {
		} else if yym1524 {
			z.DecBinaryUnmarshal(yyv1523)
		} else if !yym1524 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1523)
		} else {
			z.DecFallback(yyv1523, false)
		}
	}
	for {
		yyj1522++
		if yyhl1522 {
			yyb1522 = yyj1522 > l
		} else {
			yyb1522 = r.CheckBreak()
		}
		if yyb1522 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1522-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1525 := z.EncBinary()
		_ = yym1525
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1526 := !z.EncBinary()
			yy2arr1526 := z.EncBasicHandle().StructToArray
			var yyq1526 [7]bool
			_, _, _ = yysep1526, yyq1526, yy2arr1526
			const yyr1526 bool = false
			yyq1526[1] = x.Signal != 0
			yyq1526[2] = x.Reason != ""
			yyq1526[3] = x.Message != ""
			yyq1526[4] = true
			yyq1526[5] = true
			yyq1526[6] = x.ContainerID != ""
			var yynn1526 int
			if yyr1526 || yy2arr1526 {
				r.EncodeArrayStart(7)
			} else {
				yynn1526 = 1
				for _, b := range yyq1526 {
					if b {
						yynn1526++
					}
				}
				r.EncodeMapStart(yynn1526)
				yynn1526 = 0
			}
			if yyr1526 || yy2arr1526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1528 := z.EncBinary()
				_ = yym1528
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1529 := z.EncBinary()
				_ = yym1529
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1526 || yy2arr1526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1526[1] {
					yym1531 := z.EncBinary()
					_ = yym1531
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1526[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1532 := z.EncBinary()
					_ = yym1532
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1526 || yy2arr1526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1526[2] {
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1526[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1526 || yy2arr1526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1526[3] {
					yym1537 := z.EncBinary()
					_ = yym1537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1526[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1538 := z.EncBinary()
					_ = yym1538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1526 || yy2arr1526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1526[4] {
					yy1540 := &x.StartedAt
					yym1541 := z.EncBinary()
					_ = yym1541
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1540) {
					} else if yym1541 {
						z.EncBinaryMarshal(yy1540)
					} else if !yym1541 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1540)
					} else {
						z.EncFallback(yy1540)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1526[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1542 := &x.StartedAt
					yym1543 := z.EncBinary()
					_ = yym1543
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1542) {
					} else if yym1543 {
						z.EncBinaryMarshal(yy1542)
					} else if !yym1543 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1542)
					} else {
						z.EncFallback(yy1542)
					}
				}
			}
			if yyr1526 || yy2arr1526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1526[5] {
					yy1545 := &x.FinishedAt
					yym1546 := z.EncBinary()
					_ = yym1546
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1545) {
					} else if yym1546 {
						z.EncBinaryMarshal(yy1545)
					} else if !yym1546 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1545)
					} else {
						z.EncFallback(yy1545)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1526[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1547 := &x.FinishedAt
					yym1548 := z.EncBinary()
					_ = yym1548
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1547) {
					} else if yym1548 {
						z.EncBinaryMarshal(yy1547)
					} else if !yym1548 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1547)
					} else {
						z.EncFallback(yy1547)
					}
				}
			}
			if yyr1526 || yy2arr1526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1526[6] {
					yym1550 := z.EncBinary()
					_ = yym1550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1526[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1551 := z.EncBinary()
					_ = yym1551
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1526 || yy2arr1526 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1552 := z.DecBinary()
	_ = yym1552
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1553 := r.ContainerType()
		if yyct1553 == codecSelferValueTypeMap1234 {
			yyl1553 := r.ReadMapStart()
			if yyl1553 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1553, d)
			}
		} else if yyct1553 == codecSelferValueTypeArray1234 {
			yyl1553 := r.ReadArrayStart()
			if yyl1553 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1553, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1554Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1554Slc
	var yyhl1554 bool = l >= 0
	for yyj1554 := 0; ; yyj1554++ {
		if yyhl1554 {
			if yyj1554 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1554Slc = r.DecodeBytes(yys1554Slc, true, true)
		yys1554 := string(yys1554Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1554 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1559 := &x.StartedAt
				yym1560 := z.DecBinary()
				_ = yym1560
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1559) {
				} else if yym1560 {
					z.DecBinaryUnmarshal(yyv1559)
				} else if !yym1560 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1559)
				} else {
					z.DecFallback(yyv1559, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1561 := &x.FinishedAt
				yym1562 := z.DecBinary()
				_ = yym1562
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1561) {
				} else if yym1562 {
					z.DecBinaryUnmarshal(yyv1561)
				} else if !yym1562 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1561)
				} else {
					z.DecFallback(yyv1561, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1554)
		} // end switch yys1554
	} // end for yyj1554
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1564 int
	var yyb1564 bool
	var yyhl1564 bool = l >= 0
	yyj1564++
	if yyhl1564 {
		yyb1564 = yyj1564 > l
	} else {
		yyb1564 = r.CheckBreak()
	}
	if yyb1564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1564++
	if yyhl1564 {
		yyb1564 = yyj1564 > l
	} else {
		yyb1564 = r.CheckBreak()
	}
	if yyb1564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1564++
	if yyhl1564 {
		yyb1564 = yyj1564 > l
	} else {
		yyb1564 = r.CheckBreak()
	}
	if yyb1564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1564++
	if yyhl1564 {
		yyb1564 = yyj1564 > l
	} else {
		yyb1564 = r.CheckBreak()
	}
	if yyb1564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1564++
	if yyhl1564 {
		yyb1564 = yyj1564 > l
	} else {
		yyb1564 = r.CheckBreak()
	}
	if yyb1564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1569 := &x.StartedAt
		yym1570 := z.DecBinary()
		_ = yym1570
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1569) {
		} else if yym1570 {
			z.DecBinaryUnmarshal(yyv1569)
		} else if !yym1570 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1569)
		} else {
			z.DecFallback(yyv1569, false)
		}
	}
	yyj1564++
	if yyhl1564 {
		yyb1564 = yyj1564 > l
	} else {
		yyb1564 = r.CheckBreak()
	}
	if yyb1564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1571 := &x.FinishedAt
		yym1572 := z.DecBinary()
		_ = yym1572
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1571) {
		} else if yym1572 {
			z.DecBinaryUnmarshal(yyv1571)
		} else if !yym1572 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1571)
		} else {
			z.DecFallback(yyv1571, false)
		}
	}
	yyj1564++
	if yyhl1564 {
		yyb1564 = yyj1564 > l
	} else {
		yyb1564 = r.CheckBreak()
	}
	if yyb1564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1564++
		if yyhl1564 {
			yyb1564 = yyj1564 > l
		} else {
			yyb1564 = r.CheckBreak()
		}
		if yyb1564 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1564-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1574 := z.EncBinary()
		_ = yym1574
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1575 := !z.EncBinary()
			yy2arr1575 := z.EncBasicHandle().StructToArray
			var yyq1575 [3]bool
			_, _, _ = yysep1575, yyq1575, yy2arr1575
			const yyr1575 bool = false
			yyq1575[0] = x.Waiting != nil
			yyq1575[1] = x.Running != nil
			yyq1575[2] = x.Terminated != nil
			var yynn1575 int
			if yyr1575 || yy2arr1575 {
				r.EncodeArrayStart(3)
			} else {
				yynn1575 = 0
				for _, b := range yyq1575 {
					if b {
						yynn1575++
					}
				}
				r.EncodeMapStart(yynn1575)
				yynn1575 = 0
			}
			if yyr1575 || yy2arr1575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1575[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1575[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1575 || yy2arr1575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1575[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1575[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1575 || yy2arr1575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1575[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1575[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1575 || yy2arr1575 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1579 := z.DecBinary()
	_ = yym1579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1580 := r.ContainerType()
		if yyct1580 == codecSelferValueTypeMap1234 {
			yyl1580 := r.ReadMapStart()
			if yyl1580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1580, d)
			}
		} else if yyct1580 == codecSelferValueTypeArray1234 {
			yyl1580 := r.ReadArrayStart()
			if yyl1580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1581Slc
	var yyhl1581 bool = l >= 0
	for yyj1581 := 0; ; yyj1581++ {
		if yyhl1581 {
			if yyj1581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1581Slc = r.DecodeBytes(yys1581Slc, true, true)
		yys1581 := string(yys1581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1581 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1581)
		} // end switch yys1581
	} // end for yyj1581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1585 int
	var yyb1585 bool
	var yyhl1585 bool = l >= 0
	yyj1585++
	if yyhl1585 {
		yyb1585 = yyj1585 > l
	} else {
		yyb1585 = r.CheckBreak()
	}
	if yyb1585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1585++
	if yyhl1585 {
		yyb1585 = yyj1585 > l
	} else {
		yyb1585 = r.CheckBreak()
	}
	if yyb1585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1585++
	if yyhl1585 {
		yyb1585 = yyj1585 > l
	} else {
		yyb1585 = r.CheckBreak()
	}
	if yyb1585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1585++
		if yyhl1585 {
			yyb1585 = yyj1585 > l
		} else {
			yyb1585 = r.CheckBreak()
		}
		if yyb1585 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1585-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1589 := z.EncBinary()
		_ = yym1589
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1590 := !z.EncBinary()
			yy2arr1590 := z.EncBasicHandle().StructToArray
			var yyq1590 [8]bool
			_, _, _ = yysep1590, yyq1590, yy2arr1590
			const yyr1590 bool = false
			yyq1590[1] = true
			yyq1590[2] = true
			yyq1590[7] = x.ContainerID != ""
			var yynn1590 int
			if yyr1590 || yy2arr1590 {
				r.EncodeArrayStart(8)
			} else {
				yynn1590 = 5
				for _, b := range yyq1590 {
					if b {
						yynn1590++
					}
				}
				r.EncodeMapStart(yynn1590)
				yynn1590 = 0
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1592 := z.EncBinary()
				_ = yym1592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1593 := z.EncBinary()
				_ = yym1593
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1590[1] {
					yy1595 := &x.State
					yy1595.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1590[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1596 := &x.State
					yy1596.CodecEncodeSelf(e)
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1590[2] {
					yy1598 := &x.LastTerminationState
					yy1598.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1590[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1599 := &x.LastTerminationState
					yy1599.CodecEncodeSelf(e)
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1601 := z.EncBinary()
				_ = yym1601
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1602 := z.EncBinary()
				_ = yym1602
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1604 := z.EncBinary()
				_ = yym1604
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1605 := z.EncBinary()
				_ = yym1605
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1607 := z.EncBinary()
				_ = yym1607
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1608 := z.EncBinary()
				_ = yym1608
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1610 := z.EncBinary()
				_ = yym1610
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1611 := z.EncBinary()
				_ = yym1611
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1590[7] {
					yym1613 := z.EncBinary()
					_ = yym1613
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1590[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1590 || yy2arr1590 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1615 := z.DecBinary()
	_ = yym1615
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1616 := r.ContainerType()
		if yyct1616 == codecSelferValueTypeMap1234 {
			yyl1616 := r.ReadMapStart()
			if yyl1616 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1616, d)
			}
		} else if yyct1616 == codecSelferValueTypeArray1234 {
			yyl1616 := r.ReadArrayStart()
			if yyl1616 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1616, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1617Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1617Slc
	var yyhl1617 bool = l >= 0
	for yyj1617 := 0; ; yyj1617++ {
		if yyhl1617 {
			if yyj1617 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1617Slc = r.DecodeBytes(yys1617Slc, true, true)
		yys1617 := string(yys1617Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1617 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1619 := &x.State
				yyv1619.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1620 := &x.LastTerminationState
				yyv1620.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1617)
		} // end switch yys1617
	} // end for yyj1617
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1626 int
	var yyb1626 bool
	var yyhl1626 bool = l >= 0
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1628 := &x.State
		yyv1628.CodecDecodeSelf(d)
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1629 := &x.LastTerminationState
		yyv1629.CodecDecodeSelf(d)
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1626++
		if yyhl1626 {
			yyb1626 = yyj1626 > l
		} else {
			yyb1626 = r.CheckBreak()
		}
		if yyb1626 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1626-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1635 := z.EncBinary()
	_ = yym1635
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1636 := z.DecBinary()
	_ = yym1636
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1637 := z.EncBinary()
	_ = yym1637
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1638 := z.DecBinary()
	_ = yym1638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1639 := z.EncBinary()
		_ = yym1639
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1640 := !z.EncBinary()
			yy2arr1640 := z.EncBasicHandle().StructToArray
			var yyq1640 [6]bool
			_, _, _ = yysep1640, yyq1640, yy2arr1640
			const yyr1640 bool = false
			yyq1640[2] = true
			yyq1640[3] = true
			yyq1640[4] = x.Reason != ""
			yyq1640[5] = x.Message != ""
			var yynn1640 int
			if yyr1640 || yy2arr1640 {
				r.EncodeArrayStart(6)
			} else {
				yynn1640 = 2
				for _, b := range yyq1640 {
					if b {
						yynn1640++
					}
				}
				r.EncodeMapStart(yynn1640)
				yynn1640 = 0
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1640[2] {
					yy1644 := &x.LastProbeTime
					yym1645 := z.EncBinary()
					_ = yym1645
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1644) {
					} else if yym1645 {
						z.EncBinaryMarshal(yy1644)
					} else if !yym1645 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1644)
					} else {
						z.EncFallback(yy1644)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1640[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1646 := &x.LastProbeTime
					yym1647 := z.EncBinary()
					_ = yym1647
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1646) {
					} else if yym1647 {
						z.EncBinaryMarshal(yy1646)
					} else if !yym1647 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1646)
					} else {
						z.EncFallback(yy1646)
					}
				}
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1640[3] {
					yy1649 := &x.LastTransitionTime
					yym1650 := z.EncBinary()
					_ = yym1650
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1649) {
					} else if yym1650 {
						z.EncBinaryMarshal(yy1649)
					} else if !yym1650 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1649)
					} else {
						z.EncFallback(yy1649)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1640[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1651 := &x.LastTransitionTime
					yym1652 := z.EncBinary()
					_ = yym1652
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1651) {
					} else if yym1652 {
						z.EncBinaryMarshal(yy1651)
					} else if !yym1652 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1651)
					} else {
						z.EncFallback(yy1651)
					}
				}
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1640[4] {
					yym1654 := z.EncBinary()
					_ = yym1654
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1640[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1655 := z.EncBinary()
					_ = yym1655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1640[5] {
					yym1657 := z.EncBinary()
					_ = yym1657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1640[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1658 := z.EncBinary()
					_ = yym1658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1640 || yy2arr1640 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1659 := z.DecBinary()
	_ = yym1659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1660 := r.ContainerType()
		if yyct1660 == codecSelferValueTypeMap1234 {
			yyl1660 := r.ReadMapStart()
			if yyl1660 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1660, d)
			}
		} else if yyct1660 == codecSelferValueTypeArray1234 {
			yyl1660 := r.ReadArrayStart()
			if yyl1660 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1661Slc
	var yyhl1661 bool = l >= 0
	for yyj1661 := 0; ; yyj1661++ {
		if yyhl1661 {
			if yyj1661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1661Slc = r.DecodeBytes(yys1661Slc, true, true)
		yys1661 := string(yys1661Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1661 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1664 := &x.LastProbeTime
				yym1665 := z.DecBinary()
				_ = yym1665
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1664) {
				} else if yym1665 {
					z.DecBinaryUnmarshal(yyv1664)
				} else if !yym1665 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1664)
				} else {
					z.DecFallback(yyv1664, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1666 := &x.LastTransitionTime
				yym1667 := z.DecBinary()
				_ = yym1667
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1666) {
				} else if yym1667 {
					z.DecBinaryUnmarshal(yyv1666)
				} else if !yym1667 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1666)
				} else {
					z.DecFallback(yyv1666, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1661)
		} // end switch yys1661
	} // end for yyj1661
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1670 int
	var yyb1670 bool
	var yyhl1670 bool = l >= 0
	yyj1670++
	if yyhl1670 {
		yyb1670 = yyj1670 > l
	} else {
		yyb1670 = r.CheckBreak()
	}
	if yyb1670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1670++
	if yyhl1670 {
		yyb1670 = yyj1670 > l
	} else {
		yyb1670 = r.CheckBreak()
	}
	if yyb1670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1670++
	if yyhl1670 {
		yyb1670 = yyj1670 > l
	} else {
		yyb1670 = r.CheckBreak()
	}
	if yyb1670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1673 := &x.LastProbeTime
		yym1674 := z.DecBinary()
		_ = yym1674
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1673) {
		} else if yym1674 {
			z.DecBinaryUnmarshal(yyv1673)
		} else if !yym1674 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1673)
		} else {
			z.DecFallback(yyv1673, false)
		}
	}
	yyj1670++
	if yyhl1670 {
		yyb1670 = yyj1670 > l
	} else {
		yyb1670 = r.CheckBreak()
	}
	if yyb1670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1675 := &x.LastTransitionTime
		yym1676 := z.DecBinary()
		_ = yym1676
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1675) {
		} else if yym1676 {
			z.DecBinaryUnmarshal(yyv1675)
		} else if !yym1676 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1675)
		} else {
			z.DecFallback(yyv1675, false)
		}
	}
	yyj1670++
	if yyhl1670 {
		yyb1670 = yyj1670 > l
	} else {
		yyb1670 = r.CheckBreak()
	}
	if yyb1670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1670++
	if yyhl1670 {
		yyb1670 = yyj1670 > l
	} else {
		yyb1670 = r.CheckBreak()
	}
	if yyb1670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1670++
		if yyhl1670 {
			yyb1670 = yyj1670 > l
		} else {
			yyb1670 = r.CheckBreak()
		}
		if yyb1670 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1670-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1679 := z.EncBinary()
	_ = yym1679
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1680 := z.DecBinary()
	_ = yym1680
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1681 := z.EncBinary()
		_ = yym1681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1682 := !z.EncBinary()
			yy2arr1682 := z.EncBasicHandle().StructToArray
			var yyq1682 [4]bool
			_, _, _ = yysep1682, yyq1682, yy2arr1682
			const yyr1682 bool = false
			yyq1682[0] = x.Kind != ""
			yyq1682[1] = x.APIVersion != ""
			yyq1682[2] = true
			var yynn1682 int
			if yyr1682 || yy2arr1682 {
				r.EncodeArrayStart(4)
			} else {
				yynn1682 = 1
				for _, b := range yyq1682 {
					if b {
						yynn1682++
					}
				}
				r.EncodeMapStart(yynn1682)
				yynn1682 = 0
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[0] {
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1682[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[1] {
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1682[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[2] {
					yy1690 := &x.ListMeta
					yym1691 := z.EncBinary()
					_ = yym1691
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1690) {
					} else {
						z.EncFallback(yy1690)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1692 := &x.ListMeta
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1692) {
					} else {
						z.EncFallback(yy1692)
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1696 := z.EncBinary()
					_ = yym1696
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1697 := z.DecBinary()
	_ = yym1697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1698 := r.ContainerType()
		if yyct1698 == codecSelferValueTypeMap1234 {
			yyl1698 := r.ReadMapStart()
			if yyl1698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1698, d)
			}
		} else if yyct1698 == codecSelferValueTypeArray1234 {
			yyl1698 := r.ReadArrayStart()
			if yyl1698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1699Slc
	var yyhl1699 bool = l >= 0
	for yyj1699 := 0; ; yyj1699++ {
		if yyhl1699 {
			if yyj1699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1699Slc = r.DecodeBytes(yys1699Slc, true, true)
		yys1699 := string(yys1699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1699 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1702 := &x.ListMeta
				yym1703 := z.DecBinary()
				_ = yym1703
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1702) {
				} else {
					z.DecFallback(yyv1702, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1704 := &x.Items
				yym1705 := z.DecBinary()
				_ = yym1705
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1704), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1699)
		} // end switch yys1699
	} // end for yyj1699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1706 int
	var yyb1706 bool
	var yyhl1706 bool = l >= 0
	yyj1706++
	if yyhl1706 {
		yyb1706 = yyj1706 > l
	} else {
		yyb1706 = r.CheckBreak()
	}
	if yyb1706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1706++
	if yyhl1706 {
		yyb1706 = yyj1706 > l
	} else {
		yyb1706 = r.CheckBreak()
	}
	if yyb1706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1706++
	if yyhl1706 {
		yyb1706 = yyj1706 > l
	} else {
		yyb1706 = r.CheckBreak()
	}
	if yyb1706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1709 := &x.ListMeta
		yym1710 := z.DecBinary()
		_ = yym1710
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1709) {
		} else {
			z.DecFallback(yyv1709, false)
		}
	}
	yyj1706++
	if yyhl1706 {
		yyb1706 = yyj1706 > l
	} else {
		yyb1706 = r.CheckBreak()
	}
	if yyb1706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1711 := &x.Items
		yym1712 := z.DecBinary()
		_ = yym1712
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1711), d)
		}
	}
	for {
		yyj1706++
		if yyhl1706 {
			yyb1706 = yyj1706 > l
		} else {
			yyb1706 = r.CheckBreak()
		}
		if yyb1706 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1706-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1713 := z.EncBinary()
	_ = yym1713
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1714 := z.DecBinary()
	_ = yym1714
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1715 := z.EncBinary()
		_ = yym1715
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1716 := !z.EncBinary()
			yy2arr1716 := z.EncBasicHandle().StructToArray
			var yyq1716 [1]bool
			_, _, _ = yysep1716, yyq1716, yy2arr1716
			const yyr1716 bool = false
			var yynn1716 int
			if yyr1716 || yy2arr1716 {
				r.EncodeArrayStart(1)
			} else {
				yynn1716 = 1
				for _, b := range yyq1716 {
					if b {
						yynn1716++
					}
				}
				r.EncodeMapStart(yynn1716)
				yynn1716 = 0
			}
			if yyr1716 || yy2arr1716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1718 := z.EncBinary()
					_ = yym1718
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1719 := z.EncBinary()
					_ = yym1719
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1716 || yy2arr1716 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1720 := z.DecBinary()
	_ = yym1720
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1721 := r.ContainerType()
		if yyct1721 == codecSelferValueTypeMap1234 {
			yyl1721 := r.ReadMapStart()
			if yyl1721 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1721, d)
			}
		} else if yyct1721 == codecSelferValueTypeArray1234 {
			yyl1721 := r.ReadArrayStart()
			if yyl1721 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1721, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1722Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1722Slc
	var yyhl1722 bool = l >= 0
	for yyj1722 := 0; ; yyj1722++ {
		if yyhl1722 {
			if yyj1722 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1722Slc = r.DecodeBytes(yys1722Slc, true, true)
		yys1722 := string(yys1722Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1722 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1723 := &x.NodeSelectorTerms
				yym1724 := z.DecBinary()
				_ = yym1724
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1723), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1722)
		} // end switch yys1722
	} // end for yyj1722
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1725 int
	var yyb1725 bool
	var yyhl1725 bool = l >= 0
	yyj1725++
	if yyhl1725 {
		yyb1725 = yyj1725 > l
	} else {
		yyb1725 = r.CheckBreak()
	}
	if yyb1725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1726 := &x.NodeSelectorTerms
		yym1727 := z.DecBinary()
		_ = yym1727
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1726), d)
		}
	}
	for {
		yyj1725++
		if yyhl1725 {
			yyb1725 = yyj1725 > l
		} else {
			yyb1725 = r.CheckBreak()
		}
		if yyb1725 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1725-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1728 := z.EncBinary()
		_ = yym1728
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1729 := !z.EncBinary()
			yy2arr1729 := z.EncBasicHandle().StructToArray
			var yyq1729 [1]bool
			_, _, _ = yysep1729, yyq1729, yy2arr1729
			const yyr1729 bool = false
			var yynn1729 int
			if yyr1729 || yy2arr1729 {
				r.EncodeArrayStart(1)
			} else {
				yynn1729 = 1
				for _, b := range yyq1729 {
					if b {
						yynn1729++
					}
				}
				r.EncodeMapStart(yynn1729)
				yynn1729 = 0
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1731 := z.EncBinary()
					_ = yym1731
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1729 || yy2arr1729 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1733 := z.DecBinary()
	_ = yym1733
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1734 := r.ContainerType()
		if yyct1734 == codecSelferValueTypeMap1234 {
			yyl1734 := r.ReadMapStart()
			if yyl1734 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1734, d)
			}
		} else if yyct1734 == codecSelferValueTypeArray1234 {
			yyl1734 := r.ReadArrayStart()
			if yyl1734 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1734, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1735Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1735Slc
	var yyhl1735 bool = l >= 0
	for yyj1735 := 0; ; yyj1735++ {
		if yyhl1735 {
			if yyj1735 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1735Slc = r.DecodeBytes(yys1735Slc, true, true)
		yys1735 := string(yys1735Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1735 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1736 := &x.MatchExpressions
				yym1737 := z.DecBinary()
				_ = yym1737
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1736), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1735)
		} // end switch yys1735
	} // end for yyj1735
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1738 int
	var yyb1738 bool
	var yyhl1738 bool = l >= 0
	yyj1738++
	if yyhl1738 {
		yyb1738 = yyj1738 > l
	} else {
		yyb1738 = r.CheckBreak()
	}
	if yyb1738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1739 := &x.MatchExpressions
		yym1740 := z.DecBinary()
		_ = yym1740
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1739), d)
		}
	}
	for {
		yyj1738++
		if yyhl1738 {
			yyb1738 = yyj1738 > l
		} else {
			yyb1738 = r.CheckBreak()
		}
		if yyb1738 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1738-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1741 := z.EncBinary()
		_ = yym1741
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1742 := !z.EncBinary()
			yy2arr1742 := z.EncBasicHandle().StructToArray
			var yyq1742 [3]bool
			_, _, _ = yysep1742, yyq1742, yy2arr1742
			const yyr1742 bool = false
			yyq1742[2] = len(x.Values) != 0
			var yynn1742 int
			if yyr1742 || yy2arr1742 {
				r.EncodeArrayStart(3)
			} else {
				yynn1742 = 2
				for _, b := range yyq1742 {
					if b {
						yynn1742++
					}
				}
				r.EncodeMapStart(yynn1742)
				yynn1742 = 0
			}
			if yyr1742 || yy2arr1742 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1744 := z.EncBinary()
				_ = yym1744
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1745 := z.EncBinary()
				_ = yym1745
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1742 || yy2arr1742 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1742 || yy2arr1742 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1742[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1748 := z.EncBinary()
						_ = yym1748
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1742[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1749 := z.EncBinary()
						_ = yym1749
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1742 || yy2arr1742 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1750 := z.DecBinary()
	_ = yym1750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1751 := r.ContainerType()
		if yyct1751 == codecSelferValueTypeMap1234 {
			yyl1751 := r.ReadMapStart()
			if yyl1751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1751, d)
			}
		} else if yyct1751 == codecSelferValueTypeArray1234 {
			yyl1751 := r.ReadArrayStart()
			if yyl1751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1752Slc
	var yyhl1752 bool = l >= 0
	for yyj1752 := 0; ; yyj1752++ {
		if yyhl1752 {
			if yyj1752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1752Slc = r.DecodeBytes(yys1752Slc, true, true)
		yys1752 := string(yys1752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1752 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1755 := &x.Values
				yym1756 := z.DecBinary()
				_ = yym1756
				if false {
				} else {
					z.F.DecSliceStringX(yyv1755, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1752)
		} // end switch yys1752
	} // end for yyj1752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1757 int
	var yyb1757 bool
	var yyhl1757 bool = l >= 0
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1760 := &x.Values
		yym1761 := z.DecBinary()
		_ = yym1761
		if false {
		} else {
			z.F.DecSliceStringX(yyv1760, false, d)
		}
	}
	for {
		yyj1757++
		if yyhl1757 {
			yyb1757 = yyj1757 > l
		} else {
			yyb1757 = r.CheckBreak()
		}
		if yyb1757 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1757-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1762 := z.EncBinary()
	_ = yym1762
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1763 := z.DecBinary()
	_ = yym1763
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1764 := z.EncBinary()
		_ = yym1764
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1765 := !z.EncBinary()
			yy2arr1765 := z.EncBasicHandle().StructToArray
			var yyq1765 [3]bool
			_, _, _ = yysep1765, yyq1765, yy2arr1765
			const yyr1765 bool = false
			yyq1765[0] = x.NodeAffinity != nil
			yyq1765[1] = x.PodAffinity != nil
			yyq1765[2] = x.PodAntiAffinity != nil
			var yynn1765 int
			if yyr1765 || yy2arr1765 {
				r.EncodeArrayStart(3)
			} else {
				yynn1765 = 0
				for _, b := range yyq1765 {
					if b {
						yynn1765++
					}
				}
				r.EncodeMapStart(yynn1765)
				yynn1765 = 0
			}
			if yyr1765 || yy2arr1765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1765[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1765[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1765 || yy2arr1765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1765[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1765[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1765 || yy2arr1765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1765[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1765[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1765 || yy2arr1765 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1769 := z.DecBinary()
	_ = yym1769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1770 := r.ContainerType()
		if yyct1770 == codecSelferValueTypeMap1234 {
			yyl1770 := r.ReadMapStart()
			if yyl1770 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1770, d)
			}
		} else if yyct1770 == codecSelferValueTypeArray1234 {
			yyl1770 := r.ReadArrayStart()
			if yyl1770 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1771Slc
	var yyhl1771 bool = l >= 0
	for yyj1771 := 0; ; yyj1771++ {
		if yyhl1771 {
			if yyj1771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1771Slc = r.DecodeBytes(yys1771Slc, true, true)
		yys1771 := string(yys1771Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1771 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1771)
		} // end switch yys1771
	} // end for yyj1771
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1775 int
	var yyb1775 bool
	var yyhl1775 bool = l >= 0
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1775++
	if yyhl1775 {
		yyb1775 = yyj1775 > l
	} else {
		yyb1775 = r.CheckBreak()
	}
	if yyb1775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1775++
		if yyhl1775 {
			yyb1775 = yyj1775 > l
		} else {
			yyb1775 = r.CheckBreak()
		}
		if yyb1775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1779 := z.EncBinary()
		_ = yym1779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1780 := !z.EncBinary()
			yy2arr1780 := z.EncBasicHandle().StructToArray
			var yyq1780 [2]bool
			_, _, _ = yysep1780, yyq1780, yy2arr1780
			const yyr1780 bool = false
			yyq1780[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1780[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1780 int
			if yyr1780 || yy2arr1780 {
				r.EncodeArrayStart(2)
			} else {
				yynn1780 = 0
				for _, b := range yyq1780 {
					if b {
						yynn1780++
					}
				}
				r.EncodeMapStart(yynn1780)
				yynn1780 = 0
			}
			if yyr1780 || yy2arr1780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1780[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1782 := z.EncBinary()
						_ = yym1782
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1780[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1783 := z.EncBinary()
						_ = yym1783
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1780 || yy2arr1780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1780[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1785 := z.EncBinary()
						_ = yym1785
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1786 := z.EncBinary()
						_ = yym1786
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1780 || yy2arr1780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1787 := z.DecBinary()
	_ = yym1787
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1788 := r.ContainerType()
		if yyct1788 == codecSelferValueTypeMap1234 {
			yyl1788 := r.ReadMapStart()
			if yyl1788 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1788, d)
			}
		} else if yyct1788 == codecSelferValueTypeArray1234 {
			yyl1788 := r.ReadArrayStart()
			if yyl1788 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1788, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1789Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1789Slc
	var yyhl1789 bool = l >= 0
	for yyj1789 := 0; ; yyj1789++ {
		if yyhl1789 {
			if yyj1789 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1789Slc = r.DecodeBytes(yys1789Slc, true, true)
		yys1789 := string(yys1789Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1789 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1790 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1791 := z.DecBinary()
				_ = yym1791
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1790), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1792 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1793 := z.DecBinary()
				_ = yym1793
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1792), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1789)
		} // end switch yys1789
	} // end for yyj1789
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1794 int
	var yyb1794 bool
	var yyhl1794 bool = l >= 0
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1795 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1796 := z.DecBinary()
		_ = yym1796
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1795), d)
		}
	}
	yyj1794++
	if yyhl1794 {
		yyb1794 = yyj1794 > l
	} else {
		yyb1794 = r.CheckBreak()
	}
	if yyb1794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1797 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1798 := z.DecBinary()
		_ = yym1798
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1797), d)
		}
	}
	for {
		yyj1794++
		if yyhl1794 {
			yyb1794 = yyj1794 > l
		} else {
			yyb1794 = r.CheckBreak()
		}
		if yyb1794 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1794-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1799 := z.EncBinary()
		_ = yym1799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1800 := !z.EncBinary()
			yy2arr1800 := z.EncBasicHandle().StructToArray
			var yyq1800 [2]bool
			_, _, _ = yysep1800, yyq1800, yy2arr1800
			const yyr1800 bool = false
			yyq1800[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1800[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1800 int
			if yyr1800 || yy2arr1800 {
				r.EncodeArrayStart(2)
			} else {
				yynn1800 = 0
				for _, b := range yyq1800 {
					if b {
						yynn1800++
					}
				}
				r.EncodeMapStart(yynn1800)
				yynn1800 = 0
			}
			if yyr1800 || yy2arr1800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1800[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1802 := z.EncBinary()
						_ = yym1802
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1800[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1803 := z.EncBinary()
						_ = yym1803
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1800 || yy2arr1800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1800[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1805 := z.EncBinary()
						_ = yym1805
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1800[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1806 := z.EncBinary()
						_ = yym1806
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1800 || yy2arr1800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1807 := z.DecBinary()
	_ = yym1807
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1808 := r.ContainerType()
		if yyct1808 == codecSelferValueTypeMap1234 {
			yyl1808 := r.ReadMapStart()
			if yyl1808 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1808, d)
			}
		} else if yyct1808 == codecSelferValueTypeArray1234 {
			yyl1808 := r.ReadArrayStart()
			if yyl1808 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1808, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1809Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1809Slc
	var yyhl1809 bool = l >= 0
	for yyj1809 := 0; ; yyj1809++ {
		if yyhl1809 {
			if yyj1809 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1809Slc = r.DecodeBytes(yys1809Slc, true, true)
		yys1809 := string(yys1809Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1809 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1810 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1811 := z.DecBinary()
				_ = yym1811
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1810), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1812 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1813 := z.DecBinary()
				_ = yym1813
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1812), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1809)
		} // end switch yys1809
	} // end for yyj1809
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1814 int
	var yyb1814 bool
	var yyhl1814 bool = l >= 0
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1815 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1816 := z.DecBinary()
		_ = yym1816
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1815), d)
		}
	}
	yyj1814++
	if yyhl1814 {
		yyb1814 = yyj1814 > l
	} else {
		yyb1814 = r.CheckBreak()
	}
	if yyb1814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1817 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1818 := z.DecBinary()
		_ = yym1818
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1817), d)
		}
	}
	for {
		yyj1814++
		if yyhl1814 {
			yyb1814 = yyj1814 > l
		} else {
			yyb1814 = r.CheckBreak()
		}
		if yyb1814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1819 := z.EncBinary()
		_ = yym1819
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1820 := !z.EncBinary()
			yy2arr1820 := z.EncBasicHandle().StructToArray
			var yyq1820 [2]bool
			_, _, _ = yysep1820, yyq1820, yy2arr1820
			const yyr1820 bool = false
			var yynn1820 int
			if yyr1820 || yy2arr1820 {
				r.EncodeArrayStart(2)
			} else {
				yynn1820 = 2
				for _, b := range yyq1820 {
					if b {
						yynn1820++
					}
				}
				r.EncodeMapStart(yynn1820)
				yynn1820 = 0
			}
			if yyr1820 || yy2arr1820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1822 := z.EncBinary()
				_ = yym1822
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1823 := z.EncBinary()
				_ = yym1823
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1820 || yy2arr1820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1825 := &x.PodAffinityTerm
				yy1825.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1826 := &x.PodAffinityTerm
				yy1826.CodecEncodeSelf(e)
			}
			if yyr1820 || yy2arr1820 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1827 := z.DecBinary()
	_ = yym1827
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1828 := r.ContainerType()
		if yyct1828 == codecSelferValueTypeMap1234 {
			yyl1828 := r.ReadMapStart()
			if yyl1828 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1828, d)
			}
		} else if yyct1828 == codecSelferValueTypeArray1234 {
			yyl1828 := r.ReadArrayStart()
			if yyl1828 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1828, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1829Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1829Slc
	var yyhl1829 bool = l >= 0
	for yyj1829 := 0; ; yyj1829++ {
		if yyhl1829 {
			if yyj1829 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1829Slc = r.DecodeBytes(yys1829Slc, true, true)
		yys1829 := string(yys1829Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1829 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1831 := &x.PodAffinityTerm
				yyv1831.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1829)
		} // end switch yys1829
	} // end for yyj1829
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1832 int
	var yyb1832 bool
	var yyhl1832 bool = l >= 0
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1834 := &x.PodAffinityTerm
		yyv1834.CodecDecodeSelf(d)
	}
	for {
		yyj1832++
		if yyhl1832 {
			yyb1832 = yyj1832 > l
		} else {
			yyb1832 = r.CheckBreak()
		}
		if yyb1832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1835 := z.EncBinary()
		_ = yym1835
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1836 := !z.EncBinary()
			yy2arr1836 := z.EncBasicHandle().StructToArray
			var yyq1836 [3]bool
			_, _, _ = yysep1836, yyq1836, yy2arr1836
			const yyr1836 bool = false
			yyq1836[0] = x.LabelSelector != nil
			yyq1836[2] = x.TopologyKey != ""
			var yynn1836 int
			if yyr1836 || yy2arr1836 {
				r.EncodeArrayStart(3)
			} else {
				yynn1836 = 1
				for _, b := range yyq1836 {
					if b {
						yynn1836++
					}
				}
				r.EncodeMapStart(yynn1836)
				yynn1836 = 0
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1836[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1838 := z.EncBinary()
						_ = yym1838
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1836[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1839 := z.EncBinary()
						_ = yym1839
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1841 := z.EncBinary()
					_ = yym1841
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1842 := z.EncBinary()
					_ = yym1842
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1836[2] {
					yym1844 := z.EncBinary()
					_ = yym1844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1836[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1846 := z.DecBinary()
	_ = yym1846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1847 := r.ContainerType()
		if yyct1847 == codecSelferValueTypeMap1234 {
			yyl1847 := r.ReadMapStart()
			if yyl1847 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1847, d)
			}
		} else if yyct1847 == codecSelferValueTypeArray1234 {
			yyl1847 := r.ReadArrayStart()
			if yyl1847 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1848Slc
	var yyhl1848 bool = l >= 0
	for yyj1848 := 0; ; yyj1848++ {
		if yyhl1848 {
			if yyj1848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1848Slc = r.DecodeBytes(yys1848Slc, true, true)
		yys1848 := string(yys1848Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1848 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1850 := z.DecBinary()
				_ = yym1850
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1851 := &x.Namespaces
				yym1852 := z.DecBinary()
				_ = yym1852
				if false {
				} else {
					z.F.DecSliceStringX(yyv1851, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1848)
		} // end switch yys1848
	} // end for yyj1848
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1854 int
	var yyb1854 bool
	var yyhl1854 bool = l >= 0
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1856 := z.DecBinary()
		_ = yym1856
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1857 := &x.Namespaces
		yym1858 := z.DecBinary()
		_ = yym1858
		if false {
		} else {
			z.F.DecSliceStringX(yyv1857, false, d)
		}
	}
	yyj1854++
	if yyhl1854 {
		yyb1854 = yyj1854 > l
	} else {
		yyb1854 = r.CheckBreak()
	}
	if yyb1854 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1854++
		if yyhl1854 {
			yyb1854 = yyj1854 > l
		} else {
			yyb1854 = r.CheckBreak()
		}
		if yyb1854 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1854-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1860 := z.EncBinary()
		_ = yym1860
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1861 := !z.EncBinary()
			yy2arr1861 := z.EncBasicHandle().StructToArray
			var yyq1861 [2]bool
			_, _, _ = yysep1861, yyq1861, yy2arr1861
			const yyr1861 bool = false
			yyq1861[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1861[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1861 int
			if yyr1861 || yy2arr1861 {
				r.EncodeArrayStart(2)
			} else {
				yynn1861 = 0
				for _, b := range yyq1861 {
					if b {
						yynn1861++
					}
				}
				r.EncodeMapStart(yynn1861)
				yynn1861 = 0
			}
			if yyr1861 || yy2arr1861 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1861[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1861[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1861[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1864 := z.EncBinary()
						_ = yym1864
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1861[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1865 := z.EncBinary()
						_ = yym1865
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1861 || yy2arr1861 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1866 := z.DecBinary()
	_ = yym1866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1867 := r.ContainerType()
		if yyct1867 == codecSelferValueTypeMap1234 {
			yyl1867 := r.ReadMapStart()
			if yyl1867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1867, d)
			}
		} else if yyct1867 == codecSelferValueTypeArray1234 {
			yyl1867 := r.ReadArrayStart()
			if yyl1867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1868Slc
	var yyhl1868 bool = l >= 0
	for yyj1868 := 0; ; yyj1868++ {
		if yyhl1868 {
			if yyj1868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1868Slc = r.DecodeBytes(yys1868Slc, true, true)
		yys1868 := string(yys1868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1868 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1870 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1871 := z.DecBinary()
				_ = yym1871
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1870), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1868)
		} // end switch yys1868
	} // end for yyj1868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1872 int
	var yyb1872 bool
	var yyhl1872 bool = l >= 0
	yyj1872++
	if yyhl1872 {
		yyb1872 = yyj1872 > l
	} else {
		yyb1872 = r.CheckBreak()
	}
	if yyb1872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1872++
	if yyhl1872 {
		yyb1872 = yyj1872 > l
	} else {
		yyb1872 = r.CheckBreak()
	}
	if yyb1872 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1874 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1875 := z.DecBinary()
		_ = yym1875
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1874), d)
		}
	}
	for {
		yyj1872++
		if yyhl1872 {
			yyb1872 = yyj1872 > l
		} else {
			yyb1872 = r.CheckBreak()
		}
		if yyb1872 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1872-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1876 := z.EncBinary()
		_ = yym1876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1877 := !z.EncBinary()
			yy2arr1877 := z.EncBasicHandle().StructToArray
			var yyq1877 [2]bool
			_, _, _ = yysep1877, yyq1877, yy2arr1877
			const yyr1877 bool = false
			var yynn1877 int
			if yyr1877 || yy2arr1877 {
				r.EncodeArrayStart(2)
			} else {
				yynn1877 = 2
				for _, b := range yyq1877 {
					if b {
						yynn1877++
					}
				}
				r.EncodeMapStart(yynn1877)
				yynn1877 = 0
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1879 := z.EncBinary()
				_ = yym1879
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1880 := z.EncBinary()
				_ = yym1880
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1882 := &x.Preference
				yy1882.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1883 := &x.Preference
				yy1883.CodecEncodeSelf(e)
			}
			if yyr1877 || yy2arr1877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1884 := z.DecBinary()
	_ = yym1884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1885 := r.ContainerType()
		if yyct1885 == codecSelferValueTypeMap1234 {
			yyl1885 := r.ReadMapStart()
			if yyl1885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1885, d)
			}
		} else if yyct1885 == codecSelferValueTypeArray1234 {
			yyl1885 := r.ReadArrayStart()
			if yyl1885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1886Slc
	var yyhl1886 bool = l >= 0
	for yyj1886 := 0; ; yyj1886++ {
		if yyhl1886 {
			if yyj1886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1886Slc = r.DecodeBytes(yys1886Slc, true, true)
		yys1886 := string(yys1886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1886 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1888 := &x.Preference
				yyv1888.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1886)
		} // end switch yys1886
	} // end for yyj1886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1889 int
	var yyb1889 bool
	var yyhl1889 bool = l >= 0
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1889++
	if yyhl1889 {
		yyb1889 = yyj1889 > l
	} else {
		yyb1889 = r.CheckBreak()
	}
	if yyb1889 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1891 := &x.Preference
		yyv1891.CodecDecodeSelf(d)
	}
	for {
		yyj1889++
		if yyhl1889 {
			yyb1889 = yyj1889 > l
		} else {
			yyb1889 = r.CheckBreak()
		}
		if yyb1889 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1889-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1892 := z.EncBinary()
		_ = yym1892
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1893 := !z.EncBinary()
			yy2arr1893 := z.EncBasicHandle().StructToArray
			var yyq1893 [3]bool
			_, _, _ = yysep1893, yyq1893, yy2arr1893
			const yyr1893 bool = false
			yyq1893[1] = x.Value != ""
			var yynn1893 int
			if yyr1893 || yy2arr1893 {
				r.EncodeArrayStart(3)
			} else {
				yynn1893 = 2
				for _, b := range yyq1893 {
					if b {
						yynn1893++
					}
				}
				r.EncodeMapStart(yynn1893)
				yynn1893 = 0
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1895 := z.EncBinary()
				_ = yym1895
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1896 := z.EncBinary()
				_ = yym1896
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1893[1] {
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1893[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1899 := z.EncBinary()
					_ = yym1899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1893 || yy2arr1893 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1901 := z.DecBinary()
	_ = yym1901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1902 := r.ContainerType()
		if yyct1902 == codecSelferValueTypeMap1234 {
			yyl1902 := r.ReadMapStart()
			if yyl1902 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1902, d)
			}
		} else if yyct1902 == codecSelferValueTypeArray1234 {
			yyl1902 := r.ReadArrayStart()
			if yyl1902 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1903Slc
	var yyhl1903 bool = l >= 0
	for yyj1903 := 0; ; yyj1903++ {
		if yyhl1903 {
			if yyj1903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1903Slc = r.DecodeBytes(yys1903Slc, true, true)
		yys1903 := string(yys1903Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1903 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1903)
		} // end switch yys1903
	} // end for yyj1903
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1907 int
	var yyb1907 bool
	var yyhl1907 bool = l >= 0
	yyj1907++
	if yyhl1907 {
		yyb1907 = yyj1907 > l
	} else {
		yyb1907 = r.CheckBreak()
	}
	if yyb1907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1907++
	if yyhl1907 {
		yyb1907 = yyj1907 > l
	} else {
		yyb1907 = r.CheckBreak()
	}
	if yyb1907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1907++
	if yyhl1907 {
		yyb1907 = yyj1907 > l
	} else {
		yyb1907 = r.CheckBreak()
	}
	if yyb1907 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1907++
		if yyhl1907 {
			yyb1907 = yyj1907 > l
		} else {
			yyb1907 = r.CheckBreak()
		}
		if yyb1907 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1907-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1911 := z.EncBinary()
	_ = yym1911
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1912 := z.DecBinary()
	_ = yym1912
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1913 := z.EncBinary()
		_ = yym1913
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1914 := !z.EncBinary()
			yy2arr1914 := z.EncBasicHandle().StructToArray
			var yyq1914 [4]bool
			_, _, _ = yysep1914, yyq1914, yy2arr1914
			const yyr1914 bool = false
			yyq1914[0] = x.Key != ""
			yyq1914[1] = x.Operator != ""
			yyq1914[2] = x.Value != ""
			yyq1914[3] = x.Effect != ""
			var yynn1914 int
			if yyr1914 || yy2arr1914 {
				r.EncodeArrayStart(4)
			} else {
				yynn1914 = 0
				for _, b := range yyq1914 {
					if b {
						yynn1914++
					}
				}
				r.EncodeMapStart(yynn1914)
				yynn1914 = 0
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1914[0] {
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1914[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1917 := z.EncBinary()
					_ = yym1917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1914[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1914[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1914[2] {
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1914[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1914[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1914[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1914 || yy2arr1914 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1923 := z.DecBinary()
	_ = yym1923
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1924 := r.ContainerType()
		if yyct1924 == codecSelferValueTypeMap1234 {
			yyl1924 := r.ReadMapStart()
			if yyl1924 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1924, d)
			}
		} else if yyct1924 == codecSelferValueTypeArray1234 {
			yyl1924 := r.ReadArrayStart()
			if yyl1924 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1924, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1925Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1925Slc
	var yyhl1925 bool = l >= 0
	for yyj1925 := 0; ; yyj1925++ {
		if yyhl1925 {
			if yyj1925 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1925Slc = r.DecodeBytes(yys1925Slc, true, true)
		yys1925 := string(yys1925Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1925 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1925)
		} // end switch yys1925
	} // end for yyj1925
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1930 int
	var yyb1930 bool
	var yyhl1930 bool = l >= 0
	yyj1930++
	if yyhl1930 {
		yyb1930 = yyj1930 > l
	} else {
		yyb1930 = r.CheckBreak()
	}
	if yyb1930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1930++
	if yyhl1930 {
		yyb1930 = yyj1930 > l
	} else {
		yyb1930 = r.CheckBreak()
	}
	if yyb1930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj1930++
	if yyhl1930 {
		yyb1930 = yyj1930 > l
	} else {
		yyb1930 = r.CheckBreak()
	}
	if yyb1930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1930++
	if yyhl1930 {
		yyb1930 = yyj1930 > l
	} else {
		yyb1930 = r.CheckBreak()
	}
	if yyb1930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1930++
		if yyhl1930 {
			yyb1930 = yyj1930 > l
		} else {
			yyb1930 = r.CheckBreak()
		}
		if yyb1930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1935 := z.EncBinary()
	_ = yym1935
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1936 := z.DecBinary()
	_ = yym1936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1937 := z.EncBinary()
		_ = yym1937
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1938 := !z.EncBinary()
			yy2arr1938 := z.EncBasicHandle().StructToArray
			var yyq1938 [13]bool
			_, _, _ = yysep1938, yyq1938, yy2arr1938
			const yyr1938 bool = false
			yyq1938[2] = x.RestartPolicy != ""
			yyq1938[3] = x.TerminationGracePeriodSeconds != nil
			yyq1938[4] = x.ActiveDeadlineSeconds != nil
			yyq1938[5] = x.DNSPolicy != ""
			yyq1938[6] = len(x.NodeSelector) != 0
			yyq1938[8] = x.NodeName != ""
			yyq1938[9] = x.SecurityContext != nil
			yyq1938[10] = len(x.ImagePullSecrets) != 0
			yyq1938[11] = x.Hostname != ""
			yyq1938[12] = x.Subdomain != ""
			var yynn1938 int
			if yyr1938 || yy2arr1938 {
				r.EncodeArrayStart(13)
			} else {
				yynn1938 = 3
				for _, b := range yyq1938 {
					if b {
						yynn1938++
					}
				}
				r.EncodeMapStart(yynn1938)
				yynn1938 = 0
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1940 := z.EncBinary()
					_ = yym1940
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1941 := z.EncBinary()
					_ = yym1941
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1943 := z.EncBinary()
					_ = yym1943
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1944 := z.EncBinary()
					_ = yym1944
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1938[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1938[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1938[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1947 := *x.TerminationGracePeriodSeconds
						yym1948 := z.EncBinary()
						_ = yym1948
						if false {
						} else {
							r.EncodeInt(int64(yy1947))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1938[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1949 := *x.TerminationGracePeriodSeconds
						yym1950 := z.EncBinary()
						_ = yym1950
						if false {
						} else {
							r.EncodeInt(int64(yy1949))
						}
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1938[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1952 := *x.ActiveDeadlineSeconds
						yym1953 := z.EncBinary()
						_ = yym1953
						if false {
						} else {
							r.EncodeInt(int64(yy1952))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1938[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1954 := *x.ActiveDeadlineSeconds
						yym1955 := z.EncBinary()
						_ = yym1955
						if false {
						} else {
							r.EncodeInt(int64(yy1954))
						}
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1938[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1938[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1938[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1958 := z.EncBinary()
						_ = yym1958
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1938[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1959 := z.EncBinary()
						_ = yym1959
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1961 := z.EncBinary()
				_ = yym1961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1962 := z.EncBinary()
				_ = yym1962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1938[8] {
					yym1964 := z.EncBinary()
					_ = yym1964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1938[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1965 := z.EncBinary()
					_ = yym1965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1938[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1938[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1938[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1968 := z.EncBinary()
						_ = yym1968
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1938[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1969 := z.EncBinary()
						_ = yym1969
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1938[11] {
					yym1971 := z.EncBinary()
					_ = yym1971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1938[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1972 := z.EncBinary()
					_ = yym1972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1938[12] {
					yym1974 := z.EncBinary()
					_ = yym1974
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1938[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1975 := z.EncBinary()
					_ = yym1975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr1938 || yy2arr1938 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1976 := z.DecBinary()
	_ = yym1976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1977 := r.ContainerType()
		if yyct1977 == codecSelferValueTypeMap1234 {
			yyl1977 := r.ReadMapStart()
			if yyl1977 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1977, d)
			}
		} else if yyct1977 == codecSelferValueTypeArray1234 {
			yyl1977 := r.ReadArrayStart()
			if yyl1977 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1978Slc
	var yyhl1978 bool = l >= 0
	for yyj1978 := 0; ; yyj1978++ {
		if yyhl1978 {
			if yyj1978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1978Slc = r.DecodeBytes(yys1978Slc, true, true)
		yys1978 := string(yys1978Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1978 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1979 := &x.Volumes
				yym1980 := z.DecBinary()
				_ = yym1980
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1979), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1981 := &x.Containers
				yym1982 := z.DecBinary()
				_ = yym1982
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1981), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1985 := z.DecBinary()
				_ = yym1985
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1987 := z.DecBinary()
				_ = yym1987
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1989 := &x.NodeSelector
				yym1990 := z.DecBinary()
				_ = yym1990
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1989, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1994 := &x.ImagePullSecrets
				yym1995 := z.DecBinary()
				_ = yym1995
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1994), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1978)
		} // end switch yys1978
	} // end for yyj1978
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1998 int
	var yyb1998 bool
	var yyhl1998 bool = l >= 0
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1999 := &x.Volumes
		yym2000 := z.DecBinary()
		_ = yym2000
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1999), d)
		}
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2001 := &x.Containers
		yym2002 := z.DecBinary()
		_ = yym2002
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2001), d)
		}
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2005 := z.DecBinary()
		_ = yym2005
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2007 := z.DecBinary()
		_ = yym2007
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2009 := &x.NodeSelector
		yym2010 := z.DecBinary()
		_ = yym2010
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2009, false, d)
		}
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2014 := &x.ImagePullSecrets
		yym2015 := z.DecBinary()
		_ = yym2015
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2014), d)
		}
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj1998++
	if yyhl1998 {
		yyb1998 = yyj1998 > l
	} else {
		yyb1998 = r.CheckBreak()
	}
	if yyb1998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj1998++
		if yyhl1998 {
			yyb1998 = yyj1998 > l
		} else {
			yyb1998 = r.CheckBreak()
		}
		if yyb1998 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1998-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2018 := z.EncBinary()
		_ = yym2018
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2019 := !z.EncBinary()
			yy2arr2019 := z.EncBasicHandle().StructToArray
			var yyq2019 [8]bool
			_, _, _ = yysep2019, yyq2019, yy2arr2019
			const yyr2019 bool = false
			yyq2019[0] = x.HostNetwork != false
			yyq2019[1] = x.HostPID != false
			yyq2019[2] = x.HostIPC != false
			yyq2019[3] = x.SELinuxOptions != nil
			yyq2019[4] = x.RunAsUser != nil
			yyq2019[5] = x.RunAsNonRoot != nil
			yyq2019[6] = len(x.SupplementalGroups) != 0
			yyq2019[7] = x.FSGroup != nil
			var yynn2019 int
			if yyr2019 || yy2arr2019 {
				r.EncodeArrayStart(8)
			} else {
				yynn2019 = 0
				for _, b := range yyq2019 {
					if b {
						yynn2019++
					}
				}
				r.EncodeMapStart(yynn2019)
				yynn2019 = 0
			}
			if yyr2019 || yy2arr2019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2019[0] {
					yym2021 := z.EncBinary()
					_ = yym2021
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2019[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2019 || yy2arr2019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2019[1] {
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2019[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2019 || yy2arr2019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2019[2] {
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2019[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2019 || yy2arr2019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2019[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2019[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2019 || yy2arr2019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2019[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2031 := *x.RunAsUser
						yym2032 := z.EncBinary()
						_ = yym2032
						if false {
						} else {
							r.EncodeInt(int64(yy2031))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2019[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2033 := *x.RunAsUser
						yym2034 := z.EncBinary()
						_ = yym2034
						if false {
						} else {
							r.EncodeInt(int64(yy2033))
						}
					}
				}
			}
			if yyr2019 || yy2arr2019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2019[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2036 := *x.RunAsNonRoot
						yym2037 := z.EncBinary()
						_ = yym2037
						if false {
						} else {
							r.EncodeBool(bool(yy2036))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2019[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2038 := *x.RunAsNonRoot
						yym2039 := z.EncBinary()
						_ = yym2039
						if false {
						} else {
							r.EncodeBool(bool(yy2038))
						}
					}
				}
			}
			if yyr2019 || yy2arr2019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2019[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2041 := z.EncBinary()
						_ = yym2041
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2019[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2042 := z.EncBinary()
						_ = yym2042
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2019 || yy2arr2019 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2019[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2044 := *x.FSGroup
						yym2045 := z.EncBinary()
						_ = yym2045
						if false {
						} else {
							r.EncodeInt(int64(yy2044))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2019[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2046 := *x.FSGroup
						yym2047 := z.EncBinary()
						_ = yym2047
						if false {
						} else {
							r.EncodeInt(int64(yy2046))
						}
					}
				}
			}
			if yyr2019 || yy2arr2019 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2048 := z.DecBinary()
	_ = yym2048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2049 := r.ContainerType()
		if yyct2049 == codecSelferValueTypeMap1234 {
			yyl2049 := r.ReadMapStart()
			if yyl2049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2049, d)
			}
		} else if yyct2049 == codecSelferValueTypeArray1234 {
			yyl2049 := r.ReadArrayStart()
			if yyl2049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2050Slc
	var yyhl2050 bool = l >= 0
	for yyj2050 := 0; ; yyj2050++ {
		if yyhl2050 {
			if yyj2050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2050Slc = r.DecodeBytes(yys2050Slc, true, true)
		yys2050 := string(yys2050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2050 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2056 := z.DecBinary()
				_ = yym2056
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2058 := z.DecBinary()
				_ = yym2058
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2059 := &x.SupplementalGroups
				yym2060 := z.DecBinary()
				_ = yym2060
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2059, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2062 := z.DecBinary()
				_ = yym2062
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2050)
		} // end switch yys2050
	} // end for yyj2050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2063 int
	var yyb2063 bool
	var yyhl2063 bool = l >= 0
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2069 := z.DecBinary()
		_ = yym2069
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2071 := z.DecBinary()
		_ = yym2071
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2072 := &x.SupplementalGroups
		yym2073 := z.DecBinary()
		_ = yym2073
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2072, false, d)
		}
	}
	yyj2063++
	if yyhl2063 {
		yyb2063 = yyj2063 > l
	} else {
		yyb2063 = r.CheckBreak()
	}
	if yyb2063 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2075 := z.DecBinary()
		_ = yym2075
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2063++
		if yyhl2063 {
			yyb2063 = yyj2063 > l
		} else {
			yyb2063 = r.CheckBreak()
		}
		if yyb2063 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2063-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2076 := z.EncBinary()
		_ = yym2076
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2077 := !z.EncBinary()
			yy2arr2077 := z.EncBasicHandle().StructToArray
			var yyq2077 [8]bool
			_, _, _ = yysep2077, yyq2077, yy2arr2077
			const yyr2077 bool = false
			yyq2077[0] = x.Phase != ""
			yyq2077[1] = len(x.Conditions) != 0
			yyq2077[2] = x.Message != ""
			yyq2077[3] = x.Reason != ""
			yyq2077[4] = x.HostIP != ""
			yyq2077[5] = x.PodIP != ""
			yyq2077[6] = x.StartTime != nil
			yyq2077[7] = len(x.ContainerStatuses) != 0
			var yynn2077 int
			if yyr2077 || yy2arr2077 {
				r.EncodeArrayStart(8)
			} else {
				yynn2077 = 0
				for _, b := range yyq2077 {
					if b {
						yynn2077++
					}
				}
				r.EncodeMapStart(yynn2077)
				yynn2077 = 0
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2080 := z.EncBinary()
						_ = yym2080
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2077[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2081 := z.EncBinary()
						_ = yym2081
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[2] {
					yym2083 := z.EncBinary()
					_ = yym2083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2084 := z.EncBinary()
					_ = yym2084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[3] {
					yym2086 := z.EncBinary()
					_ = yym2086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2087 := z.EncBinary()
					_ = yym2087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[4] {
					yym2089 := z.EncBinary()
					_ = yym2089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2090 := z.EncBinary()
					_ = yym2090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[5] {
					yym2092 := z.EncBinary()
					_ = yym2092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2077[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2095 := z.EncBinary()
						_ = yym2095
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2095 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2095 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2077[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2096 := z.EncBinary()
						_ = yym2096
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2096 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2096 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2077[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2098 := z.EncBinary()
						_ = yym2098
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2077[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2099 := z.EncBinary()
						_ = yym2099
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2077 || yy2arr2077 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2100 := z.DecBinary()
	_ = yym2100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2101 := r.ContainerType()
		if yyct2101 == codecSelferValueTypeMap1234 {
			yyl2101 := r.ReadMapStart()
			if yyl2101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2101, d)
			}
		} else if yyct2101 == codecSelferValueTypeArray1234 {
			yyl2101 := r.ReadArrayStart()
			if yyl2101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2102Slc
	var yyhl2102 bool = l >= 0
	for yyj2102 := 0; ; yyj2102++ {
		if yyhl2102 {
			if yyj2102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2102Slc = r.DecodeBytes(yys2102Slc, true, true)
		yys2102 := string(yys2102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2102 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2104 := &x.Conditions
				yym2105 := z.DecBinary()
				_ = yym2105
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2104), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2111 := z.DecBinary()
				_ = yym2111
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2111 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2111 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2112 := &x.ContainerStatuses
				yym2113 := z.DecBinary()
				_ = yym2113
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2112), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2102)
		} // end switch yys2102
	} // end for yyj2102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2114 int
	var yyb2114 bool
	var yyhl2114 bool = l >= 0
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2116 := &x.Conditions
		yym2117 := z.DecBinary()
		_ = yym2117
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2116), d)
		}
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2123 := z.DecBinary()
		_ = yym2123
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2123 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2123 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2124 := &x.ContainerStatuses
		yym2125 := z.DecBinary()
		_ = yym2125
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2124), d)
		}
	}
	for {
		yyj2114++
		if yyhl2114 {
			yyb2114 = yyj2114 > l
		} else {
			yyb2114 = r.CheckBreak()
		}
		if yyb2114 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2114-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2126 := z.EncBinary()
		_ = yym2126
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2127 := !z.EncBinary()
			yy2arr2127 := z.EncBasicHandle().StructToArray
			var yyq2127 [4]bool
			_, _, _ = yysep2127, yyq2127, yy2arr2127
			const yyr2127 bool = false
			yyq2127[0] = x.Kind != ""
			yyq2127[1] = x.APIVersion != ""
			yyq2127[2] = true
			yyq2127[3] = true
			var yynn2127 int
			if yyr2127 || yy2arr2127 {
				r.EncodeArrayStart(4)
			} else {
				yynn2127 = 0
				for _, b := range yyq2127 {
					if b {
						yynn2127++
					}
				}
				r.EncodeMapStart(yynn2127)
				yynn2127 = 0
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[0] {
					yym2129 := z.EncBinary()
					_ = yym2129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2127[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2130 := z.EncBinary()
					_ = yym2130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[1] {
					yym2132 := z.EncBinary()
					_ = yym2132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2127[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2133 := z.EncBinary()
					_ = yym2133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[2] {
					yy2135 := &x.ObjectMeta
					yy2135.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2136 := &x.ObjectMeta
					yy2136.CodecEncodeSelf(e)
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2127[3] {
					yy2138 := &x.Status
					yy2138.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2127[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2139 := &x.Status
					yy2139.CodecEncodeSelf(e)
				}
			}
			if yyr2127 || yy2arr2127 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2140 := z.DecBinary()
	_ = yym2140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2141 := r.ContainerType()
		if yyct2141 == codecSelferValueTypeMap1234 {
			yyl2141 := r.ReadMapStart()
			if yyl2141 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2141, d)
			}
		} else if yyct2141 == codecSelferValueTypeArray1234 {
			yyl2141 := r.ReadArrayStart()
			if yyl2141 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2142Slc
	var yyhl2142 bool = l >= 0
	for yyj2142 := 0; ; yyj2142++ {
		if yyhl2142 {
			if yyj2142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2142Slc = r.DecodeBytes(yys2142Slc, true, true)
		yys2142 := string(yys2142Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2142 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2145 := &x.ObjectMeta
				yyv2145.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2146 := &x.Status
				yyv2146.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2142)
		} // end switch yys2142
	} // end for yyj2142
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2147 int
	var yyb2147 bool
	var yyhl2147 bool = l >= 0
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2150 := &x.ObjectMeta
		yyv2150.CodecDecodeSelf(d)
	}
	yyj2147++
	if yyhl2147 {
		yyb2147 = yyj2147 > l
	} else {
		yyb2147 = r.CheckBreak()
	}
	if yyb2147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2151 := &x.Status
		yyv2151.CodecDecodeSelf(d)
	}
	for {
		yyj2147++
		if yyhl2147 {
			yyb2147 = yyj2147 > l
		} else {
			yyb2147 = r.CheckBreak()
		}
		if yyb2147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2152 := z.EncBinary()
		_ = yym2152
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2153 := !z.EncBinary()
			yy2arr2153 := z.EncBasicHandle().StructToArray
			var yyq2153 [5]bool
			_, _, _ = yysep2153, yyq2153, yy2arr2153
			const yyr2153 bool = false
			yyq2153[0] = x.Kind != ""
			yyq2153[1] = x.APIVersion != ""
			yyq2153[2] = true
			yyq2153[3] = true
			yyq2153[4] = true
			var yynn2153 int
			if yyr2153 || yy2arr2153 {
				r.EncodeArrayStart(5)
			} else {
				yynn2153 = 0
				for _, b := range yyq2153 {
					if b {
						yynn2153++
					}
				}
				r.EncodeMapStart(yynn2153)
				yynn2153 = 0
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[0] {
					yym2155 := z.EncBinary()
					_ = yym2155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2153[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2156 := z.EncBinary()
					_ = yym2156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[1] {
					yym2158 := z.EncBinary()
					_ = yym2158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2153[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2159 := z.EncBinary()
					_ = yym2159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[2] {
					yy2161 := &x.ObjectMeta
					yy2161.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2153[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2162 := &x.ObjectMeta
					yy2162.CodecEncodeSelf(e)
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[3] {
					yy2164 := &x.Spec
					yy2164.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2153[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2165 := &x.Spec
					yy2165.CodecEncodeSelf(e)
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2153[4] {
					yy2167 := &x.Status
					yy2167.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2153[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2168 := &x.Status
					yy2168.CodecEncodeSelf(e)
				}
			}
			if yyr2153 || yy2arr2153 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2169 := z.DecBinary()
	_ = yym2169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2170 := r.ContainerType()
		if yyct2170 == codecSelferValueTypeMap1234 {
			yyl2170 := r.ReadMapStart()
			if yyl2170 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2170, d)
			}
		} else if yyct2170 == codecSelferValueTypeArray1234 {
			yyl2170 := r.ReadArrayStart()
			if yyl2170 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2170, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2171Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2171Slc
	var yyhl2171 bool = l >= 0
	for yyj2171 := 0; ; yyj2171++ {
		if yyhl2171 {
			if yyj2171 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2171Slc = r.DecodeBytes(yys2171Slc, true, true)
		yys2171 := string(yys2171Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2171 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2174 := &x.ObjectMeta
				yyv2174.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2175 := &x.Spec
				yyv2175.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2176 := &x.Status
				yyv2176.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2171)
		} // end switch yys2171
	} // end for yyj2171
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2177 int
	var yyb2177 bool
	var yyhl2177 bool = l >= 0
	yyj2177++
	if yyhl2177 {
		yyb2177 = yyj2177 > l
	} else {
		yyb2177 = r.CheckBreak()
	}
	if yyb2177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2177++
	if yyhl2177 {
		yyb2177 = yyj2177 > l
	} else {
		yyb2177 = r.CheckBreak()
	}
	if yyb2177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2177++
	if yyhl2177 {
		yyb2177 = yyj2177 > l
	} else {
		yyb2177 = r.CheckBreak()
	}
	if yyb2177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2180 := &x.ObjectMeta
		yyv2180.CodecDecodeSelf(d)
	}
	yyj2177++
	if yyhl2177 {
		yyb2177 = yyj2177 > l
	} else {
		yyb2177 = r.CheckBreak()
	}
	if yyb2177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2181 := &x.Spec
		yyv2181.CodecDecodeSelf(d)
	}
	yyj2177++
	if yyhl2177 {
		yyb2177 = yyj2177 > l
	} else {
		yyb2177 = r.CheckBreak()
	}
	if yyb2177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2182 := &x.Status
		yyv2182.CodecDecodeSelf(d)
	}
	for {
		yyj2177++
		if yyhl2177 {
			yyb2177 = yyj2177 > l
		} else {
			yyb2177 = r.CheckBreak()
		}
		if yyb2177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2183 := z.EncBinary()
		_ = yym2183
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2184 := !z.EncBinary()
			yy2arr2184 := z.EncBasicHandle().StructToArray
			var yyq2184 [2]bool
			_, _, _ = yysep2184, yyq2184, yy2arr2184
			const yyr2184 bool = false
			yyq2184[0] = true
			yyq2184[1] = true
			var yynn2184 int
			if yyr2184 || yy2arr2184 {
				r.EncodeArrayStart(2)
			} else {
				yynn2184 = 0
				for _, b := range yyq2184 {
					if b {
						yynn2184++
					}
				}
				r.EncodeMapStart(yynn2184)
				yynn2184 = 0
			}
			if yyr2184 || yy2arr2184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2184[0] {
					yy2186 := &x.ObjectMeta
					yy2186.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2184[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2187 := &x.ObjectMeta
					yy2187.CodecEncodeSelf(e)
				}
			}
			if yyr2184 || yy2arr2184 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2184[1] {
					yy2189 := &x.Spec
					yy2189.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2184[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2190 := &x.Spec
					yy2190.CodecEncodeSelf(e)
				}
			}
			if yyr2184 || yy2arr2184 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2191 := z.DecBinary()
	_ = yym2191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2192 := r.ContainerType()
		if yyct2192 == codecSelferValueTypeMap1234 {
			yyl2192 := r.ReadMapStart()
			if yyl2192 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2192, d)
			}
		} else if yyct2192 == codecSelferValueTypeArray1234 {
			yyl2192 := r.ReadArrayStart()
			if yyl2192 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2193Slc
	var yyhl2193 bool = l >= 0
	for yyj2193 := 0; ; yyj2193++ {
		if yyhl2193 {
			if yyj2193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2193Slc = r.DecodeBytes(yys2193Slc, true, true)
		yys2193 := string(yys2193Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2193 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2194 := &x.ObjectMeta
				yyv2194.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2195 := &x.Spec
				yyv2195.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2193)
		} // end switch yys2193
	} // end for yyj2193
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2196 int
	var yyb2196 bool
	var yyhl2196 bool = l >= 0
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2197 := &x.ObjectMeta
		yyv2197.CodecDecodeSelf(d)
	}
	yyj2196++
	if yyhl2196 {
		yyb2196 = yyj2196 > l
	} else {
		yyb2196 = r.CheckBreak()
	}
	if yyb2196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2198 := &x.Spec
		yyv2198.CodecDecodeSelf(d)
	}
	for {
		yyj2196++
		if yyhl2196 {
			yyb2196 = yyj2196 > l
		} else {
			yyb2196 = r.CheckBreak()
		}
		if yyb2196 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2196-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2199 := z.EncBinary()
		_ = yym2199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2200 := !z.EncBinary()
			yy2arr2200 := z.EncBasicHandle().StructToArray
			var yyq2200 [4]bool
			_, _, _ = yysep2200, yyq2200, yy2arr2200
			const yyr2200 bool = false
			yyq2200[0] = x.Kind != ""
			yyq2200[1] = x.APIVersion != ""
			yyq2200[2] = true
			yyq2200[3] = true
			var yynn2200 int
			if yyr2200 || yy2arr2200 {
				r.EncodeArrayStart(4)
			} else {
				yynn2200 = 0
				for _, b := range yyq2200 {
					if b {
						yynn2200++
					}
				}
				r.EncodeMapStart(yynn2200)
				yynn2200 = 0
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2200[0] {
					yym2202 := z.EncBinary()
					_ = yym2202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2200[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2203 := z.EncBinary()
					_ = yym2203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2200[1] {
					yym2205 := z.EncBinary()
					_ = yym2205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2200[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2206 := z.EncBinary()
					_ = yym2206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2200[2] {
					yy2208 := &x.ObjectMeta
					yy2208.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2200[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2209 := &x.ObjectMeta
					yy2209.CodecEncodeSelf(e)
				}
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2200[3] {
					yy2211 := &x.Template
					yy2211.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2200[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2212 := &x.Template
					yy2212.CodecEncodeSelf(e)
				}
			}
			if yyr2200 || yy2arr2200 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2213 := z.DecBinary()
	_ = yym2213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2214 := r.ContainerType()
		if yyct2214 == codecSelferValueTypeMap1234 {
			yyl2214 := r.ReadMapStart()
			if yyl2214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2214, d)
			}
		} else if yyct2214 == codecSelferValueTypeArray1234 {
			yyl2214 := r.ReadArrayStart()
			if yyl2214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2215Slc
	var yyhl2215 bool = l >= 0
	for yyj2215 := 0; ; yyj2215++ {
		if yyhl2215 {
			if yyj2215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2215Slc = r.DecodeBytes(yys2215Slc, true, true)
		yys2215 := string(yys2215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2215 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2218 := &x.ObjectMeta
				yyv2218.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2219 := &x.Template
				yyv2219.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2215)
		} // end switch yys2215
	} // end for yyj2215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2220 int
	var yyb2220 bool
	var yyhl2220 bool = l >= 0
	yyj2220++
	if yyhl2220 {
		yyb2220 = yyj2220 > l
	} else {
		yyb2220 = r.CheckBreak()
	}
	if yyb2220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2220++
	if yyhl2220 {
		yyb2220 = yyj2220 > l
	} else {
		yyb2220 = r.CheckBreak()
	}
	if yyb2220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2220++
	if yyhl2220 {
		yyb2220 = yyj2220 > l
	} else {
		yyb2220 = r.CheckBreak()
	}
	if yyb2220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2223 := &x.ObjectMeta
		yyv2223.CodecDecodeSelf(d)
	}
	yyj2220++
	if yyhl2220 {
		yyb2220 = yyj2220 > l
	} else {
		yyb2220 = r.CheckBreak()
	}
	if yyb2220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2224 := &x.Template
		yyv2224.CodecDecodeSelf(d)
	}
	for {
		yyj2220++
		if yyhl2220 {
			yyb2220 = yyj2220 > l
		} else {
			yyb2220 = r.CheckBreak()
		}
		if yyb2220 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2220-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2225 := z.EncBinary()
		_ = yym2225
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2226 := !z.EncBinary()
			yy2arr2226 := z.EncBasicHandle().StructToArray
			var yyq2226 [4]bool
			_, _, _ = yysep2226, yyq2226, yy2arr2226
			const yyr2226 bool = false
			yyq2226[0] = x.Kind != ""
			yyq2226[1] = x.APIVersion != ""
			yyq2226[2] = true
			var yynn2226 int
			if yyr2226 || yy2arr2226 {
				r.EncodeArrayStart(4)
			} else {
				yynn2226 = 1
				for _, b := range yyq2226 {
					if b {
						yynn2226++
					}
				}
				r.EncodeMapStart(yynn2226)
				yynn2226 = 0
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2226[0] {
					yym2228 := z.EncBinary()
					_ = yym2228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2226[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2229 := z.EncBinary()
					_ = yym2229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2226[1] {
					yym2231 := z.EncBinary()
					_ = yym2231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2226[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2232 := z.EncBinary()
					_ = yym2232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2226[2] {
					yy2234 := &x.ListMeta
					yym2235 := z.EncBinary()
					_ = yym2235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2234) {
					} else {
						z.EncFallback(yy2234)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2226[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2236 := &x.ListMeta
					yym2237 := z.EncBinary()
					_ = yym2237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2236) {
					} else {
						z.EncFallback(yy2236)
					}
				}
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2239 := z.EncBinary()
					_ = yym2239
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2240 := z.EncBinary()
					_ = yym2240
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2226 || yy2arr2226 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2241 := z.DecBinary()
	_ = yym2241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2242 := r.ContainerType()
		if yyct2242 == codecSelferValueTypeMap1234 {
			yyl2242 := r.ReadMapStart()
			if yyl2242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2242, d)
			}
		} else if yyct2242 == codecSelferValueTypeArray1234 {
			yyl2242 := r.ReadArrayStart()
			if yyl2242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2243Slc
	var yyhl2243 bool = l >= 0
	for yyj2243 := 0; ; yyj2243++ {
		if yyhl2243 {
			if yyj2243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2243Slc = r.DecodeBytes(yys2243Slc, true, true)
		yys2243 := string(yys2243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2243 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2246 := &x.ListMeta
				yym2247 := z.DecBinary()
				_ = yym2247
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2246) {
				} else {
					z.DecFallback(yyv2246, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2248 := &x.Items
				yym2249 := z.DecBinary()
				_ = yym2249
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2248), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2243)
		} // end switch yys2243
	} // end for yyj2243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2250 int
	var yyb2250 bool
	var yyhl2250 bool = l >= 0
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2253 := &x.ListMeta
		yym2254 := z.DecBinary()
		_ = yym2254
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2253) {
		} else {
			z.DecFallback(yyv2253, false)
		}
	}
	yyj2250++
	if yyhl2250 {
		yyb2250 = yyj2250 > l
	} else {
		yyb2250 = r.CheckBreak()
	}
	if yyb2250 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2255 := &x.Items
		yym2256 := z.DecBinary()
		_ = yym2256
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2255), d)
		}
	}
	for {
		yyj2250++
		if yyhl2250 {
			yyb2250 = yyj2250 > l
		} else {
			yyb2250 = r.CheckBreak()
		}
		if yyb2250 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2250-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2257 := z.EncBinary()
		_ = yym2257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2258 := !z.EncBinary()
			yy2arr2258 := z.EncBasicHandle().StructToArray
			var yyq2258 [3]bool
			_, _, _ = yysep2258, yyq2258, yy2arr2258
			const yyr2258 bool = false
			yyq2258[2] = x.Template != nil
			var yynn2258 int
			if yyr2258 || yy2arr2258 {
				r.EncodeArrayStart(3)
			} else {
				yynn2258 = 2
				for _, b := range yyq2258 {
					if b {
						yynn2258++
					}
				}
				r.EncodeMapStart(yynn2258)
				yynn2258 = 0
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2260 := z.EncBinary()
				_ = yym2260
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2261 := z.EncBinary()
				_ = yym2261
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2263 := z.EncBinary()
					_ = yym2263
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2264 := z.EncBinary()
					_ = yym2264
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2258[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2258[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2266 := z.DecBinary()
	_ = yym2266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2267 := r.ContainerType()
		if yyct2267 == codecSelferValueTypeMap1234 {
			yyl2267 := r.ReadMapStart()
			if yyl2267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2267, d)
			}
		} else if yyct2267 == codecSelferValueTypeArray1234 {
			yyl2267 := r.ReadArrayStart()
			if yyl2267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2268Slc
	var yyhl2268 bool = l >= 0
	for yyj2268 := 0; ; yyj2268++ {
		if yyhl2268 {
			if yyj2268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2268Slc = r.DecodeBytes(yys2268Slc, true, true)
		yys2268 := string(yys2268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2268 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2270 := &x.Selector
				yym2271 := z.DecBinary()
				_ = yym2271
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2270, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2268)
		} // end switch yys2268
	} // end for yyj2268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2273 int
	var yyb2273 bool
	var yyhl2273 bool = l >= 0
	yyj2273++
	if yyhl2273 {
		yyb2273 = yyj2273 > l
	} else {
		yyb2273 = r.CheckBreak()
	}
	if yyb2273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2273++
	if yyhl2273 {
		yyb2273 = yyj2273 > l
	} else {
		yyb2273 = r.CheckBreak()
	}
	if yyb2273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2275 := &x.Selector
		yym2276 := z.DecBinary()
		_ = yym2276
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2275, false, d)
		}
	}
	yyj2273++
	if yyhl2273 {
		yyb2273 = yyj2273 > l
	} else {
		yyb2273 = r.CheckBreak()
	}
	if yyb2273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2273++
		if yyhl2273 {
			yyb2273 = yyj2273 > l
		} else {
			yyb2273 = r.CheckBreak()
		}
		if yyb2273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2278 := z.EncBinary()
		_ = yym2278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2279 := !z.EncBinary()
			yy2arr2279 := z.EncBasicHandle().StructToArray
			var yyq2279 [3]bool
			_, _, _ = yysep2279, yyq2279, yy2arr2279
			const yyr2279 bool = false
			yyq2279[1] = x.FullyLabeledReplicas != 0
			yyq2279[2] = x.ObservedGeneration != 0
			var yynn2279 int
			if yyr2279 || yy2arr2279 {
				r.EncodeArrayStart(3)
			} else {
				yynn2279 = 1
				for _, b := range yyq2279 {
					if b {
						yynn2279++
					}
				}
				r.EncodeMapStart(yynn2279)
				yynn2279 = 0
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2281 := z.EncBinary()
				_ = yym2281
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2282 := z.EncBinary()
				_ = yym2282
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[1] {
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2285 := z.EncBinary()
					_ = yym2285
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2279[2] {
					yym2287 := z.EncBinary()
					_ = yym2287
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2279[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2288 := z.EncBinary()
					_ = yym2288
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2279 || yy2arr2279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2289 := z.DecBinary()
	_ = yym2289
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2290 := r.ContainerType()
		if yyct2290 == codecSelferValueTypeMap1234 {
			yyl2290 := r.ReadMapStart()
			if yyl2290 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2290, d)
			}
		} else if yyct2290 == codecSelferValueTypeArray1234 {
			yyl2290 := r.ReadArrayStart()
			if yyl2290 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2290, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2291Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2291Slc
	var yyhl2291 bool = l >= 0
	for yyj2291 := 0; ; yyj2291++ {
		if yyhl2291 {
			if yyj2291 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2291Slc = r.DecodeBytes(yys2291Slc, true, true)
		yys2291 := string(yys2291Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2291 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2291)
		} // end switch yys2291
	} // end for yyj2291
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2295 int
	var yyb2295 bool
	var yyhl2295 bool = l >= 0
	yyj2295++
	if yyhl2295 {
		yyb2295 = yyj2295 > l
	} else {
		yyb2295 = r.CheckBreak()
	}
	if yyb2295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2295++
	if yyhl2295 {
		yyb2295 = yyj2295 > l
	} else {
		yyb2295 = r.CheckBreak()
	}
	if yyb2295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2295++
	if yyhl2295 {
		yyb2295 = yyj2295 > l
	} else {
		yyb2295 = r.CheckBreak()
	}
	if yyb2295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2295++
		if yyhl2295 {
			yyb2295 = yyj2295 > l
		} else {
			yyb2295 = r.CheckBreak()
		}
		if yyb2295 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2295-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2299 := z.EncBinary()
		_ = yym2299
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2300 := !z.EncBinary()
			yy2arr2300 := z.EncBasicHandle().StructToArray
			var yyq2300 [5]bool
			_, _, _ = yysep2300, yyq2300, yy2arr2300
			const yyr2300 bool = false
			yyq2300[0] = x.Kind != ""
			yyq2300[1] = x.APIVersion != ""
			yyq2300[2] = true
			yyq2300[3] = true
			yyq2300[4] = true
			var yynn2300 int
			if yyr2300 || yy2arr2300 {
				r.EncodeArrayStart(5)
			} else {
				yynn2300 = 0
				for _, b := range yyq2300 {
					if b {
						yynn2300++
					}
				}
				r.EncodeMapStart(yynn2300)
				yynn2300 = 0
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2300[0] {
					yym2302 := z.EncBinary()
					_ = yym2302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2300[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2303 := z.EncBinary()
					_ = yym2303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2300[1] {
					yym2305 := z.EncBinary()
					_ = yym2305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2300[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2306 := z.EncBinary()
					_ = yym2306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2300[2] {
					yy2308 := &x.ObjectMeta
					yy2308.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2300[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2309 := &x.ObjectMeta
					yy2309.CodecEncodeSelf(e)
				}
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2300[3] {
					yy2311 := &x.Spec
					yy2311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2300[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2312 := &x.Spec
					yy2312.CodecEncodeSelf(e)
				}
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2300[4] {
					yy2314 := &x.Status
					yy2314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2300[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2315 := &x.Status
					yy2315.CodecEncodeSelf(e)
				}
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2316 := z.DecBinary()
	_ = yym2316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2317 := r.ContainerType()
		if yyct2317 == codecSelferValueTypeMap1234 {
			yyl2317 := r.ReadMapStart()
			if yyl2317 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2317, d)
			}
		} else if yyct2317 == codecSelferValueTypeArray1234 {
			yyl2317 := r.ReadArrayStart()
			if yyl2317 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2317, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2318Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2318Slc
	var yyhl2318 bool = l >= 0
	for yyj2318 := 0; ; yyj2318++ {
		if yyhl2318 {
			if yyj2318 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2318Slc = r.DecodeBytes(yys2318Slc, true, true)
		yys2318 := string(yys2318Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2318 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2321 := &x.ObjectMeta
				yyv2321.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2322 := &x.Spec
				yyv2322.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2323 := &x.Status
				yyv2323.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2318)
		} // end switch yys2318
	} // end for yyj2318
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2324 int
	var yyb2324 bool
	var yyhl2324 bool = l >= 0
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2327 := &x.ObjectMeta
		yyv2327.CodecDecodeSelf(d)
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2328 := &x.Spec
		yyv2328.CodecDecodeSelf(d)
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2329 := &x.Status
		yyv2329.CodecDecodeSelf(d)
	}
	for {
		yyj2324++
		if yyhl2324 {
			yyb2324 = yyj2324 > l
		} else {
			yyb2324 = r.CheckBreak()
		}
		if yyb2324 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2324-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2330 := z.EncBinary()
		_ = yym2330
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2331 := !z.EncBinary()
			yy2arr2331 := z.EncBasicHandle().StructToArray
			var yyq2331 [4]bool
			_, _, _ = yysep2331, yyq2331, yy2arr2331
			const yyr2331 bool = false
			yyq2331[0] = x.Kind != ""
			yyq2331[1] = x.APIVersion != ""
			yyq2331[2] = true
			var yynn2331 int
			if yyr2331 || yy2arr2331 {
				r.EncodeArrayStart(4)
			} else {
				yynn2331 = 1
				for _, b := range yyq2331 {
					if b {
						yynn2331++
					}
				}
				r.EncodeMapStart(yynn2331)
				yynn2331 = 0
			}
			if yyr2331 || yy2arr2331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2331[0] {
					yym2333 := z.EncBinary()
					_ = yym2333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2331[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2334 := z.EncBinary()
					_ = yym2334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2331 || yy2arr2331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2331[1] {
					yym2336 := z.EncBinary()
					_ = yym2336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2331[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2337 := z.EncBinary()
					_ = yym2337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2331 || yy2arr2331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2331[2] {
					yy2339 := &x.ListMeta
					yym2340 := z.EncBinary()
					_ = yym2340
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2339) {
					} else {
						z.EncFallback(yy2339)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2331[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2341 := &x.ListMeta
					yym2342 := z.EncBinary()
					_ = yym2342
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2341) {
					} else {
						z.EncFallback(yy2341)
					}
				}
			}
			if yyr2331 || yy2arr2331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2344 := z.EncBinary()
					_ = yym2344
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2345 := z.EncBinary()
					_ = yym2345
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2331 || yy2arr2331 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2346 := z.DecBinary()
	_ = yym2346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2347 := r.ContainerType()
		if yyct2347 == codecSelferValueTypeMap1234 {
			yyl2347 := r.ReadMapStart()
			if yyl2347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2347, d)
			}
		} else if yyct2347 == codecSelferValueTypeArray1234 {
			yyl2347 := r.ReadArrayStart()
			if yyl2347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2348Slc
	var yyhl2348 bool = l >= 0
	for yyj2348 := 0; ; yyj2348++ {
		if yyhl2348 {
			if yyj2348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2348Slc = r.DecodeBytes(yys2348Slc, true, true)
		yys2348 := string(yys2348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2348 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2351 := &x.ListMeta
				yym2352 := z.DecBinary()
				_ = yym2352
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2351) {
				} else {
					z.DecFallback(yyv2351, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2353 := &x.Items
				yym2354 := z.DecBinary()
				_ = yym2354
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2353), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2348)
		} // end switch yys2348
	} // end for yyj2348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2355 int
	var yyb2355 bool
	var yyhl2355 bool = l >= 0
	yyj2355++
	if yyhl2355 {
		yyb2355 = yyj2355 > l
	} else {
		yyb2355 = r.CheckBreak()
	}
	if yyb2355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2355++
	if yyhl2355 {
		yyb2355 = yyj2355 > l
	} else {
		yyb2355 = r.CheckBreak()
	}
	if yyb2355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2355++
	if yyhl2355 {
		yyb2355 = yyj2355 > l
	} else {
		yyb2355 = r.CheckBreak()
	}
	if yyb2355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2358 := &x.ListMeta
		yym2359 := z.DecBinary()
		_ = yym2359
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2358) {
		} else {
			z.DecFallback(yyv2358, false)
		}
	}
	yyj2355++
	if yyhl2355 {
		yyb2355 = yyj2355 > l
	} else {
		yyb2355 = r.CheckBreak()
	}
	if yyb2355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2360 := &x.Items
		yym2361 := z.DecBinary()
		_ = yym2361
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2360), d)
		}
	}
	for {
		yyj2355++
		if yyhl2355 {
			yyb2355 = yyj2355 > l
		} else {
			yyb2355 = r.CheckBreak()
		}
		if yyb2355 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2355-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2362 := z.EncBinary()
		_ = yym2362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2363 := !z.EncBinary()
			yy2arr2363 := z.EncBasicHandle().StructToArray
			var yyq2363 [4]bool
			_, _, _ = yysep2363, yyq2363, yy2arr2363
			const yyr2363 bool = false
			yyq2363[0] = x.Kind != ""
			yyq2363[1] = x.APIVersion != ""
			yyq2363[2] = true
			var yynn2363 int
			if yyr2363 || yy2arr2363 {
				r.EncodeArrayStart(4)
			} else {
				yynn2363 = 1
				for _, b := range yyq2363 {
					if b {
						yynn2363++
					}
				}
				r.EncodeMapStart(yynn2363)
				yynn2363 = 0
			}
			if yyr2363 || yy2arr2363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2363[0] {
					yym2365 := z.EncBinary()
					_ = yym2365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2363[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2366 := z.EncBinary()
					_ = yym2366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2363 || yy2arr2363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2363[1] {
					yym2368 := z.EncBinary()
					_ = yym2368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2363[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2369 := z.EncBinary()
					_ = yym2369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2363 || yy2arr2363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2363[2] {
					yy2371 := &x.ListMeta
					yym2372 := z.EncBinary()
					_ = yym2372
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2371) {
					} else {
						z.EncFallback(yy2371)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2363[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2373 := &x.ListMeta
					yym2374 := z.EncBinary()
					_ = yym2374
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2373) {
					} else {
						z.EncFallback(yy2373)
					}
				}
			}
			if yyr2363 || yy2arr2363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2376 := z.EncBinary()
					_ = yym2376
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2377 := z.EncBinary()
					_ = yym2377
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2363 || yy2arr2363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2378 := z.DecBinary()
	_ = yym2378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2379 := r.ContainerType()
		if yyct2379 == codecSelferValueTypeMap1234 {
			yyl2379 := r.ReadMapStart()
			if yyl2379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2379, d)
			}
		} else if yyct2379 == codecSelferValueTypeArray1234 {
			yyl2379 := r.ReadArrayStart()
			if yyl2379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2380Slc
	var yyhl2380 bool = l >= 0
	for yyj2380 := 0; ; yyj2380++ {
		if yyhl2380 {
			if yyj2380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2380Slc = r.DecodeBytes(yys2380Slc, true, true)
		yys2380 := string(yys2380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2383 := &x.ListMeta
				yym2384 := z.DecBinary()
				_ = yym2384
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2383) {
				} else {
					z.DecFallback(yyv2383, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2385 := &x.Items
				yym2386 := z.DecBinary()
				_ = yym2386
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2385), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2380)
		} // end switch yys2380
	} // end for yyj2380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2387 int
	var yyb2387 bool
	var yyhl2387 bool = l >= 0
	yyj2387++
	if yyhl2387 {
		yyb2387 = yyj2387 > l
	} else {
		yyb2387 = r.CheckBreak()
	}
	if yyb2387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2387++
	if yyhl2387 {
		yyb2387 = yyj2387 > l
	} else {
		yyb2387 = r.CheckBreak()
	}
	if yyb2387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2387++
	if yyhl2387 {
		yyb2387 = yyj2387 > l
	} else {
		yyb2387 = r.CheckBreak()
	}
	if yyb2387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2390 := &x.ListMeta
		yym2391 := z.DecBinary()
		_ = yym2391
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2390) {
		} else {
			z.DecFallback(yyv2390, false)
		}
	}
	yyj2387++
	if yyhl2387 {
		yyb2387 = yyj2387 > l
	} else {
		yyb2387 = r.CheckBreak()
	}
	if yyb2387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2392 := &x.Items
		yym2393 := z.DecBinary()
		_ = yym2393
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2392), d)
		}
	}
	for {
		yyj2387++
		if yyhl2387 {
			yyb2387 = yyj2387 > l
		} else {
			yyb2387 = r.CheckBreak()
		}
		if yyb2387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2394 := z.EncBinary()
	_ = yym2394
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2395 := z.DecBinary()
	_ = yym2395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2396 := z.EncBinary()
	_ = yym2396
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2397 := z.DecBinary()
	_ = yym2397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2398 := z.EncBinary()
		_ = yym2398
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2399 := !z.EncBinary()
			yy2arr2399 := z.EncBasicHandle().StructToArray
			var yyq2399 [1]bool
			_, _, _ = yysep2399, yyq2399, yy2arr2399
			const yyr2399 bool = false
			yyq2399[0] = true
			var yynn2399 int
			if yyr2399 || yy2arr2399 {
				r.EncodeArrayStart(1)
			} else {
				yynn2399 = 0
				for _, b := range yyq2399 {
					if b {
						yynn2399++
					}
				}
				r.EncodeMapStart(yynn2399)
				yynn2399 = 0
			}
			if yyr2399 || yy2arr2399 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2399[0] {
					yy2401 := &x.LoadBalancer
					yy2401.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2399[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2402 := &x.LoadBalancer
					yy2402.CodecEncodeSelf(e)
				}
			}
			if yyr2399 || yy2arr2399 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2403 := z.DecBinary()
	_ = yym2403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2404 := r.ContainerType()
		if yyct2404 == codecSelferValueTypeMap1234 {
			yyl2404 := r.ReadMapStart()
			if yyl2404 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2404, d)
			}
		} else if yyct2404 == codecSelferValueTypeArray1234 {
			yyl2404 := r.ReadArrayStart()
			if yyl2404 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2404, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2405Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2405Slc
	var yyhl2405 bool = l >= 0
	for yyj2405 := 0; ; yyj2405++ {
		if yyhl2405 {
			if yyj2405 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2405Slc = r.DecodeBytes(yys2405Slc, true, true)
		yys2405 := string(yys2405Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2405 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2406 := &x.LoadBalancer
				yyv2406.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2405)
		} // end switch yys2405
	} // end for yyj2405
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2407 int
	var yyb2407 bool
	var yyhl2407 bool = l >= 0
	yyj2407++
	if yyhl2407 {
		yyb2407 = yyj2407 > l
	} else {
		yyb2407 = r.CheckBreak()
	}
	if yyb2407 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2408 := &x.LoadBalancer
		yyv2408.CodecDecodeSelf(d)
	}
	for {
		yyj2407++
		if yyhl2407 {
			yyb2407 = yyj2407 > l
		} else {
			yyb2407 = r.CheckBreak()
		}
		if yyb2407 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2407-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2409 := z.EncBinary()
		_ = yym2409
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2410 := !z.EncBinary()
			yy2arr2410 := z.EncBasicHandle().StructToArray
			var yyq2410 [1]bool
			_, _, _ = yysep2410, yyq2410, yy2arr2410
			const yyr2410 bool = false
			yyq2410[0] = len(x.Ingress) != 0
			var yynn2410 int
			if yyr2410 || yy2arr2410 {
				r.EncodeArrayStart(1)
			} else {
				yynn2410 = 0
				for _, b := range yyq2410 {
					if b {
						yynn2410++
					}
				}
				r.EncodeMapStart(yynn2410)
				yynn2410 = 0
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2410[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2412 := z.EncBinary()
						_ = yym2412
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2410[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2413 := z.EncBinary()
						_ = yym2413
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2414 := z.DecBinary()
	_ = yym2414
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2415 := r.ContainerType()
		if yyct2415 == codecSelferValueTypeMap1234 {
			yyl2415 := r.ReadMapStart()
			if yyl2415 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2415, d)
			}
		} else if yyct2415 == codecSelferValueTypeArray1234 {
			yyl2415 := r.ReadArrayStart()
			if yyl2415 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2415, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2416Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2416Slc
	var yyhl2416 bool = l >= 0
	for yyj2416 := 0; ; yyj2416++ {
		if yyhl2416 {
			if yyj2416 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2416Slc = r.DecodeBytes(yys2416Slc, true, true)
		yys2416 := string(yys2416Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2416 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2417 := &x.Ingress
				yym2418 := z.DecBinary()
				_ = yym2418
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2417), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2416)
		} // end switch yys2416
	} // end for yyj2416
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2419 int
	var yyb2419 bool
	var yyhl2419 bool = l >= 0
	yyj2419++
	if yyhl2419 {
		yyb2419 = yyj2419 > l
	} else {
		yyb2419 = r.CheckBreak()
	}
	if yyb2419 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2420 := &x.Ingress
		yym2421 := z.DecBinary()
		_ = yym2421
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2420), d)
		}
	}
	for {
		yyj2419++
		if yyhl2419 {
			yyb2419 = yyj2419 > l
		} else {
			yyb2419 = r.CheckBreak()
		}
		if yyb2419 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2419-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2422 := z.EncBinary()
		_ = yym2422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2423 := !z.EncBinary()
			yy2arr2423 := z.EncBasicHandle().StructToArray
			var yyq2423 [2]bool
			_, _, _ = yysep2423, yyq2423, yy2arr2423
			const yyr2423 bool = false
			yyq2423[0] = x.IP != ""
			yyq2423[1] = x.Hostname != ""
			var yynn2423 int
			if yyr2423 || yy2arr2423 {
				r.EncodeArrayStart(2)
			} else {
				yynn2423 = 0
				for _, b := range yyq2423 {
					if b {
						yynn2423++
					}
				}
				r.EncodeMapStart(yynn2423)
				yynn2423 = 0
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[0] {
					yym2425 := z.EncBinary()
					_ = yym2425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2426 := z.EncBinary()
					_ = yym2426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2423[1] {
					yym2428 := z.EncBinary()
					_ = yym2428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2429 := z.EncBinary()
					_ = yym2429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2423 || yy2arr2423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2430 := z.DecBinary()
	_ = yym2430
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2431 := r.ContainerType()
		if yyct2431 == codecSelferValueTypeMap1234 {
			yyl2431 := r.ReadMapStart()
			if yyl2431 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2431, d)
			}
		} else if yyct2431 == codecSelferValueTypeArray1234 {
			yyl2431 := r.ReadArrayStart()
			if yyl2431 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2431, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2432Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2432Slc
	var yyhl2432 bool = l >= 0
	for yyj2432 := 0; ; yyj2432++ {
		if yyhl2432 {
			if yyj2432 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2432Slc = r.DecodeBytes(yys2432Slc, true, true)
		yys2432 := string(yys2432Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2432 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2432)
		} // end switch yys2432
	} // end for yyj2432
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2435 int
	var yyb2435 bool
	var yyhl2435 bool = l >= 0
	yyj2435++
	if yyhl2435 {
		yyb2435 = yyj2435 > l
	} else {
		yyb2435 = r.CheckBreak()
	}
	if yyb2435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2435++
	if yyhl2435 {
		yyb2435 = yyj2435 > l
	} else {
		yyb2435 = r.CheckBreak()
	}
	if yyb2435 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2435++
		if yyhl2435 {
			yyb2435 = yyj2435 > l
		} else {
			yyb2435 = r.CheckBreak()
		}
		if yyb2435 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2435-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2438 := z.EncBinary()
		_ = yym2438
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2439 := !z.EncBinary()
			yy2arr2439 := z.EncBasicHandle().StructToArray
			var yyq2439 [8]bool
			_, _, _ = yysep2439, yyq2439, yy2arr2439
			const yyr2439 bool = false
			yyq2439[0] = x.Type != ""
			yyq2439[3] = x.ClusterIP != ""
			yyq2439[4] = len(x.ExternalIPs) != 0
			yyq2439[5] = x.LoadBalancerIP != ""
			yyq2439[6] = x.SessionAffinity != ""
			yyq2439[7] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2439 int
			if yyr2439 || yy2arr2439 {
				r.EncodeArrayStart(8)
			} else {
				yynn2439 = 2
				for _, b := range yyq2439 {
					if b {
						yynn2439++
					}
				}
				r.EncodeMapStart(yynn2439)
				yynn2439 = 0
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2439[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2439[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2443 := z.EncBinary()
					_ = yym2443
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2445 := z.EncBinary()
					_ = yym2445
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2439[3] {
					yym2448 := z.EncBinary()
					_ = yym2448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2439[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2439[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2451 := z.EncBinary()
						_ = yym2451
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2439[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2452 := z.EncBinary()
						_ = yym2452
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2439[5] {
					yym2454 := z.EncBinary()
					_ = yym2454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2439[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2439[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2439[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2439[7] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2458 := z.EncBinary()
						_ = yym2458
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2439[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2459 := z.EncBinary()
						_ = yym2459
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2439 || yy2arr2439 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2460 := z.DecBinary()
	_ = yym2460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2461 := r.ContainerType()
		if yyct2461 == codecSelferValueTypeMap1234 {
			yyl2461 := r.ReadMapStart()
			if yyl2461 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2461, d)
			}
		} else if yyct2461 == codecSelferValueTypeArray1234 {
			yyl2461 := r.ReadArrayStart()
			if yyl2461 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2461, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2462Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2462Slc
	var yyhl2462 bool = l >= 0
	for yyj2462 := 0; ; yyj2462++ {
		if yyhl2462 {
			if yyj2462 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2462Slc = r.DecodeBytes(yys2462Slc, true, true)
		yys2462 := string(yys2462Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2462 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2464 := &x.Ports
				yym2465 := z.DecBinary()
				_ = yym2465
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2464), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2466 := &x.Selector
				yym2467 := z.DecBinary()
				_ = yym2467
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2466, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2469 := &x.ExternalIPs
				yym2470 := z.DecBinary()
				_ = yym2470
				if false {
				} else {
					z.F.DecSliceStringX(yyv2469, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2473 := &x.LoadBalancerSourceRanges
				yym2474 := z.DecBinary()
				_ = yym2474
				if false {
				} else {
					z.F.DecSliceStringX(yyv2473, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2462)
		} // end switch yys2462
	} // end for yyj2462
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2475 int
	var yyb2475 bool
	var yyhl2475 bool = l >= 0
	yyj2475++
	if yyhl2475 {
		yyb2475 = yyj2475 > l
	} else {
		yyb2475 = r.CheckBreak()
	}
	if yyb2475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2475++
	if yyhl2475 {
		yyb2475 = yyj2475 > l
	} else {
		yyb2475 = r.CheckBreak()
	}
	if yyb2475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2477 := &x.Ports
		yym2478 := z.DecBinary()
		_ = yym2478
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2477), d)
		}
	}
	yyj2475++
	if yyhl2475 {
		yyb2475 = yyj2475 > l
	} else {
		yyb2475 = r.CheckBreak()
	}
	if yyb2475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2479 := &x.Selector
		yym2480 := z.DecBinary()
		_ = yym2480
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2479, false, d)
		}
	}
	yyj2475++
	if yyhl2475 {
		yyb2475 = yyj2475 > l
	} else {
		yyb2475 = r.CheckBreak()
	}
	if yyb2475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2475++
	if yyhl2475 {
		yyb2475 = yyj2475 > l
	} else {
		yyb2475 = r.CheckBreak()
	}
	if yyb2475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2482 := &x.ExternalIPs
		yym2483 := z.DecBinary()
		_ = yym2483
		if false {
		} else {
			z.F.DecSliceStringX(yyv2482, false, d)
		}
	}
	yyj2475++
	if yyhl2475 {
		yyb2475 = yyj2475 > l
	} else {
		yyb2475 = r.CheckBreak()
	}
	if yyb2475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2475++
	if yyhl2475 {
		yyb2475 = yyj2475 > l
	} else {
		yyb2475 = r.CheckBreak()
	}
	if yyb2475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2475++
	if yyhl2475 {
		yyb2475 = yyj2475 > l
	} else {
		yyb2475 = r.CheckBreak()
	}
	if yyb2475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2486 := &x.LoadBalancerSourceRanges
		yym2487 := z.DecBinary()
		_ = yym2487
		if false {
		} else {
			z.F.DecSliceStringX(yyv2486, false, d)
		}
	}
	for {
		yyj2475++
		if yyhl2475 {
			yyb2475 = yyj2475 > l
		} else {
			yyb2475 = r.CheckBreak()
		}
		if yyb2475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2488 := z.EncBinary()
		_ = yym2488
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2489 := !z.EncBinary()
			yy2arr2489 := z.EncBasicHandle().StructToArray
			var yyq2489 [5]bool
			_, _, _ = yysep2489, yyq2489, yy2arr2489
			const yyr2489 bool = false
			var yynn2489 int
			if yyr2489 || yy2arr2489 {
				r.EncodeArrayStart(5)
			} else {
				yynn2489 = 5
				for _, b := range yyq2489 {
					if b {
						yynn2489++
					}
				}
				r.EncodeMapStart(yynn2489)
				yynn2489 = 0
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2491 := z.EncBinary()
				_ = yym2491
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2492 := z.EncBinary()
				_ = yym2492
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2495 := z.EncBinary()
				_ = yym2495
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2496 := z.EncBinary()
				_ = yym2496
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2498 := &x.TargetPort
				yym2499 := z.EncBinary()
				_ = yym2499
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2498) {
				} else if !yym2499 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2498)
				} else {
					z.EncFallback(yy2498)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2500 := &x.TargetPort
				yym2501 := z.EncBinary()
				_ = yym2501
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2500) {
				} else if !yym2501 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2500)
				} else {
					z.EncFallback(yy2500)
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2503 := z.EncBinary()
				_ = yym2503
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2504 := z.EncBinary()
				_ = yym2504
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2489 || yy2arr2489 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2505 := z.DecBinary()
	_ = yym2505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2506 := r.ContainerType()
		if yyct2506 == codecSelferValueTypeMap1234 {
			yyl2506 := r.ReadMapStart()
			if yyl2506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2506, d)
			}
		} else if yyct2506 == codecSelferValueTypeArray1234 {
			yyl2506 := r.ReadArrayStart()
			if yyl2506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2507Slc
	var yyhl2507 bool = l >= 0
	for yyj2507 := 0; ; yyj2507++ {
		if yyhl2507 {
			if yyj2507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2507Slc = r.DecodeBytes(yys2507Slc, true, true)
		yys2507 := string(yys2507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2507 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2511 := &x.TargetPort
				yym2512 := z.DecBinary()
				_ = yym2512
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2511) {
				} else if !yym2512 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2511)
				} else {
					z.DecFallback(yyv2511, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2507)
		} // end switch yys2507
	} // end for yyj2507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2514 int
	var yyb2514 bool
	var yyhl2514 bool = l >= 0
	yyj2514++
	if yyhl2514 {
		yyb2514 = yyj2514 > l
	} else {
		yyb2514 = r.CheckBreak()
	}
	if yyb2514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2514++
	if yyhl2514 {
		yyb2514 = yyj2514 > l
	} else {
		yyb2514 = r.CheckBreak()
	}
	if yyb2514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2514++
	if yyhl2514 {
		yyb2514 = yyj2514 > l
	} else {
		yyb2514 = r.CheckBreak()
	}
	if yyb2514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2514++
	if yyhl2514 {
		yyb2514 = yyj2514 > l
	} else {
		yyb2514 = r.CheckBreak()
	}
	if yyb2514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2518 := &x.TargetPort
		yym2519 := z.DecBinary()
		_ = yym2519
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2518) {
		} else if !yym2519 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2518)
		} else {
			z.DecFallback(yyv2518, false)
		}
	}
	yyj2514++
	if yyhl2514 {
		yyb2514 = yyj2514 > l
	} else {
		yyb2514 = r.CheckBreak()
	}
	if yyb2514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2514++
		if yyhl2514 {
			yyb2514 = yyj2514 > l
		} else {
			yyb2514 = r.CheckBreak()
		}
		if yyb2514 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2514-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2521 := z.EncBinary()
		_ = yym2521
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2522 := !z.EncBinary()
			yy2arr2522 := z.EncBasicHandle().StructToArray
			var yyq2522 [5]bool
			_, _, _ = yysep2522, yyq2522, yy2arr2522
			const yyr2522 bool = false
			yyq2522[0] = x.Kind != ""
			yyq2522[1] = x.APIVersion != ""
			yyq2522[2] = true
			yyq2522[3] = true
			yyq2522[4] = true
			var yynn2522 int
			if yyr2522 || yy2arr2522 {
				r.EncodeArrayStart(5)
			} else {
				yynn2522 = 0
				for _, b := range yyq2522 {
					if b {
						yynn2522++
					}
				}
				r.EncodeMapStart(yynn2522)
				yynn2522 = 0
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2522[0] {
					yym2524 := z.EncBinary()
					_ = yym2524
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2522[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2525 := z.EncBinary()
					_ = yym2525
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2522[1] {
					yym2527 := z.EncBinary()
					_ = yym2527
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2522[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2522[2] {
					yy2530 := &x.ObjectMeta
					yy2530.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2522[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2531 := &x.ObjectMeta
					yy2531.CodecEncodeSelf(e)
				}
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2522[3] {
					yy2533 := &x.Spec
					yy2533.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2522[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2534 := &x.Spec
					yy2534.CodecEncodeSelf(e)
				}
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2522[4] {
					yy2536 := &x.Status
					yy2536.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2522[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2537 := &x.Status
					yy2537.CodecEncodeSelf(e)
				}
			}
			if yyr2522 || yy2arr2522 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2538 := z.DecBinary()
	_ = yym2538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2539 := r.ContainerType()
		if yyct2539 == codecSelferValueTypeMap1234 {
			yyl2539 := r.ReadMapStart()
			if yyl2539 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2539, d)
			}
		} else if yyct2539 == codecSelferValueTypeArray1234 {
			yyl2539 := r.ReadArrayStart()
			if yyl2539 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2540Slc
	var yyhl2540 bool = l >= 0
	for yyj2540 := 0; ; yyj2540++ {
		if yyhl2540 {
			if yyj2540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2540Slc = r.DecodeBytes(yys2540Slc, true, true)
		yys2540 := string(yys2540Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2540 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2543 := &x.ObjectMeta
				yyv2543.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2544 := &x.Spec
				yyv2544.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2545 := &x.Status
				yyv2545.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2540)
		} // end switch yys2540
	} // end for yyj2540
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2546 int
	var yyb2546 bool
	var yyhl2546 bool = l >= 0
	yyj2546++
	if yyhl2546 {
		yyb2546 = yyj2546 > l
	} else {
		yyb2546 = r.CheckBreak()
	}
	if yyb2546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2546++
	if yyhl2546 {
		yyb2546 = yyj2546 > l
	} else {
		yyb2546 = r.CheckBreak()
	}
	if yyb2546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2546++
	if yyhl2546 {
		yyb2546 = yyj2546 > l
	} else {
		yyb2546 = r.CheckBreak()
	}
	if yyb2546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2549 := &x.ObjectMeta
		yyv2549.CodecDecodeSelf(d)
	}
	yyj2546++
	if yyhl2546 {
		yyb2546 = yyj2546 > l
	} else {
		yyb2546 = r.CheckBreak()
	}
	if yyb2546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2550 := &x.Spec
		yyv2550.CodecDecodeSelf(d)
	}
	yyj2546++
	if yyhl2546 {
		yyb2546 = yyj2546 > l
	} else {
		yyb2546 = r.CheckBreak()
	}
	if yyb2546 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2551 := &x.Status
		yyv2551.CodecDecodeSelf(d)
	}
	for {
		yyj2546++
		if yyhl2546 {
			yyb2546 = yyj2546 > l
		} else {
			yyb2546 = r.CheckBreak()
		}
		if yyb2546 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2546-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2552 := z.EncBinary()
		_ = yym2552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2553 := !z.EncBinary()
			yy2arr2553 := z.EncBasicHandle().StructToArray
			var yyq2553 [5]bool
			_, _, _ = yysep2553, yyq2553, yy2arr2553
			const yyr2553 bool = false
			yyq2553[0] = x.Kind != ""
			yyq2553[1] = x.APIVersion != ""
			yyq2553[2] = true
			yyq2553[4] = len(x.ImagePullSecrets) != 0
			var yynn2553 int
			if yyr2553 || yy2arr2553 {
				r.EncodeArrayStart(5)
			} else {
				yynn2553 = 1
				for _, b := range yyq2553 {
					if b {
						yynn2553++
					}
				}
				r.EncodeMapStart(yynn2553)
				yynn2553 = 0
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2553[0] {
					yym2555 := z.EncBinary()
					_ = yym2555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2553[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2556 := z.EncBinary()
					_ = yym2556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2553[1] {
					yym2558 := z.EncBinary()
					_ = yym2558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2553[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2559 := z.EncBinary()
					_ = yym2559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2553[2] {
					yy2561 := &x.ObjectMeta
					yy2561.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2553[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2562 := &x.ObjectMeta
					yy2562.CodecEncodeSelf(e)
				}
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2564 := z.EncBinary()
					_ = yym2564
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2565 := z.EncBinary()
					_ = yym2565
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2553[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2567 := z.EncBinary()
						_ = yym2567
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2553[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2568 := z.EncBinary()
						_ = yym2568
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2553 || yy2arr2553 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2569 := z.DecBinary()
	_ = yym2569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2570 := r.ContainerType()
		if yyct2570 == codecSelferValueTypeMap1234 {
			yyl2570 := r.ReadMapStart()
			if yyl2570 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2570, d)
			}
		} else if yyct2570 == codecSelferValueTypeArray1234 {
			yyl2570 := r.ReadArrayStart()
			if yyl2570 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2570, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2571Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2571Slc
	var yyhl2571 bool = l >= 0
	for yyj2571 := 0; ; yyj2571++ {
		if yyhl2571 {
			if yyj2571 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2571Slc = r.DecodeBytes(yys2571Slc, true, true)
		yys2571 := string(yys2571Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2571 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2574 := &x.ObjectMeta
				yyv2574.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2575 := &x.Secrets
				yym2576 := z.DecBinary()
				_ = yym2576
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2575), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2577 := &x.ImagePullSecrets
				yym2578 := z.DecBinary()
				_ = yym2578
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2577), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2571)
		} // end switch yys2571
	} // end for yyj2571
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2579 int
	var yyb2579 bool
	var yyhl2579 bool = l >= 0
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2582 := &x.ObjectMeta
		yyv2582.CodecDecodeSelf(d)
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2583 := &x.Secrets
		yym2584 := z.DecBinary()
		_ = yym2584
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2583), d)
		}
	}
	yyj2579++
	if yyhl2579 {
		yyb2579 = yyj2579 > l
	} else {
		yyb2579 = r.CheckBreak()
	}
	if yyb2579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2585 := &x.ImagePullSecrets
		yym2586 := z.DecBinary()
		_ = yym2586
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2585), d)
		}
	}
	for {
		yyj2579++
		if yyhl2579 {
			yyb2579 = yyj2579 > l
		} else {
			yyb2579 = r.CheckBreak()
		}
		if yyb2579 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2579-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2587 := z.EncBinary()
		_ = yym2587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2588 := !z.EncBinary()
			yy2arr2588 := z.EncBasicHandle().StructToArray
			var yyq2588 [4]bool
			_, _, _ = yysep2588, yyq2588, yy2arr2588
			const yyr2588 bool = false
			yyq2588[0] = x.Kind != ""
			yyq2588[1] = x.APIVersion != ""
			yyq2588[2] = true
			var yynn2588 int
			if yyr2588 || yy2arr2588 {
				r.EncodeArrayStart(4)
			} else {
				yynn2588 = 1
				for _, b := range yyq2588 {
					if b {
						yynn2588++
					}
				}
				r.EncodeMapStart(yynn2588)
				yynn2588 = 0
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[0] {
					yym2590 := z.EncBinary()
					_ = yym2590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2588[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2591 := z.EncBinary()
					_ = yym2591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[1] {
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2588[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2588[2] {
					yy2596 := &x.ListMeta
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2596) {
					} else {
						z.EncFallback(yy2596)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2588[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2598 := &x.ListMeta
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2598) {
					} else {
						z.EncFallback(yy2598)
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2588 || yy2arr2588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2603 := z.DecBinary()
	_ = yym2603
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2604 := r.ContainerType()
		if yyct2604 == codecSelferValueTypeMap1234 {
			yyl2604 := r.ReadMapStart()
			if yyl2604 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2604, d)
			}
		} else if yyct2604 == codecSelferValueTypeArray1234 {
			yyl2604 := r.ReadArrayStart()
			if yyl2604 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2604, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2605Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2605Slc
	var yyhl2605 bool = l >= 0
	for yyj2605 := 0; ; yyj2605++ {
		if yyhl2605 {
			if yyj2605 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2605Slc = r.DecodeBytes(yys2605Slc, true, true)
		yys2605 := string(yys2605Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2605 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2608 := &x.ListMeta
				yym2609 := z.DecBinary()
				_ = yym2609
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2608) {
				} else {
					z.DecFallback(yyv2608, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2610 := &x.Items
				yym2611 := z.DecBinary()
				_ = yym2611
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2610), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2605)
		} // end switch yys2605
	} // end for yyj2605
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2612 int
	var yyb2612 bool
	var yyhl2612 bool = l >= 0
	yyj2612++
	if yyhl2612 {
		yyb2612 = yyj2612 > l
	} else {
		yyb2612 = r.CheckBreak()
	}
	if yyb2612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2612++
	if yyhl2612 {
		yyb2612 = yyj2612 > l
	} else {
		yyb2612 = r.CheckBreak()
	}
	if yyb2612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2612++
	if yyhl2612 {
		yyb2612 = yyj2612 > l
	} else {
		yyb2612 = r.CheckBreak()
	}
	if yyb2612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2615 := &x.ListMeta
		yym2616 := z.DecBinary()
		_ = yym2616
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2615) {
		} else {
			z.DecFallback(yyv2615, false)
		}
	}
	yyj2612++
	if yyhl2612 {
		yyb2612 = yyj2612 > l
	} else {
		yyb2612 = r.CheckBreak()
	}
	if yyb2612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2617 := &x.Items
		yym2618 := z.DecBinary()
		_ = yym2618
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2617), d)
		}
	}
	for {
		yyj2612++
		if yyhl2612 {
			yyb2612 = yyj2612 > l
		} else {
			yyb2612 = r.CheckBreak()
		}
		if yyb2612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2619 := z.EncBinary()
		_ = yym2619
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2620 := !z.EncBinary()
			yy2arr2620 := z.EncBasicHandle().StructToArray
			var yyq2620 [4]bool
			_, _, _ = yysep2620, yyq2620, yy2arr2620
			const yyr2620 bool = false
			yyq2620[0] = x.Kind != ""
			yyq2620[1] = x.APIVersion != ""
			yyq2620[2] = true
			var yynn2620 int
			if yyr2620 || yy2arr2620 {
				r.EncodeArrayStart(4)
			} else {
				yynn2620 = 1
				for _, b := range yyq2620 {
					if b {
						yynn2620++
					}
				}
				r.EncodeMapStart(yynn2620)
				yynn2620 = 0
			}
			if yyr2620 || yy2arr2620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2620[0] {
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2620[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2623 := z.EncBinary()
					_ = yym2623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2620[1] {
					yym2625 := z.EncBinary()
					_ = yym2625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2620[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2626 := z.EncBinary()
					_ = yym2626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2620[2] {
					yy2628 := &x.ObjectMeta
					yy2628.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2620[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2629 := &x.ObjectMeta
					yy2629.CodecEncodeSelf(e)
				}
			}
			if yyr2620 || yy2arr2620 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2631 := z.EncBinary()
					_ = yym2631
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2632 := z.EncBinary()
					_ = yym2632
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2620 || yy2arr2620 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2633 := z.DecBinary()
	_ = yym2633
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2634 := r.ContainerType()
		if yyct2634 == codecSelferValueTypeMap1234 {
			yyl2634 := r.ReadMapStart()
			if yyl2634 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2634, d)
			}
		} else if yyct2634 == codecSelferValueTypeArray1234 {
			yyl2634 := r.ReadArrayStart()
			if yyl2634 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2634, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2635Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2635Slc
	var yyhl2635 bool = l >= 0
	for yyj2635 := 0; ; yyj2635++ {
		if yyhl2635 {
			if yyj2635 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2635Slc = r.DecodeBytes(yys2635Slc, true, true)
		yys2635 := string(yys2635Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2635 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2638 := &x.ObjectMeta
				yyv2638.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2639 := &x.Subsets
				yym2640 := z.DecBinary()
				_ = yym2640
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2639), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2635)
		} // end switch yys2635
	} // end for yyj2635
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2641 int
	var yyb2641 bool
	var yyhl2641 bool = l >= 0
	yyj2641++
	if yyhl2641 {
		yyb2641 = yyj2641 > l
	} else {
		yyb2641 = r.CheckBreak()
	}
	if yyb2641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2641++
	if yyhl2641 {
		yyb2641 = yyj2641 > l
	} else {
		yyb2641 = r.CheckBreak()
	}
	if yyb2641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2641++
	if yyhl2641 {
		yyb2641 = yyj2641 > l
	} else {
		yyb2641 = r.CheckBreak()
	}
	if yyb2641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2644 := &x.ObjectMeta
		yyv2644.CodecDecodeSelf(d)
	}
	yyj2641++
	if yyhl2641 {
		yyb2641 = yyj2641 > l
	} else {
		yyb2641 = r.CheckBreak()
	}
	if yyb2641 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2645 := &x.Subsets
		yym2646 := z.DecBinary()
		_ = yym2646
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2645), d)
		}
	}
	for {
		yyj2641++
		if yyhl2641 {
			yyb2641 = yyj2641 > l
		} else {
			yyb2641 = r.CheckBreak()
		}
		if yyb2641 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2641-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2647 := z.EncBinary()
		_ = yym2647
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2648 := !z.EncBinary()
			yy2arr2648 := z.EncBasicHandle().StructToArray
			var yyq2648 [3]bool
			_, _, _ = yysep2648, yyq2648, yy2arr2648
			const yyr2648 bool = false
			var yynn2648 int
			if yyr2648 || yy2arr2648 {
				r.EncodeArrayStart(3)
			} else {
				yynn2648 = 3
				for _, b := range yyq2648 {
					if b {
						yynn2648++
					}
				}
				r.EncodeMapStart(yynn2648)
				yynn2648 = 0
			}
			if yyr2648 || yy2arr2648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2651 := z.EncBinary()
					_ = yym2651
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2648 || yy2arr2648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2653 := z.EncBinary()
					_ = yym2653
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2654 := z.EncBinary()
					_ = yym2654
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2648 || yy2arr2648 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2656 := z.EncBinary()
					_ = yym2656
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2657 := z.EncBinary()
					_ = yym2657
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2648 || yy2arr2648 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2658 := z.DecBinary()
	_ = yym2658
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2659 := r.ContainerType()
		if yyct2659 == codecSelferValueTypeMap1234 {
			yyl2659 := r.ReadMapStart()
			if yyl2659 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2659, d)
			}
		} else if yyct2659 == codecSelferValueTypeArray1234 {
			yyl2659 := r.ReadArrayStart()
			if yyl2659 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2659, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2660Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2660Slc
	var yyhl2660 bool = l >= 0
	for yyj2660 := 0; ; yyj2660++ {
		if yyhl2660 {
			if yyj2660 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2660Slc = r.DecodeBytes(yys2660Slc, true, true)
		yys2660 := string(yys2660Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2660 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2661 := &x.Addresses
				yym2662 := z.DecBinary()
				_ = yym2662
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2661), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2663 := &x.NotReadyAddresses
				yym2664 := z.DecBinary()
				_ = yym2664
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2663), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2665 := &x.Ports
				yym2666 := z.DecBinary()
				_ = yym2666
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2665), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2660)
		} // end switch yys2660
	} // end for yyj2660
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2667 int
	var yyb2667 bool
	var yyhl2667 bool = l >= 0
	yyj2667++
	if yyhl2667 {
		yyb2667 = yyj2667 > l
	} else {
		yyb2667 = r.CheckBreak()
	}
	if yyb2667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2668 := &x.Addresses
		yym2669 := z.DecBinary()
		_ = yym2669
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2668), d)
		}
	}
	yyj2667++
	if yyhl2667 {
		yyb2667 = yyj2667 > l
	} else {
		yyb2667 = r.CheckBreak()
	}
	if yyb2667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2670 := &x.NotReadyAddresses
		yym2671 := z.DecBinary()
		_ = yym2671
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2670), d)
		}
	}
	yyj2667++
	if yyhl2667 {
		yyb2667 = yyj2667 > l
	} else {
		yyb2667 = r.CheckBreak()
	}
	if yyb2667 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2672 := &x.Ports
		yym2673 := z.DecBinary()
		_ = yym2673
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2672), d)
		}
	}
	for {
		yyj2667++
		if yyhl2667 {
			yyb2667 = yyj2667 > l
		} else {
			yyb2667 = r.CheckBreak()
		}
		if yyb2667 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2667-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2674 := z.EncBinary()
		_ = yym2674
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2675 := !z.EncBinary()
			yy2arr2675 := z.EncBasicHandle().StructToArray
			var yyq2675 [3]bool
			_, _, _ = yysep2675, yyq2675, yy2arr2675
			const yyr2675 bool = false
			yyq2675[1] = x.Hostname != ""
			var yynn2675 int
			if yyr2675 || yy2arr2675 {
				r.EncodeArrayStart(3)
			} else {
				yynn2675 = 2
				for _, b := range yyq2675 {
					if b {
						yynn2675++
					}
				}
				r.EncodeMapStart(yynn2675)
				yynn2675 = 0
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2677 := z.EncBinary()
				_ = yym2677
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2678 := z.EncBinary()
				_ = yym2678
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2675[1] {
					yym2680 := z.EncBinary()
					_ = yym2680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2675[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2681 := z.EncBinary()
					_ = yym2681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2675 || yy2arr2675 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2683 := z.DecBinary()
	_ = yym2683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2684 := r.ContainerType()
		if yyct2684 == codecSelferValueTypeMap1234 {
			yyl2684 := r.ReadMapStart()
			if yyl2684 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2684, d)
			}
		} else if yyct2684 == codecSelferValueTypeArray1234 {
			yyl2684 := r.ReadArrayStart()
			if yyl2684 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2684, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2685Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2685Slc
	var yyhl2685 bool = l >= 0
	for yyj2685 := 0; ; yyj2685++ {
		if yyhl2685 {
			if yyj2685 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2685Slc = r.DecodeBytes(yys2685Slc, true, true)
		yys2685 := string(yys2685Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2685 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2685)
		} // end switch yys2685
	} // end for yyj2685
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2689 int
	var yyb2689 bool
	var yyhl2689 bool = l >= 0
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2689++
		if yyhl2689 {
			yyb2689 = yyj2689 > l
		} else {
			yyb2689 = r.CheckBreak()
		}
		if yyb2689 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2689-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2693 := z.EncBinary()
		_ = yym2693
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2694 := !z.EncBinary()
			yy2arr2694 := z.EncBasicHandle().StructToArray
			var yyq2694 [3]bool
			_, _, _ = yysep2694, yyq2694, yy2arr2694
			const yyr2694 bool = false
			var yynn2694 int
			if yyr2694 || yy2arr2694 {
				r.EncodeArrayStart(3)
			} else {
				yynn2694 = 3
				for _, b := range yyq2694 {
					if b {
						yynn2694++
					}
				}
				r.EncodeMapStart(yynn2694)
				yynn2694 = 0
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2696 := z.EncBinary()
				_ = yym2696
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2697 := z.EncBinary()
				_ = yym2697
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2699 := z.EncBinary()
				_ = yym2699
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2700 := z.EncBinary()
				_ = yym2700
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2702 := z.DecBinary()
	_ = yym2702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2703 := r.ContainerType()
		if yyct2703 == codecSelferValueTypeMap1234 {
			yyl2703 := r.ReadMapStart()
			if yyl2703 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2703, d)
			}
		} else if yyct2703 == codecSelferValueTypeArray1234 {
			yyl2703 := r.ReadArrayStart()
			if yyl2703 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2704Slc
	var yyhl2704 bool = l >= 0
	for yyj2704 := 0; ; yyj2704++ {
		if yyhl2704 {
			if yyj2704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2704Slc = r.DecodeBytes(yys2704Slc, true, true)
		yys2704 := string(yys2704Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2704 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2704)
		} // end switch yys2704
	} // end for yyj2704
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2708 int
	var yyb2708 bool
	var yyhl2708 bool = l >= 0
	yyj2708++
	if yyhl2708 {
		yyb2708 = yyj2708 > l
	} else {
		yyb2708 = r.CheckBreak()
	}
	if yyb2708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2708++
	if yyhl2708 {
		yyb2708 = yyj2708 > l
	} else {
		yyb2708 = r.CheckBreak()
	}
	if yyb2708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2708++
	if yyhl2708 {
		yyb2708 = yyj2708 > l
	} else {
		yyb2708 = r.CheckBreak()
	}
	if yyb2708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2708++
		if yyhl2708 {
			yyb2708 = yyj2708 > l
		} else {
			yyb2708 = r.CheckBreak()
		}
		if yyb2708 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2708-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2712 := z.EncBinary()
		_ = yym2712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2713 := !z.EncBinary()
			yy2arr2713 := z.EncBasicHandle().StructToArray
			var yyq2713 [4]bool
			_, _, _ = yysep2713, yyq2713, yy2arr2713
			const yyr2713 bool = false
			yyq2713[0] = x.Kind != ""
			yyq2713[1] = x.APIVersion != ""
			yyq2713[2] = true
			var yynn2713 int
			if yyr2713 || yy2arr2713 {
				r.EncodeArrayStart(4)
			} else {
				yynn2713 = 1
				for _, b := range yyq2713 {
					if b {
						yynn2713++
					}
				}
				r.EncodeMapStart(yynn2713)
				yynn2713 = 0
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2713[0] {
					yym2715 := z.EncBinary()
					_ = yym2715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2713[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2716 := z.EncBinary()
					_ = yym2716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2713[1] {
					yym2718 := z.EncBinary()
					_ = yym2718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2713[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2719 := z.EncBinary()
					_ = yym2719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2713[2] {
					yy2721 := &x.ListMeta
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2721) {
					} else {
						z.EncFallback(yy2721)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2713[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2723 := &x.ListMeta
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2723) {
					} else {
						z.EncFallback(yy2723)
					}
				}
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2726 := z.EncBinary()
					_ = yym2726
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2713 || yy2arr2713 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2728 := z.DecBinary()
	_ = yym2728
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2729 := r.ContainerType()
		if yyct2729 == codecSelferValueTypeMap1234 {
			yyl2729 := r.ReadMapStart()
			if yyl2729 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2729, d)
			}
		} else if yyct2729 == codecSelferValueTypeArray1234 {
			yyl2729 := r.ReadArrayStart()
			if yyl2729 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2729, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2730Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2730Slc
	var yyhl2730 bool = l >= 0
	for yyj2730 := 0; ; yyj2730++ {
		if yyhl2730 {
			if yyj2730 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2730Slc = r.DecodeBytes(yys2730Slc, true, true)
		yys2730 := string(yys2730Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2730 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2733 := &x.ListMeta
				yym2734 := z.DecBinary()
				_ = yym2734
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2733) {
				} else {
					z.DecFallback(yyv2733, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2735 := &x.Items
				yym2736 := z.DecBinary()
				_ = yym2736
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2735), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2730)
		} // end switch yys2730
	} // end for yyj2730
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2737 int
	var yyb2737 bool
	var yyhl2737 bool = l >= 0
	yyj2737++
	if yyhl2737 {
		yyb2737 = yyj2737 > l
	} else {
		yyb2737 = r.CheckBreak()
	}
	if yyb2737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2737++
	if yyhl2737 {
		yyb2737 = yyj2737 > l
	} else {
		yyb2737 = r.CheckBreak()
	}
	if yyb2737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2737++
	if yyhl2737 {
		yyb2737 = yyj2737 > l
	} else {
		yyb2737 = r.CheckBreak()
	}
	if yyb2737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2740 := &x.ListMeta
		yym2741 := z.DecBinary()
		_ = yym2741
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2740) {
		} else {
			z.DecFallback(yyv2740, false)
		}
	}
	yyj2737++
	if yyhl2737 {
		yyb2737 = yyj2737 > l
	} else {
		yyb2737 = r.CheckBreak()
	}
	if yyb2737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2742 := &x.Items
		yym2743 := z.DecBinary()
		_ = yym2743
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2742), d)
		}
	}
	for {
		yyj2737++
		if yyhl2737 {
			yyb2737 = yyj2737 > l
		} else {
			yyb2737 = r.CheckBreak()
		}
		if yyb2737 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2737-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2744 := z.EncBinary()
		_ = yym2744
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2745 := !z.EncBinary()
			yy2arr2745 := z.EncBasicHandle().StructToArray
			var yyq2745 [4]bool
			_, _, _ = yysep2745, yyq2745, yy2arr2745
			const yyr2745 bool = false
			yyq2745[0] = x.PodCIDR != ""
			yyq2745[1] = x.ExternalID != ""
			yyq2745[2] = x.ProviderID != ""
			yyq2745[3] = x.Unschedulable != false
			var yynn2745 int
			if yyr2745 || yy2arr2745 {
				r.EncodeArrayStart(4)
			} else {
				yynn2745 = 0
				for _, b := range yyq2745 {
					if b {
						yynn2745++
					}
				}
				r.EncodeMapStart(yynn2745)
				yynn2745 = 0
			}
			if yyr2745 || yy2arr2745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2745[0] {
					yym2747 := z.EncBinary()
					_ = yym2747
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2745[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2748 := z.EncBinary()
					_ = yym2748
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2745[1] {
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2745[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2745[2] {
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2745[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2745[3] {
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2745[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2757 := z.EncBinary()
					_ = yym2757
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2745 || yy2arr2745 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2758 := z.DecBinary()
	_ = yym2758
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2759 := r.ContainerType()
		if yyct2759 == codecSelferValueTypeMap1234 {
			yyl2759 := r.ReadMapStart()
			if yyl2759 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2759, d)
			}
		} else if yyct2759 == codecSelferValueTypeArray1234 {
			yyl2759 := r.ReadArrayStart()
			if yyl2759 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2759, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2760Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2760Slc
	var yyhl2760 bool = l >= 0
	for yyj2760 := 0; ; yyj2760++ {
		if yyhl2760 {
			if yyj2760 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2760Slc = r.DecodeBytes(yys2760Slc, true, true)
		yys2760 := string(yys2760Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2760 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2760)
		} // end switch yys2760
	} // end for yyj2760
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2765 int
	var yyb2765 bool
	var yyhl2765 bool = l >= 0
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2765++
	if yyhl2765 {
		yyb2765 = yyj2765 > l
	} else {
		yyb2765 = r.CheckBreak()
	}
	if yyb2765 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2765++
		if yyhl2765 {
			yyb2765 = yyj2765 > l
		} else {
			yyb2765 = r.CheckBreak()
		}
		if yyb2765 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2765-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2770 := z.EncBinary()
		_ = yym2770
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2771 := !z.EncBinary()
			yy2arr2771 := z.EncBasicHandle().StructToArray
			var yyq2771 [1]bool
			_, _, _ = yysep2771, yyq2771, yy2arr2771
			const yyr2771 bool = false
			var yynn2771 int
			if yyr2771 || yy2arr2771 {
				r.EncodeArrayStart(1)
			} else {
				yynn2771 = 1
				for _, b := range yyq2771 {
					if b {
						yynn2771++
					}
				}
				r.EncodeMapStart(yynn2771)
				yynn2771 = 0
			}
			if yyr2771 || yy2arr2771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2773 := z.EncBinary()
				_ = yym2773
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2774 := z.EncBinary()
				_ = yym2774
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2771 || yy2arr2771 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2775 := z.DecBinary()
	_ = yym2775
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2776 := r.ContainerType()
		if yyct2776 == codecSelferValueTypeMap1234 {
			yyl2776 := r.ReadMapStart()
			if yyl2776 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2776, d)
			}
		} else if yyct2776 == codecSelferValueTypeArray1234 {
			yyl2776 := r.ReadArrayStart()
			if yyl2776 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2776, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2777Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2777Slc
	var yyhl2777 bool = l >= 0
	for yyj2777 := 0; ; yyj2777++ {
		if yyhl2777 {
			if yyj2777 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2777Slc = r.DecodeBytes(yys2777Slc, true, true)
		yys2777 := string(yys2777Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2777 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2777)
		} // end switch yys2777
	} // end for yyj2777
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2779 int
	var yyb2779 bool
	var yyhl2779 bool = l >= 0
	yyj2779++
	if yyhl2779 {
		yyb2779 = yyj2779 > l
	} else {
		yyb2779 = r.CheckBreak()
	}
	if yyb2779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2779++
		if yyhl2779 {
			yyb2779 = yyj2779 > l
		} else {
			yyb2779 = r.CheckBreak()
		}
		if yyb2779 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2779-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2781 := z.EncBinary()
		_ = yym2781
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2782 := !z.EncBinary()
			yy2arr2782 := z.EncBasicHandle().StructToArray
			var yyq2782 [1]bool
			_, _, _ = yysep2782, yyq2782, yy2arr2782
			const yyr2782 bool = false
			yyq2782[0] = true
			var yynn2782 int
			if yyr2782 || yy2arr2782 {
				r.EncodeArrayStart(1)
			} else {
				yynn2782 = 0
				for _, b := range yyq2782 {
					if b {
						yynn2782++
					}
				}
				r.EncodeMapStart(yynn2782)
				yynn2782 = 0
			}
			if yyr2782 || yy2arr2782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2782[0] {
					yy2784 := &x.KubeletEndpoint
					yy2784.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2782[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2785 := &x.KubeletEndpoint
					yy2785.CodecEncodeSelf(e)
				}
			}
			if yyr2782 || yy2arr2782 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2786 := z.DecBinary()
	_ = yym2786
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2787 := r.ContainerType()
		if yyct2787 == codecSelferValueTypeMap1234 {
			yyl2787 := r.ReadMapStart()
			if yyl2787 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2787, d)
			}
		} else if yyct2787 == codecSelferValueTypeArray1234 {
			yyl2787 := r.ReadArrayStart()
			if yyl2787 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2787, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2788Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2788Slc
	var yyhl2788 bool = l >= 0
	for yyj2788 := 0; ; yyj2788++ {
		if yyhl2788 {
			if yyj2788 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2788Slc = r.DecodeBytes(yys2788Slc, true, true)
		yys2788 := string(yys2788Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2788 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2789 := &x.KubeletEndpoint
				yyv2789.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2788)
		} // end switch yys2788
	} // end for yyj2788
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2790 int
	var yyb2790 bool
	var yyhl2790 bool = l >= 0
	yyj2790++
	if yyhl2790 {
		yyb2790 = yyj2790 > l
	} else {
		yyb2790 = r.CheckBreak()
	}
	if yyb2790 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2791 := &x.KubeletEndpoint
		yyv2791.CodecDecodeSelf(d)
	}
	for {
		yyj2790++
		if yyhl2790 {
			yyb2790 = yyj2790 > l
		} else {
			yyb2790 = r.CheckBreak()
		}
		if yyb2790 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2790-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2792 := z.EncBinary()
		_ = yym2792
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2793 := !z.EncBinary()
			yy2arr2793 := z.EncBasicHandle().StructToArray
			var yyq2793 [10]bool
			_, _, _ = yysep2793, yyq2793, yy2arr2793
			const yyr2793 bool = false
			var yynn2793 int
			if yyr2793 || yy2arr2793 {
				r.EncodeArrayStart(10)
			} else {
				yynn2793 = 10
				for _, b := range yyq2793 {
					if b {
						yynn2793++
					}
				}
				r.EncodeMapStart(yynn2793)
				yynn2793 = 0
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2795 := z.EncBinary()
				_ = yym2795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2796 := z.EncBinary()
				_ = yym2796
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2798 := z.EncBinary()
				_ = yym2798
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2799 := z.EncBinary()
				_ = yym2799
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2801 := z.EncBinary()
				_ = yym2801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2802 := z.EncBinary()
				_ = yym2802
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2804 := z.EncBinary()
				_ = yym2804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2805 := z.EncBinary()
				_ = yym2805
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2807 := z.EncBinary()
				_ = yym2807
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2808 := z.EncBinary()
				_ = yym2808
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2810 := z.EncBinary()
				_ = yym2810
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2811 := z.EncBinary()
				_ = yym2811
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2813 := z.EncBinary()
				_ = yym2813
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2814 := z.EncBinary()
				_ = yym2814
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2816 := z.EncBinary()
				_ = yym2816
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2817 := z.EncBinary()
				_ = yym2817
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2819 := z.EncBinary()
				_ = yym2819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2820 := z.EncBinary()
				_ = yym2820
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2822 := z.EncBinary()
				_ = yym2822
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2823 := z.EncBinary()
				_ = yym2823
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2793 || yy2arr2793 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2824 := z.DecBinary()
	_ = yym2824
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2825 := r.ContainerType()
		if yyct2825 == codecSelferValueTypeMap1234 {
			yyl2825 := r.ReadMapStart()
			if yyl2825 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2825, d)
			}
		} else if yyct2825 == codecSelferValueTypeArray1234 {
			yyl2825 := r.ReadArrayStart()
			if yyl2825 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2825, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2826Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2826Slc
	var yyhl2826 bool = l >= 0
	for yyj2826 := 0; ; yyj2826++ {
		if yyhl2826 {
			if yyj2826 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2826Slc = r.DecodeBytes(yys2826Slc, true, true)
		yys2826 := string(yys2826Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2826 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2826)
		} // end switch yys2826
	} // end for yyj2826
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2837 int
	var yyb2837 bool
	var yyhl2837 bool = l >= 0
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2837++
	if yyhl2837 {
		yyb2837 = yyj2837 > l
	} else {
		yyb2837 = r.CheckBreak()
	}
	if yyb2837 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2837++
		if yyhl2837 {
			yyb2837 = yyj2837 > l
		} else {
			yyb2837 = r.CheckBreak()
		}
		if yyb2837 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2837-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2848 := z.EncBinary()
		_ = yym2848
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2849 := !z.EncBinary()
			yy2arr2849 := z.EncBasicHandle().StructToArray
			var yyq2849 [10]bool
			_, _, _ = yysep2849, yyq2849, yy2arr2849
			const yyr2849 bool = false
			yyq2849[0] = len(x.Capacity) != 0
			yyq2849[1] = len(x.Allocatable) != 0
			yyq2849[2] = x.Phase != ""
			yyq2849[3] = len(x.Conditions) != 0
			yyq2849[4] = len(x.Addresses) != 0
			yyq2849[5] = true
			yyq2849[6] = true
			yyq2849[7] = len(x.Images) != 0
			yyq2849[8] = len(x.VolumesInUse) != 0
			yyq2849[9] = len(x.VolumesAttached) != 0
			var yynn2849 int
			if yyr2849 || yy2arr2849 {
				r.EncodeArrayStart(10)
			} else {
				yynn2849 = 0
				for _, b := range yyq2849 {
					if b {
						yynn2849++
					}
				}
				r.EncodeMapStart(yynn2849)
				yynn2849 = 0
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2849[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2849[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2849[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2849[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2849[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2849[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2849[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2854 := z.EncBinary()
						_ = yym2854
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2849[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2855 := z.EncBinary()
						_ = yym2855
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2849[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2857 := z.EncBinary()
						_ = yym2857
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2849[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2858 := z.EncBinary()
						_ = yym2858
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2849[5] {
					yy2860 := &x.DaemonEndpoints
					yy2860.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2849[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2861 := &x.DaemonEndpoints
					yy2861.CodecEncodeSelf(e)
				}
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2849[6] {
					yy2863 := &x.NodeInfo
					yy2863.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2849[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2864 := &x.NodeInfo
					yy2864.CodecEncodeSelf(e)
				}
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2849[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2866 := z.EncBinary()
						_ = yym2866
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2849[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2867 := z.EncBinary()
						_ = yym2867
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2849[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2869 := z.EncBinary()
						_ = yym2869
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2849[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2870 := z.EncBinary()
						_ = yym2870
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2849[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2872 := z.EncBinary()
						_ = yym2872
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2849[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2873 := z.EncBinary()
						_ = yym2873
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2849 || yy2arr2849 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2874 := z.DecBinary()
	_ = yym2874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2875 := r.ContainerType()
		if yyct2875 == codecSelferValueTypeMap1234 {
			yyl2875 := r.ReadMapStart()
			if yyl2875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2875, d)
			}
		} else if yyct2875 == codecSelferValueTypeArray1234 {
			yyl2875 := r.ReadArrayStart()
			if yyl2875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2876Slc
	var yyhl2876 bool = l >= 0
	for yyj2876 := 0; ; yyj2876++ {
		if yyhl2876 {
			if yyj2876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2876Slc = r.DecodeBytes(yys2876Slc, true, true)
		yys2876 := string(yys2876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2876 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2877 := &x.Capacity
				yyv2877.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2878 := &x.Allocatable
				yyv2878.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2880 := &x.Conditions
				yym2881 := z.DecBinary()
				_ = yym2881
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2880), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2882 := &x.Addresses
				yym2883 := z.DecBinary()
				_ = yym2883
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2882), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2884 := &x.DaemonEndpoints
				yyv2884.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2885 := &x.NodeInfo
				yyv2885.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2886 := &x.Images
				yym2887 := z.DecBinary()
				_ = yym2887
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2886), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2888 := &x.VolumesInUse
				yym2889 := z.DecBinary()
				_ = yym2889
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2888), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2890 := &x.VolumesAttached
				yym2891 := z.DecBinary()
				_ = yym2891
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2890), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2876)
		} // end switch yys2876
	} // end for yyj2876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2892 int
	var yyb2892 bool
	var yyhl2892 bool = l >= 0
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2893 := &x.Capacity
		yyv2893.CodecDecodeSelf(d)
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2894 := &x.Allocatable
		yyv2894.CodecDecodeSelf(d)
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2896 := &x.Conditions
		yym2897 := z.DecBinary()
		_ = yym2897
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2896), d)
		}
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2898 := &x.Addresses
		yym2899 := z.DecBinary()
		_ = yym2899
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2898), d)
		}
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2900 := &x.DaemonEndpoints
		yyv2900.CodecDecodeSelf(d)
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2901 := &x.NodeInfo
		yyv2901.CodecDecodeSelf(d)
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2902 := &x.Images
		yym2903 := z.DecBinary()
		_ = yym2903
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2902), d)
		}
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv2904 := &x.VolumesInUse
		yym2905 := z.DecBinary()
		_ = yym2905
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2904), d)
		}
	}
	yyj2892++
	if yyhl2892 {
		yyb2892 = yyj2892 > l
	} else {
		yyb2892 = r.CheckBreak()
	}
	if yyb2892 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv2906 := &x.VolumesAttached
		yym2907 := z.DecBinary()
		_ = yym2907
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2906), d)
		}
	}
	for {
		yyj2892++
		if yyhl2892 {
			yyb2892 = yyj2892 > l
		} else {
			yyb2892 = r.CheckBreak()
		}
		if yyb2892 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2892-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2908 := z.EncBinary()
	_ = yym2908
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2909 := z.DecBinary()
	_ = yym2909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2910 := z.EncBinary()
		_ = yym2910
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2911 := !z.EncBinary()
			yy2arr2911 := z.EncBasicHandle().StructToArray
			var yyq2911 [2]bool
			_, _, _ = yysep2911, yyq2911, yy2arr2911
			const yyr2911 bool = false
			var yynn2911 int
			if yyr2911 || yy2arr2911 {
				r.EncodeArrayStart(2)
			} else {
				yynn2911 = 2
				for _, b := range yyq2911 {
					if b {
						yynn2911++
					}
				}
				r.EncodeMapStart(yynn2911)
				yynn2911 = 0
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2914 := z.EncBinary()
				_ = yym2914
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2915 := z.EncBinary()
				_ = yym2915
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr2911 || yy2arr2911 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2916 := z.DecBinary()
	_ = yym2916
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2917 := r.ContainerType()
		if yyct2917 == codecSelferValueTypeMap1234 {
			yyl2917 := r.ReadMapStart()
			if yyl2917 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2917, d)
			}
		} else if yyct2917 == codecSelferValueTypeArray1234 {
			yyl2917 := r.ReadArrayStart()
			if yyl2917 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2917, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2918Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2918Slc
	var yyhl2918 bool = l >= 0
	for yyj2918 := 0; ; yyj2918++ {
		if yyhl2918 {
			if yyj2918 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2918Slc = r.DecodeBytes(yys2918Slc, true, true)
		yys2918 := string(yys2918Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2918 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2918)
		} // end switch yys2918
	} // end for yyj2918
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2921 int
	var yyb2921 bool
	var yyhl2921 bool = l >= 0
	yyj2921++
	if yyhl2921 {
		yyb2921 = yyj2921 > l
	} else {
		yyb2921 = r.CheckBreak()
	}
	if yyb2921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj2921++
	if yyhl2921 {
		yyb2921 = yyj2921 > l
	} else {
		yyb2921 = r.CheckBreak()
	}
	if yyb2921 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj2921++
		if yyhl2921 {
			yyb2921 = yyj2921 > l
		} else {
			yyb2921 = r.CheckBreak()
		}
		if yyb2921 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2921-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2924 := z.EncBinary()
		_ = yym2924
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2925 := !z.EncBinary()
			yy2arr2925 := z.EncBasicHandle().StructToArray
			var yyq2925 [1]bool
			_, _, _ = yysep2925, yyq2925, yy2arr2925
			const yyr2925 bool = false
			yyq2925[0] = len(x.PreferAvoidPods) != 0
			var yynn2925 int
			if yyr2925 || yy2arr2925 {
				r.EncodeArrayStart(1)
			} else {
				yynn2925 = 0
				for _, b := range yyq2925 {
					if b {
						yynn2925++
					}
				}
				r.EncodeMapStart(yynn2925)
				yynn2925 = 0
			}
			if yyr2925 || yy2arr2925 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2925[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2927 := z.EncBinary()
						_ = yym2927
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2925[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym2928 := z.EncBinary()
						_ = yym2928
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr2925 || yy2arr2925 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2929 := z.DecBinary()
	_ = yym2929
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2930 := r.ContainerType()
		if yyct2930 == codecSelferValueTypeMap1234 {
			yyl2930 := r.ReadMapStart()
			if yyl2930 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2930, d)
			}
		} else if yyct2930 == codecSelferValueTypeArray1234 {
			yyl2930 := r.ReadArrayStart()
			if yyl2930 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2930, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2931Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2931Slc
	var yyhl2931 bool = l >= 0
	for yyj2931 := 0; ; yyj2931++ {
		if yyhl2931 {
			if yyj2931 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2931Slc = r.DecodeBytes(yys2931Slc, true, true)
		yys2931 := string(yys2931Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2931 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv2932 := &x.PreferAvoidPods
				yym2933 := z.DecBinary()
				_ = yym2933
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2932), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2931)
		} // end switch yys2931
	} // end for yyj2931
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2934 int
	var yyb2934 bool
	var yyhl2934 bool = l >= 0
	yyj2934++
	if yyhl2934 {
		yyb2934 = yyj2934 > l
	} else {
		yyb2934 = r.CheckBreak()
	}
	if yyb2934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv2935 := &x.PreferAvoidPods
		yym2936 := z.DecBinary()
		_ = yym2936
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv2935), d)
		}
	}
	for {
		yyj2934++
		if yyhl2934 {
			yyb2934 = yyj2934 > l
		} else {
			yyb2934 = r.CheckBreak()
		}
		if yyb2934 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2934-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2937 := z.EncBinary()
		_ = yym2937
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2938 := !z.EncBinary()
			yy2arr2938 := z.EncBasicHandle().StructToArray
			var yyq2938 [4]bool
			_, _, _ = yysep2938, yyq2938, yy2arr2938
			const yyr2938 bool = false
			yyq2938[1] = true
			yyq2938[2] = x.Reason != ""
			yyq2938[3] = x.Message != ""
			var yynn2938 int
			if yyr2938 || yy2arr2938 {
				r.EncodeArrayStart(4)
			} else {
				yynn2938 = 1
				for _, b := range yyq2938 {
					if b {
						yynn2938++
					}
				}
				r.EncodeMapStart(yynn2938)
				yynn2938 = 0
			}
			if yyr2938 || yy2arr2938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2940 := &x.PodSignature
				yy2940.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2941 := &x.PodSignature
				yy2941.CodecEncodeSelf(e)
			}
			if yyr2938 || yy2arr2938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2938[1] {
					yy2943 := &x.EvictionTime
					yym2944 := z.EncBinary()
					_ = yym2944
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2943) {
					} else if yym2944 {
						z.EncBinaryMarshal(yy2943)
					} else if !yym2944 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2943)
					} else {
						z.EncFallback(yy2943)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2938[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2945 := &x.EvictionTime
					yym2946 := z.EncBinary()
					_ = yym2946
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2945) {
					} else if yym2946 {
						z.EncBinaryMarshal(yy2945)
					} else if !yym2946 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2945)
					} else {
						z.EncFallback(yy2945)
					}
				}
			}
			if yyr2938 || yy2arr2938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2938[2] {
					yym2948 := z.EncBinary()
					_ = yym2948
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2938[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2949 := z.EncBinary()
					_ = yym2949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2938 || yy2arr2938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2938[3] {
					yym2951 := z.EncBinary()
					_ = yym2951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2938[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2952 := z.EncBinary()
					_ = yym2952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2938 || yy2arr2938 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2953 := z.DecBinary()
	_ = yym2953
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2954 := r.ContainerType()
		if yyct2954 == codecSelferValueTypeMap1234 {
			yyl2954 := r.ReadMapStart()
			if yyl2954 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2954, d)
			}
		} else if yyct2954 == codecSelferValueTypeArray1234 {
			yyl2954 := r.ReadArrayStart()
			if yyl2954 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2954, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2955Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2955Slc
	var yyhl2955 bool = l >= 0
	for yyj2955 := 0; ; yyj2955++ {
		if yyhl2955 {
			if yyj2955 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2955Slc = r.DecodeBytes(yys2955Slc, true, true)
		yys2955 := string(yys2955Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2955 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv2956 := &x.PodSignature
				yyv2956.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv2957 := &x.EvictionTime
				yym2958 := z.DecBinary()
				_ = yym2958
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2957) {
				} else if yym2958 {
					z.DecBinaryUnmarshal(yyv2957)
				} else if !yym2958 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2957)
				} else {
					z.DecFallback(yyv2957, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2955)
		} // end switch yys2955
	} // end for yyj2955
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2961 int
	var yyb2961 bool
	var yyhl2961 bool = l >= 0
	yyj2961++
	if yyhl2961 {
		yyb2961 = yyj2961 > l
	} else {
		yyb2961 = r.CheckBreak()
	}
	if yyb2961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv2962 := &x.PodSignature
		yyv2962.CodecDecodeSelf(d)
	}
	yyj2961++
	if yyhl2961 {
		yyb2961 = yyj2961 > l
	} else {
		yyb2961 = r.CheckBreak()
	}
	if yyb2961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv2963 := &x.EvictionTime
		yym2964 := z.DecBinary()
		_ = yym2964
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2963) {
		} else if yym2964 {
			z.DecBinaryUnmarshal(yyv2963)
		} else if !yym2964 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2963)
		} else {
			z.DecFallback(yyv2963, false)
		}
	}
	yyj2961++
	if yyhl2961 {
		yyb2961 = yyj2961 > l
	} else {
		yyb2961 = r.CheckBreak()
	}
	if yyb2961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2961++
	if yyhl2961 {
		yyb2961 = yyj2961 > l
	} else {
		yyb2961 = r.CheckBreak()
	}
	if yyb2961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2961++
		if yyhl2961 {
			yyb2961 = yyj2961 > l
		} else {
			yyb2961 = r.CheckBreak()
		}
		if yyb2961 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2961-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2967 := z.EncBinary()
		_ = yym2967
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2968 := !z.EncBinary()
			yy2arr2968 := z.EncBasicHandle().StructToArray
			var yyq2968 [1]bool
			_, _, _ = yysep2968, yyq2968, yy2arr2968
			const yyr2968 bool = false
			yyq2968[0] = x.PodController != nil
			var yynn2968 int
			if yyr2968 || yy2arr2968 {
				r.EncodeArrayStart(1)
			} else {
				yynn2968 = 0
				for _, b := range yyq2968 {
					if b {
						yynn2968++
					}
				}
				r.EncodeMapStart(yynn2968)
				yynn2968 = 0
			}
			if yyr2968 || yy2arr2968 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2968[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2968[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2968 || yy2arr2968 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2970 := z.DecBinary()
	_ = yym2970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2971 := r.ContainerType()
		if yyct2971 == codecSelferValueTypeMap1234 {
			yyl2971 := r.ReadMapStart()
			if yyl2971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2971, d)
			}
		} else if yyct2971 == codecSelferValueTypeArray1234 {
			yyl2971 := r.ReadArrayStart()
			if yyl2971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2972Slc
	var yyhl2972 bool = l >= 0
	for yyj2972 := 0; ; yyj2972++ {
		if yyhl2972 {
			if yyj2972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2972Slc = r.DecodeBytes(yys2972Slc, true, true)
		yys2972 := string(yys2972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2972 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2972)
		} // end switch yys2972
	} // end for yyj2972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2974 int
	var yyb2974 bool
	var yyhl2974 bool = l >= 0
	yyj2974++
	if yyhl2974 {
		yyb2974 = yyj2974 > l
	} else {
		yyb2974 = r.CheckBreak()
	}
	if yyb2974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj2974++
		if yyhl2974 {
			yyb2974 = yyj2974 > l
		} else {
			yyb2974 = r.CheckBreak()
		}
		if yyb2974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2976 := z.EncBinary()
		_ = yym2976
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2977 := !z.EncBinary()
			yy2arr2977 := z.EncBasicHandle().StructToArray
			var yyq2977 [2]bool
			_, _, _ = yysep2977, yyq2977, yy2arr2977
			const yyr2977 bool = false
			yyq2977[1] = x.SizeBytes != 0
			var yynn2977 int
			if yyr2977 || yy2arr2977 {
				r.EncodeArrayStart(2)
			} else {
				yynn2977 = 1
				for _, b := range yyq2977 {
					if b {
						yynn2977++
					}
				}
				r.EncodeMapStart(yynn2977)
				yynn2977 = 0
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2979 := z.EncBinary()
					_ = yym2979
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym2980 := z.EncBinary()
					_ = yym2980
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2977[1] {
					yym2982 := z.EncBinary()
					_ = yym2982
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2977[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr2977 || yy2arr2977 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2984 := z.DecBinary()
	_ = yym2984
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2985 := r.ContainerType()
		if yyct2985 == codecSelferValueTypeMap1234 {
			yyl2985 := r.ReadMapStart()
			if yyl2985 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2985, d)
			}
		} else if yyct2985 == codecSelferValueTypeArray1234 {
			yyl2985 := r.ReadArrayStart()
			if yyl2985 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2985, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2986Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2986Slc
	var yyhl2986 bool = l >= 0
	for yyj2986 := 0; ; yyj2986++ {
		if yyhl2986 {
			if yyj2986 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2986Slc = r.DecodeBytes(yys2986Slc, true, true)
		yys2986 := string(yys2986Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2986 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv2987 := &x.Names
				yym2988 := z.DecBinary()
				_ = yym2988
				if false {
				} else {
					z.F.DecSliceStringX(yyv2987, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2986)
		} // end switch yys2986
	} // end for yyj2986
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2990 int
	var yyb2990 bool
	var yyhl2990 bool = l >= 0
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv2991 := &x.Names
		yym2992 := z.DecBinary()
		_ = yym2992
		if false {
		} else {
			z.F.DecSliceStringX(yyv2991, false, d)
		}
	}
	yyj2990++
	if yyhl2990 {
		yyb2990 = yyj2990 > l
	} else {
		yyb2990 = r.CheckBreak()
	}
	if yyb2990 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj2990++
		if yyhl2990 {
			yyb2990 = yyj2990 > l
		} else {
			yyb2990 = r.CheckBreak()
		}
		if yyb2990 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2990-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2994 := z.EncBinary()
	_ = yym2994
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2995 := z.DecBinary()
	_ = yym2995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2996 := z.EncBinary()
	_ = yym2996
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2997 := z.DecBinary()
	_ = yym2997
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2998 := z.EncBinary()
		_ = yym2998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2999 := !z.EncBinary()
			yy2arr2999 := z.EncBasicHandle().StructToArray
			var yyq2999 [6]bool
			_, _, _ = yysep2999, yyq2999, yy2arr2999
			const yyr2999 bool = false
			yyq2999[2] = true
			yyq2999[3] = true
			yyq2999[4] = x.Reason != ""
			yyq2999[5] = x.Message != ""
			var yynn2999 int
			if yyr2999 || yy2arr2999 {
				r.EncodeArrayStart(6)
			} else {
				yynn2999 = 2
				for _, b := range yyq2999 {
					if b {
						yynn2999++
					}
				}
				r.EncodeMapStart(yynn2999)
				yynn2999 = 0
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2999[2] {
					yy3003 := &x.LastHeartbeatTime
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3003) {
					} else if yym3004 {
						z.EncBinaryMarshal(yy3003)
					} else if !yym3004 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3003)
					} else {
						z.EncFallback(yy3003)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2999[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3005 := &x.LastHeartbeatTime
					yym3006 := z.EncBinary()
					_ = yym3006
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3005) {
					} else if yym3006 {
						z.EncBinaryMarshal(yy3005)
					} else if !yym3006 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3005)
					} else {
						z.EncFallback(yy3005)
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2999[3] {
					yy3008 := &x.LastTransitionTime
					yym3009 := z.EncBinary()
					_ = yym3009
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3008) {
					} else if yym3009 {
						z.EncBinaryMarshal(yy3008)
					} else if !yym3009 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3008)
					} else {
						z.EncFallback(yy3008)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2999[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3010 := &x.LastTransitionTime
					yym3011 := z.EncBinary()
					_ = yym3011
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3010) {
					} else if yym3011 {
						z.EncBinaryMarshal(yy3010)
					} else if !yym3011 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3010)
					} else {
						z.EncFallback(yy3010)
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2999[4] {
					yym3013 := z.EncBinary()
					_ = yym3013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2999[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3014 := z.EncBinary()
					_ = yym3014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2999[5] {
					yym3016 := z.EncBinary()
					_ = yym3016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2999[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3017 := z.EncBinary()
					_ = yym3017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2999 || yy2arr2999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3018 := z.DecBinary()
	_ = yym3018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3019 := r.ContainerType()
		if yyct3019 == codecSelferValueTypeMap1234 {
			yyl3019 := r.ReadMapStart()
			if yyl3019 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3019, d)
			}
		} else if yyct3019 == codecSelferValueTypeArray1234 {
			yyl3019 := r.ReadArrayStart()
			if yyl3019 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3019, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3020Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3020Slc
	var yyhl3020 bool = l >= 0
	for yyj3020 := 0; ; yyj3020++ {
		if yyhl3020 {
			if yyj3020 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3020Slc = r.DecodeBytes(yys3020Slc, true, true)
		yys3020 := string(yys3020Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3020 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3023 := &x.LastHeartbeatTime
				yym3024 := z.DecBinary()
				_ = yym3024
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3023) {
				} else if yym3024 {
					z.DecBinaryUnmarshal(yyv3023)
				} else if !yym3024 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3023)
				} else {
					z.DecFallback(yyv3023, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3025 := &x.LastTransitionTime
				yym3026 := z.DecBinary()
				_ = yym3026
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3025) {
				} else if yym3026 {
					z.DecBinaryUnmarshal(yyv3025)
				} else if !yym3026 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3025)
				} else {
					z.DecFallback(yyv3025, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3020)
		} // end switch yys3020
	} // end for yyj3020
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3029 int
	var yyb3029 bool
	var yyhl3029 bool = l >= 0
	yyj3029++
	if yyhl3029 {
		yyb3029 = yyj3029 > l
	} else {
		yyb3029 = r.CheckBreak()
	}
	if yyb3029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3029++
	if yyhl3029 {
		yyb3029 = yyj3029 > l
	} else {
		yyb3029 = r.CheckBreak()
	}
	if yyb3029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3029++
	if yyhl3029 {
		yyb3029 = yyj3029 > l
	} else {
		yyb3029 = r.CheckBreak()
	}
	if yyb3029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3032 := &x.LastHeartbeatTime
		yym3033 := z.DecBinary()
		_ = yym3033
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3032) {
		} else if yym3033 {
			z.DecBinaryUnmarshal(yyv3032)
		} else if !yym3033 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3032)
		} else {
			z.DecFallback(yyv3032, false)
		}
	}
	yyj3029++
	if yyhl3029 {
		yyb3029 = yyj3029 > l
	} else {
		yyb3029 = r.CheckBreak()
	}
	if yyb3029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3034 := &x.LastTransitionTime
		yym3035 := z.DecBinary()
		_ = yym3035
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3034) {
		} else if yym3035 {
			z.DecBinaryUnmarshal(yyv3034)
		} else if !yym3035 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3034)
		} else {
			z.DecFallback(yyv3034, false)
		}
	}
	yyj3029++
	if yyhl3029 {
		yyb3029 = yyj3029 > l
	} else {
		yyb3029 = r.CheckBreak()
	}
	if yyb3029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3029++
	if yyhl3029 {
		yyb3029 = yyj3029 > l
	} else {
		yyb3029 = r.CheckBreak()
	}
	if yyb3029 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3029++
		if yyhl3029 {
			yyb3029 = yyj3029 > l
		} else {
			yyb3029 = r.CheckBreak()
		}
		if yyb3029 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3029-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3038 := z.EncBinary()
	_ = yym3038
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3039 := z.DecBinary()
	_ = yym3039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3040 := z.EncBinary()
		_ = yym3040
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3041 := !z.EncBinary()
			yy2arr3041 := z.EncBasicHandle().StructToArray
			var yyq3041 [2]bool
			_, _, _ = yysep3041, yyq3041, yy2arr3041
			const yyr3041 bool = false
			var yynn3041 int
			if yyr3041 || yy2arr3041 {
				r.EncodeArrayStart(2)
			} else {
				yynn3041 = 2
				for _, b := range yyq3041 {
					if b {
						yynn3041++
					}
				}
				r.EncodeMapStart(yynn3041)
				yynn3041 = 0
			}
			if yyr3041 || yy2arr3041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3041 || yy2arr3041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3044 := z.EncBinary()
				_ = yym3044
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3045 := z.EncBinary()
				_ = yym3045
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3041 || yy2arr3041 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3046 := z.DecBinary()
	_ = yym3046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3047 := r.ContainerType()
		if yyct3047 == codecSelferValueTypeMap1234 {
			yyl3047 := r.ReadMapStart()
			if yyl3047 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3047, d)
			}
		} else if yyct3047 == codecSelferValueTypeArray1234 {
			yyl3047 := r.ReadArrayStart()
			if yyl3047 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3048Slc
	var yyhl3048 bool = l >= 0
	for yyj3048 := 0; ; yyj3048++ {
		if yyhl3048 {
			if yyj3048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3048Slc = r.DecodeBytes(yys3048Slc, true, true)
		yys3048 := string(yys3048Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3048 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3048)
		} // end switch yys3048
	} // end for yyj3048
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3051 int
	var yyb3051 bool
	var yyhl3051 bool = l >= 0
	yyj3051++
	if yyhl3051 {
		yyb3051 = yyj3051 > l
	} else {
		yyb3051 = r.CheckBreak()
	}
	if yyb3051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3051++
	if yyhl3051 {
		yyb3051 = yyj3051 > l
	} else {
		yyb3051 = r.CheckBreak()
	}
	if yyb3051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3051++
		if yyhl3051 {
			yyb3051 = yyj3051 > l
		} else {
			yyb3051 = r.CheckBreak()
		}
		if yyb3051 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3051-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3054 := z.EncBinary()
		_ = yym3054
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3055 := !z.EncBinary()
			yy2arr3055 := z.EncBasicHandle().StructToArray
			var yyq3055 [1]bool
			_, _, _ = yysep3055, yyq3055, yy2arr3055
			const yyr3055 bool = false
			yyq3055[0] = len(x.Capacity) != 0
			var yynn3055 int
			if yyr3055 || yy2arr3055 {
				r.EncodeArrayStart(1)
			} else {
				yynn3055 = 0
				for _, b := range yyq3055 {
					if b {
						yynn3055++
					}
				}
				r.EncodeMapStart(yynn3055)
				yynn3055 = 0
			}
			if yyr3055 || yy2arr3055 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3055[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3055[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3055 || yy2arr3055 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3057 := z.DecBinary()
	_ = yym3057
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3058 := r.ContainerType()
		if yyct3058 == codecSelferValueTypeMap1234 {
			yyl3058 := r.ReadMapStart()
			if yyl3058 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3058, d)
			}
		} else if yyct3058 == codecSelferValueTypeArray1234 {
			yyl3058 := r.ReadArrayStart()
			if yyl3058 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3058, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3059Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3059Slc
	var yyhl3059 bool = l >= 0
	for yyj3059 := 0; ; yyj3059++ {
		if yyhl3059 {
			if yyj3059 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3059Slc = r.DecodeBytes(yys3059Slc, true, true)
		yys3059 := string(yys3059Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3059 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3060 := &x.Capacity
				yyv3060.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3059)
		} // end switch yys3059
	} // end for yyj3059
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3061 int
	var yyb3061 bool
	var yyhl3061 bool = l >= 0
	yyj3061++
	if yyhl3061 {
		yyb3061 = yyj3061 > l
	} else {
		yyb3061 = r.CheckBreak()
	}
	if yyb3061 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3062 := &x.Capacity
		yyv3062.CodecDecodeSelf(d)
	}
	for {
		yyj3061++
		if yyhl3061 {
			yyb3061 = yyj3061 > l
		} else {
			yyb3061 = r.CheckBreak()
		}
		if yyb3061 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3061-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3063 := z.EncBinary()
	_ = yym3063
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3064 := z.DecBinary()
	_ = yym3064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3065 := z.EncBinary()
		_ = yym3065
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3066 := z.DecBinary()
	_ = yym3066
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3067 := z.EncBinary()
		_ = yym3067
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3068 := !z.EncBinary()
			yy2arr3068 := z.EncBasicHandle().StructToArray
			var yyq3068 [5]bool
			_, _, _ = yysep3068, yyq3068, yy2arr3068
			const yyr3068 bool = false
			yyq3068[0] = x.Kind != ""
			yyq3068[1] = x.APIVersion != ""
			yyq3068[2] = true
			yyq3068[3] = true
			yyq3068[4] = true
			var yynn3068 int
			if yyr3068 || yy2arr3068 {
				r.EncodeArrayStart(5)
			} else {
				yynn3068 = 0
				for _, b := range yyq3068 {
					if b {
						yynn3068++
					}
				}
				r.EncodeMapStart(yynn3068)
				yynn3068 = 0
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3068[0] {
					yym3070 := z.EncBinary()
					_ = yym3070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3068[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3071 := z.EncBinary()
					_ = yym3071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3068[1] {
					yym3073 := z.EncBinary()
					_ = yym3073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3068[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3074 := z.EncBinary()
					_ = yym3074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3068[2] {
					yy3076 := &x.ObjectMeta
					yy3076.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3068[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3077 := &x.ObjectMeta
					yy3077.CodecEncodeSelf(e)
				}
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3068[3] {
					yy3079 := &x.Spec
					yy3079.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3068[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3080 := &x.Spec
					yy3080.CodecEncodeSelf(e)
				}
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3068[4] {
					yy3082 := &x.Status
					yy3082.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3068[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3083 := &x.Status
					yy3083.CodecEncodeSelf(e)
				}
			}
			if yyr3068 || yy2arr3068 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3084 := z.DecBinary()
	_ = yym3084
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3085 := r.ContainerType()
		if yyct3085 == codecSelferValueTypeMap1234 {
			yyl3085 := r.ReadMapStart()
			if yyl3085 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3085, d)
			}
		} else if yyct3085 == codecSelferValueTypeArray1234 {
			yyl3085 := r.ReadArrayStart()
			if yyl3085 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3085, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3086Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3086Slc
	var yyhl3086 bool = l >= 0
	for yyj3086 := 0; ; yyj3086++ {
		if yyhl3086 {
			if yyj3086 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3086Slc = r.DecodeBytes(yys3086Slc, true, true)
		yys3086 := string(yys3086Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3086 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3089 := &x.ObjectMeta
				yyv3089.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3090 := &x.Spec
				yyv3090.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3091 := &x.Status
				yyv3091.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3086)
		} // end switch yys3086
	} // end for yyj3086
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3092 int
	var yyb3092 bool
	var yyhl3092 bool = l >= 0
	yyj3092++
	if yyhl3092 {
		yyb3092 = yyj3092 > l
	} else {
		yyb3092 = r.CheckBreak()
	}
	if yyb3092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3092++
	if yyhl3092 {
		yyb3092 = yyj3092 > l
	} else {
		yyb3092 = r.CheckBreak()
	}
	if yyb3092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3092++
	if yyhl3092 {
		yyb3092 = yyj3092 > l
	} else {
		yyb3092 = r.CheckBreak()
	}
	if yyb3092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3095 := &x.ObjectMeta
		yyv3095.CodecDecodeSelf(d)
	}
	yyj3092++
	if yyhl3092 {
		yyb3092 = yyj3092 > l
	} else {
		yyb3092 = r.CheckBreak()
	}
	if yyb3092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3096 := &x.Spec
		yyv3096.CodecDecodeSelf(d)
	}
	yyj3092++
	if yyhl3092 {
		yyb3092 = yyj3092 > l
	} else {
		yyb3092 = r.CheckBreak()
	}
	if yyb3092 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3097 := &x.Status
		yyv3097.CodecDecodeSelf(d)
	}
	for {
		yyj3092++
		if yyhl3092 {
			yyb3092 = yyj3092 > l
		} else {
			yyb3092 = r.CheckBreak()
		}
		if yyb3092 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3092-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3098 := z.EncBinary()
		_ = yym3098
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3099 := !z.EncBinary()
			yy2arr3099 := z.EncBasicHandle().StructToArray
			var yyq3099 [4]bool
			_, _, _ = yysep3099, yyq3099, yy2arr3099
			const yyr3099 bool = false
			yyq3099[0] = x.Kind != ""
			yyq3099[1] = x.APIVersion != ""
			yyq3099[2] = true
			var yynn3099 int
			if yyr3099 || yy2arr3099 {
				r.EncodeArrayStart(4)
			} else {
				yynn3099 = 1
				for _, b := range yyq3099 {
					if b {
						yynn3099++
					}
				}
				r.EncodeMapStart(yynn3099)
				yynn3099 = 0
			}
			if yyr3099 || yy2arr3099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3099[0] {
					yym3101 := z.EncBinary()
					_ = yym3101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3099[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3102 := z.EncBinary()
					_ = yym3102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3099 || yy2arr3099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3099[1] {
					yym3104 := z.EncBinary()
					_ = yym3104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3099[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3105 := z.EncBinary()
					_ = yym3105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3099 || yy2arr3099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3099[2] {
					yy3107 := &x.ListMeta
					yym3108 := z.EncBinary()
					_ = yym3108
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3107) {
					} else {
						z.EncFallback(yy3107)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3099[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3109 := &x.ListMeta
					yym3110 := z.EncBinary()
					_ = yym3110
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3109) {
					} else {
						z.EncFallback(yy3109)
					}
				}
			}
			if yyr3099 || yy2arr3099 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3112 := z.EncBinary()
					_ = yym3112
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3113 := z.EncBinary()
					_ = yym3113
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3099 || yy2arr3099 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3114 := z.DecBinary()
	_ = yym3114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3115 := r.ContainerType()
		if yyct3115 == codecSelferValueTypeMap1234 {
			yyl3115 := r.ReadMapStart()
			if yyl3115 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3115, d)
			}
		} else if yyct3115 == codecSelferValueTypeArray1234 {
			yyl3115 := r.ReadArrayStart()
			if yyl3115 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3116Slc
	var yyhl3116 bool = l >= 0
	for yyj3116 := 0; ; yyj3116++ {
		if yyhl3116 {
			if yyj3116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3116Slc = r.DecodeBytes(yys3116Slc, true, true)
		yys3116 := string(yys3116Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3116 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3119 := &x.ListMeta
				yym3120 := z.DecBinary()
				_ = yym3120
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3119) {
				} else {
					z.DecFallback(yyv3119, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3121 := &x.Items
				yym3122 := z.DecBinary()
				_ = yym3122
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3121), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3116)
		} // end switch yys3116
	} // end for yyj3116
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3123 int
	var yyb3123 bool
	var yyhl3123 bool = l >= 0
	yyj3123++
	if yyhl3123 {
		yyb3123 = yyj3123 > l
	} else {
		yyb3123 = r.CheckBreak()
	}
	if yyb3123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3123++
	if yyhl3123 {
		yyb3123 = yyj3123 > l
	} else {
		yyb3123 = r.CheckBreak()
	}
	if yyb3123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3123++
	if yyhl3123 {
		yyb3123 = yyj3123 > l
	} else {
		yyb3123 = r.CheckBreak()
	}
	if yyb3123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3126 := &x.ListMeta
		yym3127 := z.DecBinary()
		_ = yym3127
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3126) {
		} else {
			z.DecFallback(yyv3126, false)
		}
	}
	yyj3123++
	if yyhl3123 {
		yyb3123 = yyj3123 > l
	} else {
		yyb3123 = r.CheckBreak()
	}
	if yyb3123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3128 := &x.Items
		yym3129 := z.DecBinary()
		_ = yym3129
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3128), d)
		}
	}
	for {
		yyj3123++
		if yyhl3123 {
			yyb3123 = yyj3123 > l
		} else {
			yyb3123 = r.CheckBreak()
		}
		if yyb3123 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3123-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3130 := z.EncBinary()
		_ = yym3130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3131 := !z.EncBinary()
			yy2arr3131 := z.EncBasicHandle().StructToArray
			var yyq3131 [1]bool
			_, _, _ = yysep3131, yyq3131, yy2arr3131
			const yyr3131 bool = false
			var yynn3131 int
			if yyr3131 || yy2arr3131 {
				r.EncodeArrayStart(1)
			} else {
				yynn3131 = 1
				for _, b := range yyq3131 {
					if b {
						yynn3131++
					}
				}
				r.EncodeMapStart(yynn3131)
				yynn3131 = 0
			}
			if yyr3131 || yy2arr3131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3133 := z.EncBinary()
					_ = yym3133
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3134 := z.EncBinary()
					_ = yym3134
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3131 || yy2arr3131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3135 := z.DecBinary()
	_ = yym3135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3136 := r.ContainerType()
		if yyct3136 == codecSelferValueTypeMap1234 {
			yyl3136 := r.ReadMapStart()
			if yyl3136 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3136, d)
			}
		} else if yyct3136 == codecSelferValueTypeArray1234 {
			yyl3136 := r.ReadArrayStart()
			if yyl3136 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3137Slc
	var yyhl3137 bool = l >= 0
	for yyj3137 := 0; ; yyj3137++ {
		if yyhl3137 {
			if yyj3137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3137Slc = r.DecodeBytes(yys3137Slc, true, true)
		yys3137 := string(yys3137Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3137 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3138 := &x.Finalizers
				yym3139 := z.DecBinary()
				_ = yym3139
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3138), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3137)
		} // end switch yys3137
	} // end for yyj3137
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3140 int
	var yyb3140 bool
	var yyhl3140 bool = l >= 0
	yyj3140++
	if yyhl3140 {
		yyb3140 = yyj3140 > l
	} else {
		yyb3140 = r.CheckBreak()
	}
	if yyb3140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3141 := &x.Finalizers
		yym3142 := z.DecBinary()
		_ = yym3142
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3141), d)
		}
	}
	for {
		yyj3140++
		if yyhl3140 {
			yyb3140 = yyj3140 > l
		} else {
			yyb3140 = r.CheckBreak()
		}
		if yyb3140 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3140-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3143 := z.EncBinary()
	_ = yym3143
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3144 := z.DecBinary()
	_ = yym3144
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3145 := z.EncBinary()
		_ = yym3145
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3146 := !z.EncBinary()
			yy2arr3146 := z.EncBasicHandle().StructToArray
			var yyq3146 [1]bool
			_, _, _ = yysep3146, yyq3146, yy2arr3146
			const yyr3146 bool = false
			yyq3146[0] = x.Phase != ""
			var yynn3146 int
			if yyr3146 || yy2arr3146 {
				r.EncodeArrayStart(1)
			} else {
				yynn3146 = 0
				for _, b := range yyq3146 {
					if b {
						yynn3146++
					}
				}
				r.EncodeMapStart(yynn3146)
				yynn3146 = 0
			}
			if yyr3146 || yy2arr3146 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3146[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3146[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3146 || yy2arr3146 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3148 := z.DecBinary()
	_ = yym3148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3149 := r.ContainerType()
		if yyct3149 == codecSelferValueTypeMap1234 {
			yyl3149 := r.ReadMapStart()
			if yyl3149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3149, d)
			}
		} else if yyct3149 == codecSelferValueTypeArray1234 {
			yyl3149 := r.ReadArrayStart()
			if yyl3149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3150Slc
	var yyhl3150 bool = l >= 0
	for yyj3150 := 0; ; yyj3150++ {
		if yyhl3150 {
			if yyj3150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3150Slc = r.DecodeBytes(yys3150Slc, true, true)
		yys3150 := string(yys3150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3150 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3150)
		} // end switch yys3150
	} // end for yyj3150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3152 int
	var yyb3152 bool
	var yyhl3152 bool = l >= 0
	yyj3152++
	if yyhl3152 {
		yyb3152 = yyj3152 > l
	} else {
		yyb3152 = r.CheckBreak()
	}
	if yyb3152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3152++
		if yyhl3152 {
			yyb3152 = yyj3152 > l
		} else {
			yyb3152 = r.CheckBreak()
		}
		if yyb3152 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3152-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3154 := z.EncBinary()
	_ = yym3154
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3155 := z.DecBinary()
	_ = yym3155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3156 := z.EncBinary()
		_ = yym3156
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3157 := !z.EncBinary()
			yy2arr3157 := z.EncBasicHandle().StructToArray
			var yyq3157 [5]bool
			_, _, _ = yysep3157, yyq3157, yy2arr3157
			const yyr3157 bool = false
			yyq3157[0] = x.Kind != ""
			yyq3157[1] = x.APIVersion != ""
			yyq3157[2] = true
			yyq3157[3] = true
			yyq3157[4] = true
			var yynn3157 int
			if yyr3157 || yy2arr3157 {
				r.EncodeArrayStart(5)
			} else {
				yynn3157 = 0
				for _, b := range yyq3157 {
					if b {
						yynn3157++
					}
				}
				r.EncodeMapStart(yynn3157)
				yynn3157 = 0
			}
			if yyr3157 || yy2arr3157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3157[0] {
					yym3159 := z.EncBinary()
					_ = yym3159
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3157[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3160 := z.EncBinary()
					_ = yym3160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3157 || yy2arr3157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3157[1] {
					yym3162 := z.EncBinary()
					_ = yym3162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3157[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3163 := z.EncBinary()
					_ = yym3163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3157 || yy2arr3157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3157[2] {
					yy3165 := &x.ObjectMeta
					yy3165.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3157[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3166 := &x.ObjectMeta
					yy3166.CodecEncodeSelf(e)
				}
			}
			if yyr3157 || yy2arr3157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3157[3] {
					yy3168 := &x.Spec
					yy3168.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3157[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3169 := &x.Spec
					yy3169.CodecEncodeSelf(e)
				}
			}
			if yyr3157 || yy2arr3157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3157[4] {
					yy3171 := &x.Status
					yy3171.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3157[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3172 := &x.Status
					yy3172.CodecEncodeSelf(e)
				}
			}
			if yyr3157 || yy2arr3157 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3173 := z.DecBinary()
	_ = yym3173
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3174 := r.ContainerType()
		if yyct3174 == codecSelferValueTypeMap1234 {
			yyl3174 := r.ReadMapStart()
			if yyl3174 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3174, d)
			}
		} else if yyct3174 == codecSelferValueTypeArray1234 {
			yyl3174 := r.ReadArrayStart()
			if yyl3174 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3174, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3175Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3175Slc
	var yyhl3175 bool = l >= 0
	for yyj3175 := 0; ; yyj3175++ {
		if yyhl3175 {
			if yyj3175 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3175Slc = r.DecodeBytes(yys3175Slc, true, true)
		yys3175 := string(yys3175Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3175 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3178 := &x.ObjectMeta
				yyv3178.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3179 := &x.Spec
				yyv3179.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3180 := &x.Status
				yyv3180.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3175)
		} // end switch yys3175
	} // end for yyj3175
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3181 int
	var yyb3181 bool
	var yyhl3181 bool = l >= 0
	yyj3181++
	if yyhl3181 {
		yyb3181 = yyj3181 > l
	} else {
		yyb3181 = r.CheckBreak()
	}
	if yyb3181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3181++
	if yyhl3181 {
		yyb3181 = yyj3181 > l
	} else {
		yyb3181 = r.CheckBreak()
	}
	if yyb3181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3181++
	if yyhl3181 {
		yyb3181 = yyj3181 > l
	} else {
		yyb3181 = r.CheckBreak()
	}
	if yyb3181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3184 := &x.ObjectMeta
		yyv3184.CodecDecodeSelf(d)
	}
	yyj3181++
	if yyhl3181 {
		yyb3181 = yyj3181 > l
	} else {
		yyb3181 = r.CheckBreak()
	}
	if yyb3181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3185 := &x.Spec
		yyv3185.CodecDecodeSelf(d)
	}
	yyj3181++
	if yyhl3181 {
		yyb3181 = yyj3181 > l
	} else {
		yyb3181 = r.CheckBreak()
	}
	if yyb3181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3186 := &x.Status
		yyv3186.CodecDecodeSelf(d)
	}
	for {
		yyj3181++
		if yyhl3181 {
			yyb3181 = yyj3181 > l
		} else {
			yyb3181 = r.CheckBreak()
		}
		if yyb3181 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3181-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3187 := z.EncBinary()
		_ = yym3187
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3188 := !z.EncBinary()
			yy2arr3188 := z.EncBasicHandle().StructToArray
			var yyq3188 [4]bool
			_, _, _ = yysep3188, yyq3188, yy2arr3188
			const yyr3188 bool = false
			yyq3188[0] = x.Kind != ""
			yyq3188[1] = x.APIVersion != ""
			yyq3188[2] = true
			var yynn3188 int
			if yyr3188 || yy2arr3188 {
				r.EncodeArrayStart(4)
			} else {
				yynn3188 = 1
				for _, b := range yyq3188 {
					if b {
						yynn3188++
					}
				}
				r.EncodeMapStart(yynn3188)
				yynn3188 = 0
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3188[0] {
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3188[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3188[1] {
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3188[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3194 := z.EncBinary()
					_ = yym3194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3188[2] {
					yy3196 := &x.ListMeta
					yym3197 := z.EncBinary()
					_ = yym3197
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3196) {
					} else {
						z.EncFallback(yy3196)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3188[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3198 := &x.ListMeta
					yym3199 := z.EncBinary()
					_ = yym3199
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3198) {
					} else {
						z.EncFallback(yy3198)
					}
				}
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3201 := z.EncBinary()
					_ = yym3201
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3202 := z.EncBinary()
					_ = yym3202
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3188 || yy2arr3188 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3203 := z.DecBinary()
	_ = yym3203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3204 := r.ContainerType()
		if yyct3204 == codecSelferValueTypeMap1234 {
			yyl3204 := r.ReadMapStart()
			if yyl3204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3204, d)
			}
		} else if yyct3204 == codecSelferValueTypeArray1234 {
			yyl3204 := r.ReadArrayStart()
			if yyl3204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3205Slc
	var yyhl3205 bool = l >= 0
	for yyj3205 := 0; ; yyj3205++ {
		if yyhl3205 {
			if yyj3205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3205Slc = r.DecodeBytes(yys3205Slc, true, true)
		yys3205 := string(yys3205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3205 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3208 := &x.ListMeta
				yym3209 := z.DecBinary()
				_ = yym3209
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3208) {
				} else {
					z.DecFallback(yyv3208, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3210 := &x.Items
				yym3211 := z.DecBinary()
				_ = yym3211
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3210), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3205)
		} // end switch yys3205
	} // end for yyj3205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3212 int
	var yyb3212 bool
	var yyhl3212 bool = l >= 0
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3215 := &x.ListMeta
		yym3216 := z.DecBinary()
		_ = yym3216
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3215) {
		} else {
			z.DecFallback(yyv3215, false)
		}
	}
	yyj3212++
	if yyhl3212 {
		yyb3212 = yyj3212 > l
	} else {
		yyb3212 = r.CheckBreak()
	}
	if yyb3212 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3217 := &x.Items
		yym3218 := z.DecBinary()
		_ = yym3218
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3217), d)
		}
	}
	for {
		yyj3212++
		if yyhl3212 {
			yyb3212 = yyj3212 > l
		} else {
			yyb3212 = r.CheckBreak()
		}
		if yyb3212 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3212-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3219 := z.EncBinary()
		_ = yym3219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3220 := !z.EncBinary()
			yy2arr3220 := z.EncBasicHandle().StructToArray
			var yyq3220 [4]bool
			_, _, _ = yysep3220, yyq3220, yy2arr3220
			const yyr3220 bool = false
			yyq3220[0] = x.Kind != ""
			yyq3220[1] = x.APIVersion != ""
			yyq3220[2] = true
			var yynn3220 int
			if yyr3220 || yy2arr3220 {
				r.EncodeArrayStart(4)
			} else {
				yynn3220 = 1
				for _, b := range yyq3220 {
					if b {
						yynn3220++
					}
				}
				r.EncodeMapStart(yynn3220)
				yynn3220 = 0
			}
			if yyr3220 || yy2arr3220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3220[0] {
					yym3222 := z.EncBinary()
					_ = yym3222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3220[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3223 := z.EncBinary()
					_ = yym3223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3220 || yy2arr3220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3220[1] {
					yym3225 := z.EncBinary()
					_ = yym3225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3220[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3220 || yy2arr3220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3220[2] {
					yy3228 := &x.ObjectMeta
					yy3228.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3220[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3229 := &x.ObjectMeta
					yy3229.CodecEncodeSelf(e)
				}
			}
			if yyr3220 || yy2arr3220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3231 := &x.Target
				yy3231.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3232 := &x.Target
				yy3232.CodecEncodeSelf(e)
			}
			if yyr3220 || yy2arr3220 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3233 := z.DecBinary()
	_ = yym3233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3234 := r.ContainerType()
		if yyct3234 == codecSelferValueTypeMap1234 {
			yyl3234 := r.ReadMapStart()
			if yyl3234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3234, d)
			}
		} else if yyct3234 == codecSelferValueTypeArray1234 {
			yyl3234 := r.ReadArrayStart()
			if yyl3234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3235Slc
	var yyhl3235 bool = l >= 0
	for yyj3235 := 0; ; yyj3235++ {
		if yyhl3235 {
			if yyj3235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3235Slc = r.DecodeBytes(yys3235Slc, true, true)
		yys3235 := string(yys3235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3235 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3238 := &x.ObjectMeta
				yyv3238.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3239 := &x.Target
				yyv3239.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3235)
		} // end switch yys3235
	} // end for yyj3235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3240 int
	var yyb3240 bool
	var yyhl3240 bool = l >= 0
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3243 := &x.ObjectMeta
		yyv3243.CodecDecodeSelf(d)
	}
	yyj3240++
	if yyhl3240 {
		yyb3240 = yyj3240 > l
	} else {
		yyb3240 = r.CheckBreak()
	}
	if yyb3240 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3244 := &x.Target
		yyv3244.CodecDecodeSelf(d)
	}
	for {
		yyj3240++
		if yyhl3240 {
			yyb3240 = yyj3240 > l
		} else {
			yyb3240 = r.CheckBreak()
		}
		if yyb3240 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3240-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3245 := z.EncBinary()
		_ = yym3245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3246 := !z.EncBinary()
			yy2arr3246 := z.EncBasicHandle().StructToArray
			var yyq3246 [1]bool
			_, _, _ = yysep3246, yyq3246, yy2arr3246
			const yyr3246 bool = false
			yyq3246[0] = x.UID != nil
			var yynn3246 int
			if yyr3246 || yy2arr3246 {
				r.EncodeArrayStart(1)
			} else {
				yynn3246 = 0
				for _, b := range yyq3246 {
					if b {
						yynn3246++
					}
				}
				r.EncodeMapStart(yynn3246)
				yynn3246 = 0
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3246[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3248 := *x.UID
						yym3249 := z.EncBinary()
						_ = yym3249
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3248) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3248))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3246[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3250 := *x.UID
						yym3251 := z.EncBinary()
						_ = yym3251
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3250) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3250))
						}
					}
				}
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3252 := z.DecBinary()
	_ = yym3252
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3253 := r.ContainerType()
		if yyct3253 == codecSelferValueTypeMap1234 {
			yyl3253 := r.ReadMapStart()
			if yyl3253 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3253, d)
			}
		} else if yyct3253 == codecSelferValueTypeArray1234 {
			yyl3253 := r.ReadArrayStart()
			if yyl3253 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3253, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3254Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3254Slc
	var yyhl3254 bool = l >= 0
	for yyj3254 := 0; ; yyj3254++ {
		if yyhl3254 {
			if yyj3254 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3254Slc = r.DecodeBytes(yys3254Slc, true, true)
		yys3254 := string(yys3254Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3254 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3256 := z.DecBinary()
				_ = yym3256
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3254)
		} // end switch yys3254
	} // end for yyj3254
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3257 int
	var yyb3257 bool
	var yyhl3257 bool = l >= 0
	yyj3257++
	if yyhl3257 {
		yyb3257 = yyj3257 > l
	} else {
		yyb3257 = r.CheckBreak()
	}
	if yyb3257 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3259 := z.DecBinary()
		_ = yym3259
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3257++
		if yyhl3257 {
			yyb3257 = yyj3257 > l
		} else {
			yyb3257 = r.CheckBreak()
		}
		if yyb3257 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3257-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3260 := z.EncBinary()
		_ = yym3260
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3261 := !z.EncBinary()
			yy2arr3261 := z.EncBasicHandle().StructToArray
			var yyq3261 [5]bool
			_, _, _ = yysep3261, yyq3261, yy2arr3261
			const yyr3261 bool = false
			yyq3261[0] = x.Kind != ""
			yyq3261[1] = x.APIVersion != ""
			yyq3261[2] = x.GracePeriodSeconds != nil
			yyq3261[3] = x.Preconditions != nil
			yyq3261[4] = x.OrphanDependents != nil
			var yynn3261 int
			if yyr3261 || yy2arr3261 {
				r.EncodeArrayStart(5)
			} else {
				yynn3261 = 0
				for _, b := range yyq3261 {
					if b {
						yynn3261++
					}
				}
				r.EncodeMapStart(yynn3261)
				yynn3261 = 0
			}
			if yyr3261 || yy2arr3261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3261[0] {
					yym3263 := z.EncBinary()
					_ = yym3263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3261[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3264 := z.EncBinary()
					_ = yym3264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3261 || yy2arr3261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3261[1] {
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3261[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3261 || yy2arr3261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3261[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3269 := *x.GracePeriodSeconds
						yym3270 := z.EncBinary()
						_ = yym3270
						if false {
						} else {
							r.EncodeInt(int64(yy3269))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3261[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3271 := *x.GracePeriodSeconds
						yym3272 := z.EncBinary()
						_ = yym3272
						if false {
						} else {
							r.EncodeInt(int64(yy3271))
						}
					}
				}
			}
			if yyr3261 || yy2arr3261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3261[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3261[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3261 || yy2arr3261 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3261[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3275 := *x.OrphanDependents
						yym3276 := z.EncBinary()
						_ = yym3276
						if false {
						} else {
							r.EncodeBool(bool(yy3275))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3261[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3277 := *x.OrphanDependents
						yym3278 := z.EncBinary()
						_ = yym3278
						if false {
						} else {
							r.EncodeBool(bool(yy3277))
						}
					}
				}
			}
			if yyr3261 || yy2arr3261 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3279 := z.DecBinary()
	_ = yym3279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3280 := r.ContainerType()
		if yyct3280 == codecSelferValueTypeMap1234 {
			yyl3280 := r.ReadMapStart()
			if yyl3280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3280, d)
			}
		} else if yyct3280 == codecSelferValueTypeArray1234 {
			yyl3280 := r.ReadArrayStart()
			if yyl3280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3281Slc
	var yyhl3281 bool = l >= 0
	for yyj3281 := 0; ; yyj3281++ {
		if yyhl3281 {
			if yyj3281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3281Slc = r.DecodeBytes(yys3281Slc, true, true)
		yys3281 := string(yys3281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3281 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3285 := z.DecBinary()
				_ = yym3285
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3288 := z.DecBinary()
				_ = yym3288
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3281)
		} // end switch yys3281
	} // end for yyj3281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3289 int
	var yyb3289 bool
	var yyhl3289 bool = l >= 0
	yyj3289++
	if yyhl3289 {
		yyb3289 = yyj3289 > l
	} else {
		yyb3289 = r.CheckBreak()
	}
	if yyb3289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3289++
	if yyhl3289 {
		yyb3289 = yyj3289 > l
	} else {
		yyb3289 = r.CheckBreak()
	}
	if yyb3289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3289++
	if yyhl3289 {
		yyb3289 = yyj3289 > l
	} else {
		yyb3289 = r.CheckBreak()
	}
	if yyb3289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3293 := z.DecBinary()
		_ = yym3293
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3289++
	if yyhl3289 {
		yyb3289 = yyj3289 > l
	} else {
		yyb3289 = r.CheckBreak()
	}
	if yyb3289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3289++
	if yyhl3289 {
		yyb3289 = yyj3289 > l
	} else {
		yyb3289 = r.CheckBreak()
	}
	if yyb3289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3296 := z.DecBinary()
		_ = yym3296
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3289++
		if yyhl3289 {
			yyb3289 = yyj3289 > l
		} else {
			yyb3289 = r.CheckBreak()
		}
		if yyb3289 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3289-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3297 := z.EncBinary()
		_ = yym3297
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3298 := !z.EncBinary()
			yy2arr3298 := z.EncBasicHandle().StructToArray
			var yyq3298 [4]bool
			_, _, _ = yysep3298, yyq3298, yy2arr3298
			const yyr3298 bool = false
			yyq3298[0] = x.Kind != ""
			yyq3298[1] = x.APIVersion != ""
			var yynn3298 int
			if yyr3298 || yy2arr3298 {
				r.EncodeArrayStart(4)
			} else {
				yynn3298 = 2
				for _, b := range yyq3298 {
					if b {
						yynn3298++
					}
				}
				r.EncodeMapStart(yynn3298)
				yynn3298 = 0
			}
			if yyr3298 || yy2arr3298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3298[0] {
					yym3300 := z.EncBinary()
					_ = yym3300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3298[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3301 := z.EncBinary()
					_ = yym3301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3298 || yy2arr3298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3298[1] {
					yym3303 := z.EncBinary()
					_ = yym3303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3298[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3298 || yy2arr3298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3306 := z.EncBinary()
				_ = yym3306
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3307 := z.EncBinary()
				_ = yym3307
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3298 || yy2arr3298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3309 := z.EncBinary()
				_ = yym3309
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3310 := z.EncBinary()
				_ = yym3310
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3298 || yy2arr3298 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3311 := z.DecBinary()
	_ = yym3311
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3312 := r.ContainerType()
		if yyct3312 == codecSelferValueTypeMap1234 {
			yyl3312 := r.ReadMapStart()
			if yyl3312 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3312, d)
			}
		} else if yyct3312 == codecSelferValueTypeArray1234 {
			yyl3312 := r.ReadArrayStart()
			if yyl3312 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3312, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3313Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3313Slc
	var yyhl3313 bool = l >= 0
	for yyj3313 := 0; ; yyj3313++ {
		if yyhl3313 {
			if yyj3313 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3313Slc = r.DecodeBytes(yys3313Slc, true, true)
		yys3313 := string(yys3313Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3313 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3313)
		} // end switch yys3313
	} // end for yyj3313
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3318 int
	var yyb3318 bool
	var yyhl3318 bool = l >= 0
	yyj3318++
	if yyhl3318 {
		yyb3318 = yyj3318 > l
	} else {
		yyb3318 = r.CheckBreak()
	}
	if yyb3318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3318++
	if yyhl3318 {
		yyb3318 = yyj3318 > l
	} else {
		yyb3318 = r.CheckBreak()
	}
	if yyb3318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3318++
	if yyhl3318 {
		yyb3318 = yyj3318 > l
	} else {
		yyb3318 = r.CheckBreak()
	}
	if yyb3318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3318++
	if yyhl3318 {
		yyb3318 = yyj3318 > l
	} else {
		yyb3318 = r.CheckBreak()
	}
	if yyb3318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3318++
		if yyhl3318 {
			yyb3318 = yyj3318 > l
		} else {
			yyb3318 = r.CheckBreak()
		}
		if yyb3318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3323 := z.EncBinary()
		_ = yym3323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3324 := !z.EncBinary()
			yy2arr3324 := z.EncBasicHandle().StructToArray
			var yyq3324 [7]bool
			_, _, _ = yysep3324, yyq3324, yy2arr3324
			const yyr3324 bool = false
			yyq3324[0] = x.Kind != ""
			yyq3324[1] = x.APIVersion != ""
			var yynn3324 int
			if yyr3324 || yy2arr3324 {
				r.EncodeArrayStart(7)
			} else {
				yynn3324 = 5
				for _, b := range yyq3324 {
					if b {
						yynn3324++
					}
				}
				r.EncodeMapStart(yynn3324)
				yynn3324 = 0
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3324[0] {
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3324[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3324[1] {
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3324[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3330 := z.EncBinary()
					_ = yym3330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3332 := z.EncBinary()
					_ = yym3332
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3333 := z.EncBinary()
					_ = yym3333
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3335 := z.EncBinary()
					_ = yym3335
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3336 := z.EncBinary()
					_ = yym3336
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3338 := z.EncBinary()
				_ = yym3338
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3339 := z.EncBinary()
				_ = yym3339
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3341 := z.EncBinary()
				_ = yym3341
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3342 := z.EncBinary()
				_ = yym3342
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3344 := *x.TimeoutSeconds
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						r.EncodeInt(int64(yy3344))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3346 := *x.TimeoutSeconds
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else {
						r.EncodeInt(int64(yy3346))
					}
				}
			}
			if yyr3324 || yy2arr3324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3348 := z.DecBinary()
	_ = yym3348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3349 := r.ContainerType()
		if yyct3349 == codecSelferValueTypeMap1234 {
			yyl3349 := r.ReadMapStart()
			if yyl3349 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3349, d)
			}
		} else if yyct3349 == codecSelferValueTypeArray1234 {
			yyl3349 := r.ReadArrayStart()
			if yyl3349 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3350Slc
	var yyhl3350 bool = l >= 0
	for yyj3350 := 0; ; yyj3350++ {
		if yyhl3350 {
			if yyj3350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3350Slc = r.DecodeBytes(yys3350Slc, true, true)
		yys3350 := string(yys3350Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3350 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3353 := &x.LabelSelector
				yym3354 := z.DecBinary()
				_ = yym3354
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3353) {
				} else {
					z.DecFallback(yyv3353, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3355 := &x.FieldSelector
				yym3356 := z.DecBinary()
				_ = yym3356
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3355) {
				} else {
					z.DecFallback(yyv3355, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3360 := z.DecBinary()
				_ = yym3360
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3350)
		} // end switch yys3350
	} // end for yyj3350
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3361 int
	var yyb3361 bool
	var yyhl3361 bool = l >= 0
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3364 := &x.LabelSelector
		yym3365 := z.DecBinary()
		_ = yym3365
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3364) {
		} else {
			z.DecFallback(yyv3364, true)
		}
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3366 := &x.FieldSelector
		yym3367 := z.DecBinary()
		_ = yym3367
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3366) {
		} else {
			z.DecFallback(yyv3366, true)
		}
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3361++
	if yyhl3361 {
		yyb3361 = yyj3361 > l
	} else {
		yyb3361 = r.CheckBreak()
	}
	if yyb3361 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3371 := z.DecBinary()
		_ = yym3371
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3361++
		if yyhl3361 {
			yyb3361 = yyj3361 > l
		} else {
			yyb3361 = r.CheckBreak()
		}
		if yyb3361 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3361-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3372 := z.EncBinary()
		_ = yym3372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3373 := !z.EncBinary()
			yy2arr3373 := z.EncBasicHandle().StructToArray
			var yyq3373 [10]bool
			_, _, _ = yysep3373, yyq3373, yy2arr3373
			const yyr3373 bool = false
			yyq3373[0] = x.Kind != ""
			yyq3373[1] = x.APIVersion != ""
			var yynn3373 int
			if yyr3373 || yy2arr3373 {
				r.EncodeArrayStart(10)
			} else {
				yynn3373 = 8
				for _, b := range yyq3373 {
					if b {
						yynn3373++
					}
				}
				r.EncodeMapStart(yynn3373)
				yynn3373 = 0
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3373[0] {
					yym3375 := z.EncBinary()
					_ = yym3375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3373[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3373[1] {
					yym3378 := z.EncBinary()
					_ = yym3378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3373[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3379 := z.EncBinary()
					_ = yym3379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3381 := z.EncBinary()
				_ = yym3381
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3382 := z.EncBinary()
				_ = yym3382
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3384 := z.EncBinary()
				_ = yym3384
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3385 := z.EncBinary()
				_ = yym3385
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3387 := z.EncBinary()
				_ = yym3387
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3388 := z.EncBinary()
				_ = yym3388
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3390 := *x.SinceSeconds
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else {
						r.EncodeInt(int64(yy3390))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3392 := *x.SinceSeconds
					yym3393 := z.EncBinary()
					_ = yym3393
					if false {
					} else {
						r.EncodeInt(int64(yy3392))
					}
				}
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3395 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3395 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3396 := z.EncBinary()
					_ = yym3396
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3396 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3396 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3398 := z.EncBinary()
				_ = yym3398
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3399 := z.EncBinary()
				_ = yym3399
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3401 := *x.TailLines
					yym3402 := z.EncBinary()
					_ = yym3402
					if false {
					} else {
						r.EncodeInt(int64(yy3401))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3403 := *x.TailLines
					yym3404 := z.EncBinary()
					_ = yym3404
					if false {
					} else {
						r.EncodeInt(int64(yy3403))
					}
				}
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3406 := *x.LimitBytes
					yym3407 := z.EncBinary()
					_ = yym3407
					if false {
					} else {
						r.EncodeInt(int64(yy3406))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3408 := *x.LimitBytes
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else {
						r.EncodeInt(int64(yy3408))
					}
				}
			}
			if yyr3373 || yy2arr3373 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3410 := z.DecBinary()
	_ = yym3410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3411 := r.ContainerType()
		if yyct3411 == codecSelferValueTypeMap1234 {
			yyl3411 := r.ReadMapStart()
			if yyl3411 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3411, d)
			}
		} else if yyct3411 == codecSelferValueTypeArray1234 {
			yyl3411 := r.ReadArrayStart()
			if yyl3411 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3412Slc
	var yyhl3412 bool = l >= 0
	for yyj3412 := 0; ; yyj3412++ {
		if yyhl3412 {
			if yyj3412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3412Slc = r.DecodeBytes(yys3412Slc, true, true)
		yys3412 := string(yys3412Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3412 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3419 := z.DecBinary()
				_ = yym3419
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3421 := z.DecBinary()
				_ = yym3421
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3421 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3421 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3424 := z.DecBinary()
				_ = yym3424
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3426 := z.DecBinary()
				_ = yym3426
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3412)
		} // end switch yys3412
	} // end for yyj3412
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3427 int
	var yyb3427 bool
	var yyhl3427 bool = l >= 0
	yyj3427++
	if yyhl3427 {
		yyb3427 = yyj3427 > l
	} else {
		yyb3427 = r.CheckBreak()
	}
	if yyb3427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3427++
	if yyhl3427 {
		yyb3427 = yyj3427 > l
	} else {
		yyb3427 = r.CheckBreak()
	}
	if yyb3427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3427++
	if yyhl3427 {
		yyb3427 = yyj3427 > l
	} else {
		yyb3427 = r.CheckBreak()
	}
	if yyb3427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3427++
	if yyhl3427 {
		yyb3427 = yyj3427 > l
	} else {
		yyb3427 = r.CheckBreak()
	}
	if yyb3427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3427++
	if yyhl3427 {
		yyb3427 = yyj3427 > l
	} else {
		yyb3427 = r.CheckBreak()
	}
	if yyb3427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3427++
	if yyhl3427 {
		yyb3427 = yyj3427 > l
	} else {
		yyb3427 = r.CheckBreak()
	}
	if yyb3427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3434 := z.DecBinary()
		_ = yym3434
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3427++
	if yyhl3427 {
		yyb3427 = yyj3427 > l
	} else {
		yyb3427 = r.CheckBreak()
	}
	if yyb3427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3436 := z.DecBinary()
		_ = yym3436
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3436 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3436 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3427++
	if yyhl3427 {
		yyb3427 = yyj3427 > l
	} else {
		yyb3427 = r.CheckBreak()
	}
	if yyb3427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3427++
	if yyhl3427 {
		yyb3427 = yyj3427 > l
	} else {
		yyb3427 = r.CheckBreak()
	}
	if yyb3427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3439 := z.DecBinary()
		_ = yym3439
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3427++
	if yyhl3427 {
		yyb3427 = yyj3427 > l
	} else {
		yyb3427 = r.CheckBreak()
	}
	if yyb3427 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3441 := z.DecBinary()
		_ = yym3441
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3427++
		if yyhl3427 {
			yyb3427 = yyj3427 > l
		} else {
			yyb3427 = r.CheckBreak()
		}
		if yyb3427 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3427-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3442 := z.EncBinary()
		_ = yym3442
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3443 := !z.EncBinary()
			yy2arr3443 := z.EncBasicHandle().StructToArray
			var yyq3443 [7]bool
			_, _, _ = yysep3443, yyq3443, yy2arr3443
			const yyr3443 bool = false
			yyq3443[0] = x.Kind != ""
			yyq3443[1] = x.APIVersion != ""
			yyq3443[2] = x.Stdin != false
			yyq3443[3] = x.Stdout != false
			yyq3443[4] = x.Stderr != false
			yyq3443[5] = x.TTY != false
			yyq3443[6] = x.Container != ""
			var yynn3443 int
			if yyr3443 || yy2arr3443 {
				r.EncodeArrayStart(7)
			} else {
				yynn3443 = 0
				for _, b := range yyq3443 {
					if b {
						yynn3443++
					}
				}
				r.EncodeMapStart(yynn3443)
				yynn3443 = 0
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3443[0] {
					yym3445 := z.EncBinary()
					_ = yym3445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3443[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3446 := z.EncBinary()
					_ = yym3446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3443[1] {
					yym3448 := z.EncBinary()
					_ = yym3448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3443[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3449 := z.EncBinary()
					_ = yym3449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3443[2] {
					yym3451 := z.EncBinary()
					_ = yym3451
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3443[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3452 := z.EncBinary()
					_ = yym3452
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3443[3] {
					yym3454 := z.EncBinary()
					_ = yym3454
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3443[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3455 := z.EncBinary()
					_ = yym3455
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3443[4] {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3443[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3443[5] {
					yym3460 := z.EncBinary()
					_ = yym3460
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3443[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3443[6] {
					yym3463 := z.EncBinary()
					_ = yym3463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3443[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3464 := z.EncBinary()
					_ = yym3464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3443 || yy2arr3443 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3465 := z.DecBinary()
	_ = yym3465
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3466 := r.ContainerType()
		if yyct3466 == codecSelferValueTypeMap1234 {
			yyl3466 := r.ReadMapStart()
			if yyl3466 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3466, d)
			}
		} else if yyct3466 == codecSelferValueTypeArray1234 {
			yyl3466 := r.ReadArrayStart()
			if yyl3466 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3466, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3467Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3467Slc
	var yyhl3467 bool = l >= 0
	for yyj3467 := 0; ; yyj3467++ {
		if yyhl3467 {
			if yyj3467 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3467Slc = r.DecodeBytes(yys3467Slc, true, true)
		yys3467 := string(yys3467Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3467 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3467)
		} // end switch yys3467
	} // end for yyj3467
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3475 int
	var yyb3475 bool
	var yyhl3475 bool = l >= 0
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3475++
	if yyhl3475 {
		yyb3475 = yyj3475 > l
	} else {
		yyb3475 = r.CheckBreak()
	}
	if yyb3475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3475++
		if yyhl3475 {
			yyb3475 = yyj3475 > l
		} else {
			yyb3475 = r.CheckBreak()
		}
		if yyb3475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3483 := z.EncBinary()
		_ = yym3483
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3484 := !z.EncBinary()
			yy2arr3484 := z.EncBasicHandle().StructToArray
			var yyq3484 [8]bool
			_, _, _ = yysep3484, yyq3484, yy2arr3484
			const yyr3484 bool = false
			yyq3484[0] = x.Kind != ""
			yyq3484[1] = x.APIVersion != ""
			var yynn3484 int
			if yyr3484 || yy2arr3484 {
				r.EncodeArrayStart(8)
			} else {
				yynn3484 = 6
				for _, b := range yyq3484 {
					if b {
						yynn3484++
					}
				}
				r.EncodeMapStart(yynn3484)
				yynn3484 = 0
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3484[0] {
					yym3486 := z.EncBinary()
					_ = yym3486
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3484[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3487 := z.EncBinary()
					_ = yym3487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3484[1] {
					yym3489 := z.EncBinary()
					_ = yym3489
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3484[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3490 := z.EncBinary()
					_ = yym3490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3492 := z.EncBinary()
				_ = yym3492
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3493 := z.EncBinary()
				_ = yym3493
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3495 := z.EncBinary()
				_ = yym3495
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3496 := z.EncBinary()
				_ = yym3496
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3498 := z.EncBinary()
				_ = yym3498
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3499 := z.EncBinary()
				_ = yym3499
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3501 := z.EncBinary()
				_ = yym3501
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3502 := z.EncBinary()
				_ = yym3502
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3504 := z.EncBinary()
				_ = yym3504
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3505 := z.EncBinary()
				_ = yym3505
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3507 := z.EncBinary()
					_ = yym3507
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3508 := z.EncBinary()
					_ = yym3508
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3484 || yy2arr3484 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3509 := z.DecBinary()
	_ = yym3509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3510 := r.ContainerType()
		if yyct3510 == codecSelferValueTypeMap1234 {
			yyl3510 := r.ReadMapStart()
			if yyl3510 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3510, d)
			}
		} else if yyct3510 == codecSelferValueTypeArray1234 {
			yyl3510 := r.ReadArrayStart()
			if yyl3510 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3510, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3511Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3511Slc
	var yyhl3511 bool = l >= 0
	for yyj3511 := 0; ; yyj3511++ {
		if yyhl3511 {
			if yyj3511 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3511Slc = r.DecodeBytes(yys3511Slc, true, true)
		yys3511 := string(yys3511Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3511 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3519 := &x.Command
				yym3520 := z.DecBinary()
				_ = yym3520
				if false {
				} else {
					z.F.DecSliceStringX(yyv3519, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3511)
		} // end switch yys3511
	} // end for yyj3511
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3521 int
	var yyb3521 bool
	var yyhl3521 bool = l >= 0
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3521++
	if yyhl3521 {
		yyb3521 = yyj3521 > l
	} else {
		yyb3521 = r.CheckBreak()
	}
	if yyb3521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3529 := &x.Command
		yym3530 := z.DecBinary()
		_ = yym3530
		if false {
		} else {
			z.F.DecSliceStringX(yyv3529, false, d)
		}
	}
	for {
		yyj3521++
		if yyhl3521 {
			yyb3521 = yyj3521 > l
		} else {
			yyb3521 = r.CheckBreak()
		}
		if yyb3521 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3521-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3531 := z.EncBinary()
		_ = yym3531
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3532 := !z.EncBinary()
			yy2arr3532 := z.EncBasicHandle().StructToArray
			var yyq3532 [3]bool
			_, _, _ = yysep3532, yyq3532, yy2arr3532
			const yyr3532 bool = false
			yyq3532[0] = x.Kind != ""
			yyq3532[1] = x.APIVersion != ""
			var yynn3532 int
			if yyr3532 || yy2arr3532 {
				r.EncodeArrayStart(3)
			} else {
				yynn3532 = 1
				for _, b := range yyq3532 {
					if b {
						yynn3532++
					}
				}
				r.EncodeMapStart(yynn3532)
				yynn3532 = 0
			}
			if yyr3532 || yy2arr3532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3532[0] {
					yym3534 := z.EncBinary()
					_ = yym3534
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3532[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3535 := z.EncBinary()
					_ = yym3535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3532 || yy2arr3532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3532[1] {
					yym3537 := z.EncBinary()
					_ = yym3537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3532[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3538 := z.EncBinary()
					_ = yym3538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3532 || yy2arr3532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3540 := z.EncBinary()
				_ = yym3540
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3541 := z.EncBinary()
				_ = yym3541
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3532 || yy2arr3532 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3542 := z.DecBinary()
	_ = yym3542
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3543 := r.ContainerType()
		if yyct3543 == codecSelferValueTypeMap1234 {
			yyl3543 := r.ReadMapStart()
			if yyl3543 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3543, d)
			}
		} else if yyct3543 == codecSelferValueTypeArray1234 {
			yyl3543 := r.ReadArrayStart()
			if yyl3543 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3543, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3544Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3544Slc
	var yyhl3544 bool = l >= 0
	for yyj3544 := 0; ; yyj3544++ {
		if yyhl3544 {
			if yyj3544 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3544Slc = r.DecodeBytes(yys3544Slc, true, true)
		yys3544 := string(yys3544Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3544 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3544)
		} // end switch yys3544
	} // end for yyj3544
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3548 int
	var yyb3548 bool
	var yyhl3548 bool = l >= 0
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3548++
	if yyhl3548 {
		yyb3548 = yyj3548 > l
	} else {
		yyb3548 = r.CheckBreak()
	}
	if yyb3548 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3548++
		if yyhl3548 {
			yyb3548 = yyj3548 > l
		} else {
			yyb3548 = r.CheckBreak()
		}
		if yyb3548 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3548-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3552 := z.EncBinary()
		_ = yym3552
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3553 := !z.EncBinary()
			yy2arr3553 := z.EncBasicHandle().StructToArray
			var yyq3553 [3]bool
			_, _, _ = yysep3553, yyq3553, yy2arr3553
			const yyr3553 bool = false
			yyq3553[0] = x.Kind != ""
			yyq3553[1] = x.APIVersion != ""
			var yynn3553 int
			if yyr3553 || yy2arr3553 {
				r.EncodeArrayStart(3)
			} else {
				yynn3553 = 1
				for _, b := range yyq3553 {
					if b {
						yynn3553++
					}
				}
				r.EncodeMapStart(yynn3553)
				yynn3553 = 0
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[0] {
					yym3555 := z.EncBinary()
					_ = yym3555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3556 := z.EncBinary()
					_ = yym3556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3553[1] {
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3553[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3559 := z.EncBinary()
					_ = yym3559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3561 := z.EncBinary()
				_ = yym3561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3562 := z.EncBinary()
				_ = yym3562
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3553 || yy2arr3553 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3563 := z.DecBinary()
	_ = yym3563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3564 := r.ContainerType()
		if yyct3564 == codecSelferValueTypeMap1234 {
			yyl3564 := r.ReadMapStart()
			if yyl3564 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3564, d)
			}
		} else if yyct3564 == codecSelferValueTypeArray1234 {
			yyl3564 := r.ReadArrayStart()
			if yyl3564 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3564, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3565Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3565Slc
	var yyhl3565 bool = l >= 0
	for yyj3565 := 0; ; yyj3565++ {
		if yyhl3565 {
			if yyj3565 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3565Slc = r.DecodeBytes(yys3565Slc, true, true)
		yys3565 := string(yys3565Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3565 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3565)
		} // end switch yys3565
	} // end for yyj3565
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3569 int
	var yyb3569 bool
	var yyhl3569 bool = l >= 0
	yyj3569++
	if yyhl3569 {
		yyb3569 = yyj3569 > l
	} else {
		yyb3569 = r.CheckBreak()
	}
	if yyb3569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3569++
	if yyhl3569 {
		yyb3569 = yyj3569 > l
	} else {
		yyb3569 = r.CheckBreak()
	}
	if yyb3569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3569++
	if yyhl3569 {
		yyb3569 = yyj3569 > l
	} else {
		yyb3569 = r.CheckBreak()
	}
	if yyb3569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3569++
		if yyhl3569 {
			yyb3569 = yyj3569 > l
		} else {
			yyb3569 = r.CheckBreak()
		}
		if yyb3569 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3569-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3573 := z.EncBinary()
		_ = yym3573
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3574 := !z.EncBinary()
			yy2arr3574 := z.EncBasicHandle().StructToArray
			var yyq3574 [3]bool
			_, _, _ = yysep3574, yyq3574, yy2arr3574
			const yyr3574 bool = false
			yyq3574[0] = x.Kind != ""
			yyq3574[1] = x.APIVersion != ""
			var yynn3574 int
			if yyr3574 || yy2arr3574 {
				r.EncodeArrayStart(3)
			} else {
				yynn3574 = 1
				for _, b := range yyq3574 {
					if b {
						yynn3574++
					}
				}
				r.EncodeMapStart(yynn3574)
				yynn3574 = 0
			}
			if yyr3574 || yy2arr3574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3574[0] {
					yym3576 := z.EncBinary()
					_ = yym3576
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3574[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3577 := z.EncBinary()
					_ = yym3577
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3574 || yy2arr3574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3574[1] {
					yym3579 := z.EncBinary()
					_ = yym3579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3574[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3580 := z.EncBinary()
					_ = yym3580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3574 || yy2arr3574 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3582 := z.EncBinary()
				_ = yym3582
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3583 := z.EncBinary()
				_ = yym3583
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3574 || yy2arr3574 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3584 := z.DecBinary()
	_ = yym3584
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3585 := r.ContainerType()
		if yyct3585 == codecSelferValueTypeMap1234 {
			yyl3585 := r.ReadMapStart()
			if yyl3585 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3585, d)
			}
		} else if yyct3585 == codecSelferValueTypeArray1234 {
			yyl3585 := r.ReadArrayStart()
			if yyl3585 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3585, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3586Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3586Slc
	var yyhl3586 bool = l >= 0
	for yyj3586 := 0; ; yyj3586++ {
		if yyhl3586 {
			if yyj3586 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3586Slc = r.DecodeBytes(yys3586Slc, true, true)
		yys3586 := string(yys3586Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3586 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3586)
		} // end switch yys3586
	} // end for yyj3586
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3590 int
	var yyb3590 bool
	var yyhl3590 bool = l >= 0
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3590++
	if yyhl3590 {
		yyb3590 = yyj3590 > l
	} else {
		yyb3590 = r.CheckBreak()
	}
	if yyb3590 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3590++
		if yyhl3590 {
			yyb3590 = yyj3590 > l
		} else {
			yyb3590 = r.CheckBreak()
		}
		if yyb3590 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3590-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3594 := z.EncBinary()
		_ = yym3594
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3595 := !z.EncBinary()
			yy2arr3595 := z.EncBasicHandle().StructToArray
			var yyq3595 [5]bool
			_, _, _ = yysep3595, yyq3595, yy2arr3595
			const yyr3595 bool = false
			yyq3595[4] = x.Controller != nil
			var yynn3595 int
			if yyr3595 || yy2arr3595 {
				r.EncodeArrayStart(5)
			} else {
				yynn3595 = 4
				for _, b := range yyq3595 {
					if b {
						yynn3595++
					}
				}
				r.EncodeMapStart(yynn3595)
				yynn3595 = 0
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3597 := z.EncBinary()
				_ = yym3597
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3598 := z.EncBinary()
				_ = yym3598
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3600 := z.EncBinary()
				_ = yym3600
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3601 := z.EncBinary()
				_ = yym3601
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3603 := z.EncBinary()
				_ = yym3603
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3604 := z.EncBinary()
				_ = yym3604
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3606 := z.EncBinary()
				_ = yym3606
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3607 := z.EncBinary()
				_ = yym3607
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3595[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3609 := *x.Controller
						yym3610 := z.EncBinary()
						_ = yym3610
						if false {
						} else {
							r.EncodeBool(bool(yy3609))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3595[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3611 := *x.Controller
						yym3612 := z.EncBinary()
						_ = yym3612
						if false {
						} else {
							r.EncodeBool(bool(yy3611))
						}
					}
				}
			}
			if yyr3595 || yy2arr3595 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3613 := z.DecBinary()
	_ = yym3613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3614 := r.ContainerType()
		if yyct3614 == codecSelferValueTypeMap1234 {
			yyl3614 := r.ReadMapStart()
			if yyl3614 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3614, d)
			}
		} else if yyct3614 == codecSelferValueTypeArray1234 {
			yyl3614 := r.ReadArrayStart()
			if yyl3614 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3614, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3615Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3615Slc
	var yyhl3615 bool = l >= 0
	for yyj3615 := 0; ; yyj3615++ {
		if yyhl3615 {
			if yyj3615 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3615Slc = r.DecodeBytes(yys3615Slc, true, true)
		yys3615 := string(yys3615Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3615 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3621 := z.DecBinary()
				_ = yym3621
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3615)
		} // end switch yys3615
	} // end for yyj3615
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3622 int
	var yyb3622 bool
	var yyhl3622 bool = l >= 0
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3622++
	if yyhl3622 {
		yyb3622 = yyj3622 > l
	} else {
		yyb3622 = r.CheckBreak()
	}
	if yyb3622 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3628 := z.DecBinary()
		_ = yym3628
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3622++
		if yyhl3622 {
			yyb3622 = yyj3622 > l
		} else {
			yyb3622 = r.CheckBreak()
		}
		if yyb3622 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3622-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3629 := z.EncBinary()
		_ = yym3629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3630 := !z.EncBinary()
			yy2arr3630 := z.EncBasicHandle().StructToArray
			var yyq3630 [7]bool
			_, _, _ = yysep3630, yyq3630, yy2arr3630
			const yyr3630 bool = false
			yyq3630[0] = x.Kind != ""
			yyq3630[1] = x.Namespace != ""
			yyq3630[2] = x.Name != ""
			yyq3630[3] = x.UID != ""
			yyq3630[4] = x.APIVersion != ""
			yyq3630[5] = x.ResourceVersion != ""
			yyq3630[6] = x.FieldPath != ""
			var yynn3630 int
			if yyr3630 || yy2arr3630 {
				r.EncodeArrayStart(7)
			} else {
				yynn3630 = 0
				for _, b := range yyq3630 {
					if b {
						yynn3630++
					}
				}
				r.EncodeMapStart(yynn3630)
				yynn3630 = 0
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[0] {
					yym3632 := z.EncBinary()
					_ = yym3632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3633 := z.EncBinary()
					_ = yym3633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[1] {
					yym3635 := z.EncBinary()
					_ = yym3635
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3636 := z.EncBinary()
					_ = yym3636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[2] {
					yym3638 := z.EncBinary()
					_ = yym3638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3639 := z.EncBinary()
					_ = yym3639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[3] {
					yym3641 := z.EncBinary()
					_ = yym3641
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3642 := z.EncBinary()
					_ = yym3642
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[4] {
					yym3644 := z.EncBinary()
					_ = yym3644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3645 := z.EncBinary()
					_ = yym3645
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[5] {
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3648 := z.EncBinary()
					_ = yym3648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3630[6] {
					yym3650 := z.EncBinary()
					_ = yym3650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3630[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3651 := z.EncBinary()
					_ = yym3651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3630 || yy2arr3630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3652 := z.DecBinary()
	_ = yym3652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3653 := r.ContainerType()
		if yyct3653 == codecSelferValueTypeMap1234 {
			yyl3653 := r.ReadMapStart()
			if yyl3653 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3653, d)
			}
		} else if yyct3653 == codecSelferValueTypeArray1234 {
			yyl3653 := r.ReadArrayStart()
			if yyl3653 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3653, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3654Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3654Slc
	var yyhl3654 bool = l >= 0
	for yyj3654 := 0; ; yyj3654++ {
		if yyhl3654 {
			if yyj3654 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3654Slc = r.DecodeBytes(yys3654Slc, true, true)
		yys3654 := string(yys3654Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3654 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3654)
		} // end switch yys3654
	} // end for yyj3654
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3662 int
	var yyb3662 bool
	var yyhl3662 bool = l >= 0
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3662++
		if yyhl3662 {
			yyb3662 = yyj3662 > l
		} else {
			yyb3662 = r.CheckBreak()
		}
		if yyb3662 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3662-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3670 := z.EncBinary()
		_ = yym3670
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3671 := !z.EncBinary()
			yy2arr3671 := z.EncBasicHandle().StructToArray
			var yyq3671 [1]bool
			_, _, _ = yysep3671, yyq3671, yy2arr3671
			const yyr3671 bool = false
			var yynn3671 int
			if yyr3671 || yy2arr3671 {
				r.EncodeArrayStart(1)
			} else {
				yynn3671 = 1
				for _, b := range yyq3671 {
					if b {
						yynn3671++
					}
				}
				r.EncodeMapStart(yynn3671)
				yynn3671 = 0
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3673 := z.EncBinary()
				_ = yym3673
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3674 := z.EncBinary()
				_ = yym3674
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3671 || yy2arr3671 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3675 := z.DecBinary()
	_ = yym3675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3676 := r.ContainerType()
		if yyct3676 == codecSelferValueTypeMap1234 {
			yyl3676 := r.ReadMapStart()
			if yyl3676 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3676, d)
			}
		} else if yyct3676 == codecSelferValueTypeArray1234 {
			yyl3676 := r.ReadArrayStart()
			if yyl3676 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3676, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3677Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3677Slc
	var yyhl3677 bool = l >= 0
	for yyj3677 := 0; ; yyj3677++ {
		if yyhl3677 {
			if yyj3677 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3677Slc = r.DecodeBytes(yys3677Slc, true, true)
		yys3677 := string(yys3677Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3677 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3677)
		} // end switch yys3677
	} // end for yyj3677
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3679 int
	var yyb3679 bool
	var yyhl3679 bool = l >= 0
	yyj3679++
	if yyhl3679 {
		yyb3679 = yyj3679 > l
	} else {
		yyb3679 = r.CheckBreak()
	}
	if yyb3679 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3679++
		if yyhl3679 {
			yyb3679 = yyj3679 > l
		} else {
			yyb3679 = r.CheckBreak()
		}
		if yyb3679 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3679-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3681 := z.EncBinary()
		_ = yym3681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3682 := !z.EncBinary()
			yy2arr3682 := z.EncBasicHandle().StructToArray
			var yyq3682 [3]bool
			_, _, _ = yysep3682, yyq3682, yy2arr3682
			const yyr3682 bool = false
			yyq3682[0] = x.Kind != ""
			yyq3682[1] = x.APIVersion != ""
			yyq3682[2] = true
			var yynn3682 int
			if yyr3682 || yy2arr3682 {
				r.EncodeArrayStart(3)
			} else {
				yynn3682 = 0
				for _, b := range yyq3682 {
					if b {
						yynn3682++
					}
				}
				r.EncodeMapStart(yynn3682)
				yynn3682 = 0
			}
			if yyr3682 || yy2arr3682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3682[0] {
					yym3684 := z.EncBinary()
					_ = yym3684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3682[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3685 := z.EncBinary()
					_ = yym3685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3682 || yy2arr3682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3682[1] {
					yym3687 := z.EncBinary()
					_ = yym3687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3682[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3688 := z.EncBinary()
					_ = yym3688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3682 || yy2arr3682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3682[2] {
					yy3690 := &x.Reference
					yy3690.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3682[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3691 := &x.Reference
					yy3691.CodecEncodeSelf(e)
				}
			}
			if yyr3682 || yy2arr3682 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3692 := z.DecBinary()
	_ = yym3692
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3693 := r.ContainerType()
		if yyct3693 == codecSelferValueTypeMap1234 {
			yyl3693 := r.ReadMapStart()
			if yyl3693 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3693, d)
			}
		} else if yyct3693 == codecSelferValueTypeArray1234 {
			yyl3693 := r.ReadArrayStart()
			if yyl3693 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3693, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3694Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3694Slc
	var yyhl3694 bool = l >= 0
	for yyj3694 := 0; ; yyj3694++ {
		if yyhl3694 {
			if yyj3694 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3694Slc = r.DecodeBytes(yys3694Slc, true, true)
		yys3694 := string(yys3694Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3694 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3697 := &x.Reference
				yyv3697.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3694)
		} // end switch yys3694
	} // end for yyj3694
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3698 int
	var yyb3698 bool
	var yyhl3698 bool = l >= 0
	yyj3698++
	if yyhl3698 {
		yyb3698 = yyj3698 > l
	} else {
		yyb3698 = r.CheckBreak()
	}
	if yyb3698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3698++
	if yyhl3698 {
		yyb3698 = yyj3698 > l
	} else {
		yyb3698 = r.CheckBreak()
	}
	if yyb3698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3698++
	if yyhl3698 {
		yyb3698 = yyj3698 > l
	} else {
		yyb3698 = r.CheckBreak()
	}
	if yyb3698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3701 := &x.Reference
		yyv3701.CodecDecodeSelf(d)
	}
	for {
		yyj3698++
		if yyhl3698 {
			yyb3698 = yyj3698 > l
		} else {
			yyb3698 = r.CheckBreak()
		}
		if yyb3698 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3698-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3702 := z.EncBinary()
		_ = yym3702
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3703 := !z.EncBinary()
			yy2arr3703 := z.EncBasicHandle().StructToArray
			var yyq3703 [2]bool
			_, _, _ = yysep3703, yyq3703, yy2arr3703
			const yyr3703 bool = false
			yyq3703[0] = x.Component != ""
			yyq3703[1] = x.Host != ""
			var yynn3703 int
			if yyr3703 || yy2arr3703 {
				r.EncodeArrayStart(2)
			} else {
				yynn3703 = 0
				for _, b := range yyq3703 {
					if b {
						yynn3703++
					}
				}
				r.EncodeMapStart(yynn3703)
				yynn3703 = 0
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3703[0] {
					yym3705 := z.EncBinary()
					_ = yym3705
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3703[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3706 := z.EncBinary()
					_ = yym3706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3703[1] {
					yym3708 := z.EncBinary()
					_ = yym3708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3703[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3709 := z.EncBinary()
					_ = yym3709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3710 := z.DecBinary()
	_ = yym3710
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3711 := r.ContainerType()
		if yyct3711 == codecSelferValueTypeMap1234 {
			yyl3711 := r.ReadMapStart()
			if yyl3711 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3711, d)
			}
		} else if yyct3711 == codecSelferValueTypeArray1234 {
			yyl3711 := r.ReadArrayStart()
			if yyl3711 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3711, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3712Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3712Slc
	var yyhl3712 bool = l >= 0
	for yyj3712 := 0; ; yyj3712++ {
		if yyhl3712 {
			if yyj3712 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3712Slc = r.DecodeBytes(yys3712Slc, true, true)
		yys3712 := string(yys3712Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3712 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3712)
		} // end switch yys3712
	} // end for yyj3712
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3715 int
	var yyb3715 bool
	var yyhl3715 bool = l >= 0
	yyj3715++
	if yyhl3715 {
		yyb3715 = yyj3715 > l
	} else {
		yyb3715 = r.CheckBreak()
	}
	if yyb3715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3715++
	if yyhl3715 {
		yyb3715 = yyj3715 > l
	} else {
		yyb3715 = r.CheckBreak()
	}
	if yyb3715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3715++
		if yyhl3715 {
			yyb3715 = yyj3715 > l
		} else {
			yyb3715 = r.CheckBreak()
		}
		if yyb3715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3718 := z.EncBinary()
		_ = yym3718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3719 := !z.EncBinary()
			yy2arr3719 := z.EncBasicHandle().StructToArray
			var yyq3719 [11]bool
			_, _, _ = yysep3719, yyq3719, yy2arr3719
			const yyr3719 bool = false
			yyq3719[0] = x.Kind != ""
			yyq3719[1] = x.APIVersion != ""
			yyq3719[2] = true
			yyq3719[3] = true
			yyq3719[4] = x.Reason != ""
			yyq3719[5] = x.Message != ""
			yyq3719[6] = true
			yyq3719[7] = true
			yyq3719[8] = true
			yyq3719[9] = x.Count != 0
			yyq3719[10] = x.Type != ""
			var yynn3719 int
			if yyr3719 || yy2arr3719 {
				r.EncodeArrayStart(11)
			} else {
				yynn3719 = 0
				for _, b := range yyq3719 {
					if b {
						yynn3719++
					}
				}
				r.EncodeMapStart(yynn3719)
				yynn3719 = 0
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[0] {
					yym3721 := z.EncBinary()
					_ = yym3721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3719[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3722 := z.EncBinary()
					_ = yym3722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[1] {
					yym3724 := z.EncBinary()
					_ = yym3724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3719[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3725 := z.EncBinary()
					_ = yym3725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[2] {
					yy3727 := &x.ObjectMeta
					yy3727.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3728 := &x.ObjectMeta
					yy3728.CodecEncodeSelf(e)
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[3] {
					yy3730 := &x.InvolvedObject
					yy3730.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3719[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3731 := &x.InvolvedObject
					yy3731.CodecEncodeSelf(e)
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[4] {
					yym3733 := z.EncBinary()
					_ = yym3733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3719[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3734 := z.EncBinary()
					_ = yym3734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[5] {
					yym3736 := z.EncBinary()
					_ = yym3736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3719[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3737 := z.EncBinary()
					_ = yym3737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[6] {
					yy3739 := &x.Source
					yy3739.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3719[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3740 := &x.Source
					yy3740.CodecEncodeSelf(e)
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[7] {
					yy3742 := &x.FirstTimestamp
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3742) {
					} else if yym3743 {
						z.EncBinaryMarshal(yy3742)
					} else if !yym3743 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3742)
					} else {
						z.EncFallback(yy3742)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3719[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3744 := &x.FirstTimestamp
					yym3745 := z.EncBinary()
					_ = yym3745
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3744) {
					} else if yym3745 {
						z.EncBinaryMarshal(yy3744)
					} else if !yym3745 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3744)
					} else {
						z.EncFallback(yy3744)
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[8] {
					yy3747 := &x.LastTimestamp
					yym3748 := z.EncBinary()
					_ = yym3748
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3747) {
					} else if yym3748 {
						z.EncBinaryMarshal(yy3747)
					} else if !yym3748 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3747)
					} else {
						z.EncFallback(yy3747)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3719[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3749 := &x.LastTimestamp
					yym3750 := z.EncBinary()
					_ = yym3750
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3749) {
					} else if yym3750 {
						z.EncBinaryMarshal(yy3749)
					} else if !yym3750 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3749)
					} else {
						z.EncFallback(yy3749)
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[9] {
					yym3752 := z.EncBinary()
					_ = yym3752
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3719[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3753 := z.EncBinary()
					_ = yym3753
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3719[10] {
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3719[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3756 := z.EncBinary()
					_ = yym3756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3719 || yy2arr3719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3757 := z.DecBinary()
	_ = yym3757
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3758 := r.ContainerType()
		if yyct3758 == codecSelferValueTypeMap1234 {
			yyl3758 := r.ReadMapStart()
			if yyl3758 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3758, d)
			}
		} else if yyct3758 == codecSelferValueTypeArray1234 {
			yyl3758 := r.ReadArrayStart()
			if yyl3758 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3758, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3759Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3759Slc
	var yyhl3759 bool = l >= 0
	for yyj3759 := 0; ; yyj3759++ {
		if yyhl3759 {
			if yyj3759 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3759Slc = r.DecodeBytes(yys3759Slc, true, true)
		yys3759 := string(yys3759Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3759 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3762 := &x.ObjectMeta
				yyv3762.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3763 := &x.InvolvedObject
				yyv3763.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3766 := &x.Source
				yyv3766.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3767 := &x.FirstTimestamp
				yym3768 := z.DecBinary()
				_ = yym3768
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3767) {
				} else if yym3768 {
					z.DecBinaryUnmarshal(yyv3767)
				} else if !yym3768 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3767)
				} else {
					z.DecFallback(yyv3767, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3769 := &x.LastTimestamp
				yym3770 := z.DecBinary()
				_ = yym3770
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3769) {
				} else if yym3770 {
					z.DecBinaryUnmarshal(yyv3769)
				} else if !yym3770 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3769)
				} else {
					z.DecFallback(yyv3769, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3759)
		} // end switch yys3759
	} // end for yyj3759
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3773 int
	var yyb3773 bool
	var yyhl3773 bool = l >= 0
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3776 := &x.ObjectMeta
		yyv3776.CodecDecodeSelf(d)
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3777 := &x.InvolvedObject
		yyv3777.CodecDecodeSelf(d)
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3780 := &x.Source
		yyv3780.CodecDecodeSelf(d)
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3781 := &x.FirstTimestamp
		yym3782 := z.DecBinary()
		_ = yym3782
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3781) {
		} else if yym3782 {
			z.DecBinaryUnmarshal(yyv3781)
		} else if !yym3782 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3781)
		} else {
			z.DecFallback(yyv3781, false)
		}
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3783 := &x.LastTimestamp
		yym3784 := z.DecBinary()
		_ = yym3784
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3783) {
		} else if yym3784 {
			z.DecBinaryUnmarshal(yyv3783)
		} else if !yym3784 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3783)
		} else {
			z.DecFallback(yyv3783, false)
		}
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3773++
	if yyhl3773 {
		yyb3773 = yyj3773 > l
	} else {
		yyb3773 = r.CheckBreak()
	}
	if yyb3773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3773++
		if yyhl3773 {
			yyb3773 = yyj3773 > l
		} else {
			yyb3773 = r.CheckBreak()
		}
		if yyb3773 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3773-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3787 := z.EncBinary()
		_ = yym3787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3788 := !z.EncBinary()
			yy2arr3788 := z.EncBasicHandle().StructToArray
			var yyq3788 [4]bool
			_, _, _ = yysep3788, yyq3788, yy2arr3788
			const yyr3788 bool = false
			yyq3788[0] = x.Kind != ""
			yyq3788[1] = x.APIVersion != ""
			yyq3788[2] = true
			var yynn3788 int
			if yyr3788 || yy2arr3788 {
				r.EncodeArrayStart(4)
			} else {
				yynn3788 = 1
				for _, b := range yyq3788 {
					if b {
						yynn3788++
					}
				}
				r.EncodeMapStart(yynn3788)
				yynn3788 = 0
			}
			if yyr3788 || yy2arr3788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3788[0] {
					yym3790 := z.EncBinary()
					_ = yym3790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3788[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3791 := z.EncBinary()
					_ = yym3791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3788 || yy2arr3788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3788[1] {
					yym3793 := z.EncBinary()
					_ = yym3793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3788[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3794 := z.EncBinary()
					_ = yym3794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3788 || yy2arr3788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3788[2] {
					yy3796 := &x.ListMeta
					yym3797 := z.EncBinary()
					_ = yym3797
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3796) {
					} else {
						z.EncFallback(yy3796)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3788[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3798 := &x.ListMeta
					yym3799 := z.EncBinary()
					_ = yym3799
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3798) {
					} else {
						z.EncFallback(yy3798)
					}
				}
			}
			if yyr3788 || yy2arr3788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3801 := z.EncBinary()
					_ = yym3801
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3802 := z.EncBinary()
					_ = yym3802
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3788 || yy2arr3788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3803 := z.DecBinary()
	_ = yym3803
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3804 := r.ContainerType()
		if yyct3804 == codecSelferValueTypeMap1234 {
			yyl3804 := r.ReadMapStart()
			if yyl3804 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3804, d)
			}
		} else if yyct3804 == codecSelferValueTypeArray1234 {
			yyl3804 := r.ReadArrayStart()
			if yyl3804 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3804, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3805Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3805Slc
	var yyhl3805 bool = l >= 0
	for yyj3805 := 0; ; yyj3805++ {
		if yyhl3805 {
			if yyj3805 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3805Slc = r.DecodeBytes(yys3805Slc, true, true)
		yys3805 := string(yys3805Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3805 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3808 := &x.ListMeta
				yym3809 := z.DecBinary()
				_ = yym3809
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3808) {
				} else {
					z.DecFallback(yyv3808, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3810 := &x.Items
				yym3811 := z.DecBinary()
				_ = yym3811
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3810), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3805)
		} // end switch yys3805
	} // end for yyj3805
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3812 int
	var yyb3812 bool
	var yyhl3812 bool = l >= 0
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3815 := &x.ListMeta
		yym3816 := z.DecBinary()
		_ = yym3816
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3815) {
		} else {
			z.DecFallback(yyv3815, false)
		}
	}
	yyj3812++
	if yyhl3812 {
		yyb3812 = yyj3812 > l
	} else {
		yyb3812 = r.CheckBreak()
	}
	if yyb3812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3817 := &x.Items
		yym3818 := z.DecBinary()
		_ = yym3818
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3817), d)
		}
	}
	for {
		yyj3812++
		if yyhl3812 {
			yyb3812 = yyj3812 > l
		} else {
			yyb3812 = r.CheckBreak()
		}
		if yyb3812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3819 := z.EncBinary()
		_ = yym3819
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3820 := !z.EncBinary()
			yy2arr3820 := z.EncBasicHandle().StructToArray
			var yyq3820 [4]bool
			_, _, _ = yysep3820, yyq3820, yy2arr3820
			const yyr3820 bool = false
			yyq3820[0] = x.Kind != ""
			yyq3820[1] = x.APIVersion != ""
			yyq3820[2] = true
			var yynn3820 int
			if yyr3820 || yy2arr3820 {
				r.EncodeArrayStart(4)
			} else {
				yynn3820 = 1
				for _, b := range yyq3820 {
					if b {
						yynn3820++
					}
				}
				r.EncodeMapStart(yynn3820)
				yynn3820 = 0
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[0] {
					yym3822 := z.EncBinary()
					_ = yym3822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3823 := z.EncBinary()
					_ = yym3823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[1] {
					yym3825 := z.EncBinary()
					_ = yym3825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3820[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3826 := z.EncBinary()
					_ = yym3826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3820[2] {
					yy3828 := &x.ListMeta
					yym3829 := z.EncBinary()
					_ = yym3829
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3828) {
					} else {
						z.EncFallback(yy3828)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3820[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3830 := &x.ListMeta
					yym3831 := z.EncBinary()
					_ = yym3831
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3830) {
					} else {
						z.EncFallback(yy3830)
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3833 := z.EncBinary()
					_ = yym3833
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3834 := z.EncBinary()
					_ = yym3834
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3820 || yy2arr3820 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3835 := z.DecBinary()
	_ = yym3835
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3836 := r.ContainerType()
		if yyct3836 == codecSelferValueTypeMap1234 {
			yyl3836 := r.ReadMapStart()
			if yyl3836 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3836, d)
			}
		} else if yyct3836 == codecSelferValueTypeArray1234 {
			yyl3836 := r.ReadArrayStart()
			if yyl3836 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3836, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3837Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3837Slc
	var yyhl3837 bool = l >= 0
	for yyj3837 := 0; ; yyj3837++ {
		if yyhl3837 {
			if yyj3837 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3837Slc = r.DecodeBytes(yys3837Slc, true, true)
		yys3837 := string(yys3837Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3837 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3840 := &x.ListMeta
				yym3841 := z.DecBinary()
				_ = yym3841
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3840) {
				} else {
					z.DecFallback(yyv3840, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3842 := &x.Items
				yym3843 := z.DecBinary()
				_ = yym3843
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3842), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3837)
		} // end switch yys3837
	} // end for yyj3837
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3844 int
	var yyb3844 bool
	var yyhl3844 bool = l >= 0
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3847 := &x.ListMeta
		yym3848 := z.DecBinary()
		_ = yym3848
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3847) {
		} else {
			z.DecFallback(yyv3847, false)
		}
	}
	yyj3844++
	if yyhl3844 {
		yyb3844 = yyj3844 > l
	} else {
		yyb3844 = r.CheckBreak()
	}
	if yyb3844 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3849 := &x.Items
		yym3850 := z.DecBinary()
		_ = yym3850
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3849), d)
		}
	}
	for {
		yyj3844++
		if yyhl3844 {
			yyb3844 = yyj3844 > l
		} else {
			yyb3844 = r.CheckBreak()
		}
		if yyb3844 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3844-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3851 := z.EncBinary()
	_ = yym3851
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3852 := z.DecBinary()
	_ = yym3852
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3853 := z.EncBinary()
		_ = yym3853
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3854 := !z.EncBinary()
			yy2arr3854 := z.EncBasicHandle().StructToArray
			var yyq3854 [6]bool
			_, _, _ = yysep3854, yyq3854, yy2arr3854
			const yyr3854 bool = false
			yyq3854[0] = x.Type != ""
			yyq3854[1] = len(x.Max) != 0
			yyq3854[2] = len(x.Min) != 0
			yyq3854[3] = len(x.Default) != 0
			yyq3854[4] = len(x.DefaultRequest) != 0
			yyq3854[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3854 int
			if yyr3854 || yy2arr3854 {
				r.EncodeArrayStart(6)
			} else {
				yynn3854 = 0
				for _, b := range yyq3854 {
					if b {
						yynn3854++
					}
				}
				r.EncodeMapStart(yynn3854)
				yynn3854 = 0
			}
			if yyr3854 || yy2arr3854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3854[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3854[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3854 || yy2arr3854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3854[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3854[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3854 || yy2arr3854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3854[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3854[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3854 || yy2arr3854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3854[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3854[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3854 || yy2arr3854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3854[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3854[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3854 || yy2arr3854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3854[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3854[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3854 || yy2arr3854 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3861 := z.DecBinary()
	_ = yym3861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3862 := r.ContainerType()
		if yyct3862 == codecSelferValueTypeMap1234 {
			yyl3862 := r.ReadMapStart()
			if yyl3862 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3862, d)
			}
		} else if yyct3862 == codecSelferValueTypeArray1234 {
			yyl3862 := r.ReadArrayStart()
			if yyl3862 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3863Slc
	var yyhl3863 bool = l >= 0
	for yyj3863 := 0; ; yyj3863++ {
		if yyhl3863 {
			if yyj3863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3863Slc = r.DecodeBytes(yys3863Slc, true, true)
		yys3863 := string(yys3863Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3863 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3865 := &x.Max
				yyv3865.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3866 := &x.Min
				yyv3866.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3867 := &x.Default
				yyv3867.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3868 := &x.DefaultRequest
				yyv3868.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3869 := &x.MaxLimitRequestRatio
				yyv3869.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3863)
		} // end switch yys3863
	} // end for yyj3863
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3870 int
	var yyb3870 bool
	var yyhl3870 bool = l >= 0
	yyj3870++
	if yyhl3870 {
		yyb3870 = yyj3870 > l
	} else {
		yyb3870 = r.CheckBreak()
	}
	if yyb3870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3870++
	if yyhl3870 {
		yyb3870 = yyj3870 > l
	} else {
		yyb3870 = r.CheckBreak()
	}
	if yyb3870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3872 := &x.Max
		yyv3872.CodecDecodeSelf(d)
	}
	yyj3870++
	if yyhl3870 {
		yyb3870 = yyj3870 > l
	} else {
		yyb3870 = r.CheckBreak()
	}
	if yyb3870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3873 := &x.Min
		yyv3873.CodecDecodeSelf(d)
	}
	yyj3870++
	if yyhl3870 {
		yyb3870 = yyj3870 > l
	} else {
		yyb3870 = r.CheckBreak()
	}
	if yyb3870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3874 := &x.Default
		yyv3874.CodecDecodeSelf(d)
	}
	yyj3870++
	if yyhl3870 {
		yyb3870 = yyj3870 > l
	} else {
		yyb3870 = r.CheckBreak()
	}
	if yyb3870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3875 := &x.DefaultRequest
		yyv3875.CodecDecodeSelf(d)
	}
	yyj3870++
	if yyhl3870 {
		yyb3870 = yyj3870 > l
	} else {
		yyb3870 = r.CheckBreak()
	}
	if yyb3870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3876 := &x.MaxLimitRequestRatio
		yyv3876.CodecDecodeSelf(d)
	}
	for {
		yyj3870++
		if yyhl3870 {
			yyb3870 = yyj3870 > l
		} else {
			yyb3870 = r.CheckBreak()
		}
		if yyb3870 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3870-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3877 := z.EncBinary()
		_ = yym3877
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3878 := !z.EncBinary()
			yy2arr3878 := z.EncBasicHandle().StructToArray
			var yyq3878 [1]bool
			_, _, _ = yysep3878, yyq3878, yy2arr3878
			const yyr3878 bool = false
			var yynn3878 int
			if yyr3878 || yy2arr3878 {
				r.EncodeArrayStart(1)
			} else {
				yynn3878 = 1
				for _, b := range yyq3878 {
					if b {
						yynn3878++
					}
				}
				r.EncodeMapStart(yynn3878)
				yynn3878 = 0
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3880 := z.EncBinary()
					_ = yym3880
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3881 := z.EncBinary()
					_ = yym3881
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3878 || yy2arr3878 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3882 := z.DecBinary()
	_ = yym3882
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3883 := r.ContainerType()
		if yyct3883 == codecSelferValueTypeMap1234 {
			yyl3883 := r.ReadMapStart()
			if yyl3883 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3883, d)
			}
		} else if yyct3883 == codecSelferValueTypeArray1234 {
			yyl3883 := r.ReadArrayStart()
			if yyl3883 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3883, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3884Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3884Slc
	var yyhl3884 bool = l >= 0
	for yyj3884 := 0; ; yyj3884++ {
		if yyhl3884 {
			if yyj3884 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3884Slc = r.DecodeBytes(yys3884Slc, true, true)
		yys3884 := string(yys3884Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3884 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3885 := &x.Limits
				yym3886 := z.DecBinary()
				_ = yym3886
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3885), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3884)
		} // end switch yys3884
	} // end for yyj3884
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3887 int
	var yyb3887 bool
	var yyhl3887 bool = l >= 0
	yyj3887++
	if yyhl3887 {
		yyb3887 = yyj3887 > l
	} else {
		yyb3887 = r.CheckBreak()
	}
	if yyb3887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3888 := &x.Limits
		yym3889 := z.DecBinary()
		_ = yym3889
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3888), d)
		}
	}
	for {
		yyj3887++
		if yyhl3887 {
			yyb3887 = yyj3887 > l
		} else {
			yyb3887 = r.CheckBreak()
		}
		if yyb3887 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3887-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3890 := z.EncBinary()
		_ = yym3890
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3891 := !z.EncBinary()
			yy2arr3891 := z.EncBasicHandle().StructToArray
			var yyq3891 [4]bool
			_, _, _ = yysep3891, yyq3891, yy2arr3891
			const yyr3891 bool = false
			yyq3891[0] = x.Kind != ""
			yyq3891[1] = x.APIVersion != ""
			yyq3891[2] = true
			yyq3891[3] = true
			var yynn3891 int
			if yyr3891 || yy2arr3891 {
				r.EncodeArrayStart(4)
			} else {
				yynn3891 = 0
				for _, b := range yyq3891 {
					if b {
						yynn3891++
					}
				}
				r.EncodeMapStart(yynn3891)
				yynn3891 = 0
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3891[0] {
					yym3893 := z.EncBinary()
					_ = yym3893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3891[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3894 := z.EncBinary()
					_ = yym3894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3891[1] {
					yym3896 := z.EncBinary()
					_ = yym3896
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3891[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3897 := z.EncBinary()
					_ = yym3897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3891[2] {
					yy3899 := &x.ObjectMeta
					yy3899.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3891[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3900 := &x.ObjectMeta
					yy3900.CodecEncodeSelf(e)
				}
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3891[3] {
					yy3902 := &x.Spec
					yy3902.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3891[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3903 := &x.Spec
					yy3903.CodecEncodeSelf(e)
				}
			}
			if yyr3891 || yy2arr3891 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3904 := z.DecBinary()
	_ = yym3904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3905 := r.ContainerType()
		if yyct3905 == codecSelferValueTypeMap1234 {
			yyl3905 := r.ReadMapStart()
			if yyl3905 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3905, d)
			}
		} else if yyct3905 == codecSelferValueTypeArray1234 {
			yyl3905 := r.ReadArrayStart()
			if yyl3905 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3906Slc
	var yyhl3906 bool = l >= 0
	for yyj3906 := 0; ; yyj3906++ {
		if yyhl3906 {
			if yyj3906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3906Slc = r.DecodeBytes(yys3906Slc, true, true)
		yys3906 := string(yys3906Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3906 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3909 := &x.ObjectMeta
				yyv3909.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3910 := &x.Spec
				yyv3910.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3906)
		} // end switch yys3906
	} // end for yyj3906
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3911 int
	var yyb3911 bool
	var yyhl3911 bool = l >= 0
	yyj3911++
	if yyhl3911 {
		yyb3911 = yyj3911 > l
	} else {
		yyb3911 = r.CheckBreak()
	}
	if yyb3911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3911++
	if yyhl3911 {
		yyb3911 = yyj3911 > l
	} else {
		yyb3911 = r.CheckBreak()
	}
	if yyb3911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3911++
	if yyhl3911 {
		yyb3911 = yyj3911 > l
	} else {
		yyb3911 = r.CheckBreak()
	}
	if yyb3911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3914 := &x.ObjectMeta
		yyv3914.CodecDecodeSelf(d)
	}
	yyj3911++
	if yyhl3911 {
		yyb3911 = yyj3911 > l
	} else {
		yyb3911 = r.CheckBreak()
	}
	if yyb3911 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3915 := &x.Spec
		yyv3915.CodecDecodeSelf(d)
	}
	for {
		yyj3911++
		if yyhl3911 {
			yyb3911 = yyj3911 > l
		} else {
			yyb3911 = r.CheckBreak()
		}
		if yyb3911 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3911-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3916 := z.EncBinary()
		_ = yym3916
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3917 := !z.EncBinary()
			yy2arr3917 := z.EncBasicHandle().StructToArray
			var yyq3917 [4]bool
			_, _, _ = yysep3917, yyq3917, yy2arr3917
			const yyr3917 bool = false
			yyq3917[0] = x.Kind != ""
			yyq3917[1] = x.APIVersion != ""
			yyq3917[2] = true
			var yynn3917 int
			if yyr3917 || yy2arr3917 {
				r.EncodeArrayStart(4)
			} else {
				yynn3917 = 1
				for _, b := range yyq3917 {
					if b {
						yynn3917++
					}
				}
				r.EncodeMapStart(yynn3917)
				yynn3917 = 0
			}
			if yyr3917 || yy2arr3917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3917[0] {
					yym3919 := z.EncBinary()
					_ = yym3919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3917[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3920 := z.EncBinary()
					_ = yym3920
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3917 || yy2arr3917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3917[1] {
					yym3922 := z.EncBinary()
					_ = yym3922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3917[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3917 || yy2arr3917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3917[2] {
					yy3925 := &x.ListMeta
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3925) {
					} else {
						z.EncFallback(yy3925)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3917[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3927 := &x.ListMeta
					yym3928 := z.EncBinary()
					_ = yym3928
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3927) {
					} else {
						z.EncFallback(yy3927)
					}
				}
			}
			if yyr3917 || yy2arr3917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3930 := z.EncBinary()
					_ = yym3930
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3931 := z.EncBinary()
					_ = yym3931
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3917 || yy2arr3917 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3932 := z.DecBinary()
	_ = yym3932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3933 := r.ContainerType()
		if yyct3933 == codecSelferValueTypeMap1234 {
			yyl3933 := r.ReadMapStart()
			if yyl3933 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3933, d)
			}
		} else if yyct3933 == codecSelferValueTypeArray1234 {
			yyl3933 := r.ReadArrayStart()
			if yyl3933 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3934Slc
	var yyhl3934 bool = l >= 0
	for yyj3934 := 0; ; yyj3934++ {
		if yyhl3934 {
			if yyj3934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3934Slc = r.DecodeBytes(yys3934Slc, true, true)
		yys3934 := string(yys3934Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3934 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3937 := &x.ListMeta
				yym3938 := z.DecBinary()
				_ = yym3938
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3937) {
				} else {
					z.DecFallback(yyv3937, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3939 := &x.Items
				yym3940 := z.DecBinary()
				_ = yym3940
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3939), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3934)
		} // end switch yys3934
	} // end for yyj3934
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3941 int
	var yyb3941 bool
	var yyhl3941 bool = l >= 0
	yyj3941++
	if yyhl3941 {
		yyb3941 = yyj3941 > l
	} else {
		yyb3941 = r.CheckBreak()
	}
	if yyb3941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3941++
	if yyhl3941 {
		yyb3941 = yyj3941 > l
	} else {
		yyb3941 = r.CheckBreak()
	}
	if yyb3941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3941++
	if yyhl3941 {
		yyb3941 = yyj3941 > l
	} else {
		yyb3941 = r.CheckBreak()
	}
	if yyb3941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3944 := &x.ListMeta
		yym3945 := z.DecBinary()
		_ = yym3945
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3944) {
		} else {
			z.DecFallback(yyv3944, false)
		}
	}
	yyj3941++
	if yyhl3941 {
		yyb3941 = yyj3941 > l
	} else {
		yyb3941 = r.CheckBreak()
	}
	if yyb3941 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3946 := &x.Items
		yym3947 := z.DecBinary()
		_ = yym3947
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3946), d)
		}
	}
	for {
		yyj3941++
		if yyhl3941 {
			yyb3941 = yyj3941 > l
		} else {
			yyb3941 = r.CheckBreak()
		}
		if yyb3941 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3941-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3948 := z.EncBinary()
	_ = yym3948
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3949 := z.DecBinary()
	_ = yym3949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3950 := z.EncBinary()
		_ = yym3950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3951 := !z.EncBinary()
			yy2arr3951 := z.EncBasicHandle().StructToArray
			var yyq3951 [2]bool
			_, _, _ = yysep3951, yyq3951, yy2arr3951
			const yyr3951 bool = false
			yyq3951[0] = len(x.Hard) != 0
			yyq3951[1] = len(x.Scopes) != 0
			var yynn3951 int
			if yyr3951 || yy2arr3951 {
				r.EncodeArrayStart(2)
			} else {
				yynn3951 = 0
				for _, b := range yyq3951 {
					if b {
						yynn3951++
					}
				}
				r.EncodeMapStart(yynn3951)
				yynn3951 = 0
			}
			if yyr3951 || yy2arr3951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3951[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3951[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3951 || yy2arr3951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3951[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3954 := z.EncBinary()
						_ = yym3954
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3951[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym3955 := z.EncBinary()
						_ = yym3955
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr3951 || yy2arr3951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3956 := z.DecBinary()
	_ = yym3956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3957 := r.ContainerType()
		if yyct3957 == codecSelferValueTypeMap1234 {
			yyl3957 := r.ReadMapStart()
			if yyl3957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3957, d)
			}
		} else if yyct3957 == codecSelferValueTypeArray1234 {
			yyl3957 := r.ReadArrayStart()
			if yyl3957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3958Slc
	var yyhl3958 bool = l >= 0
	for yyj3958 := 0; ; yyj3958++ {
		if yyhl3958 {
			if yyj3958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3958Slc = r.DecodeBytes(yys3958Slc, true, true)
		yys3958 := string(yys3958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3958 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3959 := &x.Hard
				yyv3959.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv3960 := &x.Scopes
				yym3961 := z.DecBinary()
				_ = yym3961
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3960), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3958)
		} // end switch yys3958
	} // end for yyj3958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3962 int
	var yyb3962 bool
	var yyhl3962 bool = l >= 0
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3963 := &x.Hard
		yyv3963.CodecDecodeSelf(d)
	}
	yyj3962++
	if yyhl3962 {
		yyb3962 = yyj3962 > l
	} else {
		yyb3962 = r.CheckBreak()
	}
	if yyb3962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv3964 := &x.Scopes
		yym3965 := z.DecBinary()
		_ = yym3965
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv3964), d)
		}
	}
	for {
		yyj3962++
		if yyhl3962 {
			yyb3962 = yyj3962 > l
		} else {
			yyb3962 = r.CheckBreak()
		}
		if yyb3962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3966 := z.EncBinary()
		_ = yym3966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3967 := !z.EncBinary()
			yy2arr3967 := z.EncBasicHandle().StructToArray
			var yyq3967 [2]bool
			_, _, _ = yysep3967, yyq3967, yy2arr3967
			const yyr3967 bool = false
			yyq3967[0] = len(x.Hard) != 0
			yyq3967[1] = len(x.Used) != 0
			var yynn3967 int
			if yyr3967 || yy2arr3967 {
				r.EncodeArrayStart(2)
			} else {
				yynn3967 = 0
				for _, b := range yyq3967 {
					if b {
						yynn3967++
					}
				}
				r.EncodeMapStart(yynn3967)
				yynn3967 = 0
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3967[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3967[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3967[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3967 || yy2arr3967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3970 := z.DecBinary()
	_ = yym3970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3971 := r.ContainerType()
		if yyct3971 == codecSelferValueTypeMap1234 {
			yyl3971 := r.ReadMapStart()
			if yyl3971 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3971, d)
			}
		} else if yyct3971 == codecSelferValueTypeArray1234 {
			yyl3971 := r.ReadArrayStart()
			if yyl3971 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3972Slc
	var yyhl3972 bool = l >= 0
	for yyj3972 := 0; ; yyj3972++ {
		if yyhl3972 {
			if yyj3972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3972Slc = r.DecodeBytes(yys3972Slc, true, true)
		yys3972 := string(yys3972Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3972 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3973 := &x.Hard
				yyv3973.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3974 := &x.Used
				yyv3974.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3972)
		} // end switch yys3972
	} // end for yyj3972
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3975 int
	var yyb3975 bool
	var yyhl3975 bool = l >= 0
	yyj3975++
	if yyhl3975 {
		yyb3975 = yyj3975 > l
	} else {
		yyb3975 = r.CheckBreak()
	}
	if yyb3975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3976 := &x.Hard
		yyv3976.CodecDecodeSelf(d)
	}
	yyj3975++
	if yyhl3975 {
		yyb3975 = yyj3975 > l
	} else {
		yyb3975 = r.CheckBreak()
	}
	if yyb3975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3977 := &x.Used
		yyv3977.CodecDecodeSelf(d)
	}
	for {
		yyj3975++
		if yyhl3975 {
			yyb3975 = yyj3975 > l
		} else {
			yyb3975 = r.CheckBreak()
		}
		if yyb3975 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3975-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3978 := z.EncBinary()
		_ = yym3978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3979 := !z.EncBinary()
			yy2arr3979 := z.EncBasicHandle().StructToArray
			var yyq3979 [5]bool
			_, _, _ = yysep3979, yyq3979, yy2arr3979
			const yyr3979 bool = false
			yyq3979[0] = x.Kind != ""
			yyq3979[1] = x.APIVersion != ""
			yyq3979[2] = true
			yyq3979[3] = true
			yyq3979[4] = true
			var yynn3979 int
			if yyr3979 || yy2arr3979 {
				r.EncodeArrayStart(5)
			} else {
				yynn3979 = 0
				for _, b := range yyq3979 {
					if b {
						yynn3979++
					}
				}
				r.EncodeMapStart(yynn3979)
				yynn3979 = 0
			}
			if yyr3979 || yy2arr3979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3979[0] {
					yym3981 := z.EncBinary()
					_ = yym3981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3979[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3982 := z.EncBinary()
					_ = yym3982
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3979 || yy2arr3979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3979[1] {
					yym3984 := z.EncBinary()
					_ = yym3984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3979[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3985 := z.EncBinary()
					_ = yym3985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3979 || yy2arr3979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3979[2] {
					yy3987 := &x.ObjectMeta
					yy3987.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3979[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3988 := &x.ObjectMeta
					yy3988.CodecEncodeSelf(e)
				}
			}
			if yyr3979 || yy2arr3979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3979[3] {
					yy3990 := &x.Spec
					yy3990.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3979[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3991 := &x.Spec
					yy3991.CodecEncodeSelf(e)
				}
			}
			if yyr3979 || yy2arr3979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3979[4] {
					yy3993 := &x.Status
					yy3993.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3979[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3994 := &x.Status
					yy3994.CodecEncodeSelf(e)
				}
			}
			if yyr3979 || yy2arr3979 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3995 := z.DecBinary()
	_ = yym3995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3996 := r.ContainerType()
		if yyct3996 == codecSelferValueTypeMap1234 {
			yyl3996 := r.ReadMapStart()
			if yyl3996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3996, d)
			}
		} else if yyct3996 == codecSelferValueTypeArray1234 {
			yyl3996 := r.ReadArrayStart()
			if yyl3996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3997Slc
	var yyhl3997 bool = l >= 0
	for yyj3997 := 0; ; yyj3997++ {
		if yyhl3997 {
			if yyj3997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3997Slc = r.DecodeBytes(yys3997Slc, true, true)
		yys3997 := string(yys3997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3997 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4000 := &x.ObjectMeta
				yyv4000.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4001 := &x.Spec
				yyv4001.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4002 := &x.Status
				yyv4002.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3997)
		} // end switch yys3997
	} // end for yyj3997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4003 int
	var yyb4003 bool
	var yyhl4003 bool = l >= 0
	yyj4003++
	if yyhl4003 {
		yyb4003 = yyj4003 > l
	} else {
		yyb4003 = r.CheckBreak()
	}
	if yyb4003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4003++
	if yyhl4003 {
		yyb4003 = yyj4003 > l
	} else {
		yyb4003 = r.CheckBreak()
	}
	if yyb4003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4003++
	if yyhl4003 {
		yyb4003 = yyj4003 > l
	} else {
		yyb4003 = r.CheckBreak()
	}
	if yyb4003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4006 := &x.ObjectMeta
		yyv4006.CodecDecodeSelf(d)
	}
	yyj4003++
	if yyhl4003 {
		yyb4003 = yyj4003 > l
	} else {
		yyb4003 = r.CheckBreak()
	}
	if yyb4003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4007 := &x.Spec
		yyv4007.CodecDecodeSelf(d)
	}
	yyj4003++
	if yyhl4003 {
		yyb4003 = yyj4003 > l
	} else {
		yyb4003 = r.CheckBreak()
	}
	if yyb4003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4008 := &x.Status
		yyv4008.CodecDecodeSelf(d)
	}
	for {
		yyj4003++
		if yyhl4003 {
			yyb4003 = yyj4003 > l
		} else {
			yyb4003 = r.CheckBreak()
		}
		if yyb4003 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4003-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4009 := z.EncBinary()
		_ = yym4009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4010 := !z.EncBinary()
			yy2arr4010 := z.EncBasicHandle().StructToArray
			var yyq4010 [4]bool
			_, _, _ = yysep4010, yyq4010, yy2arr4010
			const yyr4010 bool = false
			yyq4010[0] = x.Kind != ""
			yyq4010[1] = x.APIVersion != ""
			yyq4010[2] = true
			var yynn4010 int
			if yyr4010 || yy2arr4010 {
				r.EncodeArrayStart(4)
			} else {
				yynn4010 = 1
				for _, b := range yyq4010 {
					if b {
						yynn4010++
					}
				}
				r.EncodeMapStart(yynn4010)
				yynn4010 = 0
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[0] {
					yym4012 := z.EncBinary()
					_ = yym4012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4010[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4013 := z.EncBinary()
					_ = yym4013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[1] {
					yym4015 := z.EncBinary()
					_ = yym4015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4010[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4016 := z.EncBinary()
					_ = yym4016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4010[2] {
					yy4018 := &x.ListMeta
					yym4019 := z.EncBinary()
					_ = yym4019
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4018) {
					} else {
						z.EncFallback(yy4018)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4010[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4020 := &x.ListMeta
					yym4021 := z.EncBinary()
					_ = yym4021
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4020) {
					} else {
						z.EncFallback(yy4020)
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4023 := z.EncBinary()
					_ = yym4023
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4024 := z.EncBinary()
					_ = yym4024
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4010 || yy2arr4010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4025 := z.DecBinary()
	_ = yym4025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4026 := r.ContainerType()
		if yyct4026 == codecSelferValueTypeMap1234 {
			yyl4026 := r.ReadMapStart()
			if yyl4026 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4026, d)
			}
		} else if yyct4026 == codecSelferValueTypeArray1234 {
			yyl4026 := r.ReadArrayStart()
			if yyl4026 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4026, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4027Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4027Slc
	var yyhl4027 bool = l >= 0
	for yyj4027 := 0; ; yyj4027++ {
		if yyhl4027 {
			if yyj4027 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4027Slc = r.DecodeBytes(yys4027Slc, true, true)
		yys4027 := string(yys4027Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4027 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4030 := &x.ListMeta
				yym4031 := z.DecBinary()
				_ = yym4031
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4030) {
				} else {
					z.DecFallback(yyv4030, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4032 := &x.Items
				yym4033 := z.DecBinary()
				_ = yym4033
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4032), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4027)
		} // end switch yys4027
	} // end for yyj4027
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4034 int
	var yyb4034 bool
	var yyhl4034 bool = l >= 0
	yyj4034++
	if yyhl4034 {
		yyb4034 = yyj4034 > l
	} else {
		yyb4034 = r.CheckBreak()
	}
	if yyb4034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4034++
	if yyhl4034 {
		yyb4034 = yyj4034 > l
	} else {
		yyb4034 = r.CheckBreak()
	}
	if yyb4034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4034++
	if yyhl4034 {
		yyb4034 = yyj4034 > l
	} else {
		yyb4034 = r.CheckBreak()
	}
	if yyb4034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4037 := &x.ListMeta
		yym4038 := z.DecBinary()
		_ = yym4038
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4037) {
		} else {
			z.DecFallback(yyv4037, false)
		}
	}
	yyj4034++
	if yyhl4034 {
		yyb4034 = yyj4034 > l
	} else {
		yyb4034 = r.CheckBreak()
	}
	if yyb4034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4039 := &x.Items
		yym4040 := z.DecBinary()
		_ = yym4040
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4039), d)
		}
	}
	for {
		yyj4034++
		if yyhl4034 {
			yyb4034 = yyj4034 > l
		} else {
			yyb4034 = r.CheckBreak()
		}
		if yyb4034 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4034-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4041 := z.EncBinary()
		_ = yym4041
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4042 := !z.EncBinary()
			yy2arr4042 := z.EncBasicHandle().StructToArray
			var yyq4042 [5]bool
			_, _, _ = yysep4042, yyq4042, yy2arr4042
			const yyr4042 bool = false
			yyq4042[0] = x.Kind != ""
			yyq4042[1] = x.APIVersion != ""
			yyq4042[2] = true
			yyq4042[3] = len(x.Data) != 0
			yyq4042[4] = x.Type != ""
			var yynn4042 int
			if yyr4042 || yy2arr4042 {
				r.EncodeArrayStart(5)
			} else {
				yynn4042 = 0
				for _, b := range yyq4042 {
					if b {
						yynn4042++
					}
				}
				r.EncodeMapStart(yynn4042)
				yynn4042 = 0
			}
			if yyr4042 || yy2arr4042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4042[0] {
					yym4044 := z.EncBinary()
					_ = yym4044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4042[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4045 := z.EncBinary()
					_ = yym4045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4042 || yy2arr4042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4042[1] {
					yym4047 := z.EncBinary()
					_ = yym4047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4042[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4048 := z.EncBinary()
					_ = yym4048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4042 || yy2arr4042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4042[2] {
					yy4050 := &x.ObjectMeta
					yy4050.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4042[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4051 := &x.ObjectMeta
					yy4051.CodecEncodeSelf(e)
				}
			}
			if yyr4042 || yy2arr4042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4042[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4053 := z.EncBinary()
						_ = yym4053
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4042[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4054 := z.EncBinary()
						_ = yym4054
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4042 || yy2arr4042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4042[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4042[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4042 || yy2arr4042 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4056 := z.DecBinary()
	_ = yym4056
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4057 := r.ContainerType()
		if yyct4057 == codecSelferValueTypeMap1234 {
			yyl4057 := r.ReadMapStart()
			if yyl4057 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4057, d)
			}
		} else if yyct4057 == codecSelferValueTypeArray1234 {
			yyl4057 := r.ReadArrayStart()
			if yyl4057 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4057, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4058Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4058Slc
	var yyhl4058 bool = l >= 0
	for yyj4058 := 0; ; yyj4058++ {
		if yyhl4058 {
			if yyj4058 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4058Slc = r.DecodeBytes(yys4058Slc, true, true)
		yys4058 := string(yys4058Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4058 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4061 := &x.ObjectMeta
				yyv4061.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4062 := &x.Data
				yym4063 := z.DecBinary()
				_ = yym4063
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4062), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4058)
		} // end switch yys4058
	} // end for yyj4058
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4065 int
	var yyb4065 bool
	var yyhl4065 bool = l >= 0
	yyj4065++
	if yyhl4065 {
		yyb4065 = yyj4065 > l
	} else {
		yyb4065 = r.CheckBreak()
	}
	if yyb4065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4065++
	if yyhl4065 {
		yyb4065 = yyj4065 > l
	} else {
		yyb4065 = r.CheckBreak()
	}
	if yyb4065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4065++
	if yyhl4065 {
		yyb4065 = yyj4065 > l
	} else {
		yyb4065 = r.CheckBreak()
	}
	if yyb4065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4068 := &x.ObjectMeta
		yyv4068.CodecDecodeSelf(d)
	}
	yyj4065++
	if yyhl4065 {
		yyb4065 = yyj4065 > l
	} else {
		yyb4065 = r.CheckBreak()
	}
	if yyb4065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4069 := &x.Data
		yym4070 := z.DecBinary()
		_ = yym4070
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4069), d)
		}
	}
	yyj4065++
	if yyhl4065 {
		yyb4065 = yyj4065 > l
	} else {
		yyb4065 = r.CheckBreak()
	}
	if yyb4065 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4065++
		if yyhl4065 {
			yyb4065 = yyj4065 > l
		} else {
			yyb4065 = r.CheckBreak()
		}
		if yyb4065 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4065-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4072 := z.EncBinary()
	_ = yym4072
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4073 := z.DecBinary()
	_ = yym4073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4074 := z.EncBinary()
		_ = yym4074
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4075 := !z.EncBinary()
			yy2arr4075 := z.EncBasicHandle().StructToArray
			var yyq4075 [4]bool
			_, _, _ = yysep4075, yyq4075, yy2arr4075
			const yyr4075 bool = false
			yyq4075[0] = x.Kind != ""
			yyq4075[1] = x.APIVersion != ""
			yyq4075[2] = true
			var yynn4075 int
			if yyr4075 || yy2arr4075 {
				r.EncodeArrayStart(4)
			} else {
				yynn4075 = 1
				for _, b := range yyq4075 {
					if b {
						yynn4075++
					}
				}
				r.EncodeMapStart(yynn4075)
				yynn4075 = 0
			}
			if yyr4075 || yy2arr4075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4075[0] {
					yym4077 := z.EncBinary()
					_ = yym4077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4075[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4078 := z.EncBinary()
					_ = yym4078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4075 || yy2arr4075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4075[1] {
					yym4080 := z.EncBinary()
					_ = yym4080
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4075[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4081 := z.EncBinary()
					_ = yym4081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4075 || yy2arr4075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4075[2] {
					yy4083 := &x.ListMeta
					yym4084 := z.EncBinary()
					_ = yym4084
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4083) {
					} else {
						z.EncFallback(yy4083)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4075[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4085 := &x.ListMeta
					yym4086 := z.EncBinary()
					_ = yym4086
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4085) {
					} else {
						z.EncFallback(yy4085)
					}
				}
			}
			if yyr4075 || yy2arr4075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4088 := z.EncBinary()
					_ = yym4088
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4089 := z.EncBinary()
					_ = yym4089
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4075 || yy2arr4075 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4090 := z.DecBinary()
	_ = yym4090
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4091 := r.ContainerType()
		if yyct4091 == codecSelferValueTypeMap1234 {
			yyl4091 := r.ReadMapStart()
			if yyl4091 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4091, d)
			}
		} else if yyct4091 == codecSelferValueTypeArray1234 {
			yyl4091 := r.ReadArrayStart()
			if yyl4091 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4091, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4092Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4092Slc
	var yyhl4092 bool = l >= 0
	for yyj4092 := 0; ; yyj4092++ {
		if yyhl4092 {
			if yyj4092 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4092Slc = r.DecodeBytes(yys4092Slc, true, true)
		yys4092 := string(yys4092Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4092 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4095 := &x.ListMeta
				yym4096 := z.DecBinary()
				_ = yym4096
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4095) {
				} else {
					z.DecFallback(yyv4095, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4097 := &x.Items
				yym4098 := z.DecBinary()
				_ = yym4098
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4097), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4092)
		} // end switch yys4092
	} // end for yyj4092
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4099 int
	var yyb4099 bool
	var yyhl4099 bool = l >= 0
	yyj4099++
	if yyhl4099 {
		yyb4099 = yyj4099 > l
	} else {
		yyb4099 = r.CheckBreak()
	}
	if yyb4099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4099++
	if yyhl4099 {
		yyb4099 = yyj4099 > l
	} else {
		yyb4099 = r.CheckBreak()
	}
	if yyb4099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4099++
	if yyhl4099 {
		yyb4099 = yyj4099 > l
	} else {
		yyb4099 = r.CheckBreak()
	}
	if yyb4099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4102 := &x.ListMeta
		yym4103 := z.DecBinary()
		_ = yym4103
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4102) {
		} else {
			z.DecFallback(yyv4102, false)
		}
	}
	yyj4099++
	if yyhl4099 {
		yyb4099 = yyj4099 > l
	} else {
		yyb4099 = r.CheckBreak()
	}
	if yyb4099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4104 := &x.Items
		yym4105 := z.DecBinary()
		_ = yym4105
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4104), d)
		}
	}
	for {
		yyj4099++
		if yyhl4099 {
			yyb4099 = yyj4099 > l
		} else {
			yyb4099 = r.CheckBreak()
		}
		if yyb4099 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4099-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4106 := z.EncBinary()
		_ = yym4106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4107 := !z.EncBinary()
			yy2arr4107 := z.EncBasicHandle().StructToArray
			var yyq4107 [4]bool
			_, _, _ = yysep4107, yyq4107, yy2arr4107
			const yyr4107 bool = false
			yyq4107[0] = x.Kind != ""
			yyq4107[1] = x.APIVersion != ""
			yyq4107[2] = true
			yyq4107[3] = len(x.Data) != 0
			var yynn4107 int
			if yyr4107 || yy2arr4107 {
				r.EncodeArrayStart(4)
			} else {
				yynn4107 = 0
				for _, b := range yyq4107 {
					if b {
						yynn4107++
					}
				}
				r.EncodeMapStart(yynn4107)
				yynn4107 = 0
			}
			if yyr4107 || yy2arr4107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4107[0] {
					yym4109 := z.EncBinary()
					_ = yym4109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4107[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4110 := z.EncBinary()
					_ = yym4110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4107 || yy2arr4107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4107[1] {
					yym4112 := z.EncBinary()
					_ = yym4112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4107[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4113 := z.EncBinary()
					_ = yym4113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4107 || yy2arr4107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4107[2] {
					yy4115 := &x.ObjectMeta
					yy4115.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4107[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4116 := &x.ObjectMeta
					yy4116.CodecEncodeSelf(e)
				}
			}
			if yyr4107 || yy2arr4107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4107[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4118 := z.EncBinary()
						_ = yym4118
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4107[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4119 := z.EncBinary()
						_ = yym4119
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4107 || yy2arr4107 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4120 := z.DecBinary()
	_ = yym4120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4121 := r.ContainerType()
		if yyct4121 == codecSelferValueTypeMap1234 {
			yyl4121 := r.ReadMapStart()
			if yyl4121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4121, d)
			}
		} else if yyct4121 == codecSelferValueTypeArray1234 {
			yyl4121 := r.ReadArrayStart()
			if yyl4121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4122Slc
	var yyhl4122 bool = l >= 0
	for yyj4122 := 0; ; yyj4122++ {
		if yyhl4122 {
			if yyj4122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4122Slc = r.DecodeBytes(yys4122Slc, true, true)
		yys4122 := string(yys4122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4122 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4125 := &x.ObjectMeta
				yyv4125.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4126 := &x.Data
				yym4127 := z.DecBinary()
				_ = yym4127
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4126, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4122)
		} // end switch yys4122
	} // end for yyj4122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4128 int
	var yyb4128 bool
	var yyhl4128 bool = l >= 0
	yyj4128++
	if yyhl4128 {
		yyb4128 = yyj4128 > l
	} else {
		yyb4128 = r.CheckBreak()
	}
	if yyb4128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4128++
	if yyhl4128 {
		yyb4128 = yyj4128 > l
	} else {
		yyb4128 = r.CheckBreak()
	}
	if yyb4128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4128++
	if yyhl4128 {
		yyb4128 = yyj4128 > l
	} else {
		yyb4128 = r.CheckBreak()
	}
	if yyb4128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4131 := &x.ObjectMeta
		yyv4131.CodecDecodeSelf(d)
	}
	yyj4128++
	if yyhl4128 {
		yyb4128 = yyj4128 > l
	} else {
		yyb4128 = r.CheckBreak()
	}
	if yyb4128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4132 := &x.Data
		yym4133 := z.DecBinary()
		_ = yym4133
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4132, false, d)
		}
	}
	for {
		yyj4128++
		if yyhl4128 {
			yyb4128 = yyj4128 > l
		} else {
			yyb4128 = r.CheckBreak()
		}
		if yyb4128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4134 := z.EncBinary()
		_ = yym4134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4135 := !z.EncBinary()
			yy2arr4135 := z.EncBasicHandle().StructToArray
			var yyq4135 [4]bool
			_, _, _ = yysep4135, yyq4135, yy2arr4135
			const yyr4135 bool = false
			yyq4135[0] = x.Kind != ""
			yyq4135[1] = x.APIVersion != ""
			yyq4135[2] = true
			var yynn4135 int
			if yyr4135 || yy2arr4135 {
				r.EncodeArrayStart(4)
			} else {
				yynn4135 = 1
				for _, b := range yyq4135 {
					if b {
						yynn4135++
					}
				}
				r.EncodeMapStart(yynn4135)
				yynn4135 = 0
			}
			if yyr4135 || yy2arr4135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4135[0] {
					yym4137 := z.EncBinary()
					_ = yym4137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4135[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4138 := z.EncBinary()
					_ = yym4138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4135 || yy2arr4135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4135[1] {
					yym4140 := z.EncBinary()
					_ = yym4140
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4135[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4141 := z.EncBinary()
					_ = yym4141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4135 || yy2arr4135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4135[2] {
					yy4143 := &x.ListMeta
					yym4144 := z.EncBinary()
					_ = yym4144
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4143) {
					} else {
						z.EncFallback(yy4143)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4135[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4145 := &x.ListMeta
					yym4146 := z.EncBinary()
					_ = yym4146
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4145) {
					} else {
						z.EncFallback(yy4145)
					}
				}
			}
			if yyr4135 || yy2arr4135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4148 := z.EncBinary()
					_ = yym4148
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4149 := z.EncBinary()
					_ = yym4149
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4135 || yy2arr4135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4150 := z.DecBinary()
	_ = yym4150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4151 := r.ContainerType()
		if yyct4151 == codecSelferValueTypeMap1234 {
			yyl4151 := r.ReadMapStart()
			if yyl4151 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4151, d)
			}
		} else if yyct4151 == codecSelferValueTypeArray1234 {
			yyl4151 := r.ReadArrayStart()
			if yyl4151 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4151, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4152Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4152Slc
	var yyhl4152 bool = l >= 0
	for yyj4152 := 0; ; yyj4152++ {
		if yyhl4152 {
			if yyj4152 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4152Slc = r.DecodeBytes(yys4152Slc, true, true)
		yys4152 := string(yys4152Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4152 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4155 := &x.ListMeta
				yym4156 := z.DecBinary()
				_ = yym4156
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4155) {
				} else {
					z.DecFallback(yyv4155, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4157 := &x.Items
				yym4158 := z.DecBinary()
				_ = yym4158
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4157), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4152)
		} // end switch yys4152
	} // end for yyj4152
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4159 int
	var yyb4159 bool
	var yyhl4159 bool = l >= 0
	yyj4159++
	if yyhl4159 {
		yyb4159 = yyj4159 > l
	} else {
		yyb4159 = r.CheckBreak()
	}
	if yyb4159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4159++
	if yyhl4159 {
		yyb4159 = yyj4159 > l
	} else {
		yyb4159 = r.CheckBreak()
	}
	if yyb4159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4159++
	if yyhl4159 {
		yyb4159 = yyj4159 > l
	} else {
		yyb4159 = r.CheckBreak()
	}
	if yyb4159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4162 := &x.ListMeta
		yym4163 := z.DecBinary()
		_ = yym4163
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4162) {
		} else {
			z.DecFallback(yyv4162, false)
		}
	}
	yyj4159++
	if yyhl4159 {
		yyb4159 = yyj4159 > l
	} else {
		yyb4159 = r.CheckBreak()
	}
	if yyb4159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4164 := &x.Items
		yym4165 := z.DecBinary()
		_ = yym4165
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4164), d)
		}
	}
	for {
		yyj4159++
		if yyhl4159 {
			yyb4159 = yyj4159 > l
		} else {
			yyb4159 = r.CheckBreak()
		}
		if yyb4159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4166 := z.EncBinary()
	_ = yym4166
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4167 := z.DecBinary()
	_ = yym4167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4168 := z.EncBinary()
	_ = yym4168
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4169 := z.DecBinary()
	_ = yym4169
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4170 := z.EncBinary()
		_ = yym4170
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4171 := !z.EncBinary()
			yy2arr4171 := z.EncBasicHandle().StructToArray
			var yyq4171 [4]bool
			_, _, _ = yysep4171, yyq4171, yy2arr4171
			const yyr4171 bool = false
			yyq4171[2] = x.Message != ""
			yyq4171[3] = x.Error != ""
			var yynn4171 int
			if yyr4171 || yy2arr4171 {
				r.EncodeArrayStart(4)
			} else {
				yynn4171 = 2
				for _, b := range yyq4171 {
					if b {
						yynn4171++
					}
				}
				r.EncodeMapStart(yynn4171)
				yynn4171 = 0
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4171[2] {
					yym4175 := z.EncBinary()
					_ = yym4175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4171[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4176 := z.EncBinary()
					_ = yym4176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4171[3] {
					yym4178 := z.EncBinary()
					_ = yym4178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4171[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4179 := z.EncBinary()
					_ = yym4179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4171 || yy2arr4171 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4180 := z.DecBinary()
	_ = yym4180
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4181 := r.ContainerType()
		if yyct4181 == codecSelferValueTypeMap1234 {
			yyl4181 := r.ReadMapStart()
			if yyl4181 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4181, d)
			}
		} else if yyct4181 == codecSelferValueTypeArray1234 {
			yyl4181 := r.ReadArrayStart()
			if yyl4181 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4181, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4182Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4182Slc
	var yyhl4182 bool = l >= 0
	for yyj4182 := 0; ; yyj4182++ {
		if yyhl4182 {
			if yyj4182 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4182Slc = r.DecodeBytes(yys4182Slc, true, true)
		yys4182 := string(yys4182Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4182 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4182)
		} // end switch yys4182
	} // end for yyj4182
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4187 int
	var yyb4187 bool
	var yyhl4187 bool = l >= 0
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4187++
	if yyhl4187 {
		yyb4187 = yyj4187 > l
	} else {
		yyb4187 = r.CheckBreak()
	}
	if yyb4187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4187++
		if yyhl4187 {
			yyb4187 = yyj4187 > l
		} else {
			yyb4187 = r.CheckBreak()
		}
		if yyb4187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4192 := z.EncBinary()
		_ = yym4192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4193 := !z.EncBinary()
			yy2arr4193 := z.EncBasicHandle().StructToArray
			var yyq4193 [4]bool
			_, _, _ = yysep4193, yyq4193, yy2arr4193
			const yyr4193 bool = false
			yyq4193[0] = x.Kind != ""
			yyq4193[1] = x.APIVersion != ""
			yyq4193[2] = true
			yyq4193[3] = len(x.Conditions) != 0
			var yynn4193 int
			if yyr4193 || yy2arr4193 {
				r.EncodeArrayStart(4)
			} else {
				yynn4193 = 0
				for _, b := range yyq4193 {
					if b {
						yynn4193++
					}
				}
				r.EncodeMapStart(yynn4193)
				yynn4193 = 0
			}
			if yyr4193 || yy2arr4193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4193[0] {
					yym4195 := z.EncBinary()
					_ = yym4195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4193[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4196 := z.EncBinary()
					_ = yym4196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4193 || yy2arr4193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4193[1] {
					yym4198 := z.EncBinary()
					_ = yym4198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4193[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4199 := z.EncBinary()
					_ = yym4199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4193 || yy2arr4193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4193[2] {
					yy4201 := &x.ObjectMeta
					yy4201.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4193[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4202 := &x.ObjectMeta
					yy4202.CodecEncodeSelf(e)
				}
			}
			if yyr4193 || yy2arr4193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4193[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4204 := z.EncBinary()
						_ = yym4204
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4193[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4205 := z.EncBinary()
						_ = yym4205
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4193 || yy2arr4193 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4206 := z.DecBinary()
	_ = yym4206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4207 := r.ContainerType()
		if yyct4207 == codecSelferValueTypeMap1234 {
			yyl4207 := r.ReadMapStart()
			if yyl4207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4207, d)
			}
		} else if yyct4207 == codecSelferValueTypeArray1234 {
			yyl4207 := r.ReadArrayStart()
			if yyl4207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4208Slc
	var yyhl4208 bool = l >= 0
	for yyj4208 := 0; ; yyj4208++ {
		if yyhl4208 {
			if yyj4208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4208Slc = r.DecodeBytes(yys4208Slc, true, true)
		yys4208 := string(yys4208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4208 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4211 := &x.ObjectMeta
				yyv4211.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4212 := &x.Conditions
				yym4213 := z.DecBinary()
				_ = yym4213
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4212), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4208)
		} // end switch yys4208
	} // end for yyj4208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4214 int
	var yyb4214 bool
	var yyhl4214 bool = l >= 0
	yyj4214++
	if yyhl4214 {
		yyb4214 = yyj4214 > l
	} else {
		yyb4214 = r.CheckBreak()
	}
	if yyb4214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4214++
	if yyhl4214 {
		yyb4214 = yyj4214 > l
	} else {
		yyb4214 = r.CheckBreak()
	}
	if yyb4214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4214++
	if yyhl4214 {
		yyb4214 = yyj4214 > l
	} else {
		yyb4214 = r.CheckBreak()
	}
	if yyb4214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4217 := &x.ObjectMeta
		yyv4217.CodecDecodeSelf(d)
	}
	yyj4214++
	if yyhl4214 {
		yyb4214 = yyj4214 > l
	} else {
		yyb4214 = r.CheckBreak()
	}
	if yyb4214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4218 := &x.Conditions
		yym4219 := z.DecBinary()
		_ = yym4219
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4218), d)
		}
	}
	for {
		yyj4214++
		if yyhl4214 {
			yyb4214 = yyj4214 > l
		} else {
			yyb4214 = r.CheckBreak()
		}
		if yyb4214 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4214-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4220 := z.EncBinary()
		_ = yym4220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4221 := !z.EncBinary()
			yy2arr4221 := z.EncBasicHandle().StructToArray
			var yyq4221 [4]bool
			_, _, _ = yysep4221, yyq4221, yy2arr4221
			const yyr4221 bool = false
			yyq4221[0] = x.Kind != ""
			yyq4221[1] = x.APIVersion != ""
			yyq4221[2] = true
			var yynn4221 int
			if yyr4221 || yy2arr4221 {
				r.EncodeArrayStart(4)
			} else {
				yynn4221 = 1
				for _, b := range yyq4221 {
					if b {
						yynn4221++
					}
				}
				r.EncodeMapStart(yynn4221)
				yynn4221 = 0
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4221[0] {
					yym4223 := z.EncBinary()
					_ = yym4223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4221[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4224 := z.EncBinary()
					_ = yym4224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4221[1] {
					yym4226 := z.EncBinary()
					_ = yym4226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4221[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4227 := z.EncBinary()
					_ = yym4227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4221[2] {
					yy4229 := &x.ListMeta
					yym4230 := z.EncBinary()
					_ = yym4230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4229) {
					} else {
						z.EncFallback(yy4229)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4221[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4231 := &x.ListMeta
					yym4232 := z.EncBinary()
					_ = yym4232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4231) {
					} else {
						z.EncFallback(yy4231)
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4234 := z.EncBinary()
					_ = yym4234
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4235 := z.EncBinary()
					_ = yym4235
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4221 || yy2arr4221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4236 := z.DecBinary()
	_ = yym4236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4237 := r.ContainerType()
		if yyct4237 == codecSelferValueTypeMap1234 {
			yyl4237 := r.ReadMapStart()
			if yyl4237 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4237, d)
			}
		} else if yyct4237 == codecSelferValueTypeArray1234 {
			yyl4237 := r.ReadArrayStart()
			if yyl4237 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4238Slc
	var yyhl4238 bool = l >= 0
	for yyj4238 := 0; ; yyj4238++ {
		if yyhl4238 {
			if yyj4238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4238Slc = r.DecodeBytes(yys4238Slc, true, true)
		yys4238 := string(yys4238Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4238 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4241 := &x.ListMeta
				yym4242 := z.DecBinary()
				_ = yym4242
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4241) {
				} else {
					z.DecFallback(yyv4241, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4243 := &x.Items
				yym4244 := z.DecBinary()
				_ = yym4244
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4243), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4238)
		} // end switch yys4238
	} // end for yyj4238
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4245 int
	var yyb4245 bool
	var yyhl4245 bool = l >= 0
	yyj4245++
	if yyhl4245 {
		yyb4245 = yyj4245 > l
	} else {
		yyb4245 = r.CheckBreak()
	}
	if yyb4245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4245++
	if yyhl4245 {
		yyb4245 = yyj4245 > l
	} else {
		yyb4245 = r.CheckBreak()
	}
	if yyb4245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4245++
	if yyhl4245 {
		yyb4245 = yyj4245 > l
	} else {
		yyb4245 = r.CheckBreak()
	}
	if yyb4245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4248 := &x.ListMeta
		yym4249 := z.DecBinary()
		_ = yym4249
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4248) {
		} else {
			z.DecFallback(yyv4248, false)
		}
	}
	yyj4245++
	if yyhl4245 {
		yyb4245 = yyj4245 > l
	} else {
		yyb4245 = r.CheckBreak()
	}
	if yyb4245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4250 := &x.Items
		yym4251 := z.DecBinary()
		_ = yym4251
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4250), d)
		}
	}
	for {
		yyj4245++
		if yyhl4245 {
			yyb4245 = yyj4245 > l
		} else {
			yyb4245 = r.CheckBreak()
		}
		if yyb4245 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4245-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4252 := z.EncBinary()
		_ = yym4252
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4253 := !z.EncBinary()
			yy2arr4253 := z.EncBasicHandle().StructToArray
			var yyq4253 [6]bool
			_, _, _ = yysep4253, yyq4253, yy2arr4253
			const yyr4253 bool = false
			yyq4253[0] = x.Capabilities != nil
			yyq4253[1] = x.Privileged != nil
			yyq4253[2] = x.SELinuxOptions != nil
			yyq4253[3] = x.RunAsUser != nil
			yyq4253[4] = x.RunAsNonRoot != nil
			yyq4253[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4253 int
			if yyr4253 || yy2arr4253 {
				r.EncodeArrayStart(6)
			} else {
				yynn4253 = 0
				for _, b := range yyq4253 {
					if b {
						yynn4253++
					}
				}
				r.EncodeMapStart(yynn4253)
				yynn4253 = 0
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4253[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4256 := *x.Privileged
						yym4257 := z.EncBinary()
						_ = yym4257
						if false {
						} else {
							r.EncodeBool(bool(yy4256))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4253[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4258 := *x.Privileged
						yym4259 := z.EncBinary()
						_ = yym4259
						if false {
						} else {
							r.EncodeBool(bool(yy4258))
						}
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4253[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4262 := *x.RunAsUser
						yym4263 := z.EncBinary()
						_ = yym4263
						if false {
						} else {
							r.EncodeInt(int64(yy4262))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4253[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4264 := *x.RunAsUser
						yym4265 := z.EncBinary()
						_ = yym4265
						if false {
						} else {
							r.EncodeInt(int64(yy4264))
						}
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4267 := *x.RunAsNonRoot
						yym4268 := z.EncBinary()
						_ = yym4268
						if false {
						} else {
							r.EncodeBool(bool(yy4267))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4253[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4269 := *x.RunAsNonRoot
						yym4270 := z.EncBinary()
						_ = yym4270
						if false {
						} else {
							r.EncodeBool(bool(yy4269))
						}
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4253[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4272 := *x.ReadOnlyRootFilesystem
						yym4273 := z.EncBinary()
						_ = yym4273
						if false {
						} else {
							r.EncodeBool(bool(yy4272))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4253[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4274 := *x.ReadOnlyRootFilesystem
						yym4275 := z.EncBinary()
						_ = yym4275
						if false {
						} else {
							r.EncodeBool(bool(yy4274))
						}
					}
				}
			}
			if yyr4253 || yy2arr4253 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4276 := z.DecBinary()
	_ = yym4276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4277 := r.ContainerType()
		if yyct4277 == codecSelferValueTypeMap1234 {
			yyl4277 := r.ReadMapStart()
			if yyl4277 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4277, d)
			}
		} else if yyct4277 == codecSelferValueTypeArray1234 {
			yyl4277 := r.ReadArrayStart()
			if yyl4277 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4277, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4278Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4278Slc
	var yyhl4278 bool = l >= 0
	for yyj4278 := 0; ; yyj4278++ {
		if yyhl4278 {
			if yyj4278 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4278Slc = r.DecodeBytes(yys4278Slc, true, true)
		yys4278 := string(yys4278Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4278 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4281 := z.DecBinary()
				_ = yym4281
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4284 := z.DecBinary()
				_ = yym4284
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4286 := z.DecBinary()
				_ = yym4286
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4288 := z.DecBinary()
				_ = yym4288
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4278)
		} // end switch yys4278
	} // end for yyj4278
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4289 int
	var yyb4289 bool
	var yyhl4289 bool = l >= 0
	yyj4289++
	if yyhl4289 {
		yyb4289 = yyj4289 > l
	} else {
		yyb4289 = r.CheckBreak()
	}
	if yyb4289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4289++
	if yyhl4289 {
		yyb4289 = yyj4289 > l
	} else {
		yyb4289 = r.CheckBreak()
	}
	if yyb4289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4292 := z.DecBinary()
		_ = yym4292
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4289++
	if yyhl4289 {
		yyb4289 = yyj4289 > l
	} else {
		yyb4289 = r.CheckBreak()
	}
	if yyb4289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4289++
	if yyhl4289 {
		yyb4289 = yyj4289 > l
	} else {
		yyb4289 = r.CheckBreak()
	}
	if yyb4289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4295 := z.DecBinary()
		_ = yym4295
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4289++
	if yyhl4289 {
		yyb4289 = yyj4289 > l
	} else {
		yyb4289 = r.CheckBreak()
	}
	if yyb4289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4297 := z.DecBinary()
		_ = yym4297
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4289++
	if yyhl4289 {
		yyb4289 = yyj4289 > l
	} else {
		yyb4289 = r.CheckBreak()
	}
	if yyb4289 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4299 := z.DecBinary()
		_ = yym4299
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4289++
		if yyhl4289 {
			yyb4289 = yyj4289 > l
		} else {
			yyb4289 = r.CheckBreak()
		}
		if yyb4289 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4289-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4300 := z.EncBinary()
		_ = yym4300
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4301 := !z.EncBinary()
			yy2arr4301 := z.EncBasicHandle().StructToArray
			var yyq4301 [4]bool
			_, _, _ = yysep4301, yyq4301, yy2arr4301
			const yyr4301 bool = false
			yyq4301[0] = x.User != ""
			yyq4301[1] = x.Role != ""
			yyq4301[2] = x.Type != ""
			yyq4301[3] = x.Level != ""
			var yynn4301 int
			if yyr4301 || yy2arr4301 {
				r.EncodeArrayStart(4)
			} else {
				yynn4301 = 0
				for _, b := range yyq4301 {
					if b {
						yynn4301++
					}
				}
				r.EncodeMapStart(yynn4301)
				yynn4301 = 0
			}
			if yyr4301 || yy2arr4301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4301[0] {
					yym4303 := z.EncBinary()
					_ = yym4303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4301[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4304 := z.EncBinary()
					_ = yym4304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4301 || yy2arr4301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4301[1] {
					yym4306 := z.EncBinary()
					_ = yym4306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4301[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4307 := z.EncBinary()
					_ = yym4307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4301 || yy2arr4301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4301[2] {
					yym4309 := z.EncBinary()
					_ = yym4309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4301[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4310 := z.EncBinary()
					_ = yym4310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4301 || yy2arr4301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4301[3] {
					yym4312 := z.EncBinary()
					_ = yym4312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4301[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4313 := z.EncBinary()
					_ = yym4313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4301 || yy2arr4301 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4314 := z.DecBinary()
	_ = yym4314
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4315 := r.ContainerType()
		if yyct4315 == codecSelferValueTypeMap1234 {
			yyl4315 := r.ReadMapStart()
			if yyl4315 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4315, d)
			}
		} else if yyct4315 == codecSelferValueTypeArray1234 {
			yyl4315 := r.ReadArrayStart()
			if yyl4315 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4315, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4316Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4316Slc
	var yyhl4316 bool = l >= 0
	for yyj4316 := 0; ; yyj4316++ {
		if yyhl4316 {
			if yyj4316 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4316Slc = r.DecodeBytes(yys4316Slc, true, true)
		yys4316 := string(yys4316Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4316 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4316)
		} // end switch yys4316
	} // end for yyj4316
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4321 int
	var yyb4321 bool
	var yyhl4321 bool = l >= 0
	yyj4321++
	if yyhl4321 {
		yyb4321 = yyj4321 > l
	} else {
		yyb4321 = r.CheckBreak()
	}
	if yyb4321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4321++
	if yyhl4321 {
		yyb4321 = yyj4321 > l
	} else {
		yyb4321 = r.CheckBreak()
	}
	if yyb4321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4321++
	if yyhl4321 {
		yyb4321 = yyj4321 > l
	} else {
		yyb4321 = r.CheckBreak()
	}
	if yyb4321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4321++
	if yyhl4321 {
		yyb4321 = yyj4321 > l
	} else {
		yyb4321 = r.CheckBreak()
	}
	if yyb4321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4321++
		if yyhl4321 {
			yyb4321 = yyj4321 > l
		} else {
			yyb4321 = r.CheckBreak()
		}
		if yyb4321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4326 := z.EncBinary()
		_ = yym4326
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4327 := !z.EncBinary()
			yy2arr4327 := z.EncBasicHandle().StructToArray
			var yyq4327 [5]bool
			_, _, _ = yysep4327, yyq4327, yy2arr4327
			const yyr4327 bool = false
			yyq4327[0] = x.Kind != ""
			yyq4327[1] = x.APIVersion != ""
			yyq4327[2] = true
			var yynn4327 int
			if yyr4327 || yy2arr4327 {
				r.EncodeArrayStart(5)
			} else {
				yynn4327 = 2
				for _, b := range yyq4327 {
					if b {
						yynn4327++
					}
				}
				r.EncodeMapStart(yynn4327)
				yynn4327 = 0
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[0] {
					yym4329 := z.EncBinary()
					_ = yym4329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4327[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4330 := z.EncBinary()
					_ = yym4330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[1] {
					yym4332 := z.EncBinary()
					_ = yym4332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4327[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4333 := z.EncBinary()
					_ = yym4333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4327[2] {
					yy4335 := &x.ObjectMeta
					yy4335.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4327[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4336 := &x.ObjectMeta
					yy4336.CodecEncodeSelf(e)
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4338 := z.EncBinary()
				_ = yym4338
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4339 := z.EncBinary()
				_ = yym4339
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4341 := z.EncBinary()
					_ = yym4341
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4342 := z.EncBinary()
					_ = yym4342
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4327 || yy2arr4327 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4343 := z.DecBinary()
	_ = yym4343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4344 := r.ContainerType()
		if yyct4344 == codecSelferValueTypeMap1234 {
			yyl4344 := r.ReadMapStart()
			if yyl4344 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4344, d)
			}
		} else if yyct4344 == codecSelferValueTypeArray1234 {
			yyl4344 := r.ReadArrayStart()
			if yyl4344 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4345Slc
	var yyhl4345 bool = l >= 0
	for yyj4345 := 0; ; yyj4345++ {
		if yyhl4345 {
			if yyj4345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4345Slc = r.DecodeBytes(yys4345Slc, true, true)
		yys4345 := string(yys4345Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4345 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4348 := &x.ObjectMeta
				yyv4348.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4350 := &x.Data
				yym4351 := z.DecBinary()
				_ = yym4351
				if false {
				} else {
					*yyv4350 = r.DecodeBytes(*(*[]byte)(yyv4350), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4345)
		} // end switch yys4345
	} // end for yyj4345
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4352 int
	var yyb4352 bool
	var yyhl4352 bool = l >= 0
	yyj4352++
	if yyhl4352 {
		yyb4352 = yyj4352 > l
	} else {
		yyb4352 = r.CheckBreak()
	}
	if yyb4352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4352++
	if yyhl4352 {
		yyb4352 = yyj4352 > l
	} else {
		yyb4352 = r.CheckBreak()
	}
	if yyb4352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4352++
	if yyhl4352 {
		yyb4352 = yyj4352 > l
	} else {
		yyb4352 = r.CheckBreak()
	}
	if yyb4352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4355 := &x.ObjectMeta
		yyv4355.CodecDecodeSelf(d)
	}
	yyj4352++
	if yyhl4352 {
		yyb4352 = yyj4352 > l
	} else {
		yyb4352 = r.CheckBreak()
	}
	if yyb4352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4352++
	if yyhl4352 {
		yyb4352 = yyj4352 > l
	} else {
		yyb4352 = r.CheckBreak()
	}
	if yyb4352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4357 := &x.Data
		yym4358 := z.DecBinary()
		_ = yym4358
		if false {
		} else {
			*yyv4357 = r.DecodeBytes(*(*[]byte)(yyv4357), false, false)
		}
	}
	for {
		yyj4352++
		if yyhl4352 {
			yyb4352 = yyj4352 > l
		} else {
			yyb4352 = r.CheckBreak()
		}
		if yyb4352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4359 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4360 := &yyv4359
		yy4360.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4361 := *v
	yyh4361, yyl4361 := z.DecSliceHelperStart()
	var yyc4361 bool
	if yyl4361 == 0 {
		if yyv4361 == nil {
			yyv4361 = []OwnerReference{}
			yyc4361 = true
		} else if len(yyv4361) != 0 {
			yyv4361 = yyv4361[:0]
			yyc4361 = true
		}
	} else if yyl4361 > 0 {
		var yyrr4361, yyrl4361 int
		var yyrt4361 bool
		if yyl4361 > cap(yyv4361) {

			yyrg4361 := len(yyv4361) > 0
			yyv24361 := yyv4361
			yyrl4361, yyrt4361 = z.DecInferLen(yyl4361, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4361 {
				if yyrl4361 <= cap(yyv4361) {
					yyv4361 = yyv4361[:yyrl4361]
				} else {
					yyv4361 = make([]OwnerReference, yyrl4361)
				}
			} else {
				yyv4361 = make([]OwnerReference, yyrl4361)
			}
			yyc4361 = true
			yyrr4361 = len(yyv4361)
			if yyrg4361 {
				copy(yyv4361, yyv24361)
			}
		} else if yyl4361 != len(yyv4361) {
			yyv4361 = yyv4361[:yyl4361]
			yyc4361 = true
		}
		yyj4361 := 0
		for ; yyj4361 < yyrr4361; yyj4361++ {
			yyh4361.ElemContainerState(yyj4361)
			if r.TryDecodeAsNil() {
				yyv4361[yyj4361] = OwnerReference{}
			} else {
				yyv4362 := &yyv4361[yyj4361]
				yyv4362.CodecDecodeSelf(d)
			}

		}
		if yyrt4361 {
			for ; yyj4361 < yyl4361; yyj4361++ {
				yyv4361 = append(yyv4361, OwnerReference{})
				yyh4361.ElemContainerState(yyj4361)
				if r.TryDecodeAsNil() {
					yyv4361[yyj4361] = OwnerReference{}
				} else {
					yyv4363 := &yyv4361[yyj4361]
					yyv4363.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4361 := 0
		for ; !r.CheckBreak(); yyj4361++ {

			if yyj4361 >= len(yyv4361) {
				yyv4361 = append(yyv4361, OwnerReference{}) // var yyz4361 OwnerReference
				yyc4361 = true
			}
			yyh4361.ElemContainerState(yyj4361)
			if yyj4361 < len(yyv4361) {
				if r.TryDecodeAsNil() {
					yyv4361[yyj4361] = OwnerReference{}
				} else {
					yyv4364 := &yyv4361[yyj4361]
					yyv4364.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4361 < len(yyv4361) {
			yyv4361 = yyv4361[:yyj4361]
			yyc4361 = true
		} else if yyj4361 == 0 && yyv4361 == nil {
			yyv4361 = []OwnerReference{}
			yyc4361 = true
		}
	}
	yyh4361.End()
	if yyc4361 {
		*v = yyv4361
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4365 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4365.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4366 := *v
	yyh4366, yyl4366 := z.DecSliceHelperStart()
	var yyc4366 bool
	if yyl4366 == 0 {
		if yyv4366 == nil {
			yyv4366 = []PersistentVolumeAccessMode{}
			yyc4366 = true
		} else if len(yyv4366) != 0 {
			yyv4366 = yyv4366[:0]
			yyc4366 = true
		}
	} else if yyl4366 > 0 {
		var yyrr4366, yyrl4366 int
		var yyrt4366 bool
		if yyl4366 > cap(yyv4366) {

			yyrl4366, yyrt4366 = z.DecInferLen(yyl4366, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4366 {
				if yyrl4366 <= cap(yyv4366) {
					yyv4366 = yyv4366[:yyrl4366]
				} else {
					yyv4366 = make([]PersistentVolumeAccessMode, yyrl4366)
				}
			} else {
				yyv4366 = make([]PersistentVolumeAccessMode, yyrl4366)
			}
			yyc4366 = true
			yyrr4366 = len(yyv4366)
		} else if yyl4366 != len(yyv4366) {
			yyv4366 = yyv4366[:yyl4366]
			yyc4366 = true
		}
		yyj4366 := 0
		for ; yyj4366 < yyrr4366; yyj4366++ {
			yyh4366.ElemContainerState(yyj4366)
			if r.TryDecodeAsNil() {
				yyv4366[yyj4366] = ""
			} else {
				yyv4366[yyj4366] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4366 {
			for ; yyj4366 < yyl4366; yyj4366++ {
				yyv4366 = append(yyv4366, "")
				yyh4366.ElemContainerState(yyj4366)
				if r.TryDecodeAsNil() {
					yyv4366[yyj4366] = ""
				} else {
					yyv4366[yyj4366] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4366 := 0
		for ; !r.CheckBreak(); yyj4366++ {

			if yyj4366 >= len(yyv4366) {
				yyv4366 = append(yyv4366, "") // var yyz4366 PersistentVolumeAccessMode
				yyc4366 = true
			}
			yyh4366.ElemContainerState(yyj4366)
			if yyj4366 < len(yyv4366) {
				if r.TryDecodeAsNil() {
					yyv4366[yyj4366] = ""
				} else {
					yyv4366[yyj4366] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4366 < len(yyv4366) {
			yyv4366 = yyv4366[:yyj4366]
			yyc4366 = true
		} else if yyj4366 == 0 && yyv4366 == nil {
			yyv4366 = []PersistentVolumeAccessMode{}
			yyc4366 = true
		}
	}
	yyh4366.End()
	if yyc4366 {
		*v = yyv4366
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4370 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4371 := &yyv4370
		yy4371.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4372 := *v
	yyh4372, yyl4372 := z.DecSliceHelperStart()
	var yyc4372 bool
	if yyl4372 == 0 {
		if yyv4372 == nil {
			yyv4372 = []PersistentVolume{}
			yyc4372 = true
		} else if len(yyv4372) != 0 {
			yyv4372 = yyv4372[:0]
			yyc4372 = true
		}
	} else if yyl4372 > 0 {
		var yyrr4372, yyrl4372 int
		var yyrt4372 bool
		if yyl4372 > cap(yyv4372) {

			yyrg4372 := len(yyv4372) > 0
			yyv24372 := yyv4372
			yyrl4372, yyrt4372 = z.DecInferLen(yyl4372, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4372 {
				if yyrl4372 <= cap(yyv4372) {
					yyv4372 = yyv4372[:yyrl4372]
				} else {
					yyv4372 = make([]PersistentVolume, yyrl4372)
				}
			} else {
				yyv4372 = make([]PersistentVolume, yyrl4372)
			}
			yyc4372 = true
			yyrr4372 = len(yyv4372)
			if yyrg4372 {
				copy(yyv4372, yyv24372)
			}
		} else if yyl4372 != len(yyv4372) {
			yyv4372 = yyv4372[:yyl4372]
			yyc4372 = true
		}
		yyj4372 := 0
		for ; yyj4372 < yyrr4372; yyj4372++ {
			yyh4372.ElemContainerState(yyj4372)
			if r.TryDecodeAsNil() {
				yyv4372[yyj4372] = PersistentVolume{}
			} else {
				yyv4373 := &yyv4372[yyj4372]
				yyv4373.CodecDecodeSelf(d)
			}

		}
		if yyrt4372 {
			for ; yyj4372 < yyl4372; yyj4372++ {
				yyv4372 = append(yyv4372, PersistentVolume{})
				yyh4372.ElemContainerState(yyj4372)
				if r.TryDecodeAsNil() {
					yyv4372[yyj4372] = PersistentVolume{}
				} else {
					yyv4374 := &yyv4372[yyj4372]
					yyv4374.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4372 := 0
		for ; !r.CheckBreak(); yyj4372++ {

			if yyj4372 >= len(yyv4372) {
				yyv4372 = append(yyv4372, PersistentVolume{}) // var yyz4372 PersistentVolume
				yyc4372 = true
			}
			yyh4372.ElemContainerState(yyj4372)
			if yyj4372 < len(yyv4372) {
				if r.TryDecodeAsNil() {
					yyv4372[yyj4372] = PersistentVolume{}
				} else {
					yyv4375 := &yyv4372[yyj4372]
					yyv4375.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4372 < len(yyv4372) {
			yyv4372 = yyv4372[:yyj4372]
			yyc4372 = true
		} else if yyj4372 == 0 && yyv4372 == nil {
			yyv4372 = []PersistentVolume{}
			yyc4372 = true
		}
	}
	yyh4372.End()
	if yyc4372 {
		*v = yyv4372
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4376 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4377 := &yyv4376
		yy4377.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4378 := *v
	yyh4378, yyl4378 := z.DecSliceHelperStart()
	var yyc4378 bool
	if yyl4378 == 0 {
		if yyv4378 == nil {
			yyv4378 = []PersistentVolumeClaim{}
			yyc4378 = true
		} else if len(yyv4378) != 0 {
			yyv4378 = yyv4378[:0]
			yyc4378 = true
		}
	} else if yyl4378 > 0 {
		var yyrr4378, yyrl4378 int
		var yyrt4378 bool
		if yyl4378 > cap(yyv4378) {

			yyrg4378 := len(yyv4378) > 0
			yyv24378 := yyv4378
			yyrl4378, yyrt4378 = z.DecInferLen(yyl4378, z.DecBasicHandle().MaxInitLen, 360)
			if yyrt4378 {
				if yyrl4378 <= cap(yyv4378) {
					yyv4378 = yyv4378[:yyrl4378]
				} else {
					yyv4378 = make([]PersistentVolumeClaim, yyrl4378)
				}
			} else {
				yyv4378 = make([]PersistentVolumeClaim, yyrl4378)
			}
			yyc4378 = true
			yyrr4378 = len(yyv4378)
			if yyrg4378 {
				copy(yyv4378, yyv24378)
			}
		} else if yyl4378 != len(yyv4378) {
			yyv4378 = yyv4378[:yyl4378]
			yyc4378 = true
		}
		yyj4378 := 0
		for ; yyj4378 < yyrr4378; yyj4378++ {
			yyh4378.ElemContainerState(yyj4378)
			if r.TryDecodeAsNil() {
				yyv4378[yyj4378] = PersistentVolumeClaim{}
			} else {
				yyv4379 := &yyv4378[yyj4378]
				yyv4379.CodecDecodeSelf(d)
			}

		}
		if yyrt4378 {
			for ; yyj4378 < yyl4378; yyj4378++ {
				yyv4378 = append(yyv4378, PersistentVolumeClaim{})
				yyh4378.ElemContainerState(yyj4378)
				if r.TryDecodeAsNil() {
					yyv4378[yyj4378] = PersistentVolumeClaim{}
				} else {
					yyv4380 := &yyv4378[yyj4378]
					yyv4380.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4378 := 0
		for ; !r.CheckBreak(); yyj4378++ {

			if yyj4378 >= len(yyv4378) {
				yyv4378 = append(yyv4378, PersistentVolumeClaim{}) // var yyz4378 PersistentVolumeClaim
				yyc4378 = true
			}
			yyh4378.ElemContainerState(yyj4378)
			if yyj4378 < len(yyv4378) {
				if r.TryDecodeAsNil() {
					yyv4378[yyj4378] = PersistentVolumeClaim{}
				} else {
					yyv4381 := &yyv4378[yyj4378]
					yyv4381.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4378 < len(yyv4378) {
			yyv4378 = yyv4378[:yyj4378]
			yyc4378 = true
		} else if yyj4378 == 0 && yyv4378 == nil {
			yyv4378 = []PersistentVolumeClaim{}
			yyc4378 = true
		}
	}
	yyh4378.End()
	if yyc4378 {
		*v = yyv4378
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4382 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4383 := &yyv4382
		yy4383.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4384 := *v
	yyh4384, yyl4384 := z.DecSliceHelperStart()
	var yyc4384 bool
	if yyl4384 == 0 {
		if yyv4384 == nil {
			yyv4384 = []KeyToPath{}
			yyc4384 = true
		} else if len(yyv4384) != 0 {
			yyv4384 = yyv4384[:0]
			yyc4384 = true
		}
	} else if yyl4384 > 0 {
		var yyrr4384, yyrl4384 int
		var yyrt4384 bool
		if yyl4384 > cap(yyv4384) {

			yyrg4384 := len(yyv4384) > 0
			yyv24384 := yyv4384
			yyrl4384, yyrt4384 = z.DecInferLen(yyl4384, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4384 {
				if yyrl4384 <= cap(yyv4384) {
					yyv4384 = yyv4384[:yyrl4384]
				} else {
					yyv4384 = make([]KeyToPath, yyrl4384)
				}
			} else {
				yyv4384 = make([]KeyToPath, yyrl4384)
			}
			yyc4384 = true
			yyrr4384 = len(yyv4384)
			if yyrg4384 {
				copy(yyv4384, yyv24384)
			}
		} else if yyl4384 != len(yyv4384) {
			yyv4384 = yyv4384[:yyl4384]
			yyc4384 = true
		}
		yyj4384 := 0
		for ; yyj4384 < yyrr4384; yyj4384++ {
			yyh4384.ElemContainerState(yyj4384)
			if r.TryDecodeAsNil() {
				yyv4384[yyj4384] = KeyToPath{}
			} else {
				yyv4385 := &yyv4384[yyj4384]
				yyv4385.CodecDecodeSelf(d)
			}

		}
		if yyrt4384 {
			for ; yyj4384 < yyl4384; yyj4384++ {
				yyv4384 = append(yyv4384, KeyToPath{})
				yyh4384.ElemContainerState(yyj4384)
				if r.TryDecodeAsNil() {
					yyv4384[yyj4384] = KeyToPath{}
				} else {
					yyv4386 := &yyv4384[yyj4384]
					yyv4386.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4384 := 0
		for ; !r.CheckBreak(); yyj4384++ {

			if yyj4384 >= len(yyv4384) {
				yyv4384 = append(yyv4384, KeyToPath{}) // var yyz4384 KeyToPath
				yyc4384 = true
			}
			yyh4384.ElemContainerState(yyj4384)
			if yyj4384 < len(yyv4384) {
				if r.TryDecodeAsNil() {
					yyv4384[yyj4384] = KeyToPath{}
				} else {
					yyv4387 := &yyv4384[yyj4384]
					yyv4387.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4384 < len(yyv4384) {
			yyv4384 = yyv4384[:yyj4384]
			yyc4384 = true
		} else if yyj4384 == 0 && yyv4384 == nil {
			yyv4384 = []KeyToPath{}
			yyc4384 = true
		}
	}
	yyh4384.End()
	if yyc4384 {
		*v = yyv4384
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4388 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4389 := &yyv4388
		yy4389.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4390 := *v
	yyh4390, yyl4390 := z.DecSliceHelperStart()
	var yyc4390 bool
	if yyl4390 == 0 {
		if yyv4390 == nil {
			yyv4390 = []DownwardAPIVolumeFile{}
			yyc4390 = true
		} else if len(yyv4390) != 0 {
			yyv4390 = yyv4390[:0]
			yyc4390 = true
		}
	} else if yyl4390 > 0 {
		var yyrr4390, yyrl4390 int
		var yyrt4390 bool
		if yyl4390 > cap(yyv4390) {

			yyrg4390 := len(yyv4390) > 0
			yyv24390 := yyv4390
			yyrl4390, yyrt4390 = z.DecInferLen(yyl4390, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4390 {
				if yyrl4390 <= cap(yyv4390) {
					yyv4390 = yyv4390[:yyrl4390]
				} else {
					yyv4390 = make([]DownwardAPIVolumeFile, yyrl4390)
				}
			} else {
				yyv4390 = make([]DownwardAPIVolumeFile, yyrl4390)
			}
			yyc4390 = true
			yyrr4390 = len(yyv4390)
			if yyrg4390 {
				copy(yyv4390, yyv24390)
			}
		} else if yyl4390 != len(yyv4390) {
			yyv4390 = yyv4390[:yyl4390]
			yyc4390 = true
		}
		yyj4390 := 0
		for ; yyj4390 < yyrr4390; yyj4390++ {
			yyh4390.ElemContainerState(yyj4390)
			if r.TryDecodeAsNil() {
				yyv4390[yyj4390] = DownwardAPIVolumeFile{}
			} else {
				yyv4391 := &yyv4390[yyj4390]
				yyv4391.CodecDecodeSelf(d)
			}

		}
		if yyrt4390 {
			for ; yyj4390 < yyl4390; yyj4390++ {
				yyv4390 = append(yyv4390, DownwardAPIVolumeFile{})
				yyh4390.ElemContainerState(yyj4390)
				if r.TryDecodeAsNil() {
					yyv4390[yyj4390] = DownwardAPIVolumeFile{}
				} else {
					yyv4392 := &yyv4390[yyj4390]
					yyv4392.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4390 := 0
		for ; !r.CheckBreak(); yyj4390++ {

			if yyj4390 >= len(yyv4390) {
				yyv4390 = append(yyv4390, DownwardAPIVolumeFile{}) // var yyz4390 DownwardAPIVolumeFile
				yyc4390 = true
			}
			yyh4390.ElemContainerState(yyj4390)
			if yyj4390 < len(yyv4390) {
				if r.TryDecodeAsNil() {
					yyv4390[yyj4390] = DownwardAPIVolumeFile{}
				} else {
					yyv4393 := &yyv4390[yyj4390]
					yyv4393.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4390 < len(yyv4390) {
			yyv4390 = yyv4390[:yyj4390]
			yyc4390 = true
		} else if yyj4390 == 0 && yyv4390 == nil {
			yyv4390 = []DownwardAPIVolumeFile{}
			yyc4390 = true
		}
	}
	yyh4390.End()
	if yyc4390 {
		*v = yyv4390
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4394 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4395 := &yyv4394
		yy4395.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4396 := *v
	yyh4396, yyl4396 := z.DecSliceHelperStart()
	var yyc4396 bool
	if yyl4396 == 0 {
		if yyv4396 == nil {
			yyv4396 = []HTTPHeader{}
			yyc4396 = true
		} else if len(yyv4396) != 0 {
			yyv4396 = yyv4396[:0]
			yyc4396 = true
		}
	} else if yyl4396 > 0 {
		var yyrr4396, yyrl4396 int
		var yyrt4396 bool
		if yyl4396 > cap(yyv4396) {

			yyrg4396 := len(yyv4396) > 0
			yyv24396 := yyv4396
			yyrl4396, yyrt4396 = z.DecInferLen(yyl4396, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4396 {
				if yyrl4396 <= cap(yyv4396) {
					yyv4396 = yyv4396[:yyrl4396]
				} else {
					yyv4396 = make([]HTTPHeader, yyrl4396)
				}
			} else {
				yyv4396 = make([]HTTPHeader, yyrl4396)
			}
			yyc4396 = true
			yyrr4396 = len(yyv4396)
			if yyrg4396 {
				copy(yyv4396, yyv24396)
			}
		} else if yyl4396 != len(yyv4396) {
			yyv4396 = yyv4396[:yyl4396]
			yyc4396 = true
		}
		yyj4396 := 0
		for ; yyj4396 < yyrr4396; yyj4396++ {
			yyh4396.ElemContainerState(yyj4396)
			if r.TryDecodeAsNil() {
				yyv4396[yyj4396] = HTTPHeader{}
			} else {
				yyv4397 := &yyv4396[yyj4396]
				yyv4397.CodecDecodeSelf(d)
			}

		}
		if yyrt4396 {
			for ; yyj4396 < yyl4396; yyj4396++ {
				yyv4396 = append(yyv4396, HTTPHeader{})
				yyh4396.ElemContainerState(yyj4396)
				if r.TryDecodeAsNil() {
					yyv4396[yyj4396] = HTTPHeader{}
				} else {
					yyv4398 := &yyv4396[yyj4396]
					yyv4398.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4396 := 0
		for ; !r.CheckBreak(); yyj4396++ {

			if yyj4396 >= len(yyv4396) {
				yyv4396 = append(yyv4396, HTTPHeader{}) // var yyz4396 HTTPHeader
				yyc4396 = true
			}
			yyh4396.ElemContainerState(yyj4396)
			if yyj4396 < len(yyv4396) {
				if r.TryDecodeAsNil() {
					yyv4396[yyj4396] = HTTPHeader{}
				} else {
					yyv4399 := &yyv4396[yyj4396]
					yyv4399.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4396 < len(yyv4396) {
			yyv4396 = yyv4396[:yyj4396]
			yyc4396 = true
		} else if yyj4396 == 0 && yyv4396 == nil {
			yyv4396 = []HTTPHeader{}
			yyc4396 = true
		}
	}
	yyh4396.End()
	if yyc4396 {
		*v = yyv4396
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4400 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4400.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4401 := *v
	yyh4401, yyl4401 := z.DecSliceHelperStart()
	var yyc4401 bool
	if yyl4401 == 0 {
		if yyv4401 == nil {
			yyv4401 = []Capability{}
			yyc4401 = true
		} else if len(yyv4401) != 0 {
			yyv4401 = yyv4401[:0]
			yyc4401 = true
		}
	} else if yyl4401 > 0 {
		var yyrr4401, yyrl4401 int
		var yyrt4401 bool
		if yyl4401 > cap(yyv4401) {

			yyrl4401, yyrt4401 = z.DecInferLen(yyl4401, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4401 {
				if yyrl4401 <= cap(yyv4401) {
					yyv4401 = yyv4401[:yyrl4401]
				} else {
					yyv4401 = make([]Capability, yyrl4401)
				}
			} else {
				yyv4401 = make([]Capability, yyrl4401)
			}
			yyc4401 = true
			yyrr4401 = len(yyv4401)
		} else if yyl4401 != len(yyv4401) {
			yyv4401 = yyv4401[:yyl4401]
			yyc4401 = true
		}
		yyj4401 := 0
		for ; yyj4401 < yyrr4401; yyj4401++ {
			yyh4401.ElemContainerState(yyj4401)
			if r.TryDecodeAsNil() {
				yyv4401[yyj4401] = ""
			} else {
				yyv4401[yyj4401] = Capability(r.DecodeString())
			}

		}
		if yyrt4401 {
			for ; yyj4401 < yyl4401; yyj4401++ {
				yyv4401 = append(yyv4401, "")
				yyh4401.ElemContainerState(yyj4401)
				if r.TryDecodeAsNil() {
					yyv4401[yyj4401] = ""
				} else {
					yyv4401[yyj4401] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4401 := 0
		for ; !r.CheckBreak(); yyj4401++ {

			if yyj4401 >= len(yyv4401) {
				yyv4401 = append(yyv4401, "") // var yyz4401 Capability
				yyc4401 = true
			}
			yyh4401.ElemContainerState(yyj4401)
			if yyj4401 < len(yyv4401) {
				if r.TryDecodeAsNil() {
					yyv4401[yyj4401] = ""
				} else {
					yyv4401[yyj4401] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4401 < len(yyv4401) {
			yyv4401 = yyv4401[:yyj4401]
			yyc4401 = true
		} else if yyj4401 == 0 && yyv4401 == nil {
			yyv4401 = []Capability{}
			yyc4401 = true
		}
	}
	yyh4401.End()
	if yyc4401 {
		*v = yyv4401
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4405 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4406 := &yyv4405
		yy4406.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4407 := *v
	yyh4407, yyl4407 := z.DecSliceHelperStart()
	var yyc4407 bool
	if yyl4407 == 0 {
		if yyv4407 == nil {
			yyv4407 = []ContainerPort{}
			yyc4407 = true
		} else if len(yyv4407) != 0 {
			yyv4407 = yyv4407[:0]
			yyc4407 = true
		}
	} else if yyl4407 > 0 {
		var yyrr4407, yyrl4407 int
		var yyrt4407 bool
		if yyl4407 > cap(yyv4407) {

			yyrg4407 := len(yyv4407) > 0
			yyv24407 := yyv4407
			yyrl4407, yyrt4407 = z.DecInferLen(yyl4407, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4407 {
				if yyrl4407 <= cap(yyv4407) {
					yyv4407 = yyv4407[:yyrl4407]
				} else {
					yyv4407 = make([]ContainerPort, yyrl4407)
				}
			} else {
				yyv4407 = make([]ContainerPort, yyrl4407)
			}
			yyc4407 = true
			yyrr4407 = len(yyv4407)
			if yyrg4407 {
				copy(yyv4407, yyv24407)
			}
		} else if yyl4407 != len(yyv4407) {
			yyv4407 = yyv4407[:yyl4407]
			yyc4407 = true
		}
		yyj4407 := 0
		for ; yyj4407 < yyrr4407; yyj4407++ {
			yyh4407.ElemContainerState(yyj4407)
			if r.TryDecodeAsNil() {
				yyv4407[yyj4407] = ContainerPort{}
			} else {
				yyv4408 := &yyv4407[yyj4407]
				yyv4408.CodecDecodeSelf(d)
			}

		}
		if yyrt4407 {
			for ; yyj4407 < yyl4407; yyj4407++ {
				yyv4407 = append(yyv4407, ContainerPort{})
				yyh4407.ElemContainerState(yyj4407)
				if r.TryDecodeAsNil() {
					yyv4407[yyj4407] = ContainerPort{}
				} else {
					yyv4409 := &yyv4407[yyj4407]
					yyv4409.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4407 := 0
		for ; !r.CheckBreak(); yyj4407++ {

			if yyj4407 >= len(yyv4407) {
				yyv4407 = append(yyv4407, ContainerPort{}) // var yyz4407 ContainerPort
				yyc4407 = true
			}
			yyh4407.ElemContainerState(yyj4407)
			if yyj4407 < len(yyv4407) {
				if r.TryDecodeAsNil() {
					yyv4407[yyj4407] = ContainerPort{}
				} else {
					yyv4410 := &yyv4407[yyj4407]
					yyv4410.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4407 < len(yyv4407) {
			yyv4407 = yyv4407[:yyj4407]
			yyc4407 = true
		} else if yyj4407 == 0 && yyv4407 == nil {
			yyv4407 = []ContainerPort{}
			yyc4407 = true
		}
	}
	yyh4407.End()
	if yyc4407 {
		*v = yyv4407
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4411 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4412 := &yyv4411
		yy4412.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4413 := *v
	yyh4413, yyl4413 := z.DecSliceHelperStart()
	var yyc4413 bool
	if yyl4413 == 0 {
		if yyv4413 == nil {
			yyv4413 = []EnvVar{}
			yyc4413 = true
		} else if len(yyv4413) != 0 {
			yyv4413 = yyv4413[:0]
			yyc4413 = true
		}
	} else if yyl4413 > 0 {
		var yyrr4413, yyrl4413 int
		var yyrt4413 bool
		if yyl4413 > cap(yyv4413) {

			yyrg4413 := len(yyv4413) > 0
			yyv24413 := yyv4413
			yyrl4413, yyrt4413 = z.DecInferLen(yyl4413, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4413 {
				if yyrl4413 <= cap(yyv4413) {
					yyv4413 = yyv4413[:yyrl4413]
				} else {
					yyv4413 = make([]EnvVar, yyrl4413)
				}
			} else {
				yyv4413 = make([]EnvVar, yyrl4413)
			}
			yyc4413 = true
			yyrr4413 = len(yyv4413)
			if yyrg4413 {
				copy(yyv4413, yyv24413)
			}
		} else if yyl4413 != len(yyv4413) {
			yyv4413 = yyv4413[:yyl4413]
			yyc4413 = true
		}
		yyj4413 := 0
		for ; yyj4413 < yyrr4413; yyj4413++ {
			yyh4413.ElemContainerState(yyj4413)
			if r.TryDecodeAsNil() {
				yyv4413[yyj4413] = EnvVar{}
			} else {
				yyv4414 := &yyv4413[yyj4413]
				yyv4414.CodecDecodeSelf(d)
			}

		}
		if yyrt4413 {
			for ; yyj4413 < yyl4413; yyj4413++ {
				yyv4413 = append(yyv4413, EnvVar{})
				yyh4413.ElemContainerState(yyj4413)
				if r.TryDecodeAsNil() {
					yyv4413[yyj4413] = EnvVar{}
				} else {
					yyv4415 := &yyv4413[yyj4413]
					yyv4415.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4413 := 0
		for ; !r.CheckBreak(); yyj4413++ {

			if yyj4413 >= len(yyv4413) {
				yyv4413 = append(yyv4413, EnvVar{}) // var yyz4413 EnvVar
				yyc4413 = true
			}
			yyh4413.ElemContainerState(yyj4413)
			if yyj4413 < len(yyv4413) {
				if r.TryDecodeAsNil() {
					yyv4413[yyj4413] = EnvVar{}
				} else {
					yyv4416 := &yyv4413[yyj4413]
					yyv4416.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4413 < len(yyv4413) {
			yyv4413 = yyv4413[:yyj4413]
			yyc4413 = true
		} else if yyj4413 == 0 && yyv4413 == nil {
			yyv4413 = []EnvVar{}
			yyc4413 = true
		}
	}
	yyh4413.End()
	if yyc4413 {
		*v = yyv4413
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4417 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4418 := &yyv4417
		yy4418.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4419 := *v
	yyh4419, yyl4419 := z.DecSliceHelperStart()
	var yyc4419 bool
	if yyl4419 == 0 {
		if yyv4419 == nil {
			yyv4419 = []VolumeMount{}
			yyc4419 = true
		} else if len(yyv4419) != 0 {
			yyv4419 = yyv4419[:0]
			yyc4419 = true
		}
	} else if yyl4419 > 0 {
		var yyrr4419, yyrl4419 int
		var yyrt4419 bool
		if yyl4419 > cap(yyv4419) {

			yyrg4419 := len(yyv4419) > 0
			yyv24419 := yyv4419
			yyrl4419, yyrt4419 = z.DecInferLen(yyl4419, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4419 {
				if yyrl4419 <= cap(yyv4419) {
					yyv4419 = yyv4419[:yyrl4419]
				} else {
					yyv4419 = make([]VolumeMount, yyrl4419)
				}
			} else {
				yyv4419 = make([]VolumeMount, yyrl4419)
			}
			yyc4419 = true
			yyrr4419 = len(yyv4419)
			if yyrg4419 {
				copy(yyv4419, yyv24419)
			}
		} else if yyl4419 != len(yyv4419) {
			yyv4419 = yyv4419[:yyl4419]
			yyc4419 = true
		}
		yyj4419 := 0
		for ; yyj4419 < yyrr4419; yyj4419++ {
			yyh4419.ElemContainerState(yyj4419)
			if r.TryDecodeAsNil() {
				yyv4419[yyj4419] = VolumeMount{}
			} else {
				yyv4420 := &yyv4419[yyj4419]
				yyv4420.CodecDecodeSelf(d)
			}

		}
		if yyrt4419 {
			for ; yyj4419 < yyl4419; yyj4419++ {
				yyv4419 = append(yyv4419, VolumeMount{})
				yyh4419.ElemContainerState(yyj4419)
				if r.TryDecodeAsNil() {
					yyv4419[yyj4419] = VolumeMount{}
				} else {
					yyv4421 := &yyv4419[yyj4419]
					yyv4421.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4419 := 0
		for ; !r.CheckBreak(); yyj4419++ {

			if yyj4419 >= len(yyv4419) {
				yyv4419 = append(yyv4419, VolumeMount{}) // var yyz4419 VolumeMount
				yyc4419 = true
			}
			yyh4419.ElemContainerState(yyj4419)
			if yyj4419 < len(yyv4419) {
				if r.TryDecodeAsNil() {
					yyv4419[yyj4419] = VolumeMount{}
				} else {
					yyv4422 := &yyv4419[yyj4419]
					yyv4422.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4419 < len(yyv4419) {
			yyv4419 = yyv4419[:yyj4419]
			yyc4419 = true
		} else if yyj4419 == 0 && yyv4419 == nil {
			yyv4419 = []VolumeMount{}
			yyc4419 = true
		}
	}
	yyh4419.End()
	if yyc4419 {
		*v = yyv4419
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4423 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4424 := &yyv4423
		yy4424.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4425 := *v
	yyh4425, yyl4425 := z.DecSliceHelperStart()
	var yyc4425 bool
	if yyl4425 == 0 {
		if yyv4425 == nil {
			yyv4425 = []Pod{}
			yyc4425 = true
		} else if len(yyv4425) != 0 {
			yyv4425 = yyv4425[:0]
			yyc4425 = true
		}
	} else if yyl4425 > 0 {
		var yyrr4425, yyrl4425 int
		var yyrt4425 bool
		if yyl4425 > cap(yyv4425) {

			yyrg4425 := len(yyv4425) > 0
			yyv24425 := yyv4425
			yyrl4425, yyrt4425 = z.DecInferLen(yyl4425, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt4425 {
				if yyrl4425 <= cap(yyv4425) {
					yyv4425 = yyv4425[:yyrl4425]
				} else {
					yyv4425 = make([]Pod, yyrl4425)
				}
			} else {
				yyv4425 = make([]Pod, yyrl4425)
			}
			yyc4425 = true
			yyrr4425 = len(yyv4425)
			if yyrg4425 {
				copy(yyv4425, yyv24425)
			}
		} else if yyl4425 != len(yyv4425) {
			yyv4425 = yyv4425[:yyl4425]
			yyc4425 = true
		}
		yyj4425 := 0
		for ; yyj4425 < yyrr4425; yyj4425++ {
			yyh4425.ElemContainerState(yyj4425)
			if r.TryDecodeAsNil() {
				yyv4425[yyj4425] = Pod{}
			} else {
				yyv4426 := &yyv4425[yyj4425]
				yyv4426.CodecDecodeSelf(d)
			}

		}
		if yyrt4425 {
			for ; yyj4425 < yyl4425; yyj4425++ {
				yyv4425 = append(yyv4425, Pod{})
				yyh4425.ElemContainerState(yyj4425)
				if r.TryDecodeAsNil() {
					yyv4425[yyj4425] = Pod{}
				} else {
					yyv4427 := &yyv4425[yyj4425]
					yyv4427.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4425 := 0
		for ; !r.CheckBreak(); yyj4425++ {

			if yyj4425 >= len(yyv4425) {
				yyv4425 = append(yyv4425, Pod{}) // var yyz4425 Pod
				yyc4425 = true
			}
			yyh4425.ElemContainerState(yyj4425)
			if yyj4425 < len(yyv4425) {
				if r.TryDecodeAsNil() {
					yyv4425[yyj4425] = Pod{}
				} else {
					yyv4428 := &yyv4425[yyj4425]
					yyv4428.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4425 < len(yyv4425) {
			yyv4425 = yyv4425[:yyj4425]
			yyc4425 = true
		} else if yyj4425 == 0 && yyv4425 == nil {
			yyv4425 = []Pod{}
			yyc4425 = true
		}
	}
	yyh4425.End()
	if yyc4425 {
		*v = yyv4425
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4429 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4430 := &yyv4429
		yy4430.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4431 := *v
	yyh4431, yyl4431 := z.DecSliceHelperStart()
	var yyc4431 bool
	if yyl4431 == 0 {
		if yyv4431 == nil {
			yyv4431 = []NodeSelectorTerm{}
			yyc4431 = true
		} else if len(yyv4431) != 0 {
			yyv4431 = yyv4431[:0]
			yyc4431 = true
		}
	} else if yyl4431 > 0 {
		var yyrr4431, yyrl4431 int
		var yyrt4431 bool
		if yyl4431 > cap(yyv4431) {

			yyrg4431 := len(yyv4431) > 0
			yyv24431 := yyv4431
			yyrl4431, yyrt4431 = z.DecInferLen(yyl4431, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4431 {
				if yyrl4431 <= cap(yyv4431) {
					yyv4431 = yyv4431[:yyrl4431]
				} else {
					yyv4431 = make([]NodeSelectorTerm, yyrl4431)
				}
			} else {
				yyv4431 = make([]NodeSelectorTerm, yyrl4431)
			}
			yyc4431 = true
			yyrr4431 = len(yyv4431)
			if yyrg4431 {
				copy(yyv4431, yyv24431)
			}
		} else if yyl4431 != len(yyv4431) {
			yyv4431 = yyv4431[:yyl4431]
			yyc4431 = true
		}
		yyj4431 := 0
		for ; yyj4431 < yyrr4431; yyj4431++ {
			yyh4431.ElemContainerState(yyj4431)
			if r.TryDecodeAsNil() {
				yyv4431[yyj4431] = NodeSelectorTerm{}
			} else {
				yyv4432 := &yyv4431[yyj4431]
				yyv4432.CodecDecodeSelf(d)
			}

		}
		if yyrt4431 {
			for ; yyj4431 < yyl4431; yyj4431++ {
				yyv4431 = append(yyv4431, NodeSelectorTerm{})
				yyh4431.ElemContainerState(yyj4431)
				if r.TryDecodeAsNil() {
					yyv4431[yyj4431] = NodeSelectorTerm{}
				} else {
					yyv4433 := &yyv4431[yyj4431]
					yyv4433.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4431 := 0
		for ; !r.CheckBreak(); yyj4431++ {

			if yyj4431 >= len(yyv4431) {
				yyv4431 = append(yyv4431, NodeSelectorTerm{}) // var yyz4431 NodeSelectorTerm
				yyc4431 = true
			}
			yyh4431.ElemContainerState(yyj4431)
			if yyj4431 < len(yyv4431) {
				if r.TryDecodeAsNil() {
					yyv4431[yyj4431] = NodeSelectorTerm{}
				} else {
					yyv4434 := &yyv4431[yyj4431]
					yyv4434.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4431 < len(yyv4431) {
			yyv4431 = yyv4431[:yyj4431]
			yyc4431 = true
		} else if yyj4431 == 0 && yyv4431 == nil {
			yyv4431 = []NodeSelectorTerm{}
			yyc4431 = true
		}
	}
	yyh4431.End()
	if yyc4431 {
		*v = yyv4431
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4435 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4436 := &yyv4435
		yy4436.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4437 := *v
	yyh4437, yyl4437 := z.DecSliceHelperStart()
	var yyc4437 bool
	if yyl4437 == 0 {
		if yyv4437 == nil {
			yyv4437 = []NodeSelectorRequirement{}
			yyc4437 = true
		} else if len(yyv4437) != 0 {
			yyv4437 = yyv4437[:0]
			yyc4437 = true
		}
	} else if yyl4437 > 0 {
		var yyrr4437, yyrl4437 int
		var yyrt4437 bool
		if yyl4437 > cap(yyv4437) {

			yyrg4437 := len(yyv4437) > 0
			yyv24437 := yyv4437
			yyrl4437, yyrt4437 = z.DecInferLen(yyl4437, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4437 {
				if yyrl4437 <= cap(yyv4437) {
					yyv4437 = yyv4437[:yyrl4437]
				} else {
					yyv4437 = make([]NodeSelectorRequirement, yyrl4437)
				}
			} else {
				yyv4437 = make([]NodeSelectorRequirement, yyrl4437)
			}
			yyc4437 = true
			yyrr4437 = len(yyv4437)
			if yyrg4437 {
				copy(yyv4437, yyv24437)
			}
		} else if yyl4437 != len(yyv4437) {
			yyv4437 = yyv4437[:yyl4437]
			yyc4437 = true
		}
		yyj4437 := 0
		for ; yyj4437 < yyrr4437; yyj4437++ {
			yyh4437.ElemContainerState(yyj4437)
			if r.TryDecodeAsNil() {
				yyv4437[yyj4437] = NodeSelectorRequirement{}
			} else {
				yyv4438 := &yyv4437[yyj4437]
				yyv4438.CodecDecodeSelf(d)
			}

		}
		if yyrt4437 {
			for ; yyj4437 < yyl4437; yyj4437++ {
				yyv4437 = append(yyv4437, NodeSelectorRequirement{})
				yyh4437.ElemContainerState(yyj4437)
				if r.TryDecodeAsNil() {
					yyv4437[yyj4437] = NodeSelectorRequirement{}
				} else {
					yyv4439 := &yyv4437[yyj4437]
					yyv4439.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4437 := 0
		for ; !r.CheckBreak(); yyj4437++ {

			if yyj4437 >= len(yyv4437) {
				yyv4437 = append(yyv4437, NodeSelectorRequirement{}) // var yyz4437 NodeSelectorRequirement
				yyc4437 = true
			}
			yyh4437.ElemContainerState(yyj4437)
			if yyj4437 < len(yyv4437) {
				if r.TryDecodeAsNil() {
					yyv4437[yyj4437] = NodeSelectorRequirement{}
				} else {
					yyv4440 := &yyv4437[yyj4437]
					yyv4440.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4437 < len(yyv4437) {
			yyv4437 = yyv4437[:yyj4437]
			yyc4437 = true
		} else if yyj4437 == 0 && yyv4437 == nil {
			yyv4437 = []NodeSelectorRequirement{}
			yyc4437 = true
		}
	}
	yyh4437.End()
	if yyc4437 {
		*v = yyv4437
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4441 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4442 := &yyv4441
		yy4442.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4443 := *v
	yyh4443, yyl4443 := z.DecSliceHelperStart()
	var yyc4443 bool
	if yyl4443 == 0 {
		if yyv4443 == nil {
			yyv4443 = []PodAffinityTerm{}
			yyc4443 = true
		} else if len(yyv4443) != 0 {
			yyv4443 = yyv4443[:0]
			yyc4443 = true
		}
	} else if yyl4443 > 0 {
		var yyrr4443, yyrl4443 int
		var yyrt4443 bool
		if yyl4443 > cap(yyv4443) {

			yyrg4443 := len(yyv4443) > 0
			yyv24443 := yyv4443
			yyrl4443, yyrt4443 = z.DecInferLen(yyl4443, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4443 {
				if yyrl4443 <= cap(yyv4443) {
					yyv4443 = yyv4443[:yyrl4443]
				} else {
					yyv4443 = make([]PodAffinityTerm, yyrl4443)
				}
			} else {
				yyv4443 = make([]PodAffinityTerm, yyrl4443)
			}
			yyc4443 = true
			yyrr4443 = len(yyv4443)
			if yyrg4443 {
				copy(yyv4443, yyv24443)
			}
		} else if yyl4443 != len(yyv4443) {
			yyv4443 = yyv4443[:yyl4443]
			yyc4443 = true
		}
		yyj4443 := 0
		for ; yyj4443 < yyrr4443; yyj4443++ {
			yyh4443.ElemContainerState(yyj4443)
			if r.TryDecodeAsNil() {
				yyv4443[yyj4443] = PodAffinityTerm{}
			} else {
				yyv4444 := &yyv4443[yyj4443]
				yyv4444.CodecDecodeSelf(d)
			}

		}
		if yyrt4443 {
			for ; yyj4443 < yyl4443; yyj4443++ {
				yyv4443 = append(yyv4443, PodAffinityTerm{})
				yyh4443.ElemContainerState(yyj4443)
				if r.TryDecodeAsNil() {
					yyv4443[yyj4443] = PodAffinityTerm{}
				} else {
					yyv4445 := &yyv4443[yyj4443]
					yyv4445.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4443 := 0
		for ; !r.CheckBreak(); yyj4443++ {

			if yyj4443 >= len(yyv4443) {
				yyv4443 = append(yyv4443, PodAffinityTerm{}) // var yyz4443 PodAffinityTerm
				yyc4443 = true
			}
			yyh4443.ElemContainerState(yyj4443)
			if yyj4443 < len(yyv4443) {
				if r.TryDecodeAsNil() {
					yyv4443[yyj4443] = PodAffinityTerm{}
				} else {
					yyv4446 := &yyv4443[yyj4443]
					yyv4446.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4443 < len(yyv4443) {
			yyv4443 = yyv4443[:yyj4443]
			yyc4443 = true
		} else if yyj4443 == 0 && yyv4443 == nil {
			yyv4443 = []PodAffinityTerm{}
			yyc4443 = true
		}
	}
	yyh4443.End()
	if yyc4443 {
		*v = yyv4443
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4447 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4448 := &yyv4447
		yy4448.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4449 := *v
	yyh4449, yyl4449 := z.DecSliceHelperStart()
	var yyc4449 bool
	if yyl4449 == 0 {
		if yyv4449 == nil {
			yyv4449 = []WeightedPodAffinityTerm{}
			yyc4449 = true
		} else if len(yyv4449) != 0 {
			yyv4449 = yyv4449[:0]
			yyc4449 = true
		}
	} else if yyl4449 > 0 {
		var yyrr4449, yyrl4449 int
		var yyrt4449 bool
		if yyl4449 > cap(yyv4449) {

			yyrg4449 := len(yyv4449) > 0
			yyv24449 := yyv4449
			yyrl4449, yyrt4449 = z.DecInferLen(yyl4449, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4449 {
				if yyrl4449 <= cap(yyv4449) {
					yyv4449 = yyv4449[:yyrl4449]
				} else {
					yyv4449 = make([]WeightedPodAffinityTerm, yyrl4449)
				}
			} else {
				yyv4449 = make([]WeightedPodAffinityTerm, yyrl4449)
			}
			yyc4449 = true
			yyrr4449 = len(yyv4449)
			if yyrg4449 {
				copy(yyv4449, yyv24449)
			}
		} else if yyl4449 != len(yyv4449) {
			yyv4449 = yyv4449[:yyl4449]
			yyc4449 = true
		}
		yyj4449 := 0
		for ; yyj4449 < yyrr4449; yyj4449++ {
			yyh4449.ElemContainerState(yyj4449)
			if r.TryDecodeAsNil() {
				yyv4449[yyj4449] = WeightedPodAffinityTerm{}
			} else {
				yyv4450 := &yyv4449[yyj4449]
				yyv4450.CodecDecodeSelf(d)
			}

		}
		if yyrt4449 {
			for ; yyj4449 < yyl4449; yyj4449++ {
				yyv4449 = append(yyv4449, WeightedPodAffinityTerm{})
				yyh4449.ElemContainerState(yyj4449)
				if r.TryDecodeAsNil() {
					yyv4449[yyj4449] = WeightedPodAffinityTerm{}
				} else {
					yyv4451 := &yyv4449[yyj4449]
					yyv4451.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4449 := 0
		for ; !r.CheckBreak(); yyj4449++ {

			if yyj4449 >= len(yyv4449) {
				yyv4449 = append(yyv4449, WeightedPodAffinityTerm{}) // var yyz4449 WeightedPodAffinityTerm
				yyc4449 = true
			}
			yyh4449.ElemContainerState(yyj4449)
			if yyj4449 < len(yyv4449) {
				if r.TryDecodeAsNil() {
					yyv4449[yyj4449] = WeightedPodAffinityTerm{}
				} else {
					yyv4452 := &yyv4449[yyj4449]
					yyv4452.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4449 < len(yyv4449) {
			yyv4449 = yyv4449[:yyj4449]
			yyc4449 = true
		} else if yyj4449 == 0 && yyv4449 == nil {
			yyv4449 = []WeightedPodAffinityTerm{}
			yyc4449 = true
		}
	}
	yyh4449.End()
	if yyc4449 {
		*v = yyv4449
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4453 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4454 := &yyv4453
		yy4454.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4455 := *v
	yyh4455, yyl4455 := z.DecSliceHelperStart()
	var yyc4455 bool
	if yyl4455 == 0 {
		if yyv4455 == nil {
			yyv4455 = []PreferredSchedulingTerm{}
			yyc4455 = true
		} else if len(yyv4455) != 0 {
			yyv4455 = yyv4455[:0]
			yyc4455 = true
		}
	} else if yyl4455 > 0 {
		var yyrr4455, yyrl4455 int
		var yyrt4455 bool
		if yyl4455 > cap(yyv4455) {

			yyrg4455 := len(yyv4455) > 0
			yyv24455 := yyv4455
			yyrl4455, yyrt4455 = z.DecInferLen(yyl4455, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4455 {
				if yyrl4455 <= cap(yyv4455) {
					yyv4455 = yyv4455[:yyrl4455]
				} else {
					yyv4455 = make([]PreferredSchedulingTerm, yyrl4455)
				}
			} else {
				yyv4455 = make([]PreferredSchedulingTerm, yyrl4455)
			}
			yyc4455 = true
			yyrr4455 = len(yyv4455)
			if yyrg4455 {
				copy(yyv4455, yyv24455)
			}
		} else if yyl4455 != len(yyv4455) {
			yyv4455 = yyv4455[:yyl4455]
			yyc4455 = true
		}
		yyj4455 := 0
		for ; yyj4455 < yyrr4455; yyj4455++ {
			yyh4455.ElemContainerState(yyj4455)
			if r.TryDecodeAsNil() {
				yyv4455[yyj4455] = PreferredSchedulingTerm{}
			} else {
				yyv4456 := &yyv4455[yyj4455]
				yyv4456.CodecDecodeSelf(d)
			}

		}
		if yyrt4455 {
			for ; yyj4455 < yyl4455; yyj4455++ {
				yyv4455 = append(yyv4455, PreferredSchedulingTerm{})
				yyh4455.ElemContainerState(yyj4455)
				if r.TryDecodeAsNil() {
					yyv4455[yyj4455] = PreferredSchedulingTerm{}
				} else {
					yyv4457 := &yyv4455[yyj4455]
					yyv4457.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4455 := 0
		for ; !r.CheckBreak(); yyj4455++ {

			if yyj4455 >= len(yyv4455) {
				yyv4455 = append(yyv4455, PreferredSchedulingTerm{}) // var yyz4455 PreferredSchedulingTerm
				yyc4455 = true
			}
			yyh4455.ElemContainerState(yyj4455)
			if yyj4455 < len(yyv4455) {
				if r.TryDecodeAsNil() {
					yyv4455[yyj4455] = PreferredSchedulingTerm{}
				} else {
					yyv4458 := &yyv4455[yyj4455]
					yyv4458.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4455 < len(yyv4455) {
			yyv4455 = yyv4455[:yyj4455]
			yyc4455 = true
		} else if yyj4455 == 0 && yyv4455 == nil {
			yyv4455 = []PreferredSchedulingTerm{}
			yyc4455 = true
		}
	}
	yyh4455.End()
	if yyc4455 {
		*v = yyv4455
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4459 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4460 := &yyv4459
		yy4460.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4461 := *v
	yyh4461, yyl4461 := z.DecSliceHelperStart()
	var yyc4461 bool
	if yyl4461 == 0 {
		if yyv4461 == nil {
			yyv4461 = []Volume{}
			yyc4461 = true
		} else if len(yyv4461) != 0 {
			yyv4461 = yyv4461[:0]
			yyc4461 = true
		}
	} else if yyl4461 > 0 {
		var yyrr4461, yyrl4461 int
		var yyrt4461 bool
		if yyl4461 > cap(yyv4461) {

			yyrg4461 := len(yyv4461) > 0
			yyv24461 := yyv4461
			yyrl4461, yyrt4461 = z.DecInferLen(yyl4461, z.DecBasicHandle().MaxInitLen, 176)
			if yyrt4461 {
				if yyrl4461 <= cap(yyv4461) {
					yyv4461 = yyv4461[:yyrl4461]
				} else {
					yyv4461 = make([]Volume, yyrl4461)
				}
			} else {
				yyv4461 = make([]Volume, yyrl4461)
			}
			yyc4461 = true
			yyrr4461 = len(yyv4461)
			if yyrg4461 {
				copy(yyv4461, yyv24461)
			}
		} else if yyl4461 != len(yyv4461) {
			yyv4461 = yyv4461[:yyl4461]
			yyc4461 = true
		}
		yyj4461 := 0
		for ; yyj4461 < yyrr4461; yyj4461++ {
			yyh4461.ElemContainerState(yyj4461)
			if r.TryDecodeAsNil() {
				yyv4461[yyj4461] = Volume{}
			} else {
				yyv4462 := &yyv4461[yyj4461]
				yyv4462.CodecDecodeSelf(d)
			}

		}
		if yyrt4461 {
			for ; yyj4461 < yyl4461; yyj4461++ {
				yyv4461 = append(yyv4461, Volume{})
				yyh4461.ElemContainerState(yyj4461)
				if r.TryDecodeAsNil() {
					yyv4461[yyj4461] = Volume{}
				} else {
					yyv4463 := &yyv4461[yyj4461]
					yyv4463.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4461 := 0
		for ; !r.CheckBreak(); yyj4461++ {

			if yyj4461 >= len(yyv4461) {
				yyv4461 = append(yyv4461, Volume{}) // var yyz4461 Volume
				yyc4461 = true
			}
			yyh4461.ElemContainerState(yyj4461)
			if yyj4461 < len(yyv4461) {
				if r.TryDecodeAsNil() {
					yyv4461[yyj4461] = Volume{}
				} else {
					yyv4464 := &yyv4461[yyj4461]
					yyv4464.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4461 < len(yyv4461) {
			yyv4461 = yyv4461[:yyj4461]
			yyc4461 = true
		} else if yyj4461 == 0 && yyv4461 == nil {
			yyv4461 = []Volume{}
			yyc4461 = true
		}
	}
	yyh4461.End()
	if yyc4461 {
		*v = yyv4461
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4465 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4466 := &yyv4465
		yy4466.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4467 := *v
	yyh4467, yyl4467 := z.DecSliceHelperStart()
	var yyc4467 bool
	if yyl4467 == 0 {
		if yyv4467 == nil {
			yyv4467 = []Container{}
			yyc4467 = true
		} else if len(yyv4467) != 0 {
			yyv4467 = yyv4467[:0]
			yyc4467 = true
		}
	} else if yyl4467 > 0 {
		var yyrr4467, yyrl4467 int
		var yyrt4467 bool
		if yyl4467 > cap(yyv4467) {

			yyrg4467 := len(yyv4467) > 0
			yyv24467 := yyv4467
			yyrl4467, yyrt4467 = z.DecInferLen(yyl4467, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4467 {
				if yyrl4467 <= cap(yyv4467) {
					yyv4467 = yyv4467[:yyrl4467]
				} else {
					yyv4467 = make([]Container, yyrl4467)
				}
			} else {
				yyv4467 = make([]Container, yyrl4467)
			}
			yyc4467 = true
			yyrr4467 = len(yyv4467)
			if yyrg4467 {
				copy(yyv4467, yyv24467)
			}
		} else if yyl4467 != len(yyv4467) {
			yyv4467 = yyv4467[:yyl4467]
			yyc4467 = true
		}
		yyj4467 := 0
		for ; yyj4467 < yyrr4467; yyj4467++ {
			yyh4467.ElemContainerState(yyj4467)
			if r.TryDecodeAsNil() {
				yyv4467[yyj4467] = Container{}
			} else {
				yyv4468 := &yyv4467[yyj4467]
				yyv4468.CodecDecodeSelf(d)
			}

		}
		if yyrt4467 {
			for ; yyj4467 < yyl4467; yyj4467++ {
				yyv4467 = append(yyv4467, Container{})
				yyh4467.ElemContainerState(yyj4467)
				if r.TryDecodeAsNil() {
					yyv4467[yyj4467] = Container{}
				} else {
					yyv4469 := &yyv4467[yyj4467]
					yyv4469.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4467 := 0
		for ; !r.CheckBreak(); yyj4467++ {

			if yyj4467 >= len(yyv4467) {
				yyv4467 = append(yyv4467, Container{}) // var yyz4467 Container
				yyc4467 = true
			}
			yyh4467.ElemContainerState(yyj4467)
			if yyj4467 < len(yyv4467) {
				if r.TryDecodeAsNil() {
					yyv4467[yyj4467] = Container{}
				} else {
					yyv4470 := &yyv4467[yyj4467]
					yyv4470.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4467 < len(yyv4467) {
			yyv4467 = yyv4467[:yyj4467]
			yyc4467 = true
		} else if yyj4467 == 0 && yyv4467 == nil {
			yyv4467 = []Container{}
			yyc4467 = true
		}
	}
	yyh4467.End()
	if yyc4467 {
		*v = yyv4467
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4471 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4472 := &yyv4471
		yy4472.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4473 := *v
	yyh4473, yyl4473 := z.DecSliceHelperStart()
	var yyc4473 bool
	if yyl4473 == 0 {
		if yyv4473 == nil {
			yyv4473 = []LocalObjectReference{}
			yyc4473 = true
		} else if len(yyv4473) != 0 {
			yyv4473 = yyv4473[:0]
			yyc4473 = true
		}
	} else if yyl4473 > 0 {
		var yyrr4473, yyrl4473 int
		var yyrt4473 bool
		if yyl4473 > cap(yyv4473) {

			yyrg4473 := len(yyv4473) > 0
			yyv24473 := yyv4473
			yyrl4473, yyrt4473 = z.DecInferLen(yyl4473, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4473 {
				if yyrl4473 <= cap(yyv4473) {
					yyv4473 = yyv4473[:yyrl4473]
				} else {
					yyv4473 = make([]LocalObjectReference, yyrl4473)
				}
			} else {
				yyv4473 = make([]LocalObjectReference, yyrl4473)
			}
			yyc4473 = true
			yyrr4473 = len(yyv4473)
			if yyrg4473 {
				copy(yyv4473, yyv24473)
			}
		} else if yyl4473 != len(yyv4473) {
			yyv4473 = yyv4473[:yyl4473]
			yyc4473 = true
		}
		yyj4473 := 0
		for ; yyj4473 < yyrr4473; yyj4473++ {
			yyh4473.ElemContainerState(yyj4473)
			if r.TryDecodeAsNil() {
				yyv4473[yyj4473] = LocalObjectReference{}
			} else {
				yyv4474 := &yyv4473[yyj4473]
				yyv4474.CodecDecodeSelf(d)
			}

		}
		if yyrt4473 {
			for ; yyj4473 < yyl4473; yyj4473++ {
				yyv4473 = append(yyv4473, LocalObjectReference{})
				yyh4473.ElemContainerState(yyj4473)
				if r.TryDecodeAsNil() {
					yyv4473[yyj4473] = LocalObjectReference{}
				} else {
					yyv4475 := &yyv4473[yyj4473]
					yyv4475.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4473 := 0
		for ; !r.CheckBreak(); yyj4473++ {

			if yyj4473 >= len(yyv4473) {
				yyv4473 = append(yyv4473, LocalObjectReference{}) // var yyz4473 LocalObjectReference
				yyc4473 = true
			}
			yyh4473.ElemContainerState(yyj4473)
			if yyj4473 < len(yyv4473) {
				if r.TryDecodeAsNil() {
					yyv4473[yyj4473] = LocalObjectReference{}
				} else {
					yyv4476 := &yyv4473[yyj4473]
					yyv4476.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4473 < len(yyv4473) {
			yyv4473 = yyv4473[:yyj4473]
			yyc4473 = true
		} else if yyj4473 == 0 && yyv4473 == nil {
			yyv4473 = []LocalObjectReference{}
			yyc4473 = true
		}
	}
	yyh4473.End()
	if yyc4473 {
		*v = yyv4473
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4477 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4478 := &yyv4477
		yy4478.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4479 := *v
	yyh4479, yyl4479 := z.DecSliceHelperStart()
	var yyc4479 bool
	if yyl4479 == 0 {
		if yyv4479 == nil {
			yyv4479 = []PodCondition{}
			yyc4479 = true
		} else if len(yyv4479) != 0 {
			yyv4479 = yyv4479[:0]
			yyc4479 = true
		}
	} else if yyl4479 > 0 {
		var yyrr4479, yyrl4479 int
		var yyrt4479 bool
		if yyl4479 > cap(yyv4479) {

			yyrg4479 := len(yyv4479) > 0
			yyv24479 := yyv4479
			yyrl4479, yyrt4479 = z.DecInferLen(yyl4479, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4479 {
				if yyrl4479 <= cap(yyv4479) {
					yyv4479 = yyv4479[:yyrl4479]
				} else {
					yyv4479 = make([]PodCondition, yyrl4479)
				}
			} else {
				yyv4479 = make([]PodCondition, yyrl4479)
			}
			yyc4479 = true
			yyrr4479 = len(yyv4479)
			if yyrg4479 {
				copy(yyv4479, yyv24479)
			}
		} else if yyl4479 != len(yyv4479) {
			yyv4479 = yyv4479[:yyl4479]
			yyc4479 = true
		}
		yyj4479 := 0
		for ; yyj4479 < yyrr4479; yyj4479++ {
			yyh4479.ElemContainerState(yyj4479)
			if r.TryDecodeAsNil() {
				yyv4479[yyj4479] = PodCondition{}
			} else {
				yyv4480 := &yyv4479[yyj4479]
				yyv4480.CodecDecodeSelf(d)
			}

		}
		if yyrt4479 {
			for ; yyj4479 < yyl4479; yyj4479++ {
				yyv4479 = append(yyv4479, PodCondition{})
				yyh4479.ElemContainerState(yyj4479)
				if r.TryDecodeAsNil() {
					yyv4479[yyj4479] = PodCondition{}
				} else {
					yyv4481 := &yyv4479[yyj4479]
					yyv4481.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4479 := 0
		for ; !r.CheckBreak(); yyj4479++ {

			if yyj4479 >= len(yyv4479) {
				yyv4479 = append(yyv4479, PodCondition{}) // var yyz4479 PodCondition
				yyc4479 = true
			}
			yyh4479.ElemContainerState(yyj4479)
			if yyj4479 < len(yyv4479) {
				if r.TryDecodeAsNil() {
					yyv4479[yyj4479] = PodCondition{}
				} else {
					yyv4482 := &yyv4479[yyj4479]
					yyv4482.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4479 < len(yyv4479) {
			yyv4479 = yyv4479[:yyj4479]
			yyc4479 = true
		} else if yyj4479 == 0 && yyv4479 == nil {
			yyv4479 = []PodCondition{}
			yyc4479 = true
		}
	}
	yyh4479.End()
	if yyc4479 {
		*v = yyv4479
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4483 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4484 := &yyv4483
		yy4484.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4485 := *v
	yyh4485, yyl4485 := z.DecSliceHelperStart()
	var yyc4485 bool
	if yyl4485 == 0 {
		if yyv4485 == nil {
			yyv4485 = []ContainerStatus{}
			yyc4485 = true
		} else if len(yyv4485) != 0 {
			yyv4485 = yyv4485[:0]
			yyc4485 = true
		}
	} else if yyl4485 > 0 {
		var yyrr4485, yyrl4485 int
		var yyrt4485 bool
		if yyl4485 > cap(yyv4485) {

			yyrg4485 := len(yyv4485) > 0
			yyv24485 := yyv4485
			yyrl4485, yyrt4485 = z.DecInferLen(yyl4485, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4485 {
				if yyrl4485 <= cap(yyv4485) {
					yyv4485 = yyv4485[:yyrl4485]
				} else {
					yyv4485 = make([]ContainerStatus, yyrl4485)
				}
			} else {
				yyv4485 = make([]ContainerStatus, yyrl4485)
			}
			yyc4485 = true
			yyrr4485 = len(yyv4485)
			if yyrg4485 {
				copy(yyv4485, yyv24485)
			}
		} else if yyl4485 != len(yyv4485) {
			yyv4485 = yyv4485[:yyl4485]
			yyc4485 = true
		}
		yyj4485 := 0
		for ; yyj4485 < yyrr4485; yyj4485++ {
			yyh4485.ElemContainerState(yyj4485)
			if r.TryDecodeAsNil() {
				yyv4485[yyj4485] = ContainerStatus{}
			} else {
				yyv4486 := &yyv4485[yyj4485]
				yyv4486.CodecDecodeSelf(d)
			}

		}
		if yyrt4485 {
			for ; yyj4485 < yyl4485; yyj4485++ {
				yyv4485 = append(yyv4485, ContainerStatus{})
				yyh4485.ElemContainerState(yyj4485)
				if r.TryDecodeAsNil() {
					yyv4485[yyj4485] = ContainerStatus{}
				} else {
					yyv4487 := &yyv4485[yyj4485]
					yyv4487.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4485 := 0
		for ; !r.CheckBreak(); yyj4485++ {

			if yyj4485 >= len(yyv4485) {
				yyv4485 = append(yyv4485, ContainerStatus{}) // var yyz4485 ContainerStatus
				yyc4485 = true
			}
			yyh4485.ElemContainerState(yyj4485)
			if yyj4485 < len(yyv4485) {
				if r.TryDecodeAsNil() {
					yyv4485[yyj4485] = ContainerStatus{}
				} else {
					yyv4488 := &yyv4485[yyj4485]
					yyv4488.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4485 < len(yyv4485) {
			yyv4485 = yyv4485[:yyj4485]
			yyc4485 = true
		} else if yyj4485 == 0 && yyv4485 == nil {
			yyv4485 = []ContainerStatus{}
			yyc4485 = true
		}
	}
	yyh4485.End()
	if yyc4485 {
		*v = yyv4485
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4489 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4490 := &yyv4489
		yy4490.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4491 := *v
	yyh4491, yyl4491 := z.DecSliceHelperStart()
	var yyc4491 bool
	if yyl4491 == 0 {
		if yyv4491 == nil {
			yyv4491 = []PodTemplate{}
			yyc4491 = true
		} else if len(yyv4491) != 0 {
			yyv4491 = yyv4491[:0]
			yyc4491 = true
		}
	} else if yyl4491 > 0 {
		var yyrr4491, yyrl4491 int
		var yyrt4491 bool
		if yyl4491 > cap(yyv4491) {

			yyrg4491 := len(yyv4491) > 0
			yyv24491 := yyv4491
			yyrl4491, yyrt4491 = z.DecInferLen(yyl4491, z.DecBasicHandle().MaxInitLen, 688)
			if yyrt4491 {
				if yyrl4491 <= cap(yyv4491) {
					yyv4491 = yyv4491[:yyrl4491]
				} else {
					yyv4491 = make([]PodTemplate, yyrl4491)
				}
			} else {
				yyv4491 = make([]PodTemplate, yyrl4491)
			}
			yyc4491 = true
			yyrr4491 = len(yyv4491)
			if yyrg4491 {
				copy(yyv4491, yyv24491)
			}
		} else if yyl4491 != len(yyv4491) {
			yyv4491 = yyv4491[:yyl4491]
			yyc4491 = true
		}
		yyj4491 := 0
		for ; yyj4491 < yyrr4491; yyj4491++ {
			yyh4491.ElemContainerState(yyj4491)
			if r.TryDecodeAsNil() {
				yyv4491[yyj4491] = PodTemplate{}
			} else {
				yyv4492 := &yyv4491[yyj4491]
				yyv4492.CodecDecodeSelf(d)
			}

		}
		if yyrt4491 {
			for ; yyj4491 < yyl4491; yyj4491++ {
				yyv4491 = append(yyv4491, PodTemplate{})
				yyh4491.ElemContainerState(yyj4491)
				if r.TryDecodeAsNil() {
					yyv4491[yyj4491] = PodTemplate{}
				} else {
					yyv4493 := &yyv4491[yyj4491]
					yyv4493.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4491 := 0
		for ; !r.CheckBreak(); yyj4491++ {

			if yyj4491 >= len(yyv4491) {
				yyv4491 = append(yyv4491, PodTemplate{}) // var yyz4491 PodTemplate
				yyc4491 = true
			}
			yyh4491.ElemContainerState(yyj4491)
			if yyj4491 < len(yyv4491) {
				if r.TryDecodeAsNil() {
					yyv4491[yyj4491] = PodTemplate{}
				} else {
					yyv4494 := &yyv4491[yyj4491]
					yyv4494.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4491 < len(yyv4491) {
			yyv4491 = yyv4491[:yyj4491]
			yyc4491 = true
		} else if yyj4491 == 0 && yyv4491 == nil {
			yyv4491 = []PodTemplate{}
			yyc4491 = true
		}
	}
	yyh4491.End()
	if yyc4491 {
		*v = yyv4491
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4495 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4496 := &yyv4495
		yy4496.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4497 := *v
	yyh4497, yyl4497 := z.DecSliceHelperStart()
	var yyc4497 bool
	if yyl4497 == 0 {
		if yyv4497 == nil {
			yyv4497 = []ReplicationController{}
			yyc4497 = true
		} else if len(yyv4497) != 0 {
			yyv4497 = yyv4497[:0]
			yyc4497 = true
		}
	} else if yyl4497 > 0 {
		var yyrr4497, yyrl4497 int
		var yyrt4497 bool
		if yyl4497 > cap(yyv4497) {

			yyrg4497 := len(yyv4497) > 0
			yyv24497 := yyv4497
			yyrl4497, yyrt4497 = z.DecInferLen(yyl4497, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4497 {
				if yyrl4497 <= cap(yyv4497) {
					yyv4497 = yyv4497[:yyrl4497]
				} else {
					yyv4497 = make([]ReplicationController, yyrl4497)
				}
			} else {
				yyv4497 = make([]ReplicationController, yyrl4497)
			}
			yyc4497 = true
			yyrr4497 = len(yyv4497)
			if yyrg4497 {
				copy(yyv4497, yyv24497)
			}
		} else if yyl4497 != len(yyv4497) {
			yyv4497 = yyv4497[:yyl4497]
			yyc4497 = true
		}
		yyj4497 := 0
		for ; yyj4497 < yyrr4497; yyj4497++ {
			yyh4497.ElemContainerState(yyj4497)
			if r.TryDecodeAsNil() {
				yyv4497[yyj4497] = ReplicationController{}
			} else {
				yyv4498 := &yyv4497[yyj4497]
				yyv4498.CodecDecodeSelf(d)
			}

		}
		if yyrt4497 {
			for ; yyj4497 < yyl4497; yyj4497++ {
				yyv4497 = append(yyv4497, ReplicationController{})
				yyh4497.ElemContainerState(yyj4497)
				if r.TryDecodeAsNil() {
					yyv4497[yyj4497] = ReplicationController{}
				} else {
					yyv4499 := &yyv4497[yyj4497]
					yyv4499.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4497 := 0
		for ; !r.CheckBreak(); yyj4497++ {

			if yyj4497 >= len(yyv4497) {
				yyv4497 = append(yyv4497, ReplicationController{}) // var yyz4497 ReplicationController
				yyc4497 = true
			}
			yyh4497.ElemContainerState(yyj4497)
			if yyj4497 < len(yyv4497) {
				if r.TryDecodeAsNil() {
					yyv4497[yyj4497] = ReplicationController{}
				} else {
					yyv4500 := &yyv4497[yyj4497]
					yyv4500.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4497 < len(yyv4497) {
			yyv4497 = yyv4497[:yyj4497]
			yyc4497 = true
		} else if yyj4497 == 0 && yyv4497 == nil {
			yyv4497 = []ReplicationController{}
			yyc4497 = true
		}
	}
	yyh4497.End()
	if yyc4497 {
		*v = yyv4497
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4501 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4502 := &yyv4501
		yy4502.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4503 := *v
	yyh4503, yyl4503 := z.DecSliceHelperStart()
	var yyc4503 bool
	if yyl4503 == 0 {
		if yyv4503 == nil {
			yyv4503 = []Service{}
			yyc4503 = true
		} else if len(yyv4503) != 0 {
			yyv4503 = yyv4503[:0]
			yyc4503 = true
		}
	} else if yyl4503 > 0 {
		var yyrr4503, yyrl4503 int
		var yyrt4503 bool
		if yyl4503 > cap(yyv4503) {

			yyrg4503 := len(yyv4503) > 0
			yyv24503 := yyv4503
			yyrl4503, yyrt4503 = z.DecInferLen(yyl4503, z.DecBasicHandle().MaxInitLen, 416)
			if yyrt4503 {
				if yyrl4503 <= cap(yyv4503) {
					yyv4503 = yyv4503[:yyrl4503]
				} else {
					yyv4503 = make([]Service, yyrl4503)
				}
			} else {
				yyv4503 = make([]Service, yyrl4503)
			}
			yyc4503 = true
			yyrr4503 = len(yyv4503)
			if yyrg4503 {
				copy(yyv4503, yyv24503)
			}
		} else if yyl4503 != len(yyv4503) {
			yyv4503 = yyv4503[:yyl4503]
			yyc4503 = true
		}
		yyj4503 := 0
		for ; yyj4503 < yyrr4503; yyj4503++ {
			yyh4503.ElemContainerState(yyj4503)
			if r.TryDecodeAsNil() {
				yyv4503[yyj4503] = Service{}
			} else {
				yyv4504 := &yyv4503[yyj4503]
				yyv4504.CodecDecodeSelf(d)
			}

		}
		if yyrt4503 {
			for ; yyj4503 < yyl4503; yyj4503++ {
				yyv4503 = append(yyv4503, Service{})
				yyh4503.ElemContainerState(yyj4503)
				if r.TryDecodeAsNil() {
					yyv4503[yyj4503] = Service{}
				} else {
					yyv4505 := &yyv4503[yyj4503]
					yyv4505.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4503 := 0
		for ; !r.CheckBreak(); yyj4503++ {

			if yyj4503 >= len(yyv4503) {
				yyv4503 = append(yyv4503, Service{}) // var yyz4503 Service
				yyc4503 = true
			}
			yyh4503.ElemContainerState(yyj4503)
			if yyj4503 < len(yyv4503) {
				if r.TryDecodeAsNil() {
					yyv4503[yyj4503] = Service{}
				} else {
					yyv4506 := &yyv4503[yyj4503]
					yyv4506.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4503 < len(yyv4503) {
			yyv4503 = yyv4503[:yyj4503]
			yyc4503 = true
		} else if yyj4503 == 0 && yyv4503 == nil {
			yyv4503 = []Service{}
			yyc4503 = true
		}
	}
	yyh4503.End()
	if yyc4503 {
		*v = yyv4503
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4507 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4508 := &yyv4507
		yy4508.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4509 := *v
	yyh4509, yyl4509 := z.DecSliceHelperStart()
	var yyc4509 bool
	if yyl4509 == 0 {
		if yyv4509 == nil {
			yyv4509 = []LoadBalancerIngress{}
			yyc4509 = true
		} else if len(yyv4509) != 0 {
			yyv4509 = yyv4509[:0]
			yyc4509 = true
		}
	} else if yyl4509 > 0 {
		var yyrr4509, yyrl4509 int
		var yyrt4509 bool
		if yyl4509 > cap(yyv4509) {

			yyrg4509 := len(yyv4509) > 0
			yyv24509 := yyv4509
			yyrl4509, yyrt4509 = z.DecInferLen(yyl4509, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4509 {
				if yyrl4509 <= cap(yyv4509) {
					yyv4509 = yyv4509[:yyrl4509]
				} else {
					yyv4509 = make([]LoadBalancerIngress, yyrl4509)
				}
			} else {
				yyv4509 = make([]LoadBalancerIngress, yyrl4509)
			}
			yyc4509 = true
			yyrr4509 = len(yyv4509)
			if yyrg4509 {
				copy(yyv4509, yyv24509)
			}
		} else if yyl4509 != len(yyv4509) {
			yyv4509 = yyv4509[:yyl4509]
			yyc4509 = true
		}
		yyj4509 := 0
		for ; yyj4509 < yyrr4509; yyj4509++ {
			yyh4509.ElemContainerState(yyj4509)
			if r.TryDecodeAsNil() {
				yyv4509[yyj4509] = LoadBalancerIngress{}
			} else {
				yyv4510 := &yyv4509[yyj4509]
				yyv4510.CodecDecodeSelf(d)
			}

		}
		if yyrt4509 {
			for ; yyj4509 < yyl4509; yyj4509++ {
				yyv4509 = append(yyv4509, LoadBalancerIngress{})
				yyh4509.ElemContainerState(yyj4509)
				if r.TryDecodeAsNil() {
					yyv4509[yyj4509] = LoadBalancerIngress{}
				} else {
					yyv4511 := &yyv4509[yyj4509]
					yyv4511.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4509 := 0
		for ; !r.CheckBreak(); yyj4509++ {

			if yyj4509 >= len(yyv4509) {
				yyv4509 = append(yyv4509, LoadBalancerIngress{}) // var yyz4509 LoadBalancerIngress
				yyc4509 = true
			}
			yyh4509.ElemContainerState(yyj4509)
			if yyj4509 < len(yyv4509) {
				if r.TryDecodeAsNil() {
					yyv4509[yyj4509] = LoadBalancerIngress{}
				} else {
					yyv4512 := &yyv4509[yyj4509]
					yyv4512.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4509 < len(yyv4509) {
			yyv4509 = yyv4509[:yyj4509]
			yyc4509 = true
		} else if yyj4509 == 0 && yyv4509 == nil {
			yyv4509 = []LoadBalancerIngress{}
			yyc4509 = true
		}
	}
	yyh4509.End()
	if yyc4509 {
		*v = yyv4509
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4513 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4514 := &yyv4513
		yy4514.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4515 := *v
	yyh4515, yyl4515 := z.DecSliceHelperStart()
	var yyc4515 bool
	if yyl4515 == 0 {
		if yyv4515 == nil {
			yyv4515 = []ServicePort{}
			yyc4515 = true
		} else if len(yyv4515) != 0 {
			yyv4515 = yyv4515[:0]
			yyc4515 = true
		}
	} else if yyl4515 > 0 {
		var yyrr4515, yyrl4515 int
		var yyrt4515 bool
		if yyl4515 > cap(yyv4515) {

			yyrg4515 := len(yyv4515) > 0
			yyv24515 := yyv4515
			yyrl4515, yyrt4515 = z.DecInferLen(yyl4515, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4515 {
				if yyrl4515 <= cap(yyv4515) {
					yyv4515 = yyv4515[:yyrl4515]
				} else {
					yyv4515 = make([]ServicePort, yyrl4515)
				}
			} else {
				yyv4515 = make([]ServicePort, yyrl4515)
			}
			yyc4515 = true
			yyrr4515 = len(yyv4515)
			if yyrg4515 {
				copy(yyv4515, yyv24515)
			}
		} else if yyl4515 != len(yyv4515) {
			yyv4515 = yyv4515[:yyl4515]
			yyc4515 = true
		}
		yyj4515 := 0
		for ; yyj4515 < yyrr4515; yyj4515++ {
			yyh4515.ElemContainerState(yyj4515)
			if r.TryDecodeAsNil() {
				yyv4515[yyj4515] = ServicePort{}
			} else {
				yyv4516 := &yyv4515[yyj4515]
				yyv4516.CodecDecodeSelf(d)
			}

		}
		if yyrt4515 {
			for ; yyj4515 < yyl4515; yyj4515++ {
				yyv4515 = append(yyv4515, ServicePort{})
				yyh4515.ElemContainerState(yyj4515)
				if r.TryDecodeAsNil() {
					yyv4515[yyj4515] = ServicePort{}
				} else {
					yyv4517 := &yyv4515[yyj4515]
					yyv4517.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4515 := 0
		for ; !r.CheckBreak(); yyj4515++ {

			if yyj4515 >= len(yyv4515) {
				yyv4515 = append(yyv4515, ServicePort{}) // var yyz4515 ServicePort
				yyc4515 = true
			}
			yyh4515.ElemContainerState(yyj4515)
			if yyj4515 < len(yyv4515) {
				if r.TryDecodeAsNil() {
					yyv4515[yyj4515] = ServicePort{}
				} else {
					yyv4518 := &yyv4515[yyj4515]
					yyv4518.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4515 < len(yyv4515) {
			yyv4515 = yyv4515[:yyj4515]
			yyc4515 = true
		} else if yyj4515 == 0 && yyv4515 == nil {
			yyv4515 = []ServicePort{}
			yyc4515 = true
		}
	}
	yyh4515.End()
	if yyc4515 {
		*v = yyv4515
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4519 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4520 := &yyv4519
		yy4520.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4521 := *v
	yyh4521, yyl4521 := z.DecSliceHelperStart()
	var yyc4521 bool
	if yyl4521 == 0 {
		if yyv4521 == nil {
			yyv4521 = []ObjectReference{}
			yyc4521 = true
		} else if len(yyv4521) != 0 {
			yyv4521 = yyv4521[:0]
			yyc4521 = true
		}
	} else if yyl4521 > 0 {
		var yyrr4521, yyrl4521 int
		var yyrt4521 bool
		if yyl4521 > cap(yyv4521) {

			yyrg4521 := len(yyv4521) > 0
			yyv24521 := yyv4521
			yyrl4521, yyrt4521 = z.DecInferLen(yyl4521, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4521 {
				if yyrl4521 <= cap(yyv4521) {
					yyv4521 = yyv4521[:yyrl4521]
				} else {
					yyv4521 = make([]ObjectReference, yyrl4521)
				}
			} else {
				yyv4521 = make([]ObjectReference, yyrl4521)
			}
			yyc4521 = true
			yyrr4521 = len(yyv4521)
			if yyrg4521 {
				copy(yyv4521, yyv24521)
			}
		} else if yyl4521 != len(yyv4521) {
			yyv4521 = yyv4521[:yyl4521]
			yyc4521 = true
		}
		yyj4521 := 0
		for ; yyj4521 < yyrr4521; yyj4521++ {
			yyh4521.ElemContainerState(yyj4521)
			if r.TryDecodeAsNil() {
				yyv4521[yyj4521] = ObjectReference{}
			} else {
				yyv4522 := &yyv4521[yyj4521]
				yyv4522.CodecDecodeSelf(d)
			}

		}
		if yyrt4521 {
			for ; yyj4521 < yyl4521; yyj4521++ {
				yyv4521 = append(yyv4521, ObjectReference{})
				yyh4521.ElemContainerState(yyj4521)
				if r.TryDecodeAsNil() {
					yyv4521[yyj4521] = ObjectReference{}
				} else {
					yyv4523 := &yyv4521[yyj4521]
					yyv4523.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4521 := 0
		for ; !r.CheckBreak(); yyj4521++ {

			if yyj4521 >= len(yyv4521) {
				yyv4521 = append(yyv4521, ObjectReference{}) // var yyz4521 ObjectReference
				yyc4521 = true
			}
			yyh4521.ElemContainerState(yyj4521)
			if yyj4521 < len(yyv4521) {
				if r.TryDecodeAsNil() {
					yyv4521[yyj4521] = ObjectReference{}
				} else {
					yyv4524 := &yyv4521[yyj4521]
					yyv4524.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4521 < len(yyv4521) {
			yyv4521 = yyv4521[:yyj4521]
			yyc4521 = true
		} else if yyj4521 == 0 && yyv4521 == nil {
			yyv4521 = []ObjectReference{}
			yyc4521 = true
		}
	}
	yyh4521.End()
	if yyc4521 {
		*v = yyv4521
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4525 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4526 := &yyv4525
		yy4526.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4527 := *v
	yyh4527, yyl4527 := z.DecSliceHelperStart()
	var yyc4527 bool
	if yyl4527 == 0 {
		if yyv4527 == nil {
			yyv4527 = []ServiceAccount{}
			yyc4527 = true
		} else if len(yyv4527) != 0 {
			yyv4527 = yyv4527[:0]
			yyc4527 = true
		}
	} else if yyl4527 > 0 {
		var yyrr4527, yyrl4527 int
		var yyrt4527 bool
		if yyl4527 > cap(yyv4527) {

			yyrg4527 := len(yyv4527) > 0
			yyv24527 := yyv4527
			yyrl4527, yyrt4527 = z.DecInferLen(yyl4527, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4527 {
				if yyrl4527 <= cap(yyv4527) {
					yyv4527 = yyv4527[:yyrl4527]
				} else {
					yyv4527 = make([]ServiceAccount, yyrl4527)
				}
			} else {
				yyv4527 = make([]ServiceAccount, yyrl4527)
			}
			yyc4527 = true
			yyrr4527 = len(yyv4527)
			if yyrg4527 {
				copy(yyv4527, yyv24527)
			}
		} else if yyl4527 != len(yyv4527) {
			yyv4527 = yyv4527[:yyl4527]
			yyc4527 = true
		}
		yyj4527 := 0
		for ; yyj4527 < yyrr4527; yyj4527++ {
			yyh4527.ElemContainerState(yyj4527)
			if r.TryDecodeAsNil() {
				yyv4527[yyj4527] = ServiceAccount{}
			} else {
				yyv4528 := &yyv4527[yyj4527]
				yyv4528.CodecDecodeSelf(d)
			}

		}
		if yyrt4527 {
			for ; yyj4527 < yyl4527; yyj4527++ {
				yyv4527 = append(yyv4527, ServiceAccount{})
				yyh4527.ElemContainerState(yyj4527)
				if r.TryDecodeAsNil() {
					yyv4527[yyj4527] = ServiceAccount{}
				} else {
					yyv4529 := &yyv4527[yyj4527]
					yyv4529.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4527 := 0
		for ; !r.CheckBreak(); yyj4527++ {

			if yyj4527 >= len(yyv4527) {
				yyv4527 = append(yyv4527, ServiceAccount{}) // var yyz4527 ServiceAccount
				yyc4527 = true
			}
			yyh4527.ElemContainerState(yyj4527)
			if yyj4527 < len(yyv4527) {
				if r.TryDecodeAsNil() {
					yyv4527[yyj4527] = ServiceAccount{}
				} else {
					yyv4530 := &yyv4527[yyj4527]
					yyv4530.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4527 < len(yyv4527) {
			yyv4527 = yyv4527[:yyj4527]
			yyc4527 = true
		} else if yyj4527 == 0 && yyv4527 == nil {
			yyv4527 = []ServiceAccount{}
			yyc4527 = true
		}
	}
	yyh4527.End()
	if yyc4527 {
		*v = yyv4527
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4531 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4532 := &yyv4531
		yy4532.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4533 := *v
	yyh4533, yyl4533 := z.DecSliceHelperStart()
	var yyc4533 bool
	if yyl4533 == 0 {
		if yyv4533 == nil {
			yyv4533 = []EndpointSubset{}
			yyc4533 = true
		} else if len(yyv4533) != 0 {
			yyv4533 = yyv4533[:0]
			yyc4533 = true
		}
	} else if yyl4533 > 0 {
		var yyrr4533, yyrl4533 int
		var yyrt4533 bool
		if yyl4533 > cap(yyv4533) {

			yyrg4533 := len(yyv4533) > 0
			yyv24533 := yyv4533
			yyrl4533, yyrt4533 = z.DecInferLen(yyl4533, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4533 {
				if yyrl4533 <= cap(yyv4533) {
					yyv4533 = yyv4533[:yyrl4533]
				} else {
					yyv4533 = make([]EndpointSubset, yyrl4533)
				}
			} else {
				yyv4533 = make([]EndpointSubset, yyrl4533)
			}
			yyc4533 = true
			yyrr4533 = len(yyv4533)
			if yyrg4533 {
				copy(yyv4533, yyv24533)
			}
		} else if yyl4533 != len(yyv4533) {
			yyv4533 = yyv4533[:yyl4533]
			yyc4533 = true
		}
		yyj4533 := 0
		for ; yyj4533 < yyrr4533; yyj4533++ {
			yyh4533.ElemContainerState(yyj4533)
			if r.TryDecodeAsNil() {
				yyv4533[yyj4533] = EndpointSubset{}
			} else {
				yyv4534 := &yyv4533[yyj4533]
				yyv4534.CodecDecodeSelf(d)
			}

		}
		if yyrt4533 {
			for ; yyj4533 < yyl4533; yyj4533++ {
				yyv4533 = append(yyv4533, EndpointSubset{})
				yyh4533.ElemContainerState(yyj4533)
				if r.TryDecodeAsNil() {
					yyv4533[yyj4533] = EndpointSubset{}
				} else {
					yyv4535 := &yyv4533[yyj4533]
					yyv4535.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4533 := 0
		for ; !r.CheckBreak(); yyj4533++ {

			if yyj4533 >= len(yyv4533) {
				yyv4533 = append(yyv4533, EndpointSubset{}) // var yyz4533 EndpointSubset
				yyc4533 = true
			}
			yyh4533.ElemContainerState(yyj4533)
			if yyj4533 < len(yyv4533) {
				if r.TryDecodeAsNil() {
					yyv4533[yyj4533] = EndpointSubset{}
				} else {
					yyv4536 := &yyv4533[yyj4533]
					yyv4536.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4533 < len(yyv4533) {
			yyv4533 = yyv4533[:yyj4533]
			yyc4533 = true
		} else if yyj4533 == 0 && yyv4533 == nil {
			yyv4533 = []EndpointSubset{}
			yyc4533 = true
		}
	}
	yyh4533.End()
	if yyc4533 {
		*v = yyv4533
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4537 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4538 := &yyv4537
		yy4538.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4539 := *v
	yyh4539, yyl4539 := z.DecSliceHelperStart()
	var yyc4539 bool
	if yyl4539 == 0 {
		if yyv4539 == nil {
			yyv4539 = []EndpointAddress{}
			yyc4539 = true
		} else if len(yyv4539) != 0 {
			yyv4539 = yyv4539[:0]
			yyc4539 = true
		}
	} else if yyl4539 > 0 {
		var yyrr4539, yyrl4539 int
		var yyrt4539 bool
		if yyl4539 > cap(yyv4539) {

			yyrg4539 := len(yyv4539) > 0
			yyv24539 := yyv4539
			yyrl4539, yyrt4539 = z.DecInferLen(yyl4539, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4539 {
				if yyrl4539 <= cap(yyv4539) {
					yyv4539 = yyv4539[:yyrl4539]
				} else {
					yyv4539 = make([]EndpointAddress, yyrl4539)
				}
			} else {
				yyv4539 = make([]EndpointAddress, yyrl4539)
			}
			yyc4539 = true
			yyrr4539 = len(yyv4539)
			if yyrg4539 {
				copy(yyv4539, yyv24539)
			}
		} else if yyl4539 != len(yyv4539) {
			yyv4539 = yyv4539[:yyl4539]
			yyc4539 = true
		}
		yyj4539 := 0
		for ; yyj4539 < yyrr4539; yyj4539++ {
			yyh4539.ElemContainerState(yyj4539)
			if r.TryDecodeAsNil() {
				yyv4539[yyj4539] = EndpointAddress{}
			} else {
				yyv4540 := &yyv4539[yyj4539]
				yyv4540.CodecDecodeSelf(d)
			}

		}
		if yyrt4539 {
			for ; yyj4539 < yyl4539; yyj4539++ {
				yyv4539 = append(yyv4539, EndpointAddress{})
				yyh4539.ElemContainerState(yyj4539)
				if r.TryDecodeAsNil() {
					yyv4539[yyj4539] = EndpointAddress{}
				} else {
					yyv4541 := &yyv4539[yyj4539]
					yyv4541.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4539 := 0
		for ; !r.CheckBreak(); yyj4539++ {

			if yyj4539 >= len(yyv4539) {
				yyv4539 = append(yyv4539, EndpointAddress{}) // var yyz4539 EndpointAddress
				yyc4539 = true
			}
			yyh4539.ElemContainerState(yyj4539)
			if yyj4539 < len(yyv4539) {
				if r.TryDecodeAsNil() {
					yyv4539[yyj4539] = EndpointAddress{}
				} else {
					yyv4542 := &yyv4539[yyj4539]
					yyv4542.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4539 < len(yyv4539) {
			yyv4539 = yyv4539[:yyj4539]
			yyc4539 = true
		} else if yyj4539 == 0 && yyv4539 == nil {
			yyv4539 = []EndpointAddress{}
			yyc4539 = true
		}
	}
	yyh4539.End()
	if yyc4539 {
		*v = yyv4539
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4543 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4544 := &yyv4543
		yy4544.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4545 := *v
	yyh4545, yyl4545 := z.DecSliceHelperStart()
	var yyc4545 bool
	if yyl4545 == 0 {
		if yyv4545 == nil {
			yyv4545 = []EndpointPort{}
			yyc4545 = true
		} else if len(yyv4545) != 0 {
			yyv4545 = yyv4545[:0]
			yyc4545 = true
		}
	} else if yyl4545 > 0 {
		var yyrr4545, yyrl4545 int
		var yyrt4545 bool
		if yyl4545 > cap(yyv4545) {

			yyrg4545 := len(yyv4545) > 0
			yyv24545 := yyv4545
			yyrl4545, yyrt4545 = z.DecInferLen(yyl4545, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4545 {
				if yyrl4545 <= cap(yyv4545) {
					yyv4545 = yyv4545[:yyrl4545]
				} else {
					yyv4545 = make([]EndpointPort, yyrl4545)
				}
			} else {
				yyv4545 = make([]EndpointPort, yyrl4545)
			}
			yyc4545 = true
			yyrr4545 = len(yyv4545)
			if yyrg4545 {
				copy(yyv4545, yyv24545)
			}
		} else if yyl4545 != len(yyv4545) {
			yyv4545 = yyv4545[:yyl4545]
			yyc4545 = true
		}
		yyj4545 := 0
		for ; yyj4545 < yyrr4545; yyj4545++ {
			yyh4545.ElemContainerState(yyj4545)
			if r.TryDecodeAsNil() {
				yyv4545[yyj4545] = EndpointPort{}
			} else {
				yyv4546 := &yyv4545[yyj4545]
				yyv4546.CodecDecodeSelf(d)
			}

		}
		if yyrt4545 {
			for ; yyj4545 < yyl4545; yyj4545++ {
				yyv4545 = append(yyv4545, EndpointPort{})
				yyh4545.ElemContainerState(yyj4545)
				if r.TryDecodeAsNil() {
					yyv4545[yyj4545] = EndpointPort{}
				} else {
					yyv4547 := &yyv4545[yyj4545]
					yyv4547.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4545 := 0
		for ; !r.CheckBreak(); yyj4545++ {

			if yyj4545 >= len(yyv4545) {
				yyv4545 = append(yyv4545, EndpointPort{}) // var yyz4545 EndpointPort
				yyc4545 = true
			}
			yyh4545.ElemContainerState(yyj4545)
			if yyj4545 < len(yyv4545) {
				if r.TryDecodeAsNil() {
					yyv4545[yyj4545] = EndpointPort{}
				} else {
					yyv4548 := &yyv4545[yyj4545]
					yyv4548.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4545 < len(yyv4545) {
			yyv4545 = yyv4545[:yyj4545]
			yyc4545 = true
		} else if yyj4545 == 0 && yyv4545 == nil {
			yyv4545 = []EndpointPort{}
			yyc4545 = true
		}
	}
	yyh4545.End()
	if yyc4545 {
		*v = yyv4545
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4549 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4550 := &yyv4549
		yy4550.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4551 := *v
	yyh4551, yyl4551 := z.DecSliceHelperStart()
	var yyc4551 bool
	if yyl4551 == 0 {
		if yyv4551 == nil {
			yyv4551 = []Endpoints{}
			yyc4551 = true
		} else if len(yyv4551) != 0 {
			yyv4551 = yyv4551[:0]
			yyc4551 = true
		}
	} else if yyl4551 > 0 {
		var yyrr4551, yyrl4551 int
		var yyrt4551 bool
		if yyl4551 > cap(yyv4551) {

			yyrg4551 := len(yyv4551) > 0
			yyv24551 := yyv4551
			yyrl4551, yyrt4551 = z.DecInferLen(yyl4551, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4551 {
				if yyrl4551 <= cap(yyv4551) {
					yyv4551 = yyv4551[:yyrl4551]
				} else {
					yyv4551 = make([]Endpoints, yyrl4551)
				}
			} else {
				yyv4551 = make([]Endpoints, yyrl4551)
			}
			yyc4551 = true
			yyrr4551 = len(yyv4551)
			if yyrg4551 {
				copy(yyv4551, yyv24551)
			}
		} else if yyl4551 != len(yyv4551) {
			yyv4551 = yyv4551[:yyl4551]
			yyc4551 = true
		}
		yyj4551 := 0
		for ; yyj4551 < yyrr4551; yyj4551++ {
			yyh4551.ElemContainerState(yyj4551)
			if r.TryDecodeAsNil() {
				yyv4551[yyj4551] = Endpoints{}
			} else {
				yyv4552 := &yyv4551[yyj4551]
				yyv4552.CodecDecodeSelf(d)
			}

		}
		if yyrt4551 {
			for ; yyj4551 < yyl4551; yyj4551++ {
				yyv4551 = append(yyv4551, Endpoints{})
				yyh4551.ElemContainerState(yyj4551)
				if r.TryDecodeAsNil() {
					yyv4551[yyj4551] = Endpoints{}
				} else {
					yyv4553 := &yyv4551[yyj4551]
					yyv4553.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4551 := 0
		for ; !r.CheckBreak(); yyj4551++ {

			if yyj4551 >= len(yyv4551) {
				yyv4551 = append(yyv4551, Endpoints{}) // var yyz4551 Endpoints
				yyc4551 = true
			}
			yyh4551.ElemContainerState(yyj4551)
			if yyj4551 < len(yyv4551) {
				if r.TryDecodeAsNil() {
					yyv4551[yyj4551] = Endpoints{}
				} else {
					yyv4554 := &yyv4551[yyj4551]
					yyv4554.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4551 < len(yyv4551) {
			yyv4551 = yyv4551[:yyj4551]
			yyc4551 = true
		} else if yyj4551 == 0 && yyv4551 == nil {
			yyv4551 = []Endpoints{}
			yyc4551 = true
		}
	}
	yyh4551.End()
	if yyc4551 {
		*v = yyv4551
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4555 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4556 := &yyv4555
		yy4556.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4557 := *v
	yyh4557, yyl4557 := z.DecSliceHelperStart()
	var yyc4557 bool
	if yyl4557 == 0 {
		if yyv4557 == nil {
			yyv4557 = []NodeCondition{}
			yyc4557 = true
		} else if len(yyv4557) != 0 {
			yyv4557 = yyv4557[:0]
			yyc4557 = true
		}
	} else if yyl4557 > 0 {
		var yyrr4557, yyrl4557 int
		var yyrt4557 bool
		if yyl4557 > cap(yyv4557) {

			yyrg4557 := len(yyv4557) > 0
			yyv24557 := yyv4557
			yyrl4557, yyrt4557 = z.DecInferLen(yyl4557, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4557 {
				if yyrl4557 <= cap(yyv4557) {
					yyv4557 = yyv4557[:yyrl4557]
				} else {
					yyv4557 = make([]NodeCondition, yyrl4557)
				}
			} else {
				yyv4557 = make([]NodeCondition, yyrl4557)
			}
			yyc4557 = true
			yyrr4557 = len(yyv4557)
			if yyrg4557 {
				copy(yyv4557, yyv24557)
			}
		} else if yyl4557 != len(yyv4557) {
			yyv4557 = yyv4557[:yyl4557]
			yyc4557 = true
		}
		yyj4557 := 0
		for ; yyj4557 < yyrr4557; yyj4557++ {
			yyh4557.ElemContainerState(yyj4557)
			if r.TryDecodeAsNil() {
				yyv4557[yyj4557] = NodeCondition{}
			} else {
				yyv4558 := &yyv4557[yyj4557]
				yyv4558.CodecDecodeSelf(d)
			}

		}
		if yyrt4557 {
			for ; yyj4557 < yyl4557; yyj4557++ {
				yyv4557 = append(yyv4557, NodeCondition{})
				yyh4557.ElemContainerState(yyj4557)
				if r.TryDecodeAsNil() {
					yyv4557[yyj4557] = NodeCondition{}
				} else {
					yyv4559 := &yyv4557[yyj4557]
					yyv4559.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4557 := 0
		for ; !r.CheckBreak(); yyj4557++ {

			if yyj4557 >= len(yyv4557) {
				yyv4557 = append(yyv4557, NodeCondition{}) // var yyz4557 NodeCondition
				yyc4557 = true
			}
			yyh4557.ElemContainerState(yyj4557)
			if yyj4557 < len(yyv4557) {
				if r.TryDecodeAsNil() {
					yyv4557[yyj4557] = NodeCondition{}
				} else {
					yyv4560 := &yyv4557[yyj4557]
					yyv4560.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4557 < len(yyv4557) {
			yyv4557 = yyv4557[:yyj4557]
			yyc4557 = true
		} else if yyj4557 == 0 && yyv4557 == nil {
			yyv4557 = []NodeCondition{}
			yyc4557 = true
		}
	}
	yyh4557.End()
	if yyc4557 {
		*v = yyv4557
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4561 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4562 := &yyv4561
		yy4562.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4563 := *v
	yyh4563, yyl4563 := z.DecSliceHelperStart()
	var yyc4563 bool
	if yyl4563 == 0 {
		if yyv4563 == nil {
			yyv4563 = []NodeAddress{}
			yyc4563 = true
		} else if len(yyv4563) != 0 {
			yyv4563 = yyv4563[:0]
			yyc4563 = true
		}
	} else if yyl4563 > 0 {
		var yyrr4563, yyrl4563 int
		var yyrt4563 bool
		if yyl4563 > cap(yyv4563) {

			yyrg4563 := len(yyv4563) > 0
			yyv24563 := yyv4563
			yyrl4563, yyrt4563 = z.DecInferLen(yyl4563, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4563 {
				if yyrl4563 <= cap(yyv4563) {
					yyv4563 = yyv4563[:yyrl4563]
				} else {
					yyv4563 = make([]NodeAddress, yyrl4563)
				}
			} else {
				yyv4563 = make([]NodeAddress, yyrl4563)
			}
			yyc4563 = true
			yyrr4563 = len(yyv4563)
			if yyrg4563 {
				copy(yyv4563, yyv24563)
			}
		} else if yyl4563 != len(yyv4563) {
			yyv4563 = yyv4563[:yyl4563]
			yyc4563 = true
		}
		yyj4563 := 0
		for ; yyj4563 < yyrr4563; yyj4563++ {
			yyh4563.ElemContainerState(yyj4563)
			if r.TryDecodeAsNil() {
				yyv4563[yyj4563] = NodeAddress{}
			} else {
				yyv4564 := &yyv4563[yyj4563]
				yyv4564.CodecDecodeSelf(d)
			}

		}
		if yyrt4563 {
			for ; yyj4563 < yyl4563; yyj4563++ {
				yyv4563 = append(yyv4563, NodeAddress{})
				yyh4563.ElemContainerState(yyj4563)
				if r.TryDecodeAsNil() {
					yyv4563[yyj4563] = NodeAddress{}
				} else {
					yyv4565 := &yyv4563[yyj4563]
					yyv4565.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4563 := 0
		for ; !r.CheckBreak(); yyj4563++ {

			if yyj4563 >= len(yyv4563) {
				yyv4563 = append(yyv4563, NodeAddress{}) // var yyz4563 NodeAddress
				yyc4563 = true
			}
			yyh4563.ElemContainerState(yyj4563)
			if yyj4563 < len(yyv4563) {
				if r.TryDecodeAsNil() {
					yyv4563[yyj4563] = NodeAddress{}
				} else {
					yyv4566 := &yyv4563[yyj4563]
					yyv4566.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4563 < len(yyv4563) {
			yyv4563 = yyv4563[:yyj4563]
			yyc4563 = true
		} else if yyj4563 == 0 && yyv4563 == nil {
			yyv4563 = []NodeAddress{}
			yyc4563 = true
		}
	}
	yyh4563.End()
	if yyc4563 {
		*v = yyv4563
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4567 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4568 := &yyv4567
		yy4568.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4569 := *v
	yyh4569, yyl4569 := z.DecSliceHelperStart()
	var yyc4569 bool
	if yyl4569 == 0 {
		if yyv4569 == nil {
			yyv4569 = []ContainerImage{}
			yyc4569 = true
		} else if len(yyv4569) != 0 {
			yyv4569 = yyv4569[:0]
			yyc4569 = true
		}
	} else if yyl4569 > 0 {
		var yyrr4569, yyrl4569 int
		var yyrt4569 bool
		if yyl4569 > cap(yyv4569) {

			yyrg4569 := len(yyv4569) > 0
			yyv24569 := yyv4569
			yyrl4569, yyrt4569 = z.DecInferLen(yyl4569, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4569 {
				if yyrl4569 <= cap(yyv4569) {
					yyv4569 = yyv4569[:yyrl4569]
				} else {
					yyv4569 = make([]ContainerImage, yyrl4569)
				}
			} else {
				yyv4569 = make([]ContainerImage, yyrl4569)
			}
			yyc4569 = true
			yyrr4569 = len(yyv4569)
			if yyrg4569 {
				copy(yyv4569, yyv24569)
			}
		} else if yyl4569 != len(yyv4569) {
			yyv4569 = yyv4569[:yyl4569]
			yyc4569 = true
		}
		yyj4569 := 0
		for ; yyj4569 < yyrr4569; yyj4569++ {
			yyh4569.ElemContainerState(yyj4569)
			if r.TryDecodeAsNil() {
				yyv4569[yyj4569] = ContainerImage{}
			} else {
				yyv4570 := &yyv4569[yyj4569]
				yyv4570.CodecDecodeSelf(d)
			}

		}
		if yyrt4569 {
			for ; yyj4569 < yyl4569; yyj4569++ {
				yyv4569 = append(yyv4569, ContainerImage{})
				yyh4569.ElemContainerState(yyj4569)
				if r.TryDecodeAsNil() {
					yyv4569[yyj4569] = ContainerImage{}
				} else {
					yyv4571 := &yyv4569[yyj4569]
					yyv4571.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4569 := 0
		for ; !r.CheckBreak(); yyj4569++ {

			if yyj4569 >= len(yyv4569) {
				yyv4569 = append(yyv4569, ContainerImage{}) // var yyz4569 ContainerImage
				yyc4569 = true
			}
			yyh4569.ElemContainerState(yyj4569)
			if yyj4569 < len(yyv4569) {
				if r.TryDecodeAsNil() {
					yyv4569[yyj4569] = ContainerImage{}
				} else {
					yyv4572 := &yyv4569[yyj4569]
					yyv4572.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4569 < len(yyv4569) {
			yyv4569 = yyv4569[:yyj4569]
			yyc4569 = true
		} else if yyj4569 == 0 && yyv4569 == nil {
			yyv4569 = []ContainerImage{}
			yyc4569 = true
		}
	}
	yyh4569.End()
	if yyc4569 {
		*v = yyv4569
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4573 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4573.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4574 := *v
	yyh4574, yyl4574 := z.DecSliceHelperStart()
	var yyc4574 bool
	if yyl4574 == 0 {
		if yyv4574 == nil {
			yyv4574 = []UniqueVolumeName{}
			yyc4574 = true
		} else if len(yyv4574) != 0 {
			yyv4574 = yyv4574[:0]
			yyc4574 = true
		}
	} else if yyl4574 > 0 {
		var yyrr4574, yyrl4574 int
		var yyrt4574 bool
		if yyl4574 > cap(yyv4574) {

			yyrl4574, yyrt4574 = z.DecInferLen(yyl4574, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4574 {
				if yyrl4574 <= cap(yyv4574) {
					yyv4574 = yyv4574[:yyrl4574]
				} else {
					yyv4574 = make([]UniqueVolumeName, yyrl4574)
				}
			} else {
				yyv4574 = make([]UniqueVolumeName, yyrl4574)
			}
			yyc4574 = true
			yyrr4574 = len(yyv4574)
		} else if yyl4574 != len(yyv4574) {
			yyv4574 = yyv4574[:yyl4574]
			yyc4574 = true
		}
		yyj4574 := 0
		for ; yyj4574 < yyrr4574; yyj4574++ {
			yyh4574.ElemContainerState(yyj4574)
			if r.TryDecodeAsNil() {
				yyv4574[yyj4574] = ""
			} else {
				yyv4574[yyj4574] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4574 {
			for ; yyj4574 < yyl4574; yyj4574++ {
				yyv4574 = append(yyv4574, "")
				yyh4574.ElemContainerState(yyj4574)
				if r.TryDecodeAsNil() {
					yyv4574[yyj4574] = ""
				} else {
					yyv4574[yyj4574] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4574 := 0
		for ; !r.CheckBreak(); yyj4574++ {

			if yyj4574 >= len(yyv4574) {
				yyv4574 = append(yyv4574, "") // var yyz4574 UniqueVolumeName
				yyc4574 = true
			}
			yyh4574.ElemContainerState(yyj4574)
			if yyj4574 < len(yyv4574) {
				if r.TryDecodeAsNil() {
					yyv4574[yyj4574] = ""
				} else {
					yyv4574[yyj4574] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4574 < len(yyv4574) {
			yyv4574 = yyv4574[:yyj4574]
			yyc4574 = true
		} else if yyj4574 == 0 && yyv4574 == nil {
			yyv4574 = []UniqueVolumeName{}
			yyc4574 = true
		}
	}
	yyh4574.End()
	if yyc4574 {
		*v = yyv4574
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4578 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4579 := &yyv4578
		yy4579.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4580 := *v
	yyh4580, yyl4580 := z.DecSliceHelperStart()
	var yyc4580 bool
	if yyl4580 == 0 {
		if yyv4580 == nil {
			yyv4580 = []AttachedVolume{}
			yyc4580 = true
		} else if len(yyv4580) != 0 {
			yyv4580 = yyv4580[:0]
			yyc4580 = true
		}
	} else if yyl4580 > 0 {
		var yyrr4580, yyrl4580 int
		var yyrt4580 bool
		if yyl4580 > cap(yyv4580) {

			yyrg4580 := len(yyv4580) > 0
			yyv24580 := yyv4580
			yyrl4580, yyrt4580 = z.DecInferLen(yyl4580, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4580 {
				if yyrl4580 <= cap(yyv4580) {
					yyv4580 = yyv4580[:yyrl4580]
				} else {
					yyv4580 = make([]AttachedVolume, yyrl4580)
				}
			} else {
				yyv4580 = make([]AttachedVolume, yyrl4580)
			}
			yyc4580 = true
			yyrr4580 = len(yyv4580)
			if yyrg4580 {
				copy(yyv4580, yyv24580)
			}
		} else if yyl4580 != len(yyv4580) {
			yyv4580 = yyv4580[:yyl4580]
			yyc4580 = true
		}
		yyj4580 := 0
		for ; yyj4580 < yyrr4580; yyj4580++ {
			yyh4580.ElemContainerState(yyj4580)
			if r.TryDecodeAsNil() {
				yyv4580[yyj4580] = AttachedVolume{}
			} else {
				yyv4581 := &yyv4580[yyj4580]
				yyv4581.CodecDecodeSelf(d)
			}

		}
		if yyrt4580 {
			for ; yyj4580 < yyl4580; yyj4580++ {
				yyv4580 = append(yyv4580, AttachedVolume{})
				yyh4580.ElemContainerState(yyj4580)
				if r.TryDecodeAsNil() {
					yyv4580[yyj4580] = AttachedVolume{}
				} else {
					yyv4582 := &yyv4580[yyj4580]
					yyv4582.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4580 := 0
		for ; !r.CheckBreak(); yyj4580++ {

			if yyj4580 >= len(yyv4580) {
				yyv4580 = append(yyv4580, AttachedVolume{}) // var yyz4580 AttachedVolume
				yyc4580 = true
			}
			yyh4580.ElemContainerState(yyj4580)
			if yyj4580 < len(yyv4580) {
				if r.TryDecodeAsNil() {
					yyv4580[yyj4580] = AttachedVolume{}
				} else {
					yyv4583 := &yyv4580[yyj4580]
					yyv4583.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4580 < len(yyv4580) {
			yyv4580 = yyv4580[:yyj4580]
			yyc4580 = true
		} else if yyj4580 == 0 && yyv4580 == nil {
			yyv4580 = []AttachedVolume{}
			yyc4580 = true
		}
	}
	yyh4580.End()
	if yyc4580 {
		*v = yyv4580
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4584 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4585 := &yyv4584
		yy4585.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4586 := *v
	yyh4586, yyl4586 := z.DecSliceHelperStart()
	var yyc4586 bool
	if yyl4586 == 0 {
		if yyv4586 == nil {
			yyv4586 = []PreferAvoidPodsEntry{}
			yyc4586 = true
		} else if len(yyv4586) != 0 {
			yyv4586 = yyv4586[:0]
			yyc4586 = true
		}
	} else if yyl4586 > 0 {
		var yyrr4586, yyrl4586 int
		var yyrt4586 bool
		if yyl4586 > cap(yyv4586) {

			yyrg4586 := len(yyv4586) > 0
			yyv24586 := yyv4586
			yyrl4586, yyrt4586 = z.DecInferLen(yyl4586, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4586 {
				if yyrl4586 <= cap(yyv4586) {
					yyv4586 = yyv4586[:yyrl4586]
				} else {
					yyv4586 = make([]PreferAvoidPodsEntry, yyrl4586)
				}
			} else {
				yyv4586 = make([]PreferAvoidPodsEntry, yyrl4586)
			}
			yyc4586 = true
			yyrr4586 = len(yyv4586)
			if yyrg4586 {
				copy(yyv4586, yyv24586)
			}
		} else if yyl4586 != len(yyv4586) {
			yyv4586 = yyv4586[:yyl4586]
			yyc4586 = true
		}
		yyj4586 := 0
		for ; yyj4586 < yyrr4586; yyj4586++ {
			yyh4586.ElemContainerState(yyj4586)
			if r.TryDecodeAsNil() {
				yyv4586[yyj4586] = PreferAvoidPodsEntry{}
			} else {
				yyv4587 := &yyv4586[yyj4586]
				yyv4587.CodecDecodeSelf(d)
			}

		}
		if yyrt4586 {
			for ; yyj4586 < yyl4586; yyj4586++ {
				yyv4586 = append(yyv4586, PreferAvoidPodsEntry{})
				yyh4586.ElemContainerState(yyj4586)
				if r.TryDecodeAsNil() {
					yyv4586[yyj4586] = PreferAvoidPodsEntry{}
				} else {
					yyv4588 := &yyv4586[yyj4586]
					yyv4588.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4586 := 0
		for ; !r.CheckBreak(); yyj4586++ {

			if yyj4586 >= len(yyv4586) {
				yyv4586 = append(yyv4586, PreferAvoidPodsEntry{}) // var yyz4586 PreferAvoidPodsEntry
				yyc4586 = true
			}
			yyh4586.ElemContainerState(yyj4586)
			if yyj4586 < len(yyv4586) {
				if r.TryDecodeAsNil() {
					yyv4586[yyj4586] = PreferAvoidPodsEntry{}
				} else {
					yyv4589 := &yyv4586[yyj4586]
					yyv4589.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4586 < len(yyv4586) {
			yyv4586 = yyv4586[:yyj4586]
			yyc4586 = true
		} else if yyj4586 == 0 && yyv4586 == nil {
			yyv4586 = []PreferAvoidPodsEntry{}
			yyc4586 = true
		}
	}
	yyh4586.End()
	if yyc4586 {
		*v = yyv4586
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4590, yyv4590 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4590.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4591 := &yyv4590
		yym4592 := z.EncBinary()
		_ = yym4592
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4591) {
		} else if !yym4592 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4591)
		} else {
			z.EncFallback(yy4591)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4593 := *v
	yyl4593 := r.ReadMapStart()
	yybh4593 := z.DecBasicHandle()
	if yyv4593 == nil {
		yyrl4593, _ := z.DecInferLen(yyl4593, yybh4593.MaxInitLen, 72)
		yyv4593 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4593)
		*v = yyv4593
	}
	var yymk4593 ResourceName
	var yymv4593 pkg3_resource.Quantity
	var yymg4593 bool
	if yybh4593.MapValueReset {
		yymg4593 = true
	}
	if yyl4593 > 0 {
		for yyj4593 := 0; yyj4593 < yyl4593; yyj4593++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4593 = ""
			} else {
				yymk4593 = ResourceName(r.DecodeString())
			}

			if yymg4593 {
				yymv4593 = yyv4593[yymk4593]
			} else {
				yymv4593 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4593 = pkg3_resource.Quantity{}
			} else {
				yyv4595 := &yymv4593
				yym4596 := z.DecBinary()
				_ = yym4596
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4595) {
				} else if !yym4596 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4595)
				} else {
					z.DecFallback(yyv4595, false)
				}
			}

			if yyv4593 != nil {
				yyv4593[yymk4593] = yymv4593
			}
		}
	} else if yyl4593 < 0 {
		for yyj4593 := 0; !r.CheckBreak(); yyj4593++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4593 = ""
			} else {
				yymk4593 = ResourceName(r.DecodeString())
			}

			if yymg4593 {
				yymv4593 = yyv4593[yymk4593]
			} else {
				yymv4593 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4593 = pkg3_resource.Quantity{}
			} else {
				yyv4598 := &yymv4593
				yym4599 := z.DecBinary()
				_ = yym4599
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4598) {
				} else if !yym4599 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4598)
				} else {
					z.DecFallback(yyv4598, false)
				}
			}

			if yyv4593 != nil {
				yyv4593[yymk4593] = yymv4593
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4600 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4601 := &yyv4600
		yy4601.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4602 := *v
	yyh4602, yyl4602 := z.DecSliceHelperStart()
	var yyc4602 bool
	if yyl4602 == 0 {
		if yyv4602 == nil {
			yyv4602 = []Node{}
			yyc4602 = true
		} else if len(yyv4602) != 0 {
			yyv4602 = yyv4602[:0]
			yyc4602 = true
		}
	} else if yyl4602 > 0 {
		var yyrr4602, yyrl4602 int
		var yyrt4602 bool
		if yyl4602 > cap(yyv4602) {

			yyrg4602 := len(yyv4602) > 0
			yyv24602 := yyv4602
			yyrl4602, yyrt4602 = z.DecInferLen(yyl4602, z.DecBasicHandle().MaxInitLen, 624)
			if yyrt4602 {
				if yyrl4602 <= cap(yyv4602) {
					yyv4602 = yyv4602[:yyrl4602]
				} else {
					yyv4602 = make([]Node, yyrl4602)
				}
			} else {
				yyv4602 = make([]Node, yyrl4602)
			}
			yyc4602 = true
			yyrr4602 = len(yyv4602)
			if yyrg4602 {
				copy(yyv4602, yyv24602)
			}
		} else if yyl4602 != len(yyv4602) {
			yyv4602 = yyv4602[:yyl4602]
			yyc4602 = true
		}
		yyj4602 := 0
		for ; yyj4602 < yyrr4602; yyj4602++ {
			yyh4602.ElemContainerState(yyj4602)
			if r.TryDecodeAsNil() {
				yyv4602[yyj4602] = Node{}
			} else {
				yyv4603 := &yyv4602[yyj4602]
				yyv4603.CodecDecodeSelf(d)
			}

		}
		if yyrt4602 {
			for ; yyj4602 < yyl4602; yyj4602++ {
				yyv4602 = append(yyv4602, Node{})
				yyh4602.ElemContainerState(yyj4602)
				if r.TryDecodeAsNil() {
					yyv4602[yyj4602] = Node{}
				} else {
					yyv4604 := &yyv4602[yyj4602]
					yyv4604.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4602 := 0
		for ; !r.CheckBreak(); yyj4602++ {

			if yyj4602 >= len(yyv4602) {
				yyv4602 = append(yyv4602, Node{}) // var yyz4602 Node
				yyc4602 = true
			}
			yyh4602.ElemContainerState(yyj4602)
			if yyj4602 < len(yyv4602) {
				if r.TryDecodeAsNil() {
					yyv4602[yyj4602] = Node{}
				} else {
					yyv4605 := &yyv4602[yyj4602]
					yyv4605.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4602 < len(yyv4602) {
			yyv4602 = yyv4602[:yyj4602]
			yyc4602 = true
		} else if yyj4602 == 0 && yyv4602 == nil {
			yyv4602 = []Node{}
			yyc4602 = true
		}
	}
	yyh4602.End()
	if yyc4602 {
		*v = yyv4602
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4606 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4606.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4607 := *v
	yyh4607, yyl4607 := z.DecSliceHelperStart()
	var yyc4607 bool
	if yyl4607 == 0 {
		if yyv4607 == nil {
			yyv4607 = []FinalizerName{}
			yyc4607 = true
		} else if len(yyv4607) != 0 {
			yyv4607 = yyv4607[:0]
			yyc4607 = true
		}
	} else if yyl4607 > 0 {
		var yyrr4607, yyrl4607 int
		var yyrt4607 bool
		if yyl4607 > cap(yyv4607) {

			yyrl4607, yyrt4607 = z.DecInferLen(yyl4607, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4607 {
				if yyrl4607 <= cap(yyv4607) {
					yyv4607 = yyv4607[:yyrl4607]
				} else {
					yyv4607 = make([]FinalizerName, yyrl4607)
				}
			} else {
				yyv4607 = make([]FinalizerName, yyrl4607)
			}
			yyc4607 = true
			yyrr4607 = len(yyv4607)
		} else if yyl4607 != len(yyv4607) {
			yyv4607 = yyv4607[:yyl4607]
			yyc4607 = true
		}
		yyj4607 := 0
		for ; yyj4607 < yyrr4607; yyj4607++ {
			yyh4607.ElemContainerState(yyj4607)
			if r.TryDecodeAsNil() {
				yyv4607[yyj4607] = ""
			} else {
				yyv4607[yyj4607] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4607 {
			for ; yyj4607 < yyl4607; yyj4607++ {
				yyv4607 = append(yyv4607, "")
				yyh4607.ElemContainerState(yyj4607)
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = ""
				} else {
					yyv4607[yyj4607] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4607 := 0
		for ; !r.CheckBreak(); yyj4607++ {

			if yyj4607 >= len(yyv4607) {
				yyv4607 = append(yyv4607, "") // var yyz4607 FinalizerName
				yyc4607 = true
			}
			yyh4607.ElemContainerState(yyj4607)
			if yyj4607 < len(yyv4607) {
				if r.TryDecodeAsNil() {
					yyv4607[yyj4607] = ""
				} else {
					yyv4607[yyj4607] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4607 < len(yyv4607) {
			yyv4607 = yyv4607[:yyj4607]
			yyc4607 = true
		} else if yyj4607 == 0 && yyv4607 == nil {
			yyv4607 = []FinalizerName{}
			yyc4607 = true
		}
	}
	yyh4607.End()
	if yyc4607 {
		*v = yyv4607
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4611 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4612 := &yyv4611
		yy4612.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4613 := *v
	yyh4613, yyl4613 := z.DecSliceHelperStart()
	var yyc4613 bool
	if yyl4613 == 0 {
		if yyv4613 == nil {
			yyv4613 = []Namespace{}
			yyc4613 = true
		} else if len(yyv4613) != 0 {
			yyv4613 = yyv4613[:0]
			yyc4613 = true
		}
	} else if yyl4613 > 0 {
		var yyrr4613, yyrl4613 int
		var yyrt4613 bool
		if yyl4613 > cap(yyv4613) {

			yyrg4613 := len(yyv4613) > 0
			yyv24613 := yyv4613
			yyrl4613, yyrt4613 = z.DecInferLen(yyl4613, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4613 {
				if yyrl4613 <= cap(yyv4613) {
					yyv4613 = yyv4613[:yyrl4613]
				} else {
					yyv4613 = make([]Namespace, yyrl4613)
				}
			} else {
				yyv4613 = make([]Namespace, yyrl4613)
			}
			yyc4613 = true
			yyrr4613 = len(yyv4613)
			if yyrg4613 {
				copy(yyv4613, yyv24613)
			}
		} else if yyl4613 != len(yyv4613) {
			yyv4613 = yyv4613[:yyl4613]
			yyc4613 = true
		}
		yyj4613 := 0
		for ; yyj4613 < yyrr4613; yyj4613++ {
			yyh4613.ElemContainerState(yyj4613)
			if r.TryDecodeAsNil() {
				yyv4613[yyj4613] = Namespace{}
			} else {
				yyv4614 := &yyv4613[yyj4613]
				yyv4614.CodecDecodeSelf(d)
			}

		}
		if yyrt4613 {
			for ; yyj4613 < yyl4613; yyj4613++ {
				yyv4613 = append(yyv4613, Namespace{})
				yyh4613.ElemContainerState(yyj4613)
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = Namespace{}
				} else {
					yyv4615 := &yyv4613[yyj4613]
					yyv4615.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4613 := 0
		for ; !r.CheckBreak(); yyj4613++ {

			if yyj4613 >= len(yyv4613) {
				yyv4613 = append(yyv4613, Namespace{}) // var yyz4613 Namespace
				yyc4613 = true
			}
			yyh4613.ElemContainerState(yyj4613)
			if yyj4613 < len(yyv4613) {
				if r.TryDecodeAsNil() {
					yyv4613[yyj4613] = Namespace{}
				} else {
					yyv4616 := &yyv4613[yyj4613]
					yyv4616.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4613 < len(yyv4613) {
			yyv4613 = yyv4613[:yyj4613]
			yyc4613 = true
		} else if yyj4613 == 0 && yyv4613 == nil {
			yyv4613 = []Namespace{}
			yyc4613 = true
		}
	}
	yyh4613.End()
	if yyc4613 {
		*v = yyv4613
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4617 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4618 := &yyv4617
		yy4618.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4619 := *v
	yyh4619, yyl4619 := z.DecSliceHelperStart()
	var yyc4619 bool
	if yyl4619 == 0 {
		if yyv4619 == nil {
			yyv4619 = []Event{}
			yyc4619 = true
		} else if len(yyv4619) != 0 {
			yyv4619 = yyv4619[:0]
			yyc4619 = true
		}
	} else if yyl4619 > 0 {
		var yyrr4619, yyrl4619 int
		var yyrt4619 bool
		if yyl4619 > cap(yyv4619) {

			yyrg4619 := len(yyv4619) > 0
			yyv24619 := yyv4619
			yyrl4619, yyrt4619 = z.DecInferLen(yyl4619, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt4619 {
				if yyrl4619 <= cap(yyv4619) {
					yyv4619 = yyv4619[:yyrl4619]
				} else {
					yyv4619 = make([]Event, yyrl4619)
				}
			} else {
				yyv4619 = make([]Event, yyrl4619)
			}
			yyc4619 = true
			yyrr4619 = len(yyv4619)
			if yyrg4619 {
				copy(yyv4619, yyv24619)
			}
		} else if yyl4619 != len(yyv4619) {
			yyv4619 = yyv4619[:yyl4619]
			yyc4619 = true
		}
		yyj4619 := 0
		for ; yyj4619 < yyrr4619; yyj4619++ {
			yyh4619.ElemContainerState(yyj4619)
			if r.TryDecodeAsNil() {
				yyv4619[yyj4619] = Event{}
			} else {
				yyv4620 := &yyv4619[yyj4619]
				yyv4620.CodecDecodeSelf(d)
			}

		}
		if yyrt4619 {
			for ; yyj4619 < yyl4619; yyj4619++ {
				yyv4619 = append(yyv4619, Event{})
				yyh4619.ElemContainerState(yyj4619)
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = Event{}
				} else {
					yyv4621 := &yyv4619[yyj4619]
					yyv4621.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4619 := 0
		for ; !r.CheckBreak(); yyj4619++ {

			if yyj4619 >= len(yyv4619) {
				yyv4619 = append(yyv4619, Event{}) // var yyz4619 Event
				yyc4619 = true
			}
			yyh4619.ElemContainerState(yyj4619)
			if yyj4619 < len(yyv4619) {
				if r.TryDecodeAsNil() {
					yyv4619[yyj4619] = Event{}
				} else {
					yyv4622 := &yyv4619[yyj4619]
					yyv4622.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4619 < len(yyv4619) {
			yyv4619 = yyv4619[:yyj4619]
			yyc4619 = true
		} else if yyj4619 == 0 && yyv4619 == nil {
			yyv4619 = []Event{}
			yyc4619 = true
		}
	}
	yyh4619.End()
	if yyc4619 {
		*v = yyv4619
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4623 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4623 == nil {
			r.EncodeNil()
		} else {
			yym4624 := z.EncBinary()
			_ = yym4624
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4623) {
			} else {
				z.EncFallback(yyv4623)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4625 := *v
	yyh4625, yyl4625 := z.DecSliceHelperStart()
	var yyc4625 bool
	if yyl4625 == 0 {
		if yyv4625 == nil {
			yyv4625 = []pkg7_runtime.Object{}
			yyc4625 = true
		} else if len(yyv4625) != 0 {
			yyv4625 = yyv4625[:0]
			yyc4625 = true
		}
	} else if yyl4625 > 0 {
		var yyrr4625, yyrl4625 int
		var yyrt4625 bool
		if yyl4625 > cap(yyv4625) {

			yyrg4625 := len(yyv4625) > 0
			yyv24625 := yyv4625
			yyrl4625, yyrt4625 = z.DecInferLen(yyl4625, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4625 {
				if yyrl4625 <= cap(yyv4625) {
					yyv4625 = yyv4625[:yyrl4625]
				} else {
					yyv4625 = make([]pkg7_runtime.Object, yyrl4625)
				}
			} else {
				yyv4625 = make([]pkg7_runtime.Object, yyrl4625)
			}
			yyc4625 = true
			yyrr4625 = len(yyv4625)
			if yyrg4625 {
				copy(yyv4625, yyv24625)
			}
		} else if yyl4625 != len(yyv4625) {
			yyv4625 = yyv4625[:yyl4625]
			yyc4625 = true
		}
		yyj4625 := 0
		for ; yyj4625 < yyrr4625; yyj4625++ {
			yyh4625.ElemContainerState(yyj4625)
			if r.TryDecodeAsNil() {
				yyv4625[yyj4625] = nil
			} else {
				yyv4626 := &yyv4625[yyj4625]
				yym4627 := z.DecBinary()
				_ = yym4627
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4626) {
				} else {
					z.DecFallback(yyv4626, true)
				}
			}

		}
		if yyrt4625 {
			for ; yyj4625 < yyl4625; yyj4625++ {
				yyv4625 = append(yyv4625, nil)
				yyh4625.ElemContainerState(yyj4625)
				if r.TryDecodeAsNil() {
					yyv4625[yyj4625] = nil
				} else {
					yyv4628 := &yyv4625[yyj4625]
					yym4629 := z.DecBinary()
					_ = yym4629
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4628) {
					} else {
						z.DecFallback(yyv4628, true)
					}
				}

			}
		}

	} else {
		yyj4625 := 0
		for ; !r.CheckBreak(); yyj4625++ {

			if yyj4625 >= len(yyv4625) {
				yyv4625 = append(yyv4625, nil) // var yyz4625 pkg7_runtime.Object
				yyc4625 = true
			}
			yyh4625.ElemContainerState(yyj4625)
			if yyj4625 < len(yyv4625) {
				if r.TryDecodeAsNil() {
					yyv4625[yyj4625] = nil
				} else {
					yyv4630 := &yyv4625[yyj4625]
					yym4631 := z.DecBinary()
					_ = yym4631
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4630) {
					} else {
						z.DecFallback(yyv4630, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4625 < len(yyv4625) {
			yyv4625 = yyv4625[:yyj4625]
			yyc4625 = true
		} else if yyj4625 == 0 && yyv4625 == nil {
			yyv4625 = []pkg7_runtime.Object{}
			yyc4625 = true
		}
	}
	yyh4625.End()
	if yyc4625 {
		*v = yyv4625
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4632 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4633 := &yyv4632
		yy4633.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4634 := *v
	yyh4634, yyl4634 := z.DecSliceHelperStart()
	var yyc4634 bool
	if yyl4634 == 0 {
		if yyv4634 == nil {
			yyv4634 = []LimitRangeItem{}
			yyc4634 = true
		} else if len(yyv4634) != 0 {
			yyv4634 = yyv4634[:0]
			yyc4634 = true
		}
	} else if yyl4634 > 0 {
		var yyrr4634, yyrl4634 int
		var yyrt4634 bool
		if yyl4634 > cap(yyv4634) {

			yyrg4634 := len(yyv4634) > 0
			yyv24634 := yyv4634
			yyrl4634, yyrt4634 = z.DecInferLen(yyl4634, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4634 {
				if yyrl4634 <= cap(yyv4634) {
					yyv4634 = yyv4634[:yyrl4634]
				} else {
					yyv4634 = make([]LimitRangeItem, yyrl4634)
				}
			} else {
				yyv4634 = make([]LimitRangeItem, yyrl4634)
			}
			yyc4634 = true
			yyrr4634 = len(yyv4634)
			if yyrg4634 {
				copy(yyv4634, yyv24634)
			}
		} else if yyl4634 != len(yyv4634) {
			yyv4634 = yyv4634[:yyl4634]
			yyc4634 = true
		}
		yyj4634 := 0
		for ; yyj4634 < yyrr4634; yyj4634++ {
			yyh4634.ElemContainerState(yyj4634)
			if r.TryDecodeAsNil() {
				yyv4634[yyj4634] = LimitRangeItem{}
			} else {
				yyv4635 := &yyv4634[yyj4634]
				yyv4635.CodecDecodeSelf(d)
			}

		}
		if yyrt4634 {
			for ; yyj4634 < yyl4634; yyj4634++ {
				yyv4634 = append(yyv4634, LimitRangeItem{})
				yyh4634.ElemContainerState(yyj4634)
				if r.TryDecodeAsNil() {
					yyv4634[yyj4634] = LimitRangeItem{}
				} else {
					yyv4636 := &yyv4634[yyj4634]
					yyv4636.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4634 := 0
		for ; !r.CheckBreak(); yyj4634++ {

			if yyj4634 >= len(yyv4634) {
				yyv4634 = append(yyv4634, LimitRangeItem{}) // var yyz4634 LimitRangeItem
				yyc4634 = true
			}
			yyh4634.ElemContainerState(yyj4634)
			if yyj4634 < len(yyv4634) {
				if r.TryDecodeAsNil() {
					yyv4634[yyj4634] = LimitRangeItem{}
				} else {
					yyv4637 := &yyv4634[yyj4634]
					yyv4637.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4634 < len(yyv4634) {
			yyv4634 = yyv4634[:yyj4634]
			yyc4634 = true
		} else if yyj4634 == 0 && yyv4634 == nil {
			yyv4634 = []LimitRangeItem{}
			yyc4634 = true
		}
	}
	yyh4634.End()
	if yyc4634 {
		*v = yyv4634
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4638 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4639 := &yyv4638
		yy4639.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4640 := *v
	yyh4640, yyl4640 := z.DecSliceHelperStart()
	var yyc4640 bool
	if yyl4640 == 0 {
		if yyv4640 == nil {
			yyv4640 = []LimitRange{}
			yyc4640 = true
		} else if len(yyv4640) != 0 {
			yyv4640 = yyv4640[:0]
			yyc4640 = true
		}
	} else if yyl4640 > 0 {
		var yyrr4640, yyrl4640 int
		var yyrt4640 bool
		if yyl4640 > cap(yyv4640) {

			yyrg4640 := len(yyv4640) > 0
			yyv24640 := yyv4640
			yyrl4640, yyrt4640 = z.DecInferLen(yyl4640, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4640 {
				if yyrl4640 <= cap(yyv4640) {
					yyv4640 = yyv4640[:yyrl4640]
				} else {
					yyv4640 = make([]LimitRange, yyrl4640)
				}
			} else {
				yyv4640 = make([]LimitRange, yyrl4640)
			}
			yyc4640 = true
			yyrr4640 = len(yyv4640)
			if yyrg4640 {
				copy(yyv4640, yyv24640)
			}
		} else if yyl4640 != len(yyv4640) {
			yyv4640 = yyv4640[:yyl4640]
			yyc4640 = true
		}
		yyj4640 := 0
		for ; yyj4640 < yyrr4640; yyj4640++ {
			yyh4640.ElemContainerState(yyj4640)
			if r.TryDecodeAsNil() {
				yyv4640[yyj4640] = LimitRange{}
			} else {
				yyv4641 := &yyv4640[yyj4640]
				yyv4641.CodecDecodeSelf(d)
			}

		}
		if yyrt4640 {
			for ; yyj4640 < yyl4640; yyj4640++ {
				yyv4640 = append(yyv4640, LimitRange{})
				yyh4640.ElemContainerState(yyj4640)
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = LimitRange{}
				} else {
					yyv4642 := &yyv4640[yyj4640]
					yyv4642.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4640 := 0
		for ; !r.CheckBreak(); yyj4640++ {

			if yyj4640 >= len(yyv4640) {
				yyv4640 = append(yyv4640, LimitRange{}) // var yyz4640 LimitRange
				yyc4640 = true
			}
			yyh4640.ElemContainerState(yyj4640)
			if yyj4640 < len(yyv4640) {
				if r.TryDecodeAsNil() {
					yyv4640[yyj4640] = LimitRange{}
				} else {
					yyv4643 := &yyv4640[yyj4640]
					yyv4643.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4640 < len(yyv4640) {
			yyv4640 = yyv4640[:yyj4640]
			yyc4640 = true
		} else if yyj4640 == 0 && yyv4640 == nil {
			yyv4640 = []LimitRange{}
			yyc4640 = true
		}
	}
	yyh4640.End()
	if yyc4640 {
		*v = yyv4640
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4644 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4644.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4645 := *v
	yyh4645, yyl4645 := z.DecSliceHelperStart()
	var yyc4645 bool
	if yyl4645 == 0 {
		if yyv4645 == nil {
			yyv4645 = []ResourceQuotaScope{}
			yyc4645 = true
		} else if len(yyv4645) != 0 {
			yyv4645 = yyv4645[:0]
			yyc4645 = true
		}
	} else if yyl4645 > 0 {
		var yyrr4645, yyrl4645 int
		var yyrt4645 bool
		if yyl4645 > cap(yyv4645) {

			yyrl4645, yyrt4645 = z.DecInferLen(yyl4645, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4645 {
				if yyrl4645 <= cap(yyv4645) {
					yyv4645 = yyv4645[:yyrl4645]
				} else {
					yyv4645 = make([]ResourceQuotaScope, yyrl4645)
				}
			} else {
				yyv4645 = make([]ResourceQuotaScope, yyrl4645)
			}
			yyc4645 = true
			yyrr4645 = len(yyv4645)
		} else if yyl4645 != len(yyv4645) {
			yyv4645 = yyv4645[:yyl4645]
			yyc4645 = true
		}
		yyj4645 := 0
		for ; yyj4645 < yyrr4645; yyj4645++ {
			yyh4645.ElemContainerState(yyj4645)
			if r.TryDecodeAsNil() {
				yyv4645[yyj4645] = ""
			} else {
				yyv4645[yyj4645] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4645 {
			for ; yyj4645 < yyl4645; yyj4645++ {
				yyv4645 = append(yyv4645, "")
				yyh4645.ElemContainerState(yyj4645)
				if r.TryDecodeAsNil() {
					yyv4645[yyj4645] = ""
				} else {
					yyv4645[yyj4645] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4645 := 0
		for ; !r.CheckBreak(); yyj4645++ {

			if yyj4645 >= len(yyv4645) {
				yyv4645 = append(yyv4645, "") // var yyz4645 ResourceQuotaScope
				yyc4645 = true
			}
			yyh4645.ElemContainerState(yyj4645)
			if yyj4645 < len(yyv4645) {
				if r.TryDecodeAsNil() {
					yyv4645[yyj4645] = ""
				} else {
					yyv4645[yyj4645] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4645 < len(yyv4645) {
			yyv4645 = yyv4645[:yyj4645]
			yyc4645 = true
		} else if yyj4645 == 0 && yyv4645 == nil {
			yyv4645 = []ResourceQuotaScope{}
			yyc4645 = true
		}
	}
	yyh4645.End()
	if yyc4645 {
		*v = yyv4645
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4649 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4650 := &yyv4649
		yy4650.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4651 := *v
	yyh4651, yyl4651 := z.DecSliceHelperStart()
	var yyc4651 bool
	if yyl4651 == 0 {
		if yyv4651 == nil {
			yyv4651 = []ResourceQuota{}
			yyc4651 = true
		} else if len(yyv4651) != 0 {
			yyv4651 = yyv4651[:0]
			yyc4651 = true
		}
	} else if yyl4651 > 0 {
		var yyrr4651, yyrl4651 int
		var yyrt4651 bool
		if yyl4651 > cap(yyv4651) {

			yyrg4651 := len(yyv4651) > 0
			yyv24651 := yyv4651
			yyrl4651, yyrt4651 = z.DecInferLen(yyl4651, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt4651 {
				if yyrl4651 <= cap(yyv4651) {
					yyv4651 = yyv4651[:yyrl4651]
				} else {
					yyv4651 = make([]ResourceQuota, yyrl4651)
				}
			} else {
				yyv4651 = make([]ResourceQuota, yyrl4651)
			}
			yyc4651 = true
			yyrr4651 = len(yyv4651)
			if yyrg4651 {
				copy(yyv4651, yyv24651)
			}
		} else if yyl4651 != len(yyv4651) {
			yyv4651 = yyv4651[:yyl4651]
			yyc4651 = true
		}
		yyj4651 := 0
		for ; yyj4651 < yyrr4651; yyj4651++ {
			yyh4651.ElemContainerState(yyj4651)
			if r.TryDecodeAsNil() {
				yyv4651[yyj4651] = ResourceQuota{}
			} else {
				yyv4652 := &yyv4651[yyj4651]
				yyv4652.CodecDecodeSelf(d)
			}

		}
		if yyrt4651 {
			for ; yyj4651 < yyl4651; yyj4651++ {
				yyv4651 = append(yyv4651, ResourceQuota{})
				yyh4651.ElemContainerState(yyj4651)
				if r.TryDecodeAsNil() {
					yyv4651[yyj4651] = ResourceQuota{}
				} else {
					yyv4653 := &yyv4651[yyj4651]
					yyv4653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4651 := 0
		for ; !r.CheckBreak(); yyj4651++ {

			if yyj4651 >= len(yyv4651) {
				yyv4651 = append(yyv4651, ResourceQuota{}) // var yyz4651 ResourceQuota
				yyc4651 = true
			}
			yyh4651.ElemContainerState(yyj4651)
			if yyj4651 < len(yyv4651) {
				if r.TryDecodeAsNil() {
					yyv4651[yyj4651] = ResourceQuota{}
				} else {
					yyv4654 := &yyv4651[yyj4651]
					yyv4654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4651 < len(yyv4651) {
			yyv4651 = yyv4651[:yyj4651]
			yyc4651 = true
		} else if yyj4651 == 0 && yyv4651 == nil {
			yyv4651 = []ResourceQuota{}
			yyc4651 = true
		}
	}
	yyh4651.End()
	if yyc4651 {
		*v = yyv4651
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4655, yyv4655 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4656 := z.EncBinary()
		_ = yym4656
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4655))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4655 == nil {
			r.EncodeNil()
		} else {
			yym4657 := z.EncBinary()
			_ = yym4657
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4655))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4658 := *v
	yyl4658 := r.ReadMapStart()
	yybh4658 := z.DecBasicHandle()
	if yyv4658 == nil {
		yyrl4658, _ := z.DecInferLen(yyl4658, yybh4658.MaxInitLen, 40)
		yyv4658 = make(map[string][]uint8, yyrl4658)
		*v = yyv4658
	}
	var yymk4658 string
	var yymv4658 []uint8
	var yymg4658 bool
	if yybh4658.MapValueReset {
		yymg4658 = true
	}
	if yyl4658 > 0 {
		for yyj4658 := 0; yyj4658 < yyl4658; yyj4658++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4658 = ""
			} else {
				yymk4658 = string(r.DecodeString())
			}

			if yymg4658 {
				yymv4658 = yyv4658[yymk4658]
			} else {
				yymv4658 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4658 = nil
			} else {
				yyv4660 := &yymv4658
				yym4661 := z.DecBinary()
				_ = yym4661
				if false {
				} else {
					*yyv4660 = r.DecodeBytes(*(*[]byte)(yyv4660), false, false)
				}
			}

			if yyv4658 != nil {
				yyv4658[yymk4658] = yymv4658
			}
		}
	} else if yyl4658 < 0 {
		for yyj4658 := 0; !r.CheckBreak(); yyj4658++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4658 = ""
			} else {
				yymk4658 = string(r.DecodeString())
			}

			if yymg4658 {
				yymv4658 = yyv4658[yymk4658]
			} else {
				yymv4658 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4658 = nil
			} else {
				yyv4663 := &yymv4658
				yym4664 := z.DecBinary()
				_ = yym4664
				if false {
				} else {
					*yyv4663 = r.DecodeBytes(*(*[]byte)(yyv4663), false, false)
				}
			}

			if yyv4658 != nil {
				yyv4658[yymk4658] = yymv4658
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4665 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4666 := &yyv4665
		yy4666.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4667 := *v
	yyh4667, yyl4667 := z.DecSliceHelperStart()
	var yyc4667 bool
	if yyl4667 == 0 {
		if yyv4667 == nil {
			yyv4667 = []Secret{}
			yyc4667 = true
		} else if len(yyv4667) != 0 {
			yyv4667 = yyv4667[:0]
			yyc4667 = true
		}
	} else if yyl4667 > 0 {
		var yyrr4667, yyrl4667 int
		var yyrt4667 bool
		if yyl4667 > cap(yyv4667) {

			yyrg4667 := len(yyv4667) > 0
			yyv24667 := yyv4667
			yyrl4667, yyrt4667 = z.DecInferLen(yyl4667, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4667 {
				if yyrl4667 <= cap(yyv4667) {
					yyv4667 = yyv4667[:yyrl4667]
				} else {
					yyv4667 = make([]Secret, yyrl4667)
				}
			} else {
				yyv4667 = make([]Secret, yyrl4667)
			}
			yyc4667 = true
			yyrr4667 = len(yyv4667)
			if yyrg4667 {
				copy(yyv4667, yyv24667)
			}
		} else if yyl4667 != len(yyv4667) {
			yyv4667 = yyv4667[:yyl4667]
			yyc4667 = true
		}
		yyj4667 := 0
		for ; yyj4667 < yyrr4667; yyj4667++ {
			yyh4667.ElemContainerState(yyj4667)
			if r.TryDecodeAsNil() {
				yyv4667[yyj4667] = Secret{}
			} else {
				yyv4668 := &yyv4667[yyj4667]
				yyv4668.CodecDecodeSelf(d)
			}

		}
		if yyrt4667 {
			for ; yyj4667 < yyl4667; yyj4667++ {
				yyv4667 = append(yyv4667, Secret{})
				yyh4667.ElemContainerState(yyj4667)
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = Secret{}
				} else {
					yyv4669 := &yyv4667[yyj4667]
					yyv4669.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4667 := 0
		for ; !r.CheckBreak(); yyj4667++ {

			if yyj4667 >= len(yyv4667) {
				yyv4667 = append(yyv4667, Secret{}) // var yyz4667 Secret
				yyc4667 = true
			}
			yyh4667.ElemContainerState(yyj4667)
			if yyj4667 < len(yyv4667) {
				if r.TryDecodeAsNil() {
					yyv4667[yyj4667] = Secret{}
				} else {
					yyv4670 := &yyv4667[yyj4667]
					yyv4670.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4667 < len(yyv4667) {
			yyv4667 = yyv4667[:yyj4667]
			yyc4667 = true
		} else if yyj4667 == 0 && yyv4667 == nil {
			yyv4667 = []Secret{}
			yyc4667 = true
		}
	}
	yyh4667.End()
	if yyc4667 {
		*v = yyv4667
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4671 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4672 := &yyv4671
		yy4672.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4673 := *v
	yyh4673, yyl4673 := z.DecSliceHelperStart()
	var yyc4673 bool
	if yyl4673 == 0 {
		if yyv4673 == nil {
			yyv4673 = []ConfigMap{}
			yyc4673 = true
		} else if len(yyv4673) != 0 {
			yyv4673 = yyv4673[:0]
			yyc4673 = true
		}
	} else if yyl4673 > 0 {
		var yyrr4673, yyrl4673 int
		var yyrt4673 bool
		if yyl4673 > cap(yyv4673) {

			yyrg4673 := len(yyv4673) > 0
			yyv24673 := yyv4673
			yyrl4673, yyrt4673 = z.DecInferLen(yyl4673, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4673 {
				if yyrl4673 <= cap(yyv4673) {
					yyv4673 = yyv4673[:yyrl4673]
				} else {
					yyv4673 = make([]ConfigMap, yyrl4673)
				}
			} else {
				yyv4673 = make([]ConfigMap, yyrl4673)
			}
			yyc4673 = true
			yyrr4673 = len(yyv4673)
			if yyrg4673 {
				copy(yyv4673, yyv24673)
			}
		} else if yyl4673 != len(yyv4673) {
			yyv4673 = yyv4673[:yyl4673]
			yyc4673 = true
		}
		yyj4673 := 0
		for ; yyj4673 < yyrr4673; yyj4673++ {
			yyh4673.ElemContainerState(yyj4673)
			if r.TryDecodeAsNil() {
				yyv4673[yyj4673] = ConfigMap{}
			} else {
				yyv4674 := &yyv4673[yyj4673]
				yyv4674.CodecDecodeSelf(d)
			}

		}
		if yyrt4673 {
			for ; yyj4673 < yyl4673; yyj4673++ {
				yyv4673 = append(yyv4673, ConfigMap{})
				yyh4673.ElemContainerState(yyj4673)
				if r.TryDecodeAsNil() {
					yyv4673[yyj4673] = ConfigMap{}
				} else {
					yyv4675 := &yyv4673[yyj4673]
					yyv4675.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4673 := 0
		for ; !r.CheckBreak(); yyj4673++ {

			if yyj4673 >= len(yyv4673) {
				yyv4673 = append(yyv4673, ConfigMap{}) // var yyz4673 ConfigMap
				yyc4673 = true
			}
			yyh4673.ElemContainerState(yyj4673)
			if yyj4673 < len(yyv4673) {
				if r.TryDecodeAsNil() {
					yyv4673[yyj4673] = ConfigMap{}
				} else {
					yyv4676 := &yyv4673[yyj4673]
					yyv4676.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4673 < len(yyv4673) {
			yyv4673 = yyv4673[:yyj4673]
			yyc4673 = true
		} else if yyj4673 == 0 && yyv4673 == nil {
			yyv4673 = []ConfigMap{}
			yyc4673 = true
		}
	}
	yyh4673.End()
	if yyc4673 {
		*v = yyv4673
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4677 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4678 := &yyv4677
		yy4678.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4679 := *v
	yyh4679, yyl4679 := z.DecSliceHelperStart()
	var yyc4679 bool
	if yyl4679 == 0 {
		if yyv4679 == nil {
			yyv4679 = []ComponentCondition{}
			yyc4679 = true
		} else if len(yyv4679) != 0 {
			yyv4679 = yyv4679[:0]
			yyc4679 = true
		}
	} else if yyl4679 > 0 {
		var yyrr4679, yyrl4679 int
		var yyrt4679 bool
		if yyl4679 > cap(yyv4679) {

			yyrg4679 := len(yyv4679) > 0
			yyv24679 := yyv4679
			yyrl4679, yyrt4679 = z.DecInferLen(yyl4679, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4679 {
				if yyrl4679 <= cap(yyv4679) {
					yyv4679 = yyv4679[:yyrl4679]
				} else {
					yyv4679 = make([]ComponentCondition, yyrl4679)
				}
			} else {
				yyv4679 = make([]ComponentCondition, yyrl4679)
			}
			yyc4679 = true
			yyrr4679 = len(yyv4679)
			if yyrg4679 {
				copy(yyv4679, yyv24679)
			}
		} else if yyl4679 != len(yyv4679) {
			yyv4679 = yyv4679[:yyl4679]
			yyc4679 = true
		}
		yyj4679 := 0
		for ; yyj4679 < yyrr4679; yyj4679++ {
			yyh4679.ElemContainerState(yyj4679)
			if r.TryDecodeAsNil() {
				yyv4679[yyj4679] = ComponentCondition{}
			} else {
				yyv4680 := &yyv4679[yyj4679]
				yyv4680.CodecDecodeSelf(d)
			}

		}
		if yyrt4679 {
			for ; yyj4679 < yyl4679; yyj4679++ {
				yyv4679 = append(yyv4679, ComponentCondition{})
				yyh4679.ElemContainerState(yyj4679)
				if r.TryDecodeAsNil() {
					yyv4679[yyj4679] = ComponentCondition{}
				} else {
					yyv4681 := &yyv4679[yyj4679]
					yyv4681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4679 := 0
		for ; !r.CheckBreak(); yyj4679++ {

			if yyj4679 >= len(yyv4679) {
				yyv4679 = append(yyv4679, ComponentCondition{}) // var yyz4679 ComponentCondition
				yyc4679 = true
			}
			yyh4679.ElemContainerState(yyj4679)
			if yyj4679 < len(yyv4679) {
				if r.TryDecodeAsNil() {
					yyv4679[yyj4679] = ComponentCondition{}
				} else {
					yyv4682 := &yyv4679[yyj4679]
					yyv4682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4679 < len(yyv4679) {
			yyv4679 = yyv4679[:yyj4679]
			yyc4679 = true
		} else if yyj4679 == 0 && yyv4679 == nil {
			yyv4679 = []ComponentCondition{}
			yyc4679 = true
		}
	}
	yyh4679.End()
	if yyc4679 {
		*v = yyv4679
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4684 := &yyv4683
		yy4684.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4685 := *v
	yyh4685, yyl4685 := z.DecSliceHelperStart()
	var yyc4685 bool
	if yyl4685 == 0 {
		if yyv4685 == nil {
			yyv4685 = []ComponentStatus{}
			yyc4685 = true
		} else if len(yyv4685) != 0 {
			yyv4685 = yyv4685[:0]
			yyc4685 = true
		}
	} else if yyl4685 > 0 {
		var yyrr4685, yyrl4685 int
		var yyrt4685 bool
		if yyl4685 > cap(yyv4685) {

			yyrg4685 := len(yyv4685) > 0
			yyv24685 := yyv4685
			yyrl4685, yyrt4685 = z.DecInferLen(yyl4685, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt4685 {
				if yyrl4685 <= cap(yyv4685) {
					yyv4685 = yyv4685[:yyrl4685]
				} else {
					yyv4685 = make([]ComponentStatus, yyrl4685)
				}
			} else {
				yyv4685 = make([]ComponentStatus, yyrl4685)
			}
			yyc4685 = true
			yyrr4685 = len(yyv4685)
			if yyrg4685 {
				copy(yyv4685, yyv24685)
			}
		} else if yyl4685 != len(yyv4685) {
			yyv4685 = yyv4685[:yyl4685]
			yyc4685 = true
		}
		yyj4685 := 0
		for ; yyj4685 < yyrr4685; yyj4685++ {
			yyh4685.ElemContainerState(yyj4685)
			if r.TryDecodeAsNil() {
				yyv4685[yyj4685] = ComponentStatus{}
			} else {
				yyv4686 := &yyv4685[yyj4685]
				yyv4686.CodecDecodeSelf(d)
			}

		}
		if yyrt4685 {
			for ; yyj4685 < yyl4685; yyj4685++ {
				yyv4685 = append(yyv4685, ComponentStatus{})
				yyh4685.ElemContainerState(yyj4685)
				if r.TryDecodeAsNil() {
					yyv4685[yyj4685] = ComponentStatus{}
				} else {
					yyv4687 := &yyv4685[yyj4685]
					yyv4687.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4685 := 0
		for ; !r.CheckBreak(); yyj4685++ {

			if yyj4685 >= len(yyv4685) {
				yyv4685 = append(yyv4685, ComponentStatus{}) // var yyz4685 ComponentStatus
				yyc4685 = true
			}
			yyh4685.ElemContainerState(yyj4685)
			if yyj4685 < len(yyv4685) {
				if r.TryDecodeAsNil() {
					yyv4685[yyj4685] = ComponentStatus{}
				} else {
					yyv4688 := &yyv4685[yyj4685]
					yyv4688.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4685 < len(yyv4685) {
			yyv4685 = yyv4685[:yyj4685]
			yyc4685 = true
		} else if yyj4685 == 0 && yyv4685 == nil {
			yyv4685 = []ComponentStatus{}
			yyc4685 = true
		}
	}
	yyh4685.End()
	if yyc4685 {
		*v = yyv4685
	}
}
