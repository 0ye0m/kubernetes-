// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cmd.proto

/*
Package k8s_io_kubectl_cmd is a generated protocol buffer package.

It is generated from these files:
	cmd.proto

It has these top-level messages:
	FlagDetail
	CommandInfo
	Array
	TestCmd
*/
package k8s_io_kubectl_cmd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlagDetail_EXT int32

const (
	FlagDetail_NONE       FlagDetail_EXT = 0
	FlagDetail_ISTIME     FlagDetail_EXT = 1
	FlagDetail_ISSTRARRAY FlagDetail_EXT = 2
	FlagDetail_ISSTRSLICE FlagDetail_EXT = 3
)

var FlagDetail_EXT_name = map[int32]string{
	0: "NONE",
	1: "ISTIME",
	2: "ISSTRARRAY",
	3: "ISSTRSLICE",
}
var FlagDetail_EXT_value = map[string]int32{
	"NONE":       0,
	"ISTIME":     1,
	"ISSTRARRAY": 2,
	"ISSTRSLICE": 3,
}

func (x FlagDetail_EXT) Enum() *FlagDetail_EXT {
	p := new(FlagDetail_EXT)
	*p = x
	return p
}
func (x FlagDetail_EXT) String() string {
	return proto.EnumName(FlagDetail_EXT_name, int32(x))
}
func (x *FlagDetail_EXT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FlagDetail_EXT_value, data, "FlagDetail_EXT")
	if err != nil {
		return err
	}
	*x = FlagDetail_EXT(value)
	return nil
}
func (FlagDetail_EXT) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type FlagDetail struct {
	Name             *string         `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value            []string        `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
	Shorthand        *string         `protobuf:"bytes,3,req,name=shorthand" json:"shorthand,omitempty"`
	Usage            *string         `protobuf:"bytes,4,req,name=usage" json:"usage,omitempty"`
	Ext              *FlagDetail_EXT `protobuf:"varint,5,opt,name=ext,enum=k8s.io.kubectl.cmd.FlagDetail_EXT" json:"ext,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *FlagDetail) Reset()                    { *m = FlagDetail{} }
func (m *FlagDetail) String() string            { return proto.CompactTextString(m) }
func (*FlagDetail) ProtoMessage()               {}
func (*FlagDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FlagDetail) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FlagDetail) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FlagDetail) GetShorthand() string {
	if m != nil && m.Shorthand != nil {
		return *m.Shorthand
	}
	return ""
}

func (m *FlagDetail) GetUsage() string {
	if m != nil && m.Usage != nil {
		return *m.Usage
	}
	return ""
}

func (m *FlagDetail) GetExt() FlagDetail_EXT {
	if m != nil && m.Ext != nil {
		return *m.Ext
	}
	return FlagDetail_NONE
}

type CommandInfo struct {
	Use              *string `protobuf:"bytes,1,opt,name=use" json:"use,omitempty"`
	DescriptionShort *string `protobuf:"bytes,2,opt,name=description_short,json=descriptionShort" json:"description_short,omitempty"`
	DescriptionLong  *string `protobuf:"bytes,3,opt,name=description_long,json=descriptionLong" json:"description_long,omitempty"`
	Example          *string `protobuf:"bytes,4,opt,name=example" json:"example,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommandInfo) Reset()                    { *m = CommandInfo{} }
func (m *CommandInfo) String() string            { return proto.CompactTextString(m) }
func (*CommandInfo) ProtoMessage()               {}
func (*CommandInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommandInfo) GetUse() string {
	if m != nil && m.Use != nil {
		return *m.Use
	}
	return ""
}

func (m *CommandInfo) GetDescriptionShort() string {
	if m != nil && m.DescriptionShort != nil {
		return *m.DescriptionShort
	}
	return ""
}

func (m *CommandInfo) GetDescriptionLong() string {
	if m != nil && m.DescriptionLong != nil {
		return *m.DescriptionLong
	}
	return ""
}

func (m *CommandInfo) GetExample() string {
	if m != nil && m.Example != nil {
		return *m.Example
	}
	return ""
}

type Array struct {
	Array            []string `protobuf:"bytes,1,rep,name=array" json:"array,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Array) Reset()                    { *m = Array{} }
func (m *Array) String() string            { return proto.CompactTextString(m) }
func (*Array) ProtoMessage()               {}
func (*Array) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Array) GetArray() []string {
	if m != nil {
		return m.Array
	}
	return nil
}

// This is the flag description only for test
type TestCmd struct {
	BoolFlag         *bool   `protobuf:"varint,1,opt,name=BoolFlag" json:"BoolFlag,omitempty"`
	StringFlag       *string `protobuf:"bytes,2,opt,name=StringFlag" json:"StringFlag,omitempty"`
	Int32Flag        *int32  `protobuf:"varint,3,opt,name=Int32Flag" json:"Int32Flag,omitempty"`
	ArrayFlag        *Array  `protobuf:"bytes,4,opt,name=ArrayFlag" json:"ArrayFlag,omitempty"`
	Int64Flag        *int64  `protobuf:"varint,5,opt,name=Int64Flag" json:"Int64Flag,omitempty"`
	TimeFlag         *int64  `protobuf:"varint,6,opt,name=TimeFlag" json:"TimeFlag,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestCmd) Reset()                    { *m = TestCmd{} }
func (m *TestCmd) String() string            { return proto.CompactTextString(m) }
func (*TestCmd) ProtoMessage()               {}
func (*TestCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TestCmd) GetBoolFlag() bool {
	if m != nil && m.BoolFlag != nil {
		return *m.BoolFlag
	}
	return false
}

func (m *TestCmd) GetStringFlag() string {
	if m != nil && m.StringFlag != nil {
		return *m.StringFlag
	}
	return ""
}

func (m *TestCmd) GetInt32Flag() int32 {
	if m != nil && m.Int32Flag != nil {
		return *m.Int32Flag
	}
	return 0
}

func (m *TestCmd) GetArrayFlag() *Array {
	if m != nil {
		return m.ArrayFlag
	}
	return nil
}

func (m *TestCmd) GetInt64Flag() int64 {
	if m != nil && m.Int64Flag != nil {
		return *m.Int64Flag
	}
	return 0
}

func (m *TestCmd) GetTimeFlag() int64 {
	if m != nil && m.TimeFlag != nil {
		return *m.TimeFlag
	}
	return 0
}

var E_Info = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*FlagDetail)(nil),
	Field:         1234,
	Name:          "k8s.io.kubectl.cmd.info",
	Tag:           "bytes,1234,opt,name=info",
	Filename:      "cmd.proto",
}

var E_Cmd = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*CommandInfo)(nil),
	Field:         5678,
	Name:          "k8s.io.kubectl.cmd.cmd",
	Tag:           "bytes,5678,opt,name=cmd",
	Filename:      "cmd.proto",
}

func init() {
	proto.RegisterType((*FlagDetail)(nil), "k8s.io.kubectl.cmd.FlagDetail")
	proto.RegisterType((*CommandInfo)(nil), "k8s.io.kubectl.cmd.CommandInfo")
	proto.RegisterType((*Array)(nil), "k8s.io.kubectl.cmd.Array")
	proto.RegisterType((*TestCmd)(nil), "k8s.io.kubectl.cmd.TestCmd")
	proto.RegisterEnum("k8s.io.kubectl.cmd.FlagDetail_EXT", FlagDetail_EXT_name, FlagDetail_EXT_value)
	proto.RegisterExtension(E_Info)
	proto.RegisterExtension(E_Cmd)
}

func init() { proto.RegisterFile("cmd.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 706 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0xc7, 0xd9, 0x6e, 0x0b, 0xdd, 0x43, 0x82, 0x75, 0x42, 0xe2, 0x5a, 0x04, 0xd6, 0xea, 0x45,
	0x8d, 0xb2, 0x48, 0x29, 0x95, 0x94, 0x1b, 0x29, 0x16, 0xd3, 0x84, 0x05, 0xb3, 0xed, 0x05, 0x5e,
	0x91, 0x61, 0x77, 0xba, 0x6c, 0xd8, 0x9d, 0x69, 0x66, 0xa6, 0x04, 0x1f, 0xc0, 0x07, 0xb0, 0x0f,
	0xe2, 0xb3, 0x18, 0x13, 0x2f, 0xbd, 0xf1, 0x11, 0x7c, 0x02, 0x33, 0xb3, 0xf4, 0xc3, 0x80, 0x46,
	0xef, 0xe6, 0x9c, 0xf9, 0xff, 0xce, 0xd7, 0x7c, 0x80, 0x15, 0xa4, 0xa1, 0x3b, 0xe0, 0x4c, 0x32,
	0x84, 0x2e, 0x77, 0x85, 0x1b, 0x33, 0xf7, 0x72, 0x78, 0x4e, 0x02, 0x99, 0xb8, 0x41, 0x1a, 0x96,
	0x9d, 0x88, 0xb1, 0x28, 0x21, 0x9b, 0x5a, 0x71, 0x3e, 0xec, 0x6f, 0x86, 0x44, 0x04, 0x3c, 0x1e,
	0x48, 0xc6, 0x33, 0xaa, 0xf2, 0xdd, 0x00, 0x38, 0x4c, 0x70, 0xf4, 0x86, 0x48, 0x1c, 0x27, 0x08,
	0x41, 0x9e, 0xe2, 0x94, 0xd8, 0x86, 0x93, 0xab, 0x5a, 0xbe, 0x5e, 0xa3, 0x65, 0x28, 0x5c, 0xe1,
	0x64, 0x48, 0xec, 0x9c, 0x63, 0x56, 0x2d, 0x3f, 0x33, 0xd0, 0x23, 0xb0, 0xc4, 0x05, 0xe3, 0xf2,
	0x02, 0xd3, 0xd0, 0x36, 0xb5, 0x7c, 0xea, 0x50, 0xcc, 0x50, 0xe0, 0x88, 0xd8, 0x79, 0xbd, 0x93,
	0x19, 0xa8, 0x0e, 0x26, 0xb9, 0x96, 0x76, 0xc1, 0x31, 0xaa, 0x4b, 0xb5, 0x8a, 0x7b, 0xbb, 0x60,
	0x77, 0x5a, 0x8a, 0xdb, 0x3e, 0xed, 0xf9, 0x4a, 0x5e, 0xd9, 0x03, 0xb3, 0x7d, 0xda, 0x43, 0x45,
	0xc8, 0x1f, 0x9f, 0x1c, 0xb7, 0x4b, 0x73, 0x08, 0x60, 0xbe, 0xd3, 0xed, 0x75, 0xbc, 0x76, 0xc9,
	0x40, 0x4b, 0x00, 0x9d, 0x6e, 0xb7, 0xe7, 0xef, 0xfb, 0xfe, 0xfe, 0xfb, 0x52, 0x6e, 0x62, 0x77,
	0x8f, 0x3a, 0x07, 0xed, 0x92, 0x59, 0xf9, 0x64, 0xc0, 0xe2, 0x01, 0x4b, 0x53, 0x4c, 0xc3, 0x0e,
	0xed, 0x33, 0x54, 0x02, 0x73, 0x28, 0x54, 0x7f, 0x46, 0xd5, 0xf2, 0xd5, 0x12, 0x3d, 0x87, 0xfb,
	0xe3, 0xa9, 0xc4, 0x8c, 0x9e, 0xe9, 0x1e, 0xec, 0x9c, 0xde, 0x2f, 0xcd, 0x6c, 0x74, 0x95, 0x1f,
	0x3d, 0x83, 0x59, 0xdf, 0x59, 0xc2, 0x68, 0x64, 0x9b, 0x5a, 0x7b, 0x6f, 0xc6, 0x7f, 0xc4, 0x68,
	0x84, 0x6c, 0x58, 0x20, 0xd7, 0x38, 0x1d, 0x24, 0x6a, 0x08, 0x4a, 0x31, 0x36, 0x2b, 0xab, 0x50,
	0xd8, 0xe7, 0x1c, 0x7f, 0x50, 0x53, 0xc2, 0x6a, 0x61, 0x1b, 0xd9, 0x64, 0xb5, 0x51, 0xf9, 0x58,
	0x80, 0x85, 0x1e, 0x11, 0xf2, 0x20, 0x0d, 0x51, 0x13, 0x8a, 0x2d, 0xc6, 0x12, 0x35, 0x16, 0x5d,
	0x73, 0xb1, 0xb5, 0x36, 0xf2, 0x56, 0xc0, 0x3a, 0x67, 0x2c, 0xd9, 0xe8, 0x27, 0x38, 0x42, 0x85,
	0x3e, 0x4e, 0x04, 0x29, 0x1b, 0x41, 0x25, 0x2f, 0x89, 0x90, 0xfe, 0x44, 0x8f, 0xf6, 0x00, 0xba,
	0x92, 0xc7, 0x34, 0xd2, 0xb4, 0xee, 0xa8, 0xb5, 0x32, 0xf2, 0x6c, 0x58, 0x14, 0xda, 0x9d, 0xf1,
	0x73, 0x65, 0x83, 0xdd, 0xa0, 0x33, 0x72, 0xb4, 0x0b, 0x56, 0x87, 0xca, 0xed, 0x9a, 0x66, 0x55,
	0x87, 0x85, 0x56, 0x79, 0xe4, 0x3d, 0x00, 0x88, 0x95, 0x37, 0x43, 0x8d, 0x97, 0xe5, 0xb9, 0x1b,
	0x74, 0x2a, 0x46, 0x03, 0xb0, 0x74, 0x77, 0x9a, 0x54, 0x9d, 0x2f, 0xd6, 0x1e, 0xde, 0x75, 0xd4,
	0x5a, 0xd4, 0x7a, 0x35, 0xf2, 0xea, 0xb0, 0xcc, 0xc9, 0x80, 0x60, 0x49, 0xc2, 0x8d, 0xd9, 0xca,
	0x8a, 0x21, 0xe9, 0xe3, 0x61, 0x22, 0xb7, 0x26, 0xab, 0xda, 0x38, 0x5f, 0x35, 0xe7, 0x4f, 0x93,
	0xa0, 0x3d, 0x5d, 0x6b, 0xa3, 0xae, 0x33, 0xaa, 0xcb, 0x65, 0xb6, 0x56, 0x47, 0x5e, 0x59, 0xd7,
	0xda, 0xa8, 0x67, 0xc1, 0xf2, 0x5b, 0xb5, 0xed, 0xfa, 0x6f, 0xe5, 0x66, 0x7a, 0xf4, 0x1a, 0x8a,
	0xbd, 0x38, 0x25, 0x9a, 0x9d, 0xd7, 0xec, 0xd3, 0x91, 0xf7, 0x18, 0x2c, 0x19, 0xa7, 0x24, 0x43,
	0x41, 0xa1, 0x3b, 0x8d, 0x9d, 0x46, 0xa3, 0x31, 0xc9, 0x6f, 0xf8, 0x13, 0xaa, 0xf9, 0xcd, 0xf8,
	0xf9, 0x23, 0xf7, 0xc5, 0x00, 0xbd, 0x83, 0x36, 0xdf, 0xf1, 0x98, 0x4a, 0x47, 0x5e, 0x10, 0x27,
	0x48, 0x62, 0x42, 0xa5, 0x83, 0x69, 0xe8, 0x08, 0xc2, 0xaf, 0x08, 0x77, 0xae, 0x08, 0x17, 0x31,
	0xa3, 0x4e, 0x4c, 0xfb, 0x8c, 0xa7, 0x58, 0xdd, 0x95, 0xf2, 0xdb, 0xff, 0x04, 0x9c, 0x3e, 0xe3,
	0x99, 0x7a, 0xc8, 0xb9, 0x92, 0x07, 0x8c, 0x4a, 0xf5, 0x4e, 0x8e, 0x9f, 0x38, 0xff, 0x10, 0x4a,
	0xfc, 0x89, 0x77, 0x6e, 0x0e, 0x67, 0x2c, 0x6c, 0xfa, 0x90, 0x57, 0x69, 0xd1, 0xaa, 0x9b, 0xfd,
	0x22, 0xee, 0xf8, 0x17, 0x71, 0x0f, 0x63, 0x92, 0x84, 0x27, 0xfa, 0xaa, 0x0b, 0xfb, 0xab, 0xa5,
	0xcf, 0x78, 0xed, 0xef, 0xcf, 0xd9, 0xd7, 0xb1, 0x9a, 0x5d, 0x30, 0x83, 0x34, 0x44, 0xeb, 0xb7,
	0x42, 0x7a, 0x44, 0xa8, 0x2f, 0x62, 0x1c, 0xf4, 0xf3, 0x0b, 0x1d, 0x74, 0xfd, 0xae, 0xa0, 0x33,
	0xcf, 0xd9, 0x57, 0xd1, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x88, 0x6f, 0xc0, 0x36, 0x05, 0x05,
	0x00, 0x00,
}
