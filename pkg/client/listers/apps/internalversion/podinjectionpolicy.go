/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	apps "k8s.io/kubernetes/pkg/apis/apps"
)

// PodInjectionPolicyLister helps list PodInjectionPolicies.
type PodInjectionPolicyLister interface {
	// List lists all PodInjectionPolicies in the indexer.
	List(selector labels.Selector) (ret []*apps.PodInjectionPolicy, err error)
	// PodInjectionPolicies returns an object that can list and get PodInjectionPolicies.
	PodInjectionPolicies(namespace string) PodInjectionPolicyNamespaceLister
	PodInjectionPolicyListerExpansion
}

// podInjectionPolicyLister implements the PodInjectionPolicyLister interface.
type podInjectionPolicyLister struct {
	indexer cache.Indexer
}

// NewPodInjectionPolicyLister returns a new PodInjectionPolicyLister.
func NewPodInjectionPolicyLister(indexer cache.Indexer) PodInjectionPolicyLister {
	return &podInjectionPolicyLister{indexer: indexer}
}

// List lists all PodInjectionPolicies in the indexer.
func (s *podInjectionPolicyLister) List(selector labels.Selector) (ret []*apps.PodInjectionPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*apps.PodInjectionPolicy))
	})
	return ret, err
}

// PodInjectionPolicies returns an object that can list and get PodInjectionPolicies.
func (s *podInjectionPolicyLister) PodInjectionPolicies(namespace string) PodInjectionPolicyNamespaceLister {
	return podInjectionPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodInjectionPolicyNamespaceLister helps list and get PodInjectionPolicies.
type PodInjectionPolicyNamespaceLister interface {
	// List lists all PodInjectionPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*apps.PodInjectionPolicy, err error)
	// Get retrieves the PodInjectionPolicy from the indexer for a given namespace and name.
	Get(name string) (*apps.PodInjectionPolicy, error)
	PodInjectionPolicyNamespaceListerExpansion
}

// podInjectionPolicyNamespaceLister implements the PodInjectionPolicyNamespaceLister
// interface.
type podInjectionPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodInjectionPolicies in the indexer for a given namespace.
func (s podInjectionPolicyNamespaceLister) List(selector labels.Selector) (ret []*apps.PodInjectionPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*apps.PodInjectionPolicy))
	})
	return ret, err
}

// Get retrieves the PodInjectionPolicy from the indexer for a given namespace and name.
func (s podInjectionPolicyNamespaceLister) Get(name string) (*apps.PodInjectionPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(apps.Resource("podinjectionpolicy"), name)
	}
	return obj.(*apps.PodInjectionPolicy), nil
}
