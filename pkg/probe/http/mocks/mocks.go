/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was generated by counterfeiter
package mocks

import (
	"net/http"
	"sync"

	http_probe "k8s.io/kubernetes/pkg/probe/http"
)

type MockHTTPGetter struct {
	GetStub        func(u string) (*http.Response, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		u string
	}
	getReturns struct {
		result1 *http.Response
		result2 error
	}
}

func (fake *MockHTTPGetter) Get(u string) (*http.Response, error) {
	fake.getMutex.Lock()
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		u string
	}{u})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(u)
	} else {
		return fake.getReturns.result1, fake.getReturns.result2
	}
}

func (fake *MockHTTPGetter) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *MockHTTPGetter) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].u
}

func (fake *MockHTTPGetter) GetReturns(result1 *http.Response, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

var _ http_probe.HTTPGetter = new(MockHTTPGetter)
