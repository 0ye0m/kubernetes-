/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package testing

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg3_types.UID
		var v3 time.Time
		_, _, _, _ = v0, v1, v2, v3
	}
}

func (x *Simple) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = true
			yyq2[3] = x.Other != ""
			yyq2[4] = len(x.Labels) != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				var yynn2 int = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[1] {
					yy7 := &x.APIVersion
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else if z.HasExtensions() && z.EncExt(yy7) {
					} else if !yym8 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy7)
					} else {
						z.EncFallback(yy7)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy9 := &x.APIVersion
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else if z.HasExtensions() && z.EncExt(yy9) {
					} else if !yym10 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy9)
					} else {
						z.EncFallback(yy9)
					}
				}
			}
			if yyr2 || yy2arr2 {
				yy12 := &x.ObjectMeta
				yy12.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy13 := &x.ObjectMeta
				yy13.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				if yyq2[3] {
					yym15 := z.EncBinary()
					_ = yym15
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Other))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					r.EncodeString(codecSelferC_UTF81234, string("other"))
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Other))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yyq2[4] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Simple) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Simple) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		switch yys22 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv24 := &x.APIVersion
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv24) {
				} else if !yym25 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv24)
				} else {
					z.DecFallback(yyv24, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv26 := &x.ObjectMeta
				yyv26.CodecDecodeSelf(d)
			}
		case "other":
			if r.TryDecodeAsNil() {
				x.Other = ""
			} else {
				x.Other = string(r.DecodeString())
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv28 := &x.Labels
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					z.F.DecMapStringStringX(yyv28, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	if !yyhl22 {
		r.ReadEnd()
	}
}

func (x *Simple) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv32 := &x.APIVersion
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv32) {
		} else if !yym33 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv32)
		} else {
			z.DecFallback(yyv32, false)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv34 := &x.ObjectMeta
		yyv34.CodecDecodeSelf(d)
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Other = ""
	} else {
		x.Other = string(r.DecodeString())
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv36 := &x.Labels
		yym37 := z.DecBinary()
		_ = yym37
		if false {
		} else {
			z.F.DecMapStringStringX(yyv36, false, d)
		}
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	r.ReadEnd()
}

func (x *SimpleRoot) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym38 := z.EncBinary()
		_ = yym38
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep39 := !z.EncBinary()
			yy2arr39 := z.EncBasicHandle().StructToArray
			var yyq39 [5]bool
			_, _, _ = yysep39, yyq39, yy2arr39
			const yyr39 bool = false
			yyq39[0] = x.Kind != ""
			yyq39[1] = true
			yyq39[3] = x.Other != ""
			yyq39[4] = len(x.Labels) != 0
			if yyr39 || yy2arr39 {
				r.EncodeArrayStart(5)
			} else {
				var yynn39 int = 1
				for _, b := range yyq39 {
					if b {
						yynn39++
					}
				}
				r.EncodeMapStart(yynn39)
			}
			if yyr39 || yy2arr39 {
				if yyq39[0] {
					yym41 := z.EncBinary()
					_ = yym41
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq39[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr39 || yy2arr39 {
				if yyq39[1] {
					yy44 := &x.APIVersion
					yym45 := z.EncBinary()
					_ = yym45
					if false {
					} else if z.HasExtensions() && z.EncExt(yy44) {
					} else if !yym45 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy44)
					} else {
						z.EncFallback(yy44)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq39[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy46 := &x.APIVersion
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else if z.HasExtensions() && z.EncExt(yy46) {
					} else if !yym47 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy46)
					} else {
						z.EncFallback(yy46)
					}
				}
			}
			if yyr39 || yy2arr39 {
				yy49 := &x.ObjectMeta
				yy49.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy50 := &x.ObjectMeta
				yy50.CodecEncodeSelf(e)
			}
			if yyr39 || yy2arr39 {
				if yyq39[3] {
					yym52 := z.EncBinary()
					_ = yym52
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Other))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq39[3] {
					r.EncodeString(codecSelferC_UTF81234, string("other"))
					yym53 := z.EncBinary()
					_ = yym53
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Other))
					}
				}
			}
			if yyr39 || yy2arr39 {
				if yyq39[4] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym55 := z.EncBinary()
						_ = yym55
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq39[4] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym56 := z.EncBinary()
						_ = yym56
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yysep39 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SimpleRoot) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym57 := z.DecBinary()
	_ = yym57
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl58 := r.ReadMapStart()
			if yyl58 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl58, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl58 := r.ReadArrayStart()
			if yyl58 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl58, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SimpleRoot) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys59Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys59Slc
	var yyhl59 bool = l >= 0
	for yyj59 := 0; ; yyj59++ {
		if yyhl59 {
			if yyj59 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys59Slc = r.DecodeBytes(yys59Slc, true, true)
		yys59 := string(yys59Slc)
		switch yys59 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv61 := &x.APIVersion
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv61) {
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv61)
				} else {
					z.DecFallback(yyv61, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv63 := &x.ObjectMeta
				yyv63.CodecDecodeSelf(d)
			}
		case "other":
			if r.TryDecodeAsNil() {
				x.Other = ""
			} else {
				x.Other = string(r.DecodeString())
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys59)
		} // end switch yys59
	} // end for yyj59
	if !yyhl59 {
		r.ReadEnd()
	}
}

func (x *SimpleRoot) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj67 int
	var yyb67 bool
	var yyhl67 bool = l >= 0
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv69 := &x.APIVersion
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv69) {
		} else if !yym70 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv69)
		} else {
			z.DecFallback(yyv69, false)
		}
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv71 := &x.ObjectMeta
		yyv71.CodecDecodeSelf(d)
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Other = ""
	} else {
		x.Other = string(r.DecodeString())
	}
	yyj67++
	if yyhl67 {
		yyb67 = yyj67 > l
	} else {
		yyb67 = r.CheckBreak()
	}
	if yyb67 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv73 := &x.Labels
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else {
			z.F.DecMapStringStringX(yyv73, false, d)
		}
	}
	for {
		yyj67++
		if yyhl67 {
			yyb67 = yyj67 > l
		} else {
			yyb67 = r.CheckBreak()
		}
		if yyb67 {
			break
		}
		z.DecStructFieldNotFound(yyj67-1, "")
	}
	r.ReadEnd()
}

func (x *SimpleGetOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym75 := z.EncBinary()
		_ = yym75
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep76 := !z.EncBinary()
			yy2arr76 := z.EncBasicHandle().StructToArray
			var yyq76 [5]bool
			_, _, _ = yysep76, yyq76, yy2arr76
			const yyr76 bool = false
			yyq76[0] = x.Kind != ""
			yyq76[1] = true
			if yyr76 || yy2arr76 {
				r.EncodeArrayStart(5)
			} else {
				var yynn76 int = 3
				for _, b := range yyq76 {
					if b {
						yynn76++
					}
				}
				r.EncodeMapStart(yynn76)
			}
			if yyr76 || yy2arr76 {
				if yyq76[0] {
					yym78 := z.EncBinary()
					_ = yym78
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq76[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym79 := z.EncBinary()
					_ = yym79
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr76 || yy2arr76 {
				if yyq76[1] {
					yy81 := &x.APIVersion
					yym82 := z.EncBinary()
					_ = yym82
					if false {
					} else if z.HasExtensions() && z.EncExt(yy81) {
					} else if !yym82 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy81)
					} else {
						z.EncFallback(yy81)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq76[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy83 := &x.APIVersion
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else if z.HasExtensions() && z.EncExt(yy83) {
					} else if !yym84 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy83)
					} else {
						z.EncFallback(yy83)
					}
				}
			}
			if yyr76 || yy2arr76 {
				yym86 := z.EncBinary()
				_ = yym86
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Param1))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("param1"))
				yym87 := z.EncBinary()
				_ = yym87
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Param1))
				}
			}
			if yyr76 || yy2arr76 {
				yym89 := z.EncBinary()
				_ = yym89
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Param2))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("param2"))
				yym90 := z.EncBinary()
				_ = yym90
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Param2))
				}
			}
			if yyr76 || yy2arr76 {
				yym92 := z.EncBinary()
				_ = yym92
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("atAPath"))
				yym93 := z.EncBinary()
				_ = yym93
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yysep76 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SimpleGetOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym94 := z.DecBinary()
	_ = yym94
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl95 := r.ReadMapStart()
			if yyl95 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl95, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl95 := r.ReadArrayStart()
			if yyl95 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl95, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SimpleGetOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys96Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys96Slc
	var yyhl96 bool = l >= 0
	for yyj96 := 0; ; yyj96++ {
		if yyhl96 {
			if yyj96 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys96Slc = r.DecodeBytes(yys96Slc, true, true)
		yys96 := string(yys96Slc)
		switch yys96 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv98 := &x.APIVersion
				yym99 := z.DecBinary()
				_ = yym99
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv98) {
				} else if !yym99 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv98)
				} else {
					z.DecFallback(yyv98, false)
				}
			}
		case "param1":
			if r.TryDecodeAsNil() {
				x.Param1 = ""
			} else {
				x.Param1 = string(r.DecodeString())
			}
		case "param2":
			if r.TryDecodeAsNil() {
				x.Param2 = ""
			} else {
				x.Param2 = string(r.DecodeString())
			}
		case "atAPath":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys96)
		} // end switch yys96
	} // end for yyj96
	if !yyhl96 {
		r.ReadEnd()
	}
}

func (x *SimpleGetOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj103 int
	var yyb103 bool
	var yyhl103 bool = l >= 0
	yyj103++
	if yyhl103 {
		yyb103 = yyj103 > l
	} else {
		yyb103 = r.CheckBreak()
	}
	if yyb103 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj103++
	if yyhl103 {
		yyb103 = yyj103 > l
	} else {
		yyb103 = r.CheckBreak()
	}
	if yyb103 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv105 := &x.APIVersion
		yym106 := z.DecBinary()
		_ = yym106
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv105) {
		} else if !yym106 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv105)
		} else {
			z.DecFallback(yyv105, false)
		}
	}
	yyj103++
	if yyhl103 {
		yyb103 = yyj103 > l
	} else {
		yyb103 = r.CheckBreak()
	}
	if yyb103 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Param1 = ""
	} else {
		x.Param1 = string(r.DecodeString())
	}
	yyj103++
	if yyhl103 {
		yyb103 = yyj103 > l
	} else {
		yyb103 = r.CheckBreak()
	}
	if yyb103 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Param2 = ""
	} else {
		x.Param2 = string(r.DecodeString())
	}
	yyj103++
	if yyhl103 {
		yyb103 = yyj103 > l
	} else {
		yyb103 = r.CheckBreak()
	}
	if yyb103 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj103++
		if yyhl103 {
			yyb103 = yyj103 > l
		} else {
			yyb103 = r.CheckBreak()
		}
		if yyb103 {
			break
		}
		z.DecStructFieldNotFound(yyj103-1, "")
	}
	r.ReadEnd()
}

func (x *SimpleList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym110 := z.EncBinary()
		_ = yym110
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep111 := !z.EncBinary()
			yy2arr111 := z.EncBasicHandle().StructToArray
			var yyq111 [4]bool
			_, _, _ = yysep111, yyq111, yy2arr111
			const yyr111 bool = false
			yyq111[0] = x.Kind != ""
			yyq111[1] = true
			yyq111[3] = len(x.Items) != 0
			if yyr111 || yy2arr111 {
				r.EncodeArrayStart(4)
			} else {
				var yynn111 int = 1
				for _, b := range yyq111 {
					if b {
						yynn111++
					}
				}
				r.EncodeMapStart(yynn111)
			}
			if yyr111 || yy2arr111 {
				if yyq111[0] {
					yym113 := z.EncBinary()
					_ = yym113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq111[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym114 := z.EncBinary()
					_ = yym114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr111 || yy2arr111 {
				if yyq111[1] {
					yy116 := &x.APIVersion
					yym117 := z.EncBinary()
					_ = yym117
					if false {
					} else if z.HasExtensions() && z.EncExt(yy116) {
					} else if !yym117 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy116)
					} else {
						z.EncFallback(yy116)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq111[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy118 := &x.APIVersion
					yym119 := z.EncBinary()
					_ = yym119
					if false {
					} else if z.HasExtensions() && z.EncExt(yy118) {
					} else if !yym119 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy118)
					} else {
						z.EncFallback(yy118)
					}
				}
			}
			if yyr111 || yy2arr111 {
				yy121 := &x.ListMeta
				yym122 := z.EncBinary()
				_ = yym122
				if false {
				} else if z.HasExtensions() && z.EncExt(yy121) {
				} else {
					z.EncFallback(yy121)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy123 := &x.ListMeta
				yym124 := z.EncBinary()
				_ = yym124
				if false {
				} else if z.HasExtensions() && z.EncExt(yy123) {
				} else {
					z.EncFallback(yy123)
				}
			}
			if yyr111 || yy2arr111 {
				if yyq111[3] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym126 := z.EncBinary()
						_ = yym126
						if false {
						} else {
							h.encSliceSimple(([]Simple)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq111[3] {
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym127 := z.EncBinary()
						_ = yym127
						if false {
						} else {
							h.encSliceSimple(([]Simple)(x.Items), e)
						}
					}
				}
			}
			if yysep111 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SimpleList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl129 := r.ReadMapStart()
			if yyl129 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl129, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl129 := r.ReadArrayStart()
			if yyl129 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SimpleList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys130Slc
	var yyhl130 bool = l >= 0
	for yyj130 := 0; ; yyj130++ {
		if yyhl130 {
			if yyj130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys130Slc = r.DecodeBytes(yys130Slc, true, true)
		yys130 := string(yys130Slc)
		switch yys130 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv132 := &x.APIVersion
				yym133 := z.DecBinary()
				_ = yym133
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv132) {
				} else if !yym133 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv132)
				} else {
					z.DecFallback(yyv132, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv134 := &x.ListMeta
				yym135 := z.DecBinary()
				_ = yym135
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv134) {
				} else {
					z.DecFallback(yyv134, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv136 := &x.Items
				yym137 := z.DecBinary()
				_ = yym137
				if false {
				} else {
					h.decSliceSimple((*[]Simple)(yyv136), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys130)
		} // end switch yys130
	} // end for yyj130
	if !yyhl130 {
		r.ReadEnd()
	}
}

func (x *SimpleList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj138 int
	var yyb138 bool
	var yyhl138 bool = l >= 0
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv140 := &x.APIVersion
		yym141 := z.DecBinary()
		_ = yym141
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv140) {
		} else if !yym141 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv140)
		} else {
			z.DecFallback(yyv140, false)
		}
	}
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv142 := &x.ListMeta
		yym143 := z.DecBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv142) {
		} else {
			z.DecFallback(yyv142, false)
		}
	}
	yyj138++
	if yyhl138 {
		yyb138 = yyj138 > l
	} else {
		yyb138 = r.CheckBreak()
	}
	if yyb138 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv144 := &x.Items
		yym145 := z.DecBinary()
		_ = yym145
		if false {
		} else {
			h.decSliceSimple((*[]Simple)(yyv144), d)
		}
	}
	for {
		yyj138++
		if yyhl138 {
			yyb138 = yyj138 > l
		} else {
			yyb138 = r.CheckBreak()
		}
		if yyb138 {
			break
		}
		z.DecStructFieldNotFound(yyj138-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSliceSimple(v []Simple, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv146 := range v {
		yy147 := &yyv146
		yy147.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceSimple(v *[]Simple, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv148 := *v
	yyh148, yyl148 := z.DecSliceHelperStart()

	var yyrr148, yyrl148 int
	var yyc148, yyrt148 bool
	_, _, _ = yyc148, yyrt148, yyrl148
	yyrr148 = yyl148

	if yyv148 == nil {
		if yyrl148, yyrt148 = z.DecInferLen(yyl148, z.DecBasicHandle().MaxInitLen, 232); yyrt148 {
			yyrr148 = yyrl148
		}
		yyv148 = make([]Simple, yyrl148)
		yyc148 = true
	}

	if yyl148 == 0 {
		if len(yyv148) != 0 {
			yyv148 = yyv148[:0]
			yyc148 = true
		}
	} else if yyl148 > 0 {

		if yyl148 > cap(yyv148) {
			yyrl148, yyrt148 = z.DecInferLen(yyl148, z.DecBasicHandle().MaxInitLen, 232)
			yyv148 = make([]Simple, yyrl148)
			yyc148 = true

			yyrr148 = len(yyv148)
		} else if yyl148 != len(yyv148) {
			yyv148 = yyv148[:yyl148]
			yyc148 = true
		}
		yyj148 := 0
		for ; yyj148 < yyrr148; yyj148++ {
			if r.TryDecodeAsNil() {
				yyv148[yyj148] = Simple{}
			} else {
				yyv149 := &yyv148[yyj148]
				yyv149.CodecDecodeSelf(d)
			}

		}
		if yyrt148 {
			for ; yyj148 < yyl148; yyj148++ {
				yyv148 = append(yyv148, Simple{})
				if r.TryDecodeAsNil() {
					yyv148[yyj148] = Simple{}
				} else {
					yyv150 := &yyv148[yyj148]
					yyv150.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj148 := 0; !r.CheckBreak(); yyj148++ {
			if yyj148 >= len(yyv148) {
				yyv148 = append(yyv148, Simple{}) // var yyz148 Simple
				yyc148 = true
			}

			if yyj148 < len(yyv148) {
				if r.TryDecodeAsNil() {
					yyv148[yyj148] = Simple{}
				} else {
					yyv151 := &yyv148[yyj148]
					yyv151.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh148.End()
	}
	if yyc148 {
		*v = yyv148
	}

}
