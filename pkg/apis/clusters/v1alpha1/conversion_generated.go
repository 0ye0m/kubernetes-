/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// DO NOT EDIT. THIS FILE IS AUTO-GENERATED BY $KUBEROOT/hack/update-generated-conversions.sh

package v1alpha1

import (
	reflect "reflect"

	api "k8s.io/kubernetes/pkg/api"
	resource "k8s.io/kubernetes/pkg/api/resource"
	clusters "k8s.io/kubernetes/pkg/apis/clusters"
	conversion "k8s.io/kubernetes/pkg/conversion"
)

func autoConvert_clusters_Cluster_To_v1alpha1_Cluster(in *clusters.Cluster, out *Cluster, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*clusters.Cluster))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_clusters_ClusterSpec_To_v1alpha1_ClusterSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_clusters_ClusterStatus_To_v1alpha1_ClusterStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_clusters_Cluster_To_v1alpha1_Cluster(in *clusters.Cluster, out *Cluster, s conversion.Scope) error {
	return autoConvert_clusters_Cluster_To_v1alpha1_Cluster(in, out, s)
}

func autoConvert_clusters_ClusterAddress_To_v1alpha1_ClusterAddress(in *clusters.ClusterAddress, out *ClusterAddress, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*clusters.ClusterAddress))(in)
	}
	out.Url = in.Url
	return nil
}

func Convert_clusters_ClusterAddress_To_v1alpha1_ClusterAddress(in *clusters.ClusterAddress, out *ClusterAddress, s conversion.Scope) error {
	return autoConvert_clusters_ClusterAddress_To_v1alpha1_ClusterAddress(in, out, s)
}

func autoConvert_clusters_ClusterList_To_v1alpha1_ClusterList(in *clusters.ClusterList, out *ClusterList, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*clusters.ClusterList))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		out.Items = make([]Cluster, len(in.Items))
		for i := range in.Items {
			if err := Convert_clusters_Cluster_To_v1alpha1_Cluster(&in.Items[i], &out.Items[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_clusters_ClusterList_To_v1alpha1_ClusterList(in *clusters.ClusterList, out *ClusterList, s conversion.Scope) error {
	return autoConvert_clusters_ClusterList_To_v1alpha1_ClusterList(in, out, s)
}

func autoConvert_clusters_ClusterSpec_To_v1alpha1_ClusterSpec(in *clusters.ClusterSpec, out *ClusterSpec, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*clusters.ClusterSpec))(in)
	}
	if err := Convert_clusters_ClusterAddress_To_v1alpha1_ClusterAddress(&in.Address, &out.Address, s); err != nil {
		return err
	}
	out.Credential = in.Credential
	return nil
}

func Convert_clusters_ClusterSpec_To_v1alpha1_ClusterSpec(in *clusters.ClusterSpec, out *ClusterSpec, s conversion.Scope) error {
	return autoConvert_clusters_ClusterSpec_To_v1alpha1_ClusterSpec(in, out, s)
}

func autoConvert_clusters_ClusterStatus_To_v1alpha1_ClusterStatus(in *clusters.ClusterStatus, out *ClusterStatus, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*clusters.ClusterStatus))(in)
	}
	out.Phase = ClusterPhase(in.Phase)
	if in.Capacity != nil {
		out.Capacity = make(api.ResourceList)
		for key, val := range in.Capacity {
			newVal := resource.Quantity{}
			if err := s.Convert(&val, &newVal, 0); err != nil {
				return err
			}
			out.Capacity[key] = newVal
		}
	} else {
		out.Capacity = nil
	}
	out.ClusterMeta = in.ClusterMeta
	return nil
}

func Convert_clusters_ClusterStatus_To_v1alpha1_ClusterStatus(in *clusters.ClusterStatus, out *ClusterStatus, s conversion.Scope) error {
	return autoConvert_clusters_ClusterStatus_To_v1alpha1_ClusterStatus(in, out, s)
}

func autoConvert_v1alpha1_Cluster_To_clusters_Cluster(in *Cluster, out *clusters.Cluster, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*Cluster))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1alpha1_ClusterSpec_To_clusters_ClusterSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_ClusterStatus_To_clusters_ClusterStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1alpha1_Cluster_To_clusters_Cluster(in *Cluster, out *clusters.Cluster, s conversion.Scope) error {
	return autoConvert_v1alpha1_Cluster_To_clusters_Cluster(in, out, s)
}

func autoConvert_v1alpha1_ClusterAddress_To_clusters_ClusterAddress(in *ClusterAddress, out *clusters.ClusterAddress, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*ClusterAddress))(in)
	}
	out.Url = in.Url
	return nil
}

func Convert_v1alpha1_ClusterAddress_To_clusters_ClusterAddress(in *ClusterAddress, out *clusters.ClusterAddress, s conversion.Scope) error {
	return autoConvert_v1alpha1_ClusterAddress_To_clusters_ClusterAddress(in, out, s)
}

func autoConvert_v1alpha1_ClusterList_To_clusters_ClusterList(in *ClusterList, out *clusters.ClusterList, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*ClusterList))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		out.Items = make([]clusters.Cluster, len(in.Items))
		for i := range in.Items {
			if err := Convert_v1alpha1_Cluster_To_clusters_Cluster(&in.Items[i], &out.Items[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1alpha1_ClusterList_To_clusters_ClusterList(in *ClusterList, out *clusters.ClusterList, s conversion.Scope) error {
	return autoConvert_v1alpha1_ClusterList_To_clusters_ClusterList(in, out, s)
}

func autoConvert_v1alpha1_ClusterSpec_To_clusters_ClusterSpec(in *ClusterSpec, out *clusters.ClusterSpec, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*ClusterSpec))(in)
	}
	if err := Convert_v1alpha1_ClusterAddress_To_clusters_ClusterAddress(&in.Address, &out.Address, s); err != nil {
		return err
	}
	out.Credential = in.Credential
	return nil
}

func Convert_v1alpha1_ClusterSpec_To_clusters_ClusterSpec(in *ClusterSpec, out *clusters.ClusterSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ClusterSpec_To_clusters_ClusterSpec(in, out, s)
}

func autoConvert_v1alpha1_ClusterStatus_To_clusters_ClusterStatus(in *ClusterStatus, out *clusters.ClusterStatus, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*ClusterStatus))(in)
	}
	out.Phase = clusters.ClusterPhase(in.Phase)
	if in.Capacity != nil {
		out.Capacity = make(api.ResourceList)
		for key, val := range in.Capacity {
			newVal := resource.Quantity{}
			if err := s.Convert(&val, &newVal, 0); err != nil {
				return err
			}
			out.Capacity[key] = newVal
		}
	} else {
		out.Capacity = nil
	}
	out.ClusterMeta = in.ClusterMeta
	return nil
}

func Convert_v1alpha1_ClusterStatus_To_clusters_ClusterStatus(in *ClusterStatus, out *clusters.ClusterStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_ClusterStatus_To_clusters_ClusterStatus(in, out, s)
}

func init() {
	err := api.Scheme.AddGeneratedConversionFuncs(
		autoConvert_clusters_ClusterAddress_To_v1alpha1_ClusterAddress,
		autoConvert_clusters_ClusterList_To_v1alpha1_ClusterList,
		autoConvert_clusters_ClusterSpec_To_v1alpha1_ClusterSpec,
		autoConvert_clusters_ClusterStatus_To_v1alpha1_ClusterStatus,
		autoConvert_clusters_Cluster_To_v1alpha1_Cluster,
		autoConvert_v1alpha1_ClusterAddress_To_clusters_ClusterAddress,
		autoConvert_v1alpha1_ClusterList_To_clusters_ClusterList,
		autoConvert_v1alpha1_ClusterSpec_To_clusters_ClusterSpec,
		autoConvert_v1alpha1_ClusterStatus_To_clusters_ClusterStatus,
		autoConvert_v1alpha1_Cluster_To_clusters_Cluster,
	)
	if err != nil {
		// If one of the conversion functions is malformed, detect it immediately.
		panic(err)
	}
}
