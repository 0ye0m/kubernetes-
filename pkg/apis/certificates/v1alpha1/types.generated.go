/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1alpha1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_v1 "k8s.io/kubernetes/pkg/apis/meta/v1"
	pkg2_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_v1.TypeMeta
		var v1 pkg2_types.UID
		var v2 time.Time
		_, _, _ = v0, v1, v2
	}
}

func (x *CertificateSigningRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			yyq2[3] = true
			yyq2[4] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else if z.HasExtensions() && z.EncExt(yy10) {
					} else {
						z.EncFallback(yy10)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy12 := &x.ObjectMeta
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else if z.HasExtensions() && z.EncExt(yy12) {
					} else {
						z.EncFallback(yy12)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yy15 := &x.Spec
					yy15.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy16 := &x.Spec
					yy16.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yy18 := &x.Status
					yy18.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy19 := &x.Status
					yy19.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv25 := &x.ObjectMeta
				yym26 := z.DecBinary()
				_ = yym26
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv25) {
				} else {
					z.DecFallback(yyv25, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = CertificateSigningRequestSpec{}
			} else {
				yyv27 := &x.Spec
				yyv27.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = CertificateSigningRequestStatus{}
			} else {
				yyv28 := &x.Status
				yyv28.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj29 int
	var yyb29 bool
	var yyhl29 bool = l >= 0
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv32 := &x.ObjectMeta
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv32) {
		} else {
			z.DecFallback(yyv32, false)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = CertificateSigningRequestSpec{}
	} else {
		yyv34 := &x.Spec
		yyv34.CodecDecodeSelf(d)
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = CertificateSigningRequestStatus{}
	} else {
		yyv35 := &x.Status
		yyv35.CodecDecodeSelf(d)
	}
	for {
		yyj29++
		if yyhl29 {
			yyb29 = yyj29 > l
		} else {
			yyb29 = r.CheckBreak()
		}
		if yyb29 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj29-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CertificateSigningRequestSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym36 := z.EncBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep37 := !z.EncBinary()
			yy2arr37 := z.EncBasicHandle().StructToArray
			var yyq37 [5]bool
			_, _, _ = yysep37, yyq37, yy2arr37
			const yyr37 bool = false
			yyq37[1] = len(x.Usages) != 0
			yyq37[2] = x.Username != ""
			yyq37[3] = x.UID != ""
			yyq37[4] = len(x.Groups) != 0
			var yynn37 int
			if yyr37 || yy2arr37 {
				r.EncodeArrayStart(5)
			} else {
				yynn37 = 1
				for _, b := range yyq37 {
					if b {
						yynn37++
					}
				}
				r.EncodeMapStart(yynn37)
				yynn37 = 0
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Request == nil {
					r.EncodeNil()
				} else {
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Request))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("request"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Request == nil {
					r.EncodeNil()
				} else {
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Request))
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[1] {
					if x.Usages == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							h.encSliceKeyUsage(([]KeyUsage)(x.Usages), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq37[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("usages"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Usages == nil {
						r.EncodeNil()
					} else {
						yym43 := z.EncBinary()
						_ = yym43
						if false {
						} else {
							h.encSliceKeyUsage(([]KeyUsage)(x.Usages), e)
						}
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[2] {
					yym45 := z.EncBinary()
					_ = yym45
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Username))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq37[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("username"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Username))
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[3] {
					yym48 := z.EncBinary()
					_ = yym48
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq37[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[4] {
					if x.Groups == nil {
						r.EncodeNil()
					} else {
						yym51 := z.EncBinary()
						_ = yym51
						if false {
						} else {
							z.F.EncSliceStringV(x.Groups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq37[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("groups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Groups == nil {
						r.EncodeNil()
					} else {
						yym52 := z.EncBinary()
						_ = yym52
						if false {
						} else {
							z.F.EncSliceStringV(x.Groups, false, e)
						}
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequestSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym53 := z.DecBinary()
	_ = yym53
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct54 := r.ContainerType()
		if yyct54 == codecSelferValueTypeMap1234 {
			yyl54 := r.ReadMapStart()
			if yyl54 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl54, d)
			}
		} else if yyct54 == codecSelferValueTypeArray1234 {
			yyl54 := r.ReadArrayStart()
			if yyl54 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl54, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequestSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys55Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys55Slc
	var yyhl55 bool = l >= 0
	for yyj55 := 0; ; yyj55++ {
		if yyhl55 {
			if yyj55 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys55Slc = r.DecodeBytes(yys55Slc, true, true)
		yys55 := string(yys55Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys55 {
		case "request":
			if r.TryDecodeAsNil() {
				x.Request = nil
			} else {
				yyv56 := &x.Request
				yym57 := z.DecBinary()
				_ = yym57
				if false {
				} else {
					*yyv56 = r.DecodeBytes(*(*[]byte)(yyv56), false, false)
				}
			}
		case "usages":
			if r.TryDecodeAsNil() {
				x.Usages = nil
			} else {
				yyv58 := &x.Usages
				yym59 := z.DecBinary()
				_ = yym59
				if false {
				} else {
					h.decSliceKeyUsage((*[]KeyUsage)(yyv58), d)
				}
			}
		case "username":
			if r.TryDecodeAsNil() {
				x.Username = ""
			} else {
				x.Username = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = string(r.DecodeString())
			}
		case "groups":
			if r.TryDecodeAsNil() {
				x.Groups = nil
			} else {
				yyv62 := &x.Groups
				yym63 := z.DecBinary()
				_ = yym63
				if false {
				} else {
					z.F.DecSliceStringX(yyv62, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys55)
		} // end switch yys55
	} // end for yyj55
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequestSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj64 int
	var yyb64 bool
	var yyhl64 bool = l >= 0
	yyj64++
	if yyhl64 {
		yyb64 = yyj64 > l
	} else {
		yyb64 = r.CheckBreak()
	}
	if yyb64 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Request = nil
	} else {
		yyv65 := &x.Request
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			*yyv65 = r.DecodeBytes(*(*[]byte)(yyv65), false, false)
		}
	}
	yyj64++
	if yyhl64 {
		yyb64 = yyj64 > l
	} else {
		yyb64 = r.CheckBreak()
	}
	if yyb64 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Usages = nil
	} else {
		yyv67 := &x.Usages
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			h.decSliceKeyUsage((*[]KeyUsage)(yyv67), d)
		}
	}
	yyj64++
	if yyhl64 {
		yyb64 = yyj64 > l
	} else {
		yyb64 = r.CheckBreak()
	}
	if yyb64 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Username = ""
	} else {
		x.Username = string(r.DecodeString())
	}
	yyj64++
	if yyhl64 {
		yyb64 = yyj64 > l
	} else {
		yyb64 = r.CheckBreak()
	}
	if yyb64 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = string(r.DecodeString())
	}
	yyj64++
	if yyhl64 {
		yyb64 = yyj64 > l
	} else {
		yyb64 = r.CheckBreak()
	}
	if yyb64 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Groups = nil
	} else {
		yyv71 := &x.Groups
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			z.F.DecSliceStringX(yyv71, false, d)
		}
	}
	for {
		yyj64++
		if yyhl64 {
			yyb64 = yyj64 > l
		} else {
			yyb64 = r.CheckBreak()
		}
		if yyb64 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj64-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CertificateSigningRequestStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym73 := z.EncBinary()
		_ = yym73
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep74 := !z.EncBinary()
			yy2arr74 := z.EncBasicHandle().StructToArray
			var yyq74 [2]bool
			_, _, _ = yysep74, yyq74, yy2arr74
			const yyr74 bool = false
			yyq74[0] = len(x.Conditions) != 0
			yyq74[1] = len(x.Certificate) != 0
			var yynn74 int
			if yyr74 || yy2arr74 {
				r.EncodeArrayStart(2)
			} else {
				yynn74 = 0
				for _, b := range yyq74 {
					if b {
						yynn74++
					}
				}
				r.EncodeMapStart(yynn74)
				yynn74 = 0
			}
			if yyr74 || yy2arr74 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq74[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym76 := z.EncBinary()
						_ = yym76
						if false {
						} else {
							h.encSliceCertificateSigningRequestCondition(([]CertificateSigningRequestCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq74[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym77 := z.EncBinary()
						_ = yym77
						if false {
						} else {
							h.encSliceCertificateSigningRequestCondition(([]CertificateSigningRequestCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr74 || yy2arr74 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq74[1] {
					if x.Certificate == nil {
						r.EncodeNil()
					} else {
						yym79 := z.EncBinary()
						_ = yym79
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Certificate))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq74[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("certificate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Certificate == nil {
						r.EncodeNil()
					} else {
						yym80 := z.EncBinary()
						_ = yym80
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Certificate))
						}
					}
				}
			}
			if yyr74 || yy2arr74 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequestStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym81 := z.DecBinary()
	_ = yym81
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct82 := r.ContainerType()
		if yyct82 == codecSelferValueTypeMap1234 {
			yyl82 := r.ReadMapStart()
			if yyl82 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl82, d)
			}
		} else if yyct82 == codecSelferValueTypeArray1234 {
			yyl82 := r.ReadArrayStart()
			if yyl82 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl82, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequestStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys83Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys83Slc
	var yyhl83 bool = l >= 0
	for yyj83 := 0; ; yyj83++ {
		if yyhl83 {
			if yyj83 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys83Slc = r.DecodeBytes(yys83Slc, true, true)
		yys83 := string(yys83Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys83 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv84 := &x.Conditions
				yym85 := z.DecBinary()
				_ = yym85
				if false {
				} else {
					h.decSliceCertificateSigningRequestCondition((*[]CertificateSigningRequestCondition)(yyv84), d)
				}
			}
		case "certificate":
			if r.TryDecodeAsNil() {
				x.Certificate = nil
			} else {
				yyv86 := &x.Certificate
				yym87 := z.DecBinary()
				_ = yym87
				if false {
				} else {
					*yyv86 = r.DecodeBytes(*(*[]byte)(yyv86), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys83)
		} // end switch yys83
	} // end for yyj83
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequestStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj88 int
	var yyb88 bool
	var yyhl88 bool = l >= 0
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv89 := &x.Conditions
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			h.decSliceCertificateSigningRequestCondition((*[]CertificateSigningRequestCondition)(yyv89), d)
		}
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Certificate = nil
	} else {
		yyv91 := &x.Certificate
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			*yyv91 = r.DecodeBytes(*(*[]byte)(yyv91), false, false)
		}
	}
	for {
		yyj88++
		if yyhl88 {
			yyb88 = yyj88 > l
		} else {
			yyb88 = r.CheckBreak()
		}
		if yyb88 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj88-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RequestConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym93 := z.EncBinary()
	_ = yym93
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RequestConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym94 := z.DecBinary()
	_ = yym94
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *CertificateSigningRequestCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [4]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.Reason != ""
			yyq96[2] = x.Message != ""
			yyq96[3] = true
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(4)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq96[1] {
					yym99 := z.EncBinary()
					_ = yym99
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym100 := z.EncBinary()
					_ = yym100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq96[2] {
					yym102 := z.EncBinary()
					_ = yym102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym103 := z.EncBinary()
					_ = yym103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq96[3] {
					yy105 := &x.LastUpdateTime
					yym106 := z.EncBinary()
					_ = yym106
					if false {
					} else if z.HasExtensions() && z.EncExt(yy105) {
					} else if yym106 {
						z.EncBinaryMarshal(yy105)
					} else if !yym106 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy105)
					} else {
						z.EncFallback(yy105)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastUpdateTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy107 := &x.LastUpdateTime
					yym108 := z.EncBinary()
					_ = yym108
					if false {
					} else if z.HasExtensions() && z.EncExt(yy107) {
					} else if yym108 {
						z.EncBinaryMarshal(yy107)
					} else if !yym108 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy107)
					} else {
						z.EncFallback(yy107)
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequestCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym109 := z.DecBinary()
	_ = yym109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct110 := r.ContainerType()
		if yyct110 == codecSelferValueTypeMap1234 {
			yyl110 := r.ReadMapStart()
			if yyl110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl110, d)
			}
		} else if yyct110 == codecSelferValueTypeArray1234 {
			yyl110 := r.ReadArrayStart()
			if yyl110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequestCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys111Slc
	var yyhl111 bool = l >= 0
	for yyj111 := 0; ; yyj111++ {
		if yyhl111 {
			if yyj111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys111Slc = r.DecodeBytes(yys111Slc, true, true)
		yys111 := string(yys111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys111 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = RequestConditionType(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "lastUpdateTime":
			if r.TryDecodeAsNil() {
				x.LastUpdateTime = pkg1_v1.Time{}
			} else {
				yyv115 := &x.LastUpdateTime
				yym116 := z.DecBinary()
				_ = yym116
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv115) {
				} else if yym116 {
					z.DecBinaryUnmarshal(yyv115)
				} else if !yym116 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv115)
				} else {
					z.DecFallback(yyv115, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys111)
		} // end switch yys111
	} // end for yyj111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequestCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj117 int
	var yyb117 bool
	var yyhl117 bool = l >= 0
	yyj117++
	if yyhl117 {
		yyb117 = yyj117 > l
	} else {
		yyb117 = r.CheckBreak()
	}
	if yyb117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = RequestConditionType(r.DecodeString())
	}
	yyj117++
	if yyhl117 {
		yyb117 = yyj117 > l
	} else {
		yyb117 = r.CheckBreak()
	}
	if yyb117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj117++
	if yyhl117 {
		yyb117 = yyj117 > l
	} else {
		yyb117 = r.CheckBreak()
	}
	if yyb117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj117++
	if yyhl117 {
		yyb117 = yyj117 > l
	} else {
		yyb117 = r.CheckBreak()
	}
	if yyb117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastUpdateTime = pkg1_v1.Time{}
	} else {
		yyv121 := &x.LastUpdateTime
		yym122 := z.DecBinary()
		_ = yym122
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv121) {
		} else if yym122 {
			z.DecBinaryUnmarshal(yyv121)
		} else if !yym122 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv121)
		} else {
			z.DecFallback(yyv121, false)
		}
	}
	for {
		yyj117++
		if yyhl117 {
			yyb117 = yyj117 > l
		} else {
			yyb117 = r.CheckBreak()
		}
		if yyb117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CertificateSigningRequestList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym123 := z.EncBinary()
		_ = yym123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep124 := !z.EncBinary()
			yy2arr124 := z.EncBasicHandle().StructToArray
			var yyq124 [4]bool
			_, _, _ = yysep124, yyq124, yy2arr124
			const yyr124 bool = false
			yyq124[0] = x.Kind != ""
			yyq124[1] = x.APIVersion != ""
			yyq124[2] = true
			var yynn124 int
			if yyr124 || yy2arr124 {
				r.EncodeArrayStart(4)
			} else {
				yynn124 = 1
				for _, b := range yyq124 {
					if b {
						yynn124++
					}
				}
				r.EncodeMapStart(yynn124)
				yynn124 = 0
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq124[0] {
					yym126 := z.EncBinary()
					_ = yym126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq124[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym127 := z.EncBinary()
					_ = yym127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq124[1] {
					yym129 := z.EncBinary()
					_ = yym129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq124[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym130 := z.EncBinary()
					_ = yym130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq124[2] {
					yy132 := &x.ListMeta
					yym133 := z.EncBinary()
					_ = yym133
					if false {
					} else if z.HasExtensions() && z.EncExt(yy132) {
					} else {
						z.EncFallback(yy132)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq124[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy134 := &x.ListMeta
					yym135 := z.EncBinary()
					_ = yym135
					if false {
					} else if z.HasExtensions() && z.EncExt(yy134) {
					} else {
						z.EncFallback(yy134)
					}
				}
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym137 := z.EncBinary()
					_ = yym137
					if false {
					} else {
						h.encSliceCertificateSigningRequest(([]CertificateSigningRequest)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym138 := z.EncBinary()
					_ = yym138
					if false {
					} else {
						h.encSliceCertificateSigningRequest(([]CertificateSigningRequest)(x.Items), e)
					}
				}
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CertificateSigningRequestList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym139 := z.DecBinary()
	_ = yym139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct140 := r.ContainerType()
		if yyct140 == codecSelferValueTypeMap1234 {
			yyl140 := r.ReadMapStart()
			if yyl140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl140, d)
			}
		} else if yyct140 == codecSelferValueTypeArray1234 {
			yyl140 := r.ReadArrayStart()
			if yyl140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CertificateSigningRequestList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys141Slc
	var yyhl141 bool = l >= 0
	for yyj141 := 0; ; yyj141++ {
		if yyhl141 {
			if yyj141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys141Slc = r.DecodeBytes(yys141Slc, true, true)
		yys141 := string(yys141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys141 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv144 := &x.ListMeta
				yym145 := z.DecBinary()
				_ = yym145
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv144) {
				} else {
					z.DecFallback(yyv144, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv146 := &x.Items
				yym147 := z.DecBinary()
				_ = yym147
				if false {
				} else {
					h.decSliceCertificateSigningRequest((*[]CertificateSigningRequest)(yyv146), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys141)
		} // end switch yys141
	} // end for yyj141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CertificateSigningRequestList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj148 int
	var yyb148 bool
	var yyhl148 bool = l >= 0
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv151 := &x.ListMeta
		yym152 := z.DecBinary()
		_ = yym152
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv151) {
		} else {
			z.DecFallback(yyv151, false)
		}
	}
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv153 := &x.Items
		yym154 := z.DecBinary()
		_ = yym154
		if false {
		} else {
			h.decSliceCertificateSigningRequest((*[]CertificateSigningRequest)(yyv153), d)
		}
	}
	for {
		yyj148++
		if yyhl148 {
			yyb148 = yyj148 > l
		} else {
			yyb148 = r.CheckBreak()
		}
		if yyb148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x KeyUsage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym155 := z.EncBinary()
	_ = yym155
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *KeyUsage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym156 := z.DecBinary()
	_ = yym156
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceKeyUsage(v []KeyUsage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv157 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv157.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyUsage(v *[]KeyUsage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv158 := *v
	yyh158, yyl158 := z.DecSliceHelperStart()
	var yyc158 bool
	if yyl158 == 0 {
		if yyv158 == nil {
			yyv158 = []KeyUsage{}
			yyc158 = true
		} else if len(yyv158) != 0 {
			yyv158 = yyv158[:0]
			yyc158 = true
		}
	} else if yyl158 > 0 {
		var yyrr158, yyrl158 int
		var yyrt158 bool
		if yyl158 > cap(yyv158) {

			yyrl158, yyrt158 = z.DecInferLen(yyl158, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt158 {
				if yyrl158 <= cap(yyv158) {
					yyv158 = yyv158[:yyrl158]
				} else {
					yyv158 = make([]KeyUsage, yyrl158)
				}
			} else {
				yyv158 = make([]KeyUsage, yyrl158)
			}
			yyc158 = true
			yyrr158 = len(yyv158)
		} else if yyl158 != len(yyv158) {
			yyv158 = yyv158[:yyl158]
			yyc158 = true
		}
		yyj158 := 0
		for ; yyj158 < yyrr158; yyj158++ {
			yyh158.ElemContainerState(yyj158)
			if r.TryDecodeAsNil() {
				yyv158[yyj158] = ""
			} else {
				yyv158[yyj158] = KeyUsage(r.DecodeString())
			}

		}
		if yyrt158 {
			for ; yyj158 < yyl158; yyj158++ {
				yyv158 = append(yyv158, "")
				yyh158.ElemContainerState(yyj158)
				if r.TryDecodeAsNil() {
					yyv158[yyj158] = ""
				} else {
					yyv158[yyj158] = KeyUsage(r.DecodeString())
				}

			}
		}

	} else {
		yyj158 := 0
		for ; !r.CheckBreak(); yyj158++ {

			if yyj158 >= len(yyv158) {
				yyv158 = append(yyv158, "") // var yyz158 KeyUsage
				yyc158 = true
			}
			yyh158.ElemContainerState(yyj158)
			if yyj158 < len(yyv158) {
				if r.TryDecodeAsNil() {
					yyv158[yyj158] = ""
				} else {
					yyv158[yyj158] = KeyUsage(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj158 < len(yyv158) {
			yyv158 = yyv158[:yyj158]
			yyc158 = true
		} else if yyj158 == 0 && yyv158 == nil {
			yyv158 = []KeyUsage{}
			yyc158 = true
		}
	}
	yyh158.End()
	if yyc158 {
		*v = yyv158
	}
}

func (x codecSelfer1234) encSliceCertificateSigningRequestCondition(v []CertificateSigningRequestCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv162 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy163 := &yyv162
		yy163.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCertificateSigningRequestCondition(v *[]CertificateSigningRequestCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv164 := *v
	yyh164, yyl164 := z.DecSliceHelperStart()
	var yyc164 bool
	if yyl164 == 0 {
		if yyv164 == nil {
			yyv164 = []CertificateSigningRequestCondition{}
			yyc164 = true
		} else if len(yyv164) != 0 {
			yyv164 = yyv164[:0]
			yyc164 = true
		}
	} else if yyl164 > 0 {
		var yyrr164, yyrl164 int
		var yyrt164 bool
		if yyl164 > cap(yyv164) {

			yyrg164 := len(yyv164) > 0
			yyv2164 := yyv164
			yyrl164, yyrt164 = z.DecInferLen(yyl164, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt164 {
				if yyrl164 <= cap(yyv164) {
					yyv164 = yyv164[:yyrl164]
				} else {
					yyv164 = make([]CertificateSigningRequestCondition, yyrl164)
				}
			} else {
				yyv164 = make([]CertificateSigningRequestCondition, yyrl164)
			}
			yyc164 = true
			yyrr164 = len(yyv164)
			if yyrg164 {
				copy(yyv164, yyv2164)
			}
		} else if yyl164 != len(yyv164) {
			yyv164 = yyv164[:yyl164]
			yyc164 = true
		}
		yyj164 := 0
		for ; yyj164 < yyrr164; yyj164++ {
			yyh164.ElemContainerState(yyj164)
			if r.TryDecodeAsNil() {
				yyv164[yyj164] = CertificateSigningRequestCondition{}
			} else {
				yyv165 := &yyv164[yyj164]
				yyv165.CodecDecodeSelf(d)
			}

		}
		if yyrt164 {
			for ; yyj164 < yyl164; yyj164++ {
				yyv164 = append(yyv164, CertificateSigningRequestCondition{})
				yyh164.ElemContainerState(yyj164)
				if r.TryDecodeAsNil() {
					yyv164[yyj164] = CertificateSigningRequestCondition{}
				} else {
					yyv166 := &yyv164[yyj164]
					yyv166.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj164 := 0
		for ; !r.CheckBreak(); yyj164++ {

			if yyj164 >= len(yyv164) {
				yyv164 = append(yyv164, CertificateSigningRequestCondition{}) // var yyz164 CertificateSigningRequestCondition
				yyc164 = true
			}
			yyh164.ElemContainerState(yyj164)
			if yyj164 < len(yyv164) {
				if r.TryDecodeAsNil() {
					yyv164[yyj164] = CertificateSigningRequestCondition{}
				} else {
					yyv167 := &yyv164[yyj164]
					yyv167.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj164 < len(yyv164) {
			yyv164 = yyv164[:yyj164]
			yyc164 = true
		} else if yyj164 == 0 && yyv164 == nil {
			yyv164 = []CertificateSigningRequestCondition{}
			yyc164 = true
		}
	}
	yyh164.End()
	if yyc164 {
		*v = yyv164
	}
}

func (x codecSelfer1234) encSliceCertificateSigningRequest(v []CertificateSigningRequest, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv168 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy169 := &yyv168
		yy169.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCertificateSigningRequest(v *[]CertificateSigningRequest, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv170 := *v
	yyh170, yyl170 := z.DecSliceHelperStart()
	var yyc170 bool
	if yyl170 == 0 {
		if yyv170 == nil {
			yyv170 = []CertificateSigningRequest{}
			yyc170 = true
		} else if len(yyv170) != 0 {
			yyv170 = yyv170[:0]
			yyc170 = true
		}
	} else if yyl170 > 0 {
		var yyrr170, yyrl170 int
		var yyrt170 bool
		if yyl170 > cap(yyv170) {

			yyrg170 := len(yyv170) > 0
			yyv2170 := yyv170
			yyrl170, yyrt170 = z.DecInferLen(yyl170, z.DecBasicHandle().MaxInitLen, 408)
			if yyrt170 {
				if yyrl170 <= cap(yyv170) {
					yyv170 = yyv170[:yyrl170]
				} else {
					yyv170 = make([]CertificateSigningRequest, yyrl170)
				}
			} else {
				yyv170 = make([]CertificateSigningRequest, yyrl170)
			}
			yyc170 = true
			yyrr170 = len(yyv170)
			if yyrg170 {
				copy(yyv170, yyv2170)
			}
		} else if yyl170 != len(yyv170) {
			yyv170 = yyv170[:yyl170]
			yyc170 = true
		}
		yyj170 := 0
		for ; yyj170 < yyrr170; yyj170++ {
			yyh170.ElemContainerState(yyj170)
			if r.TryDecodeAsNil() {
				yyv170[yyj170] = CertificateSigningRequest{}
			} else {
				yyv171 := &yyv170[yyj170]
				yyv171.CodecDecodeSelf(d)
			}

		}
		if yyrt170 {
			for ; yyj170 < yyl170; yyj170++ {
				yyv170 = append(yyv170, CertificateSigningRequest{})
				yyh170.ElemContainerState(yyj170)
				if r.TryDecodeAsNil() {
					yyv170[yyj170] = CertificateSigningRequest{}
				} else {
					yyv172 := &yyv170[yyj170]
					yyv172.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj170 := 0
		for ; !r.CheckBreak(); yyj170++ {

			if yyj170 >= len(yyv170) {
				yyv170 = append(yyv170, CertificateSigningRequest{}) // var yyz170 CertificateSigningRequest
				yyc170 = true
			}
			yyh170.ElemContainerState(yyj170)
			if yyj170 < len(yyv170) {
				if r.TryDecodeAsNil() {
					yyv170[yyj170] = CertificateSigningRequest{}
				} else {
					yyv173 := &yyv170[yyj170]
					yyv173.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj170 < len(yyv170) {
			yyv170 = yyv170[:yyj170]
			yyc170 = true
		} else if yyj170 == 0 && yyv170 == nil {
			yyv170 = []CertificateSigningRequest{}
			yyc170 = true
		}
	}
	yyh170.End()
	if yyc170 {
		*v = yyv170
	}
}
