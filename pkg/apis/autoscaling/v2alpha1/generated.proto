/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.kubernetes.pkg.apis.autoscaling.v2alpha1;

import "k8s.io/kubernetes/pkg/api/resource/generated.proto";
import "k8s.io/kubernetes/pkg/api/unversioned/generated.proto";
import "k8s.io/kubernetes/pkg/api/v1/generated.proto";
import "k8s.io/kubernetes/pkg/runtime/generated.proto";
import "k8s.io/kubernetes/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v2alpha1";

// TODO: do we want to change this to just refer to an API group, and not a version?
// contains enough information to let you identify a resource in the current namespace
message CrossVersionObjectReference {
  // Kind of the referent; More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds"
  optional string kind = 1;

  // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
  optional string name = 2;

  // API version of the referent
  // +optional
  optional string apiVersion = 3;
}

// configuration of a horizontal pod autoscaler.
message HorizontalPodAutoscaler {
  // Standard object metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.kubernetes.pkg.api.v1.ObjectMeta metadata = 1;

  // behaviour of autoscaler. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#spec-and-status.
  // +optional
  optional HorizontalPodAutoscalerSpec spec = 2;

  // current information about the autoscaler.
  // +optional
  optional HorizontalPodAutoscalerStatus status = 3;
}

// list of horizontal pod autoscaler objects.
message HorizontalPodAutoscalerList {
  // Standard list metadata.
  // +optional
  optional k8s.io.kubernetes.pkg.api.unversioned.ListMeta metadata = 1;

  // list of horizontal pod autoscaler objects.
  repeated HorizontalPodAutoscaler items = 2;
}

// specification of a horizontal pod autoscaler
message HorizontalPodAutoscalerSpec {
  // the target scalable object to autoscale
  optional CrossVersionObjectReference scaleTargetRef = 1;

  // the minimum number of replicas to which the autoscaler may scale
  // +optional
  optional int32 minReplicas = 2;

  // the maximum number of replicas to which the autoscaler may scale
  optional int32 maxReplicas = 3;

  // the metrics to use to calculate the desired replica count (the
  // maximum replica count across all metrics will be used).  It is
  // expected that any metrics used will decrease as the replica count
  // increases, and will eventually increase if we decrease the replica
  // count.
  repeated MetricSpec metrics = 4;
}

// the status of a horizontal pod autoscaler
message HorizontalPodAutoscalerStatus {
  // most recent generation observed by this autoscaler.
  // +optional
  optional int64 observedGeneration = 1;

  // last time the HorizontalPodAutoscaler scaled the number of pods;
  // used by the autoscaler to control how often the number of pods is changed.
  // +optional
  optional k8s.io.kubernetes.pkg.api.unversioned.Time lastScaleTime = 2;

  // the last observed number of replicas from the target object.
  optional int32 currentReplicas = 3;

  // the desired number of replicas as last computed by the autoscaler
  optional int32 desiredReplicas = 4;

  // the last read state of the metrics used by this autoscaler
  repeated MetricStatus currentMetrics = 5;
}

// a specification for how to scale based on a single metric
// (only `type` and one other matching field should be set at once)
message MetricSpec {
  // the type of metric source (should match one of the fields below)
  optional string type = 1;

  // metric describing a single Kubernetes object
  optional ObjectMetricSource object = 2;

  // metric describing pods in the scale target
  optional PodsMetricSource pods = 3;

  // resource metric describing pods in the scale target
  // (guaranteed to be available and have the same names across clusters)
  optional ResourceMetricSource resource = 4;
}

// the status of a single metric
message MetricStatus {
  // the type of metric source (should match one of the fields below)
  optional string type = 1;

  // metric describing a single Kubernetes object
  optional ObjectMetricStatus object = 2;

  // metric describing pods in the scale target
  optional PodsMetricStatus pods = 3;

  // resource metric describing pods in the scale target
  // (guaranteed to be available and have the same names across clusters)
  optional ResourceMetricStatus resource = 4;
}

// a metric describing a Kubernetes object
message ObjectMetricSource {
  // the described Kubernetes object
  optional CrossVersionObjectReference target = 1;

  // the name of the metric in question
  optional string metricName = 2;

  // the target value of the metric (as a quantity)
  optional k8s.io.kubernetes.pkg.api.resource.Quantity targetValue = 3;
}

// a metric describing a Kubernetes object
message ObjectMetricStatus {
  // the described Kubernetes object
  optional CrossVersionObjectReference target = 1;

  // the name of the metric in question
  optional string metricName = 2;

  // the target value of the metric (as a quantity)
  optional k8s.io.kubernetes.pkg.api.resource.Quantity currentValue = 3;
}

// metric describing pods in the scale target
message PodsMetricSource {
  // the name of the metric in question
  optional string metricName = 1;

  // the target value of the metric (as a quantity)
  optional k8s.io.kubernetes.pkg.api.resource.Quantity targetValue = 2;
}

// metric describing pods in the scale target
message PodsMetricStatus {
  // the name of the metric in question
  optional string metricName = 1;

  // the current value of the metric (as a quantity)
  optional k8s.io.kubernetes.pkg.api.resource.Quantity currentValue = 2;
}

// resource metric describing pods in the scale target
// (guaranteed to be available and have the same names across clusters)
message ResourceMetricSource {
  // the name of the resource in question
  optional string name = 1;

  // the target value of the resource metric as a percentage of the
  // request on the pods
  // +optional
  optional int32 targetPercentageOfRequest = 2;

  // the target value of the resource metric as a raw value
  // +optional
  optional k8s.io.kubernetes.pkg.api.resource.Quantity targetRawValue = 3;
}

// resource metric describing pods in the scale target
message ResourceMetricStatus {
  // the name of the resource in question
  optional string name = 1;

  // the current value of the resource metric as a percentage of the
  // request on the pods (only populated if request is available)
  // +optional
  optional int32 currentPercentageOfRequest = 2;

  // the target value of the resource metric as a raw value
  // +optional
  optional k8s.io.kubernetes.pkg.api.resource.Quantity currentRawValue = 3;
}

