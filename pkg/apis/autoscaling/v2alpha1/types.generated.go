/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v2alpha1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg3_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg4_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_resource.Quantity
		var v1 pkg3_unversioned.Time
		var v2 pkg2_v1.ResourceName
		var v3 pkg4_types.UID
		var v4 time.Time
		_, _, _, _, _ = v0, v1, v2, v3, v4
	}
}

func (x *CrossVersionObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[2] = x.APIVersion != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CrossVersionObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym12 := z.DecBinary()
	_ = yym12
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct13 := r.ContainerType()
		if yyct13 == codecSelferValueTypeMap1234 {
			yyl13 := r.ReadMapStart()
			if yyl13 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl13, d)
			}
		} else if yyct13 == codecSelferValueTypeArray1234 {
			yyl13 := r.ReadArrayStart()
			if yyl13 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl13, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CrossVersionObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys14Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys14Slc
	var yyhl14 bool = l >= 0
	for yyj14 := 0; ; yyj14++ {
		if yyhl14 {
			if yyj14 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys14Slc = r.DecodeBytes(yys14Slc, true, true)
		yys14 := string(yys14Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys14 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys14)
		} // end switch yys14
	} // end for yyj14
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CrossVersionObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym22 := z.EncBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep23 := !z.EncBinary()
			yy2arr23 := z.EncBasicHandle().StructToArray
			var yyq23 [4]bool
			_, _, _ = yysep23, yyq23, yy2arr23
			const yyr23 bool = false
			yyq23[1] = x.MinReplicas != nil
			yyq23[3] = len(x.Metrics) != 0
			var yynn23 int
			if yyr23 || yy2arr23 {
				r.EncodeArrayStart(4)
			} else {
				yynn23 = 2
				for _, b := range yyq23 {
					if b {
						yynn23++
					}
				}
				r.EncodeMapStart(yynn23)
				yynn23 = 0
			}
			if yyr23 || yy2arr23 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy25 := &x.ScaleTargetRef
				yy25.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleTargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy26 := &x.ScaleTargetRef
				yy26.CodecEncodeSelf(e)
			}
			if yyr23 || yy2arr23 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq23[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy28 := *x.MinReplicas
						yym29 := z.EncBinary()
						_ = yym29
						if false {
						} else {
							r.EncodeInt(int64(yy28))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq23[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy30 := *x.MinReplicas
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else {
							r.EncodeInt(int64(yy30))
						}
					}
				}
			}
			if yyr23 || yy2arr23 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym33 := z.EncBinary()
				_ = yym33
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr23 || yy2arr23 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq23[3] {
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							h.encSliceMetricSpec(([]MetricSpec)(x.Metrics), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq23[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metrics"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							h.encSliceMetricSpec(([]MetricSpec)(x.Metrics), e)
						}
					}
				}
			}
			if yyr23 || yy2arr23 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym38 := z.DecBinary()
	_ = yym38
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct39 := r.ContainerType()
		if yyct39 == codecSelferValueTypeMap1234 {
			yyl39 := r.ReadMapStart()
			if yyl39 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl39, d)
			}
		} else if yyct39 == codecSelferValueTypeArray1234 {
			yyl39 := r.ReadArrayStart()
			if yyl39 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl39, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys40Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys40Slc
	var yyhl40 bool = l >= 0
	for yyj40 := 0; ; yyj40++ {
		if yyhl40 {
			if yyj40 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys40Slc = r.DecodeBytes(yys40Slc, true, true)
		yys40 := string(yys40Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys40 {
		case "scaleTargetRef":
			if r.TryDecodeAsNil() {
				x.ScaleTargetRef = CrossVersionObjectReference{}
			} else {
				yyv41 := &x.ScaleTargetRef
				yyv41.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int32)
				}
				yym43 := z.DecBinary()
				_ = yym43
				if false {
				} else {
					*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int32(r.DecodeInt(32))
			}
		case "metrics":
			if r.TryDecodeAsNil() {
				x.Metrics = nil
			} else {
				yyv45 := &x.Metrics
				yym46 := z.DecBinary()
				_ = yym46
				if false {
				} else {
					h.decSliceMetricSpec((*[]MetricSpec)(yyv45), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys40)
		} // end switch yys40
	} // end for yyj40
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj47 int
	var yyb47 bool
	var yyhl47 bool = l >= 0
	yyj47++
	if yyhl47 {
		yyb47 = yyj47 > l
	} else {
		yyb47 = r.CheckBreak()
	}
	if yyb47 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleTargetRef = CrossVersionObjectReference{}
	} else {
		yyv48 := &x.ScaleTargetRef
		yyv48.CodecDecodeSelf(d)
	}
	yyj47++
	if yyhl47 {
		yyb47 = yyj47 > l
	} else {
		yyb47 = r.CheckBreak()
	}
	if yyb47 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int32)
		}
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj47++
	if yyhl47 {
		yyb47 = yyj47 > l
	} else {
		yyb47 = r.CheckBreak()
	}
	if yyb47 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int32(r.DecodeInt(32))
	}
	yyj47++
	if yyhl47 {
		yyb47 = yyj47 > l
	} else {
		yyb47 = r.CheckBreak()
	}
	if yyb47 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Metrics = nil
	} else {
		yyv52 := &x.Metrics
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			h.decSliceMetricSpec((*[]MetricSpec)(yyv52), d)
		}
	}
	for {
		yyj47++
		if yyhl47 {
			yyb47 = yyj47 > l
		} else {
			yyb47 = r.CheckBreak()
		}
		if yyb47 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj47-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x MetricSourceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym54 := z.EncBinary()
	_ = yym54
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *MetricSourceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym55 := z.DecBinary()
	_ = yym55
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *MetricSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym56 := z.EncBinary()
		_ = yym56
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep57 := !z.EncBinary()
			yy2arr57 := z.EncBasicHandle().StructToArray
			var yyq57 [4]bool
			_, _, _ = yysep57, yyq57, yy2arr57
			const yyr57 bool = false
			yyq57[1] = x.Object != nil
			yyq57[2] = x.Pods != nil
			yyq57[3] = x.Resource != nil
			var yynn57 int
			if yyr57 || yy2arr57 {
				r.EncodeArrayStart(4)
			} else {
				yynn57 = 1
				for _, b := range yyq57 {
					if b {
						yynn57++
					}
				}
				r.EncodeMapStart(yynn57)
				yynn57 = 0
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq57[1] {
					if x.Object == nil {
						r.EncodeNil()
					} else {
						x.Object.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq57[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("object"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Object == nil {
						r.EncodeNil()
					} else {
						x.Object.CodecEncodeSelf(e)
					}
				}
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq57[2] {
					if x.Pods == nil {
						r.EncodeNil()
					} else {
						x.Pods.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq57[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Pods == nil {
						r.EncodeNil()
					} else {
						x.Pods.CodecEncodeSelf(e)
					}
				}
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq57[3] {
					if x.Resource == nil {
						r.EncodeNil()
					} else {
						x.Resource.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq57[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Resource == nil {
						r.EncodeNil()
					} else {
						x.Resource.CodecEncodeSelf(e)
					}
				}
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *MetricSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym62 := z.DecBinary()
	_ = yym62
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct63 := r.ContainerType()
		if yyct63 == codecSelferValueTypeMap1234 {
			yyl63 := r.ReadMapStart()
			if yyl63 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl63, d)
			}
		} else if yyct63 == codecSelferValueTypeArray1234 {
			yyl63 := r.ReadArrayStart()
			if yyl63 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl63, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *MetricSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys64Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys64Slc
	var yyhl64 bool = l >= 0
	for yyj64 := 0; ; yyj64++ {
		if yyhl64 {
			if yyj64 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys64Slc = r.DecodeBytes(yys64Slc, true, true)
		yys64 := string(yys64Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys64 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = MetricSourceType(r.DecodeString())
			}
		case "object":
			if r.TryDecodeAsNil() {
				if x.Object != nil {
					x.Object = nil
				}
			} else {
				if x.Object == nil {
					x.Object = new(ObjectMetricSource)
				}
				x.Object.CodecDecodeSelf(d)
			}
		case "pods":
			if r.TryDecodeAsNil() {
				if x.Pods != nil {
					x.Pods = nil
				}
			} else {
				if x.Pods == nil {
					x.Pods = new(PodsMetricSource)
				}
				x.Pods.CodecDecodeSelf(d)
			}
		case "resource":
			if r.TryDecodeAsNil() {
				if x.Resource != nil {
					x.Resource = nil
				}
			} else {
				if x.Resource == nil {
					x.Resource = new(ResourceMetricSource)
				}
				x.Resource.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys64)
		} // end switch yys64
	} // end for yyj64
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *MetricSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj69 int
	var yyb69 bool
	var yyhl69 bool = l >= 0
	yyj69++
	if yyhl69 {
		yyb69 = yyj69 > l
	} else {
		yyb69 = r.CheckBreak()
	}
	if yyb69 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = MetricSourceType(r.DecodeString())
	}
	yyj69++
	if yyhl69 {
		yyb69 = yyj69 > l
	} else {
		yyb69 = r.CheckBreak()
	}
	if yyb69 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Object != nil {
			x.Object = nil
		}
	} else {
		if x.Object == nil {
			x.Object = new(ObjectMetricSource)
		}
		x.Object.CodecDecodeSelf(d)
	}
	yyj69++
	if yyhl69 {
		yyb69 = yyj69 > l
	} else {
		yyb69 = r.CheckBreak()
	}
	if yyb69 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Pods != nil {
			x.Pods = nil
		}
	} else {
		if x.Pods == nil {
			x.Pods = new(PodsMetricSource)
		}
		x.Pods.CodecDecodeSelf(d)
	}
	yyj69++
	if yyhl69 {
		yyb69 = yyj69 > l
	} else {
		yyb69 = r.CheckBreak()
	}
	if yyb69 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Resource != nil {
			x.Resource = nil
		}
	} else {
		if x.Resource == nil {
			x.Resource = new(ResourceMetricSource)
		}
		x.Resource.CodecDecodeSelf(d)
	}
	for {
		yyj69++
		if yyhl69 {
			yyb69 = yyj69 > l
		} else {
			yyb69 = r.CheckBreak()
		}
		if yyb69 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj69-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectMetricSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym74 := z.EncBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep75 := !z.EncBinary()
			yy2arr75 := z.EncBasicHandle().StructToArray
			var yyq75 [3]bool
			_, _, _ = yysep75, yyq75, yy2arr75
			const yyr75 bool = false
			var yynn75 int
			if yyr75 || yy2arr75 {
				r.EncodeArrayStart(3)
			} else {
				yynn75 = 3
				for _, b := range yyq75 {
					if b {
						yynn75++
					}
				}
				r.EncodeMapStart(yynn75)
				yynn75 = 0
			}
			if yyr75 || yy2arr75 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy77 := &x.Target
				yy77.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy78 := &x.Target
				yy78.CodecEncodeSelf(e)
			}
			if yyr75 || yy2arr75 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym80 := z.EncBinary()
				_ = yym80
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MetricName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metricName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym81 := z.EncBinary()
				_ = yym81
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MetricName))
				}
			}
			if yyr75 || yy2arr75 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy83 := &x.TargetValue
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else if z.HasExtensions() && z.EncExt(yy83) {
				} else if !yym84 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy83)
				} else {
					z.EncFallback(yy83)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetValue"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy85 := &x.TargetValue
				yym86 := z.EncBinary()
				_ = yym86
				if false {
				} else if z.HasExtensions() && z.EncExt(yy85) {
				} else if !yym86 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy85)
				} else {
					z.EncFallback(yy85)
				}
			}
			if yyr75 || yy2arr75 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMetricSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym87 := z.DecBinary()
	_ = yym87
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct88 := r.ContainerType()
		if yyct88 == codecSelferValueTypeMap1234 {
			yyl88 := r.ReadMapStart()
			if yyl88 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl88, d)
			}
		} else if yyct88 == codecSelferValueTypeArray1234 {
			yyl88 := r.ReadArrayStart()
			if yyl88 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl88, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMetricSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys89Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys89Slc
	var yyhl89 bool = l >= 0
	for yyj89 := 0; ; yyj89++ {
		if yyhl89 {
			if yyj89 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys89Slc = r.DecodeBytes(yys89Slc, true, true)
		yys89 := string(yys89Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys89 {
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = CrossVersionObjectReference{}
			} else {
				yyv90 := &x.Target
				yyv90.CodecDecodeSelf(d)
			}
		case "metricName":
			if r.TryDecodeAsNil() {
				x.MetricName = ""
			} else {
				x.MetricName = string(r.DecodeString())
			}
		case "targetValue":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg1_resource.Quantity{}
			} else {
				yyv92 := &x.TargetValue
				yym93 := z.DecBinary()
				_ = yym93
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv92) {
				} else if !yym93 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv92)
				} else {
					z.DecFallback(yyv92, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys89)
		} // end switch yys89
	} // end for yyj89
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMetricSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj94 int
	var yyb94 bool
	var yyhl94 bool = l >= 0
	yyj94++
	if yyhl94 {
		yyb94 = yyj94 > l
	} else {
		yyb94 = r.CheckBreak()
	}
	if yyb94 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = CrossVersionObjectReference{}
	} else {
		yyv95 := &x.Target
		yyv95.CodecDecodeSelf(d)
	}
	yyj94++
	if yyhl94 {
		yyb94 = yyj94 > l
	} else {
		yyb94 = r.CheckBreak()
	}
	if yyb94 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MetricName = ""
	} else {
		x.MetricName = string(r.DecodeString())
	}
	yyj94++
	if yyhl94 {
		yyb94 = yyj94 > l
	} else {
		yyb94 = r.CheckBreak()
	}
	if yyb94 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg1_resource.Quantity{}
	} else {
		yyv97 := &x.TargetValue
		yym98 := z.DecBinary()
		_ = yym98
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv97) {
		} else if !yym98 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv97)
		} else {
			z.DecFallback(yyv97, false)
		}
	}
	for {
		yyj94++
		if yyhl94 {
			yyb94 = yyj94 > l
		} else {
			yyb94 = r.CheckBreak()
		}
		if yyb94 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj94-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodsMetricSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym99 := z.EncBinary()
		_ = yym99
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep100 := !z.EncBinary()
			yy2arr100 := z.EncBasicHandle().StructToArray
			var yyq100 [2]bool
			_, _, _ = yysep100, yyq100, yy2arr100
			const yyr100 bool = false
			var yynn100 int
			if yyr100 || yy2arr100 {
				r.EncodeArrayStart(2)
			} else {
				yynn100 = 2
				for _, b := range yyq100 {
					if b {
						yynn100++
					}
				}
				r.EncodeMapStart(yynn100)
				yynn100 = 0
			}
			if yyr100 || yy2arr100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym102 := z.EncBinary()
				_ = yym102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MetricName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metricName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym103 := z.EncBinary()
				_ = yym103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MetricName))
				}
			}
			if yyr100 || yy2arr100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy105 := &x.TargetValue
				yym106 := z.EncBinary()
				_ = yym106
				if false {
				} else if z.HasExtensions() && z.EncExt(yy105) {
				} else if !yym106 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy105)
				} else {
					z.EncFallback(yy105)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetValue"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy107 := &x.TargetValue
				yym108 := z.EncBinary()
				_ = yym108
				if false {
				} else if z.HasExtensions() && z.EncExt(yy107) {
				} else if !yym108 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy107)
				} else {
					z.EncFallback(yy107)
				}
			}
			if yyr100 || yy2arr100 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodsMetricSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym109 := z.DecBinary()
	_ = yym109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct110 := r.ContainerType()
		if yyct110 == codecSelferValueTypeMap1234 {
			yyl110 := r.ReadMapStart()
			if yyl110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl110, d)
			}
		} else if yyct110 == codecSelferValueTypeArray1234 {
			yyl110 := r.ReadArrayStart()
			if yyl110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodsMetricSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys111Slc
	var yyhl111 bool = l >= 0
	for yyj111 := 0; ; yyj111++ {
		if yyhl111 {
			if yyj111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys111Slc = r.DecodeBytes(yys111Slc, true, true)
		yys111 := string(yys111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys111 {
		case "metricName":
			if r.TryDecodeAsNil() {
				x.MetricName = ""
			} else {
				x.MetricName = string(r.DecodeString())
			}
		case "targetValue":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg1_resource.Quantity{}
			} else {
				yyv113 := &x.TargetValue
				yym114 := z.DecBinary()
				_ = yym114
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv113) {
				} else if !yym114 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv113)
				} else {
					z.DecFallback(yyv113, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys111)
		} // end switch yys111
	} // end for yyj111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodsMetricSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj115 int
	var yyb115 bool
	var yyhl115 bool = l >= 0
	yyj115++
	if yyhl115 {
		yyb115 = yyj115 > l
	} else {
		yyb115 = r.CheckBreak()
	}
	if yyb115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MetricName = ""
	} else {
		x.MetricName = string(r.DecodeString())
	}
	yyj115++
	if yyhl115 {
		yyb115 = yyj115 > l
	} else {
		yyb115 = r.CheckBreak()
	}
	if yyb115 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg1_resource.Quantity{}
	} else {
		yyv117 := &x.TargetValue
		yym118 := z.DecBinary()
		_ = yym118
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv117) {
		} else if !yym118 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv117)
		} else {
			z.DecFallback(yyv117, false)
		}
	}
	for {
		yyj115++
		if yyhl115 {
			yyb115 = yyj115 > l
		} else {
			yyb115 = r.CheckBreak()
		}
		if yyb115 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj115-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceMetricSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym119 := z.EncBinary()
		_ = yym119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep120 := !z.EncBinary()
			yy2arr120 := z.EncBasicHandle().StructToArray
			var yyq120 [3]bool
			_, _, _ = yysep120, yyq120, yy2arr120
			const yyr120 bool = false
			yyq120[1] = x.TargetPercentageOfRequest != nil
			yyq120[2] = x.TargetRawValue != nil
			var yynn120 int
			if yyr120 || yy2arr120 {
				r.EncodeArrayStart(3)
			} else {
				yynn120 = 1
				for _, b := range yyq120 {
					if b {
						yynn120++
					}
				}
				r.EncodeMapStart(yynn120)
				yynn120 = 0
			}
			if yyr120 || yy2arr120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym122 := z.EncBinary()
				_ = yym122
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Name) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym123 := z.EncBinary()
				_ = yym123
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Name) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr120 || yy2arr120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq120[1] {
					if x.TargetPercentageOfRequest == nil {
						r.EncodeNil()
					} else {
						yy125 := *x.TargetPercentageOfRequest
						yym126 := z.EncBinary()
						_ = yym126
						if false {
						} else {
							r.EncodeInt(int64(yy125))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq120[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPercentageOfRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetPercentageOfRequest == nil {
						r.EncodeNil()
					} else {
						yy127 := *x.TargetPercentageOfRequest
						yym128 := z.EncBinary()
						_ = yym128
						if false {
						} else {
							r.EncodeInt(int64(yy127))
						}
					}
				}
			}
			if yyr120 || yy2arr120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq120[2] {
					if x.TargetRawValue == nil {
						r.EncodeNil()
					} else {
						yym130 := z.EncBinary()
						_ = yym130
						if false {
						} else if z.HasExtensions() && z.EncExt(x.TargetRawValue) {
						} else if !yym130 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.TargetRawValue)
						} else {
							z.EncFallback(x.TargetRawValue)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq120[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRawValue"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRawValue == nil {
						r.EncodeNil()
					} else {
						yym131 := z.EncBinary()
						_ = yym131
						if false {
						} else if z.HasExtensions() && z.EncExt(x.TargetRawValue) {
						} else if !yym131 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.TargetRawValue)
						} else {
							z.EncFallback(x.TargetRawValue)
						}
					}
				}
			}
			if yyr120 || yy2arr120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceMetricSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym132 := z.DecBinary()
	_ = yym132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct133 := r.ContainerType()
		if yyct133 == codecSelferValueTypeMap1234 {
			yyl133 := r.ReadMapStart()
			if yyl133 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl133, d)
			}
		} else if yyct133 == codecSelferValueTypeArray1234 {
			yyl133 := r.ReadArrayStart()
			if yyl133 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceMetricSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys134Slc
	var yyhl134 bool = l >= 0
	for yyj134 := 0; ; yyj134++ {
		if yyhl134 {
			if yyj134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys134Slc = r.DecodeBytes(yys134Slc, true, true)
		yys134 := string(yys134Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys134 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = pkg2_v1.ResourceName(r.DecodeString())
			}
		case "targetPercentageOfRequest":
			if r.TryDecodeAsNil() {
				if x.TargetPercentageOfRequest != nil {
					x.TargetPercentageOfRequest = nil
				}
			} else {
				if x.TargetPercentageOfRequest == nil {
					x.TargetPercentageOfRequest = new(int32)
				}
				yym137 := z.DecBinary()
				_ = yym137
				if false {
				} else {
					*((*int32)(x.TargetPercentageOfRequest)) = int32(r.DecodeInt(32))
				}
			}
		case "targetRawValue":
			if r.TryDecodeAsNil() {
				if x.TargetRawValue != nil {
					x.TargetRawValue = nil
				}
			} else {
				if x.TargetRawValue == nil {
					x.TargetRawValue = new(pkg1_resource.Quantity)
				}
				yym139 := z.DecBinary()
				_ = yym139
				if false {
				} else if z.HasExtensions() && z.DecExt(x.TargetRawValue) {
				} else if !yym139 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.TargetRawValue)
				} else {
					z.DecFallback(x.TargetRawValue, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys134)
		} // end switch yys134
	} // end for yyj134
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceMetricSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj140 int
	var yyb140 bool
	var yyhl140 bool = l >= 0
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = pkg2_v1.ResourceName(r.DecodeString())
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetPercentageOfRequest != nil {
			x.TargetPercentageOfRequest = nil
		}
	} else {
		if x.TargetPercentageOfRequest == nil {
			x.TargetPercentageOfRequest = new(int32)
		}
		yym143 := z.DecBinary()
		_ = yym143
		if false {
		} else {
			*((*int32)(x.TargetPercentageOfRequest)) = int32(r.DecodeInt(32))
		}
	}
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRawValue != nil {
			x.TargetRawValue = nil
		}
	} else {
		if x.TargetRawValue == nil {
			x.TargetRawValue = new(pkg1_resource.Quantity)
		}
		yym145 := z.DecBinary()
		_ = yym145
		if false {
		} else if z.HasExtensions() && z.DecExt(x.TargetRawValue) {
		} else if !yym145 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.TargetRawValue)
		} else {
			z.DecFallback(x.TargetRawValue, false)
		}
	}
	for {
		yyj140++
		if yyhl140 {
			yyb140 = yyj140 > l
		} else {
			yyb140 = r.CheckBreak()
		}
		if yyb140 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj140-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym146 := z.EncBinary()
		_ = yym146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep147 := !z.EncBinary()
			yy2arr147 := z.EncBasicHandle().StructToArray
			var yyq147 [5]bool
			_, _, _ = yysep147, yyq147, yy2arr147
			const yyr147 bool = false
			yyq147[0] = x.ObservedGeneration != nil
			yyq147[1] = x.LastScaleTime != nil
			var yynn147 int
			if yyr147 || yy2arr147 {
				r.EncodeArrayStart(5)
			} else {
				yynn147 = 3
				for _, b := range yyq147 {
					if b {
						yynn147++
					}
				}
				r.EncodeMapStart(yynn147)
				yynn147 = 0
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy149 := *x.ObservedGeneration
						yym150 := z.EncBinary()
						_ = yym150
						if false {
						} else {
							r.EncodeInt(int64(yy149))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy151 := *x.ObservedGeneration
						yym152 := z.EncBinary()
						_ = yym152
						if false {
						} else {
							r.EncodeInt(int64(yy151))
						}
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym154 := z.EncBinary()
						_ = yym154
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym154 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym154 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym155 := z.EncBinary()
						_ = yym155
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym155 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym155 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym157 := z.EncBinary()
				_ = yym157
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym158 := z.EncBinary()
				_ = yym158
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym160 := z.EncBinary()
				_ = yym160
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym161 := z.EncBinary()
				_ = yym161
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CurrentMetrics == nil {
					r.EncodeNil()
				} else {
					yym163 := z.EncBinary()
					_ = yym163
					if false {
					} else {
						h.encSliceMetricStatus(([]MetricStatus)(x.CurrentMetrics), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentMetrics"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CurrentMetrics == nil {
					r.EncodeNil()
				} else {
					yym164 := z.EncBinary()
					_ = yym164
					if false {
					} else {
						h.encSliceMetricStatus(([]MetricStatus)(x.CurrentMetrics), e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym165 := z.DecBinary()
	_ = yym165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct166 := r.ContainerType()
		if yyct166 == codecSelferValueTypeMap1234 {
			yyl166 := r.ReadMapStart()
			if yyl166 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl166, d)
			}
		} else if yyct166 == codecSelferValueTypeArray1234 {
			yyl166 := r.ReadArrayStart()
			if yyl166 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys167Slc
	var yyhl167 bool = l >= 0
	for yyj167 := 0; ; yyj167++ {
		if yyhl167 {
			if yyj167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys167Slc = r.DecodeBytes(yys167Slc, true, true)
		yys167 := string(yys167Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys167 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym169 := z.DecBinary()
				_ = yym169
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg3_unversioned.Time)
				}
				yym171 := z.DecBinary()
				_ = yym171
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym171 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym171 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int32(r.DecodeInt(32))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int32(r.DecodeInt(32))
			}
		case "currentMetrics":
			if r.TryDecodeAsNil() {
				x.CurrentMetrics = nil
			} else {
				yyv174 := &x.CurrentMetrics
				yym175 := z.DecBinary()
				_ = yym175
				if false {
				} else {
					h.decSliceMetricStatus((*[]MetricStatus)(yyv174), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys167)
		} // end switch yys167
	} // end for yyj167
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj176 int
	var yyb176 bool
	var yyhl176 bool = l >= 0
	yyj176++
	if yyhl176 {
		yyb176 = yyj176 > l
	} else {
		yyb176 = r.CheckBreak()
	}
	if yyb176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym178 := z.DecBinary()
		_ = yym178
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj176++
	if yyhl176 {
		yyb176 = yyj176 > l
	} else {
		yyb176 = r.CheckBreak()
	}
	if yyb176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg3_unversioned.Time)
		}
		yym180 := z.DecBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym180 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym180 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj176++
	if yyhl176 {
		yyb176 = yyj176 > l
	} else {
		yyb176 = r.CheckBreak()
	}
	if yyb176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int32(r.DecodeInt(32))
	}
	yyj176++
	if yyhl176 {
		yyb176 = yyj176 > l
	} else {
		yyb176 = r.CheckBreak()
	}
	if yyb176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int32(r.DecodeInt(32))
	}
	yyj176++
	if yyhl176 {
		yyb176 = yyj176 > l
	} else {
		yyb176 = r.CheckBreak()
	}
	if yyb176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentMetrics = nil
	} else {
		yyv183 := &x.CurrentMetrics
		yym184 := z.DecBinary()
		_ = yym184
		if false {
		} else {
			h.decSliceMetricStatus((*[]MetricStatus)(yyv183), d)
		}
	}
	for {
		yyj176++
		if yyhl176 {
			yyb176 = yyj176 > l
		} else {
			yyb176 = r.CheckBreak()
		}
		if yyb176 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj176-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *MetricStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym185 := z.EncBinary()
		_ = yym185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep186 := !z.EncBinary()
			yy2arr186 := z.EncBasicHandle().StructToArray
			var yyq186 [4]bool
			_, _, _ = yysep186, yyq186, yy2arr186
			const yyr186 bool = false
			yyq186[1] = x.Object != nil
			yyq186[2] = x.Pods != nil
			yyq186[3] = x.Resource != nil
			var yynn186 int
			if yyr186 || yy2arr186 {
				r.EncodeArrayStart(4)
			} else {
				yynn186 = 1
				for _, b := range yyq186 {
					if b {
						yynn186++
					}
				}
				r.EncodeMapStart(yynn186)
				yynn186 = 0
			}
			if yyr186 || yy2arr186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr186 || yy2arr186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq186[1] {
					if x.Object == nil {
						r.EncodeNil()
					} else {
						x.Object.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq186[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("object"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Object == nil {
						r.EncodeNil()
					} else {
						x.Object.CodecEncodeSelf(e)
					}
				}
			}
			if yyr186 || yy2arr186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq186[2] {
					if x.Pods == nil {
						r.EncodeNil()
					} else {
						x.Pods.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq186[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Pods == nil {
						r.EncodeNil()
					} else {
						x.Pods.CodecEncodeSelf(e)
					}
				}
			}
			if yyr186 || yy2arr186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq186[3] {
					if x.Resource == nil {
						r.EncodeNil()
					} else {
						x.Resource.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq186[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Resource == nil {
						r.EncodeNil()
					} else {
						x.Resource.CodecEncodeSelf(e)
					}
				}
			}
			if yyr186 || yy2arr186 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *MetricStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym191 := z.DecBinary()
	_ = yym191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct192 := r.ContainerType()
		if yyct192 == codecSelferValueTypeMap1234 {
			yyl192 := r.ReadMapStart()
			if yyl192 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl192, d)
			}
		} else if yyct192 == codecSelferValueTypeArray1234 {
			yyl192 := r.ReadArrayStart()
			if yyl192 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *MetricStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys193Slc
	var yyhl193 bool = l >= 0
	for yyj193 := 0; ; yyj193++ {
		if yyhl193 {
			if yyj193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys193Slc = r.DecodeBytes(yys193Slc, true, true)
		yys193 := string(yys193Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys193 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = MetricSourceType(r.DecodeString())
			}
		case "object":
			if r.TryDecodeAsNil() {
				if x.Object != nil {
					x.Object = nil
				}
			} else {
				if x.Object == nil {
					x.Object = new(ObjectMetricStatus)
				}
				x.Object.CodecDecodeSelf(d)
			}
		case "pods":
			if r.TryDecodeAsNil() {
				if x.Pods != nil {
					x.Pods = nil
				}
			} else {
				if x.Pods == nil {
					x.Pods = new(PodsMetricStatus)
				}
				x.Pods.CodecDecodeSelf(d)
			}
		case "resource":
			if r.TryDecodeAsNil() {
				if x.Resource != nil {
					x.Resource = nil
				}
			} else {
				if x.Resource == nil {
					x.Resource = new(ResourceMetricStatus)
				}
				x.Resource.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys193)
		} // end switch yys193
	} // end for yyj193
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *MetricStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj198 int
	var yyb198 bool
	var yyhl198 bool = l >= 0
	yyj198++
	if yyhl198 {
		yyb198 = yyj198 > l
	} else {
		yyb198 = r.CheckBreak()
	}
	if yyb198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = MetricSourceType(r.DecodeString())
	}
	yyj198++
	if yyhl198 {
		yyb198 = yyj198 > l
	} else {
		yyb198 = r.CheckBreak()
	}
	if yyb198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Object != nil {
			x.Object = nil
		}
	} else {
		if x.Object == nil {
			x.Object = new(ObjectMetricStatus)
		}
		x.Object.CodecDecodeSelf(d)
	}
	yyj198++
	if yyhl198 {
		yyb198 = yyj198 > l
	} else {
		yyb198 = r.CheckBreak()
	}
	if yyb198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Pods != nil {
			x.Pods = nil
		}
	} else {
		if x.Pods == nil {
			x.Pods = new(PodsMetricStatus)
		}
		x.Pods.CodecDecodeSelf(d)
	}
	yyj198++
	if yyhl198 {
		yyb198 = yyj198 > l
	} else {
		yyb198 = r.CheckBreak()
	}
	if yyb198 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Resource != nil {
			x.Resource = nil
		}
	} else {
		if x.Resource == nil {
			x.Resource = new(ResourceMetricStatus)
		}
		x.Resource.CodecDecodeSelf(d)
	}
	for {
		yyj198++
		if yyhl198 {
			yyb198 = yyj198 > l
		} else {
			yyb198 = r.CheckBreak()
		}
		if yyb198 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj198-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectMetricStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym203 := z.EncBinary()
		_ = yym203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep204 := !z.EncBinary()
			yy2arr204 := z.EncBasicHandle().StructToArray
			var yyq204 [3]bool
			_, _, _ = yysep204, yyq204, yy2arr204
			const yyr204 bool = false
			var yynn204 int
			if yyr204 || yy2arr204 {
				r.EncodeArrayStart(3)
			} else {
				yynn204 = 3
				for _, b := range yyq204 {
					if b {
						yynn204++
					}
				}
				r.EncodeMapStart(yynn204)
				yynn204 = 0
			}
			if yyr204 || yy2arr204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy206 := &x.Target
				yy206.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy207 := &x.Target
				yy207.CodecEncodeSelf(e)
			}
			if yyr204 || yy2arr204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym209 := z.EncBinary()
				_ = yym209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MetricName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metricName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym210 := z.EncBinary()
				_ = yym210
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MetricName))
				}
			}
			if yyr204 || yy2arr204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy212 := &x.CurrentValue
				yym213 := z.EncBinary()
				_ = yym213
				if false {
				} else if z.HasExtensions() && z.EncExt(yy212) {
				} else if !yym213 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy212)
				} else {
					z.EncFallback(yy212)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentValue"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy214 := &x.CurrentValue
				yym215 := z.EncBinary()
				_ = yym215
				if false {
				} else if z.HasExtensions() && z.EncExt(yy214) {
				} else if !yym215 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy214)
				} else {
					z.EncFallback(yy214)
				}
			}
			if yyr204 || yy2arr204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMetricStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym216 := z.DecBinary()
	_ = yym216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct217 := r.ContainerType()
		if yyct217 == codecSelferValueTypeMap1234 {
			yyl217 := r.ReadMapStart()
			if yyl217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl217, d)
			}
		} else if yyct217 == codecSelferValueTypeArray1234 {
			yyl217 := r.ReadArrayStart()
			if yyl217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMetricStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys218Slc
	var yyhl218 bool = l >= 0
	for yyj218 := 0; ; yyj218++ {
		if yyhl218 {
			if yyj218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys218Slc = r.DecodeBytes(yys218Slc, true, true)
		yys218 := string(yys218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys218 {
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = CrossVersionObjectReference{}
			} else {
				yyv219 := &x.Target
				yyv219.CodecDecodeSelf(d)
			}
		case "metricName":
			if r.TryDecodeAsNil() {
				x.MetricName = ""
			} else {
				x.MetricName = string(r.DecodeString())
			}
		case "currentValue":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg1_resource.Quantity{}
			} else {
				yyv221 := &x.CurrentValue
				yym222 := z.DecBinary()
				_ = yym222
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv221) {
				} else if !yym222 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv221)
				} else {
					z.DecFallback(yyv221, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys218)
		} // end switch yys218
	} // end for yyj218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMetricStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj223 int
	var yyb223 bool
	var yyhl223 bool = l >= 0
	yyj223++
	if yyhl223 {
		yyb223 = yyj223 > l
	} else {
		yyb223 = r.CheckBreak()
	}
	if yyb223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = CrossVersionObjectReference{}
	} else {
		yyv224 := &x.Target
		yyv224.CodecDecodeSelf(d)
	}
	yyj223++
	if yyhl223 {
		yyb223 = yyj223 > l
	} else {
		yyb223 = r.CheckBreak()
	}
	if yyb223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MetricName = ""
	} else {
		x.MetricName = string(r.DecodeString())
	}
	yyj223++
	if yyhl223 {
		yyb223 = yyj223 > l
	} else {
		yyb223 = r.CheckBreak()
	}
	if yyb223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg1_resource.Quantity{}
	} else {
		yyv226 := &x.CurrentValue
		yym227 := z.DecBinary()
		_ = yym227
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv226) {
		} else if !yym227 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv226)
		} else {
			z.DecFallback(yyv226, false)
		}
	}
	for {
		yyj223++
		if yyhl223 {
			yyb223 = yyj223 > l
		} else {
			yyb223 = r.CheckBreak()
		}
		if yyb223 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj223-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodsMetricStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym228 := z.EncBinary()
		_ = yym228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep229 := !z.EncBinary()
			yy2arr229 := z.EncBasicHandle().StructToArray
			var yyq229 [2]bool
			_, _, _ = yysep229, yyq229, yy2arr229
			const yyr229 bool = false
			var yynn229 int
			if yyr229 || yy2arr229 {
				r.EncodeArrayStart(2)
			} else {
				yynn229 = 2
				for _, b := range yyq229 {
					if b {
						yynn229++
					}
				}
				r.EncodeMapStart(yynn229)
				yynn229 = 0
			}
			if yyr229 || yy2arr229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym231 := z.EncBinary()
				_ = yym231
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MetricName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metricName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym232 := z.EncBinary()
				_ = yym232
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MetricName))
				}
			}
			if yyr229 || yy2arr229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy234 := &x.CurrentValue
				yym235 := z.EncBinary()
				_ = yym235
				if false {
				} else if z.HasExtensions() && z.EncExt(yy234) {
				} else if !yym235 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy234)
				} else {
					z.EncFallback(yy234)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentValue"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy236 := &x.CurrentValue
				yym237 := z.EncBinary()
				_ = yym237
				if false {
				} else if z.HasExtensions() && z.EncExt(yy236) {
				} else if !yym237 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy236)
				} else {
					z.EncFallback(yy236)
				}
			}
			if yyr229 || yy2arr229 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodsMetricStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym238 := z.DecBinary()
	_ = yym238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct239 := r.ContainerType()
		if yyct239 == codecSelferValueTypeMap1234 {
			yyl239 := r.ReadMapStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl239, d)
			}
		} else if yyct239 == codecSelferValueTypeArray1234 {
			yyl239 := r.ReadArrayStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodsMetricStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys240Slc
	var yyhl240 bool = l >= 0
	for yyj240 := 0; ; yyj240++ {
		if yyhl240 {
			if yyj240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys240Slc = r.DecodeBytes(yys240Slc, true, true)
		yys240 := string(yys240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys240 {
		case "metricName":
			if r.TryDecodeAsNil() {
				x.MetricName = ""
			} else {
				x.MetricName = string(r.DecodeString())
			}
		case "currentValue":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg1_resource.Quantity{}
			} else {
				yyv242 := &x.CurrentValue
				yym243 := z.DecBinary()
				_ = yym243
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv242) {
				} else if !yym243 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv242)
				} else {
					z.DecFallback(yyv242, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys240)
		} // end switch yys240
	} // end for yyj240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodsMetricStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj244 int
	var yyb244 bool
	var yyhl244 bool = l >= 0
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MetricName = ""
	} else {
		x.MetricName = string(r.DecodeString())
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg1_resource.Quantity{}
	} else {
		yyv246 := &x.CurrentValue
		yym247 := z.DecBinary()
		_ = yym247
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv246) {
		} else if !yym247 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv246)
		} else {
			z.DecFallback(yyv246, false)
		}
	}
	for {
		yyj244++
		if yyhl244 {
			yyb244 = yyj244 > l
		} else {
			yyb244 = r.CheckBreak()
		}
		if yyb244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceMetricStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym248 := z.EncBinary()
		_ = yym248
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep249 := !z.EncBinary()
			yy2arr249 := z.EncBasicHandle().StructToArray
			var yyq249 [3]bool
			_, _, _ = yysep249, yyq249, yy2arr249
			const yyr249 bool = false
			yyq249[1] = x.CurrentPercentageOfRequest != nil
			yyq249[2] = x.CurrentRawValue != nil
			var yynn249 int
			if yyr249 || yy2arr249 {
				r.EncodeArrayStart(3)
			} else {
				yynn249 = 1
				for _, b := range yyq249 {
					if b {
						yynn249++
					}
				}
				r.EncodeMapStart(yynn249)
				yynn249 = 0
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym251 := z.EncBinary()
				_ = yym251
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Name) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym252 := z.EncBinary()
				_ = yym252
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Name) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[1] {
					if x.CurrentPercentageOfRequest == nil {
						r.EncodeNil()
					} else {
						yy254 := *x.CurrentPercentageOfRequest
						yym255 := z.EncBinary()
						_ = yym255
						if false {
						} else {
							r.EncodeInt(int64(yy254))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentPercentageOfRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentPercentageOfRequest == nil {
						r.EncodeNil()
					} else {
						yy256 := *x.CurrentPercentageOfRequest
						yym257 := z.EncBinary()
						_ = yym257
						if false {
						} else {
							r.EncodeInt(int64(yy256))
						}
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq249[2] {
					if x.CurrentRawValue == nil {
						r.EncodeNil()
					} else {
						yym259 := z.EncBinary()
						_ = yym259
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CurrentRawValue) {
						} else if !yym259 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CurrentRawValue)
						} else {
							z.EncFallback(x.CurrentRawValue)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq249[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentRawValue"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentRawValue == nil {
						r.EncodeNil()
					} else {
						yym260 := z.EncBinary()
						_ = yym260
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CurrentRawValue) {
						} else if !yym260 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CurrentRawValue)
						} else {
							z.EncFallback(x.CurrentRawValue)
						}
					}
				}
			}
			if yyr249 || yy2arr249 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceMetricStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym261 := z.DecBinary()
	_ = yym261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct262 := r.ContainerType()
		if yyct262 == codecSelferValueTypeMap1234 {
			yyl262 := r.ReadMapStart()
			if yyl262 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl262, d)
			}
		} else if yyct262 == codecSelferValueTypeArray1234 {
			yyl262 := r.ReadArrayStart()
			if yyl262 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl262, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceMetricStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys263Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys263Slc
	var yyhl263 bool = l >= 0
	for yyj263 := 0; ; yyj263++ {
		if yyhl263 {
			if yyj263 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys263Slc = r.DecodeBytes(yys263Slc, true, true)
		yys263 := string(yys263Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys263 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = pkg2_v1.ResourceName(r.DecodeString())
			}
		case "currentPercentageOfRequest":
			if r.TryDecodeAsNil() {
				if x.CurrentPercentageOfRequest != nil {
					x.CurrentPercentageOfRequest = nil
				}
			} else {
				if x.CurrentPercentageOfRequest == nil {
					x.CurrentPercentageOfRequest = new(int32)
				}
				yym266 := z.DecBinary()
				_ = yym266
				if false {
				} else {
					*((*int32)(x.CurrentPercentageOfRequest)) = int32(r.DecodeInt(32))
				}
			}
		case "currentRawValue":
			if r.TryDecodeAsNil() {
				if x.CurrentRawValue != nil {
					x.CurrentRawValue = nil
				}
			} else {
				if x.CurrentRawValue == nil {
					x.CurrentRawValue = new(pkg1_resource.Quantity)
				}
				yym268 := z.DecBinary()
				_ = yym268
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CurrentRawValue) {
				} else if !yym268 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CurrentRawValue)
				} else {
					z.DecFallback(x.CurrentRawValue, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys263)
		} // end switch yys263
	} // end for yyj263
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceMetricStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj269 int
	var yyb269 bool
	var yyhl269 bool = l >= 0
	yyj269++
	if yyhl269 {
		yyb269 = yyj269 > l
	} else {
		yyb269 = r.CheckBreak()
	}
	if yyb269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = pkg2_v1.ResourceName(r.DecodeString())
	}
	yyj269++
	if yyhl269 {
		yyb269 = yyj269 > l
	} else {
		yyb269 = r.CheckBreak()
	}
	if yyb269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentPercentageOfRequest != nil {
			x.CurrentPercentageOfRequest = nil
		}
	} else {
		if x.CurrentPercentageOfRequest == nil {
			x.CurrentPercentageOfRequest = new(int32)
		}
		yym272 := z.DecBinary()
		_ = yym272
		if false {
		} else {
			*((*int32)(x.CurrentPercentageOfRequest)) = int32(r.DecodeInt(32))
		}
	}
	yyj269++
	if yyhl269 {
		yyb269 = yyj269 > l
	} else {
		yyb269 = r.CheckBreak()
	}
	if yyb269 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentRawValue != nil {
			x.CurrentRawValue = nil
		}
	} else {
		if x.CurrentRawValue == nil {
			x.CurrentRawValue = new(pkg1_resource.Quantity)
		}
		yym274 := z.DecBinary()
		_ = yym274
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CurrentRawValue) {
		} else if !yym274 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CurrentRawValue)
		} else {
			z.DecFallback(x.CurrentRawValue, false)
		}
	}
	for {
		yyj269++
		if yyhl269 {
			yyb269 = yyj269 > l
		} else {
			yyb269 = r.CheckBreak()
		}
		if yyb269 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj269-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym275 := z.EncBinary()
		_ = yym275
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep276 := !z.EncBinary()
			yy2arr276 := z.EncBasicHandle().StructToArray
			var yyq276 [5]bool
			_, _, _ = yysep276, yyq276, yy2arr276
			const yyr276 bool = false
			yyq276[0] = x.Kind != ""
			yyq276[1] = x.APIVersion != ""
			yyq276[2] = true
			yyq276[3] = true
			yyq276[4] = true
			var yynn276 int
			if yyr276 || yy2arr276 {
				r.EncodeArrayStart(5)
			} else {
				yynn276 = 0
				for _, b := range yyq276 {
					if b {
						yynn276++
					}
				}
				r.EncodeMapStart(yynn276)
				yynn276 = 0
			}
			if yyr276 || yy2arr276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq276[0] {
					yym278 := z.EncBinary()
					_ = yym278
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq276[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym279 := z.EncBinary()
					_ = yym279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr276 || yy2arr276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq276[1] {
					yym281 := z.EncBinary()
					_ = yym281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq276[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym282 := z.EncBinary()
					_ = yym282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr276 || yy2arr276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq276[2] {
					yy284 := &x.ObjectMeta
					yy284.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq276[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy285 := &x.ObjectMeta
					yy285.CodecEncodeSelf(e)
				}
			}
			if yyr276 || yy2arr276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq276[3] {
					yy287 := &x.Spec
					yy287.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq276[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy288 := &x.Spec
					yy288.CodecEncodeSelf(e)
				}
			}
			if yyr276 || yy2arr276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq276[4] {
					yy290 := &x.Status
					yy290.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq276[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy291 := &x.Status
					yy291.CodecEncodeSelf(e)
				}
			}
			if yyr276 || yy2arr276 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym292 := z.DecBinary()
	_ = yym292
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct293 := r.ContainerType()
		if yyct293 == codecSelferValueTypeMap1234 {
			yyl293 := r.ReadMapStart()
			if yyl293 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl293, d)
			}
		} else if yyct293 == codecSelferValueTypeArray1234 {
			yyl293 := r.ReadArrayStart()
			if yyl293 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl293, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys294Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys294Slc
	var yyhl294 bool = l >= 0
	for yyj294 := 0; ; yyj294++ {
		if yyhl294 {
			if yyj294 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys294Slc = r.DecodeBytes(yys294Slc, true, true)
		yys294 := string(yys294Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys294 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv297 := &x.ObjectMeta
				yyv297.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv298 := &x.Spec
				yyv298.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv299 := &x.Status
				yyv299.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys294)
		} // end switch yys294
	} // end for yyj294
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj300 int
	var yyb300 bool
	var yyhl300 bool = l >= 0
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv303 := &x.ObjectMeta
		yyv303.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv304 := &x.Spec
		yyv304.CodecDecodeSelf(d)
	}
	yyj300++
	if yyhl300 {
		yyb300 = yyj300 > l
	} else {
		yyb300 = r.CheckBreak()
	}
	if yyb300 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv305 := &x.Status
		yyv305.CodecDecodeSelf(d)
	}
	for {
		yyj300++
		if yyhl300 {
			yyb300 = yyj300 > l
		} else {
			yyb300 = r.CheckBreak()
		}
		if yyb300 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj300-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym306 := z.EncBinary()
		_ = yym306
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep307 := !z.EncBinary()
			yy2arr307 := z.EncBasicHandle().StructToArray
			var yyq307 [4]bool
			_, _, _ = yysep307, yyq307, yy2arr307
			const yyr307 bool = false
			yyq307[0] = x.Kind != ""
			yyq307[1] = x.APIVersion != ""
			yyq307[2] = true
			var yynn307 int
			if yyr307 || yy2arr307 {
				r.EncodeArrayStart(4)
			} else {
				yynn307 = 1
				for _, b := range yyq307 {
					if b {
						yynn307++
					}
				}
				r.EncodeMapStart(yynn307)
				yynn307 = 0
			}
			if yyr307 || yy2arr307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq307[0] {
					yym309 := z.EncBinary()
					_ = yym309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq307[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym310 := z.EncBinary()
					_ = yym310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr307 || yy2arr307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq307[1] {
					yym312 := z.EncBinary()
					_ = yym312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq307[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr307 || yy2arr307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq307[2] {
					yy315 := &x.ListMeta
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else if z.HasExtensions() && z.EncExt(yy315) {
					} else {
						z.EncFallback(yy315)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq307[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy317 := &x.ListMeta
					yym318 := z.EncBinary()
					_ = yym318
					if false {
					} else if z.HasExtensions() && z.EncExt(yy317) {
					} else {
						z.EncFallback(yy317)
					}
				}
			}
			if yyr307 || yy2arr307 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym320 := z.EncBinary()
					_ = yym320
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym321 := z.EncBinary()
					_ = yym321
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr307 || yy2arr307 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym322 := z.DecBinary()
	_ = yym322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct323 := r.ContainerType()
		if yyct323 == codecSelferValueTypeMap1234 {
			yyl323 := r.ReadMapStart()
			if yyl323 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl323, d)
			}
		} else if yyct323 == codecSelferValueTypeArray1234 {
			yyl323 := r.ReadArrayStart()
			if yyl323 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl323, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys324Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys324Slc
	var yyhl324 bool = l >= 0
	for yyj324 := 0; ; yyj324++ {
		if yyhl324 {
			if yyj324 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys324Slc = r.DecodeBytes(yys324Slc, true, true)
		yys324 := string(yys324Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys324 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg3_unversioned.ListMeta{}
			} else {
				yyv327 := &x.ListMeta
				yym328 := z.DecBinary()
				_ = yym328
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv327) {
				} else {
					z.DecFallback(yyv327, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv329 := &x.Items
				yym330 := z.DecBinary()
				_ = yym330
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv329), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys324)
		} // end switch yys324
	} // end for yyj324
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj331 int
	var yyb331 bool
	var yyhl331 bool = l >= 0
	yyj331++
	if yyhl331 {
		yyb331 = yyj331 > l
	} else {
		yyb331 = r.CheckBreak()
	}
	if yyb331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj331++
	if yyhl331 {
		yyb331 = yyj331 > l
	} else {
		yyb331 = r.CheckBreak()
	}
	if yyb331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj331++
	if yyhl331 {
		yyb331 = yyj331 > l
	} else {
		yyb331 = r.CheckBreak()
	}
	if yyb331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg3_unversioned.ListMeta{}
	} else {
		yyv334 := &x.ListMeta
		yym335 := z.DecBinary()
		_ = yym335
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv334) {
		} else {
			z.DecFallback(yyv334, false)
		}
	}
	yyj331++
	if yyhl331 {
		yyb331 = yyj331 > l
	} else {
		yyb331 = r.CheckBreak()
	}
	if yyb331 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv336 := &x.Items
		yym337 := z.DecBinary()
		_ = yym337
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv336), d)
		}
	}
	for {
		yyj331++
		if yyhl331 {
			yyb331 = yyj331 > l
		} else {
			yyb331 = r.CheckBreak()
		}
		if yyb331 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj331-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceMetricSpec(v []MetricSpec, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv338 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy339 := &yyv338
		yy339.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceMetricSpec(v *[]MetricSpec, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv340 := *v
	yyh340, yyl340 := z.DecSliceHelperStart()
	var yyc340 bool
	if yyl340 == 0 {
		if yyv340 == nil {
			yyv340 = []MetricSpec{}
			yyc340 = true
		} else if len(yyv340) != 0 {
			yyv340 = yyv340[:0]
			yyc340 = true
		}
	} else if yyl340 > 0 {
		var yyrr340, yyrl340 int
		var yyrt340 bool
		if yyl340 > cap(yyv340) {

			yyrg340 := len(yyv340) > 0
			yyv2340 := yyv340
			yyrl340, yyrt340 = z.DecInferLen(yyl340, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt340 {
				if yyrl340 <= cap(yyv340) {
					yyv340 = yyv340[:yyrl340]
				} else {
					yyv340 = make([]MetricSpec, yyrl340)
				}
			} else {
				yyv340 = make([]MetricSpec, yyrl340)
			}
			yyc340 = true
			yyrr340 = len(yyv340)
			if yyrg340 {
				copy(yyv340, yyv2340)
			}
		} else if yyl340 != len(yyv340) {
			yyv340 = yyv340[:yyl340]
			yyc340 = true
		}
		yyj340 := 0
		for ; yyj340 < yyrr340; yyj340++ {
			yyh340.ElemContainerState(yyj340)
			if r.TryDecodeAsNil() {
				yyv340[yyj340] = MetricSpec{}
			} else {
				yyv341 := &yyv340[yyj340]
				yyv341.CodecDecodeSelf(d)
			}

		}
		if yyrt340 {
			for ; yyj340 < yyl340; yyj340++ {
				yyv340 = append(yyv340, MetricSpec{})
				yyh340.ElemContainerState(yyj340)
				if r.TryDecodeAsNil() {
					yyv340[yyj340] = MetricSpec{}
				} else {
					yyv342 := &yyv340[yyj340]
					yyv342.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj340 := 0
		for ; !r.CheckBreak(); yyj340++ {

			if yyj340 >= len(yyv340) {
				yyv340 = append(yyv340, MetricSpec{}) // var yyz340 MetricSpec
				yyc340 = true
			}
			yyh340.ElemContainerState(yyj340)
			if yyj340 < len(yyv340) {
				if r.TryDecodeAsNil() {
					yyv340[yyj340] = MetricSpec{}
				} else {
					yyv343 := &yyv340[yyj340]
					yyv343.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj340 < len(yyv340) {
			yyv340 = yyv340[:yyj340]
			yyc340 = true
		} else if yyj340 == 0 && yyv340 == nil {
			yyv340 = []MetricSpec{}
			yyc340 = true
		}
	}
	yyh340.End()
	if yyc340 {
		*v = yyv340
	}
}

func (x codecSelfer1234) encSliceMetricStatus(v []MetricStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv344 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy345 := &yyv344
		yy345.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceMetricStatus(v *[]MetricStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv346 := *v
	yyh346, yyl346 := z.DecSliceHelperStart()
	var yyc346 bool
	if yyl346 == 0 {
		if yyv346 == nil {
			yyv346 = []MetricStatus{}
			yyc346 = true
		} else if len(yyv346) != 0 {
			yyv346 = yyv346[:0]
			yyc346 = true
		}
	} else if yyl346 > 0 {
		var yyrr346, yyrl346 int
		var yyrt346 bool
		if yyl346 > cap(yyv346) {

			yyrg346 := len(yyv346) > 0
			yyv2346 := yyv346
			yyrl346, yyrt346 = z.DecInferLen(yyl346, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt346 {
				if yyrl346 <= cap(yyv346) {
					yyv346 = yyv346[:yyrl346]
				} else {
					yyv346 = make([]MetricStatus, yyrl346)
				}
			} else {
				yyv346 = make([]MetricStatus, yyrl346)
			}
			yyc346 = true
			yyrr346 = len(yyv346)
			if yyrg346 {
				copy(yyv346, yyv2346)
			}
		} else if yyl346 != len(yyv346) {
			yyv346 = yyv346[:yyl346]
			yyc346 = true
		}
		yyj346 := 0
		for ; yyj346 < yyrr346; yyj346++ {
			yyh346.ElemContainerState(yyj346)
			if r.TryDecodeAsNil() {
				yyv346[yyj346] = MetricStatus{}
			} else {
				yyv347 := &yyv346[yyj346]
				yyv347.CodecDecodeSelf(d)
			}

		}
		if yyrt346 {
			for ; yyj346 < yyl346; yyj346++ {
				yyv346 = append(yyv346, MetricStatus{})
				yyh346.ElemContainerState(yyj346)
				if r.TryDecodeAsNil() {
					yyv346[yyj346] = MetricStatus{}
				} else {
					yyv348 := &yyv346[yyj346]
					yyv348.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj346 := 0
		for ; !r.CheckBreak(); yyj346++ {

			if yyj346 >= len(yyv346) {
				yyv346 = append(yyv346, MetricStatus{}) // var yyz346 MetricStatus
				yyc346 = true
			}
			yyh346.ElemContainerState(yyj346)
			if yyj346 < len(yyv346) {
				if r.TryDecodeAsNil() {
					yyv346[yyj346] = MetricStatus{}
				} else {
					yyv349 := &yyv346[yyj346]
					yyv349.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj346 < len(yyv346) {
			yyv346 = yyv346[:yyj346]
			yyc346 = true
		} else if yyj346 == 0 && yyv346 == nil {
			yyv346 = []MetricStatus{}
			yyc346 = true
		}
	}
	yyh346.End()
	if yyc346 {
		*v = yyv346
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv350 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy351 := &yyv350
		yy351.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv352 := *v
	yyh352, yyl352 := z.DecSliceHelperStart()
	var yyc352 bool
	if yyl352 == 0 {
		if yyv352 == nil {
			yyv352 = []HorizontalPodAutoscaler{}
			yyc352 = true
		} else if len(yyv352) != 0 {
			yyv352 = yyv352[:0]
			yyc352 = true
		}
	} else if yyl352 > 0 {
		var yyrr352, yyrl352 int
		var yyrt352 bool
		if yyl352 > cap(yyv352) {

			yyrg352 := len(yyv352) > 0
			yyv2352 := yyv352
			yyrl352, yyrt352 = z.DecInferLen(yyl352, z.DecBasicHandle().MaxInitLen, 392)
			if yyrt352 {
				if yyrl352 <= cap(yyv352) {
					yyv352 = yyv352[:yyrl352]
				} else {
					yyv352 = make([]HorizontalPodAutoscaler, yyrl352)
				}
			} else {
				yyv352 = make([]HorizontalPodAutoscaler, yyrl352)
			}
			yyc352 = true
			yyrr352 = len(yyv352)
			if yyrg352 {
				copy(yyv352, yyv2352)
			}
		} else if yyl352 != len(yyv352) {
			yyv352 = yyv352[:yyl352]
			yyc352 = true
		}
		yyj352 := 0
		for ; yyj352 < yyrr352; yyj352++ {
			yyh352.ElemContainerState(yyj352)
			if r.TryDecodeAsNil() {
				yyv352[yyj352] = HorizontalPodAutoscaler{}
			} else {
				yyv353 := &yyv352[yyj352]
				yyv353.CodecDecodeSelf(d)
			}

		}
		if yyrt352 {
			for ; yyj352 < yyl352; yyj352++ {
				yyv352 = append(yyv352, HorizontalPodAutoscaler{})
				yyh352.ElemContainerState(yyj352)
				if r.TryDecodeAsNil() {
					yyv352[yyj352] = HorizontalPodAutoscaler{}
				} else {
					yyv354 := &yyv352[yyj352]
					yyv354.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj352 := 0
		for ; !r.CheckBreak(); yyj352++ {

			if yyj352 >= len(yyv352) {
				yyv352 = append(yyv352, HorizontalPodAutoscaler{}) // var yyz352 HorizontalPodAutoscaler
				yyc352 = true
			}
			yyh352.ElemContainerState(yyj352)
			if yyj352 < len(yyv352) {
				if r.TryDecodeAsNil() {
					yyv352[yyj352] = HorizontalPodAutoscaler{}
				} else {
					yyv355 := &yyv352[yyj352]
					yyv355.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj352 < len(yyv352) {
			yyv352 = yyv352[:yyj352]
			yyc352 = true
		} else if yyj352 == 0 && yyv352 == nil {
			yyv352 = []HorizontalPodAutoscaler{}
			yyc352 = true
		}
	}
	yyh352.End()
	if yyc352 {
		*v = yyv352
	}
}
