// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v2alpha1

import (
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	v1 "k8s.io/kubernetes/pkg/api/v1"
)

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *Job) DeepCopyInto(out *Job) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new Job.
func (x *Job) DeepCopy() *Job {
	if x == nil {
		return nil
	}
	out := new(Job)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *Job) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *JobCondition) DeepCopyInto(out *JobCondition) {
	out.Type = in.Type
	out.Status = in.Status
	in.LastProbeTime.DeepCopyInto(&out.LastProbeTime)
	in.LastTransitionTime.DeepCopyInto(&out.LastTransitionTime)
	out.Reason = in.Reason
	out.Message = in.Message
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new JobCondition.
func (x *JobCondition) DeepCopy() *JobCondition {
	if x == nil {
		return nil
	}
	out := new(JobCondition)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *JobList) DeepCopyInto(out *JobList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Job, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new JobList.
func (x *JobList) DeepCopy() *JobList {
	if x == nil {
		return nil
	}
	out := new(JobList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *JobList) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *JobSpec) DeepCopyInto(out *JobSpec) {
	if in.Parallelism != nil {
		in, out := &in.Parallelism, &out.Parallelism
		*out = new(int32)
		**out = **in
	} else {
		out.Parallelism = nil
	}
	if in.Completions != nil {
		in, out := &in.Completions, &out.Completions
		*out = new(int32)
		**out = **in
	} else {
		out.Completions = nil
	}
	if in.ActiveDeadlineSeconds != nil {
		in, out := &in.ActiveDeadlineSeconds, &out.ActiveDeadlineSeconds
		*out = new(int64)
		**out = **in
	} else {
		out.ActiveDeadlineSeconds = nil
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = (*in).DeepCopy()
	} else {
		out.Selector = nil
	}
	if in.ManualSelector != nil {
		in, out := &in.ManualSelector, &out.ManualSelector
		*out = new(bool)
		**out = **in
	} else {
		out.ManualSelector = nil
	}
	in.Template.DeepCopyInto(&out.Template)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new JobSpec.
func (x *JobSpec) DeepCopy() *JobSpec {
	if x == nil {
		return nil
	}
	out := new(JobSpec)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *JobStatus) DeepCopyInto(out *JobStatus) {
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]JobCondition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Conditions = nil
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = (*in).DeepCopy()
	} else {
		out.StartTime = nil
	}
	if in.CompletionTime != nil {
		in, out := &in.CompletionTime, &out.CompletionTime
		*out = (*in).DeepCopy()
	} else {
		out.CompletionTime = nil
	}
	out.Active = in.Active
	out.Succeeded = in.Succeeded
	out.Failed = in.Failed
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new JobStatus.
func (x *JobStatus) DeepCopy() *JobStatus {
	if x == nil {
		return nil
	}
	out := new(JobStatus)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *JobTemplate) DeepCopyInto(out *JobTemplate) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Template.DeepCopyInto(&out.Template)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new JobTemplate.
func (x *JobTemplate) DeepCopy() *JobTemplate {
	if x == nil {
		return nil
	}
	out := new(JobTemplate)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *JobTemplate) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *JobTemplateSpec) DeepCopyInto(out *JobTemplateSpec) {
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new JobTemplateSpec.
func (x *JobTemplateSpec) DeepCopy() *JobTemplateSpec {
	if x == nil {
		return nil
	}
	out := new(JobTemplateSpec)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ScheduledJob) DeepCopyInto(out *ScheduledJob) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ScheduledJob.
func (x *ScheduledJob) DeepCopy() *ScheduledJob {
	if x == nil {
		return nil
	}
	out := new(ScheduledJob)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *ScheduledJob) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ScheduledJobList) DeepCopyInto(out *ScheduledJobList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ScheduledJob, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ScheduledJobList.
func (x *ScheduledJobList) DeepCopy() *ScheduledJobList {
	if x == nil {
		return nil
	}
	out := new(ScheduledJobList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *ScheduledJobList) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ScheduledJobSpec) DeepCopyInto(out *ScheduledJobSpec) {
	out.Schedule = in.Schedule
	if in.StartingDeadlineSeconds != nil {
		in, out := &in.StartingDeadlineSeconds, &out.StartingDeadlineSeconds
		*out = new(int64)
		**out = **in
	} else {
		out.StartingDeadlineSeconds = nil
	}
	out.ConcurrencyPolicy = in.ConcurrencyPolicy
	if in.Suspend != nil {
		in, out := &in.Suspend, &out.Suspend
		*out = new(bool)
		**out = **in
	} else {
		out.Suspend = nil
	}
	in.JobTemplate.DeepCopyInto(&out.JobTemplate)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ScheduledJobSpec.
func (x *ScheduledJobSpec) DeepCopy() *ScheduledJobSpec {
	if x == nil {
		return nil
	}
	out := new(ScheduledJobSpec)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ScheduledJobStatus) DeepCopyInto(out *ScheduledJobStatus) {
	if in.Active != nil {
		in, out := &in.Active, &out.Active
		*out = make([]v1.ObjectReference, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.Active = nil
	}
	if in.LastScheduleTime != nil {
		in, out := &in.LastScheduleTime, &out.LastScheduleTime
		*out = (*in).DeepCopy()
	} else {
		out.LastScheduleTime = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ScheduledJobStatus.
func (x *ScheduledJobStatus) DeepCopy() *ScheduledJobStatus {
	if x == nil {
		return nil
	}
	out := new(ScheduledJobStatus)
	x.DeepCopyInto(out)
	return out
}
