// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1beta1

import (
	api "k8s.io/kubernetes/pkg/api"
	authorization_k8s_io "k8s.io/kubernetes/pkg/apis/authorization.k8s.io"
	conversion "k8s.io/kubernetes/pkg/conversion"
	reflect "reflect"
)

func init() {
	if err := api.Scheme.AddGeneratedConversionFuncs(
		Convert_v1beta1_LocalSubjectAccessReview_To_authorizationk8sio_LocalSubjectAccessReview,
		Convert_authorizationk8sio_LocalSubjectAccessReview_To_v1beta1_LocalSubjectAccessReview,
		Convert_v1beta1_NonResourceAttributes_To_authorizationk8sio_NonResourceAttributes,
		Convert_authorizationk8sio_NonResourceAttributes_To_v1beta1_NonResourceAttributes,
		Convert_v1beta1_ResourceAttributes_To_authorizationk8sio_ResourceAttributes,
		Convert_authorizationk8sio_ResourceAttributes_To_v1beta1_ResourceAttributes,
		Convert_v1beta1_SelfSubjectAccessReview_To_authorizationk8sio_SelfSubjectAccessReview,
		Convert_authorizationk8sio_SelfSubjectAccessReview_To_v1beta1_SelfSubjectAccessReview,
		Convert_v1beta1_SelfSubjectAccessReviewSpec_To_authorizationk8sio_SelfSubjectAccessReviewSpec,
		Convert_authorizationk8sio_SelfSubjectAccessReviewSpec_To_v1beta1_SelfSubjectAccessReviewSpec,
		Convert_v1beta1_SubjectAccessReview_To_authorizationk8sio_SubjectAccessReview,
		Convert_authorizationk8sio_SubjectAccessReview_To_v1beta1_SubjectAccessReview,
		Convert_v1beta1_SubjectAccessReviewSpec_To_authorizationk8sio_SubjectAccessReviewSpec,
		Convert_authorizationk8sio_SubjectAccessReviewSpec_To_v1beta1_SubjectAccessReviewSpec,
		Convert_v1beta1_SubjectAccessReviewStatus_To_authorizationk8sio_SubjectAccessReviewStatus,
		Convert_authorizationk8sio_SubjectAccessReviewStatus_To_v1beta1_SubjectAccessReviewStatus,
	); err != nil {
		// if one of the conversion functions is malformed, detect it immediately.
		panic(err)
	}
}

func autoConvert_v1beta1_LocalSubjectAccessReview_To_authorizationk8sio_LocalSubjectAccessReview(in *LocalSubjectAccessReview, out *authorization_k8s_io.LocalSubjectAccessReview, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*LocalSubjectAccessReview))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = new(authorization_k8s_io.SubjectAccessReviewSpec)
		if err := Convert_v1beta1_SubjectAccessReviewSpec_To_authorizationk8sio_SubjectAccessReviewSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Spec = nil
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(authorization_k8s_io.SubjectAccessReviewStatus)
		if err := Convert_v1beta1_SubjectAccessReviewStatus_To_authorizationk8sio_SubjectAccessReviewStatus(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Status = nil
	}
	return nil
}

func Convert_v1beta1_LocalSubjectAccessReview_To_authorizationk8sio_LocalSubjectAccessReview(in *LocalSubjectAccessReview, out *authorization_k8s_io.LocalSubjectAccessReview, s conversion.Scope) error {
	return autoConvert_v1beta1_LocalSubjectAccessReview_To_authorizationk8sio_LocalSubjectAccessReview(in, out, s)
}

func autoConvert_authorizationk8sio_LocalSubjectAccessReview_To_v1beta1_LocalSubjectAccessReview(in *authorization_k8s_io.LocalSubjectAccessReview, out *LocalSubjectAccessReview, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*authorization_k8s_io.LocalSubjectAccessReview))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = new(SubjectAccessReviewSpec)
		if err := Convert_authorizationk8sio_SubjectAccessReviewSpec_To_v1beta1_SubjectAccessReviewSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Spec = nil
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(SubjectAccessReviewStatus)
		if err := Convert_authorizationk8sio_SubjectAccessReviewStatus_To_v1beta1_SubjectAccessReviewStatus(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Status = nil
	}
	return nil
}

func Convert_authorizationk8sio_LocalSubjectAccessReview_To_v1beta1_LocalSubjectAccessReview(in *authorization_k8s_io.LocalSubjectAccessReview, out *LocalSubjectAccessReview, s conversion.Scope) error {
	return autoConvert_authorizationk8sio_LocalSubjectAccessReview_To_v1beta1_LocalSubjectAccessReview(in, out, s)
}

func autoConvert_v1beta1_NonResourceAttributes_To_authorizationk8sio_NonResourceAttributes(in *NonResourceAttributes, out *authorization_k8s_io.NonResourceAttributes, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*NonResourceAttributes))(in)
	}
	out.Path = in.Path
	out.Verb = in.Verb
	return nil
}

func Convert_v1beta1_NonResourceAttributes_To_authorizationk8sio_NonResourceAttributes(in *NonResourceAttributes, out *authorization_k8s_io.NonResourceAttributes, s conversion.Scope) error {
	return autoConvert_v1beta1_NonResourceAttributes_To_authorizationk8sio_NonResourceAttributes(in, out, s)
}

func autoConvert_authorizationk8sio_NonResourceAttributes_To_v1beta1_NonResourceAttributes(in *authorization_k8s_io.NonResourceAttributes, out *NonResourceAttributes, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*authorization_k8s_io.NonResourceAttributes))(in)
	}
	out.Path = in.Path
	out.Verb = in.Verb
	return nil
}

func Convert_authorizationk8sio_NonResourceAttributes_To_v1beta1_NonResourceAttributes(in *authorization_k8s_io.NonResourceAttributes, out *NonResourceAttributes, s conversion.Scope) error {
	return autoConvert_authorizationk8sio_NonResourceAttributes_To_v1beta1_NonResourceAttributes(in, out, s)
}

func autoConvert_v1beta1_ResourceAttributes_To_authorizationk8sio_ResourceAttributes(in *ResourceAttributes, out *authorization_k8s_io.ResourceAttributes, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*ResourceAttributes))(in)
	}
	out.Namespace = in.Namespace
	out.Verb = in.Verb
	out.Group = in.Group
	out.Version = in.Version
	out.Resource = in.Resource
	out.Subresource = in.Subresource
	out.Name = in.Name
	return nil
}

func Convert_v1beta1_ResourceAttributes_To_authorizationk8sio_ResourceAttributes(in *ResourceAttributes, out *authorization_k8s_io.ResourceAttributes, s conversion.Scope) error {
	return autoConvert_v1beta1_ResourceAttributes_To_authorizationk8sio_ResourceAttributes(in, out, s)
}

func autoConvert_authorizationk8sio_ResourceAttributes_To_v1beta1_ResourceAttributes(in *authorization_k8s_io.ResourceAttributes, out *ResourceAttributes, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*authorization_k8s_io.ResourceAttributes))(in)
	}
	out.Namespace = in.Namespace
	out.Verb = in.Verb
	out.Group = in.Group
	out.Version = in.Version
	out.Resource = in.Resource
	out.Subresource = in.Subresource
	out.Name = in.Name
	return nil
}

func Convert_authorizationk8sio_ResourceAttributes_To_v1beta1_ResourceAttributes(in *authorization_k8s_io.ResourceAttributes, out *ResourceAttributes, s conversion.Scope) error {
	return autoConvert_authorizationk8sio_ResourceAttributes_To_v1beta1_ResourceAttributes(in, out, s)
}

func autoConvert_v1beta1_SelfSubjectAccessReview_To_authorizationk8sio_SelfSubjectAccessReview(in *SelfSubjectAccessReview, out *authorization_k8s_io.SelfSubjectAccessReview, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*SelfSubjectAccessReview))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = new(authorization_k8s_io.SelfSubjectAccessReviewSpec)
		if err := Convert_v1beta1_SelfSubjectAccessReviewSpec_To_authorizationk8sio_SelfSubjectAccessReviewSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Spec = nil
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(authorization_k8s_io.SubjectAccessReviewStatus)
		if err := Convert_v1beta1_SubjectAccessReviewStatus_To_authorizationk8sio_SubjectAccessReviewStatus(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Status = nil
	}
	return nil
}

func Convert_v1beta1_SelfSubjectAccessReview_To_authorizationk8sio_SelfSubjectAccessReview(in *SelfSubjectAccessReview, out *authorization_k8s_io.SelfSubjectAccessReview, s conversion.Scope) error {
	return autoConvert_v1beta1_SelfSubjectAccessReview_To_authorizationk8sio_SelfSubjectAccessReview(in, out, s)
}

func autoConvert_authorizationk8sio_SelfSubjectAccessReview_To_v1beta1_SelfSubjectAccessReview(in *authorization_k8s_io.SelfSubjectAccessReview, out *SelfSubjectAccessReview, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*authorization_k8s_io.SelfSubjectAccessReview))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = new(SelfSubjectAccessReviewSpec)
		if err := Convert_authorizationk8sio_SelfSubjectAccessReviewSpec_To_v1beta1_SelfSubjectAccessReviewSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Spec = nil
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(SubjectAccessReviewStatus)
		if err := Convert_authorizationk8sio_SubjectAccessReviewStatus_To_v1beta1_SubjectAccessReviewStatus(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Status = nil
	}
	return nil
}

func Convert_authorizationk8sio_SelfSubjectAccessReview_To_v1beta1_SelfSubjectAccessReview(in *authorization_k8s_io.SelfSubjectAccessReview, out *SelfSubjectAccessReview, s conversion.Scope) error {
	return autoConvert_authorizationk8sio_SelfSubjectAccessReview_To_v1beta1_SelfSubjectAccessReview(in, out, s)
}

func autoConvert_v1beta1_SelfSubjectAccessReviewSpec_To_authorizationk8sio_SelfSubjectAccessReviewSpec(in *SelfSubjectAccessReviewSpec, out *authorization_k8s_io.SelfSubjectAccessReviewSpec, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*SelfSubjectAccessReviewSpec))(in)
	}
	if in.ResourceAttributes != nil {
		in, out := &in.ResourceAttributes, &out.ResourceAttributes
		*out = new(authorization_k8s_io.ResourceAttributes)
		if err := Convert_v1beta1_ResourceAttributes_To_authorizationk8sio_ResourceAttributes(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ResourceAttributes = nil
	}
	if in.NonResourceAttributes != nil {
		in, out := &in.NonResourceAttributes, &out.NonResourceAttributes
		*out = new(authorization_k8s_io.NonResourceAttributes)
		if err := Convert_v1beta1_NonResourceAttributes_To_authorizationk8sio_NonResourceAttributes(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.NonResourceAttributes = nil
	}
	return nil
}

func Convert_v1beta1_SelfSubjectAccessReviewSpec_To_authorizationk8sio_SelfSubjectAccessReviewSpec(in *SelfSubjectAccessReviewSpec, out *authorization_k8s_io.SelfSubjectAccessReviewSpec, s conversion.Scope) error {
	return autoConvert_v1beta1_SelfSubjectAccessReviewSpec_To_authorizationk8sio_SelfSubjectAccessReviewSpec(in, out, s)
}

func autoConvert_authorizationk8sio_SelfSubjectAccessReviewSpec_To_v1beta1_SelfSubjectAccessReviewSpec(in *authorization_k8s_io.SelfSubjectAccessReviewSpec, out *SelfSubjectAccessReviewSpec, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*authorization_k8s_io.SelfSubjectAccessReviewSpec))(in)
	}
	if in.ResourceAttributes != nil {
		in, out := &in.ResourceAttributes, &out.ResourceAttributes
		*out = new(ResourceAttributes)
		if err := Convert_authorizationk8sio_ResourceAttributes_To_v1beta1_ResourceAttributes(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ResourceAttributes = nil
	}
	if in.NonResourceAttributes != nil {
		in, out := &in.NonResourceAttributes, &out.NonResourceAttributes
		*out = new(NonResourceAttributes)
		if err := Convert_authorizationk8sio_NonResourceAttributes_To_v1beta1_NonResourceAttributes(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.NonResourceAttributes = nil
	}
	return nil
}

func Convert_authorizationk8sio_SelfSubjectAccessReviewSpec_To_v1beta1_SelfSubjectAccessReviewSpec(in *authorization_k8s_io.SelfSubjectAccessReviewSpec, out *SelfSubjectAccessReviewSpec, s conversion.Scope) error {
	return autoConvert_authorizationk8sio_SelfSubjectAccessReviewSpec_To_v1beta1_SelfSubjectAccessReviewSpec(in, out, s)
}

func autoConvert_v1beta1_SubjectAccessReview_To_authorizationk8sio_SubjectAccessReview(in *SubjectAccessReview, out *authorization_k8s_io.SubjectAccessReview, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*SubjectAccessReview))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = new(authorization_k8s_io.SubjectAccessReviewSpec)
		if err := Convert_v1beta1_SubjectAccessReviewSpec_To_authorizationk8sio_SubjectAccessReviewSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Spec = nil
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(authorization_k8s_io.SubjectAccessReviewStatus)
		if err := Convert_v1beta1_SubjectAccessReviewStatus_To_authorizationk8sio_SubjectAccessReviewStatus(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Status = nil
	}
	return nil
}

func Convert_v1beta1_SubjectAccessReview_To_authorizationk8sio_SubjectAccessReview(in *SubjectAccessReview, out *authorization_k8s_io.SubjectAccessReview, s conversion.Scope) error {
	return autoConvert_v1beta1_SubjectAccessReview_To_authorizationk8sio_SubjectAccessReview(in, out, s)
}

func autoConvert_authorizationk8sio_SubjectAccessReview_To_v1beta1_SubjectAccessReview(in *authorization_k8s_io.SubjectAccessReview, out *SubjectAccessReview, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*authorization_k8s_io.SubjectAccessReview))(in)
	}
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if in.Spec != nil {
		in, out := &in.Spec, &out.Spec
		*out = new(SubjectAccessReviewSpec)
		if err := Convert_authorizationk8sio_SubjectAccessReviewSpec_To_v1beta1_SubjectAccessReviewSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Spec = nil
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(SubjectAccessReviewStatus)
		if err := Convert_authorizationk8sio_SubjectAccessReviewStatus_To_v1beta1_SubjectAccessReviewStatus(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Status = nil
	}
	return nil
}

func Convert_authorizationk8sio_SubjectAccessReview_To_v1beta1_SubjectAccessReview(in *authorization_k8s_io.SubjectAccessReview, out *SubjectAccessReview, s conversion.Scope) error {
	return autoConvert_authorizationk8sio_SubjectAccessReview_To_v1beta1_SubjectAccessReview(in, out, s)
}

func autoConvert_v1beta1_SubjectAccessReviewSpec_To_authorizationk8sio_SubjectAccessReviewSpec(in *SubjectAccessReviewSpec, out *authorization_k8s_io.SubjectAccessReviewSpec, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*SubjectAccessReviewSpec))(in)
	}
	if in.ResourceAttributes != nil {
		in, out := &in.ResourceAttributes, &out.ResourceAttributes
		*out = new(authorization_k8s_io.ResourceAttributes)
		if err := Convert_v1beta1_ResourceAttributes_To_authorizationk8sio_ResourceAttributes(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ResourceAttributes = nil
	}
	if in.NonResourceAttributes != nil {
		in, out := &in.NonResourceAttributes, &out.NonResourceAttributes
		*out = new(authorization_k8s_io.NonResourceAttributes)
		if err := Convert_v1beta1_NonResourceAttributes_To_authorizationk8sio_NonResourceAttributes(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.NonResourceAttributes = nil
	}
	out.User = in.User
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]string, len(*in))
		copy(*out, *in)
	} else {
		out.Groups = nil
	}
	if in.Extra != nil {
		in, out := &in.Extra, &out.Extra
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			newVal := new([]string)
			// TODO: Inefficient conversion - can we improve it?
			if err := s.Convert(&val, newVal, 0); err != nil {
				return err
			}
			(*out)[key] = *newVal
		}
	} else {
		out.Extra = nil
	}
	return nil
}

func Convert_v1beta1_SubjectAccessReviewSpec_To_authorizationk8sio_SubjectAccessReviewSpec(in *SubjectAccessReviewSpec, out *authorization_k8s_io.SubjectAccessReviewSpec, s conversion.Scope) error {
	return autoConvert_v1beta1_SubjectAccessReviewSpec_To_authorizationk8sio_SubjectAccessReviewSpec(in, out, s)
}

func autoConvert_authorizationk8sio_SubjectAccessReviewSpec_To_v1beta1_SubjectAccessReviewSpec(in *authorization_k8s_io.SubjectAccessReviewSpec, out *SubjectAccessReviewSpec, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*authorization_k8s_io.SubjectAccessReviewSpec))(in)
	}
	if in.ResourceAttributes != nil {
		in, out := &in.ResourceAttributes, &out.ResourceAttributes
		*out = new(ResourceAttributes)
		if err := Convert_authorizationk8sio_ResourceAttributes_To_v1beta1_ResourceAttributes(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.ResourceAttributes = nil
	}
	if in.NonResourceAttributes != nil {
		in, out := &in.NonResourceAttributes, &out.NonResourceAttributes
		*out = new(NonResourceAttributes)
		if err := Convert_authorizationk8sio_NonResourceAttributes_To_v1beta1_NonResourceAttributes(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.NonResourceAttributes = nil
	}
	out.User = in.User
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = make([]string, len(*in))
		copy(*out, *in)
	} else {
		out.Groups = nil
	}
	if in.Extra != nil {
		in, out := &in.Extra, &out.Extra
		*out = make(map[string][]string, len(*in))
		for key, val := range *in {
			newVal := new([]string)
			// TODO: Inefficient conversion - can we improve it?
			if err := s.Convert(&val, newVal, 0); err != nil {
				return err
			}
			(*out)[key] = *newVal
		}
	} else {
		out.Extra = nil
	}
	return nil
}

func Convert_authorizationk8sio_SubjectAccessReviewSpec_To_v1beta1_SubjectAccessReviewSpec(in *authorization_k8s_io.SubjectAccessReviewSpec, out *SubjectAccessReviewSpec, s conversion.Scope) error {
	return autoConvert_authorizationk8sio_SubjectAccessReviewSpec_To_v1beta1_SubjectAccessReviewSpec(in, out, s)
}

func autoConvert_v1beta1_SubjectAccessReviewStatus_To_authorizationk8sio_SubjectAccessReviewStatus(in *SubjectAccessReviewStatus, out *authorization_k8s_io.SubjectAccessReviewStatus, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*SubjectAccessReviewStatus))(in)
	}
	out.Allowed = in.Allowed
	out.Reason = in.Reason
	return nil
}

func Convert_v1beta1_SubjectAccessReviewStatus_To_authorizationk8sio_SubjectAccessReviewStatus(in *SubjectAccessReviewStatus, out *authorization_k8s_io.SubjectAccessReviewStatus, s conversion.Scope) error {
	return autoConvert_v1beta1_SubjectAccessReviewStatus_To_authorizationk8sio_SubjectAccessReviewStatus(in, out, s)
}

func autoConvert_authorizationk8sio_SubjectAccessReviewStatus_To_v1beta1_SubjectAccessReviewStatus(in *authorization_k8s_io.SubjectAccessReviewStatus, out *SubjectAccessReviewStatus, s conversion.Scope) error {
	if defaulting, found := s.DefaultingInterface(reflect.TypeOf(*in)); found {
		defaulting.(func(*authorization_k8s_io.SubjectAccessReviewStatus))(in)
	}
	out.Allowed = in.Allowed
	out.Reason = in.Reason
	return nil
}

func Convert_authorizationk8sio_SubjectAccessReviewStatus_To_v1beta1_SubjectAccessReviewStatus(in *authorization_k8s_io.SubjectAccessReviewStatus, out *SubjectAccessReviewStatus, s conversion.Scope) error {
	return autoConvert_authorizationk8sio_SubjectAccessReviewStatus_To_v1beta1_SubjectAccessReviewStatus(in, out, s)
}
