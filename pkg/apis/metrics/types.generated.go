/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package metrics

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg4_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	pkg3_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_resource.Quantity
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg4_types.UID
		var v3 pkg3_inf.Dec
		var v4 time.Time
		_, _, _, _, _ = v0, v1, v2, v3, v4
	}
}

func (x *MetricsMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.SelfLink != ""
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *MetricsMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *MetricsMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		switch yys8 {
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	if !yyhl8 {
		r.ReadEnd()
	}
}

func (x *MetricsMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadEnd()
}

func (x *RawNodeMetrics) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [6]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[0] = x.Kind != ""
			yyq13[1] = x.APIVersion != ""
			yyq13[4] = len(x.Total) != 0
			yyq13[5] = len(x.SystemContainers) != 0
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(6)
			} else {
				var yynn13 int = 2
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
			}
			if yyr13 || yy2arr13 {
				if yyq13[0] {
					yym15 := z.EncBinary()
					_ = yym15
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq13[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr13 || yy2arr13 {
				if yyq13[1] {
					yym18 := z.EncBinary()
					_ = yym18
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq13[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr13 || yy2arr13 {
				yy21 := &x.ListMeta
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else if z.HasExtensions() && z.EncExt(yy21) {
				} else {
					z.EncFallback(yy21)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy23 := &x.ListMeta
				yym24 := z.EncBinary()
				_ = yym24
				if false {
				} else if z.HasExtensions() && z.EncExt(yy23) {
				} else {
					z.EncFallback(yy23)
				}
			}
			if yyr13 || yy2arr13 {
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
				yym27 := z.EncBinary()
				_ = yym27
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
				}
			}
			if yyr13 || yy2arr13 {
				if yyq13[4] {
					if x.Total == nil {
						r.EncodeNil()
					} else {
						yym29 := z.EncBinary()
						_ = yym29
						if false {
						} else {
							h.encSliceAggregateSample(([]AggregateSample)(x.Total), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[4] {
					r.EncodeString(codecSelferC_UTF81234, string("total"))
					if x.Total == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else {
							h.encSliceAggregateSample(([]AggregateSample)(x.Total), e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				if yyq13[5] {
					if x.SystemContainers == nil {
						r.EncodeNil()
					} else {
						yym32 := z.EncBinary()
						_ = yym32
						if false {
						} else {
							h.encSliceRawContainerMetrics(([]RawContainerMetrics)(x.SystemContainers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[5] {
					r.EncodeString(codecSelferC_UTF81234, string("systemContainers"))
					if x.SystemContainers == nil {
						r.EncodeNil()
					} else {
						yym33 := z.EncBinary()
						_ = yym33
						if false {
						} else {
							h.encSliceRawContainerMetrics(([]RawContainerMetrics)(x.SystemContainers), e)
						}
					}
				}
			}
			if yysep13 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RawNodeMetrics) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym34 := z.DecBinary()
	_ = yym34
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl35 := r.ReadMapStart()
			if yyl35 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl35, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl35 := r.ReadArrayStart()
			if yyl35 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl35, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RawNodeMetrics) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys36Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys36Slc
	var yyhl36 bool = l >= 0
	for yyj36 := 0; ; yyj36++ {
		if yyhl36 {
			if yyj36 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys36Slc = r.DecodeBytes(yys36Slc, true, true)
		yys36 := string(yys36Slc)
		switch yys36 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv39 := &x.ListMeta
				yym40 := z.DecBinary()
				_ = yym40
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv39) {
				} else {
					z.DecFallback(yyv39, false)
				}
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "total":
			if r.TryDecodeAsNil() {
				x.Total = nil
			} else {
				yyv42 := &x.Total
				yym43 := z.DecBinary()
				_ = yym43
				if false {
				} else {
					h.decSliceAggregateSample((*[]AggregateSample)(yyv42), d)
				}
			}
		case "systemContainers":
			if r.TryDecodeAsNil() {
				x.SystemContainers = nil
			} else {
				yyv44 := &x.SystemContainers
				yym45 := z.DecBinary()
				_ = yym45
				if false {
				} else {
					h.decSliceRawContainerMetrics((*[]RawContainerMetrics)(yyv44), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys36)
		} // end switch yys36
	} // end for yyj36
	if !yyhl36 {
		r.ReadEnd()
	}
}

func (x *RawNodeMetrics) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj46 int
	var yyb46 bool
	var yyhl46 bool = l >= 0
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv49 := &x.ListMeta
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv49) {
		} else {
			z.DecFallback(yyv49, false)
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Total = nil
	} else {
		yyv52 := &x.Total
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			h.decSliceAggregateSample((*[]AggregateSample)(yyv52), d)
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SystemContainers = nil
	} else {
		yyv54 := &x.SystemContainers
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else {
			h.decSliceRawContainerMetrics((*[]RawContainerMetrics)(yyv54), d)
		}
	}
	for {
		yyj46++
		if yyhl46 {
			yyb46 = yyj46 > l
		} else {
			yyb46 = r.CheckBreak()
		}
		if yyb46 {
			break
		}
		z.DecStructFieldNotFound(yyj46-1, "")
	}
	r.ReadEnd()
}

func (x *RawNodeMetricsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym56 := z.EncBinary()
		_ = yym56
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep57 := !z.EncBinary()
			yy2arr57 := z.EncBasicHandle().StructToArray
			var yyq57 [4]bool
			_, _, _ = yysep57, yyq57, yy2arr57
			const yyr57 bool = false
			yyq57[0] = x.Kind != ""
			yyq57[1] = x.APIVersion != ""
			yyq57[2] = true
			if yyr57 || yy2arr57 {
				r.EncodeArrayStart(4)
			} else {
				var yynn57 int = 1
				for _, b := range yyq57 {
					if b {
						yynn57++
					}
				}
				r.EncodeMapStart(yynn57)
			}
			if yyr57 || yy2arr57 {
				if yyq57[0] {
					yym59 := z.EncBinary()
					_ = yym59
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq57[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym60 := z.EncBinary()
					_ = yym60
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr57 || yy2arr57 {
				if yyq57[1] {
					yym62 := z.EncBinary()
					_ = yym62
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq57[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym63 := z.EncBinary()
					_ = yym63
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr57 || yy2arr57 {
				if yyq57[2] {
					yy65 := &x.ListMeta
					yym66 := z.EncBinary()
					_ = yym66
					if false {
					} else if z.HasExtensions() && z.EncExt(yy65) {
					} else {
						z.EncFallback(yy65)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq57[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy67 := &x.ListMeta
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else if z.HasExtensions() && z.EncExt(yy67) {
					} else {
						z.EncFallback(yy67)
					}
				}
			}
			if yyr57 || yy2arr57 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym70 := z.EncBinary()
					_ = yym70
					if false {
					} else {
						h.encSliceRawNodeMetrics(([]RawNodeMetrics)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						h.encSliceRawNodeMetrics(([]RawNodeMetrics)(x.Items), e)
					}
				}
			}
			if yysep57 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RawNodeMetricsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym72 := z.DecBinary()
	_ = yym72
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl73 := r.ReadMapStart()
			if yyl73 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl73, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl73 := r.ReadArrayStart()
			if yyl73 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl73, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RawNodeMetricsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys74Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys74Slc
	var yyhl74 bool = l >= 0
	for yyj74 := 0; ; yyj74++ {
		if yyhl74 {
			if yyj74 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys74Slc = r.DecodeBytes(yys74Slc, true, true)
		yys74 := string(yys74Slc)
		switch yys74 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv77 := &x.ListMeta
				yym78 := z.DecBinary()
				_ = yym78
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv77) {
				} else {
					z.DecFallback(yyv77, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv79 := &x.Items
				yym80 := z.DecBinary()
				_ = yym80
				if false {
				} else {
					h.decSliceRawNodeMetrics((*[]RawNodeMetrics)(yyv79), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys74)
		} // end switch yys74
	} // end for yyj74
	if !yyhl74 {
		r.ReadEnd()
	}
}

func (x *RawNodeMetricsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj81 int
	var yyb81 bool
	var yyhl81 bool = l >= 0
	yyj81++
	if yyhl81 {
		yyb81 = yyj81 > l
	} else {
		yyb81 = r.CheckBreak()
	}
	if yyb81 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj81++
	if yyhl81 {
		yyb81 = yyj81 > l
	} else {
		yyb81 = r.CheckBreak()
	}
	if yyb81 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj81++
	if yyhl81 {
		yyb81 = yyj81 > l
	} else {
		yyb81 = r.CheckBreak()
	}
	if yyb81 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv84 := &x.ListMeta
		yym85 := z.DecBinary()
		_ = yym85
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv84) {
		} else {
			z.DecFallback(yyv84, false)
		}
	}
	yyj81++
	if yyhl81 {
		yyb81 = yyj81 > l
	} else {
		yyb81 = r.CheckBreak()
	}
	if yyb81 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv86 := &x.Items
		yym87 := z.DecBinary()
		_ = yym87
		if false {
		} else {
			h.decSliceRawNodeMetrics((*[]RawNodeMetrics)(yyv86), d)
		}
	}
	for {
		yyj81++
		if yyhl81 {
			yyb81 = yyj81 > l
		} else {
			yyb81 = r.CheckBreak()
		}
		if yyb81 {
			break
		}
		z.DecStructFieldNotFound(yyj81-1, "")
	}
	r.ReadEnd()
}

func (x *RawPodMetrics) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym88 := z.EncBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep89 := !z.EncBinary()
			yy2arr89 := z.EncBasicHandle().StructToArray
			var yyq89 [6]bool
			_, _, _ = yysep89, yyq89, yy2arr89
			const yyr89 bool = false
			yyq89[0] = x.Kind != ""
			yyq89[1] = x.APIVersion != ""
			if yyr89 || yy2arr89 {
				r.EncodeArrayStart(6)
			} else {
				var yynn89 int = 4
				for _, b := range yyq89 {
					if b {
						yynn89++
					}
				}
				r.EncodeMapStart(yynn89)
			}
			if yyr89 || yy2arr89 {
				if yyq89[0] {
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq89[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr89 || yy2arr89 {
				if yyq89[1] {
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq89[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym95 := z.EncBinary()
					_ = yym95
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr89 || yy2arr89 {
				yy97 := &x.ListMeta
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else if z.HasExtensions() && z.EncExt(yy97) {
				} else {
					z.EncFallback(yy97)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				yy99 := &x.ListMeta
				yym100 := z.EncBinary()
				_ = yym100
				if false {
				} else if z.HasExtensions() && z.EncExt(yy99) {
				} else {
					z.EncFallback(yy99)
				}
			}
			if yyr89 || yy2arr89 {
				yy102 := &x.PodRef
				yy102.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("podRef"))
				yy103 := &x.PodRef
				yy103.CodecEncodeSelf(e)
			}
			if yyr89 || yy2arr89 {
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym105 := z.EncBinary()
					_ = yym105
					if false {
					} else {
						h.encSliceRawContainerMetrics(([]RawContainerMetrics)(x.Containers), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym106 := z.EncBinary()
					_ = yym106
					if false {
					} else {
						h.encSliceRawContainerMetrics(([]RawContainerMetrics)(x.Containers), e)
					}
				}
			}
			if yyr89 || yy2arr89 {
				if x.Samples == nil {
					r.EncodeNil()
				} else {
					yym108 := z.EncBinary()
					_ = yym108
					if false {
					} else {
						h.encSlicePodSample(([]PodSample)(x.Samples), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("samples"))
				if x.Samples == nil {
					r.EncodeNil()
				} else {
					yym109 := z.EncBinary()
					_ = yym109
					if false {
					} else {
						h.encSlicePodSample(([]PodSample)(x.Samples), e)
					}
				}
			}
			if yysep89 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RawPodMetrics) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym110 := z.DecBinary()
	_ = yym110
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl111 := r.ReadMapStart()
			if yyl111 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl111, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl111 := r.ReadArrayStart()
			if yyl111 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl111, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RawPodMetrics) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys112Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys112Slc
	var yyhl112 bool = l >= 0
	for yyj112 := 0; ; yyj112++ {
		if yyhl112 {
			if yyj112 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys112Slc = r.DecodeBytes(yys112Slc, true, true)
		yys112 := string(yys112Slc)
		switch yys112 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv115 := &x.ListMeta
				yym116 := z.DecBinary()
				_ = yym116
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv115) {
				} else {
					z.DecFallback(yyv115, false)
				}
			}
		case "podRef":
			if r.TryDecodeAsNil() {
				x.PodRef = NonLocalObjectReference{}
			} else {
				yyv117 := &x.PodRef
				yyv117.CodecDecodeSelf(d)
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv118 := &x.Containers
				yym119 := z.DecBinary()
				_ = yym119
				if false {
				} else {
					h.decSliceRawContainerMetrics((*[]RawContainerMetrics)(yyv118), d)
				}
			}
		case "samples":
			if r.TryDecodeAsNil() {
				x.Samples = nil
			} else {
				yyv120 := &x.Samples
				yym121 := z.DecBinary()
				_ = yym121
				if false {
				} else {
					h.decSlicePodSample((*[]PodSample)(yyv120), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys112)
		} // end switch yys112
	} // end for yyj112
	if !yyhl112 {
		r.ReadEnd()
	}
}

func (x *RawPodMetrics) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv125 := &x.ListMeta
		yym126 := z.DecBinary()
		_ = yym126
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv125) {
		} else {
			z.DecFallback(yyv125, false)
		}
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.PodRef = NonLocalObjectReference{}
	} else {
		yyv127 := &x.PodRef
		yyv127.CodecDecodeSelf(d)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv128 := &x.Containers
		yym129 := z.DecBinary()
		_ = yym129
		if false {
		} else {
			h.decSliceRawContainerMetrics((*[]RawContainerMetrics)(yyv128), d)
		}
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Samples = nil
	} else {
		yyv130 := &x.Samples
		yym131 := z.DecBinary()
		_ = yym131
		if false {
		} else {
			h.decSlicePodSample((*[]PodSample)(yyv130), d)
		}
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	r.ReadEnd()
}

func (x *RawPodMetricsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym132 := z.EncBinary()
		_ = yym132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep133 := !z.EncBinary()
			yy2arr133 := z.EncBasicHandle().StructToArray
			var yyq133 [4]bool
			_, _, _ = yysep133, yyq133, yy2arr133
			const yyr133 bool = false
			yyq133[0] = x.Kind != ""
			yyq133[1] = x.APIVersion != ""
			yyq133[2] = true
			if yyr133 || yy2arr133 {
				r.EncodeArrayStart(4)
			} else {
				var yynn133 int = 1
				for _, b := range yyq133 {
					if b {
						yynn133++
					}
				}
				r.EncodeMapStart(yynn133)
			}
			if yyr133 || yy2arr133 {
				if yyq133[0] {
					yym135 := z.EncBinary()
					_ = yym135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq133[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym136 := z.EncBinary()
					_ = yym136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr133 || yy2arr133 {
				if yyq133[1] {
					yym138 := z.EncBinary()
					_ = yym138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq133[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym139 := z.EncBinary()
					_ = yym139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr133 || yy2arr133 {
				if yyq133[2] {
					yy141 := &x.ListMeta
					yym142 := z.EncBinary()
					_ = yym142
					if false {
					} else if z.HasExtensions() && z.EncExt(yy141) {
					} else {
						z.EncFallback(yy141)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq133[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy143 := &x.ListMeta
					yym144 := z.EncBinary()
					_ = yym144
					if false {
					} else if z.HasExtensions() && z.EncExt(yy143) {
					} else {
						z.EncFallback(yy143)
					}
				}
			}
			if yyr133 || yy2arr133 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						h.encSliceRawPodMetrics(([]RawPodMetrics)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						h.encSliceRawPodMetrics(([]RawPodMetrics)(x.Items), e)
					}
				}
			}
			if yysep133 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RawPodMetricsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym148 := z.DecBinary()
	_ = yym148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl149 := r.ReadMapStart()
			if yyl149 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl149, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl149 := r.ReadArrayStart()
			if yyl149 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RawPodMetricsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys150Slc
	var yyhl150 bool = l >= 0
	for yyj150 := 0; ; yyj150++ {
		if yyhl150 {
			if yyj150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys150Slc = r.DecodeBytes(yys150Slc, true, true)
		yys150 := string(yys150Slc)
		switch yys150 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv153 := &x.ListMeta
				yym154 := z.DecBinary()
				_ = yym154
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv153) {
				} else {
					z.DecFallback(yyv153, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv155 := &x.Items
				yym156 := z.DecBinary()
				_ = yym156
				if false {
				} else {
					h.decSliceRawPodMetrics((*[]RawPodMetrics)(yyv155), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys150)
		} // end switch yys150
	} // end for yyj150
	if !yyhl150 {
		r.ReadEnd()
	}
}

func (x *RawPodMetricsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj157 int
	var yyb157 bool
	var yyhl157 bool = l >= 0
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv160 := &x.ListMeta
		yym161 := z.DecBinary()
		_ = yym161
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv160) {
		} else {
			z.DecFallback(yyv160, false)
		}
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv162 := &x.Items
		yym163 := z.DecBinary()
		_ = yym163
		if false {
		} else {
			h.decSliceRawPodMetrics((*[]RawPodMetrics)(yyv162), d)
		}
	}
	for {
		yyj157++
		if yyhl157 {
			yyb157 = yyj157 > l
		} else {
			yyb157 = r.CheckBreak()
		}
		if yyb157 {
			break
		}
		z.DecStructFieldNotFound(yyj157-1, "")
	}
	r.ReadEnd()
}

func (x *RawContainerMetrics) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym164 := z.EncBinary()
		_ = yym164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep165 := !z.EncBinary()
			yy2arr165 := z.EncBasicHandle().StructToArray
			var yyq165 [4]bool
			_, _, _ = yysep165, yyq165, yy2arr165
			const yyr165 bool = false
			yyq165[1] = len(x.Labels) != 0
			yyq165[3] = len(x.CustomMetrics) != 0
			if yyr165 || yy2arr165 {
				r.EncodeArrayStart(4)
			} else {
				var yynn165 int = 2
				for _, b := range yyq165 {
					if b {
						yynn165++
					}
				}
				r.EncodeMapStart(yynn165)
			}
			if yyr165 || yy2arr165 {
				yym167 := z.EncBinary()
				_ = yym167
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym168 := z.EncBinary()
				_ = yym168
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr165 || yy2arr165 {
				if yyq165[1] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym170 := z.EncBinary()
						_ = yym170
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq165[1] {
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym171 := z.EncBinary()
						_ = yym171
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr165 || yy2arr165 {
				if x.Samples == nil {
					r.EncodeNil()
				} else {
					yym173 := z.EncBinary()
					_ = yym173
					if false {
					} else {
						h.encSliceContainerSample(([]ContainerSample)(x.Samples), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("samples"))
				if x.Samples == nil {
					r.EncodeNil()
				} else {
					yym174 := z.EncBinary()
					_ = yym174
					if false {
					} else {
						h.encSliceContainerSample(([]ContainerSample)(x.Samples), e)
					}
				}
			}
			if yyr165 || yy2arr165 {
				if yyq165[3] {
					if x.CustomMetrics == nil {
						r.EncodeNil()
					} else {
						yym176 := z.EncBinary()
						_ = yym176
						if false {
						} else {
							h.encSliceCustomMetric(([]CustomMetric)(x.CustomMetrics), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq165[3] {
					r.EncodeString(codecSelferC_UTF81234, string("customMetrics"))
					if x.CustomMetrics == nil {
						r.EncodeNil()
					} else {
						yym177 := z.EncBinary()
						_ = yym177
						if false {
						} else {
							h.encSliceCustomMetric(([]CustomMetric)(x.CustomMetrics), e)
						}
					}
				}
			}
			if yysep165 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RawContainerMetrics) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym178 := z.DecBinary()
	_ = yym178
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl179 := r.ReadMapStart()
			if yyl179 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl179, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl179 := r.ReadArrayStart()
			if yyl179 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl179, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RawContainerMetrics) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys180Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys180Slc
	var yyhl180 bool = l >= 0
	for yyj180 := 0; ; yyj180++ {
		if yyhl180 {
			if yyj180 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys180Slc = r.DecodeBytes(yys180Slc, true, true)
		yys180 := string(yys180Slc)
		switch yys180 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv182 := &x.Labels
				yym183 := z.DecBinary()
				_ = yym183
				if false {
				} else {
					z.F.DecMapStringStringX(yyv182, false, d)
				}
			}
		case "samples":
			if r.TryDecodeAsNil() {
				x.Samples = nil
			} else {
				yyv184 := &x.Samples
				yym185 := z.DecBinary()
				_ = yym185
				if false {
				} else {
					h.decSliceContainerSample((*[]ContainerSample)(yyv184), d)
				}
			}
		case "customMetrics":
			if r.TryDecodeAsNil() {
				x.CustomMetrics = nil
			} else {
				yyv186 := &x.CustomMetrics
				yym187 := z.DecBinary()
				_ = yym187
				if false {
				} else {
					h.decSliceCustomMetric((*[]CustomMetric)(yyv186), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys180)
		} // end switch yys180
	} // end for yyj180
	if !yyhl180 {
		r.ReadEnd()
	}
}

func (x *RawContainerMetrics) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj188 int
	var yyb188 bool
	var yyhl188 bool = l >= 0
	yyj188++
	if yyhl188 {
		yyb188 = yyj188 > l
	} else {
		yyb188 = r.CheckBreak()
	}
	if yyb188 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj188++
	if yyhl188 {
		yyb188 = yyj188 > l
	} else {
		yyb188 = r.CheckBreak()
	}
	if yyb188 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv190 := &x.Labels
		yym191 := z.DecBinary()
		_ = yym191
		if false {
		} else {
			z.F.DecMapStringStringX(yyv190, false, d)
		}
	}
	yyj188++
	if yyhl188 {
		yyb188 = yyj188 > l
	} else {
		yyb188 = r.CheckBreak()
	}
	if yyb188 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Samples = nil
	} else {
		yyv192 := &x.Samples
		yym193 := z.DecBinary()
		_ = yym193
		if false {
		} else {
			h.decSliceContainerSample((*[]ContainerSample)(yyv192), d)
		}
	}
	yyj188++
	if yyhl188 {
		yyb188 = yyj188 > l
	} else {
		yyb188 = r.CheckBreak()
	}
	if yyb188 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CustomMetrics = nil
	} else {
		yyv194 := &x.CustomMetrics
		yym195 := z.DecBinary()
		_ = yym195
		if false {
		} else {
			h.decSliceCustomMetric((*[]CustomMetric)(yyv194), d)
		}
	}
	for {
		yyj188++
		if yyhl188 {
			yyb188 = yyj188 > l
		} else {
			yyb188 = r.CheckBreak()
		}
		if yyb188 {
			break
		}
		z.DecStructFieldNotFound(yyj188-1, "")
	}
	r.ReadEnd()
}

func (x *NonLocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym196 := z.EncBinary()
		_ = yym196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep197 := !z.EncBinary()
			yy2arr197 := z.EncBasicHandle().StructToArray
			var yyq197 [3]bool
			_, _, _ = yysep197, yyq197, yy2arr197
			const yyr197 bool = false
			yyq197[2] = x.UID != ""
			if yyr197 || yy2arr197 {
				r.EncodeArrayStart(3)
			} else {
				var yynn197 int = 2
				for _, b := range yyq197 {
					if b {
						yynn197++
					}
				}
				r.EncodeMapStart(yynn197)
			}
			if yyr197 || yy2arr197 {
				yym199 := z.EncBinary()
				_ = yym199
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym200 := z.EncBinary()
				_ = yym200
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr197 || yy2arr197 {
				yym202 := z.EncBinary()
				_ = yym202
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("namespace"))
				yym203 := z.EncBinary()
				_ = yym203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
				}
			}
			if yyr197 || yy2arr197 {
				if yyq197[2] {
					yym205 := z.EncBinary()
					_ = yym205
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq197[2] {
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					yym206 := z.EncBinary()
					_ = yym206
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yysep197 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NonLocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NonLocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		switch yys209 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg4_types.UID(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	if !yyhl209 {
		r.ReadEnd()
	}
}

func (x *NonLocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj213 int
	var yyb213 bool
	var yyhl213 bool = l >= 0
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg4_types.UID(r.DecodeString())
	}
	for {
		yyj213++
		if yyhl213 {
			yyb213 = yyj213 > l
		} else {
			yyb213 = r.CheckBreak()
		}
		if yyb213 {
			break
		}
		z.DecStructFieldNotFound(yyj213-1, "")
	}
	r.ReadEnd()
}

func (x *Sample) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym217 := z.EncBinary()
		_ = yym217
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep218 := !z.EncBinary()
			yy2arr218 := z.EncBasicHandle().StructToArray
			var yyq218 [1]bool
			_, _, _ = yysep218, yyq218, yy2arr218
			const yyr218 bool = false
			if yyr218 || yy2arr218 {
				r.EncodeArrayStart(1)
			} else {
				var yynn218 int = 1
				for _, b := range yyq218 {
					if b {
						yynn218++
					}
				}
				r.EncodeMapStart(yynn218)
			}
			if yyr218 || yy2arr218 {
				yy220 := &x.SampleTime
				yym221 := z.EncBinary()
				_ = yym221
				if false {
				} else if z.HasExtensions() && z.EncExt(yy220) {
				} else if yym221 {
					z.EncBinaryMarshal(yy220)
				} else if !yym221 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy220)
				} else {
					z.EncFallback(yy220)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("sampleTime"))
				yy222 := &x.SampleTime
				yym223 := z.EncBinary()
				_ = yym223
				if false {
				} else if z.HasExtensions() && z.EncExt(yy222) {
				} else if yym223 {
					z.EncBinaryMarshal(yy222)
				} else if !yym223 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy222)
				} else {
					z.EncFallback(yy222)
				}
			}
			if yysep218 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Sample) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym224 := z.DecBinary()
	_ = yym224
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl225 := r.ReadMapStart()
			if yyl225 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl225, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl225 := r.ReadArrayStart()
			if yyl225 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl225, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Sample) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys226Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys226Slc
	var yyhl226 bool = l >= 0
	for yyj226 := 0; ; yyj226++ {
		if yyhl226 {
			if yyj226 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys226Slc = r.DecodeBytes(yys226Slc, true, true)
		yys226 := string(yys226Slc)
		switch yys226 {
		case "sampleTime":
			if r.TryDecodeAsNil() {
				x.SampleTime = pkg1_unversioned.Time{}
			} else {
				yyv227 := &x.SampleTime
				yym228 := z.DecBinary()
				_ = yym228
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv227) {
				} else if yym228 {
					z.DecBinaryUnmarshal(yyv227)
				} else if !yym228 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv227)
				} else {
					z.DecFallback(yyv227, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys226)
		} // end switch yys226
	} // end for yyj226
	if !yyhl226 {
		r.ReadEnd()
	}
}

func (x *Sample) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj229 int
	var yyb229 bool
	var yyhl229 bool = l >= 0
	yyj229++
	if yyhl229 {
		yyb229 = yyj229 > l
	} else {
		yyb229 = r.CheckBreak()
	}
	if yyb229 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SampleTime = pkg1_unversioned.Time{}
	} else {
		yyv230 := &x.SampleTime
		yym231 := z.DecBinary()
		_ = yym231
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv230) {
		} else if yym231 {
			z.DecBinaryUnmarshal(yyv230)
		} else if !yym231 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv230)
		} else {
			z.DecFallback(yyv230, false)
		}
	}
	for {
		yyj229++
		if yyhl229 {
			yyb229 = yyj229 > l
		} else {
			yyb229 = r.CheckBreak()
		}
		if yyb229 {
			break
		}
		z.DecStructFieldNotFound(yyj229-1, "")
	}
	r.ReadEnd()
}

func (x *AggregateSample) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym232 := z.EncBinary()
		_ = yym232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep233 := !z.EncBinary()
			yy2arr233 := z.EncBasicHandle().StructToArray
			var yyq233 [5]bool
			_, _, _ = yysep233, yyq233, yy2arr233
			const yyr233 bool = false
			yyq233[1] = x.CPU != nil
			yyq233[2] = x.Memory != nil
			yyq233[3] = x.Network != nil
			yyq233[4] = len(x.Filesystem) != 0
			if yyr233 || yy2arr233 {
				r.EncodeArrayStart(5)
			} else {
				var yynn233 int = 1
				for _, b := range yyq233 {
					if b {
						yynn233++
					}
				}
				r.EncodeMapStart(yynn233)
			}
			if yyr233 || yy2arr233 {
				yy235 := &x.SampleTime
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else if z.HasExtensions() && z.EncExt(yy235) {
				} else if yym236 {
					z.EncBinaryMarshal(yy235)
				} else if !yym236 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy235)
				} else {
					z.EncFallback(yy235)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("sampleTime"))
				yy237 := &x.SampleTime
				yym238 := z.EncBinary()
				_ = yym238
				if false {
				} else if z.HasExtensions() && z.EncExt(yy237) {
				} else if yym238 {
					z.EncBinaryMarshal(yy237)
				} else if !yym238 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy237)
				} else {
					z.EncFallback(yy237)
				}
			}
			if yyr233 || yy2arr233 {
				if yyq233[1] {
					if x.CPU == nil {
						r.EncodeNil()
					} else {
						x.CPU.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[1] {
					r.EncodeString(codecSelferC_UTF81234, string("cpu"))
					if x.CPU == nil {
						r.EncodeNil()
					} else {
						x.CPU.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				if yyq233[2] {
					if x.Memory == nil {
						r.EncodeNil()
					} else {
						x.Memory.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[2] {
					r.EncodeString(codecSelferC_UTF81234, string("memory"))
					if x.Memory == nil {
						r.EncodeNil()
					} else {
						x.Memory.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				if yyq233[3] {
					if x.Network == nil {
						r.EncodeNil()
					} else {
						x.Network.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[3] {
					r.EncodeString(codecSelferC_UTF81234, string("network"))
					if x.Network == nil {
						r.EncodeNil()
					} else {
						x.Network.CodecEncodeSelf(e)
					}
				}
			}
			if yyr233 || yy2arr233 {
				if yyq233[4] {
					if x.Filesystem == nil {
						r.EncodeNil()
					} else {
						yym243 := z.EncBinary()
						_ = yym243
						if false {
						} else {
							h.encSliceFilesystemMetrics(([]FilesystemMetrics)(x.Filesystem), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq233[4] {
					r.EncodeString(codecSelferC_UTF81234, string("filesystem"))
					if x.Filesystem == nil {
						r.EncodeNil()
					} else {
						yym244 := z.EncBinary()
						_ = yym244
						if false {
						} else {
							h.encSliceFilesystemMetrics(([]FilesystemMetrics)(x.Filesystem), e)
						}
					}
				}
			}
			if yysep233 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *AggregateSample) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym245 := z.DecBinary()
	_ = yym245
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl246 := r.ReadMapStart()
			if yyl246 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl246, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl246 := r.ReadArrayStart()
			if yyl246 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl246, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AggregateSample) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys247Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys247Slc
	var yyhl247 bool = l >= 0
	for yyj247 := 0; ; yyj247++ {
		if yyhl247 {
			if yyj247 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys247Slc = r.DecodeBytes(yys247Slc, true, true)
		yys247 := string(yys247Slc)
		switch yys247 {
		case "sampleTime":
			if r.TryDecodeAsNil() {
				x.SampleTime = pkg1_unversioned.Time{}
			} else {
				yyv248 := &x.SampleTime
				yym249 := z.DecBinary()
				_ = yym249
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv248) {
				} else if yym249 {
					z.DecBinaryUnmarshal(yyv248)
				} else if !yym249 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv248)
				} else {
					z.DecFallback(yyv248, false)
				}
			}
		case "cpu":
			if r.TryDecodeAsNil() {
				if x.CPU != nil {
					x.CPU = nil
				}
			} else {
				if x.CPU == nil {
					x.CPU = new(CPUMetrics)
				}
				x.CPU.CodecDecodeSelf(d)
			}
		case "memory":
			if r.TryDecodeAsNil() {
				if x.Memory != nil {
					x.Memory = nil
				}
			} else {
				if x.Memory == nil {
					x.Memory = new(MemoryMetrics)
				}
				x.Memory.CodecDecodeSelf(d)
			}
		case "network":
			if r.TryDecodeAsNil() {
				if x.Network != nil {
					x.Network = nil
				}
			} else {
				if x.Network == nil {
					x.Network = new(NetworkMetrics)
				}
				x.Network.CodecDecodeSelf(d)
			}
		case "filesystem":
			if r.TryDecodeAsNil() {
				x.Filesystem = nil
			} else {
				yyv253 := &x.Filesystem
				yym254 := z.DecBinary()
				_ = yym254
				if false {
				} else {
					h.decSliceFilesystemMetrics((*[]FilesystemMetrics)(yyv253), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys247)
		} // end switch yys247
	} // end for yyj247
	if !yyhl247 {
		r.ReadEnd()
	}
}

func (x *AggregateSample) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj255 int
	var yyb255 bool
	var yyhl255 bool = l >= 0
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SampleTime = pkg1_unversioned.Time{}
	} else {
		yyv256 := &x.SampleTime
		yym257 := z.DecBinary()
		_ = yym257
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv256) {
		} else if yym257 {
			z.DecBinaryUnmarshal(yyv256)
		} else if !yym257 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv256)
		} else {
			z.DecFallback(yyv256, false)
		}
	}
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CPU != nil {
			x.CPU = nil
		}
	} else {
		if x.CPU == nil {
			x.CPU = new(CPUMetrics)
		}
		x.CPU.CodecDecodeSelf(d)
	}
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Memory != nil {
			x.Memory = nil
		}
	} else {
		if x.Memory == nil {
			x.Memory = new(MemoryMetrics)
		}
		x.Memory.CodecDecodeSelf(d)
	}
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Network != nil {
			x.Network = nil
		}
	} else {
		if x.Network == nil {
			x.Network = new(NetworkMetrics)
		}
		x.Network.CodecDecodeSelf(d)
	}
	yyj255++
	if yyhl255 {
		yyb255 = yyj255 > l
	} else {
		yyb255 = r.CheckBreak()
	}
	if yyb255 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Filesystem = nil
	} else {
		yyv261 := &x.Filesystem
		yym262 := z.DecBinary()
		_ = yym262
		if false {
		} else {
			h.decSliceFilesystemMetrics((*[]FilesystemMetrics)(yyv261), d)
		}
	}
	for {
		yyj255++
		if yyhl255 {
			yyb255 = yyj255 > l
		} else {
			yyb255 = r.CheckBreak()
		}
		if yyb255 {
			break
		}
		z.DecStructFieldNotFound(yyj255-1, "")
	}
	r.ReadEnd()
}

func (x *PodSample) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym263 := z.EncBinary()
		_ = yym263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep264 := !z.EncBinary()
			yy2arr264 := z.EncBasicHandle().StructToArray
			var yyq264 [2]bool
			_, _, _ = yysep264, yyq264, yy2arr264
			const yyr264 bool = false
			yyq264[1] = x.Network != nil
			if yyr264 || yy2arr264 {
				r.EncodeArrayStart(2)
			} else {
				var yynn264 int = 1
				for _, b := range yyq264 {
					if b {
						yynn264++
					}
				}
				r.EncodeMapStart(yynn264)
			}
			if yyr264 || yy2arr264 {
				yy266 := &x.SampleTime
				yym267 := z.EncBinary()
				_ = yym267
				if false {
				} else if z.HasExtensions() && z.EncExt(yy266) {
				} else if yym267 {
					z.EncBinaryMarshal(yy266)
				} else if !yym267 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy266)
				} else {
					z.EncFallback(yy266)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("sampleTime"))
				yy268 := &x.SampleTime
				yym269 := z.EncBinary()
				_ = yym269
				if false {
				} else if z.HasExtensions() && z.EncExt(yy268) {
				} else if yym269 {
					z.EncBinaryMarshal(yy268)
				} else if !yym269 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy268)
				} else {
					z.EncFallback(yy268)
				}
			}
			if yyr264 || yy2arr264 {
				if yyq264[1] {
					if x.Network == nil {
						r.EncodeNil()
					} else {
						x.Network.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq264[1] {
					r.EncodeString(codecSelferC_UTF81234, string("network"))
					if x.Network == nil {
						r.EncodeNil()
					} else {
						x.Network.CodecEncodeSelf(e)
					}
				}
			}
			if yysep264 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSample) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym271 := z.DecBinary()
	_ = yym271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl272 := r.ReadMapStart()
			if yyl272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl272, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl272 := r.ReadArrayStart()
			if yyl272 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSample) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys273Slc
	var yyhl273 bool = l >= 0
	for yyj273 := 0; ; yyj273++ {
		if yyhl273 {
			if yyj273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys273Slc = r.DecodeBytes(yys273Slc, true, true)
		yys273 := string(yys273Slc)
		switch yys273 {
		case "sampleTime":
			if r.TryDecodeAsNil() {
				x.SampleTime = pkg1_unversioned.Time{}
			} else {
				yyv274 := &x.SampleTime
				yym275 := z.DecBinary()
				_ = yym275
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv274) {
				} else if yym275 {
					z.DecBinaryUnmarshal(yyv274)
				} else if !yym275 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv274)
				} else {
					z.DecFallback(yyv274, false)
				}
			}
		case "network":
			if r.TryDecodeAsNil() {
				if x.Network != nil {
					x.Network = nil
				}
			} else {
				if x.Network == nil {
					x.Network = new(NetworkMetrics)
				}
				x.Network.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys273)
		} // end switch yys273
	} // end for yyj273
	if !yyhl273 {
		r.ReadEnd()
	}
}

func (x *PodSample) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj277 int
	var yyb277 bool
	var yyhl277 bool = l >= 0
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SampleTime = pkg1_unversioned.Time{}
	} else {
		yyv278 := &x.SampleTime
		yym279 := z.DecBinary()
		_ = yym279
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv278) {
		} else if yym279 {
			z.DecBinaryUnmarshal(yyv278)
		} else if !yym279 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv278)
		} else {
			z.DecFallback(yyv278, false)
		}
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Network != nil {
			x.Network = nil
		}
	} else {
		if x.Network == nil {
			x.Network = new(NetworkMetrics)
		}
		x.Network.CodecDecodeSelf(d)
	}
	for {
		yyj277++
		if yyhl277 {
			yyb277 = yyj277 > l
		} else {
			yyb277 = r.CheckBreak()
		}
		if yyb277 {
			break
		}
		z.DecStructFieldNotFound(yyj277-1, "")
	}
	r.ReadEnd()
}

func (x *ContainerSample) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym281 := z.EncBinary()
		_ = yym281
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep282 := !z.EncBinary()
			yy2arr282 := z.EncBasicHandle().StructToArray
			var yyq282 [4]bool
			_, _, _ = yysep282, yyq282, yy2arr282
			const yyr282 bool = false
			yyq282[1] = x.CPU != nil
			yyq282[2] = x.Memory != nil
			yyq282[3] = len(x.Filesystem) != 0
			if yyr282 || yy2arr282 {
				r.EncodeArrayStart(4)
			} else {
				var yynn282 int = 1
				for _, b := range yyq282 {
					if b {
						yynn282++
					}
				}
				r.EncodeMapStart(yynn282)
			}
			if yyr282 || yy2arr282 {
				yy284 := &x.SampleTime
				yym285 := z.EncBinary()
				_ = yym285
				if false {
				} else if z.HasExtensions() && z.EncExt(yy284) {
				} else if yym285 {
					z.EncBinaryMarshal(yy284)
				} else if !yym285 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy284)
				} else {
					z.EncFallback(yy284)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("sampleTime"))
				yy286 := &x.SampleTime
				yym287 := z.EncBinary()
				_ = yym287
				if false {
				} else if z.HasExtensions() && z.EncExt(yy286) {
				} else if yym287 {
					z.EncBinaryMarshal(yy286)
				} else if !yym287 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy286)
				} else {
					z.EncFallback(yy286)
				}
			}
			if yyr282 || yy2arr282 {
				if yyq282[1] {
					if x.CPU == nil {
						r.EncodeNil()
					} else {
						x.CPU.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq282[1] {
					r.EncodeString(codecSelferC_UTF81234, string("cpu"))
					if x.CPU == nil {
						r.EncodeNil()
					} else {
						x.CPU.CodecEncodeSelf(e)
					}
				}
			}
			if yyr282 || yy2arr282 {
				if yyq282[2] {
					if x.Memory == nil {
						r.EncodeNil()
					} else {
						x.Memory.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq282[2] {
					r.EncodeString(codecSelferC_UTF81234, string("memory"))
					if x.Memory == nil {
						r.EncodeNil()
					} else {
						x.Memory.CodecEncodeSelf(e)
					}
				}
			}
			if yyr282 || yy2arr282 {
				if yyq282[3] {
					if x.Filesystem == nil {
						r.EncodeNil()
					} else {
						yym291 := z.EncBinary()
						_ = yym291
						if false {
						} else {
							h.encSliceFilesystemMetrics(([]FilesystemMetrics)(x.Filesystem), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq282[3] {
					r.EncodeString(codecSelferC_UTF81234, string("filesystem"))
					if x.Filesystem == nil {
						r.EncodeNil()
					} else {
						yym292 := z.EncBinary()
						_ = yym292
						if false {
						} else {
							h.encSliceFilesystemMetrics(([]FilesystemMetrics)(x.Filesystem), e)
						}
					}
				}
			}
			if yysep282 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ContainerSample) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym293 := z.DecBinary()
	_ = yym293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl294 := r.ReadMapStart()
			if yyl294 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl294, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl294 := r.ReadArrayStart()
			if yyl294 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerSample) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys295Slc
	var yyhl295 bool = l >= 0
	for yyj295 := 0; ; yyj295++ {
		if yyhl295 {
			if yyj295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys295Slc = r.DecodeBytes(yys295Slc, true, true)
		yys295 := string(yys295Slc)
		switch yys295 {
		case "sampleTime":
			if r.TryDecodeAsNil() {
				x.SampleTime = pkg1_unversioned.Time{}
			} else {
				yyv296 := &x.SampleTime
				yym297 := z.DecBinary()
				_ = yym297
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv296) {
				} else if yym297 {
					z.DecBinaryUnmarshal(yyv296)
				} else if !yym297 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv296)
				} else {
					z.DecFallback(yyv296, false)
				}
			}
		case "cpu":
			if r.TryDecodeAsNil() {
				if x.CPU != nil {
					x.CPU = nil
				}
			} else {
				if x.CPU == nil {
					x.CPU = new(CPUMetrics)
				}
				x.CPU.CodecDecodeSelf(d)
			}
		case "memory":
			if r.TryDecodeAsNil() {
				if x.Memory != nil {
					x.Memory = nil
				}
			} else {
				if x.Memory == nil {
					x.Memory = new(MemoryMetrics)
				}
				x.Memory.CodecDecodeSelf(d)
			}
		case "filesystem":
			if r.TryDecodeAsNil() {
				x.Filesystem = nil
			} else {
				yyv300 := &x.Filesystem
				yym301 := z.DecBinary()
				_ = yym301
				if false {
				} else {
					h.decSliceFilesystemMetrics((*[]FilesystemMetrics)(yyv300), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys295)
		} // end switch yys295
	} // end for yyj295
	if !yyhl295 {
		r.ReadEnd()
	}
}

func (x *ContainerSample) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj302 int
	var yyb302 bool
	var yyhl302 bool = l >= 0
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SampleTime = pkg1_unversioned.Time{}
	} else {
		yyv303 := &x.SampleTime
		yym304 := z.DecBinary()
		_ = yym304
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv303) {
		} else if yym304 {
			z.DecBinaryUnmarshal(yyv303)
		} else if !yym304 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv303)
		} else {
			z.DecFallback(yyv303, false)
		}
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CPU != nil {
			x.CPU = nil
		}
	} else {
		if x.CPU == nil {
			x.CPU = new(CPUMetrics)
		}
		x.CPU.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Memory != nil {
			x.Memory = nil
		}
	} else {
		if x.Memory == nil {
			x.Memory = new(MemoryMetrics)
		}
		x.Memory.CodecDecodeSelf(d)
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Filesystem = nil
	} else {
		yyv307 := &x.Filesystem
		yym308 := z.DecBinary()
		_ = yym308
		if false {
		} else {
			h.decSliceFilesystemMetrics((*[]FilesystemMetrics)(yyv307), d)
		}
	}
	for {
		yyj302++
		if yyhl302 {
			yyb302 = yyj302 > l
		} else {
			yyb302 = r.CheckBreak()
		}
		if yyb302 {
			break
		}
		z.DecStructFieldNotFound(yyj302-1, "")
	}
	r.ReadEnd()
}

func (x *NetworkMetrics) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym309 := z.EncBinary()
		_ = yym309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep310 := !z.EncBinary()
			yy2arr310 := z.EncBasicHandle().StructToArray
			var yyq310 [4]bool
			_, _, _ = yysep310, yyq310, yy2arr310
			const yyr310 bool = false
			yyq310[0] = x.RxBytes != nil
			yyq310[1] = x.RxErrors != nil
			yyq310[2] = x.TxBytes != nil
			yyq310[3] = x.TxErrors != nil
			if yyr310 || yy2arr310 {
				r.EncodeArrayStart(4)
			} else {
				var yynn310 int = 0
				for _, b := range yyq310 {
					if b {
						yynn310++
					}
				}
				r.EncodeMapStart(yynn310)
			}
			if yyr310 || yy2arr310 {
				if yyq310[0] {
					if x.RxBytes == nil {
						r.EncodeNil()
					} else {
						yym312 := z.EncBinary()
						_ = yym312
						if false {
						} else if z.HasExtensions() && z.EncExt(x.RxBytes) {
						} else if !yym312 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.RxBytes)
						} else {
							z.EncFallback(x.RxBytes)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq310[0] {
					r.EncodeString(codecSelferC_UTF81234, string("rxBytes"))
					if x.RxBytes == nil {
						r.EncodeNil()
					} else {
						yym313 := z.EncBinary()
						_ = yym313
						if false {
						} else if z.HasExtensions() && z.EncExt(x.RxBytes) {
						} else if !yym313 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.RxBytes)
						} else {
							z.EncFallback(x.RxBytes)
						}
					}
				}
			}
			if yyr310 || yy2arr310 {
				if yyq310[1] {
					if x.RxErrors == nil {
						r.EncodeNil()
					} else {
						yy315 := *x.RxErrors
						yym316 := z.EncBinary()
						_ = yym316
						if false {
						} else {
							r.EncodeInt(int64(yy315))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq310[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rxErrors"))
					if x.RxErrors == nil {
						r.EncodeNil()
					} else {
						yy317 := *x.RxErrors
						yym318 := z.EncBinary()
						_ = yym318
						if false {
						} else {
							r.EncodeInt(int64(yy317))
						}
					}
				}
			}
			if yyr310 || yy2arr310 {
				if yyq310[2] {
					if x.TxBytes == nil {
						r.EncodeNil()
					} else {
						yym320 := z.EncBinary()
						_ = yym320
						if false {
						} else if z.HasExtensions() && z.EncExt(x.TxBytes) {
						} else if !yym320 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.TxBytes)
						} else {
							z.EncFallback(x.TxBytes)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq310[2] {
					r.EncodeString(codecSelferC_UTF81234, string("txBytes"))
					if x.TxBytes == nil {
						r.EncodeNil()
					} else {
						yym321 := z.EncBinary()
						_ = yym321
						if false {
						} else if z.HasExtensions() && z.EncExt(x.TxBytes) {
						} else if !yym321 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.TxBytes)
						} else {
							z.EncFallback(x.TxBytes)
						}
					}
				}
			}
			if yyr310 || yy2arr310 {
				if yyq310[3] {
					if x.TxErrors == nil {
						r.EncodeNil()
					} else {
						yy323 := *x.TxErrors
						yym324 := z.EncBinary()
						_ = yym324
						if false {
						} else {
							r.EncodeInt(int64(yy323))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq310[3] {
					r.EncodeString(codecSelferC_UTF81234, string("txErrors"))
					if x.TxErrors == nil {
						r.EncodeNil()
					} else {
						yy325 := *x.TxErrors
						yym326 := z.EncBinary()
						_ = yym326
						if false {
						} else {
							r.EncodeInt(int64(yy325))
						}
					}
				}
			}
			if yysep310 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NetworkMetrics) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym327 := z.DecBinary()
	_ = yym327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl328 := r.ReadMapStart()
			if yyl328 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl328, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl328 := r.ReadArrayStart()
			if yyl328 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkMetrics) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys329Slc
	var yyhl329 bool = l >= 0
	for yyj329 := 0; ; yyj329++ {
		if yyhl329 {
			if yyj329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys329Slc = r.DecodeBytes(yys329Slc, true, true)
		yys329 := string(yys329Slc)
		switch yys329 {
		case "rxBytes":
			if r.TryDecodeAsNil() {
				if x.RxBytes != nil {
					x.RxBytes = nil
				}
			} else {
				if x.RxBytes == nil {
					x.RxBytes = new(pkg2_resource.Quantity)
				}
				yym331 := z.DecBinary()
				_ = yym331
				if false {
				} else if z.HasExtensions() && z.DecExt(x.RxBytes) {
				} else if !yym331 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.RxBytes)
				} else {
					z.DecFallback(x.RxBytes, false)
				}
			}
		case "rxErrors":
			if r.TryDecodeAsNil() {
				if x.RxErrors != nil {
					x.RxErrors = nil
				}
			} else {
				if x.RxErrors == nil {
					x.RxErrors = new(int64)
				}
				yym333 := z.DecBinary()
				_ = yym333
				if false {
				} else {
					*((*int64)(x.RxErrors)) = int64(r.DecodeInt(64))
				}
			}
		case "txBytes":
			if r.TryDecodeAsNil() {
				if x.TxBytes != nil {
					x.TxBytes = nil
				}
			} else {
				if x.TxBytes == nil {
					x.TxBytes = new(pkg2_resource.Quantity)
				}
				yym335 := z.DecBinary()
				_ = yym335
				if false {
				} else if z.HasExtensions() && z.DecExt(x.TxBytes) {
				} else if !yym335 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.TxBytes)
				} else {
					z.DecFallback(x.TxBytes, false)
				}
			}
		case "txErrors":
			if r.TryDecodeAsNil() {
				if x.TxErrors != nil {
					x.TxErrors = nil
				}
			} else {
				if x.TxErrors == nil {
					x.TxErrors = new(int64)
				}
				yym337 := z.DecBinary()
				_ = yym337
				if false {
				} else {
					*((*int64)(x.TxErrors)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys329)
		} // end switch yys329
	} // end for yyj329
	if !yyhl329 {
		r.ReadEnd()
	}
}

func (x *NetworkMetrics) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj338 int
	var yyb338 bool
	var yyhl338 bool = l >= 0
	yyj338++
	if yyhl338 {
		yyb338 = yyj338 > l
	} else {
		yyb338 = r.CheckBreak()
	}
	if yyb338 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RxBytes != nil {
			x.RxBytes = nil
		}
	} else {
		if x.RxBytes == nil {
			x.RxBytes = new(pkg2_resource.Quantity)
		}
		yym340 := z.DecBinary()
		_ = yym340
		if false {
		} else if z.HasExtensions() && z.DecExt(x.RxBytes) {
		} else if !yym340 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.RxBytes)
		} else {
			z.DecFallback(x.RxBytes, false)
		}
	}
	yyj338++
	if yyhl338 {
		yyb338 = yyj338 > l
	} else {
		yyb338 = r.CheckBreak()
	}
	if yyb338 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RxErrors != nil {
			x.RxErrors = nil
		}
	} else {
		if x.RxErrors == nil {
			x.RxErrors = new(int64)
		}
		yym342 := z.DecBinary()
		_ = yym342
		if false {
		} else {
			*((*int64)(x.RxErrors)) = int64(r.DecodeInt(64))
		}
	}
	yyj338++
	if yyhl338 {
		yyb338 = yyj338 > l
	} else {
		yyb338 = r.CheckBreak()
	}
	if yyb338 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TxBytes != nil {
			x.TxBytes = nil
		}
	} else {
		if x.TxBytes == nil {
			x.TxBytes = new(pkg2_resource.Quantity)
		}
		yym344 := z.DecBinary()
		_ = yym344
		if false {
		} else if z.HasExtensions() && z.DecExt(x.TxBytes) {
		} else if !yym344 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.TxBytes)
		} else {
			z.DecFallback(x.TxBytes, false)
		}
	}
	yyj338++
	if yyhl338 {
		yyb338 = yyj338 > l
	} else {
		yyb338 = r.CheckBreak()
	}
	if yyb338 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TxErrors != nil {
			x.TxErrors = nil
		}
	} else {
		if x.TxErrors == nil {
			x.TxErrors = new(int64)
		}
		yym346 := z.DecBinary()
		_ = yym346
		if false {
		} else {
			*((*int64)(x.TxErrors)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj338++
		if yyhl338 {
			yyb338 = yyj338 > l
		} else {
			yyb338 = r.CheckBreak()
		}
		if yyb338 {
			break
		}
		z.DecStructFieldNotFound(yyj338-1, "")
	}
	r.ReadEnd()
}

func (x *CPUMetrics) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym347 := z.EncBinary()
		_ = yym347
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep348 := !z.EncBinary()
			yy2arr348 := z.EncBasicHandle().StructToArray
			var yyq348 [1]bool
			_, _, _ = yysep348, yyq348, yy2arr348
			const yyr348 bool = false
			yyq348[0] = x.TotalCores != nil
			if yyr348 || yy2arr348 {
				r.EncodeArrayStart(1)
			} else {
				var yynn348 int = 0
				for _, b := range yyq348 {
					if b {
						yynn348++
					}
				}
				r.EncodeMapStart(yynn348)
			}
			if yyr348 || yy2arr348 {
				if yyq348[0] {
					if x.TotalCores == nil {
						r.EncodeNil()
					} else {
						yym350 := z.EncBinary()
						_ = yym350
						if false {
						} else if z.HasExtensions() && z.EncExt(x.TotalCores) {
						} else if !yym350 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.TotalCores)
						} else {
							z.EncFallback(x.TotalCores)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq348[0] {
					r.EncodeString(codecSelferC_UTF81234, string("totalCores"))
					if x.TotalCores == nil {
						r.EncodeNil()
					} else {
						yym351 := z.EncBinary()
						_ = yym351
						if false {
						} else if z.HasExtensions() && z.EncExt(x.TotalCores) {
						} else if !yym351 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.TotalCores)
						} else {
							z.EncFallback(x.TotalCores)
						}
					}
				}
			}
			if yysep348 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CPUMetrics) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym352 := z.DecBinary()
	_ = yym352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl353 := r.ReadMapStart()
			if yyl353 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl353, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl353 := r.ReadArrayStart()
			if yyl353 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl353, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUMetrics) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys354Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys354Slc
	var yyhl354 bool = l >= 0
	for yyj354 := 0; ; yyj354++ {
		if yyhl354 {
			if yyj354 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys354Slc = r.DecodeBytes(yys354Slc, true, true)
		yys354 := string(yys354Slc)
		switch yys354 {
		case "totalCores":
			if r.TryDecodeAsNil() {
				if x.TotalCores != nil {
					x.TotalCores = nil
				}
			} else {
				if x.TotalCores == nil {
					x.TotalCores = new(pkg2_resource.Quantity)
				}
				yym356 := z.DecBinary()
				_ = yym356
				if false {
				} else if z.HasExtensions() && z.DecExt(x.TotalCores) {
				} else if !yym356 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.TotalCores)
				} else {
					z.DecFallback(x.TotalCores, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys354)
		} // end switch yys354
	} // end for yyj354
	if !yyhl354 {
		r.ReadEnd()
	}
}

func (x *CPUMetrics) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj357 int
	var yyb357 bool
	var yyhl357 bool = l >= 0
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TotalCores != nil {
			x.TotalCores = nil
		}
	} else {
		if x.TotalCores == nil {
			x.TotalCores = new(pkg2_resource.Quantity)
		}
		yym359 := z.DecBinary()
		_ = yym359
		if false {
		} else if z.HasExtensions() && z.DecExt(x.TotalCores) {
		} else if !yym359 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.TotalCores)
		} else {
			z.DecFallback(x.TotalCores, false)
		}
	}
	for {
		yyj357++
		if yyhl357 {
			yyb357 = yyj357 > l
		} else {
			yyb357 = r.CheckBreak()
		}
		if yyb357 {
			break
		}
		z.DecStructFieldNotFound(yyj357-1, "")
	}
	r.ReadEnd()
}

func (x *MemoryMetrics) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym360 := z.EncBinary()
		_ = yym360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep361 := !z.EncBinary()
			yy2arr361 := z.EncBasicHandle().StructToArray
			var yyq361 [4]bool
			_, _, _ = yysep361, yyq361, yy2arr361
			const yyr361 bool = false
			yyq361[0] = x.TotalBytes != nil
			yyq361[1] = x.UsageBytes != nil
			yyq361[2] = x.PageFaults != nil
			yyq361[3] = x.MajorPageFaults != nil
			if yyr361 || yy2arr361 {
				r.EncodeArrayStart(4)
			} else {
				var yynn361 int = 0
				for _, b := range yyq361 {
					if b {
						yynn361++
					}
				}
				r.EncodeMapStart(yynn361)
			}
			if yyr361 || yy2arr361 {
				if yyq361[0] {
					if x.TotalBytes == nil {
						r.EncodeNil()
					} else {
						yym363 := z.EncBinary()
						_ = yym363
						if false {
						} else if z.HasExtensions() && z.EncExt(x.TotalBytes) {
						} else if !yym363 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.TotalBytes)
						} else {
							z.EncFallback(x.TotalBytes)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[0] {
					r.EncodeString(codecSelferC_UTF81234, string("totalBytes"))
					if x.TotalBytes == nil {
						r.EncodeNil()
					} else {
						yym364 := z.EncBinary()
						_ = yym364
						if false {
						} else if z.HasExtensions() && z.EncExt(x.TotalBytes) {
						} else if !yym364 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.TotalBytes)
						} else {
							z.EncFallback(x.TotalBytes)
						}
					}
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[1] {
					if x.UsageBytes == nil {
						r.EncodeNil()
					} else {
						yym366 := z.EncBinary()
						_ = yym366
						if false {
						} else if z.HasExtensions() && z.EncExt(x.UsageBytes) {
						} else if !yym366 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.UsageBytes)
						} else {
							z.EncFallback(x.UsageBytes)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[1] {
					r.EncodeString(codecSelferC_UTF81234, string("usageBytes"))
					if x.UsageBytes == nil {
						r.EncodeNil()
					} else {
						yym367 := z.EncBinary()
						_ = yym367
						if false {
						} else if z.HasExtensions() && z.EncExt(x.UsageBytes) {
						} else if !yym367 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.UsageBytes)
						} else {
							z.EncFallback(x.UsageBytes)
						}
					}
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[2] {
					if x.PageFaults == nil {
						r.EncodeNil()
					} else {
						yy369 := *x.PageFaults
						yym370 := z.EncBinary()
						_ = yym370
						if false {
						} else {
							r.EncodeInt(int64(yy369))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[2] {
					r.EncodeString(codecSelferC_UTF81234, string("pageFaults"))
					if x.PageFaults == nil {
						r.EncodeNil()
					} else {
						yy371 := *x.PageFaults
						yym372 := z.EncBinary()
						_ = yym372
						if false {
						} else {
							r.EncodeInt(int64(yy371))
						}
					}
				}
			}
			if yyr361 || yy2arr361 {
				if yyq361[3] {
					if x.MajorPageFaults == nil {
						r.EncodeNil()
					} else {
						yy374 := *x.MajorPageFaults
						yym375 := z.EncBinary()
						_ = yym375
						if false {
						} else {
							r.EncodeInt(int64(yy374))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq361[3] {
					r.EncodeString(codecSelferC_UTF81234, string("majorPageFaults"))
					if x.MajorPageFaults == nil {
						r.EncodeNil()
					} else {
						yy376 := *x.MajorPageFaults
						yym377 := z.EncBinary()
						_ = yym377
						if false {
						} else {
							r.EncodeInt(int64(yy376))
						}
					}
				}
			}
			if yysep361 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *MemoryMetrics) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym378 := z.DecBinary()
	_ = yym378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl379 := r.ReadMapStart()
			if yyl379 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl379, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl379 := r.ReadArrayStart()
			if yyl379 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *MemoryMetrics) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys380Slc
	var yyhl380 bool = l >= 0
	for yyj380 := 0; ; yyj380++ {
		if yyhl380 {
			if yyj380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys380Slc = r.DecodeBytes(yys380Slc, true, true)
		yys380 := string(yys380Slc)
		switch yys380 {
		case "totalBytes":
			if r.TryDecodeAsNil() {
				if x.TotalBytes != nil {
					x.TotalBytes = nil
				}
			} else {
				if x.TotalBytes == nil {
					x.TotalBytes = new(pkg2_resource.Quantity)
				}
				yym382 := z.DecBinary()
				_ = yym382
				if false {
				} else if z.HasExtensions() && z.DecExt(x.TotalBytes) {
				} else if !yym382 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.TotalBytes)
				} else {
					z.DecFallback(x.TotalBytes, false)
				}
			}
		case "usageBytes":
			if r.TryDecodeAsNil() {
				if x.UsageBytes != nil {
					x.UsageBytes = nil
				}
			} else {
				if x.UsageBytes == nil {
					x.UsageBytes = new(pkg2_resource.Quantity)
				}
				yym384 := z.DecBinary()
				_ = yym384
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UsageBytes) {
				} else if !yym384 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.UsageBytes)
				} else {
					z.DecFallback(x.UsageBytes, false)
				}
			}
		case "pageFaults":
			if r.TryDecodeAsNil() {
				if x.PageFaults != nil {
					x.PageFaults = nil
				}
			} else {
				if x.PageFaults == nil {
					x.PageFaults = new(int64)
				}
				yym386 := z.DecBinary()
				_ = yym386
				if false {
				} else {
					*((*int64)(x.PageFaults)) = int64(r.DecodeInt(64))
				}
			}
		case "majorPageFaults":
			if r.TryDecodeAsNil() {
				if x.MajorPageFaults != nil {
					x.MajorPageFaults = nil
				}
			} else {
				if x.MajorPageFaults == nil {
					x.MajorPageFaults = new(int64)
				}
				yym388 := z.DecBinary()
				_ = yym388
				if false {
				} else {
					*((*int64)(x.MajorPageFaults)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys380)
		} // end switch yys380
	} // end for yyj380
	if !yyhl380 {
		r.ReadEnd()
	}
}

func (x *MemoryMetrics) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj389 int
	var yyb389 bool
	var yyhl389 bool = l >= 0
	yyj389++
	if yyhl389 {
		yyb389 = yyj389 > l
	} else {
		yyb389 = r.CheckBreak()
	}
	if yyb389 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.TotalBytes != nil {
			x.TotalBytes = nil
		}
	} else {
		if x.TotalBytes == nil {
			x.TotalBytes = new(pkg2_resource.Quantity)
		}
		yym391 := z.DecBinary()
		_ = yym391
		if false {
		} else if z.HasExtensions() && z.DecExt(x.TotalBytes) {
		} else if !yym391 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.TotalBytes)
		} else {
			z.DecFallback(x.TotalBytes, false)
		}
	}
	yyj389++
	if yyhl389 {
		yyb389 = yyj389 > l
	} else {
		yyb389 = r.CheckBreak()
	}
	if yyb389 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.UsageBytes != nil {
			x.UsageBytes = nil
		}
	} else {
		if x.UsageBytes == nil {
			x.UsageBytes = new(pkg2_resource.Quantity)
		}
		yym393 := z.DecBinary()
		_ = yym393
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UsageBytes) {
		} else if !yym393 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.UsageBytes)
		} else {
			z.DecFallback(x.UsageBytes, false)
		}
	}
	yyj389++
	if yyhl389 {
		yyb389 = yyj389 > l
	} else {
		yyb389 = r.CheckBreak()
	}
	if yyb389 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.PageFaults != nil {
			x.PageFaults = nil
		}
	} else {
		if x.PageFaults == nil {
			x.PageFaults = new(int64)
		}
		yym395 := z.DecBinary()
		_ = yym395
		if false {
		} else {
			*((*int64)(x.PageFaults)) = int64(r.DecodeInt(64))
		}
	}
	yyj389++
	if yyhl389 {
		yyb389 = yyj389 > l
	} else {
		yyb389 = r.CheckBreak()
	}
	if yyb389 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MajorPageFaults != nil {
			x.MajorPageFaults = nil
		}
	} else {
		if x.MajorPageFaults == nil {
			x.MajorPageFaults = new(int64)
		}
		yym397 := z.DecBinary()
		_ = yym397
		if false {
		} else {
			*((*int64)(x.MajorPageFaults)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj389++
		if yyhl389 {
			yyb389 = yyj389 > l
		} else {
			yyb389 = r.CheckBreak()
		}
		if yyb389 {
			break
		}
		z.DecStructFieldNotFound(yyj389-1, "")
	}
	r.ReadEnd()
}

func (x *FilesystemMetrics) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym398 := z.EncBinary()
		_ = yym398
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep399 := !z.EncBinary()
			yy2arr399 := z.EncBasicHandle().StructToArray
			var yyq399 [3]bool
			_, _, _ = yysep399, yyq399, yy2arr399
			const yyr399 bool = false
			yyq399[1] = x.UsageBytes != nil
			yyq399[2] = x.LimitBytes != nil
			if yyr399 || yy2arr399 {
				r.EncodeArrayStart(3)
			} else {
				var yynn399 int = 1
				for _, b := range yyq399 {
					if b {
						yynn399++
					}
				}
				r.EncodeMapStart(yynn399)
			}
			if yyr399 || yy2arr399 {
				yym401 := z.EncBinary()
				_ = yym401
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Device))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("device"))
				yym402 := z.EncBinary()
				_ = yym402
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Device))
				}
			}
			if yyr399 || yy2arr399 {
				if yyq399[1] {
					if x.UsageBytes == nil {
						r.EncodeNil()
					} else {
						yym404 := z.EncBinary()
						_ = yym404
						if false {
						} else if z.HasExtensions() && z.EncExt(x.UsageBytes) {
						} else if !yym404 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.UsageBytes)
						} else {
							z.EncFallback(x.UsageBytes)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq399[1] {
					r.EncodeString(codecSelferC_UTF81234, string("usageBytes"))
					if x.UsageBytes == nil {
						r.EncodeNil()
					} else {
						yym405 := z.EncBinary()
						_ = yym405
						if false {
						} else if z.HasExtensions() && z.EncExt(x.UsageBytes) {
						} else if !yym405 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.UsageBytes)
						} else {
							z.EncFallback(x.UsageBytes)
						}
					}
				}
			}
			if yyr399 || yy2arr399 {
				if yyq399[2] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yym407 := z.EncBinary()
						_ = yym407
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LimitBytes) {
						} else if !yym407 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LimitBytes)
						} else {
							z.EncFallback(x.LimitBytes)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq399[2] {
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yym408 := z.EncBinary()
						_ = yym408
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LimitBytes) {
						} else if !yym408 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LimitBytes)
						} else {
							z.EncFallback(x.LimitBytes)
						}
					}
				}
			}
			if yysep399 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *FilesystemMetrics) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym409 := z.DecBinary()
	_ = yym409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl410 := r.ReadMapStart()
			if yyl410 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl410, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl410 := r.ReadArrayStart()
			if yyl410 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FilesystemMetrics) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys411Slc
	var yyhl411 bool = l >= 0
	for yyj411 := 0; ; yyj411++ {
		if yyhl411 {
			if yyj411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys411Slc = r.DecodeBytes(yys411Slc, true, true)
		yys411 := string(yys411Slc)
		switch yys411 {
		case "device":
			if r.TryDecodeAsNil() {
				x.Device = ""
			} else {
				x.Device = string(r.DecodeString())
			}
		case "usageBytes":
			if r.TryDecodeAsNil() {
				if x.UsageBytes != nil {
					x.UsageBytes = nil
				}
			} else {
				if x.UsageBytes == nil {
					x.UsageBytes = new(pkg2_resource.Quantity)
				}
				yym414 := z.DecBinary()
				_ = yym414
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UsageBytes) {
				} else if !yym414 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.UsageBytes)
				} else {
					z.DecFallback(x.UsageBytes, false)
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(pkg2_resource.Quantity)
				}
				yym416 := z.DecBinary()
				_ = yym416
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LimitBytes) {
				} else if !yym416 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LimitBytes)
				} else {
					z.DecFallback(x.LimitBytes, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys411)
		} // end switch yys411
	} // end for yyj411
	if !yyhl411 {
		r.ReadEnd()
	}
}

func (x *FilesystemMetrics) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj417 int
	var yyb417 bool
	var yyhl417 bool = l >= 0
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Device = ""
	} else {
		x.Device = string(r.DecodeString())
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.UsageBytes != nil {
			x.UsageBytes = nil
		}
	} else {
		if x.UsageBytes == nil {
			x.UsageBytes = new(pkg2_resource.Quantity)
		}
		yym420 := z.DecBinary()
		_ = yym420
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UsageBytes) {
		} else if !yym420 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.UsageBytes)
		} else {
			z.DecFallback(x.UsageBytes, false)
		}
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(pkg2_resource.Quantity)
		}
		yym422 := z.DecBinary()
		_ = yym422
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LimitBytes) {
		} else if !yym422 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LimitBytes)
		} else {
			z.DecFallback(x.LimitBytes, false)
		}
	}
	for {
		yyj417++
		if yyhl417 {
			yyb417 = yyj417 > l
		} else {
			yyb417 = r.CheckBreak()
		}
		if yyb417 {
			break
		}
		z.DecStructFieldNotFound(yyj417-1, "")
	}
	r.ReadEnd()
}

func (x CustomMetricType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym423 := z.EncBinary()
	_ = yym423
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *CustomMetricType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym424 := z.DecBinary()
	_ = yym424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *CustomMetric) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym425 := z.EncBinary()
		_ = yym425
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep426 := !z.EncBinary()
			yy2arr426 := z.EncBasicHandle().StructToArray
			var yyq426 [4]bool
			_, _, _ = yysep426, yyq426, yy2arr426
			const yyr426 bool = false
			yyq426[3] = len(x.Samples) != 0
			if yyr426 || yy2arr426 {
				r.EncodeArrayStart(4)
			} else {
				var yynn426 int = 3
				for _, b := range yyq426 {
					if b {
						yynn426++
					}
				}
				r.EncodeMapStart(yynn426)
			}
			if yyr426 || yy2arr426 {
				yym428 := z.EncBinary()
				_ = yym428
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				yym429 := z.EncBinary()
				_ = yym429
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr426 || yy2arr426 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr426 || yy2arr426 {
				yym432 := z.EncBinary()
				_ = yym432
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Unit))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("unit"))
				yym433 := z.EncBinary()
				_ = yym433
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Unit))
				}
			}
			if yyr426 || yy2arr426 {
				if yyq426[3] {
					if x.Samples == nil {
						r.EncodeNil()
					} else {
						yym435 := z.EncBinary()
						_ = yym435
						if false {
						} else {
							h.encSliceCustomMetricSample(([]CustomMetricSample)(x.Samples), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq426[3] {
					r.EncodeString(codecSelferC_UTF81234, string("samples"))
					if x.Samples == nil {
						r.EncodeNil()
					} else {
						yym436 := z.EncBinary()
						_ = yym436
						if false {
						} else {
							h.encSliceCustomMetricSample(([]CustomMetricSample)(x.Samples), e)
						}
					}
				}
			}
			if yysep426 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CustomMetric) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym437 := z.DecBinary()
	_ = yym437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl438 := r.ReadMapStart()
			if yyl438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl438, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl438 := r.ReadArrayStart()
			if yyl438 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetric) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys439Slc
	var yyhl439 bool = l >= 0
	for yyj439 := 0; ; yyj439++ {
		if yyhl439 {
			if yyj439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys439Slc = r.DecodeBytes(yys439Slc, true, true)
		yys439 := string(yys439Slc)
		switch yys439 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = CustomMetricType(r.DecodeString())
			}
		case "unit":
			if r.TryDecodeAsNil() {
				x.Unit = ""
			} else {
				x.Unit = string(r.DecodeString())
			}
		case "samples":
			if r.TryDecodeAsNil() {
				x.Samples = nil
			} else {
				yyv443 := &x.Samples
				yym444 := z.DecBinary()
				_ = yym444
				if false {
				} else {
					h.decSliceCustomMetricSample((*[]CustomMetricSample)(yyv443), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys439)
		} // end switch yys439
	} // end for yyj439
	if !yyhl439 {
		r.ReadEnd()
	}
}

func (x *CustomMetric) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj445 int
	var yyb445 bool
	var yyhl445 bool = l >= 0
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = CustomMetricType(r.DecodeString())
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Unit = ""
	} else {
		x.Unit = string(r.DecodeString())
	}
	yyj445++
	if yyhl445 {
		yyb445 = yyj445 > l
	} else {
		yyb445 = r.CheckBreak()
	}
	if yyb445 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Samples = nil
	} else {
		yyv449 := &x.Samples
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSliceCustomMetricSample((*[]CustomMetricSample)(yyv449), d)
		}
	}
	for {
		yyj445++
		if yyhl445 {
			yyb445 = yyj445 > l
		} else {
			yyb445 = r.CheckBreak()
		}
		if yyb445 {
			break
		}
		z.DecStructFieldNotFound(yyj445-1, "")
	}
	r.ReadEnd()
}

func (x *CustomMetricSample) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[1] = x.Label != nil
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				var yynn452 int = 2
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				yy454 := &x.SampleTime
				yym455 := z.EncBinary()
				_ = yym455
				if false {
				} else if z.HasExtensions() && z.EncExt(yy454) {
				} else if yym455 {
					z.EncBinaryMarshal(yy454)
				} else if !yym455 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy454)
				} else {
					z.EncFallback(yy454)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("sampleTime"))
				yy456 := &x.SampleTime
				yym457 := z.EncBinary()
				_ = yym457
				if false {
				} else if z.HasExtensions() && z.EncExt(yy456) {
				} else if yym457 {
					z.EncBinaryMarshal(yy456)
				} else if !yym457 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy456)
				} else {
					z.EncFallback(yy456)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					if x.Label == nil {
						r.EncodeNil()
					} else {
						yy459 := *x.Label
						yym460 := z.EncBinary()
						_ = yym460
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy459))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("label"))
					if x.Label == nil {
						r.EncodeNil()
					} else {
						yy461 := *x.Label
						yym462 := z.EncBinary()
						_ = yym462
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy461))
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				yy464 := &x.Value
				yym465 := z.EncBinary()
				_ = yym465
				if false {
				} else if z.HasExtensions() && z.EncExt(yy464) {
				} else if !yym465 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy464)
				} else {
					z.EncFallback(yy464)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				yy466 := &x.Value
				yym467 := z.EncBinary()
				_ = yym467
				if false {
				} else if z.HasExtensions() && z.EncExt(yy466) {
				} else if !yym467 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy466)
				} else {
					z.EncFallback(yy466)
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CustomMetricSample) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym468 := z.DecBinary()
	_ = yym468
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl469 := r.ReadMapStart()
			if yyl469 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl469, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl469 := r.ReadArrayStart()
			if yyl469 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl469, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricSample) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys470Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys470Slc
	var yyhl470 bool = l >= 0
	for yyj470 := 0; ; yyj470++ {
		if yyhl470 {
			if yyj470 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys470Slc = r.DecodeBytes(yys470Slc, true, true)
		yys470 := string(yys470Slc)
		switch yys470 {
		case "sampleTime":
			if r.TryDecodeAsNil() {
				x.SampleTime = pkg1_unversioned.Time{}
			} else {
				yyv471 := &x.SampleTime
				yym472 := z.DecBinary()
				_ = yym472
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv471) {
				} else if yym472 {
					z.DecBinaryUnmarshal(yyv471)
				} else if !yym472 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv471)
				} else {
					z.DecFallback(yyv471, false)
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				if x.Label != nil {
					x.Label = nil
				}
			} else {
				if x.Label == nil {
					x.Label = new(string)
				}
				yym474 := z.DecBinary()
				_ = yym474
				if false {
				} else {
					*((*string)(x.Label)) = r.DecodeString()
				}
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = pkg2_resource.Quantity{}
			} else {
				yyv475 := &x.Value
				yym476 := z.DecBinary()
				_ = yym476
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv475) {
				} else if !yym476 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv475)
				} else {
					z.DecFallback(yyv475, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys470)
		} // end switch yys470
	} // end for yyj470
	if !yyhl470 {
		r.ReadEnd()
	}
}

func (x *CustomMetricSample) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj477 int
	var yyb477 bool
	var yyhl477 bool = l >= 0
	yyj477++
	if yyhl477 {
		yyb477 = yyj477 > l
	} else {
		yyb477 = r.CheckBreak()
	}
	if yyb477 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.SampleTime = pkg1_unversioned.Time{}
	} else {
		yyv478 := &x.SampleTime
		yym479 := z.DecBinary()
		_ = yym479
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv478) {
		} else if yym479 {
			z.DecBinaryUnmarshal(yyv478)
		} else if !yym479 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv478)
		} else {
			z.DecFallback(yyv478, false)
		}
	}
	yyj477++
	if yyhl477 {
		yyb477 = yyj477 > l
	} else {
		yyb477 = r.CheckBreak()
	}
	if yyb477 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Label != nil {
			x.Label = nil
		}
	} else {
		if x.Label == nil {
			x.Label = new(string)
		}
		yym481 := z.DecBinary()
		_ = yym481
		if false {
		} else {
			*((*string)(x.Label)) = r.DecodeString()
		}
	}
	yyj477++
	if yyhl477 {
		yyb477 = yyj477 > l
	} else {
		yyb477 = r.CheckBreak()
	}
	if yyb477 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = pkg2_resource.Quantity{}
	} else {
		yyv482 := &x.Value
		yym483 := z.DecBinary()
		_ = yym483
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv482) {
		} else if !yym483 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv482)
		} else {
			z.DecFallback(yyv482, false)
		}
	}
	for {
		yyj477++
		if yyhl477 {
			yyb477 = yyj477 > l
		} else {
			yyb477 = r.CheckBreak()
		}
		if yyb477 {
			break
		}
		z.DecStructFieldNotFound(yyj477-1, "")
	}
	r.ReadEnd()
}

func (x *RawMetricsOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym484 := z.EncBinary()
		_ = yym484
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep485 := !z.EncBinary()
			yy2arr485 := z.EncBasicHandle().StructToArray
			var yyq485 [3]bool
			_, _, _ = yysep485, yyq485, yy2arr485
			const yyr485 bool = false
			yyq485[0] = x.SinceTime != nil
			yyq485[1] = x.UntilTime != nil
			yyq485[2] = x.MaxSamples != 0
			if yyr485 || yy2arr485 {
				r.EncodeArrayStart(3)
			} else {
				var yynn485 int = 0
				for _, b := range yyq485 {
					if b {
						yynn485++
					}
				}
				r.EncodeMapStart(yynn485)
			}
			if yyr485 || yy2arr485 {
				if yyq485[0] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym487 := z.EncBinary()
						_ = yym487
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym487 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym487 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq485[0] {
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym488 := z.EncBinary()
						_ = yym488
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym488 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym488 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr485 || yy2arr485 {
				if yyq485[1] {
					if x.UntilTime == nil {
						r.EncodeNil()
					} else {
						yym490 := z.EncBinary()
						_ = yym490
						if false {
						} else if z.HasExtensions() && z.EncExt(x.UntilTime) {
						} else if yym490 {
							z.EncBinaryMarshal(x.UntilTime)
						} else if !yym490 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.UntilTime)
						} else {
							z.EncFallback(x.UntilTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq485[1] {
					r.EncodeString(codecSelferC_UTF81234, string("untilTime"))
					if x.UntilTime == nil {
						r.EncodeNil()
					} else {
						yym491 := z.EncBinary()
						_ = yym491
						if false {
						} else if z.HasExtensions() && z.EncExt(x.UntilTime) {
						} else if yym491 {
							z.EncBinaryMarshal(x.UntilTime)
						} else if !yym491 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.UntilTime)
						} else {
							z.EncFallback(x.UntilTime)
						}
					}
				}
			}
			if yyr485 || yy2arr485 {
				if yyq485[2] {
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else {
						r.EncodeInt(int64(x.MaxSamples))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq485[2] {
					r.EncodeString(codecSelferC_UTF81234, string("maxSamples"))
					yym494 := z.EncBinary()
					_ = yym494
					if false {
					} else {
						r.EncodeInt(int64(x.MaxSamples))
					}
				}
			}
			if yysep485 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RawMetricsOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym495 := z.DecBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl496 := r.ReadMapStart()
			if yyl496 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl496, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl496 := r.ReadArrayStart()
			if yyl496 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl496, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RawMetricsOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys497Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys497Slc
	var yyhl497 bool = l >= 0
	for yyj497 := 0; ; yyj497++ {
		if yyhl497 {
			if yyj497 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys497Slc = r.DecodeBytes(yys497Slc, true, true)
		yys497 := string(yys497Slc)
		switch yys497 {
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg1_unversioned.Time)
				}
				yym499 := z.DecBinary()
				_ = yym499
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym499 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym499 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "untilTime":
			if r.TryDecodeAsNil() {
				if x.UntilTime != nil {
					x.UntilTime = nil
				}
			} else {
				if x.UntilTime == nil {
					x.UntilTime = new(pkg1_unversioned.Time)
				}
				yym501 := z.DecBinary()
				_ = yym501
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UntilTime) {
				} else if yym501 {
					z.DecBinaryUnmarshal(x.UntilTime)
				} else if !yym501 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.UntilTime)
				} else {
					z.DecFallback(x.UntilTime, false)
				}
			}
		case "maxSamples":
			if r.TryDecodeAsNil() {
				x.MaxSamples = 0
			} else {
				x.MaxSamples = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys497)
		} // end switch yys497
	} // end for yyj497
	if !yyhl497 {
		r.ReadEnd()
	}
}

func (x *RawMetricsOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj503 int
	var yyb503 bool
	var yyhl503 bool = l >= 0
	yyj503++
	if yyhl503 {
		yyb503 = yyj503 > l
	} else {
		yyb503 = r.CheckBreak()
	}
	if yyb503 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg1_unversioned.Time)
		}
		yym505 := z.DecBinary()
		_ = yym505
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym505 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym505 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj503++
	if yyhl503 {
		yyb503 = yyj503 > l
	} else {
		yyb503 = r.CheckBreak()
	}
	if yyb503 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.UntilTime != nil {
			x.UntilTime = nil
		}
	} else {
		if x.UntilTime == nil {
			x.UntilTime = new(pkg1_unversioned.Time)
		}
		yym507 := z.DecBinary()
		_ = yym507
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UntilTime) {
		} else if yym507 {
			z.DecBinaryUnmarshal(x.UntilTime)
		} else if !yym507 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.UntilTime)
		} else {
			z.DecFallback(x.UntilTime, false)
		}
	}
	yyj503++
	if yyhl503 {
		yyb503 = yyj503 > l
	} else {
		yyb503 = r.CheckBreak()
	}
	if yyb503 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxSamples = 0
	} else {
		x.MaxSamples = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj503++
		if yyhl503 {
			yyb503 = yyj503 > l
		} else {
			yyb503 = r.CheckBreak()
		}
		if yyb503 {
			break
		}
		z.DecStructFieldNotFound(yyj503-1, "")
	}
	r.ReadEnd()
}

func (x codecSelfer1234) encSliceAggregateSample(v []AggregateSample, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv509 := range v {
		yy510 := &yyv509
		yy510.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceAggregateSample(v *[]AggregateSample, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv511 := *v
	yyh511, yyl511 := z.DecSliceHelperStart()

	var yyrr511, yyrl511 int
	var yyc511, yyrt511 bool
	_, _, _ = yyc511, yyrt511, yyrl511
	yyrr511 = yyl511

	if yyv511 == nil {
		if yyrl511, yyrt511 = z.DecInferLen(yyl511, z.DecBasicHandle().MaxInitLen, 72); yyrt511 {
			yyrr511 = yyrl511
		}
		yyv511 = make([]AggregateSample, yyrl511)
		yyc511 = true
	}

	if yyl511 == 0 {
		if len(yyv511) != 0 {
			yyv511 = yyv511[:0]
			yyc511 = true
		}
	} else if yyl511 > 0 {

		if yyl511 > cap(yyv511) {
			yyrl511, yyrt511 = z.DecInferLen(yyl511, z.DecBasicHandle().MaxInitLen, 72)
			yyv511 = make([]AggregateSample, yyrl511)
			yyc511 = true

			yyrr511 = len(yyv511)
		} else if yyl511 != len(yyv511) {
			yyv511 = yyv511[:yyl511]
			yyc511 = true
		}
		yyj511 := 0
		for ; yyj511 < yyrr511; yyj511++ {
			if r.TryDecodeAsNil() {
				yyv511[yyj511] = AggregateSample{}
			} else {
				yyv512 := &yyv511[yyj511]
				yyv512.CodecDecodeSelf(d)
			}

		}
		if yyrt511 {
			for ; yyj511 < yyl511; yyj511++ {
				yyv511 = append(yyv511, AggregateSample{})
				if r.TryDecodeAsNil() {
					yyv511[yyj511] = AggregateSample{}
				} else {
					yyv513 := &yyv511[yyj511]
					yyv513.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj511 := 0; !r.CheckBreak(); yyj511++ {
			if yyj511 >= len(yyv511) {
				yyv511 = append(yyv511, AggregateSample{}) // var yyz511 AggregateSample
				yyc511 = true
			}

			if yyj511 < len(yyv511) {
				if r.TryDecodeAsNil() {
					yyv511[yyj511] = AggregateSample{}
				} else {
					yyv514 := &yyv511[yyj511]
					yyv514.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh511.End()
	}
	if yyc511 {
		*v = yyv511
	}

}

func (x codecSelfer1234) encSliceRawContainerMetrics(v []RawContainerMetrics, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv515 := range v {
		yy516 := &yyv515
		yy516.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceRawContainerMetrics(v *[]RawContainerMetrics, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv517 := *v
	yyh517, yyl517 := z.DecSliceHelperStart()

	var yyrr517, yyrl517 int
	var yyc517, yyrt517 bool
	_, _, _ = yyc517, yyrt517, yyrl517
	yyrr517 = yyl517

	if yyv517 == nil {
		if yyrl517, yyrt517 = z.DecInferLen(yyl517, z.DecBasicHandle().MaxInitLen, 72); yyrt517 {
			yyrr517 = yyrl517
		}
		yyv517 = make([]RawContainerMetrics, yyrl517)
		yyc517 = true
	}

	if yyl517 == 0 {
		if len(yyv517) != 0 {
			yyv517 = yyv517[:0]
			yyc517 = true
		}
	} else if yyl517 > 0 {

		if yyl517 > cap(yyv517) {
			yyrl517, yyrt517 = z.DecInferLen(yyl517, z.DecBasicHandle().MaxInitLen, 72)
			yyv517 = make([]RawContainerMetrics, yyrl517)
			yyc517 = true

			yyrr517 = len(yyv517)
		} else if yyl517 != len(yyv517) {
			yyv517 = yyv517[:yyl517]
			yyc517 = true
		}
		yyj517 := 0
		for ; yyj517 < yyrr517; yyj517++ {
			if r.TryDecodeAsNil() {
				yyv517[yyj517] = RawContainerMetrics{}
			} else {
				yyv518 := &yyv517[yyj517]
				yyv518.CodecDecodeSelf(d)
			}

		}
		if yyrt517 {
			for ; yyj517 < yyl517; yyj517++ {
				yyv517 = append(yyv517, RawContainerMetrics{})
				if r.TryDecodeAsNil() {
					yyv517[yyj517] = RawContainerMetrics{}
				} else {
					yyv519 := &yyv517[yyj517]
					yyv519.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj517 := 0; !r.CheckBreak(); yyj517++ {
			if yyj517 >= len(yyv517) {
				yyv517 = append(yyv517, RawContainerMetrics{}) // var yyz517 RawContainerMetrics
				yyc517 = true
			}

			if yyj517 < len(yyv517) {
				if r.TryDecodeAsNil() {
					yyv517[yyj517] = RawContainerMetrics{}
				} else {
					yyv520 := &yyv517[yyj517]
					yyv520.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh517.End()
	}
	if yyc517 {
		*v = yyv517
	}

}

func (x codecSelfer1234) encSliceRawNodeMetrics(v []RawNodeMetrics, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv521 := range v {
		yy522 := &yyv521
		yy522.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceRawNodeMetrics(v *[]RawNodeMetrics, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv523 := *v
	yyh523, yyl523 := z.DecSliceHelperStart()

	var yyrr523, yyrl523 int
	var yyc523, yyrt523 bool
	_, _, _ = yyc523, yyrt523, yyrl523
	yyrr523 = yyl523

	if yyv523 == nil {
		if yyrl523, yyrt523 = z.DecInferLen(yyl523, z.DecBasicHandle().MaxInitLen, 128); yyrt523 {
			yyrr523 = yyrl523
		}
		yyv523 = make([]RawNodeMetrics, yyrl523)
		yyc523 = true
	}

	if yyl523 == 0 {
		if len(yyv523) != 0 {
			yyv523 = yyv523[:0]
			yyc523 = true
		}
	} else if yyl523 > 0 {

		if yyl523 > cap(yyv523) {
			yyrl523, yyrt523 = z.DecInferLen(yyl523, z.DecBasicHandle().MaxInitLen, 128)
			yyv523 = make([]RawNodeMetrics, yyrl523)
			yyc523 = true

			yyrr523 = len(yyv523)
		} else if yyl523 != len(yyv523) {
			yyv523 = yyv523[:yyl523]
			yyc523 = true
		}
		yyj523 := 0
		for ; yyj523 < yyrr523; yyj523++ {
			if r.TryDecodeAsNil() {
				yyv523[yyj523] = RawNodeMetrics{}
			} else {
				yyv524 := &yyv523[yyj523]
				yyv524.CodecDecodeSelf(d)
			}

		}
		if yyrt523 {
			for ; yyj523 < yyl523; yyj523++ {
				yyv523 = append(yyv523, RawNodeMetrics{})
				if r.TryDecodeAsNil() {
					yyv523[yyj523] = RawNodeMetrics{}
				} else {
					yyv525 := &yyv523[yyj523]
					yyv525.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj523 := 0; !r.CheckBreak(); yyj523++ {
			if yyj523 >= len(yyv523) {
				yyv523 = append(yyv523, RawNodeMetrics{}) // var yyz523 RawNodeMetrics
				yyc523 = true
			}

			if yyj523 < len(yyv523) {
				if r.TryDecodeAsNil() {
					yyv523[yyj523] = RawNodeMetrics{}
				} else {
					yyv526 := &yyv523[yyj523]
					yyv526.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh523.End()
	}
	if yyc523 {
		*v = yyv523
	}

}

func (x codecSelfer1234) encSlicePodSample(v []PodSample, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv527 := range v {
		yy528 := &yyv527
		yy528.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodSample(v *[]PodSample, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv529 := *v
	yyh529, yyl529 := z.DecSliceHelperStart()

	var yyrr529, yyrl529 int
	var yyc529, yyrt529 bool
	_, _, _ = yyc529, yyrt529, yyrl529
	yyrr529 = yyl529

	if yyv529 == nil {
		if yyrl529, yyrt529 = z.DecInferLen(yyl529, z.DecBasicHandle().MaxInitLen, 32); yyrt529 {
			yyrr529 = yyrl529
		}
		yyv529 = make([]PodSample, yyrl529)
		yyc529 = true
	}

	if yyl529 == 0 {
		if len(yyv529) != 0 {
			yyv529 = yyv529[:0]
			yyc529 = true
		}
	} else if yyl529 > 0 {

		if yyl529 > cap(yyv529) {
			yyrl529, yyrt529 = z.DecInferLen(yyl529, z.DecBasicHandle().MaxInitLen, 32)
			yyv529 = make([]PodSample, yyrl529)
			yyc529 = true

			yyrr529 = len(yyv529)
		} else if yyl529 != len(yyv529) {
			yyv529 = yyv529[:yyl529]
			yyc529 = true
		}
		yyj529 := 0
		for ; yyj529 < yyrr529; yyj529++ {
			if r.TryDecodeAsNil() {
				yyv529[yyj529] = PodSample{}
			} else {
				yyv530 := &yyv529[yyj529]
				yyv530.CodecDecodeSelf(d)
			}

		}
		if yyrt529 {
			for ; yyj529 < yyl529; yyj529++ {
				yyv529 = append(yyv529, PodSample{})
				if r.TryDecodeAsNil() {
					yyv529[yyj529] = PodSample{}
				} else {
					yyv531 := &yyv529[yyj529]
					yyv531.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj529 := 0; !r.CheckBreak(); yyj529++ {
			if yyj529 >= len(yyv529) {
				yyv529 = append(yyv529, PodSample{}) // var yyz529 PodSample
				yyc529 = true
			}

			if yyj529 < len(yyv529) {
				if r.TryDecodeAsNil() {
					yyv529[yyj529] = PodSample{}
				} else {
					yyv532 := &yyv529[yyj529]
					yyv532.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh529.End()
	}
	if yyc529 {
		*v = yyv529
	}

}

func (x codecSelfer1234) encSliceRawPodMetrics(v []RawPodMetrics, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv533 := range v {
		yy534 := &yyv533
		yy534.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceRawPodMetrics(v *[]RawPodMetrics, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv535 := *v
	yyh535, yyl535 := z.DecSliceHelperStart()

	var yyrr535, yyrl535 int
	var yyc535, yyrt535 bool
	_, _, _ = yyc535, yyrt535, yyrl535
	yyrr535 = yyl535

	if yyv535 == nil {
		if yyrl535, yyrt535 = z.DecInferLen(yyl535, z.DecBasicHandle().MaxInitLen, 160); yyrt535 {
			yyrr535 = yyrl535
		}
		yyv535 = make([]RawPodMetrics, yyrl535)
		yyc535 = true
	}

	if yyl535 == 0 {
		if len(yyv535) != 0 {
			yyv535 = yyv535[:0]
			yyc535 = true
		}
	} else if yyl535 > 0 {

		if yyl535 > cap(yyv535) {
			yyrl535, yyrt535 = z.DecInferLen(yyl535, z.DecBasicHandle().MaxInitLen, 160)
			yyv535 = make([]RawPodMetrics, yyrl535)
			yyc535 = true

			yyrr535 = len(yyv535)
		} else if yyl535 != len(yyv535) {
			yyv535 = yyv535[:yyl535]
			yyc535 = true
		}
		yyj535 := 0
		for ; yyj535 < yyrr535; yyj535++ {
			if r.TryDecodeAsNil() {
				yyv535[yyj535] = RawPodMetrics{}
			} else {
				yyv536 := &yyv535[yyj535]
				yyv536.CodecDecodeSelf(d)
			}

		}
		if yyrt535 {
			for ; yyj535 < yyl535; yyj535++ {
				yyv535 = append(yyv535, RawPodMetrics{})
				if r.TryDecodeAsNil() {
					yyv535[yyj535] = RawPodMetrics{}
				} else {
					yyv537 := &yyv535[yyj535]
					yyv537.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj535 := 0; !r.CheckBreak(); yyj535++ {
			if yyj535 >= len(yyv535) {
				yyv535 = append(yyv535, RawPodMetrics{}) // var yyz535 RawPodMetrics
				yyc535 = true
			}

			if yyj535 < len(yyv535) {
				if r.TryDecodeAsNil() {
					yyv535[yyj535] = RawPodMetrics{}
				} else {
					yyv538 := &yyv535[yyj535]
					yyv538.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh535.End()
	}
	if yyc535 {
		*v = yyv535
	}

}

func (x codecSelfer1234) encSliceContainerSample(v []ContainerSample, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv539 := range v {
		yy540 := &yyv539
		yy540.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceContainerSample(v *[]ContainerSample, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv541 := *v
	yyh541, yyl541 := z.DecSliceHelperStart()

	var yyrr541, yyrl541 int
	var yyc541, yyrt541 bool
	_, _, _ = yyc541, yyrt541, yyrl541
	yyrr541 = yyl541

	if yyv541 == nil {
		if yyrl541, yyrt541 = z.DecInferLen(yyl541, z.DecBasicHandle().MaxInitLen, 64); yyrt541 {
			yyrr541 = yyrl541
		}
		yyv541 = make([]ContainerSample, yyrl541)
		yyc541 = true
	}

	if yyl541 == 0 {
		if len(yyv541) != 0 {
			yyv541 = yyv541[:0]
			yyc541 = true
		}
	} else if yyl541 > 0 {

		if yyl541 > cap(yyv541) {
			yyrl541, yyrt541 = z.DecInferLen(yyl541, z.DecBasicHandle().MaxInitLen, 64)
			yyv541 = make([]ContainerSample, yyrl541)
			yyc541 = true

			yyrr541 = len(yyv541)
		} else if yyl541 != len(yyv541) {
			yyv541 = yyv541[:yyl541]
			yyc541 = true
		}
		yyj541 := 0
		for ; yyj541 < yyrr541; yyj541++ {
			if r.TryDecodeAsNil() {
				yyv541[yyj541] = ContainerSample{}
			} else {
				yyv542 := &yyv541[yyj541]
				yyv542.CodecDecodeSelf(d)
			}

		}
		if yyrt541 {
			for ; yyj541 < yyl541; yyj541++ {
				yyv541 = append(yyv541, ContainerSample{})
				if r.TryDecodeAsNil() {
					yyv541[yyj541] = ContainerSample{}
				} else {
					yyv543 := &yyv541[yyj541]
					yyv543.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj541 := 0; !r.CheckBreak(); yyj541++ {
			if yyj541 >= len(yyv541) {
				yyv541 = append(yyv541, ContainerSample{}) // var yyz541 ContainerSample
				yyc541 = true
			}

			if yyj541 < len(yyv541) {
				if r.TryDecodeAsNil() {
					yyv541[yyj541] = ContainerSample{}
				} else {
					yyv544 := &yyv541[yyj541]
					yyv544.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh541.End()
	}
	if yyc541 {
		*v = yyv541
	}

}

func (x codecSelfer1234) encSliceCustomMetric(v []CustomMetric, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv545 := range v {
		yy546 := &yyv545
		yy546.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCustomMetric(v *[]CustomMetric, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv547 := *v
	yyh547, yyl547 := z.DecSliceHelperStart()

	var yyrr547, yyrl547 int
	var yyc547, yyrt547 bool
	_, _, _ = yyc547, yyrt547, yyrl547
	yyrr547 = yyl547

	if yyv547 == nil {
		if yyrl547, yyrt547 = z.DecInferLen(yyl547, z.DecBasicHandle().MaxInitLen, 72); yyrt547 {
			yyrr547 = yyrl547
		}
		yyv547 = make([]CustomMetric, yyrl547)
		yyc547 = true
	}

	if yyl547 == 0 {
		if len(yyv547) != 0 {
			yyv547 = yyv547[:0]
			yyc547 = true
		}
	} else if yyl547 > 0 {

		if yyl547 > cap(yyv547) {
			yyrl547, yyrt547 = z.DecInferLen(yyl547, z.DecBasicHandle().MaxInitLen, 72)
			yyv547 = make([]CustomMetric, yyrl547)
			yyc547 = true

			yyrr547 = len(yyv547)
		} else if yyl547 != len(yyv547) {
			yyv547 = yyv547[:yyl547]
			yyc547 = true
		}
		yyj547 := 0
		for ; yyj547 < yyrr547; yyj547++ {
			if r.TryDecodeAsNil() {
				yyv547[yyj547] = CustomMetric{}
			} else {
				yyv548 := &yyv547[yyj547]
				yyv548.CodecDecodeSelf(d)
			}

		}
		if yyrt547 {
			for ; yyj547 < yyl547; yyj547++ {
				yyv547 = append(yyv547, CustomMetric{})
				if r.TryDecodeAsNil() {
					yyv547[yyj547] = CustomMetric{}
				} else {
					yyv549 := &yyv547[yyj547]
					yyv549.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj547 := 0; !r.CheckBreak(); yyj547++ {
			if yyj547 >= len(yyv547) {
				yyv547 = append(yyv547, CustomMetric{}) // var yyz547 CustomMetric
				yyc547 = true
			}

			if yyj547 < len(yyv547) {
				if r.TryDecodeAsNil() {
					yyv547[yyj547] = CustomMetric{}
				} else {
					yyv550 := &yyv547[yyj547]
					yyv550.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh547.End()
	}
	if yyc547 {
		*v = yyv547
	}

}

func (x codecSelfer1234) encSliceFilesystemMetrics(v []FilesystemMetrics, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv551 := range v {
		yy552 := &yyv551
		yy552.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceFilesystemMetrics(v *[]FilesystemMetrics, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv553 := *v
	yyh553, yyl553 := z.DecSliceHelperStart()

	var yyrr553, yyrl553 int
	var yyc553, yyrt553 bool
	_, _, _ = yyc553, yyrt553, yyrl553
	yyrr553 = yyl553

	if yyv553 == nil {
		if yyrl553, yyrt553 = z.DecInferLen(yyl553, z.DecBasicHandle().MaxInitLen, 32); yyrt553 {
			yyrr553 = yyrl553
		}
		yyv553 = make([]FilesystemMetrics, yyrl553)
		yyc553 = true
	}

	if yyl553 == 0 {
		if len(yyv553) != 0 {
			yyv553 = yyv553[:0]
			yyc553 = true
		}
	} else if yyl553 > 0 {

		if yyl553 > cap(yyv553) {
			yyrl553, yyrt553 = z.DecInferLen(yyl553, z.DecBasicHandle().MaxInitLen, 32)
			yyv553 = make([]FilesystemMetrics, yyrl553)
			yyc553 = true

			yyrr553 = len(yyv553)
		} else if yyl553 != len(yyv553) {
			yyv553 = yyv553[:yyl553]
			yyc553 = true
		}
		yyj553 := 0
		for ; yyj553 < yyrr553; yyj553++ {
			if r.TryDecodeAsNil() {
				yyv553[yyj553] = FilesystemMetrics{}
			} else {
				yyv554 := &yyv553[yyj553]
				yyv554.CodecDecodeSelf(d)
			}

		}
		if yyrt553 {
			for ; yyj553 < yyl553; yyj553++ {
				yyv553 = append(yyv553, FilesystemMetrics{})
				if r.TryDecodeAsNil() {
					yyv553[yyj553] = FilesystemMetrics{}
				} else {
					yyv555 := &yyv553[yyj553]
					yyv555.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj553 := 0; !r.CheckBreak(); yyj553++ {
			if yyj553 >= len(yyv553) {
				yyv553 = append(yyv553, FilesystemMetrics{}) // var yyz553 FilesystemMetrics
				yyc553 = true
			}

			if yyj553 < len(yyv553) {
				if r.TryDecodeAsNil() {
					yyv553[yyj553] = FilesystemMetrics{}
				} else {
					yyv556 := &yyv553[yyj553]
					yyv556.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh553.End()
	}
	if yyc553 {
		*v = yyv553
	}

}

func (x codecSelfer1234) encSliceCustomMetricSample(v []CustomMetricSample, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv557 := range v {
		yy558 := &yyv557
		yy558.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceCustomMetricSample(v *[]CustomMetricSample, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv559 := *v
	yyh559, yyl559 := z.DecSliceHelperStart()

	var yyrr559, yyrl559 int
	var yyc559, yyrt559 bool
	_, _, _ = yyc559, yyrt559, yyrl559
	yyrr559 = yyl559

	if yyv559 == nil {
		if yyrl559, yyrt559 = z.DecInferLen(yyl559, z.DecBasicHandle().MaxInitLen, 56); yyrt559 {
			yyrr559 = yyrl559
		}
		yyv559 = make([]CustomMetricSample, yyrl559)
		yyc559 = true
	}

	if yyl559 == 0 {
		if len(yyv559) != 0 {
			yyv559 = yyv559[:0]
			yyc559 = true
		}
	} else if yyl559 > 0 {

		if yyl559 > cap(yyv559) {
			yyrl559, yyrt559 = z.DecInferLen(yyl559, z.DecBasicHandle().MaxInitLen, 56)
			yyv559 = make([]CustomMetricSample, yyrl559)
			yyc559 = true

			yyrr559 = len(yyv559)
		} else if yyl559 != len(yyv559) {
			yyv559 = yyv559[:yyl559]
			yyc559 = true
		}
		yyj559 := 0
		for ; yyj559 < yyrr559; yyj559++ {
			if r.TryDecodeAsNil() {
				yyv559[yyj559] = CustomMetricSample{}
			} else {
				yyv560 := &yyv559[yyj559]
				yyv560.CodecDecodeSelf(d)
			}

		}
		if yyrt559 {
			for ; yyj559 < yyl559; yyj559++ {
				yyv559 = append(yyv559, CustomMetricSample{})
				if r.TryDecodeAsNil() {
					yyv559[yyj559] = CustomMetricSample{}
				} else {
					yyv561 := &yyv559[yyj559]
					yyv561.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj559 := 0; !r.CheckBreak(); yyj559++ {
			if yyj559 >= len(yyv559) {
				yyv559 = append(yyv559, CustomMetricSample{}) // var yyz559 CustomMetricSample
				yyc559 = true
			}

			if yyj559 < len(yyv559) {
				if r.TryDecodeAsNil() {
					yyv559[yyj559] = CustomMetricSample{}
				} else {
					yyv562 := &yyv559[yyj559]
					yyv562.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh559.End()
	}
	if yyc559 {
		*v = yyv559
	}

}
