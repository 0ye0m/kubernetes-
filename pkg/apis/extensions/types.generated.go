/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg6_util.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	if !yyhl8 {
		r.ReadEnd()
	}
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadEnd()
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				var yynn13 int = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
			}
			if yyr13 || yy2arr13 {
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yysep13 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	if !yyhl22 {
		r.ReadEnd()
	}
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	r.ReadEnd()
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				var yynn31 int = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
			}
			if yyr31 || yy2arr31 {
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else if z.HasExtensions() && z.EncExt(yy39) {
					} else {
						z.EncFallback(yy39)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy41 := &x.ObjectMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[3] {
					yy44 := &x.Spec
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy45 := &x.Spec
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[4] {
					yy47 := &x.Status
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy48 := &x.Status
					yy48.CodecEncodeSelf(e)
				}
			}
			if yysep31 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		switch yys51 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv54 := &x.ObjectMeta
				yym55 := z.DecBinary()
				_ = yym55
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv54) {
				} else {
					z.DecFallback(yyv54, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv56 := &x.Spec
				yyv56.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv57 := &x.Status
				yyv57.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	if !yyhl51 {
		r.ReadEnd()
	}
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj58 int
	var yyb58 bool
	var yyhl58 bool = l >= 0
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv61 := &x.ObjectMeta
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv61) {
		} else {
			z.DecFallback(yyv61, false)
		}
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv63 := &x.Spec
		yyv63.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv64 := &x.Status
		yyv64.CodecDecodeSelf(d)
	}
	for {
		yyj58++
		if yyhl58 {
			yyb58 = yyj58 > l
		} else {
			yyb58 = r.CheckBreak()
		}
		if yyb58 {
			break
		}
		z.DecStructFieldNotFound(yyj58-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym65 := z.EncBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep66 := !z.EncBinary()
			yy2arr66 := z.EncBasicHandle().StructToArray
			var yyq66 [2]bool
			_, _, _ = yysep66, yyq66, yy2arr66
			const yyr66 bool = false
			yyq66[0] = x.Kind != ""
			yyq66[1] = x.APIVersion != ""
			if yyr66 || yy2arr66 {
				r.EncodeArrayStart(2)
			} else {
				var yynn66 int = 0
				for _, b := range yyq66 {
					if b {
						yynn66++
					}
				}
				r.EncodeMapStart(yynn66)
			}
			if yyr66 || yy2arr66 {
				if yyq66[0] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr66 || yy2arr66 {
				if yyq66[1] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yysep66 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym73 := z.DecBinary()
	_ = yym73
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl74 := r.ReadMapStart()
			if yyl74 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl74, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl74 := r.ReadArrayStart()
			if yyl74 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl74, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys75Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys75Slc
	var yyhl75 bool = l >= 0
	for yyj75 := 0; ; yyj75++ {
		if yyhl75 {
			if yyj75 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys75Slc = r.DecodeBytes(yys75Slc, true, true)
		yys75 := string(yys75Slc)
		switch yys75 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys75)
		} // end switch yys75
	} // end for yyj75
	if !yyhl75 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj78 int
	var yyb78 bool
	var yyhl78 bool = l >= 0
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj78++
		if yyhl78 {
			yyb78 = yyj78 > l
		} else {
			yyb78 = r.CheckBreak()
		}
		if yyb78 {
			break
		}
		z.DecStructFieldNotFound(yyj78-1, "")
	}
	r.ReadEnd()
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [5]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[0] = x.Kind != ""
			yyq82[1] = x.Namespace != ""
			yyq82[2] = x.Name != ""
			yyq82[3] = x.APIVersion != ""
			yyq82[4] = x.Subresource != ""
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(5)
			} else {
				var yynn82 int = 0
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
			}
			if yyr82 || yy2arr82 {
				if yyq82[0] {
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[1] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[1] {
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[2] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[2] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[3] {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[3] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr82 || yy2arr82 {
				if yyq82[4] {
					yym96 := z.EncBinary()
					_ = yym96
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[4] {
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					yym97 := z.EncBinary()
					_ = yym97
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yysep82 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym98 := z.DecBinary()
	_ = yym98
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl99 := r.ReadMapStart()
			if yyl99 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl99, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl99 := r.ReadArrayStart()
			if yyl99 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl99, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys100Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys100Slc
	var yyhl100 bool = l >= 0
	for yyj100 := 0; ; yyj100++ {
		if yyhl100 {
			if yyj100 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys100Slc = r.DecodeBytes(yys100Slc, true, true)
		yys100 := string(yys100Slc)
		switch yys100 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys100)
		} // end switch yys100
	} // end for yyj100
	if !yyhl100 {
		r.ReadEnd()
	}
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj106 int
	var yyb106 bool
	var yyhl106 bool = l >= 0
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj106++
		if yyhl106 {
			yyb106 = yyj106 > l
		} else {
			yyb106 = r.CheckBreak()
		}
		if yyb106 {
			break
		}
		z.DecStructFieldNotFound(yyj106-1, "")
	}
	r.ReadEnd()
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym112 := z.EncBinary()
		_ = yym112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep113 := !z.EncBinary()
			yy2arr113 := z.EncBasicHandle().StructToArray
			var yyq113 [1]bool
			_, _, _ = yysep113, yyq113, yy2arr113
			const yyr113 bool = false
			if yyr113 || yy2arr113 {
				r.EncodeArrayStart(1)
			} else {
				var yynn113 int = 1
				for _, b := range yyq113 {
					if b {
						yynn113++
					}
				}
				r.EncodeMapStart(yynn113)
			}
			if yyr113 || yy2arr113 {
				yym115 := z.EncBinary()
				_ = yym115
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				yym116 := z.EncBinary()
				_ = yym116
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yysep113 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym117 := z.DecBinary()
	_ = yym117
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl118 := r.ReadMapStart()
			if yyl118 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl118, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl118 := r.ReadArrayStart()
			if yyl118 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl118, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys119Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys119Slc
	var yyhl119 bool = l >= 0
	for yyj119 := 0; ; yyj119++ {
		if yyhl119 {
			if yyj119 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys119Slc = r.DecodeBytes(yys119Slc, true, true)
		yys119 := string(yys119Slc)
		switch yys119 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys119)
		} // end switch yys119
	} // end for yyj119
	if !yyhl119 {
		r.ReadEnd()
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj121 int
	var yyb121 bool
	var yyhl121 bool = l >= 0
	yyj121++
	if yyhl121 {
		yyb121 = yyj121 > l
	} else {
		yyb121 = r.CheckBreak()
	}
	if yyb121 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj121++
		if yyhl121 {
			yyb121 = yyj121 > l
		} else {
			yyb121 = r.CheckBreak()
		}
		if yyb121 {
			break
		}
		z.DecStructFieldNotFound(yyj121-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym123 := z.EncBinary()
		_ = yym123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep124 := !z.EncBinary()
			yy2arr124 := z.EncBasicHandle().StructToArray
			var yyq124 [4]bool
			_, _, _ = yysep124, yyq124, yy2arr124
			const yyr124 bool = false
			yyq124[1] = x.MinReplicas != nil
			yyq124[3] = x.CPUUtilization != nil
			if yyr124 || yy2arr124 {
				r.EncodeArrayStart(4)
			} else {
				var yynn124 int = 2
				for _, b := range yyq124 {
					if b {
						yynn124++
					}
				}
				r.EncodeMapStart(yynn124)
			}
			if yyr124 || yy2arr124 {
				yy126 := &x.ScaleRef
				yy126.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				yy127 := &x.ScaleRef
				yy127.CodecEncodeSelf(e)
			}
			if yyr124 || yy2arr124 {
				if yyq124[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy129 := *x.MinReplicas
						yym130 := z.EncBinary()
						_ = yym130
						if false {
						} else {
							r.EncodeInt(int64(yy129))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq124[1] {
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy131 := *x.MinReplicas
						yym132 := z.EncBinary()
						_ = yym132
						if false {
						} else {
							r.EncodeInt(int64(yy131))
						}
					}
				}
			}
			if yyr124 || yy2arr124 {
				yym134 := z.EncBinary()
				_ = yym134
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				yym135 := z.EncBinary()
				_ = yym135
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr124 || yy2arr124 {
				if yyq124[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq124[3] {
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yysep124 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym137 := z.DecBinary()
	_ = yym137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl138 := r.ReadMapStart()
			if yyl138 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl138, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl138 := r.ReadArrayStart()
			if yyl138 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl138, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys139Slc
	var yyhl139 bool = l >= 0
	for yyj139 := 0; ; yyj139++ {
		if yyhl139 {
			if yyj139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys139Slc = r.DecodeBytes(yys139Slc, true, true)
		yys139 := string(yys139Slc)
		switch yys139 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv140 := &x.ScaleRef
				yyv140.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym142 := z.DecBinary()
				_ = yym142
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys139)
		} // end switch yys139
	} // end for yyj139
	if !yyhl139 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj145 int
	var yyb145 bool
	var yyhl145 bool = l >= 0
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv146 := &x.ScaleRef
		yyv146.CodecDecodeSelf(d)
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym148 := z.DecBinary()
		_ = yym148
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj145++
		if yyhl145 {
			yyb145 = yyj145 > l
		} else {
			yyb145 = r.CheckBreak()
		}
		if yyb145 {
			break
		}
		z.DecStructFieldNotFound(yyj145-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym151 := z.EncBinary()
		_ = yym151
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep152 := !z.EncBinary()
			yy2arr152 := z.EncBasicHandle().StructToArray
			var yyq152 [5]bool
			_, _, _ = yysep152, yyq152, yy2arr152
			const yyr152 bool = false
			yyq152[0] = x.ObservedGeneration != nil
			yyq152[1] = x.LastScaleTime != nil
			yyq152[4] = x.CurrentCPUUtilizationPercentage != nil
			if yyr152 || yy2arr152 {
				r.EncodeArrayStart(5)
			} else {
				var yynn152 int = 2
				for _, b := range yyq152 {
					if b {
						yynn152++
					}
				}
				r.EncodeMapStart(yynn152)
			}
			if yyr152 || yy2arr152 {
				if yyq152[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy154 := *x.ObservedGeneration
						yym155 := z.EncBinary()
						_ = yym155
						if false {
						} else {
							r.EncodeInt(int64(yy154))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq152[0] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy156 := *x.ObservedGeneration
						yym157 := z.EncBinary()
						_ = yym157
						if false {
						} else {
							r.EncodeInt(int64(yy156))
						}
					}
				}
			}
			if yyr152 || yy2arr152 {
				if yyq152[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym159 := z.EncBinary()
						_ = yym159
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym159 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym159 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq152[1] {
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym160 := z.EncBinary()
						_ = yym160
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym160 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym160 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr152 || yy2arr152 {
				yym162 := z.EncBinary()
				_ = yym162
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				yym163 := z.EncBinary()
				_ = yym163
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr152 || yy2arr152 {
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				yym166 := z.EncBinary()
				_ = yym166
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr152 || yy2arr152 {
				if yyq152[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy168 := *x.CurrentCPUUtilizationPercentage
						yym169 := z.EncBinary()
						_ = yym169
						if false {
						} else {
							r.EncodeInt(int64(yy168))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq152[4] {
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy170 := *x.CurrentCPUUtilizationPercentage
						yym171 := z.EncBinary()
						_ = yym171
						if false {
						} else {
							r.EncodeInt(int64(yy170))
						}
					}
				}
			}
			if yysep152 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym172 := z.DecBinary()
	_ = yym172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl173 := r.ReadMapStart()
			if yyl173 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl173, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl173 := r.ReadArrayStart()
			if yyl173 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys174Slc
	var yyhl174 bool = l >= 0
	for yyj174 := 0; ; yyj174++ {
		if yyhl174 {
			if yyj174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys174Slc = r.DecodeBytes(yys174Slc, true, true)
		yys174 := string(yys174Slc)
		switch yys174 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym176 := z.DecBinary()
				_ = yym176
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym178 := z.DecBinary()
				_ = yym178
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym178 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym178 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym182 := z.DecBinary()
				_ = yym182
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys174)
		} // end switch yys174
	} // end for yyj174
	if !yyhl174 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj183 int
	var yyb183 bool
	var yyhl183 bool = l >= 0
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym185 := z.DecBinary()
		_ = yym185
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym187 := z.DecBinary()
		_ = yym187
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym187 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym187 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj183++
	if yyhl183 {
		yyb183 = yyj183 > l
	} else {
		yyb183 = r.CheckBreak()
	}
	if yyb183 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym191 := z.DecBinary()
		_ = yym191
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj183++
		if yyhl183 {
			yyb183 = yyj183 > l
		} else {
			yyb183 = r.CheckBreak()
		}
		if yyb183 {
			break
		}
		z.DecStructFieldNotFound(yyj183-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym192 := z.EncBinary()
		_ = yym192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep193 := !z.EncBinary()
			yy2arr193 := z.EncBasicHandle().StructToArray
			var yyq193 [5]bool
			_, _, _ = yysep193, yyq193, yy2arr193
			const yyr193 bool = false
			yyq193[0] = x.Kind != ""
			yyq193[1] = x.APIVersion != ""
			yyq193[2] = true
			yyq193[3] = true
			yyq193[4] = true
			if yyr193 || yy2arr193 {
				r.EncodeArrayStart(5)
			} else {
				var yynn193 int = 0
				for _, b := range yyq193 {
					if b {
						yynn193++
					}
				}
				r.EncodeMapStart(yynn193)
			}
			if yyr193 || yy2arr193 {
				if yyq193[0] {
					yym195 := z.EncBinary()
					_ = yym195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq193[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym196 := z.EncBinary()
					_ = yym196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr193 || yy2arr193 {
				if yyq193[1] {
					yym198 := z.EncBinary()
					_ = yym198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq193[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym199 := z.EncBinary()
					_ = yym199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr193 || yy2arr193 {
				if yyq193[2] {
					yy201 := &x.ObjectMeta
					yym202 := z.EncBinary()
					_ = yym202
					if false {
					} else if z.HasExtensions() && z.EncExt(yy201) {
					} else {
						z.EncFallback(yy201)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq193[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy203 := &x.ObjectMeta
					yym204 := z.EncBinary()
					_ = yym204
					if false {
					} else if z.HasExtensions() && z.EncExt(yy203) {
					} else {
						z.EncFallback(yy203)
					}
				}
			}
			if yyr193 || yy2arr193 {
				if yyq193[3] {
					yy206 := &x.Spec
					yy206.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq193[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy207 := &x.Spec
					yy207.CodecEncodeSelf(e)
				}
			}
			if yyr193 || yy2arr193 {
				if yyq193[4] {
					yy209 := &x.Status
					yy209.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq193[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy210 := &x.Status
					yy210.CodecEncodeSelf(e)
				}
			}
			if yysep193 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym211 := z.DecBinary()
	_ = yym211
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl212 := r.ReadMapStart()
			if yyl212 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl212, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl212 := r.ReadArrayStart()
			if yyl212 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl212, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys213Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys213Slc
	var yyhl213 bool = l >= 0
	for yyj213 := 0; ; yyj213++ {
		if yyhl213 {
			if yyj213 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys213Slc = r.DecodeBytes(yys213Slc, true, true)
		yys213 := string(yys213Slc)
		switch yys213 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv216 := &x.ObjectMeta
				yym217 := z.DecBinary()
				_ = yym217
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv216) {
				} else {
					z.DecFallback(yyv216, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv218 := &x.Spec
				yyv218.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv219 := &x.Status
				yyv219.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys213)
		} // end switch yys213
	} // end for yyj213
	if !yyhl213 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj220 int
	var yyb220 bool
	var yyhl220 bool = l >= 0
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv223 := &x.ObjectMeta
		yym224 := z.DecBinary()
		_ = yym224
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv223) {
		} else {
			z.DecFallback(yyv223, false)
		}
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv225 := &x.Spec
		yyv225.CodecDecodeSelf(d)
	}
	yyj220++
	if yyhl220 {
		yyb220 = yyj220 > l
	} else {
		yyb220 = r.CheckBreak()
	}
	if yyb220 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv226 := &x.Status
		yyv226.CodecDecodeSelf(d)
	}
	for {
		yyj220++
		if yyhl220 {
			yyb220 = yyj220 > l
		} else {
			yyb220 = r.CheckBreak()
		}
		if yyb220 {
			break
		}
		z.DecStructFieldNotFound(yyj220-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym227 := z.EncBinary()
		_ = yym227
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep228 := !z.EncBinary()
			yy2arr228 := z.EncBasicHandle().StructToArray
			var yyq228 [4]bool
			_, _, _ = yysep228, yyq228, yy2arr228
			const yyr228 bool = false
			yyq228[0] = x.Kind != ""
			yyq228[1] = x.APIVersion != ""
			yyq228[2] = true
			if yyr228 || yy2arr228 {
				r.EncodeArrayStart(4)
			} else {
				var yynn228 int = 1
				for _, b := range yyq228 {
					if b {
						yynn228++
					}
				}
				r.EncodeMapStart(yynn228)
			}
			if yyr228 || yy2arr228 {
				if yyq228[0] {
					yym230 := z.EncBinary()
					_ = yym230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq228[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym231 := z.EncBinary()
					_ = yym231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr228 || yy2arr228 {
				if yyq228[1] {
					yym233 := z.EncBinary()
					_ = yym233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq228[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym234 := z.EncBinary()
					_ = yym234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr228 || yy2arr228 {
				if yyq228[2] {
					yy236 := &x.ListMeta
					yym237 := z.EncBinary()
					_ = yym237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy236) {
					} else {
						z.EncFallback(yy236)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq228[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy238 := &x.ListMeta
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else if z.HasExtensions() && z.EncExt(yy238) {
					} else {
						z.EncFallback(yy238)
					}
				}
			}
			if yyr228 || yy2arr228 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym241 := z.EncBinary()
					_ = yym241
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym242 := z.EncBinary()
					_ = yym242
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep228 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym243 := z.DecBinary()
	_ = yym243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl244 := r.ReadMapStart()
			if yyl244 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl244, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl244 := r.ReadArrayStart()
			if yyl244 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl244, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys245Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys245Slc
	var yyhl245 bool = l >= 0
	for yyj245 := 0; ; yyj245++ {
		if yyhl245 {
			if yyj245 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys245Slc = r.DecodeBytes(yys245Slc, true, true)
		yys245 := string(yys245Slc)
		switch yys245 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv248 := &x.ListMeta
				yym249 := z.DecBinary()
				_ = yym249
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv248) {
				} else {
					z.DecFallback(yyv248, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv250 := &x.Items
				yym251 := z.DecBinary()
				_ = yym251
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv250), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys245)
		} // end switch yys245
	} // end for yyj245
	if !yyhl245 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj252 int
	var yyb252 bool
	var yyhl252 bool = l >= 0
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv255 := &x.ListMeta
		yym256 := z.DecBinary()
		_ = yym256
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv255) {
		} else {
			z.DecFallback(yyv255, false)
		}
	}
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv257 := &x.Items
		yym258 := z.DecBinary()
		_ = yym258
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv257), d)
		}
	}
	for {
		yyj252++
		if yyhl252 {
			yyb252 = yyj252 > l
		} else {
			yyb252 = r.CheckBreak()
		}
		if yyb252 {
			break
		}
		z.DecStructFieldNotFound(yyj252-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym259 := z.EncBinary()
		_ = yym259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep260 := !z.EncBinary()
			yy2arr260 := z.EncBasicHandle().StructToArray
			var yyq260 [5]bool
			_, _, _ = yysep260, yyq260, yy2arr260
			const yyr260 bool = false
			yyq260[0] = x.Kind != ""
			yyq260[1] = x.APIVersion != ""
			yyq260[2] = true
			yyq260[3] = x.Description != ""
			yyq260[4] = len(x.Versions) != 0
			if yyr260 || yy2arr260 {
				r.EncodeArrayStart(5)
			} else {
				var yynn260 int = 0
				for _, b := range yyq260 {
					if b {
						yynn260++
					}
				}
				r.EncodeMapStart(yynn260)
			}
			if yyr260 || yy2arr260 {
				if yyq260[0] {
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq260[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym263 := z.EncBinary()
					_ = yym263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr260 || yy2arr260 {
				if yyq260[1] {
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq260[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr260 || yy2arr260 {
				if yyq260[2] {
					yy268 := &x.ObjectMeta
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else if z.HasExtensions() && z.EncExt(yy268) {
					} else {
						z.EncFallback(yy268)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq260[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy270 := &x.ObjectMeta
					yym271 := z.EncBinary()
					_ = yym271
					if false {
					} else if z.HasExtensions() && z.EncExt(yy270) {
					} else {
						z.EncFallback(yy270)
					}
				}
			}
			if yyr260 || yy2arr260 {
				if yyq260[3] {
					yym273 := z.EncBinary()
					_ = yym273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq260[3] {
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					yym274 := z.EncBinary()
					_ = yym274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr260 || yy2arr260 {
				if yyq260[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym276 := z.EncBinary()
						_ = yym276
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq260[4] {
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym277 := z.EncBinary()
						_ = yym277
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yysep260 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym278 := z.DecBinary()
	_ = yym278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl279 := r.ReadMapStart()
			if yyl279 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl279, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl279 := r.ReadArrayStart()
			if yyl279 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys280Slc
	var yyhl280 bool = l >= 0
	for yyj280 := 0; ; yyj280++ {
		if yyhl280 {
			if yyj280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys280Slc = r.DecodeBytes(yys280Slc, true, true)
		yys280 := string(yys280Slc)
		switch yys280 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv283 := &x.ObjectMeta
				yym284 := z.DecBinary()
				_ = yym284
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv283) {
				} else {
					z.DecFallback(yyv283, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv286 := &x.Versions
				yym287 := z.DecBinary()
				_ = yym287
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv286), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys280)
		} // end switch yys280
	} // end for yyj280
	if !yyhl280 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj288 int
	var yyb288 bool
	var yyhl288 bool = l >= 0
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv291 := &x.ObjectMeta
		yym292 := z.DecBinary()
		_ = yym292
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv291) {
		} else {
			z.DecFallback(yyv291, false)
		}
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj288++
	if yyhl288 {
		yyb288 = yyj288 > l
	} else {
		yyb288 = r.CheckBreak()
	}
	if yyb288 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv294 := &x.Versions
		yym295 := z.DecBinary()
		_ = yym295
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv294), d)
		}
	}
	for {
		yyj288++
		if yyhl288 {
			yyb288 = yyj288 > l
		} else {
			yyb288 = r.CheckBreak()
		}
		if yyb288 {
			break
		}
		z.DecStructFieldNotFound(yyj288-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym296 := z.EncBinary()
		_ = yym296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep297 := !z.EncBinary()
			yy2arr297 := z.EncBasicHandle().StructToArray
			var yyq297 [4]bool
			_, _, _ = yysep297, yyq297, yy2arr297
			const yyr297 bool = false
			yyq297[0] = x.Kind != ""
			yyq297[1] = x.APIVersion != ""
			yyq297[2] = true
			if yyr297 || yy2arr297 {
				r.EncodeArrayStart(4)
			} else {
				var yynn297 int = 1
				for _, b := range yyq297 {
					if b {
						yynn297++
					}
				}
				r.EncodeMapStart(yynn297)
			}
			if yyr297 || yy2arr297 {
				if yyq297[0] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr297 || yy2arr297 {
				if yyq297[1] {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr297 || yy2arr297 {
				if yyq297[2] {
					yy305 := &x.ListMeta
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else if z.HasExtensions() && z.EncExt(yy305) {
					} else {
						z.EncFallback(yy305)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy307 := &x.ListMeta
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else if z.HasExtensions() && z.EncExt(yy307) {
					} else {
						z.EncFallback(yy307)
					}
				}
			}
			if yyr297 || yy2arr297 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym310 := z.EncBinary()
					_ = yym310
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym311 := z.EncBinary()
					_ = yym311
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yysep297 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym312 := z.DecBinary()
	_ = yym312
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl313 := r.ReadMapStart()
			if yyl313 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl313, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl313 := r.ReadArrayStart()
			if yyl313 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl313, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys314Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys314Slc
	var yyhl314 bool = l >= 0
	for yyj314 := 0; ; yyj314++ {
		if yyhl314 {
			if yyj314 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys314Slc = r.DecodeBytes(yys314Slc, true, true)
		yys314 := string(yys314Slc)
		switch yys314 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv317 := &x.ListMeta
				yym318 := z.DecBinary()
				_ = yym318
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv317) {
				} else {
					z.DecFallback(yyv317, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv319 := &x.Items
				yym320 := z.DecBinary()
				_ = yym320
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv319), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys314)
		} // end switch yys314
	} // end for yyj314
	if !yyhl314 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj321 int
	var yyb321 bool
	var yyhl321 bool = l >= 0
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv324 := &x.ListMeta
		yym325 := z.DecBinary()
		_ = yym325
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv324) {
		} else {
			z.DecFallback(yyv324, false)
		}
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv326 := &x.Items
		yym327 := z.DecBinary()
		_ = yym327
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv326), d)
		}
	}
	for {
		yyj321++
		if yyhl321 {
			yyb321 = yyj321 > l
		} else {
			yyb321 = r.CheckBreak()
		}
		if yyb321 {
			break
		}
		z.DecStructFieldNotFound(yyj321-1, "")
	}
	r.ReadEnd()
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym328 := z.EncBinary()
		_ = yym328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep329 := !z.EncBinary()
			yy2arr329 := z.EncBasicHandle().StructToArray
			var yyq329 [2]bool
			_, _, _ = yysep329, yyq329, yy2arr329
			const yyr329 bool = false
			yyq329[0] = x.Name != ""
			yyq329[1] = x.APIGroup != ""
			if yyr329 || yy2arr329 {
				r.EncodeArrayStart(2)
			} else {
				var yynn329 int = 0
				for _, b := range yyq329 {
					if b {
						yynn329++
					}
				}
				r.EncodeMapStart(yynn329)
			}
			if yyr329 || yy2arr329 {
				if yyq329[0] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr329 || yy2arr329 {
				if yyq329[1] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq329[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yysep329 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl337 := r.ReadMapStart()
			if yyl337 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl337, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl337 := r.ReadArrayStart()
			if yyl337 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl337, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys338Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys338Slc
	var yyhl338 bool = l >= 0
	for yyj338 := 0; ; yyj338++ {
		if yyhl338 {
			if yyj338 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys338Slc = r.DecodeBytes(yys338Slc, true, true)
		yys338 := string(yys338Slc)
		switch yys338 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys338)
		} // end switch yys338
	} // end for yyj338
	if !yyhl338 {
		r.ReadEnd()
	}
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj341 int
	var yyb341 bool
	var yyhl341 bool = l >= 0
	yyj341++
	if yyhl341 {
		yyb341 = yyj341 > l
	} else {
		yyb341 = r.CheckBreak()
	}
	if yyb341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj341++
	if yyhl341 {
		yyb341 = yyj341 > l
	} else {
		yyb341 = r.CheckBreak()
	}
	if yyb341 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj341++
		if yyhl341 {
			yyb341 = yyj341 > l
		} else {
			yyb341 = r.CheckBreak()
		}
		if yyb341 {
			break
		}
		z.DecStructFieldNotFound(yyj341-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym344 := z.EncBinary()
		_ = yym344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep345 := !z.EncBinary()
			yy2arr345 := z.EncBasicHandle().StructToArray
			var yyq345 [4]bool
			_, _, _ = yysep345, yyq345, yy2arr345
			const yyr345 bool = false
			yyq345[0] = x.Kind != ""
			yyq345[1] = x.APIVersion != ""
			yyq345[2] = true
			yyq345[3] = len(x.Data) != 0
			if yyr345 || yy2arr345 {
				r.EncodeArrayStart(4)
			} else {
				var yynn345 int = 0
				for _, b := range yyq345 {
					if b {
						yynn345++
					}
				}
				r.EncodeMapStart(yynn345)
			}
			if yyr345 || yy2arr345 {
				if yyq345[0] {
					yym347 := z.EncBinary()
					_ = yym347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq345[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym348 := z.EncBinary()
					_ = yym348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr345 || yy2arr345 {
				if yyq345[1] {
					yym350 := z.EncBinary()
					_ = yym350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq345[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym351 := z.EncBinary()
					_ = yym351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr345 || yy2arr345 {
				if yyq345[2] {
					yy353 := &x.ObjectMeta
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else if z.HasExtensions() && z.EncExt(yy353) {
					} else {
						z.EncFallback(yy353)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq345[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy355 := &x.ObjectMeta
					yym356 := z.EncBinary()
					_ = yym356
					if false {
					} else if z.HasExtensions() && z.EncExt(yy355) {
					} else {
						z.EncFallback(yy355)
					}
				}
			}
			if yyr345 || yy2arr345 {
				if yyq345[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym358 := z.EncBinary()
						_ = yym358
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq345[3] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym359 := z.EncBinary()
						_ = yym359
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yysep345 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym360 := z.DecBinary()
	_ = yym360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl361 := r.ReadMapStart()
			if yyl361 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl361, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl361 := r.ReadArrayStart()
			if yyl361 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl361, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys362Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys362Slc
	var yyhl362 bool = l >= 0
	for yyj362 := 0; ; yyj362++ {
		if yyhl362 {
			if yyj362 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys362Slc = r.DecodeBytes(yys362Slc, true, true)
		yys362 := string(yys362Slc)
		switch yys362 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv365 := &x.ObjectMeta
				yym366 := z.DecBinary()
				_ = yym366
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv365) {
				} else {
					z.DecFallback(yyv365, false)
				}
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv367 := &x.Data
				yym368 := z.DecBinary()
				_ = yym368
				if false {
				} else {
					*yyv367 = r.DecodeBytes(*(*[]byte)(yyv367), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys362)
		} // end switch yys362
	} // end for yyj362
	if !yyhl362 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj369 int
	var yyb369 bool
	var yyhl369 bool = l >= 0
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv372 := &x.ObjectMeta
		yym373 := z.DecBinary()
		_ = yym373
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv372) {
		} else {
			z.DecFallback(yyv372, false)
		}
	}
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv374 := &x.Data
		yym375 := z.DecBinary()
		_ = yym375
		if false {
		} else {
			*yyv374 = r.DecodeBytes(*(*[]byte)(yyv374), false, false)
		}
	}
	for {
		yyj369++
		if yyhl369 {
			yyb369 = yyj369 > l
		} else {
			yyb369 = r.CheckBreak()
		}
		if yyb369 {
			break
		}
		z.DecStructFieldNotFound(yyj369-1, "")
	}
	r.ReadEnd()
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym376 := z.EncBinary()
		_ = yym376
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep377 := !z.EncBinary()
			yy2arr377 := z.EncBasicHandle().StructToArray
			var yyq377 [5]bool
			_, _, _ = yysep377, yyq377, yy2arr377
			const yyr377 bool = false
			yyq377[0] = x.Kind != ""
			yyq377[1] = x.APIVersion != ""
			yyq377[2] = true
			yyq377[3] = true
			yyq377[4] = true
			if yyr377 || yy2arr377 {
				r.EncodeArrayStart(5)
			} else {
				var yynn377 int = 0
				for _, b := range yyq377 {
					if b {
						yynn377++
					}
				}
				r.EncodeMapStart(yynn377)
			}
			if yyr377 || yy2arr377 {
				if yyq377[0] {
					yym379 := z.EncBinary()
					_ = yym379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq377[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym380 := z.EncBinary()
					_ = yym380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr377 || yy2arr377 {
				if yyq377[1] {
					yym382 := z.EncBinary()
					_ = yym382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq377[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym383 := z.EncBinary()
					_ = yym383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr377 || yy2arr377 {
				if yyq377[2] {
					yy385 := &x.ObjectMeta
					yym386 := z.EncBinary()
					_ = yym386
					if false {
					} else if z.HasExtensions() && z.EncExt(yy385) {
					} else {
						z.EncFallback(yy385)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq377[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy387 := &x.ObjectMeta
					yym388 := z.EncBinary()
					_ = yym388
					if false {
					} else if z.HasExtensions() && z.EncExt(yy387) {
					} else {
						z.EncFallback(yy387)
					}
				}
			}
			if yyr377 || yy2arr377 {
				if yyq377[3] {
					yy390 := &x.Spec
					yy390.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq377[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy391 := &x.Spec
					yy391.CodecEncodeSelf(e)
				}
			}
			if yyr377 || yy2arr377 {
				if yyq377[4] {
					yy393 := &x.Status
					yy393.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq377[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy394 := &x.Status
					yy394.CodecEncodeSelf(e)
				}
			}
			if yysep377 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym395 := z.DecBinary()
	_ = yym395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl396 := r.ReadMapStart()
			if yyl396 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl396, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl396 := r.ReadArrayStart()
			if yyl396 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl396, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys397Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys397Slc
	var yyhl397 bool = l >= 0
	for yyj397 := 0; ; yyj397++ {
		if yyhl397 {
			if yyj397 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys397Slc = r.DecodeBytes(yys397Slc, true, true)
		yys397 := string(yys397Slc)
		switch yys397 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv400 := &x.ObjectMeta
				yym401 := z.DecBinary()
				_ = yym401
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv400) {
				} else {
					z.DecFallback(yyv400, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv402 := &x.Spec
				yyv402.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv403 := &x.Status
				yyv403.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys397)
		} // end switch yys397
	} // end for yyj397
	if !yyhl397 {
		r.ReadEnd()
	}
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj404 int
	var yyb404 bool
	var yyhl404 bool = l >= 0
	yyj404++
	if yyhl404 {
		yyb404 = yyj404 > l
	} else {
		yyb404 = r.CheckBreak()
	}
	if yyb404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj404++
	if yyhl404 {
		yyb404 = yyj404 > l
	} else {
		yyb404 = r.CheckBreak()
	}
	if yyb404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj404++
	if yyhl404 {
		yyb404 = yyj404 > l
	} else {
		yyb404 = r.CheckBreak()
	}
	if yyb404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv407 := &x.ObjectMeta
		yym408 := z.DecBinary()
		_ = yym408
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv407) {
		} else {
			z.DecFallback(yyv407, false)
		}
	}
	yyj404++
	if yyhl404 {
		yyb404 = yyj404 > l
	} else {
		yyb404 = r.CheckBreak()
	}
	if yyb404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv409 := &x.Spec
		yyv409.CodecDecodeSelf(d)
	}
	yyj404++
	if yyhl404 {
		yyb404 = yyj404 > l
	} else {
		yyb404 = r.CheckBreak()
	}
	if yyb404 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv410 := &x.Status
		yyv410.CodecDecodeSelf(d)
	}
	for {
		yyj404++
		if yyhl404 {
			yyb404 = yyj404 > l
		} else {
			yyb404 = r.CheckBreak()
		}
		if yyb404 {
			break
		}
		z.DecStructFieldNotFound(yyj404-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym411 := z.EncBinary()
		_ = yym411
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep412 := !z.EncBinary()
			yy2arr412 := z.EncBasicHandle().StructToArray
			var yyq412 [5]bool
			_, _, _ = yysep412, yyq412, yy2arr412
			const yyr412 bool = false
			yyq412[0] = x.Replicas != 0
			yyq412[1] = len(x.Selector) != 0
			yyq412[2] = x.Template != nil
			yyq412[3] = true
			yyq412[4] = x.UniqueLabelKey != ""
			if yyr412 || yy2arr412 {
				r.EncodeArrayStart(5)
			} else {
				var yynn412 int = 0
				for _, b := range yyq412 {
					if b {
						yynn412++
					}
				}
				r.EncodeMapStart(yynn412)
			}
			if yyr412 || yy2arr412 {
				if yyq412[0] {
					yym414 := z.EncBinary()
					_ = yym414
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq412[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr412 || yy2arr412 {
				if yyq412[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym417 := z.EncBinary()
						_ = yym417
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq412[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym418 := z.EncBinary()
						_ = yym418
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr412 || yy2arr412 {
				if yyq412[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym420 := z.EncBinary()
						_ = yym420
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq412[2] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym421 := z.EncBinary()
						_ = yym421
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				}
			}
			if yyr412 || yy2arr412 {
				if yyq412[3] {
					yy423 := &x.Strategy
					yy423.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq412[3] {
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					yy424 := &x.Strategy
					yy424.CodecEncodeSelf(e)
				}
			}
			if yyr412 || yy2arr412 {
				if yyq412[4] {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq412[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yysep412 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym428 := z.DecBinary()
	_ = yym428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl429 := r.ReadMapStart()
			if yyl429 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl429, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl429 := r.ReadArrayStart()
			if yyl429 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl429, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys430Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys430Slc
	var yyhl430 bool = l >= 0
	for yyj430 := 0; ; yyj430++ {
		if yyhl430 {
			if yyj430 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys430Slc = r.DecodeBytes(yys430Slc, true, true)
		yys430 := string(yys430Slc)
		switch yys430 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv432 := &x.Selector
				yym433 := z.DecBinary()
				_ = yym433
				if false {
				} else {
					z.F.DecMapStringStringX(yyv432, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				yym435 := z.DecBinary()
				_ = yym435
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Template) {
				} else {
					z.DecFallback(x.Template, false)
				}
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv436 := &x.Strategy
				yyv436.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys430)
		} // end switch yys430
	} // end for yyj430
	if !yyhl430 {
		r.ReadEnd()
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj438 int
	var yyb438 bool
	var yyhl438 bool = l >= 0
	yyj438++
	if yyhl438 {
		yyb438 = yyj438 > l
	} else {
		yyb438 = r.CheckBreak()
	}
	if yyb438 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj438++
	if yyhl438 {
		yyb438 = yyj438 > l
	} else {
		yyb438 = r.CheckBreak()
	}
	if yyb438 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv440 := &x.Selector
		yym441 := z.DecBinary()
		_ = yym441
		if false {
		} else {
			z.F.DecMapStringStringX(yyv440, false, d)
		}
	}
	yyj438++
	if yyhl438 {
		yyb438 = yyj438 > l
	} else {
		yyb438 = r.CheckBreak()
	}
	if yyb438 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		yym443 := z.DecBinary()
		_ = yym443
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Template) {
		} else {
			z.DecFallback(x.Template, false)
		}
	}
	yyj438++
	if yyhl438 {
		yyb438 = yyj438 > l
	} else {
		yyb438 = r.CheckBreak()
	}
	if yyb438 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv444 := &x.Strategy
		yyv444.CodecDecodeSelf(d)
	}
	yyj438++
	if yyhl438 {
		yyb438 = yyj438 > l
	} else {
		yyb438 = r.CheckBreak()
	}
	if yyb438 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj438++
		if yyhl438 {
			yyb438 = yyj438 > l
		} else {
			yyb438 = r.CheckBreak()
		}
		if yyb438 {
			break
		}
		z.DecStructFieldNotFound(yyj438-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym446 := z.EncBinary()
		_ = yym446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep447 := !z.EncBinary()
			yy2arr447 := z.EncBasicHandle().StructToArray
			var yyq447 [2]bool
			_, _, _ = yysep447, yyq447, yy2arr447
			const yyr447 bool = false
			yyq447[0] = x.Type != ""
			yyq447[1] = x.RollingUpdate != nil
			if yyr447 || yy2arr447 {
				r.EncodeArrayStart(2)
			} else {
				var yynn447 int = 0
				for _, b := range yyq447 {
					if b {
						yynn447++
					}
				}
				r.EncodeMapStart(yynn447)
			}
			if yyr447 || yy2arr447 {
				if yyq447[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr447 || yy2arr447 {
				if yyq447[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq447[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yysep447 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym450 := z.DecBinary()
	_ = yym450
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl451 := r.ReadMapStart()
			if yyl451 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl451, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl451 := r.ReadArrayStart()
			if yyl451 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl451, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys452Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys452Slc
	var yyhl452 bool = l >= 0
	for yyj452 := 0; ; yyj452++ {
		if yyhl452 {
			if yyj452 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys452Slc = r.DecodeBytes(yys452Slc, true, true)
		yys452 := string(yys452Slc)
		switch yys452 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys452)
		} // end switch yys452
	} // end for yyj452
	if !yyhl452 {
		r.ReadEnd()
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj455 int
	var yyb455 bool
	var yyhl455 bool = l >= 0
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj455++
		if yyhl455 {
			yyb455 = yyj455 > l
		} else {
			yyb455 = r.CheckBreak()
		}
		if yyb455 {
			break
		}
		z.DecStructFieldNotFound(yyj455-1, "")
	}
	r.ReadEnd()
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym458 := z.EncBinary()
	_ = yym458
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym459 := z.DecBinary()
	_ = yym459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym460 := z.EncBinary()
		_ = yym460
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep461 := !z.EncBinary()
			yy2arr461 := z.EncBasicHandle().StructToArray
			var yyq461 [3]bool
			_, _, _ = yysep461, yyq461, yy2arr461
			const yyr461 bool = false
			yyq461[0] = true
			yyq461[1] = true
			yyq461[2] = x.MinReadySeconds != 0
			if yyr461 || yy2arr461 {
				r.EncodeArrayStart(3)
			} else {
				var yynn461 int = 0
				for _, b := range yyq461 {
					if b {
						yynn461++
					}
				}
				r.EncodeMapStart(yynn461)
			}
			if yyr461 || yy2arr461 {
				if yyq461[0] {
					yy463 := &x.MaxUnavailable
					yym464 := z.EncBinary()
					_ = yym464
					if false {
					} else if z.HasExtensions() && z.EncExt(yy463) {
					} else if !yym464 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy463)
					} else {
						z.EncFallback(yy463)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq461[0] {
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					yy465 := &x.MaxUnavailable
					yym466 := z.EncBinary()
					_ = yym466
					if false {
					} else if z.HasExtensions() && z.EncExt(yy465) {
					} else if !yym466 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy465)
					} else {
						z.EncFallback(yy465)
					}
				}
			}
			if yyr461 || yy2arr461 {
				if yyq461[1] {
					yy468 := &x.MaxSurge
					yym469 := z.EncBinary()
					_ = yym469
					if false {
					} else if z.HasExtensions() && z.EncExt(yy468) {
					} else if !yym469 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy468)
					} else {
						z.EncFallback(yy468)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq461[1] {
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					yy470 := &x.MaxSurge
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else if z.HasExtensions() && z.EncExt(yy470) {
					} else if !yym471 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy470)
					} else {
						z.EncFallback(yy470)
					}
				}
			}
			if yyr461 || yy2arr461 {
				if yyq461[2] {
					yym473 := z.EncBinary()
					_ = yym473
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq461[2] {
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					yym474 := z.EncBinary()
					_ = yym474
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yysep461 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym475 := z.DecBinary()
	_ = yym475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl476 := r.ReadMapStart()
			if yyl476 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl476, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl476 := r.ReadArrayStart()
			if yyl476 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl476, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys477Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys477Slc
	var yyhl477 bool = l >= 0
	for yyj477 := 0; ; yyj477++ {
		if yyhl477 {
			if yyj477 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys477Slc = r.DecodeBytes(yys477Slc, true, true)
		yys477 := string(yys477Slc)
		switch yys477 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_util.IntOrString{}
			} else {
				yyv478 := &x.MaxUnavailable
				yym479 := z.DecBinary()
				_ = yym479
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv478) {
				} else if !yym479 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv478)
				} else {
					z.DecFallback(yyv478, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg6_util.IntOrString{}
			} else {
				yyv480 := &x.MaxSurge
				yym481 := z.DecBinary()
				_ = yym481
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv480) {
				} else if !yym481 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv480)
				} else {
					z.DecFallback(yyv480, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys477)
		} // end switch yys477
	} // end for yyj477
	if !yyhl477 {
		r.ReadEnd()
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj483 int
	var yyb483 bool
	var yyhl483 bool = l >= 0
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_util.IntOrString{}
	} else {
		yyv484 := &x.MaxUnavailable
		yym485 := z.DecBinary()
		_ = yym485
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv484) {
		} else if !yym485 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv484)
		} else {
			z.DecFallback(yyv484, false)
		}
	}
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg6_util.IntOrString{}
	} else {
		yyv486 := &x.MaxSurge
		yym487 := z.DecBinary()
		_ = yym487
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv486) {
		} else if !yym487 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv486)
		} else {
			z.DecFallback(yyv486, false)
		}
	}
	yyj483++
	if yyhl483 {
		yyb483 = yyj483 > l
	} else {
		yyb483 = r.CheckBreak()
	}
	if yyb483 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj483++
		if yyhl483 {
			yyb483 = yyj483 > l
		} else {
			yyb483 = r.CheckBreak()
		}
		if yyb483 {
			break
		}
		z.DecStructFieldNotFound(yyj483-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym489 := z.EncBinary()
		_ = yym489
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep490 := !z.EncBinary()
			yy2arr490 := z.EncBasicHandle().StructToArray
			var yyq490 [2]bool
			_, _, _ = yysep490, yyq490, yy2arr490
			const yyr490 bool = false
			yyq490[0] = x.Replicas != 0
			yyq490[1] = x.UpdatedReplicas != 0
			if yyr490 || yy2arr490 {
				r.EncodeArrayStart(2)
			} else {
				var yynn490 int = 0
				for _, b := range yyq490 {
					if b {
						yynn490++
					}
				}
				r.EncodeMapStart(yynn490)
			}
			if yyr490 || yy2arr490 {
				if yyq490[0] {
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq490[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr490 || yy2arr490 {
				if yyq490[1] {
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq490[1] {
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yysep490 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym497 := z.DecBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl498 := r.ReadMapStart()
			if yyl498 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl498, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl498 := r.ReadArrayStart()
			if yyl498 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl498, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys499Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys499Slc
	var yyhl499 bool = l >= 0
	for yyj499 := 0; ; yyj499++ {
		if yyhl499 {
			if yyj499 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys499Slc = r.DecodeBytes(yys499Slc, true, true)
		yys499 := string(yys499Slc)
		switch yys499 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys499)
		} // end switch yys499
	} // end for yyj499
	if !yyhl499 {
		r.ReadEnd()
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj502 int
	var yyb502 bool
	var yyhl502 bool = l >= 0
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj502++
		if yyhl502 {
			yyb502 = yyj502 > l
		} else {
			yyb502 = r.CheckBreak()
		}
		if yyb502 {
			break
		}
		z.DecStructFieldNotFound(yyj502-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym505 := z.EncBinary()
		_ = yym505
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep506 := !z.EncBinary()
			yy2arr506 := z.EncBasicHandle().StructToArray
			var yyq506 [4]bool
			_, _, _ = yysep506, yyq506, yy2arr506
			const yyr506 bool = false
			yyq506[0] = x.Kind != ""
			yyq506[1] = x.APIVersion != ""
			yyq506[2] = true
			if yyr506 || yy2arr506 {
				r.EncodeArrayStart(4)
			} else {
				var yynn506 int = 1
				for _, b := range yyq506 {
					if b {
						yynn506++
					}
				}
				r.EncodeMapStart(yynn506)
			}
			if yyr506 || yy2arr506 {
				if yyq506[0] {
					yym508 := z.EncBinary()
					_ = yym508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq506[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym509 := z.EncBinary()
					_ = yym509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr506 || yy2arr506 {
				if yyq506[1] {
					yym511 := z.EncBinary()
					_ = yym511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq506[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym512 := z.EncBinary()
					_ = yym512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr506 || yy2arr506 {
				if yyq506[2] {
					yy514 := &x.ListMeta
					yym515 := z.EncBinary()
					_ = yym515
					if false {
					} else if z.HasExtensions() && z.EncExt(yy514) {
					} else {
						z.EncFallback(yy514)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq506[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy516 := &x.ListMeta
					yym517 := z.EncBinary()
					_ = yym517
					if false {
					} else if z.HasExtensions() && z.EncExt(yy516) {
					} else {
						z.EncFallback(yy516)
					}
				}
			}
			if yyr506 || yy2arr506 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yysep506 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym521 := z.DecBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl522 := r.ReadMapStart()
			if yyl522 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl522, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl522 := r.ReadArrayStart()
			if yyl522 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl522, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys523Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys523Slc
	var yyhl523 bool = l >= 0
	for yyj523 := 0; ; yyj523++ {
		if yyhl523 {
			if yyj523 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys523Slc = r.DecodeBytes(yys523Slc, true, true)
		yys523 := string(yys523Slc)
		switch yys523 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv526 := &x.ListMeta
				yym527 := z.DecBinary()
				_ = yym527
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv526) {
				} else {
					z.DecFallback(yyv526, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv528 := &x.Items
				yym529 := z.DecBinary()
				_ = yym529
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv528), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys523)
		} // end switch yys523
	} // end for yyj523
	if !yyhl523 {
		r.ReadEnd()
	}
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj530 int
	var yyb530 bool
	var yyhl530 bool = l >= 0
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv533 := &x.ListMeta
		yym534 := z.DecBinary()
		_ = yym534
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv533) {
		} else {
			z.DecFallback(yyv533, false)
		}
	}
	yyj530++
	if yyhl530 {
		yyb530 = yyj530 > l
	} else {
		yyb530 = r.CheckBreak()
	}
	if yyb530 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv535 := &x.Items
		yym536 := z.DecBinary()
		_ = yym536
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv535), d)
		}
	}
	for {
		yyj530++
		if yyhl530 {
			yyb530 = yyj530 > l
		} else {
			yyb530 = r.CheckBreak()
		}
		if yyb530 {
			break
		}
		z.DecStructFieldNotFound(yyj530-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym537 := z.EncBinary()
		_ = yym537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep538 := !z.EncBinary()
			yy2arr538 := z.EncBasicHandle().StructToArray
			var yyq538 [2]bool
			_, _, _ = yysep538, yyq538, yy2arr538
			const yyr538 bool = false
			yyq538[0] = len(x.Selector) != 0
			yyq538[1] = x.Template != nil
			if yyr538 || yy2arr538 {
				r.EncodeArrayStart(2)
			} else {
				var yynn538 int = 0
				for _, b := range yyq538 {
					if b {
						yynn538++
					}
				}
				r.EncodeMapStart(yynn538)
			}
			if yyr538 || yy2arr538 {
				if yyq538[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym540 := z.EncBinary()
						_ = yym540
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[0] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym541 := z.EncBinary()
						_ = yym541
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr538 || yy2arr538 {
				if yyq538[1] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym543 := z.EncBinary()
						_ = yym543
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[1] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym544 := z.EncBinary()
						_ = yym544
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				}
			}
			if yysep538 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym545 := z.DecBinary()
	_ = yym545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl546 := r.ReadMapStart()
			if yyl546 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl546, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl546 := r.ReadArrayStart()
			if yyl546 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys547Slc
	var yyhl547 bool = l >= 0
	for yyj547 := 0; ; yyj547++ {
		if yyhl547 {
			if yyj547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys547Slc = r.DecodeBytes(yys547Slc, true, true)
		yys547 := string(yys547Slc)
		switch yys547 {
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv548 := &x.Selector
				yym549 := z.DecBinary()
				_ = yym549
				if false {
				} else {
					z.F.DecMapStringStringX(yyv548, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				yym551 := z.DecBinary()
				_ = yym551
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Template) {
				} else {
					z.DecFallback(x.Template, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys547)
		} // end switch yys547
	} // end for yyj547
	if !yyhl547 {
		r.ReadEnd()
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj552 int
	var yyb552 bool
	var yyhl552 bool = l >= 0
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv553 := &x.Selector
		yym554 := z.DecBinary()
		_ = yym554
		if false {
		} else {
			z.F.DecMapStringStringX(yyv553, false, d)
		}
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		yym556 := z.DecBinary()
		_ = yym556
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Template) {
		} else {
			z.DecFallback(x.Template, false)
		}
	}
	for {
		yyj552++
		if yyhl552 {
			yyb552 = yyj552 > l
		} else {
			yyb552 = r.CheckBreak()
		}
		if yyb552 {
			break
		}
		z.DecStructFieldNotFound(yyj552-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym557 := z.EncBinary()
		_ = yym557
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep558 := !z.EncBinary()
			yy2arr558 := z.EncBasicHandle().StructToArray
			var yyq558 [3]bool
			_, _, _ = yysep558, yyq558, yy2arr558
			const yyr558 bool = false
			if yyr558 || yy2arr558 {
				r.EncodeArrayStart(3)
			} else {
				var yynn558 int = 3
				for _, b := range yyq558 {
					if b {
						yynn558++
					}
				}
				r.EncodeMapStart(yynn558)
			}
			if yyr558 || yy2arr558 {
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr558 || yy2arr558 {
				yym563 := z.EncBinary()
				_ = yym563
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				yym564 := z.EncBinary()
				_ = yym564
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr558 || yy2arr558 {
				yym566 := z.EncBinary()
				_ = yym566
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				yym567 := z.EncBinary()
				_ = yym567
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yysep558 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym568 := z.DecBinary()
	_ = yym568
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl569 := r.ReadMapStart()
			if yyl569 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl569, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl569 := r.ReadArrayStart()
			if yyl569 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl569, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys570Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys570Slc
	var yyhl570 bool = l >= 0
	for yyj570 := 0; ; yyj570++ {
		if yyhl570 {
			if yyj570 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys570Slc = r.DecodeBytes(yys570Slc, true, true)
		yys570 := string(yys570Slc)
		switch yys570 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys570)
		} // end switch yys570
	} // end for yyj570
	if !yyhl570 {
		r.ReadEnd()
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj574 int
	var yyb574 bool
	var yyhl574 bool = l >= 0
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj574++
	if yyhl574 {
		yyb574 = yyj574 > l
	} else {
		yyb574 = r.CheckBreak()
	}
	if yyb574 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj574++
		if yyhl574 {
			yyb574 = yyj574 > l
		} else {
			yyb574 = r.CheckBreak()
		}
		if yyb574 {
			break
		}
		z.DecStructFieldNotFound(yyj574-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym578 := z.EncBinary()
		_ = yym578
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep579 := !z.EncBinary()
			yy2arr579 := z.EncBasicHandle().StructToArray
			var yyq579 [5]bool
			_, _, _ = yysep579, yyq579, yy2arr579
			const yyr579 bool = false
			yyq579[0] = x.Kind != ""
			yyq579[1] = x.APIVersion != ""
			yyq579[2] = true
			yyq579[3] = true
			yyq579[4] = true
			if yyr579 || yy2arr579 {
				r.EncodeArrayStart(5)
			} else {
				var yynn579 int = 0
				for _, b := range yyq579 {
					if b {
						yynn579++
					}
				}
				r.EncodeMapStart(yynn579)
			}
			if yyr579 || yy2arr579 {
				if yyq579[0] {
					yym581 := z.EncBinary()
					_ = yym581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq579[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym582 := z.EncBinary()
					_ = yym582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr579 || yy2arr579 {
				if yyq579[1] {
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq579[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym585 := z.EncBinary()
					_ = yym585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr579 || yy2arr579 {
				if yyq579[2] {
					yy587 := &x.ObjectMeta
					yym588 := z.EncBinary()
					_ = yym588
					if false {
					} else if z.HasExtensions() && z.EncExt(yy587) {
					} else {
						z.EncFallback(yy587)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy589 := &x.ObjectMeta
					yym590 := z.EncBinary()
					_ = yym590
					if false {
					} else if z.HasExtensions() && z.EncExt(yy589) {
					} else {
						z.EncFallback(yy589)
					}
				}
			}
			if yyr579 || yy2arr579 {
				if yyq579[3] {
					yy592 := &x.Spec
					yy592.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy593 := &x.Spec
					yy593.CodecEncodeSelf(e)
				}
			}
			if yyr579 || yy2arr579 {
				if yyq579[4] {
					yy595 := &x.Status
					yy595.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq579[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy596 := &x.Status
					yy596.CodecEncodeSelf(e)
				}
			}
			if yysep579 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym597 := z.DecBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl598 := r.ReadMapStart()
			if yyl598 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl598, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl598 := r.ReadArrayStart()
			if yyl598 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys599Slc
	var yyhl599 bool = l >= 0
	for yyj599 := 0; ; yyj599++ {
		if yyhl599 {
			if yyj599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys599Slc = r.DecodeBytes(yys599Slc, true, true)
		yys599 := string(yys599Slc)
		switch yys599 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv602 := &x.ObjectMeta
				yym603 := z.DecBinary()
				_ = yym603
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv602) {
				} else {
					z.DecFallback(yyv602, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv604 := &x.Spec
				yyv604.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv605 := &x.Status
				yyv605.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys599)
		} // end switch yys599
	} // end for yyj599
	if !yyhl599 {
		r.ReadEnd()
	}
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj606 int
	var yyb606 bool
	var yyhl606 bool = l >= 0
	yyj606++
	if yyhl606 {
		yyb606 = yyj606 > l
	} else {
		yyb606 = r.CheckBreak()
	}
	if yyb606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj606++
	if yyhl606 {
		yyb606 = yyj606 > l
	} else {
		yyb606 = r.CheckBreak()
	}
	if yyb606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj606++
	if yyhl606 {
		yyb606 = yyj606 > l
	} else {
		yyb606 = r.CheckBreak()
	}
	if yyb606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv609 := &x.ObjectMeta
		yym610 := z.DecBinary()
		_ = yym610
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv609) {
		} else {
			z.DecFallback(yyv609, false)
		}
	}
	yyj606++
	if yyhl606 {
		yyb606 = yyj606 > l
	} else {
		yyb606 = r.CheckBreak()
	}
	if yyb606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv611 := &x.Spec
		yyv611.CodecDecodeSelf(d)
	}
	yyj606++
	if yyhl606 {
		yyb606 = yyj606 > l
	} else {
		yyb606 = r.CheckBreak()
	}
	if yyb606 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv612 := &x.Status
		yyv612.CodecDecodeSelf(d)
	}
	for {
		yyj606++
		if yyhl606 {
			yyb606 = yyj606 > l
		} else {
			yyb606 = r.CheckBreak()
		}
		if yyb606 {
			break
		}
		z.DecStructFieldNotFound(yyj606-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym613 := z.EncBinary()
		_ = yym613
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep614 := !z.EncBinary()
			yy2arr614 := z.EncBasicHandle().StructToArray
			var yyq614 [4]bool
			_, _, _ = yysep614, yyq614, yy2arr614
			const yyr614 bool = false
			yyq614[0] = x.Kind != ""
			yyq614[1] = x.APIVersion != ""
			yyq614[2] = true
			if yyr614 || yy2arr614 {
				r.EncodeArrayStart(4)
			} else {
				var yynn614 int = 1
				for _, b := range yyq614 {
					if b {
						yynn614++
					}
				}
				r.EncodeMapStart(yynn614)
			}
			if yyr614 || yy2arr614 {
				if yyq614[0] {
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq614[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym617 := z.EncBinary()
					_ = yym617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr614 || yy2arr614 {
				if yyq614[1] {
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq614[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr614 || yy2arr614 {
				if yyq614[2] {
					yy622 := &x.ListMeta
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else if z.HasExtensions() && z.EncExt(yy622) {
					} else {
						z.EncFallback(yy622)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq614[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy624 := &x.ListMeta
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy624) {
					} else {
						z.EncFallback(yy624)
					}
				}
			}
			if yyr614 || yy2arr614 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yysep614 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym629 := z.DecBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl630 := r.ReadMapStart()
			if yyl630 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl630, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl630 := r.ReadArrayStart()
			if yyl630 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl630, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys631Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys631Slc
	var yyhl631 bool = l >= 0
	for yyj631 := 0; ; yyj631++ {
		if yyhl631 {
			if yyj631 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys631Slc = r.DecodeBytes(yys631Slc, true, true)
		yys631 := string(yys631Slc)
		switch yys631 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv634 := &x.ListMeta
				yym635 := z.DecBinary()
				_ = yym635
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv634) {
				} else {
					z.DecFallback(yyv634, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv636 := &x.Items
				yym637 := z.DecBinary()
				_ = yym637
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv636), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys631)
		} // end switch yys631
	} // end for yyj631
	if !yyhl631 {
		r.ReadEnd()
	}
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj638 int
	var yyb638 bool
	var yyhl638 bool = l >= 0
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv641 := &x.ListMeta
		yym642 := z.DecBinary()
		_ = yym642
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv641) {
		} else {
			z.DecFallback(yyv641, false)
		}
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv643 := &x.Items
		yym644 := z.DecBinary()
		_ = yym644
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv643), d)
		}
	}
	for {
		yyj638++
		if yyhl638 {
			yyb638 = yyj638 > l
		} else {
			yyb638 = r.CheckBreak()
		}
		if yyb638 {
			break
		}
		z.DecStructFieldNotFound(yyj638-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym645 := z.EncBinary()
		_ = yym645
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep646 := !z.EncBinary()
			yy2arr646 := z.EncBasicHandle().StructToArray
			var yyq646 [4]bool
			_, _, _ = yysep646, yyq646, yy2arr646
			const yyr646 bool = false
			yyq646[0] = x.Kind != ""
			yyq646[1] = x.APIVersion != ""
			yyq646[2] = true
			if yyr646 || yy2arr646 {
				r.EncodeArrayStart(4)
			} else {
				var yynn646 int = 1
				for _, b := range yyq646 {
					if b {
						yynn646++
					}
				}
				r.EncodeMapStart(yynn646)
			}
			if yyr646 || yy2arr646 {
				if yyq646[0] {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq646[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr646 || yy2arr646 {
				if yyq646[1] {
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq646[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr646 || yy2arr646 {
				if yyq646[2] {
					yy654 := &x.ListMeta
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy654) {
					} else {
						z.EncFallback(yy654)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq646[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy656 := &x.ListMeta
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else if z.HasExtensions() && z.EncExt(yy656) {
					} else {
						z.EncFallback(yy656)
					}
				}
			}
			if yyr646 || yy2arr646 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yysep646 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym661 := z.DecBinary()
	_ = yym661
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl662 := r.ReadMapStart()
			if yyl662 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl662, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl662 := r.ReadArrayStart()
			if yyl662 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl662, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys663Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys663Slc
	var yyhl663 bool = l >= 0
	for yyj663 := 0; ; yyj663++ {
		if yyhl663 {
			if yyj663 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys663Slc = r.DecodeBytes(yys663Slc, true, true)
		yys663 := string(yys663Slc)
		switch yys663 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv666 := &x.ListMeta
				yym667 := z.DecBinary()
				_ = yym667
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv666) {
				} else {
					z.DecFallback(yyv666, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv668 := &x.Items
				yym669 := z.DecBinary()
				_ = yym669
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv668), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys663)
		} // end switch yys663
	} // end for yyj663
	if !yyhl663 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj670 int
	var yyb670 bool
	var yyhl670 bool = l >= 0
	yyj670++
	if yyhl670 {
		yyb670 = yyj670 > l
	} else {
		yyb670 = r.CheckBreak()
	}
	if yyb670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj670++
	if yyhl670 {
		yyb670 = yyj670 > l
	} else {
		yyb670 = r.CheckBreak()
	}
	if yyb670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj670++
	if yyhl670 {
		yyb670 = yyj670 > l
	} else {
		yyb670 = r.CheckBreak()
	}
	if yyb670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv673 := &x.ListMeta
		yym674 := z.DecBinary()
		_ = yym674
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv673) {
		} else {
			z.DecFallback(yyv673, false)
		}
	}
	yyj670++
	if yyhl670 {
		yyb670 = yyj670 > l
	} else {
		yyb670 = r.CheckBreak()
	}
	if yyb670 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv675 := &x.Items
		yym676 := z.DecBinary()
		_ = yym676
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv675), d)
		}
	}
	for {
		yyj670++
		if yyhl670 {
			yyb670 = yyj670 > l
		} else {
			yyb670 = r.CheckBreak()
		}
		if yyb670 {
			break
		}
		z.DecStructFieldNotFound(yyj670-1, "")
	}
	r.ReadEnd()
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym677 := z.EncBinary()
		_ = yym677
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep678 := !z.EncBinary()
			yy2arr678 := z.EncBasicHandle().StructToArray
			var yyq678 [5]bool
			_, _, _ = yysep678, yyq678, yy2arr678
			const yyr678 bool = false
			yyq678[0] = x.Kind != ""
			yyq678[1] = x.APIVersion != ""
			yyq678[2] = true
			yyq678[3] = true
			yyq678[4] = true
			if yyr678 || yy2arr678 {
				r.EncodeArrayStart(5)
			} else {
				var yynn678 int = 0
				for _, b := range yyq678 {
					if b {
						yynn678++
					}
				}
				r.EncodeMapStart(yynn678)
			}
			if yyr678 || yy2arr678 {
				if yyq678[0] {
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq678[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr678 || yy2arr678 {
				if yyq678[1] {
					yym683 := z.EncBinary()
					_ = yym683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq678[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr678 || yy2arr678 {
				if yyq678[2] {
					yy686 := &x.ObjectMeta
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else if z.HasExtensions() && z.EncExt(yy686) {
					} else {
						z.EncFallback(yy686)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq678[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy688 := &x.ObjectMeta
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else if z.HasExtensions() && z.EncExt(yy688) {
					} else {
						z.EncFallback(yy688)
					}
				}
			}
			if yyr678 || yy2arr678 {
				if yyq678[3] {
					yy691 := &x.Spec
					yy691.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq678[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy692 := &x.Spec
					yy692.CodecEncodeSelf(e)
				}
			}
			if yyr678 || yy2arr678 {
				if yyq678[4] {
					yy694 := &x.Status
					yy694.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq678[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy695 := &x.Status
					yy695.CodecEncodeSelf(e)
				}
			}
			if yysep678 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym696 := z.DecBinary()
	_ = yym696
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl697 := r.ReadMapStart()
			if yyl697 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl697, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl697 := r.ReadArrayStart()
			if yyl697 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl697, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys698Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys698Slc
	var yyhl698 bool = l >= 0
	for yyj698 := 0; ; yyj698++ {
		if yyhl698 {
			if yyj698 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys698Slc = r.DecodeBytes(yys698Slc, true, true)
		yys698 := string(yys698Slc)
		switch yys698 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv701 := &x.ObjectMeta
				yym702 := z.DecBinary()
				_ = yym702
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv701) {
				} else {
					z.DecFallback(yyv701, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv703 := &x.Spec
				yyv703.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv704 := &x.Status
				yyv704.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys698)
		} // end switch yys698
	} // end for yyj698
	if !yyhl698 {
		r.ReadEnd()
	}
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj705 int
	var yyb705 bool
	var yyhl705 bool = l >= 0
	yyj705++
	if yyhl705 {
		yyb705 = yyj705 > l
	} else {
		yyb705 = r.CheckBreak()
	}
	if yyb705 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj705++
	if yyhl705 {
		yyb705 = yyj705 > l
	} else {
		yyb705 = r.CheckBreak()
	}
	if yyb705 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj705++
	if yyhl705 {
		yyb705 = yyj705 > l
	} else {
		yyb705 = r.CheckBreak()
	}
	if yyb705 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv708 := &x.ObjectMeta
		yym709 := z.DecBinary()
		_ = yym709
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv708) {
		} else {
			z.DecFallback(yyv708, false)
		}
	}
	yyj705++
	if yyhl705 {
		yyb705 = yyj705 > l
	} else {
		yyb705 = r.CheckBreak()
	}
	if yyb705 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv710 := &x.Spec
		yyv710.CodecDecodeSelf(d)
	}
	yyj705++
	if yyhl705 {
		yyb705 = yyj705 > l
	} else {
		yyb705 = r.CheckBreak()
	}
	if yyb705 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv711 := &x.Status
		yyv711.CodecDecodeSelf(d)
	}
	for {
		yyj705++
		if yyhl705 {
			yyb705 = yyj705 > l
		} else {
			yyb705 = r.CheckBreak()
		}
		if yyb705 {
			break
		}
		z.DecStructFieldNotFound(yyj705-1, "")
	}
	r.ReadEnd()
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym712 := z.EncBinary()
		_ = yym712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep713 := !z.EncBinary()
			yy2arr713 := z.EncBasicHandle().StructToArray
			var yyq713 [4]bool
			_, _, _ = yysep713, yyq713, yy2arr713
			const yyr713 bool = false
			yyq713[0] = x.Kind != ""
			yyq713[1] = x.APIVersion != ""
			yyq713[2] = true
			if yyr713 || yy2arr713 {
				r.EncodeArrayStart(4)
			} else {
				var yynn713 int = 1
				for _, b := range yyq713 {
					if b {
						yynn713++
					}
				}
				r.EncodeMapStart(yynn713)
			}
			if yyr713 || yy2arr713 {
				if yyq713[0] {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq713[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr713 || yy2arr713 {
				if yyq713[1] {
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq713[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym719 := z.EncBinary()
					_ = yym719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr713 || yy2arr713 {
				if yyq713[2] {
					yy721 := &x.ListMeta
					yym722 := z.EncBinary()
					_ = yym722
					if false {
					} else if z.HasExtensions() && z.EncExt(yy721) {
					} else {
						z.EncFallback(yy721)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq713[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy723 := &x.ListMeta
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else if z.HasExtensions() && z.EncExt(yy723) {
					} else {
						z.EncFallback(yy723)
					}
				}
			}
			if yyr713 || yy2arr713 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym726 := z.EncBinary()
					_ = yym726
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yysep713 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym728 := z.DecBinary()
	_ = yym728
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl729 := r.ReadMapStart()
			if yyl729 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl729, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl729 := r.ReadArrayStart()
			if yyl729 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl729, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys730Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys730Slc
	var yyhl730 bool = l >= 0
	for yyj730 := 0; ; yyj730++ {
		if yyhl730 {
			if yyj730 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys730Slc = r.DecodeBytes(yys730Slc, true, true)
		yys730 := string(yys730Slc)
		switch yys730 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv733 := &x.ListMeta
				yym734 := z.DecBinary()
				_ = yym734
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv733) {
				} else {
					z.DecFallback(yyv733, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv735 := &x.Items
				yym736 := z.DecBinary()
				_ = yym736
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv735), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys730)
		} // end switch yys730
	} // end for yyj730
	if !yyhl730 {
		r.ReadEnd()
	}
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj737 int
	var yyb737 bool
	var yyhl737 bool = l >= 0
	yyj737++
	if yyhl737 {
		yyb737 = yyj737 > l
	} else {
		yyb737 = r.CheckBreak()
	}
	if yyb737 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj737++
	if yyhl737 {
		yyb737 = yyj737 > l
	} else {
		yyb737 = r.CheckBreak()
	}
	if yyb737 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj737++
	if yyhl737 {
		yyb737 = yyj737 > l
	} else {
		yyb737 = r.CheckBreak()
	}
	if yyb737 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv740 := &x.ListMeta
		yym741 := z.DecBinary()
		_ = yym741
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv740) {
		} else {
			z.DecFallback(yyv740, false)
		}
	}
	yyj737++
	if yyhl737 {
		yyb737 = yyj737 > l
	} else {
		yyb737 = r.CheckBreak()
	}
	if yyb737 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv742 := &x.Items
		yym743 := z.DecBinary()
		_ = yym743
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv742), d)
		}
	}
	for {
		yyj737++
		if yyhl737 {
			yyb737 = yyj737 > l
		} else {
			yyb737 = r.CheckBreak()
		}
		if yyb737 {
			break
		}
		z.DecStructFieldNotFound(yyj737-1, "")
	}
	r.ReadEnd()
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym744 := z.EncBinary()
		_ = yym744
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep745 := !z.EncBinary()
			yy2arr745 := z.EncBasicHandle().StructToArray
			var yyq745 [4]bool
			_, _, _ = yysep745, yyq745, yy2arr745
			const yyr745 bool = false
			yyq745[0] = x.Parallelism != nil
			yyq745[1] = x.Completions != nil
			yyq745[2] = x.Selector != nil
			if yyr745 || yy2arr745 {
				r.EncodeArrayStart(4)
			} else {
				var yynn745 int = 1
				for _, b := range yyq745 {
					if b {
						yynn745++
					}
				}
				r.EncodeMapStart(yynn745)
			}
			if yyr745 || yy2arr745 {
				if yyq745[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy747 := *x.Parallelism
						yym748 := z.EncBinary()
						_ = yym748
						if false {
						} else {
							r.EncodeInt(int64(yy747))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq745[0] {
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy749 := *x.Parallelism
						yym750 := z.EncBinary()
						_ = yym750
						if false {
						} else {
							r.EncodeInt(int64(yy749))
						}
					}
				}
			}
			if yyr745 || yy2arr745 {
				if yyq745[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy752 := *x.Completions
						yym753 := z.EncBinary()
						_ = yym753
						if false {
						} else {
							r.EncodeInt(int64(yy752))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq745[1] {
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy754 := *x.Completions
						yym755 := z.EncBinary()
						_ = yym755
						if false {
						} else {
							r.EncodeInt(int64(yy754))
						}
					}
				}
			}
			if yyr745 || yy2arr745 {
				if yyq745[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq745[2] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr745 || yy2arr745 {
				yy758 := &x.Template
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else if z.HasExtensions() && z.EncExt(yy758) {
				} else {
					z.EncFallback(yy758)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				yy760 := &x.Template
				yym761 := z.EncBinary()
				_ = yym761
				if false {
				} else if z.HasExtensions() && z.EncExt(yy760) {
				} else {
					z.EncFallback(yy760)
				}
			}
			if yysep745 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym762 := z.DecBinary()
	_ = yym762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl763 := r.ReadMapStart()
			if yyl763 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl763, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl763 := r.ReadArrayStart()
			if yyl763 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl763, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys764Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys764Slc
	var yyhl764 bool = l >= 0
	for yyj764 := 0; ; yyj764++ {
		if yyhl764 {
			if yyj764 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys764Slc = r.DecodeBytes(yys764Slc, true, true)
		yys764 := string(yys764Slc)
		switch yys764 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym766 := z.DecBinary()
				_ = yym766
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym768 := z.DecBinary()
				_ = yym768
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(PodSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv770 := &x.Template
				yym771 := z.DecBinary()
				_ = yym771
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv770) {
				} else {
					z.DecFallback(yyv770, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys764)
		} // end switch yys764
	} // end for yyj764
	if !yyhl764 {
		r.ReadEnd()
	}
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj772 int
	var yyb772 bool
	var yyhl772 bool = l >= 0
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym774 := z.DecBinary()
		_ = yym774
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym776 := z.DecBinary()
		_ = yym776
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(PodSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj772++
	if yyhl772 {
		yyb772 = yyj772 > l
	} else {
		yyb772 = r.CheckBreak()
	}
	if yyb772 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv778 := &x.Template
		yym779 := z.DecBinary()
		_ = yym779
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv778) {
		} else {
			z.DecFallback(yyv778, false)
		}
	}
	for {
		yyj772++
		if yyhl772 {
			yyb772 = yyj772 > l
		} else {
			yyb772 = r.CheckBreak()
		}
		if yyb772 {
			break
		}
		z.DecStructFieldNotFound(yyj772-1, "")
	}
	r.ReadEnd()
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym780 := z.EncBinary()
		_ = yym780
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep781 := !z.EncBinary()
			yy2arr781 := z.EncBasicHandle().StructToArray
			var yyq781 [6]bool
			_, _, _ = yysep781, yyq781, yy2arr781
			const yyr781 bool = false
			yyq781[0] = len(x.Conditions) != 0
			yyq781[1] = x.StartTime != nil
			yyq781[2] = x.CompletionTime != nil
			yyq781[3] = x.Active != 0
			yyq781[4] = x.Succeeded != 0
			yyq781[5] = x.Failed != 0
			if yyr781 || yy2arr781 {
				r.EncodeArrayStart(6)
			} else {
				var yynn781 int = 0
				for _, b := range yyq781 {
					if b {
						yynn781++
					}
				}
				r.EncodeMapStart(yynn781)
			}
			if yyr781 || yy2arr781 {
				if yyq781[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym783 := z.EncBinary()
						_ = yym783
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq781[0] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym784 := z.EncBinary()
						_ = yym784
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr781 || yy2arr781 {
				if yyq781[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym786 := z.EncBinary()
						_ = yym786
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym786 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym786 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq781[1] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym787 := z.EncBinary()
						_ = yym787
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym787 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym787 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr781 || yy2arr781 {
				if yyq781[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym789 := z.EncBinary()
						_ = yym789
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym789 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym789 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq781[2] {
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym790 := z.EncBinary()
						_ = yym790
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym790 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym790 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr781 || yy2arr781 {
				if yyq781[3] {
					yym792 := z.EncBinary()
					_ = yym792
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq781[3] {
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr781 || yy2arr781 {
				if yyq781[4] {
					yym795 := z.EncBinary()
					_ = yym795
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq781[4] {
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					yym796 := z.EncBinary()
					_ = yym796
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr781 || yy2arr781 {
				if yyq781[5] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq781[5] {
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yysep781 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		switch yys802 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv803 := &x.Conditions
				yym804 := z.DecBinary()
				_ = yym804
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv803), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym806 := z.DecBinary()
				_ = yym806
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym806 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym806 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym808 := z.DecBinary()
				_ = yym808
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym808 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym808 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	if !yyhl802 {
		r.ReadEnd()
	}
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj812 int
	var yyb812 bool
	var yyhl812 bool = l >= 0
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv813 := &x.Conditions
		yym814 := z.DecBinary()
		_ = yym814
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv813), d)
		}
	}
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym816 := z.DecBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym816 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym816 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym818 := z.DecBinary()
		_ = yym818
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym818 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym818 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj812++
		if yyhl812 {
			yyb812 = yyj812 > l
		} else {
			yyb812 = r.CheckBreak()
		}
		if yyb812 {
			break
		}
		z.DecStructFieldNotFound(yyj812-1, "")
	}
	r.ReadEnd()
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym822 := z.EncBinary()
	_ = yym822
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym823 := z.DecBinary()
	_ = yym823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym824 := z.EncBinary()
		_ = yym824
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep825 := !z.EncBinary()
			yy2arr825 := z.EncBasicHandle().StructToArray
			var yyq825 [6]bool
			_, _, _ = yysep825, yyq825, yy2arr825
			const yyr825 bool = false
			yyq825[2] = true
			yyq825[3] = true
			yyq825[4] = x.Reason != ""
			yyq825[5] = x.Message != ""
			if yyr825 || yy2arr825 {
				r.EncodeArrayStart(6)
			} else {
				var yynn825 int = 2
				for _, b := range yyq825 {
					if b {
						yynn825++
					}
				}
				r.EncodeMapStart(yynn825)
			}
			if yyr825 || yy2arr825 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr825 || yy2arr825 {
				yym828 := z.EncBinary()
				_ = yym828
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				yym829 := z.EncBinary()
				_ = yym829
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr825 || yy2arr825 {
				if yyq825[2] {
					yy831 := &x.LastProbeTime
					yym832 := z.EncBinary()
					_ = yym832
					if false {
					} else if z.HasExtensions() && z.EncExt(yy831) {
					} else if yym832 {
						z.EncBinaryMarshal(yy831)
					} else if !yym832 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy831)
					} else {
						z.EncFallback(yy831)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq825[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy833 := &x.LastProbeTime
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else if z.HasExtensions() && z.EncExt(yy833) {
					} else if yym834 {
						z.EncBinaryMarshal(yy833)
					} else if !yym834 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy833)
					} else {
						z.EncFallback(yy833)
					}
				}
			}
			if yyr825 || yy2arr825 {
				if yyq825[3] {
					yy836 := &x.LastTransitionTime
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else if z.HasExtensions() && z.EncExt(yy836) {
					} else if yym837 {
						z.EncBinaryMarshal(yy836)
					} else if !yym837 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy836)
					} else {
						z.EncFallback(yy836)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq825[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy838 := &x.LastTransitionTime
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else if z.HasExtensions() && z.EncExt(yy838) {
					} else if yym839 {
						z.EncBinaryMarshal(yy838)
					} else if !yym839 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy838)
					} else {
						z.EncFallback(yy838)
					}
				}
			}
			if yyr825 || yy2arr825 {
				if yyq825[4] {
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq825[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr825 || yy2arr825 {
				if yyq825[5] {
					yym844 := z.EncBinary()
					_ = yym844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq825[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep825 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym846 := z.DecBinary()
	_ = yym846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl847 := r.ReadMapStart()
			if yyl847 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl847, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl847 := r.ReadArrayStart()
			if yyl847 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys848Slc
	var yyhl848 bool = l >= 0
	for yyj848 := 0; ; yyj848++ {
		if yyhl848 {
			if yyj848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys848Slc = r.DecodeBytes(yys848Slc, true, true)
		yys848 := string(yys848Slc)
		switch yys848 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv851 := &x.LastProbeTime
				yym852 := z.DecBinary()
				_ = yym852
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv851) {
				} else if yym852 {
					z.DecBinaryUnmarshal(yyv851)
				} else if !yym852 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv851)
				} else {
					z.DecFallback(yyv851, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv853 := &x.LastTransitionTime
				yym854 := z.DecBinary()
				_ = yym854
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv853) {
				} else if yym854 {
					z.DecBinaryUnmarshal(yyv853)
				} else if !yym854 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv853)
				} else {
					z.DecFallback(yyv853, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys848)
		} // end switch yys848
	} // end for yyj848
	if !yyhl848 {
		r.ReadEnd()
	}
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj857 int
	var yyb857 bool
	var yyhl857 bool = l >= 0
	yyj857++
	if yyhl857 {
		yyb857 = yyj857 > l
	} else {
		yyb857 = r.CheckBreak()
	}
	if yyb857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj857++
	if yyhl857 {
		yyb857 = yyj857 > l
	} else {
		yyb857 = r.CheckBreak()
	}
	if yyb857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj857++
	if yyhl857 {
		yyb857 = yyj857 > l
	} else {
		yyb857 = r.CheckBreak()
	}
	if yyb857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv860 := &x.LastProbeTime
		yym861 := z.DecBinary()
		_ = yym861
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv860) {
		} else if yym861 {
			z.DecBinaryUnmarshal(yyv860)
		} else if !yym861 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv860)
		} else {
			z.DecFallback(yyv860, false)
		}
	}
	yyj857++
	if yyhl857 {
		yyb857 = yyj857 > l
	} else {
		yyb857 = r.CheckBreak()
	}
	if yyb857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv862 := &x.LastTransitionTime
		yym863 := z.DecBinary()
		_ = yym863
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv862) {
		} else if yym863 {
			z.DecBinaryUnmarshal(yyv862)
		} else if !yym863 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv862)
		} else {
			z.DecFallback(yyv862, false)
		}
	}
	yyj857++
	if yyhl857 {
		yyb857 = yyj857 > l
	} else {
		yyb857 = r.CheckBreak()
	}
	if yyb857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj857++
	if yyhl857 {
		yyb857 = yyj857 > l
	} else {
		yyb857 = r.CheckBreak()
	}
	if yyb857 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj857++
		if yyhl857 {
			yyb857 = yyj857 > l
		} else {
			yyb857 = r.CheckBreak()
		}
		if yyb857 {
			break
		}
		z.DecStructFieldNotFound(yyj857-1, "")
	}
	r.ReadEnd()
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym866 := z.EncBinary()
		_ = yym866
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep867 := !z.EncBinary()
			yy2arr867 := z.EncBasicHandle().StructToArray
			var yyq867 [5]bool
			_, _, _ = yysep867, yyq867, yy2arr867
			const yyr867 bool = false
			yyq867[0] = x.Kind != ""
			yyq867[1] = x.APIVersion != ""
			yyq867[2] = true
			yyq867[3] = true
			yyq867[4] = true
			if yyr867 || yy2arr867 {
				r.EncodeArrayStart(5)
			} else {
				var yynn867 int = 0
				for _, b := range yyq867 {
					if b {
						yynn867++
					}
				}
				r.EncodeMapStart(yynn867)
			}
			if yyr867 || yy2arr867 {
				if yyq867[0] {
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq867[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym870 := z.EncBinary()
					_ = yym870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[1] {
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq867[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[2] {
					yy875 := &x.ObjectMeta
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else if z.HasExtensions() && z.EncExt(yy875) {
					} else {
						z.EncFallback(yy875)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy877 := &x.ObjectMeta
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else if z.HasExtensions() && z.EncExt(yy877) {
					} else {
						z.EncFallback(yy877)
					}
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[3] {
					yy880 := &x.Spec
					yy880.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy881 := &x.Spec
					yy881.CodecEncodeSelf(e)
				}
			}
			if yyr867 || yy2arr867 {
				if yyq867[4] {
					yy883 := &x.Status
					yy883.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq867[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy884 := &x.Status
					yy884.CodecEncodeSelf(e)
				}
			}
			if yysep867 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym885 := z.DecBinary()
	_ = yym885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl886 := r.ReadMapStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl886, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl886 := r.ReadArrayStart()
			if yyl886 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys887Slc
	var yyhl887 bool = l >= 0
	for yyj887 := 0; ; yyj887++ {
		if yyhl887 {
			if yyj887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys887Slc = r.DecodeBytes(yys887Slc, true, true)
		yys887 := string(yys887Slc)
		switch yys887 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv890 := &x.ObjectMeta
				yym891 := z.DecBinary()
				_ = yym891
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv890) {
				} else {
					z.DecFallback(yyv890, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv892 := &x.Spec
				yyv892.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv893 := &x.Status
				yyv893.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys887)
		} // end switch yys887
	} // end for yyj887
	if !yyhl887 {
		r.ReadEnd()
	}
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj894 int
	var yyb894 bool
	var yyhl894 bool = l >= 0
	yyj894++
	if yyhl894 {
		yyb894 = yyj894 > l
	} else {
		yyb894 = r.CheckBreak()
	}
	if yyb894 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj894++
	if yyhl894 {
		yyb894 = yyj894 > l
	} else {
		yyb894 = r.CheckBreak()
	}
	if yyb894 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj894++
	if yyhl894 {
		yyb894 = yyj894 > l
	} else {
		yyb894 = r.CheckBreak()
	}
	if yyb894 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv897 := &x.ObjectMeta
		yym898 := z.DecBinary()
		_ = yym898
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv897) {
		} else {
			z.DecFallback(yyv897, false)
		}
	}
	yyj894++
	if yyhl894 {
		yyb894 = yyj894 > l
	} else {
		yyb894 = r.CheckBreak()
	}
	if yyb894 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv899 := &x.Spec
		yyv899.CodecDecodeSelf(d)
	}
	yyj894++
	if yyhl894 {
		yyb894 = yyj894 > l
	} else {
		yyb894 = r.CheckBreak()
	}
	if yyb894 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv900 := &x.Status
		yyv900.CodecDecodeSelf(d)
	}
	for {
		yyj894++
		if yyhl894 {
			yyb894 = yyj894 > l
		} else {
			yyb894 = r.CheckBreak()
		}
		if yyb894 {
			break
		}
		z.DecStructFieldNotFound(yyj894-1, "")
	}
	r.ReadEnd()
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym901 := z.EncBinary()
		_ = yym901
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep902 := !z.EncBinary()
			yy2arr902 := z.EncBasicHandle().StructToArray
			var yyq902 [4]bool
			_, _, _ = yysep902, yyq902, yy2arr902
			const yyr902 bool = false
			yyq902[0] = x.Kind != ""
			yyq902[1] = x.APIVersion != ""
			yyq902[2] = true
			if yyr902 || yy2arr902 {
				r.EncodeArrayStart(4)
			} else {
				var yynn902 int = 1
				for _, b := range yyq902 {
					if b {
						yynn902++
					}
				}
				r.EncodeMapStart(yynn902)
			}
			if yyr902 || yy2arr902 {
				if yyq902[0] {
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq902[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr902 || yy2arr902 {
				if yyq902[1] {
					yym907 := z.EncBinary()
					_ = yym907
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq902[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr902 || yy2arr902 {
				if yyq902[2] {
					yy910 := &x.ListMeta
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else if z.HasExtensions() && z.EncExt(yy910) {
					} else {
						z.EncFallback(yy910)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq902[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy912 := &x.ListMeta
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else if z.HasExtensions() && z.EncExt(yy912) {
					} else {
						z.EncFallback(yy912)
					}
				}
			}
			if yyr902 || yy2arr902 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym916 := z.EncBinary()
					_ = yym916
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yysep902 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym917 := z.DecBinary()
	_ = yym917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl918 := r.ReadMapStart()
			if yyl918 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl918, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl918 := r.ReadArrayStart()
			if yyl918 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys919Slc
	var yyhl919 bool = l >= 0
	for yyj919 := 0; ; yyj919++ {
		if yyhl919 {
			if yyj919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys919Slc = r.DecodeBytes(yys919Slc, true, true)
		yys919 := string(yys919Slc)
		switch yys919 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv922 := &x.ListMeta
				yym923 := z.DecBinary()
				_ = yym923
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv922) {
				} else {
					z.DecFallback(yyv922, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv924 := &x.Items
				yym925 := z.DecBinary()
				_ = yym925
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv924), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys919)
		} // end switch yys919
	} // end for yyj919
	if !yyhl919 {
		r.ReadEnd()
	}
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj926 int
	var yyb926 bool
	var yyhl926 bool = l >= 0
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv929 := &x.ListMeta
		yym930 := z.DecBinary()
		_ = yym930
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv929) {
		} else {
			z.DecFallback(yyv929, false)
		}
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv931 := &x.Items
		yym932 := z.DecBinary()
		_ = yym932
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv931), d)
		}
	}
	for {
		yyj926++
		if yyhl926 {
			yyb926 = yyj926 > l
		} else {
			yyb926 = r.CheckBreak()
		}
		if yyb926 {
			break
		}
		z.DecStructFieldNotFound(yyj926-1, "")
	}
	r.ReadEnd()
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym933 := z.EncBinary()
		_ = yym933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep934 := !z.EncBinary()
			yy2arr934 := z.EncBasicHandle().StructToArray
			var yyq934 [2]bool
			_, _, _ = yysep934, yyq934, yy2arr934
			const yyr934 bool = false
			yyq934[0] = x.Backend != nil
			yyq934[1] = len(x.Rules) != 0
			if yyr934 || yy2arr934 {
				r.EncodeArrayStart(2)
			} else {
				var yynn934 int = 0
				for _, b := range yyq934 {
					if b {
						yynn934++
					}
				}
				r.EncodeMapStart(yynn934)
			}
			if yyr934 || yy2arr934 {
				if yyq934[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq934[0] {
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr934 || yy2arr934 {
				if yyq934[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym937 := z.EncBinary()
						_ = yym937
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq934[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym938 := z.EncBinary()
						_ = yym938
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yysep934 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym939 := z.DecBinary()
	_ = yym939
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl940 := r.ReadMapStart()
			if yyl940 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl940, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl940 := r.ReadArrayStart()
			if yyl940 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl940, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys941Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys941Slc
	var yyhl941 bool = l >= 0
	for yyj941 := 0; ; yyj941++ {
		if yyhl941 {
			if yyj941 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys941Slc = r.DecodeBytes(yys941Slc, true, true)
		yys941 := string(yys941Slc)
		switch yys941 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv943 := &x.Rules
				yym944 := z.DecBinary()
				_ = yym944
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv943), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys941)
		} // end switch yys941
	} // end for yyj941
	if !yyhl941 {
		r.ReadEnd()
	}
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj945 int
	var yyb945 bool
	var yyhl945 bool = l >= 0
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv947 := &x.Rules
		yym948 := z.DecBinary()
		_ = yym948
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv947), d)
		}
	}
	for {
		yyj945++
		if yyhl945 {
			yyb945 = yyj945 > l
		} else {
			yyb945 = r.CheckBreak()
		}
		if yyb945 {
			break
		}
		z.DecStructFieldNotFound(yyj945-1, "")
	}
	r.ReadEnd()
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym949 := z.EncBinary()
		_ = yym949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep950 := !z.EncBinary()
			yy2arr950 := z.EncBasicHandle().StructToArray
			var yyq950 [1]bool
			_, _, _ = yysep950, yyq950, yy2arr950
			const yyr950 bool = false
			yyq950[0] = true
			if yyr950 || yy2arr950 {
				r.EncodeArrayStart(1)
			} else {
				var yynn950 int = 0
				for _, b := range yyq950 {
					if b {
						yynn950++
					}
				}
				r.EncodeMapStart(yynn950)
			}
			if yyr950 || yy2arr950 {
				if yyq950[0] {
					yy952 := &x.LoadBalancer
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else if z.HasExtensions() && z.EncExt(yy952) {
					} else {
						z.EncFallback(yy952)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq950[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy954 := &x.LoadBalancer
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else if z.HasExtensions() && z.EncExt(yy954) {
					} else {
						z.EncFallback(yy954)
					}
				}
			}
			if yysep950 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym956 := z.DecBinary()
	_ = yym956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl957 := r.ReadMapStart()
			if yyl957 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl957, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl957 := r.ReadArrayStart()
			if yyl957 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys958Slc
	var yyhl958 bool = l >= 0
	for yyj958 := 0; ; yyj958++ {
		if yyhl958 {
			if yyj958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys958Slc = r.DecodeBytes(yys958Slc, true, true)
		yys958 := string(yys958Slc)
		switch yys958 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv959 := &x.LoadBalancer
				yym960 := z.DecBinary()
				_ = yym960
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv959) {
				} else {
					z.DecFallback(yyv959, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys958)
		} // end switch yys958
	} // end for yyj958
	if !yyhl958 {
		r.ReadEnd()
	}
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj961 int
	var yyb961 bool
	var yyhl961 bool = l >= 0
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv962 := &x.LoadBalancer
		yym963 := z.DecBinary()
		_ = yym963
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv962) {
		} else {
			z.DecFallback(yyv962, false)
		}
	}
	for {
		yyj961++
		if yyhl961 {
			yyb961 = yyj961 > l
		} else {
			yyb961 = r.CheckBreak()
		}
		if yyb961 {
			break
		}
		z.DecStructFieldNotFound(yyj961-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym964 := z.EncBinary()
		_ = yym964
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep965 := !z.EncBinary()
			yy2arr965 := z.EncBasicHandle().StructToArray
			var yyq965 [2]bool
			_, _, _ = yysep965, yyq965, yy2arr965
			const yyr965 bool = false
			yyq965[0] = x.Host != ""
			yyq965[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			if yyr965 || yy2arr965 {
				r.EncodeArrayStart(2)
			} else {
				var yynn965 int = 0
				for _, b := range yyq965 {
					if b {
						yynn965++
					}
				}
				r.EncodeMapStart(yynn965)
			}
			if yyr965 || yy2arr965 {
				if yyq965[0] {
					yym967 := z.EncBinary()
					_ = yym967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq965[0] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym968 := z.EncBinary()
					_ = yym968
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn969 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn969 = true
				goto LABEL969
			}
		LABEL969:
			if yyr965 || yy2arr965 {
				if yyn969 {
					r.EncodeNil()
				} else {
					if yyq965[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq965[1] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if yyn969 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep965 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym970 := z.DecBinary()
	_ = yym970
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl971 := r.ReadMapStart()
			if yyl971 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl971, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl971 := r.ReadArrayStart()
			if yyl971 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl971, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys972Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys972Slc
	var yyhl972 bool = l >= 0
	for yyj972 := 0; ; yyj972++ {
		if yyhl972 {
			if yyj972 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys972Slc = r.DecodeBytes(yys972Slc, true, true)
		yys972 := string(yys972Slc)
		switch yys972 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys972)
		} // end switch yys972
	} // end for yyj972
	if !yyhl972 {
		r.ReadEnd()
	}
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj975 int
	var yyb975 bool
	var yyhl975 bool = l >= 0
	yyj975++
	if yyhl975 {
		yyb975 = yyj975 > l
	} else {
		yyb975 = r.CheckBreak()
	}
	if yyb975 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj975++
	if yyhl975 {
		yyb975 = yyj975 > l
	} else {
		yyb975 = r.CheckBreak()
	}
	if yyb975 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj975++
		if yyhl975 {
			yyb975 = yyj975 > l
		} else {
			yyb975 = r.CheckBreak()
		}
		if yyb975 {
			break
		}
		z.DecStructFieldNotFound(yyj975-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym978 := z.EncBinary()
		_ = yym978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep979 := !z.EncBinary()
			yy2arr979 := z.EncBasicHandle().StructToArray
			var yyq979 [1]bool
			_, _, _ = yysep979, yyq979, yy2arr979
			const yyr979 bool = false
			yyq979[0] = x.HTTP != nil
			if yyr979 || yy2arr979 {
				r.EncodeArrayStart(1)
			} else {
				var yynn979 int = 0
				for _, b := range yyq979 {
					if b {
						yynn979++
					}
				}
				r.EncodeMapStart(yynn979)
			}
			if yyr979 || yy2arr979 {
				if yyq979[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq979[0] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yysep979 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym981 := z.DecBinary()
	_ = yym981
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl982 := r.ReadMapStart()
			if yyl982 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl982, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl982 := r.ReadArrayStart()
			if yyl982 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl982, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys983Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys983Slc
	var yyhl983 bool = l >= 0
	for yyj983 := 0; ; yyj983++ {
		if yyhl983 {
			if yyj983 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys983Slc = r.DecodeBytes(yys983Slc, true, true)
		yys983 := string(yys983Slc)
		switch yys983 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys983)
		} // end switch yys983
	} // end for yyj983
	if !yyhl983 {
		r.ReadEnd()
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj985 int
	var yyb985 bool
	var yyhl985 bool = l >= 0
	yyj985++
	if yyhl985 {
		yyb985 = yyj985 > l
	} else {
		yyb985 = r.CheckBreak()
	}
	if yyb985 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj985++
		if yyhl985 {
			yyb985 = yyj985 > l
		} else {
			yyb985 = r.CheckBreak()
		}
		if yyb985 {
			break
		}
		z.DecStructFieldNotFound(yyj985-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym987 := z.EncBinary()
		_ = yym987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep988 := !z.EncBinary()
			yy2arr988 := z.EncBasicHandle().StructToArray
			var yyq988 [1]bool
			_, _, _ = yysep988, yyq988, yy2arr988
			const yyr988 bool = false
			if yyr988 || yy2arr988 {
				r.EncodeArrayStart(1)
			} else {
				var yynn988 int = 1
				for _, b := range yyq988 {
					if b {
						yynn988++
					}
				}
				r.EncodeMapStart(yynn988)
			}
			if yyr988 || yy2arr988 {
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yysep988 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym992 := z.DecBinary()
	_ = yym992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl993 := r.ReadMapStart()
			if yyl993 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl993, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl993 := r.ReadArrayStart()
			if yyl993 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl993, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys994Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys994Slc
	var yyhl994 bool = l >= 0
	for yyj994 := 0; ; yyj994++ {
		if yyhl994 {
			if yyj994 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys994Slc = r.DecodeBytes(yys994Slc, true, true)
		yys994 := string(yys994Slc)
		switch yys994 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv995 := &x.Paths
				yym996 := z.DecBinary()
				_ = yym996
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv995), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys994)
		} // end switch yys994
	} // end for yyj994
	if !yyhl994 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj997 int
	var yyb997 bool
	var yyhl997 bool = l >= 0
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv998 := &x.Paths
		yym999 := z.DecBinary()
		_ = yym999
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv998), d)
		}
	}
	for {
		yyj997++
		if yyhl997 {
			yyb997 = yyj997 > l
		} else {
			yyb997 = r.CheckBreak()
		}
		if yyb997 {
			break
		}
		z.DecStructFieldNotFound(yyj997-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1000 := z.EncBinary()
		_ = yym1000
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1001 := !z.EncBinary()
			yy2arr1001 := z.EncBasicHandle().StructToArray
			var yyq1001 [2]bool
			_, _, _ = yysep1001, yyq1001, yy2arr1001
			const yyr1001 bool = false
			yyq1001[0] = x.Path != ""
			if yyr1001 || yy2arr1001 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1001 int = 1
				for _, b := range yyq1001 {
					if b {
						yynn1001++
					}
				}
				r.EncodeMapStart(yynn1001)
			}
			if yyr1001 || yy2arr1001 {
				if yyq1001[0] {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1001[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1001 || yy2arr1001 {
				yy1006 := &x.Backend
				yy1006.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				yy1007 := &x.Backend
				yy1007.CodecEncodeSelf(e)
			}
			if yysep1001 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1008 := z.DecBinary()
	_ = yym1008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1009 := r.ReadMapStart()
			if yyl1009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1009, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1009 := r.ReadArrayStart()
			if yyl1009 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1010Slc
	var yyhl1010 bool = l >= 0
	for yyj1010 := 0; ; yyj1010++ {
		if yyhl1010 {
			if yyj1010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1010Slc = r.DecodeBytes(yys1010Slc, true, true)
		yys1010 := string(yys1010Slc)
		switch yys1010 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1012 := &x.Backend
				yyv1012.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1010)
		} // end switch yys1010
	} // end for yyj1010
	if !yyhl1010 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1013 int
	var yyb1013 bool
	var yyhl1013 bool = l >= 0
	yyj1013++
	if yyhl1013 {
		yyb1013 = yyj1013 > l
	} else {
		yyb1013 = r.CheckBreak()
	}
	if yyb1013 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1013++
	if yyhl1013 {
		yyb1013 = yyj1013 > l
	} else {
		yyb1013 = r.CheckBreak()
	}
	if yyb1013 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1015 := &x.Backend
		yyv1015.CodecDecodeSelf(d)
	}
	for {
		yyj1013++
		if yyhl1013 {
			yyb1013 = yyj1013 > l
		} else {
			yyb1013 = r.CheckBreak()
		}
		if yyb1013 {
			break
		}
		z.DecStructFieldNotFound(yyj1013-1, "")
	}
	r.ReadEnd()
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1016 := z.EncBinary()
		_ = yym1016
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1017 := !z.EncBinary()
			yy2arr1017 := z.EncBasicHandle().StructToArray
			var yyq1017 [2]bool
			_, _, _ = yysep1017, yyq1017, yy2arr1017
			const yyr1017 bool = false
			if yyr1017 || yy2arr1017 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1017 int = 2
				for _, b := range yyq1017 {
					if b {
						yynn1017++
					}
				}
				r.EncodeMapStart(yynn1017)
			}
			if yyr1017 || yy2arr1017 {
				yym1019 := z.EncBinary()
				_ = yym1019
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				yym1020 := z.EncBinary()
				_ = yym1020
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1017 || yy2arr1017 {
				yy1022 := &x.ServicePort
				yym1023 := z.EncBinary()
				_ = yym1023
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1022) {
				} else if !yym1023 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1022)
				} else {
					z.EncFallback(yy1022)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				yy1024 := &x.ServicePort
				yym1025 := z.EncBinary()
				_ = yym1025
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1024) {
				} else if !yym1025 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1024)
				} else {
					z.EncFallback(yy1024)
				}
			}
			if yysep1017 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1026 := z.DecBinary()
	_ = yym1026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1027 := r.ReadMapStart()
			if yyl1027 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1027, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1027 := r.ReadArrayStart()
			if yyl1027 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1027, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1028Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1028Slc
	var yyhl1028 bool = l >= 0
	for yyj1028 := 0; ; yyj1028++ {
		if yyhl1028 {
			if yyj1028 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1028Slc = r.DecodeBytes(yys1028Slc, true, true)
		yys1028 := string(yys1028Slc)
		switch yys1028 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_util.IntOrString{}
			} else {
				yyv1030 := &x.ServicePort
				yym1031 := z.DecBinary()
				_ = yym1031
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1030) {
				} else if !yym1031 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1030)
				} else {
					z.DecFallback(yyv1030, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1028)
		} // end switch yys1028
	} // end for yyj1028
	if !yyhl1028 {
		r.ReadEnd()
	}
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1032 int
	var yyb1032 bool
	var yyhl1032 bool = l >= 0
	yyj1032++
	if yyhl1032 {
		yyb1032 = yyj1032 > l
	} else {
		yyb1032 = r.CheckBreak()
	}
	if yyb1032 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1032++
	if yyhl1032 {
		yyb1032 = yyj1032 > l
	} else {
		yyb1032 = r.CheckBreak()
	}
	if yyb1032 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_util.IntOrString{}
	} else {
		yyv1034 := &x.ServicePort
		yym1035 := z.DecBinary()
		_ = yym1035
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1034) {
		} else if !yym1035 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1034)
		} else {
			z.DecFallback(yyv1034, false)
		}
	}
	for {
		yyj1032++
		if yyhl1032 {
			yyb1032 = yyj1032 > l
		} else {
			yyb1032 = r.CheckBreak()
		}
		if yyb1032 {
			break
		}
		z.DecStructFieldNotFound(yyj1032-1, "")
	}
	r.ReadEnd()
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1036 := z.EncBinary()
	_ = yym1036
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1037 := z.DecBinary()
	_ = yym1037
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1038 := z.EncBinary()
		_ = yym1038
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1039 := !z.EncBinary()
			yy2arr1039 := z.EncBasicHandle().StructToArray
			var yyq1039 [2]bool
			_, _, _ = yysep1039, yyq1039, yy2arr1039
			const yyr1039 bool = false
			if yyr1039 || yy2arr1039 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1039 int = 2
				for _, b := range yyq1039 {
					if b {
						yynn1039++
					}
				}
				r.EncodeMapStart(yynn1039)
			}
			if yyr1039 || yy2arr1039 {
				x.Resource.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1039 || yy2arr1039 {
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yysep1039 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1044 := z.DecBinary()
	_ = yym1044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1045 := r.ReadMapStart()
			if yyl1045 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1045, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1045 := r.ReadArrayStart()
			if yyl1045 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1046Slc
	var yyhl1046 bool = l >= 0
	for yyj1046 := 0; ; yyj1046++ {
		if yyhl1046 {
			if yyj1046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1046Slc = r.DecodeBytes(yys1046Slc, true, true)
		yys1046 := string(yys1046Slc)
		switch yys1046 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1046)
		} // end switch yys1046
	} // end for yyj1046
	if !yyhl1046 {
		r.ReadEnd()
	}
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1049 int
	var yyb1049 bool
	var yyhl1049 bool = l >= 0
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1049++
		if yyhl1049 {
			yyb1049 = yyj1049 > l
		} else {
			yyb1049 = r.CheckBreak()
		}
		if yyb1049 {
			break
		}
		z.DecStructFieldNotFound(yyj1049-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1052 := z.EncBinary()
		_ = yym1052
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1053 := !z.EncBinary()
			yy2arr1053 := z.EncBasicHandle().StructToArray
			var yyq1053 [3]bool
			_, _, _ = yysep1053, yyq1053, yy2arr1053
			const yyr1053 bool = false
			if yyr1053 || yy2arr1053 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1053 int = 3
				for _, b := range yyq1053 {
					if b {
						yynn1053++
					}
				}
				r.EncodeMapStart(yynn1053)
			}
			if yyr1053 || yy2arr1053 {
				yym1055 := z.EncBinary()
				_ = yym1055
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				yym1056 := z.EncBinary()
				_ = yym1056
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1053 || yy2arr1053 {
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1053 || yy2arr1053 {
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yysep1053 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1063 := z.DecBinary()
	_ = yym1063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1064 := r.ReadMapStart()
			if yyl1064 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1064, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1064 := r.ReadArrayStart()
			if yyl1064 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1064, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1065Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1065Slc
	var yyhl1065 bool = l >= 0
	for yyj1065 := 0; ; yyj1065++ {
		if yyhl1065 {
			if yyj1065 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1065Slc = r.DecodeBytes(yys1065Slc, true, true)
		yys1065 := string(yys1065Slc)
		switch yys1065 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1068 := &x.TargetUtilization
				yym1069 := z.DecBinary()
				_ = yym1069
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1068), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1065)
		} // end switch yys1065
	} // end for yyj1065
	if !yyhl1065 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1070 int
	var yyb1070 bool
	var yyhl1070 bool = l >= 0
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1073 := &x.TargetUtilization
		yym1074 := z.DecBinary()
		_ = yym1074
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1073), d)
		}
	}
	for {
		yyj1070++
		if yyhl1070 {
			yyb1070 = yyj1070 > l
		} else {
			yyb1070 = r.CheckBreak()
		}
		if yyb1070 {
			break
		}
		z.DecStructFieldNotFound(yyj1070-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1075 := z.EncBinary()
		_ = yym1075
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1076 := !z.EncBinary()
			yy2arr1076 := z.EncBasicHandle().StructToArray
			var yyq1076 [4]bool
			_, _, _ = yysep1076, yyq1076, yy2arr1076
			const yyr1076 bool = false
			yyq1076[0] = x.Kind != ""
			yyq1076[1] = x.APIVersion != ""
			yyq1076[2] = true
			yyq1076[3] = true
			if yyr1076 || yy2arr1076 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1076 int = 0
				for _, b := range yyq1076 {
					if b {
						yynn1076++
					}
				}
				r.EncodeMapStart(yynn1076)
			}
			if yyr1076 || yy2arr1076 {
				if yyq1076[0] {
					yym1078 := z.EncBinary()
					_ = yym1078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1076[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1079 := z.EncBinary()
					_ = yym1079
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1076 || yy2arr1076 {
				if yyq1076[1] {
					yym1081 := z.EncBinary()
					_ = yym1081
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1076[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1082 := z.EncBinary()
					_ = yym1082
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1076 || yy2arr1076 {
				if yyq1076[2] {
					yy1084 := &x.ObjectMeta
					yym1085 := z.EncBinary()
					_ = yym1085
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1084) {
					} else {
						z.EncFallback(yy1084)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1076[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1086 := &x.ObjectMeta
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1086) {
					} else {
						z.EncFallback(yy1086)
					}
				}
			}
			if yyr1076 || yy2arr1076 {
				if yyq1076[3] {
					yy1089 := &x.Spec
					yy1089.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1076[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1090 := &x.Spec
					yy1090.CodecEncodeSelf(e)
				}
			}
			if yysep1076 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1091 := z.DecBinary()
	_ = yym1091
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1092 := r.ReadMapStart()
			if yyl1092 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1092, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1092 := r.ReadArrayStart()
			if yyl1092 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1092, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1093Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1093Slc
	var yyhl1093 bool = l >= 0
	for yyj1093 := 0; ; yyj1093++ {
		if yyhl1093 {
			if yyj1093 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1093Slc = r.DecodeBytes(yys1093Slc, true, true)
		yys1093 := string(yys1093Slc)
		switch yys1093 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1096 := &x.ObjectMeta
				yym1097 := z.DecBinary()
				_ = yym1097
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1096) {
				} else {
					z.DecFallback(yyv1096, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1098 := &x.Spec
				yyv1098.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1093)
		} // end switch yys1093
	} // end for yyj1093
	if !yyhl1093 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1099 int
	var yyb1099 bool
	var yyhl1099 bool = l >= 0
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1102 := &x.ObjectMeta
		yym1103 := z.DecBinary()
		_ = yym1103
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1102) {
		} else {
			z.DecFallback(yyv1102, false)
		}
	}
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1104 := &x.Spec
		yyv1104.CodecDecodeSelf(d)
	}
	for {
		yyj1099++
		if yyhl1099 {
			yyb1099 = yyj1099 > l
		} else {
			yyb1099 = r.CheckBreak()
		}
		if yyb1099 {
			break
		}
		z.DecStructFieldNotFound(yyj1099-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1105 := z.EncBinary()
		_ = yym1105
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1106 := !z.EncBinary()
			yy2arr1106 := z.EncBasicHandle().StructToArray
			var yyq1106 [4]bool
			_, _, _ = yysep1106, yyq1106, yy2arr1106
			const yyr1106 bool = false
			yyq1106[0] = x.Kind != ""
			yyq1106[1] = x.APIVersion != ""
			yyq1106[2] = true
			if yyr1106 || yy2arr1106 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1106 int = 1
				for _, b := range yyq1106 {
					if b {
						yynn1106++
					}
				}
				r.EncodeMapStart(yynn1106)
			}
			if yyr1106 || yy2arr1106 {
				if yyq1106[0] {
					yym1108 := z.EncBinary()
					_ = yym1108
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1106[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1109 := z.EncBinary()
					_ = yym1109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1106 || yy2arr1106 {
				if yyq1106[1] {
					yym1111 := z.EncBinary()
					_ = yym1111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1106[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1106 || yy2arr1106 {
				if yyq1106[2] {
					yy1114 := &x.ListMeta
					yym1115 := z.EncBinary()
					_ = yym1115
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1114) {
					} else {
						z.EncFallback(yy1114)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1106[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1116 := &x.ListMeta
					yym1117 := z.EncBinary()
					_ = yym1117
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1116) {
					} else {
						z.EncFallback(yy1116)
					}
				}
			}
			if yyr1106 || yy2arr1106 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1119 := z.EncBinary()
					_ = yym1119
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1120 := z.EncBinary()
					_ = yym1120
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep1106 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1121 := z.DecBinary()
	_ = yym1121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1122 := r.ReadMapStart()
			if yyl1122 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1122, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1122 := r.ReadArrayStart()
			if yyl1122 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1123Slc
	var yyhl1123 bool = l >= 0
	for yyj1123 := 0; ; yyj1123++ {
		if yyhl1123 {
			if yyj1123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1123Slc = r.DecodeBytes(yys1123Slc, true, true)
		yys1123 := string(yys1123Slc)
		switch yys1123 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1126 := &x.ListMeta
				yym1127 := z.DecBinary()
				_ = yym1127
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1126) {
				} else {
					z.DecFallback(yyv1126, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1128 := &x.Items
				yym1129 := z.DecBinary()
				_ = yym1129
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1128), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1123)
		} // end switch yys1123
	} // end for yyj1123
	if !yyhl1123 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1130 int
	var yyb1130 bool
	var yyhl1130 bool = l >= 0
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1133 := &x.ListMeta
		yym1134 := z.DecBinary()
		_ = yym1134
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1133) {
		} else {
			z.DecFallback(yyv1133, false)
		}
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1135 := &x.Items
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1135), d)
		}
	}
	for {
		yyj1130++
		if yyhl1130 {
			yyb1130 = yyj1130 > l
		} else {
			yyb1130 = r.CheckBreak()
		}
		if yyb1130 {
			break
		}
		z.DecStructFieldNotFound(yyj1130-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1137 := z.EncBinary()
		_ = yym1137
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1138 := !z.EncBinary()
			yy2arr1138 := z.EncBasicHandle().StructToArray
			var yyq1138 [2]bool
			_, _, _ = yysep1138, yyq1138, yy2arr1138
			const yyr1138 bool = false
			yyq1138[0] = len(x.MatchLabels) != 0
			yyq1138[1] = len(x.MatchExpressions) != 0
			if yyr1138 || yy2arr1138 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1138 int = 0
				for _, b := range yyq1138 {
					if b {
						yynn1138++
					}
				}
				r.EncodeMapStart(yynn1138)
			}
			if yyr1138 || yy2arr1138 {
				if yyq1138[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1140 := z.EncBinary()
						_ = yym1140
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1138[0] {
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1141 := z.EncBinary()
						_ = yym1141
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1138 || yy2arr1138 {
				if yyq1138[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1143 := z.EncBinary()
						_ = yym1143
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1138[1] {
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1144 := z.EncBinary()
						_ = yym1144
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yysep1138 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1145 := z.DecBinary()
	_ = yym1145
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1146 := r.ReadMapStart()
			if yyl1146 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1146, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1146 := r.ReadArrayStart()
			if yyl1146 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1146, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1147Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1147Slc
	var yyhl1147 bool = l >= 0
	for yyj1147 := 0; ; yyj1147++ {
		if yyhl1147 {
			if yyj1147 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1147Slc = r.DecodeBytes(yys1147Slc, true, true)
		yys1147 := string(yys1147Slc)
		switch yys1147 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1148 := &x.MatchLabels
				yym1149 := z.DecBinary()
				_ = yym1149
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1148, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1150 := &x.MatchExpressions
				yym1151 := z.DecBinary()
				_ = yym1151
				if false {
				} else {
					h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1150), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1147)
		} // end switch yys1147
	} // end for yyj1147
	if !yyhl1147 {
		r.ReadEnd()
	}
}

func (x *PodSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1152 int
	var yyb1152 bool
	var yyhl1152 bool = l >= 0
	yyj1152++
	if yyhl1152 {
		yyb1152 = yyj1152 > l
	} else {
		yyb1152 = r.CheckBreak()
	}
	if yyb1152 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1153 := &x.MatchLabels
		yym1154 := z.DecBinary()
		_ = yym1154
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1153, false, d)
		}
	}
	yyj1152++
	if yyhl1152 {
		yyb1152 = yyj1152 > l
	} else {
		yyb1152 = r.CheckBreak()
	}
	if yyb1152 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1155 := &x.MatchExpressions
		yym1156 := z.DecBinary()
		_ = yym1156
		if false {
		} else {
			h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1155), d)
		}
	}
	for {
		yyj1152++
		if yyhl1152 {
			yyb1152 = yyj1152 > l
		} else {
			yyb1152 = r.CheckBreak()
		}
		if yyb1152 {
			break
		}
		z.DecStructFieldNotFound(yyj1152-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1157 := z.EncBinary()
		_ = yym1157
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1158 := !z.EncBinary()
			yy2arr1158 := z.EncBasicHandle().StructToArray
			var yyq1158 [3]bool
			_, _, _ = yysep1158, yyq1158, yy2arr1158
			const yyr1158 bool = false
			yyq1158[2] = len(x.Values) != 0
			if yyr1158 || yy2arr1158 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1158 int = 2
				for _, b := range yyq1158 {
					if b {
						yynn1158++
					}
				}
				r.EncodeMapStart(yynn1158)
			}
			if yyr1158 || yy2arr1158 {
				yym1160 := z.EncBinary()
				_ = yym1160
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				yym1161 := z.EncBinary()
				_ = yym1161
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1158 || yy2arr1158 {
				x.Operator.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1158 || yy2arr1158 {
				if yyq1158[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1164 := z.EncBinary()
						_ = yym1164
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1158[2] {
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1165 := z.EncBinary()
						_ = yym1165
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yysep1158 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1166 := z.DecBinary()
	_ = yym1166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1167 := r.ReadMapStart()
			if yyl1167 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1167, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1167 := r.ReadArrayStart()
			if yyl1167 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1168Slc
	var yyhl1168 bool = l >= 0
	for yyj1168 := 0; ; yyj1168++ {
		if yyhl1168 {
			if yyj1168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1168Slc = r.DecodeBytes(yys1168Slc, true, true)
		yys1168 := string(yys1168Slc)
		switch yys1168 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = PodSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1171 := &x.Values
				yym1172 := z.DecBinary()
				_ = yym1172
				if false {
				} else {
					z.F.DecSliceStringX(yyv1171, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1168)
		} // end switch yys1168
	} // end for yyj1168
	if !yyhl1168 {
		r.ReadEnd()
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1173 int
	var yyb1173 bool
	var yyhl1173 bool = l >= 0
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = PodSelectorOperator(r.DecodeString())
	}
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1176 := &x.Values
		yym1177 := z.DecBinary()
		_ = yym1177
		if false {
		} else {
			z.F.DecSliceStringX(yyv1176, false, d)
		}
	}
	for {
		yyj1173++
		if yyhl1173 {
			yyb1173 = yyj1173 > l
		} else {
			yyb1173 = r.CheckBreak()
		}
		if yyb1173 {
			break
		}
		z.DecStructFieldNotFound(yyj1173-1, "")
	}
	r.ReadEnd()
}

func (x PodSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1178 := z.EncBinary()
	_ = yym1178
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1179 := z.DecBinary()
	_ = yym1179
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1180 := range v {
		yy1181 := &yyv1180
		yy1181.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1182 := *v
	yyh1182, yyl1182 := z.DecSliceHelperStart()

	var yyrr1182, yyrl1182 int
	var yyc1182, yyrt1182 bool
	_, _, _ = yyc1182, yyrt1182, yyrl1182
	yyrr1182 = yyl1182

	if yyv1182 == nil {
		if yyrl1182, yyrt1182 = z.DecInferLen(yyl1182, z.DecBasicHandle().MaxInitLen, 336); yyrt1182 {
			yyrr1182 = yyrl1182
		}
		yyv1182 = make([]HorizontalPodAutoscaler, yyrl1182)
		yyc1182 = true
	}

	if yyl1182 == 0 {
		if len(yyv1182) != 0 {
			yyv1182 = yyv1182[:0]
			yyc1182 = true
		}
	} else if yyl1182 > 0 {

		if yyl1182 > cap(yyv1182) {
			yyrl1182, yyrt1182 = z.DecInferLen(yyl1182, z.DecBasicHandle().MaxInitLen, 336)
			yyv1182 = make([]HorizontalPodAutoscaler, yyrl1182)
			yyc1182 = true

			yyrr1182 = len(yyv1182)
		} else if yyl1182 != len(yyv1182) {
			yyv1182 = yyv1182[:yyl1182]
			yyc1182 = true
		}
		yyj1182 := 0
		for ; yyj1182 < yyrr1182; yyj1182++ {
			if r.TryDecodeAsNil() {
				yyv1182[yyj1182] = HorizontalPodAutoscaler{}
			} else {
				yyv1183 := &yyv1182[yyj1182]
				yyv1183.CodecDecodeSelf(d)
			}

		}
		if yyrt1182 {
			for ; yyj1182 < yyl1182; yyj1182++ {
				yyv1182 = append(yyv1182, HorizontalPodAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1182[yyj1182] = HorizontalPodAutoscaler{}
				} else {
					yyv1184 := &yyv1182[yyj1182]
					yyv1184.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1182 := 0; !r.CheckBreak(); yyj1182++ {
			if yyj1182 >= len(yyv1182) {
				yyv1182 = append(yyv1182, HorizontalPodAutoscaler{}) // var yyz1182 HorizontalPodAutoscaler
				yyc1182 = true
			}

			if yyj1182 < len(yyv1182) {
				if r.TryDecodeAsNil() {
					yyv1182[yyj1182] = HorizontalPodAutoscaler{}
				} else {
					yyv1185 := &yyv1182[yyj1182]
					yyv1185.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1182.End()
	}
	if yyc1182 {
		*v = yyv1182
	}

}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1186 := range v {
		yy1187 := &yyv1186
		yy1187.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1188 := *v
	yyh1188, yyl1188 := z.DecSliceHelperStart()

	var yyrr1188, yyrl1188 int
	var yyc1188, yyrt1188 bool
	_, _, _ = yyc1188, yyrt1188, yyrl1188
	yyrr1188 = yyl1188

	if yyv1188 == nil {
		if yyrl1188, yyrt1188 = z.DecInferLen(yyl1188, z.DecBasicHandle().MaxInitLen, 32); yyrt1188 {
			yyrr1188 = yyrl1188
		}
		yyv1188 = make([]APIVersion, yyrl1188)
		yyc1188 = true
	}

	if yyl1188 == 0 {
		if len(yyv1188) != 0 {
			yyv1188 = yyv1188[:0]
			yyc1188 = true
		}
	} else if yyl1188 > 0 {

		if yyl1188 > cap(yyv1188) {
			yyrl1188, yyrt1188 = z.DecInferLen(yyl1188, z.DecBasicHandle().MaxInitLen, 32)
			yyv1188 = make([]APIVersion, yyrl1188)
			yyc1188 = true

			yyrr1188 = len(yyv1188)
		} else if yyl1188 != len(yyv1188) {
			yyv1188 = yyv1188[:yyl1188]
			yyc1188 = true
		}
		yyj1188 := 0
		for ; yyj1188 < yyrr1188; yyj1188++ {
			if r.TryDecodeAsNil() {
				yyv1188[yyj1188] = APIVersion{}
			} else {
				yyv1189 := &yyv1188[yyj1188]
				yyv1189.CodecDecodeSelf(d)
			}

		}
		if yyrt1188 {
			for ; yyj1188 < yyl1188; yyj1188++ {
				yyv1188 = append(yyv1188, APIVersion{})
				if r.TryDecodeAsNil() {
					yyv1188[yyj1188] = APIVersion{}
				} else {
					yyv1190 := &yyv1188[yyj1188]
					yyv1190.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1188 := 0; !r.CheckBreak(); yyj1188++ {
			if yyj1188 >= len(yyv1188) {
				yyv1188 = append(yyv1188, APIVersion{}) // var yyz1188 APIVersion
				yyc1188 = true
			}

			if yyj1188 < len(yyv1188) {
				if r.TryDecodeAsNil() {
					yyv1188[yyj1188] = APIVersion{}
				} else {
					yyv1191 := &yyv1188[yyj1188]
					yyv1191.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1188.End()
	}
	if yyc1188 {
		*v = yyv1188
	}

}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1192 := range v {
		yy1193 := &yyv1192
		yy1193.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1194 := *v
	yyh1194, yyl1194 := z.DecSliceHelperStart()

	var yyrr1194, yyrl1194 int
	var yyc1194, yyrt1194 bool
	_, _, _ = yyc1194, yyrt1194, yyrl1194
	yyrr1194 = yyl1194

	if yyv1194 == nil {
		if yyrl1194, yyrt1194 = z.DecInferLen(yyl1194, z.DecBasicHandle().MaxInitLen, 232); yyrt1194 {
			yyrr1194 = yyrl1194
		}
		yyv1194 = make([]ThirdPartyResource, yyrl1194)
		yyc1194 = true
	}

	if yyl1194 == 0 {
		if len(yyv1194) != 0 {
			yyv1194 = yyv1194[:0]
			yyc1194 = true
		}
	} else if yyl1194 > 0 {

		if yyl1194 > cap(yyv1194) {
			yyrl1194, yyrt1194 = z.DecInferLen(yyl1194, z.DecBasicHandle().MaxInitLen, 232)
			yyv1194 = make([]ThirdPartyResource, yyrl1194)
			yyc1194 = true

			yyrr1194 = len(yyv1194)
		} else if yyl1194 != len(yyv1194) {
			yyv1194 = yyv1194[:yyl1194]
			yyc1194 = true
		}
		yyj1194 := 0
		for ; yyj1194 < yyrr1194; yyj1194++ {
			if r.TryDecodeAsNil() {
				yyv1194[yyj1194] = ThirdPartyResource{}
			} else {
				yyv1195 := &yyv1194[yyj1194]
				yyv1195.CodecDecodeSelf(d)
			}

		}
		if yyrt1194 {
			for ; yyj1194 < yyl1194; yyj1194++ {
				yyv1194 = append(yyv1194, ThirdPartyResource{})
				if r.TryDecodeAsNil() {
					yyv1194[yyj1194] = ThirdPartyResource{}
				} else {
					yyv1196 := &yyv1194[yyj1194]
					yyv1196.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1194 := 0; !r.CheckBreak(); yyj1194++ {
			if yyj1194 >= len(yyv1194) {
				yyv1194 = append(yyv1194, ThirdPartyResource{}) // var yyz1194 ThirdPartyResource
				yyc1194 = true
			}

			if yyj1194 < len(yyv1194) {
				if r.TryDecodeAsNil() {
					yyv1194[yyj1194] = ThirdPartyResource{}
				} else {
					yyv1197 := &yyv1194[yyj1194]
					yyv1197.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1194.End()
	}
	if yyc1194 {
		*v = yyv1194
	}

}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1198 := range v {
		yy1199 := &yyv1198
		yy1199.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1200 := *v
	yyh1200, yyl1200 := z.DecSliceHelperStart()

	var yyrr1200, yyrl1200 int
	var yyc1200, yyrt1200 bool
	_, _, _ = yyc1200, yyrt1200, yyrl1200
	yyrr1200 = yyl1200

	if yyv1200 == nil {
		if yyrl1200, yyrt1200 = z.DecInferLen(yyl1200, z.DecBasicHandle().MaxInitLen, 272); yyrt1200 {
			yyrr1200 = yyrl1200
		}
		yyv1200 = make([]Deployment, yyrl1200)
		yyc1200 = true
	}

	if yyl1200 == 0 {
		if len(yyv1200) != 0 {
			yyv1200 = yyv1200[:0]
			yyc1200 = true
		}
	} else if yyl1200 > 0 {

		if yyl1200 > cap(yyv1200) {
			yyrl1200, yyrt1200 = z.DecInferLen(yyl1200, z.DecBasicHandle().MaxInitLen, 272)
			yyv1200 = make([]Deployment, yyrl1200)
			yyc1200 = true

			yyrr1200 = len(yyv1200)
		} else if yyl1200 != len(yyv1200) {
			yyv1200 = yyv1200[:yyl1200]
			yyc1200 = true
		}
		yyj1200 := 0
		for ; yyj1200 < yyrr1200; yyj1200++ {
			if r.TryDecodeAsNil() {
				yyv1200[yyj1200] = Deployment{}
			} else {
				yyv1201 := &yyv1200[yyj1200]
				yyv1201.CodecDecodeSelf(d)
			}

		}
		if yyrt1200 {
			for ; yyj1200 < yyl1200; yyj1200++ {
				yyv1200 = append(yyv1200, Deployment{})
				if r.TryDecodeAsNil() {
					yyv1200[yyj1200] = Deployment{}
				} else {
					yyv1202 := &yyv1200[yyj1200]
					yyv1202.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1200 := 0; !r.CheckBreak(); yyj1200++ {
			if yyj1200 >= len(yyv1200) {
				yyv1200 = append(yyv1200, Deployment{}) // var yyz1200 Deployment
				yyc1200 = true
			}

			if yyj1200 < len(yyv1200) {
				if r.TryDecodeAsNil() {
					yyv1200[yyj1200] = Deployment{}
				} else {
					yyv1203 := &yyv1200[yyj1200]
					yyv1203.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1200.End()
	}
	if yyc1200 {
		*v = yyv1200
	}

}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1204 := range v {
		yy1205 := &yyv1204
		yy1205.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1206 := *v
	yyh1206, yyl1206 := z.DecSliceHelperStart()

	var yyrr1206, yyrl1206 int
	var yyc1206, yyrt1206 bool
	_, _, _ = yyc1206, yyrt1206, yyrl1206
	yyrr1206 = yyl1206

	if yyv1206 == nil {
		if yyrl1206, yyrt1206 = z.DecInferLen(yyl1206, z.DecBasicHandle().MaxInitLen, 232); yyrt1206 {
			yyrr1206 = yyrl1206
		}
		yyv1206 = make([]DaemonSet, yyrl1206)
		yyc1206 = true
	}

	if yyl1206 == 0 {
		if len(yyv1206) != 0 {
			yyv1206 = yyv1206[:0]
			yyc1206 = true
		}
	} else if yyl1206 > 0 {

		if yyl1206 > cap(yyv1206) {
			yyrl1206, yyrt1206 = z.DecInferLen(yyl1206, z.DecBasicHandle().MaxInitLen, 232)
			yyv1206 = make([]DaemonSet, yyrl1206)
			yyc1206 = true

			yyrr1206 = len(yyv1206)
		} else if yyl1206 != len(yyv1206) {
			yyv1206 = yyv1206[:yyl1206]
			yyc1206 = true
		}
		yyj1206 := 0
		for ; yyj1206 < yyrr1206; yyj1206++ {
			if r.TryDecodeAsNil() {
				yyv1206[yyj1206] = DaemonSet{}
			} else {
				yyv1207 := &yyv1206[yyj1206]
				yyv1207.CodecDecodeSelf(d)
			}

		}
		if yyrt1206 {
			for ; yyj1206 < yyl1206; yyj1206++ {
				yyv1206 = append(yyv1206, DaemonSet{})
				if r.TryDecodeAsNil() {
					yyv1206[yyj1206] = DaemonSet{}
				} else {
					yyv1208 := &yyv1206[yyj1206]
					yyv1208.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1206 := 0; !r.CheckBreak(); yyj1206++ {
			if yyj1206 >= len(yyv1206) {
				yyv1206 = append(yyv1206, DaemonSet{}) // var yyz1206 DaemonSet
				yyc1206 = true
			}

			if yyj1206 < len(yyv1206) {
				if r.TryDecodeAsNil() {
					yyv1206[yyj1206] = DaemonSet{}
				} else {
					yyv1209 := &yyv1206[yyj1206]
					yyv1209.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1206.End()
	}
	if yyc1206 {
		*v = yyv1206
	}

}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1210 := range v {
		yy1211 := &yyv1210
		yy1211.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1212 := *v
	yyh1212, yyl1212 := z.DecSliceHelperStart()

	var yyrr1212, yyrl1212 int
	var yyc1212, yyrt1212 bool
	_, _, _ = yyc1212, yyrt1212, yyrl1212
	yyrr1212 = yyl1212

	if yyv1212 == nil {
		if yyrl1212, yyrt1212 = z.DecInferLen(yyl1212, z.DecBasicHandle().MaxInitLen, 216); yyrt1212 {
			yyrr1212 = yyrl1212
		}
		yyv1212 = make([]ThirdPartyResourceData, yyrl1212)
		yyc1212 = true
	}

	if yyl1212 == 0 {
		if len(yyv1212) != 0 {
			yyv1212 = yyv1212[:0]
			yyc1212 = true
		}
	} else if yyl1212 > 0 {

		if yyl1212 > cap(yyv1212) {
			yyrl1212, yyrt1212 = z.DecInferLen(yyl1212, z.DecBasicHandle().MaxInitLen, 216)
			yyv1212 = make([]ThirdPartyResourceData, yyrl1212)
			yyc1212 = true

			yyrr1212 = len(yyv1212)
		} else if yyl1212 != len(yyv1212) {
			yyv1212 = yyv1212[:yyl1212]
			yyc1212 = true
		}
		yyj1212 := 0
		for ; yyj1212 < yyrr1212; yyj1212++ {
			if r.TryDecodeAsNil() {
				yyv1212[yyj1212] = ThirdPartyResourceData{}
			} else {
				yyv1213 := &yyv1212[yyj1212]
				yyv1213.CodecDecodeSelf(d)
			}

		}
		if yyrt1212 {
			for ; yyj1212 < yyl1212; yyj1212++ {
				yyv1212 = append(yyv1212, ThirdPartyResourceData{})
				if r.TryDecodeAsNil() {
					yyv1212[yyj1212] = ThirdPartyResourceData{}
				} else {
					yyv1214 := &yyv1212[yyj1212]
					yyv1214.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1212 := 0; !r.CheckBreak(); yyj1212++ {
			if yyj1212 >= len(yyv1212) {
				yyv1212 = append(yyv1212, ThirdPartyResourceData{}) // var yyz1212 ThirdPartyResourceData
				yyc1212 = true
			}

			if yyj1212 < len(yyv1212) {
				if r.TryDecodeAsNil() {
					yyv1212[yyj1212] = ThirdPartyResourceData{}
				} else {
					yyv1215 := &yyv1212[yyj1212]
					yyv1215.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1212.End()
	}
	if yyc1212 {
		*v = yyv1212
	}

}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1216 := range v {
		yy1217 := &yyv1216
		yy1217.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1218 := *v
	yyh1218, yyl1218 := z.DecSliceHelperStart()

	var yyrr1218, yyrl1218 int
	var yyc1218, yyrt1218 bool
	_, _, _ = yyc1218, yyrt1218, yyrl1218
	yyrr1218 = yyl1218

	if yyv1218 == nil {
		if yyrl1218, yyrt1218 = z.DecInferLen(yyl1218, z.DecBasicHandle().MaxInitLen, 608); yyrt1218 {
			yyrr1218 = yyrl1218
		}
		yyv1218 = make([]Job, yyrl1218)
		yyc1218 = true
	}

	if yyl1218 == 0 {
		if len(yyv1218) != 0 {
			yyv1218 = yyv1218[:0]
			yyc1218 = true
		}
	} else if yyl1218 > 0 {

		if yyl1218 > cap(yyv1218) {
			yyrl1218, yyrt1218 = z.DecInferLen(yyl1218, z.DecBasicHandle().MaxInitLen, 608)
			yyv1218 = make([]Job, yyrl1218)
			yyc1218 = true

			yyrr1218 = len(yyv1218)
		} else if yyl1218 != len(yyv1218) {
			yyv1218 = yyv1218[:yyl1218]
			yyc1218 = true
		}
		yyj1218 := 0
		for ; yyj1218 < yyrr1218; yyj1218++ {
			if r.TryDecodeAsNil() {
				yyv1218[yyj1218] = Job{}
			} else {
				yyv1219 := &yyv1218[yyj1218]
				yyv1219.CodecDecodeSelf(d)
			}

		}
		if yyrt1218 {
			for ; yyj1218 < yyl1218; yyj1218++ {
				yyv1218 = append(yyv1218, Job{})
				if r.TryDecodeAsNil() {
					yyv1218[yyj1218] = Job{}
				} else {
					yyv1220 := &yyv1218[yyj1218]
					yyv1220.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1218 := 0; !r.CheckBreak(); yyj1218++ {
			if yyj1218 >= len(yyv1218) {
				yyv1218 = append(yyv1218, Job{}) // var yyz1218 Job
				yyc1218 = true
			}

			if yyj1218 < len(yyv1218) {
				if r.TryDecodeAsNil() {
					yyv1218[yyj1218] = Job{}
				} else {
					yyv1221 := &yyv1218[yyj1218]
					yyv1221.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1218.End()
	}
	if yyc1218 {
		*v = yyv1218
	}

}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1222 := range v {
		yy1223 := &yyv1222
		yy1223.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1224 := *v
	yyh1224, yyl1224 := z.DecSliceHelperStart()

	var yyrr1224, yyrl1224 int
	var yyc1224, yyrt1224 bool
	_, _, _ = yyc1224, yyrt1224, yyrl1224
	yyrr1224 = yyl1224

	if yyv1224 == nil {
		if yyrl1224, yyrt1224 = z.DecInferLen(yyl1224, z.DecBasicHandle().MaxInitLen, 112); yyrt1224 {
			yyrr1224 = yyrl1224
		}
		yyv1224 = make([]JobCondition, yyrl1224)
		yyc1224 = true
	}

	if yyl1224 == 0 {
		if len(yyv1224) != 0 {
			yyv1224 = yyv1224[:0]
			yyc1224 = true
		}
	} else if yyl1224 > 0 {

		if yyl1224 > cap(yyv1224) {
			yyrl1224, yyrt1224 = z.DecInferLen(yyl1224, z.DecBasicHandle().MaxInitLen, 112)
			yyv1224 = make([]JobCondition, yyrl1224)
			yyc1224 = true

			yyrr1224 = len(yyv1224)
		} else if yyl1224 != len(yyv1224) {
			yyv1224 = yyv1224[:yyl1224]
			yyc1224 = true
		}
		yyj1224 := 0
		for ; yyj1224 < yyrr1224; yyj1224++ {
			if r.TryDecodeAsNil() {
				yyv1224[yyj1224] = JobCondition{}
			} else {
				yyv1225 := &yyv1224[yyj1224]
				yyv1225.CodecDecodeSelf(d)
			}

		}
		if yyrt1224 {
			for ; yyj1224 < yyl1224; yyj1224++ {
				yyv1224 = append(yyv1224, JobCondition{})
				if r.TryDecodeAsNil() {
					yyv1224[yyj1224] = JobCondition{}
				} else {
					yyv1226 := &yyv1224[yyj1224]
					yyv1226.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1224 := 0; !r.CheckBreak(); yyj1224++ {
			if yyj1224 >= len(yyv1224) {
				yyv1224 = append(yyv1224, JobCondition{}) // var yyz1224 JobCondition
				yyc1224 = true
			}

			if yyj1224 < len(yyv1224) {
				if r.TryDecodeAsNil() {
					yyv1224[yyj1224] = JobCondition{}
				} else {
					yyv1227 := &yyv1224[yyj1224]
					yyv1227.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1224.End()
	}
	if yyc1224 {
		*v = yyv1224
	}

}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1228 := range v {
		yy1229 := &yyv1228
		yy1229.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1230 := *v
	yyh1230, yyl1230 := z.DecSliceHelperStart()

	var yyrr1230, yyrl1230 int
	var yyc1230, yyrt1230 bool
	_, _, _ = yyc1230, yyrt1230, yyrl1230
	yyrr1230 = yyl1230

	if yyv1230 == nil {
		if yyrl1230, yyrt1230 = z.DecInferLen(yyl1230, z.DecBasicHandle().MaxInitLen, 248); yyrt1230 {
			yyrr1230 = yyrl1230
		}
		yyv1230 = make([]Ingress, yyrl1230)
		yyc1230 = true
	}

	if yyl1230 == 0 {
		if len(yyv1230) != 0 {
			yyv1230 = yyv1230[:0]
			yyc1230 = true
		}
	} else if yyl1230 > 0 {

		if yyl1230 > cap(yyv1230) {
			yyrl1230, yyrt1230 = z.DecInferLen(yyl1230, z.DecBasicHandle().MaxInitLen, 248)
			yyv1230 = make([]Ingress, yyrl1230)
			yyc1230 = true

			yyrr1230 = len(yyv1230)
		} else if yyl1230 != len(yyv1230) {
			yyv1230 = yyv1230[:yyl1230]
			yyc1230 = true
		}
		yyj1230 := 0
		for ; yyj1230 < yyrr1230; yyj1230++ {
			if r.TryDecodeAsNil() {
				yyv1230[yyj1230] = Ingress{}
			} else {
				yyv1231 := &yyv1230[yyj1230]
				yyv1231.CodecDecodeSelf(d)
			}

		}
		if yyrt1230 {
			for ; yyj1230 < yyl1230; yyj1230++ {
				yyv1230 = append(yyv1230, Ingress{})
				if r.TryDecodeAsNil() {
					yyv1230[yyj1230] = Ingress{}
				} else {
					yyv1232 := &yyv1230[yyj1230]
					yyv1232.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1230 := 0; !r.CheckBreak(); yyj1230++ {
			if yyj1230 >= len(yyv1230) {
				yyv1230 = append(yyv1230, Ingress{}) // var yyz1230 Ingress
				yyc1230 = true
			}

			if yyj1230 < len(yyv1230) {
				if r.TryDecodeAsNil() {
					yyv1230[yyj1230] = Ingress{}
				} else {
					yyv1233 := &yyv1230[yyj1230]
					yyv1233.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1230.End()
	}
	if yyc1230 {
		*v = yyv1230
	}

}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1234 := range v {
		yy1235 := &yyv1234
		yy1235.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1236 := *v
	yyh1236, yyl1236 := z.DecSliceHelperStart()

	var yyrr1236, yyrl1236 int
	var yyc1236, yyrt1236 bool
	_, _, _ = yyc1236, yyrt1236, yyrl1236
	yyrr1236 = yyl1236

	if yyv1236 == nil {
		if yyrl1236, yyrt1236 = z.DecInferLen(yyl1236, z.DecBasicHandle().MaxInitLen, 24); yyrt1236 {
			yyrr1236 = yyrl1236
		}
		yyv1236 = make([]IngressRule, yyrl1236)
		yyc1236 = true
	}

	if yyl1236 == 0 {
		if len(yyv1236) != 0 {
			yyv1236 = yyv1236[:0]
			yyc1236 = true
		}
	} else if yyl1236 > 0 {

		if yyl1236 > cap(yyv1236) {
			yyrl1236, yyrt1236 = z.DecInferLen(yyl1236, z.DecBasicHandle().MaxInitLen, 24)
			yyv1236 = make([]IngressRule, yyrl1236)
			yyc1236 = true

			yyrr1236 = len(yyv1236)
		} else if yyl1236 != len(yyv1236) {
			yyv1236 = yyv1236[:yyl1236]
			yyc1236 = true
		}
		yyj1236 := 0
		for ; yyj1236 < yyrr1236; yyj1236++ {
			if r.TryDecodeAsNil() {
				yyv1236[yyj1236] = IngressRule{}
			} else {
				yyv1237 := &yyv1236[yyj1236]
				yyv1237.CodecDecodeSelf(d)
			}

		}
		if yyrt1236 {
			for ; yyj1236 < yyl1236; yyj1236++ {
				yyv1236 = append(yyv1236, IngressRule{})
				if r.TryDecodeAsNil() {
					yyv1236[yyj1236] = IngressRule{}
				} else {
					yyv1238 := &yyv1236[yyj1236]
					yyv1238.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1236 := 0; !r.CheckBreak(); yyj1236++ {
			if yyj1236 >= len(yyv1236) {
				yyv1236 = append(yyv1236, IngressRule{}) // var yyz1236 IngressRule
				yyc1236 = true
			}

			if yyj1236 < len(yyv1236) {
				if r.TryDecodeAsNil() {
					yyv1236[yyj1236] = IngressRule{}
				} else {
					yyv1239 := &yyv1236[yyj1236]
					yyv1239.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1236.End()
	}
	if yyc1236 {
		*v = yyv1236
	}

}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1240 := range v {
		yy1241 := &yyv1240
		yy1241.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1242 := *v
	yyh1242, yyl1242 := z.DecSliceHelperStart()

	var yyrr1242, yyrl1242 int
	var yyc1242, yyrt1242 bool
	_, _, _ = yyc1242, yyrt1242, yyrl1242
	yyrr1242 = yyl1242

	if yyv1242 == nil {
		if yyrl1242, yyrt1242 = z.DecInferLen(yyl1242, z.DecBasicHandle().MaxInitLen, 64); yyrt1242 {
			yyrr1242 = yyrl1242
		}
		yyv1242 = make([]HTTPIngressPath, yyrl1242)
		yyc1242 = true
	}

	if yyl1242 == 0 {
		if len(yyv1242) != 0 {
			yyv1242 = yyv1242[:0]
			yyc1242 = true
		}
	} else if yyl1242 > 0 {

		if yyl1242 > cap(yyv1242) {
			yyrl1242, yyrt1242 = z.DecInferLen(yyl1242, z.DecBasicHandle().MaxInitLen, 64)
			yyv1242 = make([]HTTPIngressPath, yyrl1242)
			yyc1242 = true

			yyrr1242 = len(yyv1242)
		} else if yyl1242 != len(yyv1242) {
			yyv1242 = yyv1242[:yyl1242]
			yyc1242 = true
		}
		yyj1242 := 0
		for ; yyj1242 < yyrr1242; yyj1242++ {
			if r.TryDecodeAsNil() {
				yyv1242[yyj1242] = HTTPIngressPath{}
			} else {
				yyv1243 := &yyv1242[yyj1242]
				yyv1243.CodecDecodeSelf(d)
			}

		}
		if yyrt1242 {
			for ; yyj1242 < yyl1242; yyj1242++ {
				yyv1242 = append(yyv1242, HTTPIngressPath{})
				if r.TryDecodeAsNil() {
					yyv1242[yyj1242] = HTTPIngressPath{}
				} else {
					yyv1244 := &yyv1242[yyj1242]
					yyv1244.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1242 := 0; !r.CheckBreak(); yyj1242++ {
			if yyj1242 >= len(yyv1242) {
				yyv1242 = append(yyv1242, HTTPIngressPath{}) // var yyz1242 HTTPIngressPath
				yyc1242 = true
			}

			if yyj1242 < len(yyv1242) {
				if r.TryDecodeAsNil() {
					yyv1242[yyj1242] = HTTPIngressPath{}
				} else {
					yyv1245 := &yyv1242[yyj1242]
					yyv1245.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1242.End()
	}
	if yyc1242 {
		*v = yyv1242
	}

}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1246 := range v {
		yy1247 := &yyv1246
		yy1247.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1248 := *v
	yyh1248, yyl1248 := z.DecSliceHelperStart()

	var yyrr1248, yyrl1248 int
	var yyc1248, yyrt1248 bool
	_, _, _ = yyc1248, yyrt1248, yyrl1248
	yyrr1248 = yyl1248

	if yyv1248 == nil {
		if yyrl1248, yyrt1248 = z.DecInferLen(yyl1248, z.DecBasicHandle().MaxInitLen, 24); yyrt1248 {
			yyrr1248 = yyrl1248
		}
		yyv1248 = make([]NodeUtilization, yyrl1248)
		yyc1248 = true
	}

	if yyl1248 == 0 {
		if len(yyv1248) != 0 {
			yyv1248 = yyv1248[:0]
			yyc1248 = true
		}
	} else if yyl1248 > 0 {

		if yyl1248 > cap(yyv1248) {
			yyrl1248, yyrt1248 = z.DecInferLen(yyl1248, z.DecBasicHandle().MaxInitLen, 24)
			yyv1248 = make([]NodeUtilization, yyrl1248)
			yyc1248 = true

			yyrr1248 = len(yyv1248)
		} else if yyl1248 != len(yyv1248) {
			yyv1248 = yyv1248[:yyl1248]
			yyc1248 = true
		}
		yyj1248 := 0
		for ; yyj1248 < yyrr1248; yyj1248++ {
			if r.TryDecodeAsNil() {
				yyv1248[yyj1248] = NodeUtilization{}
			} else {
				yyv1249 := &yyv1248[yyj1248]
				yyv1249.CodecDecodeSelf(d)
			}

		}
		if yyrt1248 {
			for ; yyj1248 < yyl1248; yyj1248++ {
				yyv1248 = append(yyv1248, NodeUtilization{})
				if r.TryDecodeAsNil() {
					yyv1248[yyj1248] = NodeUtilization{}
				} else {
					yyv1250 := &yyv1248[yyj1248]
					yyv1250.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1248 := 0; !r.CheckBreak(); yyj1248++ {
			if yyj1248 >= len(yyv1248) {
				yyv1248 = append(yyv1248, NodeUtilization{}) // var yyz1248 NodeUtilization
				yyc1248 = true
			}

			if yyj1248 < len(yyv1248) {
				if r.TryDecodeAsNil() {
					yyv1248[yyj1248] = NodeUtilization{}
				} else {
					yyv1251 := &yyv1248[yyj1248]
					yyv1251.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1248.End()
	}
	if yyc1248 {
		*v = yyv1248
	}

}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1252 := range v {
		yy1253 := &yyv1252
		yy1253.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1254 := *v
	yyh1254, yyl1254 := z.DecSliceHelperStart()

	var yyrr1254, yyrl1254 int
	var yyc1254, yyrt1254 bool
	_, _, _ = yyc1254, yyrt1254, yyrl1254
	yyrr1254 = yyl1254

	if yyv1254 == nil {
		if yyrl1254, yyrt1254 = z.DecInferLen(yyl1254, z.DecBasicHandle().MaxInitLen, 232); yyrt1254 {
			yyrr1254 = yyrl1254
		}
		yyv1254 = make([]ClusterAutoscaler, yyrl1254)
		yyc1254 = true
	}

	if yyl1254 == 0 {
		if len(yyv1254) != 0 {
			yyv1254 = yyv1254[:0]
			yyc1254 = true
		}
	} else if yyl1254 > 0 {

		if yyl1254 > cap(yyv1254) {
			yyrl1254, yyrt1254 = z.DecInferLen(yyl1254, z.DecBasicHandle().MaxInitLen, 232)
			yyv1254 = make([]ClusterAutoscaler, yyrl1254)
			yyc1254 = true

			yyrr1254 = len(yyv1254)
		} else if yyl1254 != len(yyv1254) {
			yyv1254 = yyv1254[:yyl1254]
			yyc1254 = true
		}
		yyj1254 := 0
		for ; yyj1254 < yyrr1254; yyj1254++ {
			if r.TryDecodeAsNil() {
				yyv1254[yyj1254] = ClusterAutoscaler{}
			} else {
				yyv1255 := &yyv1254[yyj1254]
				yyv1255.CodecDecodeSelf(d)
			}

		}
		if yyrt1254 {
			for ; yyj1254 < yyl1254; yyj1254++ {
				yyv1254 = append(yyv1254, ClusterAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1254[yyj1254] = ClusterAutoscaler{}
				} else {
					yyv1256 := &yyv1254[yyj1254]
					yyv1256.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1254 := 0; !r.CheckBreak(); yyj1254++ {
			if yyj1254 >= len(yyv1254) {
				yyv1254 = append(yyv1254, ClusterAutoscaler{}) // var yyz1254 ClusterAutoscaler
				yyc1254 = true
			}

			if yyj1254 < len(yyv1254) {
				if r.TryDecodeAsNil() {
					yyv1254[yyj1254] = ClusterAutoscaler{}
				} else {
					yyv1257 := &yyv1254[yyj1254]
					yyv1257.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1254.End()
	}
	if yyc1254 {
		*v = yyv1254
	}

}

func (x codecSelfer1234) encSlicePodSelectorRequirement(v []PodSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1258 := range v {
		yy1259 := &yyv1258
		yy1259.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodSelectorRequirement(v *[]PodSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1260 := *v
	yyh1260, yyl1260 := z.DecSliceHelperStart()

	var yyrr1260, yyrl1260 int
	var yyc1260, yyrt1260 bool
	_, _, _ = yyc1260, yyrt1260, yyrl1260
	yyrr1260 = yyl1260

	if yyv1260 == nil {
		if yyrl1260, yyrt1260 = z.DecInferLen(yyl1260, z.DecBasicHandle().MaxInitLen, 56); yyrt1260 {
			yyrr1260 = yyrl1260
		}
		yyv1260 = make([]PodSelectorRequirement, yyrl1260)
		yyc1260 = true
	}

	if yyl1260 == 0 {
		if len(yyv1260) != 0 {
			yyv1260 = yyv1260[:0]
			yyc1260 = true
		}
	} else if yyl1260 > 0 {

		if yyl1260 > cap(yyv1260) {
			yyrl1260, yyrt1260 = z.DecInferLen(yyl1260, z.DecBasicHandle().MaxInitLen, 56)
			yyv1260 = make([]PodSelectorRequirement, yyrl1260)
			yyc1260 = true

			yyrr1260 = len(yyv1260)
		} else if yyl1260 != len(yyv1260) {
			yyv1260 = yyv1260[:yyl1260]
			yyc1260 = true
		}
		yyj1260 := 0
		for ; yyj1260 < yyrr1260; yyj1260++ {
			if r.TryDecodeAsNil() {
				yyv1260[yyj1260] = PodSelectorRequirement{}
			} else {
				yyv1261 := &yyv1260[yyj1260]
				yyv1261.CodecDecodeSelf(d)
			}

		}
		if yyrt1260 {
			for ; yyj1260 < yyl1260; yyj1260++ {
				yyv1260 = append(yyv1260, PodSelectorRequirement{})
				if r.TryDecodeAsNil() {
					yyv1260[yyj1260] = PodSelectorRequirement{}
				} else {
					yyv1262 := &yyv1260[yyj1260]
					yyv1262.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1260 := 0; !r.CheckBreak(); yyj1260++ {
			if yyj1260 >= len(yyv1260) {
				yyv1260 = append(yyv1260, PodSelectorRequirement{}) // var yyz1260 PodSelectorRequirement
				yyc1260 = true
			}

			if yyj1260 < len(yyv1260) {
				if r.TryDecodeAsNil() {
					yyv1260[yyj1260] = PodSelectorRequirement{}
				} else {
					yyv1263 := &yyv1260[yyj1260]
					yyv1263.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1260.End()
	}
	if yyc1260 {
		*v = yyv1260
	}

}
