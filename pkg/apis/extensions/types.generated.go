/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg6_util.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	if !yyhl8 {
		r.ReadEnd()
	}
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadEnd()
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				var yynn13 int = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
			}
			if yyr13 || yy2arr13 {
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yysep13 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	if !yyhl22 {
		r.ReadEnd()
	}
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	r.ReadEnd()
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = true
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				var yynn31 int = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
			}
			if yyr31 || yy2arr31 {
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[1] {
					yy36 := &x.APIVersion
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else if z.HasExtensions() && z.EncExt(yy36) {
					} else if !yym37 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy36)
					} else {
						z.EncFallback(yy36)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy38 := &x.APIVersion
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else if z.HasExtensions() && z.EncExt(yy38) {
					} else if !yym39 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy38)
					} else {
						z.EncFallback(yy38)
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[2] {
					yy41 := &x.ObjectMeta
					yy41.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy42 := &x.ObjectMeta
					yy42.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[3] {
					yy44 := &x.Spec
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy45 := &x.Spec
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[4] {
					yy47 := &x.Status
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy48 := &x.Status
					yy48.CodecEncodeSelf(e)
				}
			}
			if yysep31 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		switch yys51 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv53 := &x.APIVersion
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv55 := &x.ObjectMeta
				yyv55.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv56 := &x.Spec
				yyv56.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv57 := &x.Status
				yyv57.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	if !yyhl51 {
		r.ReadEnd()
	}
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj58 int
	var yyb58 bool
	var yyhl58 bool = l >= 0
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv60 := &x.APIVersion
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv60) {
		} else if !yym61 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv60)
		} else {
			z.DecFallback(yyv60, false)
		}
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv62 := &x.ObjectMeta
		yyv62.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv63 := &x.Spec
		yyv63.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv64 := &x.Status
		yyv64.CodecDecodeSelf(d)
	}
	for {
		yyj58++
		if yyhl58 {
			yyb58 = yyj58 > l
		} else {
			yyb58 = r.CheckBreak()
		}
		if yyb58 {
			break
		}
		z.DecStructFieldNotFound(yyj58-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym65 := z.EncBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep66 := !z.EncBinary()
			yy2arr66 := z.EncBasicHandle().StructToArray
			var yyq66 [2]bool
			_, _, _ = yysep66, yyq66, yy2arr66
			const yyr66 bool = false
			yyq66[0] = x.Kind != ""
			yyq66[1] = true
			if yyr66 || yy2arr66 {
				r.EncodeArrayStart(2)
			} else {
				var yynn66 int = 0
				for _, b := range yyq66 {
					if b {
						yynn66++
					}
				}
				r.EncodeMapStart(yynn66)
			}
			if yyr66 || yy2arr66 {
				if yyq66[0] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr66 || yy2arr66 {
				if yyq66[1] {
					yy71 := &x.APIVersion
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else if z.HasExtensions() && z.EncExt(yy71) {
					} else if !yym72 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy71)
					} else {
						z.EncFallback(yy71)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq66[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy73 := &x.APIVersion
					yym74 := z.EncBinary()
					_ = yym74
					if false {
					} else if z.HasExtensions() && z.EncExt(yy73) {
					} else if !yym74 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy73)
					} else {
						z.EncFallback(yy73)
					}
				}
			}
			if yysep66 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym75 := z.DecBinary()
	_ = yym75
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl76 := r.ReadMapStart()
			if yyl76 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl76, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl76 := r.ReadArrayStart()
			if yyl76 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl76, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys77Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys77Slc
	var yyhl77 bool = l >= 0
	for yyj77 := 0; ; yyj77++ {
		if yyhl77 {
			if yyj77 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys77Slc = r.DecodeBytes(yys77Slc, true, true)
		yys77 := string(yys77Slc)
		switch yys77 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv79 := &x.APIVersion
				yym80 := z.DecBinary()
				_ = yym80
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv79) {
				} else if !yym80 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv79)
				} else {
					z.DecFallback(yyv79, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys77)
		} // end switch yys77
	} // end for yyj77
	if !yyhl77 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj81 int
	var yyb81 bool
	var yyhl81 bool = l >= 0
	yyj81++
	if yyhl81 {
		yyb81 = yyj81 > l
	} else {
		yyb81 = r.CheckBreak()
	}
	if yyb81 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj81++
	if yyhl81 {
		yyb81 = yyj81 > l
	} else {
		yyb81 = r.CheckBreak()
	}
	if yyb81 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv83 := &x.APIVersion
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv83) {
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv83)
		} else {
			z.DecFallback(yyv83, false)
		}
	}
	for {
		yyj81++
		if yyhl81 {
			yyb81 = yyj81 > l
		} else {
			yyb81 = r.CheckBreak()
		}
		if yyb81 {
			break
		}
		z.DecStructFieldNotFound(yyj81-1, "")
	}
	r.ReadEnd()
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym85 := z.EncBinary()
		_ = yym85
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep86 := !z.EncBinary()
			yy2arr86 := z.EncBasicHandle().StructToArray
			var yyq86 [4]bool
			_, _, _ = yysep86, yyq86, yy2arr86
			const yyr86 bool = false
			yyq86[0] = x.Kind != ""
			yyq86[1] = x.Name != ""
			yyq86[2] = x.APIVersion != ""
			yyq86[3] = x.Subresource != ""
			if yyr86 || yy2arr86 {
				r.EncodeArrayStart(4)
			} else {
				var yynn86 int = 0
				for _, b := range yyq86 {
					if b {
						yynn86++
					}
				}
				r.EncodeMapStart(yynn86)
			}
			if yyr86 || yy2arr86 {
				if yyq86[0] {
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq86[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym89 := z.EncBinary()
					_ = yym89
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr86 || yy2arr86 {
				if yyq86[1] {
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq86[1] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr86 || yy2arr86 {
				if yyq86[2] {
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq86[2] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym95 := z.EncBinary()
					_ = yym95
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr86 || yy2arr86 {
				if yyq86[3] {
					yym97 := z.EncBinary()
					_ = yym97
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq86[3] {
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					yym98 := z.EncBinary()
					_ = yym98
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yysep86 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym99 := z.DecBinary()
	_ = yym99
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl100 := r.ReadMapStart()
			if yyl100 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl100, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl100 := r.ReadArrayStart()
			if yyl100 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys101Slc
	var yyhl101 bool = l >= 0
	for yyj101 := 0; ; yyj101++ {
		if yyhl101 {
			if yyj101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys101Slc = r.DecodeBytes(yys101Slc, true, true)
		yys101 := string(yys101Slc)
		switch yys101 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys101)
		} // end switch yys101
	} // end for yyj101
	if !yyhl101 {
		r.ReadEnd()
	}
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj106 int
	var yyb106 bool
	var yyhl106 bool = l >= 0
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj106++
		if yyhl106 {
			yyb106 = yyj106 > l
		} else {
			yyb106 = r.CheckBreak()
		}
		if yyb106 {
			break
		}
		z.DecStructFieldNotFound(yyj106-1, "")
	}
	r.ReadEnd()
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym111 := z.EncBinary()
		_ = yym111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep112 := !z.EncBinary()
			yy2arr112 := z.EncBasicHandle().StructToArray
			var yyq112 [1]bool
			_, _, _ = yysep112, yyq112, yy2arr112
			const yyr112 bool = false
			if yyr112 || yy2arr112 {
				r.EncodeArrayStart(1)
			} else {
				var yynn112 int = 1
				for _, b := range yyq112 {
					if b {
						yynn112++
					}
				}
				r.EncodeMapStart(yynn112)
			}
			if yyr112 || yy2arr112 {
				yym114 := z.EncBinary()
				_ = yym114
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				yym115 := z.EncBinary()
				_ = yym115
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yysep112 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym116 := z.DecBinary()
	_ = yym116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl117 := r.ReadMapStart()
			if yyl117 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl117, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl117 := r.ReadArrayStart()
			if yyl117 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys118Slc
	var yyhl118 bool = l >= 0
	for yyj118 := 0; ; yyj118++ {
		if yyhl118 {
			if yyj118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys118Slc = r.DecodeBytes(yys118Slc, true, true)
		yys118 := string(yys118Slc)
		switch yys118 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys118)
		} // end switch yys118
	} // end for yyj118
	if !yyhl118 {
		r.ReadEnd()
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj120 int
	var yyb120 bool
	var yyhl120 bool = l >= 0
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj120++
		if yyhl120 {
			yyb120 = yyj120 > l
		} else {
			yyb120 = r.CheckBreak()
		}
		if yyb120 {
			break
		}
		z.DecStructFieldNotFound(yyj120-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym122 := z.EncBinary()
		_ = yym122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep123 := !z.EncBinary()
			yy2arr123 := z.EncBasicHandle().StructToArray
			var yyq123 [4]bool
			_, _, _ = yysep123, yyq123, yy2arr123
			const yyr123 bool = false
			yyq123[1] = x.MinReplicas != nil
			yyq123[3] = x.CPUUtilization != nil
			if yyr123 || yy2arr123 {
				r.EncodeArrayStart(4)
			} else {
				var yynn123 int = 2
				for _, b := range yyq123 {
					if b {
						yynn123++
					}
				}
				r.EncodeMapStart(yynn123)
			}
			if yyr123 || yy2arr123 {
				yy125 := &x.ScaleRef
				yy125.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				yy126 := &x.ScaleRef
				yy126.CodecEncodeSelf(e)
			}
			if yyr123 || yy2arr123 {
				if yyq123[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy128 := *x.MinReplicas
						yym129 := z.EncBinary()
						_ = yym129
						if false {
						} else {
							r.EncodeInt(int64(yy128))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[1] {
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy130 := *x.MinReplicas
						yym131 := z.EncBinary()
						_ = yym131
						if false {
						} else {
							r.EncodeInt(int64(yy130))
						}
					}
				}
			}
			if yyr123 || yy2arr123 {
				yym133 := z.EncBinary()
				_ = yym133
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				yym134 := z.EncBinary()
				_ = yym134
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr123 || yy2arr123 {
				if yyq123[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[3] {
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yysep123 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym136 := z.DecBinary()
	_ = yym136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl137 := r.ReadMapStart()
			if yyl137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl137, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl137 := r.ReadArrayStart()
			if yyl137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys138Slc
	var yyhl138 bool = l >= 0
	for yyj138 := 0; ; yyj138++ {
		if yyhl138 {
			if yyj138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys138Slc = r.DecodeBytes(yys138Slc, true, true)
		yys138 := string(yys138Slc)
		switch yys138 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv139 := &x.ScaleRef
				yyv139.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym141 := z.DecBinary()
				_ = yym141
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys138)
		} // end switch yys138
	} // end for yyj138
	if !yyhl138 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj144 int
	var yyb144 bool
	var yyhl144 bool = l >= 0
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv145 := &x.ScaleRef
		yyv145.CodecDecodeSelf(d)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym147 := z.DecBinary()
		_ = yym147
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj144++
		if yyhl144 {
			yyb144 = yyj144 > l
		} else {
			yyb144 = r.CheckBreak()
		}
		if yyb144 {
			break
		}
		z.DecStructFieldNotFound(yyj144-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym150 := z.EncBinary()
		_ = yym150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep151 := !z.EncBinary()
			yy2arr151 := z.EncBasicHandle().StructToArray
			var yyq151 [5]bool
			_, _, _ = yysep151, yyq151, yy2arr151
			const yyr151 bool = false
			yyq151[0] = x.ObservedGeneration != nil
			yyq151[1] = x.LastScaleTime != nil
			yyq151[4] = x.CurrentCPUUtilizationPercentage != nil
			if yyr151 || yy2arr151 {
				r.EncodeArrayStart(5)
			} else {
				var yynn151 int = 2
				for _, b := range yyq151 {
					if b {
						yynn151++
					}
				}
				r.EncodeMapStart(yynn151)
			}
			if yyr151 || yy2arr151 {
				if yyq151[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy153 := *x.ObservedGeneration
						yym154 := z.EncBinary()
						_ = yym154
						if false {
						} else {
							r.EncodeInt(int64(yy153))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq151[0] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy155 := *x.ObservedGeneration
						yym156 := z.EncBinary()
						_ = yym156
						if false {
						} else {
							r.EncodeInt(int64(yy155))
						}
					}
				}
			}
			if yyr151 || yy2arr151 {
				if yyq151[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym158 := z.EncBinary()
						_ = yym158
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym158 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym158 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq151[1] {
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym159 := z.EncBinary()
						_ = yym159
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym159 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym159 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr151 || yy2arr151 {
				yym161 := z.EncBinary()
				_ = yym161
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				yym162 := z.EncBinary()
				_ = yym162
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr151 || yy2arr151 {
				yym164 := z.EncBinary()
				_ = yym164
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr151 || yy2arr151 {
				if yyq151[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy167 := *x.CurrentCPUUtilizationPercentage
						yym168 := z.EncBinary()
						_ = yym168
						if false {
						} else {
							r.EncodeInt(int64(yy167))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq151[4] {
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy169 := *x.CurrentCPUUtilizationPercentage
						yym170 := z.EncBinary()
						_ = yym170
						if false {
						} else {
							r.EncodeInt(int64(yy169))
						}
					}
				}
			}
			if yysep151 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym171 := z.DecBinary()
	_ = yym171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl172 := r.ReadMapStart()
			if yyl172 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl172, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl172 := r.ReadArrayStart()
			if yyl172 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys173Slc
	var yyhl173 bool = l >= 0
	for yyj173 := 0; ; yyj173++ {
		if yyhl173 {
			if yyj173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys173Slc = r.DecodeBytes(yys173Slc, true, true)
		yys173 := string(yys173Slc)
		switch yys173 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym175 := z.DecBinary()
				_ = yym175
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym177 := z.DecBinary()
				_ = yym177
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym177 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym177 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym181 := z.DecBinary()
				_ = yym181
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys173)
		} // end switch yys173
	} // end for yyj173
	if !yyhl173 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym184 := z.DecBinary()
		_ = yym184
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym186 := z.DecBinary()
		_ = yym186
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym186 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym186 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym190 := z.DecBinary()
		_ = yym190
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym191 := z.EncBinary()
		_ = yym191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep192 := !z.EncBinary()
			yy2arr192 := z.EncBasicHandle().StructToArray
			var yyq192 [5]bool
			_, _, _ = yysep192, yyq192, yy2arr192
			const yyr192 bool = false
			yyq192[0] = x.Kind != ""
			yyq192[1] = true
			yyq192[2] = true
			yyq192[3] = true
			yyq192[4] = true
			if yyr192 || yy2arr192 {
				r.EncodeArrayStart(5)
			} else {
				var yynn192 int = 0
				for _, b := range yyq192 {
					if b {
						yynn192++
					}
				}
				r.EncodeMapStart(yynn192)
			}
			if yyr192 || yy2arr192 {
				if yyq192[0] {
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq192[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym195 := z.EncBinary()
					_ = yym195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr192 || yy2arr192 {
				if yyq192[1] {
					yy197 := &x.APIVersion
					yym198 := z.EncBinary()
					_ = yym198
					if false {
					} else if z.HasExtensions() && z.EncExt(yy197) {
					} else if !yym198 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy197)
					} else {
						z.EncFallback(yy197)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq192[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy199 := &x.APIVersion
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else if z.HasExtensions() && z.EncExt(yy199) {
					} else if !yym200 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy199)
					} else {
						z.EncFallback(yy199)
					}
				}
			}
			if yyr192 || yy2arr192 {
				if yyq192[2] {
					yy202 := &x.ObjectMeta
					yy202.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq192[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy203 := &x.ObjectMeta
					yy203.CodecEncodeSelf(e)
				}
			}
			if yyr192 || yy2arr192 {
				if yyq192[3] {
					yy205 := &x.Spec
					yy205.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq192[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy206 := &x.Spec
					yy206.CodecEncodeSelf(e)
				}
			}
			if yyr192 || yy2arr192 {
				if yyq192[4] {
					yy208 := &x.Status
					yy208.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq192[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy209 := &x.Status
					yy209.CodecEncodeSelf(e)
				}
			}
			if yysep192 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym210 := z.DecBinary()
	_ = yym210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl211 := r.ReadMapStart()
			if yyl211 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl211, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl211 := r.ReadArrayStart()
			if yyl211 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl211, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys212Slc
	var yyhl212 bool = l >= 0
	for yyj212 := 0; ; yyj212++ {
		if yyhl212 {
			if yyj212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys212Slc = r.DecodeBytes(yys212Slc, true, true)
		yys212 := string(yys212Slc)
		switch yys212 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv214 := &x.APIVersion
				yym215 := z.DecBinary()
				_ = yym215
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv214) {
				} else if !yym215 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv214)
				} else {
					z.DecFallback(yyv214, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv216 := &x.ObjectMeta
				yyv216.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv217 := &x.Spec
				yyv217.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv218 := &x.Status
				yyv218.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys212)
		} // end switch yys212
	} // end for yyj212
	if !yyhl212 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj219 int
	var yyb219 bool
	var yyhl219 bool = l >= 0
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv221 := &x.APIVersion
		yym222 := z.DecBinary()
		_ = yym222
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv221) {
		} else if !yym222 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv221)
		} else {
			z.DecFallback(yyv221, false)
		}
	}
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv223 := &x.ObjectMeta
		yyv223.CodecDecodeSelf(d)
	}
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv224 := &x.Spec
		yyv224.CodecDecodeSelf(d)
	}
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv225 := &x.Status
		yyv225.CodecDecodeSelf(d)
	}
	for {
		yyj219++
		if yyhl219 {
			yyb219 = yyj219 > l
		} else {
			yyb219 = r.CheckBreak()
		}
		if yyb219 {
			break
		}
		z.DecStructFieldNotFound(yyj219-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym226 := z.EncBinary()
		_ = yym226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep227 := !z.EncBinary()
			yy2arr227 := z.EncBasicHandle().StructToArray
			var yyq227 [4]bool
			_, _, _ = yysep227, yyq227, yy2arr227
			const yyr227 bool = false
			yyq227[0] = x.Kind != ""
			yyq227[1] = true
			yyq227[2] = true
			if yyr227 || yy2arr227 {
				r.EncodeArrayStart(4)
			} else {
				var yynn227 int = 1
				for _, b := range yyq227 {
					if b {
						yynn227++
					}
				}
				r.EncodeMapStart(yynn227)
			}
			if yyr227 || yy2arr227 {
				if yyq227[0] {
					yym229 := z.EncBinary()
					_ = yym229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq227[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym230 := z.EncBinary()
					_ = yym230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr227 || yy2arr227 {
				if yyq227[1] {
					yy232 := &x.APIVersion
					yym233 := z.EncBinary()
					_ = yym233
					if false {
					} else if z.HasExtensions() && z.EncExt(yy232) {
					} else if !yym233 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy232)
					} else {
						z.EncFallback(yy232)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq227[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy234 := &x.APIVersion
					yym235 := z.EncBinary()
					_ = yym235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy234) {
					} else if !yym235 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy234)
					} else {
						z.EncFallback(yy234)
					}
				}
			}
			if yyr227 || yy2arr227 {
				if yyq227[2] {
					yy237 := &x.ListMeta
					yym238 := z.EncBinary()
					_ = yym238
					if false {
					} else if z.HasExtensions() && z.EncExt(yy237) {
					} else {
						z.EncFallback(yy237)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq227[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy239 := &x.ListMeta
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else if z.HasExtensions() && z.EncExt(yy239) {
					} else {
						z.EncFallback(yy239)
					}
				}
			}
			if yyr227 || yy2arr227 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym242 := z.EncBinary()
					_ = yym242
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym243 := z.EncBinary()
					_ = yym243
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep227 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym244 := z.DecBinary()
	_ = yym244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl245 := r.ReadMapStart()
			if yyl245 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl245, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl245 := r.ReadArrayStart()
			if yyl245 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl245, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys246Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys246Slc
	var yyhl246 bool = l >= 0
	for yyj246 := 0; ; yyj246++ {
		if yyhl246 {
			if yyj246 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys246Slc = r.DecodeBytes(yys246Slc, true, true)
		yys246 := string(yys246Slc)
		switch yys246 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv248 := &x.APIVersion
				yym249 := z.DecBinary()
				_ = yym249
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv248) {
				} else if !yym249 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv248)
				} else {
					z.DecFallback(yyv248, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv250 := &x.ListMeta
				yym251 := z.DecBinary()
				_ = yym251
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv250) {
				} else {
					z.DecFallback(yyv250, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv252 := &x.Items
				yym253 := z.DecBinary()
				_ = yym253
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv252), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys246)
		} // end switch yys246
	} // end for yyj246
	if !yyhl246 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj254 int
	var yyb254 bool
	var yyhl254 bool = l >= 0
	yyj254++
	if yyhl254 {
		yyb254 = yyj254 > l
	} else {
		yyb254 = r.CheckBreak()
	}
	if yyb254 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj254++
	if yyhl254 {
		yyb254 = yyj254 > l
	} else {
		yyb254 = r.CheckBreak()
	}
	if yyb254 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv256 := &x.APIVersion
		yym257 := z.DecBinary()
		_ = yym257
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv256) {
		} else if !yym257 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv256)
		} else {
			z.DecFallback(yyv256, false)
		}
	}
	yyj254++
	if yyhl254 {
		yyb254 = yyj254 > l
	} else {
		yyb254 = r.CheckBreak()
	}
	if yyb254 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv258 := &x.ListMeta
		yym259 := z.DecBinary()
		_ = yym259
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv258) {
		} else {
			z.DecFallback(yyv258, false)
		}
	}
	yyj254++
	if yyhl254 {
		yyb254 = yyj254 > l
	} else {
		yyb254 = r.CheckBreak()
	}
	if yyb254 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv260 := &x.Items
		yym261 := z.DecBinary()
		_ = yym261
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv260), d)
		}
	}
	for {
		yyj254++
		if yyhl254 {
			yyb254 = yyj254 > l
		} else {
			yyb254 = r.CheckBreak()
		}
		if yyb254 {
			break
		}
		z.DecStructFieldNotFound(yyj254-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym262 := z.EncBinary()
		_ = yym262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep263 := !z.EncBinary()
			yy2arr263 := z.EncBasicHandle().StructToArray
			var yyq263 [5]bool
			_, _, _ = yysep263, yyq263, yy2arr263
			const yyr263 bool = false
			yyq263[0] = x.Kind != ""
			yyq263[1] = true
			yyq263[2] = true
			yyq263[3] = x.Description != ""
			yyq263[4] = len(x.Versions) != 0
			if yyr263 || yy2arr263 {
				r.EncodeArrayStart(5)
			} else {
				var yynn263 int = 0
				for _, b := range yyq263 {
					if b {
						yynn263++
					}
				}
				r.EncodeMapStart(yynn263)
			}
			if yyr263 || yy2arr263 {
				if yyq263[0] {
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq263[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr263 || yy2arr263 {
				if yyq263[1] {
					yy268 := &x.APIVersion
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else if z.HasExtensions() && z.EncExt(yy268) {
					} else if !yym269 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy268)
					} else {
						z.EncFallback(yy268)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy270 := &x.APIVersion
					yym271 := z.EncBinary()
					_ = yym271
					if false {
					} else if z.HasExtensions() && z.EncExt(yy270) {
					} else if !yym271 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy270)
					} else {
						z.EncFallback(yy270)
					}
				}
			}
			if yyr263 || yy2arr263 {
				if yyq263[2] {
					yy273 := &x.ObjectMeta
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy274 := &x.ObjectMeta
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr263 || yy2arr263 {
				if yyq263[3] {
					yym276 := z.EncBinary()
					_ = yym276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq263[3] {
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					yym277 := z.EncBinary()
					_ = yym277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr263 || yy2arr263 {
				if yyq263[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym279 := z.EncBinary()
						_ = yym279
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[4] {
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym280 := z.EncBinary()
						_ = yym280
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yysep263 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym281 := z.DecBinary()
	_ = yym281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl282 := r.ReadMapStart()
			if yyl282 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl282, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl282 := r.ReadArrayStart()
			if yyl282 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys283Slc
	var yyhl283 bool = l >= 0
	for yyj283 := 0; ; yyj283++ {
		if yyhl283 {
			if yyj283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys283Slc = r.DecodeBytes(yys283Slc, true, true)
		yys283 := string(yys283Slc)
		switch yys283 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv285 := &x.APIVersion
				yym286 := z.DecBinary()
				_ = yym286
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv285) {
				} else if !yym286 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv285)
				} else {
					z.DecFallback(yyv285, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv287 := &x.ObjectMeta
				yyv287.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv289 := &x.Versions
				yym290 := z.DecBinary()
				_ = yym290
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv289), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys283)
		} // end switch yys283
	} // end for yyj283
	if !yyhl283 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj291 int
	var yyb291 bool
	var yyhl291 bool = l >= 0
	yyj291++
	if yyhl291 {
		yyb291 = yyj291 > l
	} else {
		yyb291 = r.CheckBreak()
	}
	if yyb291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj291++
	if yyhl291 {
		yyb291 = yyj291 > l
	} else {
		yyb291 = r.CheckBreak()
	}
	if yyb291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv293 := &x.APIVersion
		yym294 := z.DecBinary()
		_ = yym294
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv293) {
		} else if !yym294 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv293)
		} else {
			z.DecFallback(yyv293, false)
		}
	}
	yyj291++
	if yyhl291 {
		yyb291 = yyj291 > l
	} else {
		yyb291 = r.CheckBreak()
	}
	if yyb291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv295 := &x.ObjectMeta
		yyv295.CodecDecodeSelf(d)
	}
	yyj291++
	if yyhl291 {
		yyb291 = yyj291 > l
	} else {
		yyb291 = r.CheckBreak()
	}
	if yyb291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj291++
	if yyhl291 {
		yyb291 = yyj291 > l
	} else {
		yyb291 = r.CheckBreak()
	}
	if yyb291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv297 := &x.Versions
		yym298 := z.DecBinary()
		_ = yym298
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv297), d)
		}
	}
	for {
		yyj291++
		if yyhl291 {
			yyb291 = yyj291 > l
		} else {
			yyb291 = r.CheckBreak()
		}
		if yyb291 {
			break
		}
		z.DecStructFieldNotFound(yyj291-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym299 := z.EncBinary()
		_ = yym299
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep300 := !z.EncBinary()
			yy2arr300 := z.EncBasicHandle().StructToArray
			var yyq300 [4]bool
			_, _, _ = yysep300, yyq300, yy2arr300
			const yyr300 bool = false
			yyq300[0] = x.Kind != ""
			yyq300[1] = true
			yyq300[2] = true
			if yyr300 || yy2arr300 {
				r.EncodeArrayStart(4)
			} else {
				var yynn300 int = 1
				for _, b := range yyq300 {
					if b {
						yynn300++
					}
				}
				r.EncodeMapStart(yynn300)
			}
			if yyr300 || yy2arr300 {
				if yyq300[0] {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq300[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr300 || yy2arr300 {
				if yyq300[1] {
					yy305 := &x.APIVersion
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else if z.HasExtensions() && z.EncExt(yy305) {
					} else if !yym306 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy305)
					} else {
						z.EncFallback(yy305)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq300[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy307 := &x.APIVersion
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else if z.HasExtensions() && z.EncExt(yy307) {
					} else if !yym308 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy307)
					} else {
						z.EncFallback(yy307)
					}
				}
			}
			if yyr300 || yy2arr300 {
				if yyq300[2] {
					yy310 := &x.ListMeta
					yym311 := z.EncBinary()
					_ = yym311
					if false {
					} else if z.HasExtensions() && z.EncExt(yy310) {
					} else {
						z.EncFallback(yy310)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq300[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy312 := &x.ListMeta
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else if z.HasExtensions() && z.EncExt(yy312) {
					} else {
						z.EncFallback(yy312)
					}
				}
			}
			if yyr300 || yy2arr300 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym315 := z.EncBinary()
					_ = yym315
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yysep300 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym317 := z.DecBinary()
	_ = yym317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl318 := r.ReadMapStart()
			if yyl318 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl318, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl318 := r.ReadArrayStart()
			if yyl318 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys319Slc
	var yyhl319 bool = l >= 0
	for yyj319 := 0; ; yyj319++ {
		if yyhl319 {
			if yyj319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys319Slc = r.DecodeBytes(yys319Slc, true, true)
		yys319 := string(yys319Slc)
		switch yys319 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv321 := &x.APIVersion
				yym322 := z.DecBinary()
				_ = yym322
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv321) {
				} else if !yym322 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv321)
				} else {
					z.DecFallback(yyv321, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv323 := &x.ListMeta
				yym324 := z.DecBinary()
				_ = yym324
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv323) {
				} else {
					z.DecFallback(yyv323, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv325 := &x.Items
				yym326 := z.DecBinary()
				_ = yym326
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv325), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys319)
		} // end switch yys319
	} // end for yyj319
	if !yyhl319 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj327 int
	var yyb327 bool
	var yyhl327 bool = l >= 0
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv329 := &x.APIVersion
		yym330 := z.DecBinary()
		_ = yym330
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv329) {
		} else if !yym330 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv329)
		} else {
			z.DecFallback(yyv329, false)
		}
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv331 := &x.ListMeta
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv331) {
		} else {
			z.DecFallback(yyv331, false)
		}
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv333 := &x.Items
		yym334 := z.DecBinary()
		_ = yym334
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv333), d)
		}
	}
	for {
		yyj327++
		if yyhl327 {
			yyb327 = yyj327 > l
		} else {
			yyb327 = r.CheckBreak()
		}
		if yyb327 {
			break
		}
		z.DecStructFieldNotFound(yyj327-1, "")
	}
	r.ReadEnd()
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym335 := z.EncBinary()
		_ = yym335
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep336 := !z.EncBinary()
			yy2arr336 := z.EncBasicHandle().StructToArray
			var yyq336 [2]bool
			_, _, _ = yysep336, yyq336, yy2arr336
			const yyr336 bool = false
			yyq336[0] = x.Name != ""
			yyq336[1] = x.APIGroup != ""
			if yyr336 || yy2arr336 {
				r.EncodeArrayStart(2)
			} else {
				var yynn336 int = 0
				for _, b := range yyq336 {
					if b {
						yynn336++
					}
				}
				r.EncodeMapStart(yynn336)
			}
			if yyr336 || yy2arr336 {
				if yyq336[0] {
					yym338 := z.EncBinary()
					_ = yym338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq336[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr336 || yy2arr336 {
				if yyq336[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq336[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yysep336 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym343 := z.DecBinary()
	_ = yym343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl344 := r.ReadMapStart()
			if yyl344 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl344, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl344 := r.ReadArrayStart()
			if yyl344 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys345Slc
	var yyhl345 bool = l >= 0
	for yyj345 := 0; ; yyj345++ {
		if yyhl345 {
			if yyj345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys345Slc = r.DecodeBytes(yys345Slc, true, true)
		yys345 := string(yys345Slc)
		switch yys345 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys345)
		} // end switch yys345
	} // end for yyj345
	if !yyhl345 {
		r.ReadEnd()
	}
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj348 int
	var yyb348 bool
	var yyhl348 bool = l >= 0
	yyj348++
	if yyhl348 {
		yyb348 = yyj348 > l
	} else {
		yyb348 = r.CheckBreak()
	}
	if yyb348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj348++
	if yyhl348 {
		yyb348 = yyj348 > l
	} else {
		yyb348 = r.CheckBreak()
	}
	if yyb348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj348++
		if yyhl348 {
			yyb348 = yyj348 > l
		} else {
			yyb348 = r.CheckBreak()
		}
		if yyb348 {
			break
		}
		z.DecStructFieldNotFound(yyj348-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym351 := z.EncBinary()
		_ = yym351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep352 := !z.EncBinary()
			yy2arr352 := z.EncBasicHandle().StructToArray
			var yyq352 [4]bool
			_, _, _ = yysep352, yyq352, yy2arr352
			const yyr352 bool = false
			yyq352[0] = x.Kind != ""
			yyq352[1] = true
			yyq352[2] = true
			yyq352[3] = len(x.Data) != 0
			if yyr352 || yy2arr352 {
				r.EncodeArrayStart(4)
			} else {
				var yynn352 int = 0
				for _, b := range yyq352 {
					if b {
						yynn352++
					}
				}
				r.EncodeMapStart(yynn352)
			}
			if yyr352 || yy2arr352 {
				if yyq352[0] {
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq352[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym355 := z.EncBinary()
					_ = yym355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr352 || yy2arr352 {
				if yyq352[1] {
					yy357 := &x.APIVersion
					yym358 := z.EncBinary()
					_ = yym358
					if false {
					} else if z.HasExtensions() && z.EncExt(yy357) {
					} else if !yym358 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy357)
					} else {
						z.EncFallback(yy357)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq352[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy359 := &x.APIVersion
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else if z.HasExtensions() && z.EncExt(yy359) {
					} else if !yym360 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy359)
					} else {
						z.EncFallback(yy359)
					}
				}
			}
			if yyr352 || yy2arr352 {
				if yyq352[2] {
					yy362 := &x.ObjectMeta
					yy362.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq352[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy363 := &x.ObjectMeta
					yy363.CodecEncodeSelf(e)
				}
			}
			if yyr352 || yy2arr352 {
				if yyq352[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym365 := z.EncBinary()
						_ = yym365
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq352[3] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym366 := z.EncBinary()
						_ = yym366
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yysep352 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym367 := z.DecBinary()
	_ = yym367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl368 := r.ReadMapStart()
			if yyl368 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl368, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl368 := r.ReadArrayStart()
			if yyl368 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys369Slc
	var yyhl369 bool = l >= 0
	for yyj369 := 0; ; yyj369++ {
		if yyhl369 {
			if yyj369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys369Slc = r.DecodeBytes(yys369Slc, true, true)
		yys369 := string(yys369Slc)
		switch yys369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv371 := &x.APIVersion
				yym372 := z.DecBinary()
				_ = yym372
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv371) {
				} else if !yym372 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv371)
				} else {
					z.DecFallback(yyv371, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv373 := &x.ObjectMeta
				yyv373.CodecDecodeSelf(d)
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv374 := &x.Data
				yym375 := z.DecBinary()
				_ = yym375
				if false {
				} else {
					*yyv374 = r.DecodeBytes(*(*[]byte)(yyv374), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys369)
		} // end switch yys369
	} // end for yyj369
	if !yyhl369 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj376 int
	var yyb376 bool
	var yyhl376 bool = l >= 0
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv378 := &x.APIVersion
		yym379 := z.DecBinary()
		_ = yym379
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv378) {
		} else if !yym379 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv378)
		} else {
			z.DecFallback(yyv378, false)
		}
	}
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv380 := &x.ObjectMeta
		yyv380.CodecDecodeSelf(d)
	}
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv381 := &x.Data
		yym382 := z.DecBinary()
		_ = yym382
		if false {
		} else {
			*yyv381 = r.DecodeBytes(*(*[]byte)(yyv381), false, false)
		}
	}
	for {
		yyj376++
		if yyhl376 {
			yyb376 = yyj376 > l
		} else {
			yyb376 = r.CheckBreak()
		}
		if yyb376 {
			break
		}
		z.DecStructFieldNotFound(yyj376-1, "")
	}
	r.ReadEnd()
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym383 := z.EncBinary()
		_ = yym383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep384 := !z.EncBinary()
			yy2arr384 := z.EncBasicHandle().StructToArray
			var yyq384 [5]bool
			_, _, _ = yysep384, yyq384, yy2arr384
			const yyr384 bool = false
			yyq384[0] = x.Kind != ""
			yyq384[1] = true
			yyq384[2] = true
			yyq384[3] = true
			yyq384[4] = true
			if yyr384 || yy2arr384 {
				r.EncodeArrayStart(5)
			} else {
				var yynn384 int = 0
				for _, b := range yyq384 {
					if b {
						yynn384++
					}
				}
				r.EncodeMapStart(yynn384)
			}
			if yyr384 || yy2arr384 {
				if yyq384[0] {
					yym386 := z.EncBinary()
					_ = yym386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq384[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym387 := z.EncBinary()
					_ = yym387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr384 || yy2arr384 {
				if yyq384[1] {
					yy389 := &x.APIVersion
					yym390 := z.EncBinary()
					_ = yym390
					if false {
					} else if z.HasExtensions() && z.EncExt(yy389) {
					} else if !yym390 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy389)
					} else {
						z.EncFallback(yy389)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq384[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy391 := &x.APIVersion
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else if z.HasExtensions() && z.EncExt(yy391) {
					} else if !yym392 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy391)
					} else {
						z.EncFallback(yy391)
					}
				}
			}
			if yyr384 || yy2arr384 {
				if yyq384[2] {
					yy394 := &x.ObjectMeta
					yy394.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq384[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy395 := &x.ObjectMeta
					yy395.CodecEncodeSelf(e)
				}
			}
			if yyr384 || yy2arr384 {
				if yyq384[3] {
					yy397 := &x.Spec
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq384[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy398 := &x.Spec
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr384 || yy2arr384 {
				if yyq384[4] {
					yy400 := &x.Status
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq384[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy401 := &x.Status
					yy401.CodecEncodeSelf(e)
				}
			}
			if yysep384 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym402 := z.DecBinary()
	_ = yym402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl403 := r.ReadMapStart()
			if yyl403 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl403, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl403 := r.ReadArrayStart()
			if yyl403 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys404Slc
	var yyhl404 bool = l >= 0
	for yyj404 := 0; ; yyj404++ {
		if yyhl404 {
			if yyj404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys404Slc = r.DecodeBytes(yys404Slc, true, true)
		yys404 := string(yys404Slc)
		switch yys404 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv406 := &x.APIVersion
				yym407 := z.DecBinary()
				_ = yym407
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv406) {
				} else if !yym407 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv406)
				} else {
					z.DecFallback(yyv406, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv408 := &x.ObjectMeta
				yyv408.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv409 := &x.Spec
				yyv409.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv410 := &x.Status
				yyv410.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys404)
		} // end switch yys404
	} // end for yyj404
	if !yyhl404 {
		r.ReadEnd()
	}
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj411 int
	var yyb411 bool
	var yyhl411 bool = l >= 0
	yyj411++
	if yyhl411 {
		yyb411 = yyj411 > l
	} else {
		yyb411 = r.CheckBreak()
	}
	if yyb411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj411++
	if yyhl411 {
		yyb411 = yyj411 > l
	} else {
		yyb411 = r.CheckBreak()
	}
	if yyb411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv413 := &x.APIVersion
		yym414 := z.DecBinary()
		_ = yym414
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv413) {
		} else if !yym414 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv413)
		} else {
			z.DecFallback(yyv413, false)
		}
	}
	yyj411++
	if yyhl411 {
		yyb411 = yyj411 > l
	} else {
		yyb411 = r.CheckBreak()
	}
	if yyb411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv415 := &x.ObjectMeta
		yyv415.CodecDecodeSelf(d)
	}
	yyj411++
	if yyhl411 {
		yyb411 = yyj411 > l
	} else {
		yyb411 = r.CheckBreak()
	}
	if yyb411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv416 := &x.Spec
		yyv416.CodecDecodeSelf(d)
	}
	yyj411++
	if yyhl411 {
		yyb411 = yyj411 > l
	} else {
		yyb411 = r.CheckBreak()
	}
	if yyb411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv417 := &x.Status
		yyv417.CodecDecodeSelf(d)
	}
	for {
		yyj411++
		if yyhl411 {
			yyb411 = yyj411 > l
		} else {
			yyb411 = r.CheckBreak()
		}
		if yyb411 {
			break
		}
		z.DecStructFieldNotFound(yyj411-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym418 := z.EncBinary()
		_ = yym418
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep419 := !z.EncBinary()
			yy2arr419 := z.EncBasicHandle().StructToArray
			var yyq419 [5]bool
			_, _, _ = yysep419, yyq419, yy2arr419
			const yyr419 bool = false
			yyq419[0] = x.Replicas != 0
			yyq419[1] = len(x.Selector) != 0
			yyq419[3] = true
			yyq419[4] = x.UniqueLabelKey != ""
			if yyr419 || yy2arr419 {
				r.EncodeArrayStart(5)
			} else {
				var yynn419 int = 1
				for _, b := range yyq419 {
					if b {
						yynn419++
					}
				}
				r.EncodeMapStart(yynn419)
			}
			if yyr419 || yy2arr419 {
				if yyq419[0] {
					yym421 := z.EncBinary()
					_ = yym421
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq419[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr419 || yy2arr419 {
				if yyq419[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym424 := z.EncBinary()
						_ = yym424
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq419[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym425 := z.EncBinary()
						_ = yym425
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr419 || yy2arr419 {
				yy427 := &x.Template
				yy427.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				yy428 := &x.Template
				yy428.CodecEncodeSelf(e)
			}
			if yyr419 || yy2arr419 {
				if yyq419[3] {
					yy430 := &x.Strategy
					yy430.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq419[3] {
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					yy431 := &x.Strategy
					yy431.CodecEncodeSelf(e)
				}
			}
			if yyr419 || yy2arr419 {
				if yyq419[4] {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq419[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yysep419 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		switch yys437 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv439 := &x.Selector
				yym440 := z.DecBinary()
				_ = yym440
				if false {
				} else {
					z.F.DecMapStringStringX(yyv439, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv441 := &x.Template
				yyv441.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv442 := &x.Strategy
				yyv442.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	if !yyhl437 {
		r.ReadEnd()
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv446 := &x.Selector
		yym447 := z.DecBinary()
		_ = yym447
		if false {
		} else {
			z.F.DecMapStringStringX(yyv446, false, d)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv448 := &x.Template
		yyv448.CodecDecodeSelf(d)
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv449 := &x.Strategy
		yyv449.CodecDecodeSelf(d)
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [2]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = x.Type != ""
			yyq452[1] = x.RollingUpdate != nil
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(2)
			} else {
				var yynn452 int = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
			}
			if yyr452 || yy2arr452 {
				if yyq452[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				if yyq452[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yysep452 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym455 := z.DecBinary()
	_ = yym455
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl456 := r.ReadMapStart()
			if yyl456 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl456, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl456 := r.ReadArrayStart()
			if yyl456 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl456, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys457Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys457Slc
	var yyhl457 bool = l >= 0
	for yyj457 := 0; ; yyj457++ {
		if yyhl457 {
			if yyj457 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys457Slc = r.DecodeBytes(yys457Slc, true, true)
		yys457 := string(yys457Slc)
		switch yys457 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys457)
		} // end switch yys457
	} // end for yyj457
	if !yyhl457 {
		r.ReadEnd()
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj460 int
	var yyb460 bool
	var yyhl460 bool = l >= 0
	yyj460++
	if yyhl460 {
		yyb460 = yyj460 > l
	} else {
		yyb460 = r.CheckBreak()
	}
	if yyb460 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj460++
	if yyhl460 {
		yyb460 = yyj460 > l
	} else {
		yyb460 = r.CheckBreak()
	}
	if yyb460 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj460++
		if yyhl460 {
			yyb460 = yyj460 > l
		} else {
			yyb460 = r.CheckBreak()
		}
		if yyb460 {
			break
		}
		z.DecStructFieldNotFound(yyj460-1, "")
	}
	r.ReadEnd()
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym463 := z.EncBinary()
	_ = yym463
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym464 := z.DecBinary()
	_ = yym464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym465 := z.EncBinary()
		_ = yym465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep466 := !z.EncBinary()
			yy2arr466 := z.EncBasicHandle().StructToArray
			var yyq466 [3]bool
			_, _, _ = yysep466, yyq466, yy2arr466
			const yyr466 bool = false
			yyq466[0] = true
			yyq466[1] = true
			yyq466[2] = x.MinReadySeconds != 0
			if yyr466 || yy2arr466 {
				r.EncodeArrayStart(3)
			} else {
				var yynn466 int = 0
				for _, b := range yyq466 {
					if b {
						yynn466++
					}
				}
				r.EncodeMapStart(yynn466)
			}
			if yyr466 || yy2arr466 {
				if yyq466[0] {
					yy468 := &x.MaxUnavailable
					yym469 := z.EncBinary()
					_ = yym469
					if false {
					} else if z.HasExtensions() && z.EncExt(yy468) {
					} else if !yym469 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy468)
					} else {
						z.EncFallback(yy468)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq466[0] {
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					yy470 := &x.MaxUnavailable
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else if z.HasExtensions() && z.EncExt(yy470) {
					} else if !yym471 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy470)
					} else {
						z.EncFallback(yy470)
					}
				}
			}
			if yyr466 || yy2arr466 {
				if yyq466[1] {
					yy473 := &x.MaxSurge
					yym474 := z.EncBinary()
					_ = yym474
					if false {
					} else if z.HasExtensions() && z.EncExt(yy473) {
					} else if !yym474 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy473)
					} else {
						z.EncFallback(yy473)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq466[1] {
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					yy475 := &x.MaxSurge
					yym476 := z.EncBinary()
					_ = yym476
					if false {
					} else if z.HasExtensions() && z.EncExt(yy475) {
					} else if !yym476 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy475)
					} else {
						z.EncFallback(yy475)
					}
				}
			}
			if yyr466 || yy2arr466 {
				if yyq466[2] {
					yym478 := z.EncBinary()
					_ = yym478
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq466[2] {
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yysep466 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym480 := z.DecBinary()
	_ = yym480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl481 := r.ReadMapStart()
			if yyl481 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl481, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl481 := r.ReadArrayStart()
			if yyl481 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys482Slc
	var yyhl482 bool = l >= 0
	for yyj482 := 0; ; yyj482++ {
		if yyhl482 {
			if yyj482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys482Slc = r.DecodeBytes(yys482Slc, true, true)
		yys482 := string(yys482Slc)
		switch yys482 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_util.IntOrString{}
			} else {
				yyv483 := &x.MaxUnavailable
				yym484 := z.DecBinary()
				_ = yym484
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv483) {
				} else if !yym484 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv483)
				} else {
					z.DecFallback(yyv483, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg6_util.IntOrString{}
			} else {
				yyv485 := &x.MaxSurge
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv485) {
				} else if !yym486 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv485)
				} else {
					z.DecFallback(yyv485, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys482)
		} // end switch yys482
	} // end for yyj482
	if !yyhl482 {
		r.ReadEnd()
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_util.IntOrString{}
	} else {
		yyv489 := &x.MaxUnavailable
		yym490 := z.DecBinary()
		_ = yym490
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv489) {
		} else if !yym490 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv489)
		} else {
			z.DecFallback(yyv489, false)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg6_util.IntOrString{}
	} else {
		yyv491 := &x.MaxSurge
		yym492 := z.DecBinary()
		_ = yym492
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv491) {
		} else if !yym492 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv491)
		} else {
			z.DecFallback(yyv491, false)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym494 := z.EncBinary()
		_ = yym494
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep495 := !z.EncBinary()
			yy2arr495 := z.EncBasicHandle().StructToArray
			var yyq495 [2]bool
			_, _, _ = yysep495, yyq495, yy2arr495
			const yyr495 bool = false
			yyq495[0] = x.Replicas != 0
			yyq495[1] = x.UpdatedReplicas != 0
			if yyr495 || yy2arr495 {
				r.EncodeArrayStart(2)
			} else {
				var yynn495 int = 0
				for _, b := range yyq495 {
					if b {
						yynn495++
					}
				}
				r.EncodeMapStart(yynn495)
			}
			if yyr495 || yy2arr495 {
				if yyq495[0] {
					yym497 := z.EncBinary()
					_ = yym497
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq495[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr495 || yy2arr495 {
				if yyq495[1] {
					yym500 := z.EncBinary()
					_ = yym500
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq495[1] {
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yysep495 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym502 := z.DecBinary()
	_ = yym502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl503 := r.ReadMapStart()
			if yyl503 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl503, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl503 := r.ReadArrayStart()
			if yyl503 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys504Slc
	var yyhl504 bool = l >= 0
	for yyj504 := 0; ; yyj504++ {
		if yyhl504 {
			if yyj504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys504Slc = r.DecodeBytes(yys504Slc, true, true)
		yys504 := string(yys504Slc)
		switch yys504 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys504)
		} // end switch yys504
	} // end for yyj504
	if !yyhl504 {
		r.ReadEnd()
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj507 int
	var yyb507 bool
	var yyhl507 bool = l >= 0
	yyj507++
	if yyhl507 {
		yyb507 = yyj507 > l
	} else {
		yyb507 = r.CheckBreak()
	}
	if yyb507 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj507++
	if yyhl507 {
		yyb507 = yyj507 > l
	} else {
		yyb507 = r.CheckBreak()
	}
	if yyb507 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj507++
		if yyhl507 {
			yyb507 = yyj507 > l
		} else {
			yyb507 = r.CheckBreak()
		}
		if yyb507 {
			break
		}
		z.DecStructFieldNotFound(yyj507-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [4]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			yyq511[0] = x.Kind != ""
			yyq511[1] = true
			yyq511[2] = true
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(4)
			} else {
				var yynn511 int = 1
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
			}
			if yyr511 || yy2arr511 {
				if yyq511[0] {
					yym513 := z.EncBinary()
					_ = yym513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq511[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr511 || yy2arr511 {
				if yyq511[1] {
					yy516 := &x.APIVersion
					yym517 := z.EncBinary()
					_ = yym517
					if false {
					} else if z.HasExtensions() && z.EncExt(yy516) {
					} else if !yym517 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy516)
					} else {
						z.EncFallback(yy516)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq511[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy518 := &x.APIVersion
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else if z.HasExtensions() && z.EncExt(yy518) {
					} else if !yym519 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy518)
					} else {
						z.EncFallback(yy518)
					}
				}
			}
			if yyr511 || yy2arr511 {
				if yyq511[2] {
					yy521 := &x.ListMeta
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else if z.HasExtensions() && z.EncExt(yy521) {
					} else {
						z.EncFallback(yy521)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq511[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy523 := &x.ListMeta
					yym524 := z.EncBinary()
					_ = yym524
					if false {
					} else if z.HasExtensions() && z.EncExt(yy523) {
					} else {
						z.EncFallback(yy523)
					}
				}
			}
			if yyr511 || yy2arr511 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym527 := z.EncBinary()
					_ = yym527
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yysep511 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym528 := z.DecBinary()
	_ = yym528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl529 := r.ReadMapStart()
			if yyl529 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl529, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl529 := r.ReadArrayStart()
			if yyl529 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl529, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys530Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys530Slc
	var yyhl530 bool = l >= 0
	for yyj530 := 0; ; yyj530++ {
		if yyhl530 {
			if yyj530 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys530Slc = r.DecodeBytes(yys530Slc, true, true)
		yys530 := string(yys530Slc)
		switch yys530 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv532 := &x.APIVersion
				yym533 := z.DecBinary()
				_ = yym533
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv532) {
				} else if !yym533 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv532)
				} else {
					z.DecFallback(yyv532, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv534 := &x.ListMeta
				yym535 := z.DecBinary()
				_ = yym535
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv534) {
				} else {
					z.DecFallback(yyv534, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv536 := &x.Items
				yym537 := z.DecBinary()
				_ = yym537
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv536), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys530)
		} // end switch yys530
	} // end for yyj530
	if !yyhl530 {
		r.ReadEnd()
	}
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj538 int
	var yyb538 bool
	var yyhl538 bool = l >= 0
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv540 := &x.APIVersion
		yym541 := z.DecBinary()
		_ = yym541
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv540) {
		} else if !yym541 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv540)
		} else {
			z.DecFallback(yyv540, false)
		}
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv542 := &x.ListMeta
		yym543 := z.DecBinary()
		_ = yym543
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv542) {
		} else {
			z.DecFallback(yyv542, false)
		}
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv544 := &x.Items
		yym545 := z.DecBinary()
		_ = yym545
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv544), d)
		}
	}
	for {
		yyj538++
		if yyhl538 {
			yyb538 = yyj538 > l
		} else {
			yyb538 = r.CheckBreak()
		}
		if yyb538 {
			break
		}
		z.DecStructFieldNotFound(yyj538-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym546 := z.EncBinary()
		_ = yym546
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep547 := !z.EncBinary()
			yy2arr547 := z.EncBasicHandle().StructToArray
			var yyq547 [2]bool
			_, _, _ = yysep547, yyq547, yy2arr547
			const yyr547 bool = false
			yyq547[0] = len(x.Selector) != 0
			yyq547[1] = x.Template != nil
			if yyr547 || yy2arr547 {
				r.EncodeArrayStart(2)
			} else {
				var yynn547 int = 0
				for _, b := range yyq547 {
					if b {
						yynn547++
					}
				}
				r.EncodeMapStart(yynn547)
			}
			if yyr547 || yy2arr547 {
				if yyq547[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym549 := z.EncBinary()
						_ = yym549
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq547[0] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym550 := z.EncBinary()
						_ = yym550
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr547 || yy2arr547 {
				if yyq547[1] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq547[1] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep547 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym552 := z.DecBinary()
	_ = yym552
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl553 := r.ReadMapStart()
			if yyl553 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl553, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl553 := r.ReadArrayStart()
			if yyl553 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl553, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys554Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys554Slc
	var yyhl554 bool = l >= 0
	for yyj554 := 0; ; yyj554++ {
		if yyhl554 {
			if yyj554 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys554Slc = r.DecodeBytes(yys554Slc, true, true)
		yys554 := string(yys554Slc)
		switch yys554 {
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv555 := &x.Selector
				yym556 := z.DecBinary()
				_ = yym556
				if false {
				} else {
					z.F.DecMapStringStringX(yyv555, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys554)
		} // end switch yys554
	} // end for yyj554
	if !yyhl554 {
		r.ReadEnd()
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj558 int
	var yyb558 bool
	var yyhl558 bool = l >= 0
	yyj558++
	if yyhl558 {
		yyb558 = yyj558 > l
	} else {
		yyb558 = r.CheckBreak()
	}
	if yyb558 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv559 := &x.Selector
		yym560 := z.DecBinary()
		_ = yym560
		if false {
		} else {
			z.F.DecMapStringStringX(yyv559, false, d)
		}
	}
	yyj558++
	if yyhl558 {
		yyb558 = yyj558 > l
	} else {
		yyb558 = r.CheckBreak()
	}
	if yyb558 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj558++
		if yyhl558 {
			yyb558 = yyj558 > l
		} else {
			yyb558 = r.CheckBreak()
		}
		if yyb558 {
			break
		}
		z.DecStructFieldNotFound(yyj558-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym562 := z.EncBinary()
		_ = yym562
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep563 := !z.EncBinary()
			yy2arr563 := z.EncBasicHandle().StructToArray
			var yyq563 [3]bool
			_, _, _ = yysep563, yyq563, yy2arr563
			const yyr563 bool = false
			if yyr563 || yy2arr563 {
				r.EncodeArrayStart(3)
			} else {
				var yynn563 int = 3
				for _, b := range yyq563 {
					if b {
						yynn563++
					}
				}
				r.EncodeMapStart(yynn563)
			}
			if yyr563 || yy2arr563 {
				yym565 := z.EncBinary()
				_ = yym565
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				yym566 := z.EncBinary()
				_ = yym566
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr563 || yy2arr563 {
				yym568 := z.EncBinary()
				_ = yym568
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				yym569 := z.EncBinary()
				_ = yym569
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr563 || yy2arr563 {
				yym571 := z.EncBinary()
				_ = yym571
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				yym572 := z.EncBinary()
				_ = yym572
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yysep563 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl574 := r.ReadMapStart()
			if yyl574 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl574, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl574 := r.ReadArrayStart()
			if yyl574 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys575Slc
	var yyhl575 bool = l >= 0
	for yyj575 := 0; ; yyj575++ {
		if yyhl575 {
			if yyj575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys575Slc = r.DecodeBytes(yys575Slc, true, true)
		yys575 := string(yys575Slc)
		switch yys575 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys575)
		} // end switch yys575
	} // end for yyj575
	if !yyhl575 {
		r.ReadEnd()
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj579 int
	var yyb579 bool
	var yyhl579 bool = l >= 0
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj579++
		if yyhl579 {
			yyb579 = yyj579 > l
		} else {
			yyb579 = r.CheckBreak()
		}
		if yyb579 {
			break
		}
		z.DecStructFieldNotFound(yyj579-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym583 := z.EncBinary()
		_ = yym583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep584 := !z.EncBinary()
			yy2arr584 := z.EncBasicHandle().StructToArray
			var yyq584 [5]bool
			_, _, _ = yysep584, yyq584, yy2arr584
			const yyr584 bool = false
			yyq584[0] = x.Kind != ""
			yyq584[1] = true
			yyq584[2] = true
			yyq584[3] = true
			yyq584[4] = true
			if yyr584 || yy2arr584 {
				r.EncodeArrayStart(5)
			} else {
				var yynn584 int = 0
				for _, b := range yyq584 {
					if b {
						yynn584++
					}
				}
				r.EncodeMapStart(yynn584)
			}
			if yyr584 || yy2arr584 {
				if yyq584[0] {
					yym586 := z.EncBinary()
					_ = yym586
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq584[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr584 || yy2arr584 {
				if yyq584[1] {
					yy589 := &x.APIVersion
					yym590 := z.EncBinary()
					_ = yym590
					if false {
					} else if z.HasExtensions() && z.EncExt(yy589) {
					} else if !yym590 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy589)
					} else {
						z.EncFallback(yy589)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq584[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy591 := &x.APIVersion
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else if z.HasExtensions() && z.EncExt(yy591) {
					} else if !yym592 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy591)
					} else {
						z.EncFallback(yy591)
					}
				}
			}
			if yyr584 || yy2arr584 {
				if yyq584[2] {
					yy594 := &x.ObjectMeta
					yy594.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq584[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy595 := &x.ObjectMeta
					yy595.CodecEncodeSelf(e)
				}
			}
			if yyr584 || yy2arr584 {
				if yyq584[3] {
					yy597 := &x.Spec
					yy597.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq584[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy598 := &x.Spec
					yy598.CodecEncodeSelf(e)
				}
			}
			if yyr584 || yy2arr584 {
				if yyq584[4] {
					yy600 := &x.Status
					yy600.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq584[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy601 := &x.Status
					yy601.CodecEncodeSelf(e)
				}
			}
			if yysep584 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym602 := z.DecBinary()
	_ = yym602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl603 := r.ReadMapStart()
			if yyl603 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl603, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl603 := r.ReadArrayStart()
			if yyl603 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl603, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys604Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys604Slc
	var yyhl604 bool = l >= 0
	for yyj604 := 0; ; yyj604++ {
		if yyhl604 {
			if yyj604 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys604Slc = r.DecodeBytes(yys604Slc, true, true)
		yys604 := string(yys604Slc)
		switch yys604 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv606 := &x.APIVersion
				yym607 := z.DecBinary()
				_ = yym607
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv606) {
				} else if !yym607 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv606)
				} else {
					z.DecFallback(yyv606, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv608 := &x.ObjectMeta
				yyv608.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv609 := &x.Spec
				yyv609.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv610 := &x.Status
				yyv610.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys604)
		} // end switch yys604
	} // end for yyj604
	if !yyhl604 {
		r.ReadEnd()
	}
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj611 int
	var yyb611 bool
	var yyhl611 bool = l >= 0
	yyj611++
	if yyhl611 {
		yyb611 = yyj611 > l
	} else {
		yyb611 = r.CheckBreak()
	}
	if yyb611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj611++
	if yyhl611 {
		yyb611 = yyj611 > l
	} else {
		yyb611 = r.CheckBreak()
	}
	if yyb611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv613 := &x.APIVersion
		yym614 := z.DecBinary()
		_ = yym614
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv613) {
		} else if !yym614 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv613)
		} else {
			z.DecFallback(yyv613, false)
		}
	}
	yyj611++
	if yyhl611 {
		yyb611 = yyj611 > l
	} else {
		yyb611 = r.CheckBreak()
	}
	if yyb611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv615 := &x.ObjectMeta
		yyv615.CodecDecodeSelf(d)
	}
	yyj611++
	if yyhl611 {
		yyb611 = yyj611 > l
	} else {
		yyb611 = r.CheckBreak()
	}
	if yyb611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv616 := &x.Spec
		yyv616.CodecDecodeSelf(d)
	}
	yyj611++
	if yyhl611 {
		yyb611 = yyj611 > l
	} else {
		yyb611 = r.CheckBreak()
	}
	if yyb611 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv617 := &x.Status
		yyv617.CodecDecodeSelf(d)
	}
	for {
		yyj611++
		if yyhl611 {
			yyb611 = yyj611 > l
		} else {
			yyb611 = r.CheckBreak()
		}
		if yyb611 {
			break
		}
		z.DecStructFieldNotFound(yyj611-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym618 := z.EncBinary()
		_ = yym618
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep619 := !z.EncBinary()
			yy2arr619 := z.EncBasicHandle().StructToArray
			var yyq619 [4]bool
			_, _, _ = yysep619, yyq619, yy2arr619
			const yyr619 bool = false
			yyq619[0] = x.Kind != ""
			yyq619[1] = true
			yyq619[2] = true
			if yyr619 || yy2arr619 {
				r.EncodeArrayStart(4)
			} else {
				var yynn619 int = 1
				for _, b := range yyq619 {
					if b {
						yynn619++
					}
				}
				r.EncodeMapStart(yynn619)
			}
			if yyr619 || yy2arr619 {
				if yyq619[0] {
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq619[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr619 || yy2arr619 {
				if yyq619[1] {
					yy624 := &x.APIVersion
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else if z.HasExtensions() && z.EncExt(yy624) {
					} else if !yym625 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy624)
					} else {
						z.EncFallback(yy624)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq619[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy626 := &x.APIVersion
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else if z.HasExtensions() && z.EncExt(yy626) {
					} else if !yym627 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy626)
					} else {
						z.EncFallback(yy626)
					}
				}
			}
			if yyr619 || yy2arr619 {
				if yyq619[2] {
					yy629 := &x.ListMeta
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else if z.HasExtensions() && z.EncExt(yy629) {
					} else {
						z.EncFallback(yy629)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq619[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy631 := &x.ListMeta
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else if z.HasExtensions() && z.EncExt(yy631) {
					} else {
						z.EncFallback(yy631)
					}
				}
			}
			if yyr619 || yy2arr619 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yysep619 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym636 := z.DecBinary()
	_ = yym636
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl637 := r.ReadMapStart()
			if yyl637 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl637, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl637 := r.ReadArrayStart()
			if yyl637 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl637, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys638Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys638Slc
	var yyhl638 bool = l >= 0
	for yyj638 := 0; ; yyj638++ {
		if yyhl638 {
			if yyj638 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys638Slc = r.DecodeBytes(yys638Slc, true, true)
		yys638 := string(yys638Slc)
		switch yys638 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv640 := &x.APIVersion
				yym641 := z.DecBinary()
				_ = yym641
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv640) {
				} else if !yym641 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv640)
				} else {
					z.DecFallback(yyv640, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv642 := &x.ListMeta
				yym643 := z.DecBinary()
				_ = yym643
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv642) {
				} else {
					z.DecFallback(yyv642, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv644 := &x.Items
				yym645 := z.DecBinary()
				_ = yym645
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv644), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys638)
		} // end switch yys638
	} // end for yyj638
	if !yyhl638 {
		r.ReadEnd()
	}
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj646 int
	var yyb646 bool
	var yyhl646 bool = l >= 0
	yyj646++
	if yyhl646 {
		yyb646 = yyj646 > l
	} else {
		yyb646 = r.CheckBreak()
	}
	if yyb646 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj646++
	if yyhl646 {
		yyb646 = yyj646 > l
	} else {
		yyb646 = r.CheckBreak()
	}
	if yyb646 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv648 := &x.APIVersion
		yym649 := z.DecBinary()
		_ = yym649
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv648) {
		} else if !yym649 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv648)
		} else {
			z.DecFallback(yyv648, false)
		}
	}
	yyj646++
	if yyhl646 {
		yyb646 = yyj646 > l
	} else {
		yyb646 = r.CheckBreak()
	}
	if yyb646 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv650 := &x.ListMeta
		yym651 := z.DecBinary()
		_ = yym651
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv650) {
		} else {
			z.DecFallback(yyv650, false)
		}
	}
	yyj646++
	if yyhl646 {
		yyb646 = yyj646 > l
	} else {
		yyb646 = r.CheckBreak()
	}
	if yyb646 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv652 := &x.Items
		yym653 := z.DecBinary()
		_ = yym653
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv652), d)
		}
	}
	for {
		yyj646++
		if yyhl646 {
			yyb646 = yyj646 > l
		} else {
			yyb646 = r.CheckBreak()
		}
		if yyb646 {
			break
		}
		z.DecStructFieldNotFound(yyj646-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym654 := z.EncBinary()
		_ = yym654
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep655 := !z.EncBinary()
			yy2arr655 := z.EncBasicHandle().StructToArray
			var yyq655 [4]bool
			_, _, _ = yysep655, yyq655, yy2arr655
			const yyr655 bool = false
			yyq655[0] = x.Kind != ""
			yyq655[1] = true
			yyq655[2] = true
			if yyr655 || yy2arr655 {
				r.EncodeArrayStart(4)
			} else {
				var yynn655 int = 1
				for _, b := range yyq655 {
					if b {
						yynn655++
					}
				}
				r.EncodeMapStart(yynn655)
			}
			if yyr655 || yy2arr655 {
				if yyq655[0] {
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq655[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym658 := z.EncBinary()
					_ = yym658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr655 || yy2arr655 {
				if yyq655[1] {
					yy660 := &x.APIVersion
					yym661 := z.EncBinary()
					_ = yym661
					if false {
					} else if z.HasExtensions() && z.EncExt(yy660) {
					} else if !yym661 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy660)
					} else {
						z.EncFallback(yy660)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq655[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy662 := &x.APIVersion
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else if z.HasExtensions() && z.EncExt(yy662) {
					} else if !yym663 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy662)
					} else {
						z.EncFallback(yy662)
					}
				}
			}
			if yyr655 || yy2arr655 {
				if yyq655[2] {
					yy665 := &x.ListMeta
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else if z.HasExtensions() && z.EncExt(yy665) {
					} else {
						z.EncFallback(yy665)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq655[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy667 := &x.ListMeta
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else if z.HasExtensions() && z.EncExt(yy667) {
					} else {
						z.EncFallback(yy667)
					}
				}
			}
			if yyr655 || yy2arr655 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yysep655 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym672 := z.DecBinary()
	_ = yym672
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl673 := r.ReadMapStart()
			if yyl673 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl673, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl673 := r.ReadArrayStart()
			if yyl673 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl673, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys674Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys674Slc
	var yyhl674 bool = l >= 0
	for yyj674 := 0; ; yyj674++ {
		if yyhl674 {
			if yyj674 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys674Slc = r.DecodeBytes(yys674Slc, true, true)
		yys674 := string(yys674Slc)
		switch yys674 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv676 := &x.APIVersion
				yym677 := z.DecBinary()
				_ = yym677
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv676) {
				} else if !yym677 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv676)
				} else {
					z.DecFallback(yyv676, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv678 := &x.ListMeta
				yym679 := z.DecBinary()
				_ = yym679
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv678) {
				} else {
					z.DecFallback(yyv678, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv680 := &x.Items
				yym681 := z.DecBinary()
				_ = yym681
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv680), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys674)
		} // end switch yys674
	} // end for yyj674
	if !yyhl674 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj682 int
	var yyb682 bool
	var yyhl682 bool = l >= 0
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv684 := &x.APIVersion
		yym685 := z.DecBinary()
		_ = yym685
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv684) {
		} else if !yym685 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv684)
		} else {
			z.DecFallback(yyv684, false)
		}
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv686 := &x.ListMeta
		yym687 := z.DecBinary()
		_ = yym687
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv686) {
		} else {
			z.DecFallback(yyv686, false)
		}
	}
	yyj682++
	if yyhl682 {
		yyb682 = yyj682 > l
	} else {
		yyb682 = r.CheckBreak()
	}
	if yyb682 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv688 := &x.Items
		yym689 := z.DecBinary()
		_ = yym689
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv688), d)
		}
	}
	for {
		yyj682++
		if yyhl682 {
			yyb682 = yyj682 > l
		} else {
			yyb682 = r.CheckBreak()
		}
		if yyb682 {
			break
		}
		z.DecStructFieldNotFound(yyj682-1, "")
	}
	r.ReadEnd()
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym690 := z.EncBinary()
		_ = yym690
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep691 := !z.EncBinary()
			yy2arr691 := z.EncBasicHandle().StructToArray
			var yyq691 [5]bool
			_, _, _ = yysep691, yyq691, yy2arr691
			const yyr691 bool = false
			yyq691[0] = x.Kind != ""
			yyq691[1] = true
			yyq691[2] = true
			yyq691[3] = true
			yyq691[4] = true
			if yyr691 || yy2arr691 {
				r.EncodeArrayStart(5)
			} else {
				var yynn691 int = 0
				for _, b := range yyq691 {
					if b {
						yynn691++
					}
				}
				r.EncodeMapStart(yynn691)
			}
			if yyr691 || yy2arr691 {
				if yyq691[0] {
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq691[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym694 := z.EncBinary()
					_ = yym694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr691 || yy2arr691 {
				if yyq691[1] {
					yy696 := &x.APIVersion
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else if z.HasExtensions() && z.EncExt(yy696) {
					} else if !yym697 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy696)
					} else {
						z.EncFallback(yy696)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq691[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy698 := &x.APIVersion
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else if z.HasExtensions() && z.EncExt(yy698) {
					} else if !yym699 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy698)
					} else {
						z.EncFallback(yy698)
					}
				}
			}
			if yyr691 || yy2arr691 {
				if yyq691[2] {
					yy701 := &x.ObjectMeta
					yy701.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq691[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy702 := &x.ObjectMeta
					yy702.CodecEncodeSelf(e)
				}
			}
			if yyr691 || yy2arr691 {
				if yyq691[3] {
					yy704 := &x.Spec
					yy704.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq691[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy705 := &x.Spec
					yy705.CodecEncodeSelf(e)
				}
			}
			if yyr691 || yy2arr691 {
				if yyq691[4] {
					yy707 := &x.Status
					yy707.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq691[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy708 := &x.Status
					yy708.CodecEncodeSelf(e)
				}
			}
			if yysep691 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym709 := z.DecBinary()
	_ = yym709
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl710 := r.ReadMapStart()
			if yyl710 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl710, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl710 := r.ReadArrayStart()
			if yyl710 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl710, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys711Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys711Slc
	var yyhl711 bool = l >= 0
	for yyj711 := 0; ; yyj711++ {
		if yyhl711 {
			if yyj711 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys711Slc = r.DecodeBytes(yys711Slc, true, true)
		yys711 := string(yys711Slc)
		switch yys711 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv713 := &x.APIVersion
				yym714 := z.DecBinary()
				_ = yym714
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv713) {
				} else if !yym714 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv713)
				} else {
					z.DecFallback(yyv713, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv715 := &x.ObjectMeta
				yyv715.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv716 := &x.Spec
				yyv716.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv717 := &x.Status
				yyv717.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys711)
		} // end switch yys711
	} // end for yyj711
	if !yyhl711 {
		r.ReadEnd()
	}
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj718 int
	var yyb718 bool
	var yyhl718 bool = l >= 0
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv720 := &x.APIVersion
		yym721 := z.DecBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv720) {
		} else if !yym721 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv720)
		} else {
			z.DecFallback(yyv720, false)
		}
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv722 := &x.ObjectMeta
		yyv722.CodecDecodeSelf(d)
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv723 := &x.Spec
		yyv723.CodecDecodeSelf(d)
	}
	yyj718++
	if yyhl718 {
		yyb718 = yyj718 > l
	} else {
		yyb718 = r.CheckBreak()
	}
	if yyb718 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv724 := &x.Status
		yyv724.CodecDecodeSelf(d)
	}
	for {
		yyj718++
		if yyhl718 {
			yyb718 = yyj718 > l
		} else {
			yyb718 = r.CheckBreak()
		}
		if yyb718 {
			break
		}
		z.DecStructFieldNotFound(yyj718-1, "")
	}
	r.ReadEnd()
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym725 := z.EncBinary()
		_ = yym725
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep726 := !z.EncBinary()
			yy2arr726 := z.EncBasicHandle().StructToArray
			var yyq726 [4]bool
			_, _, _ = yysep726, yyq726, yy2arr726
			const yyr726 bool = false
			yyq726[0] = x.Kind != ""
			yyq726[1] = true
			yyq726[2] = true
			if yyr726 || yy2arr726 {
				r.EncodeArrayStart(4)
			} else {
				var yynn726 int = 1
				for _, b := range yyq726 {
					if b {
						yynn726++
					}
				}
				r.EncodeMapStart(yynn726)
			}
			if yyr726 || yy2arr726 {
				if yyq726[0] {
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq726[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym729 := z.EncBinary()
					_ = yym729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr726 || yy2arr726 {
				if yyq726[1] {
					yy731 := &x.APIVersion
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else if z.HasExtensions() && z.EncExt(yy731) {
					} else if !yym732 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy731)
					} else {
						z.EncFallback(yy731)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq726[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy733 := &x.APIVersion
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else if z.HasExtensions() && z.EncExt(yy733) {
					} else if !yym734 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy733)
					} else {
						z.EncFallback(yy733)
					}
				}
			}
			if yyr726 || yy2arr726 {
				if yyq726[2] {
					yy736 := &x.ListMeta
					yym737 := z.EncBinary()
					_ = yym737
					if false {
					} else if z.HasExtensions() && z.EncExt(yy736) {
					} else {
						z.EncFallback(yy736)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq726[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy738 := &x.ListMeta
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else if z.HasExtensions() && z.EncExt(yy738) {
					} else {
						z.EncFallback(yy738)
					}
				}
			}
			if yyr726 || yy2arr726 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yysep726 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym743 := z.DecBinary()
	_ = yym743
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl744 := r.ReadMapStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl744, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl744 := r.ReadArrayStart()
			if yyl744 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl744, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys745Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys745Slc
	var yyhl745 bool = l >= 0
	for yyj745 := 0; ; yyj745++ {
		if yyhl745 {
			if yyj745 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys745Slc = r.DecodeBytes(yys745Slc, true, true)
		yys745 := string(yys745Slc)
		switch yys745 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv747 := &x.APIVersion
				yym748 := z.DecBinary()
				_ = yym748
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv747) {
				} else if !yym748 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv747)
				} else {
					z.DecFallback(yyv747, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv749 := &x.ListMeta
				yym750 := z.DecBinary()
				_ = yym750
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv749) {
				} else {
					z.DecFallback(yyv749, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv751 := &x.Items
				yym752 := z.DecBinary()
				_ = yym752
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv751), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys745)
		} // end switch yys745
	} // end for yyj745
	if !yyhl745 {
		r.ReadEnd()
	}
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj753 int
	var yyb753 bool
	var yyhl753 bool = l >= 0
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv755 := &x.APIVersion
		yym756 := z.DecBinary()
		_ = yym756
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv755) {
		} else if !yym756 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv755)
		} else {
			z.DecFallback(yyv755, false)
		}
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv757 := &x.ListMeta
		yym758 := z.DecBinary()
		_ = yym758
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv757) {
		} else {
			z.DecFallback(yyv757, false)
		}
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv759 := &x.Items
		yym760 := z.DecBinary()
		_ = yym760
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv759), d)
		}
	}
	for {
		yyj753++
		if yyhl753 {
			yyb753 = yyj753 > l
		} else {
			yyb753 = r.CheckBreak()
		}
		if yyb753 {
			break
		}
		z.DecStructFieldNotFound(yyj753-1, "")
	}
	r.ReadEnd()
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym761 := z.EncBinary()
		_ = yym761
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep762 := !z.EncBinary()
			yy2arr762 := z.EncBasicHandle().StructToArray
			var yyq762 [4]bool
			_, _, _ = yysep762, yyq762, yy2arr762
			const yyr762 bool = false
			yyq762[0] = x.Parallelism != nil
			yyq762[1] = x.Completions != nil
			yyq762[2] = x.Selector != nil
			if yyr762 || yy2arr762 {
				r.EncodeArrayStart(4)
			} else {
				var yynn762 int = 1
				for _, b := range yyq762 {
					if b {
						yynn762++
					}
				}
				r.EncodeMapStart(yynn762)
			}
			if yyr762 || yy2arr762 {
				if yyq762[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy764 := *x.Parallelism
						yym765 := z.EncBinary()
						_ = yym765
						if false {
						} else {
							r.EncodeInt(int64(yy764))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq762[0] {
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy766 := *x.Parallelism
						yym767 := z.EncBinary()
						_ = yym767
						if false {
						} else {
							r.EncodeInt(int64(yy766))
						}
					}
				}
			}
			if yyr762 || yy2arr762 {
				if yyq762[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy769 := *x.Completions
						yym770 := z.EncBinary()
						_ = yym770
						if false {
						} else {
							r.EncodeInt(int64(yy769))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq762[1] {
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy771 := *x.Completions
						yym772 := z.EncBinary()
						_ = yym772
						if false {
						} else {
							r.EncodeInt(int64(yy771))
						}
					}
				}
			}
			if yyr762 || yy2arr762 {
				if yyq762[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq762[2] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr762 || yy2arr762 {
				yy775 := &x.Template
				yy775.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				yy776 := &x.Template
				yy776.CodecEncodeSelf(e)
			}
			if yysep762 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym777 := z.DecBinary()
	_ = yym777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl778 := r.ReadMapStart()
			if yyl778 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl778, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl778 := r.ReadArrayStart()
			if yyl778 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl778, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys779Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys779Slc
	var yyhl779 bool = l >= 0
	for yyj779 := 0; ; yyj779++ {
		if yyhl779 {
			if yyj779 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys779Slc = r.DecodeBytes(yys779Slc, true, true)
		yys779 := string(yys779Slc)
		switch yys779 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym781 := z.DecBinary()
				_ = yym781
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym783 := z.DecBinary()
				_ = yym783
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(PodSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv785 := &x.Template
				yyv785.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys779)
		} // end switch yys779
	} // end for yyj779
	if !yyhl779 {
		r.ReadEnd()
	}
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj786 int
	var yyb786 bool
	var yyhl786 bool = l >= 0
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym788 := z.DecBinary()
		_ = yym788
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym790 := z.DecBinary()
		_ = yym790
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(PodSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj786++
	if yyhl786 {
		yyb786 = yyj786 > l
	} else {
		yyb786 = r.CheckBreak()
	}
	if yyb786 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv792 := &x.Template
		yyv792.CodecDecodeSelf(d)
	}
	for {
		yyj786++
		if yyhl786 {
			yyb786 = yyj786 > l
		} else {
			yyb786 = r.CheckBreak()
		}
		if yyb786 {
			break
		}
		z.DecStructFieldNotFound(yyj786-1, "")
	}
	r.ReadEnd()
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym793 := z.EncBinary()
		_ = yym793
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep794 := !z.EncBinary()
			yy2arr794 := z.EncBasicHandle().StructToArray
			var yyq794 [6]bool
			_, _, _ = yysep794, yyq794, yy2arr794
			const yyr794 bool = false
			yyq794[0] = len(x.Conditions) != 0
			yyq794[1] = x.StartTime != nil
			yyq794[2] = x.CompletionTime != nil
			yyq794[3] = x.Active != 0
			yyq794[4] = x.Succeeded != 0
			yyq794[5] = x.Failed != 0
			if yyr794 || yy2arr794 {
				r.EncodeArrayStart(6)
			} else {
				var yynn794 int = 0
				for _, b := range yyq794 {
					if b {
						yynn794++
					}
				}
				r.EncodeMapStart(yynn794)
			}
			if yyr794 || yy2arr794 {
				if yyq794[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym796 := z.EncBinary()
						_ = yym796
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq794[0] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym797 := z.EncBinary()
						_ = yym797
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr794 || yy2arr794 {
				if yyq794[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym799 := z.EncBinary()
						_ = yym799
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym799 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym799 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq794[1] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym800 := z.EncBinary()
						_ = yym800
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym800 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym800 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr794 || yy2arr794 {
				if yyq794[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym802 := z.EncBinary()
						_ = yym802
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym802 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym802 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq794[2] {
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym803 := z.EncBinary()
						_ = yym803
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym803 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym803 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr794 || yy2arr794 {
				if yyq794[3] {
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq794[3] {
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr794 || yy2arr794 {
				if yyq794[4] {
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq794[4] {
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr794 || yy2arr794 {
				if yyq794[5] {
					yym811 := z.EncBinary()
					_ = yym811
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq794[5] {
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yysep794 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym813 := z.DecBinary()
	_ = yym813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl814 := r.ReadMapStart()
			if yyl814 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl814, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl814 := r.ReadArrayStart()
			if yyl814 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys815Slc
	var yyhl815 bool = l >= 0
	for yyj815 := 0; ; yyj815++ {
		if yyhl815 {
			if yyj815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys815Slc = r.DecodeBytes(yys815Slc, true, true)
		yys815 := string(yys815Slc)
		switch yys815 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv816 := &x.Conditions
				yym817 := z.DecBinary()
				_ = yym817
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv816), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym819 := z.DecBinary()
				_ = yym819
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym819 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym819 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym821 := z.DecBinary()
				_ = yym821
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym821 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym821 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys815)
		} // end switch yys815
	} // end for yyj815
	if !yyhl815 {
		r.ReadEnd()
	}
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj825 int
	var yyb825 bool
	var yyhl825 bool = l >= 0
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv826 := &x.Conditions
		yym827 := z.DecBinary()
		_ = yym827
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv826), d)
		}
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym829 := z.DecBinary()
		_ = yym829
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym829 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym829 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym831 := z.DecBinary()
		_ = yym831
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym831 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym831 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj825++
	if yyhl825 {
		yyb825 = yyj825 > l
	} else {
		yyb825 = r.CheckBreak()
	}
	if yyb825 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj825++
		if yyhl825 {
			yyb825 = yyj825 > l
		} else {
			yyb825 = r.CheckBreak()
		}
		if yyb825 {
			break
		}
		z.DecStructFieldNotFound(yyj825-1, "")
	}
	r.ReadEnd()
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym835 := z.EncBinary()
	_ = yym835
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym836 := z.DecBinary()
	_ = yym836
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym837 := z.EncBinary()
		_ = yym837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep838 := !z.EncBinary()
			yy2arr838 := z.EncBasicHandle().StructToArray
			var yyq838 [6]bool
			_, _, _ = yysep838, yyq838, yy2arr838
			const yyr838 bool = false
			yyq838[2] = true
			yyq838[3] = true
			yyq838[4] = x.Reason != ""
			yyq838[5] = x.Message != ""
			if yyr838 || yy2arr838 {
				r.EncodeArrayStart(6)
			} else {
				var yynn838 int = 2
				for _, b := range yyq838 {
					if b {
						yynn838++
					}
				}
				r.EncodeMapStart(yynn838)
			}
			if yyr838 || yy2arr838 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr838 || yy2arr838 {
				yym841 := z.EncBinary()
				_ = yym841
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				yym842 := z.EncBinary()
				_ = yym842
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr838 || yy2arr838 {
				if yyq838[2] {
					yy844 := &x.LastProbeTime
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else if z.HasExtensions() && z.EncExt(yy844) {
					} else if yym845 {
						z.EncBinaryMarshal(yy844)
					} else if !yym845 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy844)
					} else {
						z.EncFallback(yy844)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq838[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy846 := &x.LastProbeTime
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else if z.HasExtensions() && z.EncExt(yy846) {
					} else if yym847 {
						z.EncBinaryMarshal(yy846)
					} else if !yym847 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy846)
					} else {
						z.EncFallback(yy846)
					}
				}
			}
			if yyr838 || yy2arr838 {
				if yyq838[3] {
					yy849 := &x.LastTransitionTime
					yym850 := z.EncBinary()
					_ = yym850
					if false {
					} else if z.HasExtensions() && z.EncExt(yy849) {
					} else if yym850 {
						z.EncBinaryMarshal(yy849)
					} else if !yym850 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy849)
					} else {
						z.EncFallback(yy849)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq838[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy851 := &x.LastTransitionTime
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else if z.HasExtensions() && z.EncExt(yy851) {
					} else if yym852 {
						z.EncBinaryMarshal(yy851)
					} else if !yym852 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy851)
					} else {
						z.EncFallback(yy851)
					}
				}
			}
			if yyr838 || yy2arr838 {
				if yyq838[4] {
					yym854 := z.EncBinary()
					_ = yym854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq838[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr838 || yy2arr838 {
				if yyq838[5] {
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq838[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep838 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym859 := z.DecBinary()
	_ = yym859
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl860 := r.ReadMapStart()
			if yyl860 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl860, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl860 := r.ReadArrayStart()
			if yyl860 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl860, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys861Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys861Slc
	var yyhl861 bool = l >= 0
	for yyj861 := 0; ; yyj861++ {
		if yyhl861 {
			if yyj861 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys861Slc = r.DecodeBytes(yys861Slc, true, true)
		yys861 := string(yys861Slc)
		switch yys861 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv864 := &x.LastProbeTime
				yym865 := z.DecBinary()
				_ = yym865
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv864) {
				} else if yym865 {
					z.DecBinaryUnmarshal(yyv864)
				} else if !yym865 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv864)
				} else {
					z.DecFallback(yyv864, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv866 := &x.LastTransitionTime
				yym867 := z.DecBinary()
				_ = yym867
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv866) {
				} else if yym867 {
					z.DecBinaryUnmarshal(yyv866)
				} else if !yym867 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv866)
				} else {
					z.DecFallback(yyv866, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys861)
		} // end switch yys861
	} // end for yyj861
	if !yyhl861 {
		r.ReadEnd()
	}
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj870 int
	var yyb870 bool
	var yyhl870 bool = l >= 0
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv873 := &x.LastProbeTime
		yym874 := z.DecBinary()
		_ = yym874
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv873) {
		} else if yym874 {
			z.DecBinaryUnmarshal(yyv873)
		} else if !yym874 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv873)
		} else {
			z.DecFallback(yyv873, false)
		}
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv875 := &x.LastTransitionTime
		yym876 := z.DecBinary()
		_ = yym876
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv875) {
		} else if yym876 {
			z.DecBinaryUnmarshal(yyv875)
		} else if !yym876 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv875)
		} else {
			z.DecFallback(yyv875, false)
		}
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj870++
		if yyhl870 {
			yyb870 = yyj870 > l
		} else {
			yyb870 = r.CheckBreak()
		}
		if yyb870 {
			break
		}
		z.DecStructFieldNotFound(yyj870-1, "")
	}
	r.ReadEnd()
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym879 := z.EncBinary()
		_ = yym879
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep880 := !z.EncBinary()
			yy2arr880 := z.EncBasicHandle().StructToArray
			var yyq880 [5]bool
			_, _, _ = yysep880, yyq880, yy2arr880
			const yyr880 bool = false
			yyq880[0] = x.Kind != ""
			yyq880[1] = true
			yyq880[2] = true
			yyq880[3] = true
			yyq880[4] = true
			if yyr880 || yy2arr880 {
				r.EncodeArrayStart(5)
			} else {
				var yynn880 int = 0
				for _, b := range yyq880 {
					if b {
						yynn880++
					}
				}
				r.EncodeMapStart(yynn880)
			}
			if yyr880 || yy2arr880 {
				if yyq880[0] {
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq880[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr880 || yy2arr880 {
				if yyq880[1] {
					yy885 := &x.APIVersion
					yym886 := z.EncBinary()
					_ = yym886
					if false {
					} else if z.HasExtensions() && z.EncExt(yy885) {
					} else if !yym886 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy885)
					} else {
						z.EncFallback(yy885)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq880[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy887 := &x.APIVersion
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else if z.HasExtensions() && z.EncExt(yy887) {
					} else if !yym888 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy887)
					} else {
						z.EncFallback(yy887)
					}
				}
			}
			if yyr880 || yy2arr880 {
				if yyq880[2] {
					yy890 := &x.ObjectMeta
					yy890.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq880[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy891 := &x.ObjectMeta
					yy891.CodecEncodeSelf(e)
				}
			}
			if yyr880 || yy2arr880 {
				if yyq880[3] {
					yy893 := &x.Spec
					yy893.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq880[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy894 := &x.Spec
					yy894.CodecEncodeSelf(e)
				}
			}
			if yyr880 || yy2arr880 {
				if yyq880[4] {
					yy896 := &x.Status
					yy896.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq880[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy897 := &x.Status
					yy897.CodecEncodeSelf(e)
				}
			}
			if yysep880 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym898 := z.DecBinary()
	_ = yym898
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl899 := r.ReadMapStart()
			if yyl899 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl899, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl899 := r.ReadArrayStart()
			if yyl899 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl899, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys900Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys900Slc
	var yyhl900 bool = l >= 0
	for yyj900 := 0; ; yyj900++ {
		if yyhl900 {
			if yyj900 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys900Slc = r.DecodeBytes(yys900Slc, true, true)
		yys900 := string(yys900Slc)
		switch yys900 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv902 := &x.APIVersion
				yym903 := z.DecBinary()
				_ = yym903
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv902) {
				} else if !yym903 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv902)
				} else {
					z.DecFallback(yyv902, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv904 := &x.ObjectMeta
				yyv904.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv905 := &x.Spec
				yyv905.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv906 := &x.Status
				yyv906.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys900)
		} // end switch yys900
	} // end for yyj900
	if !yyhl900 {
		r.ReadEnd()
	}
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj907 int
	var yyb907 bool
	var yyhl907 bool = l >= 0
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv909 := &x.APIVersion
		yym910 := z.DecBinary()
		_ = yym910
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv909) {
		} else if !yym910 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv909)
		} else {
			z.DecFallback(yyv909, false)
		}
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv911 := &x.ObjectMeta
		yyv911.CodecDecodeSelf(d)
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv912 := &x.Spec
		yyv912.CodecDecodeSelf(d)
	}
	yyj907++
	if yyhl907 {
		yyb907 = yyj907 > l
	} else {
		yyb907 = r.CheckBreak()
	}
	if yyb907 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv913 := &x.Status
		yyv913.CodecDecodeSelf(d)
	}
	for {
		yyj907++
		if yyhl907 {
			yyb907 = yyj907 > l
		} else {
			yyb907 = r.CheckBreak()
		}
		if yyb907 {
			break
		}
		z.DecStructFieldNotFound(yyj907-1, "")
	}
	r.ReadEnd()
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym914 := z.EncBinary()
		_ = yym914
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep915 := !z.EncBinary()
			yy2arr915 := z.EncBasicHandle().StructToArray
			var yyq915 [4]bool
			_, _, _ = yysep915, yyq915, yy2arr915
			const yyr915 bool = false
			yyq915[0] = x.Kind != ""
			yyq915[1] = true
			yyq915[2] = true
			if yyr915 || yy2arr915 {
				r.EncodeArrayStart(4)
			} else {
				var yynn915 int = 1
				for _, b := range yyq915 {
					if b {
						yynn915++
					}
				}
				r.EncodeMapStart(yynn915)
			}
			if yyr915 || yy2arr915 {
				if yyq915[0] {
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq915[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym918 := z.EncBinary()
					_ = yym918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr915 || yy2arr915 {
				if yyq915[1] {
					yy920 := &x.APIVersion
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else if z.HasExtensions() && z.EncExt(yy920) {
					} else if !yym921 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy920)
					} else {
						z.EncFallback(yy920)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq915[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy922 := &x.APIVersion
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else if z.HasExtensions() && z.EncExt(yy922) {
					} else if !yym923 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy922)
					} else {
						z.EncFallback(yy922)
					}
				}
			}
			if yyr915 || yy2arr915 {
				if yyq915[2] {
					yy925 := &x.ListMeta
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else if z.HasExtensions() && z.EncExt(yy925) {
					} else {
						z.EncFallback(yy925)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq915[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy927 := &x.ListMeta
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else if z.HasExtensions() && z.EncExt(yy927) {
					} else {
						z.EncFallback(yy927)
					}
				}
			}
			if yyr915 || yy2arr915 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym931 := z.EncBinary()
					_ = yym931
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yysep915 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym932 := z.DecBinary()
	_ = yym932
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl933 := r.ReadMapStart()
			if yyl933 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl933, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl933 := r.ReadArrayStart()
			if yyl933 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl933, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys934Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys934Slc
	var yyhl934 bool = l >= 0
	for yyj934 := 0; ; yyj934++ {
		if yyhl934 {
			if yyj934 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys934Slc = r.DecodeBytes(yys934Slc, true, true)
		yys934 := string(yys934Slc)
		switch yys934 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv936 := &x.APIVersion
				yym937 := z.DecBinary()
				_ = yym937
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv936) {
				} else if !yym937 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv936)
				} else {
					z.DecFallback(yyv936, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv938 := &x.ListMeta
				yym939 := z.DecBinary()
				_ = yym939
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv938) {
				} else {
					z.DecFallback(yyv938, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv940 := &x.Items
				yym941 := z.DecBinary()
				_ = yym941
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv940), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys934)
		} // end switch yys934
	} // end for yyj934
	if !yyhl934 {
		r.ReadEnd()
	}
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj942 int
	var yyb942 bool
	var yyhl942 bool = l >= 0
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv944 := &x.APIVersion
		yym945 := z.DecBinary()
		_ = yym945
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv944) {
		} else if !yym945 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv944)
		} else {
			z.DecFallback(yyv944, false)
		}
	}
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv946 := &x.ListMeta
		yym947 := z.DecBinary()
		_ = yym947
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv946) {
		} else {
			z.DecFallback(yyv946, false)
		}
	}
	yyj942++
	if yyhl942 {
		yyb942 = yyj942 > l
	} else {
		yyb942 = r.CheckBreak()
	}
	if yyb942 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv948 := &x.Items
		yym949 := z.DecBinary()
		_ = yym949
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv948), d)
		}
	}
	for {
		yyj942++
		if yyhl942 {
			yyb942 = yyj942 > l
		} else {
			yyb942 = r.CheckBreak()
		}
		if yyb942 {
			break
		}
		z.DecStructFieldNotFound(yyj942-1, "")
	}
	r.ReadEnd()
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym950 := z.EncBinary()
		_ = yym950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep951 := !z.EncBinary()
			yy2arr951 := z.EncBasicHandle().StructToArray
			var yyq951 [2]bool
			_, _, _ = yysep951, yyq951, yy2arr951
			const yyr951 bool = false
			yyq951[0] = x.Backend != nil
			yyq951[1] = len(x.Rules) != 0
			if yyr951 || yy2arr951 {
				r.EncodeArrayStart(2)
			} else {
				var yynn951 int = 0
				for _, b := range yyq951 {
					if b {
						yynn951++
					}
				}
				r.EncodeMapStart(yynn951)
			}
			if yyr951 || yy2arr951 {
				if yyq951[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq951[0] {
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr951 || yy2arr951 {
				if yyq951[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym954 := z.EncBinary()
						_ = yym954
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq951[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym955 := z.EncBinary()
						_ = yym955
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yysep951 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym956 := z.DecBinary()
	_ = yym956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl957 := r.ReadMapStart()
			if yyl957 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl957, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl957 := r.ReadArrayStart()
			if yyl957 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys958Slc
	var yyhl958 bool = l >= 0
	for yyj958 := 0; ; yyj958++ {
		if yyhl958 {
			if yyj958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys958Slc = r.DecodeBytes(yys958Slc, true, true)
		yys958 := string(yys958Slc)
		switch yys958 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv960 := &x.Rules
				yym961 := z.DecBinary()
				_ = yym961
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv960), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys958)
		} // end switch yys958
	} // end for yyj958
	if !yyhl958 {
		r.ReadEnd()
	}
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj962 int
	var yyb962 bool
	var yyhl962 bool = l >= 0
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv964 := &x.Rules
		yym965 := z.DecBinary()
		_ = yym965
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv964), d)
		}
	}
	for {
		yyj962++
		if yyhl962 {
			yyb962 = yyj962 > l
		} else {
			yyb962 = r.CheckBreak()
		}
		if yyb962 {
			break
		}
		z.DecStructFieldNotFound(yyj962-1, "")
	}
	r.ReadEnd()
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym966 := z.EncBinary()
		_ = yym966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep967 := !z.EncBinary()
			yy2arr967 := z.EncBasicHandle().StructToArray
			var yyq967 [1]bool
			_, _, _ = yysep967, yyq967, yy2arr967
			const yyr967 bool = false
			yyq967[0] = true
			if yyr967 || yy2arr967 {
				r.EncodeArrayStart(1)
			} else {
				var yynn967 int = 0
				for _, b := range yyq967 {
					if b {
						yynn967++
					}
				}
				r.EncodeMapStart(yynn967)
			}
			if yyr967 || yy2arr967 {
				if yyq967[0] {
					yy969 := &x.LoadBalancer
					yy969.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq967[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy970 := &x.LoadBalancer
					yy970.CodecEncodeSelf(e)
				}
			}
			if yysep967 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym971 := z.DecBinary()
	_ = yym971
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl972 := r.ReadMapStart()
			if yyl972 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl972, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl972 := r.ReadArrayStart()
			if yyl972 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl972, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys973Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys973Slc
	var yyhl973 bool = l >= 0
	for yyj973 := 0; ; yyj973++ {
		if yyhl973 {
			if yyj973 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys973Slc = r.DecodeBytes(yys973Slc, true, true)
		yys973 := string(yys973Slc)
		switch yys973 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv974 := &x.LoadBalancer
				yyv974.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys973)
		} // end switch yys973
	} // end for yyj973
	if !yyhl973 {
		r.ReadEnd()
	}
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj975 int
	var yyb975 bool
	var yyhl975 bool = l >= 0
	yyj975++
	if yyhl975 {
		yyb975 = yyj975 > l
	} else {
		yyb975 = r.CheckBreak()
	}
	if yyb975 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv976 := &x.LoadBalancer
		yyv976.CodecDecodeSelf(d)
	}
	for {
		yyj975++
		if yyhl975 {
			yyb975 = yyj975 > l
		} else {
			yyb975 = r.CheckBreak()
		}
		if yyb975 {
			break
		}
		z.DecStructFieldNotFound(yyj975-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym977 := z.EncBinary()
		_ = yym977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep978 := !z.EncBinary()
			yy2arr978 := z.EncBasicHandle().StructToArray
			var yyq978 [2]bool
			_, _, _ = yysep978, yyq978, yy2arr978
			const yyr978 bool = false
			yyq978[0] = x.Host != ""
			yyq978[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			if yyr978 || yy2arr978 {
				r.EncodeArrayStart(2)
			} else {
				var yynn978 int = 0
				for _, b := range yyq978 {
					if b {
						yynn978++
					}
				}
				r.EncodeMapStart(yynn978)
			}
			if yyr978 || yy2arr978 {
				if yyq978[0] {
					yym980 := z.EncBinary()
					_ = yym980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq978[0] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn982 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn982 = true
				goto LABEL982
			}
		LABEL982:
			if yyr978 || yy2arr978 {
				if yyn982 {
					r.EncodeNil()
				} else {
					if yyq978[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq978[1] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if yyn982 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep978 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym983 := z.DecBinary()
	_ = yym983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl984 := r.ReadMapStart()
			if yyl984 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl984, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl984 := r.ReadArrayStart()
			if yyl984 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys985Slc
	var yyhl985 bool = l >= 0
	for yyj985 := 0; ; yyj985++ {
		if yyhl985 {
			if yyj985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys985Slc = r.DecodeBytes(yys985Slc, true, true)
		yys985 := string(yys985Slc)
		switch yys985 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys985)
		} // end switch yys985
	} // end for yyj985
	if !yyhl985 {
		r.ReadEnd()
	}
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj988 int
	var yyb988 bool
	var yyhl988 bool = l >= 0
	yyj988++
	if yyhl988 {
		yyb988 = yyj988 > l
	} else {
		yyb988 = r.CheckBreak()
	}
	if yyb988 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj988++
	if yyhl988 {
		yyb988 = yyj988 > l
	} else {
		yyb988 = r.CheckBreak()
	}
	if yyb988 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj988++
		if yyhl988 {
			yyb988 = yyj988 > l
		} else {
			yyb988 = r.CheckBreak()
		}
		if yyb988 {
			break
		}
		z.DecStructFieldNotFound(yyj988-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym991 := z.EncBinary()
		_ = yym991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep992 := !z.EncBinary()
			yy2arr992 := z.EncBasicHandle().StructToArray
			var yyq992 [1]bool
			_, _, _ = yysep992, yyq992, yy2arr992
			const yyr992 bool = false
			yyq992[0] = x.HTTP != nil
			if yyr992 || yy2arr992 {
				r.EncodeArrayStart(1)
			} else {
				var yynn992 int = 0
				for _, b := range yyq992 {
					if b {
						yynn992++
					}
				}
				r.EncodeMapStart(yynn992)
			}
			if yyr992 || yy2arr992 {
				if yyq992[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq992[0] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yysep992 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl995 := r.ReadMapStart()
			if yyl995 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl995, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl995 := r.ReadArrayStart()
			if yyl995 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl995, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys996Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys996Slc
	var yyhl996 bool = l >= 0
	for yyj996 := 0; ; yyj996++ {
		if yyhl996 {
			if yyj996 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys996Slc = r.DecodeBytes(yys996Slc, true, true)
		yys996 := string(yys996Slc)
		switch yys996 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys996)
		} // end switch yys996
	} // end for yyj996
	if !yyhl996 {
		r.ReadEnd()
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj998 int
	var yyb998 bool
	var yyhl998 bool = l >= 0
	yyj998++
	if yyhl998 {
		yyb998 = yyj998 > l
	} else {
		yyb998 = r.CheckBreak()
	}
	if yyb998 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj998++
		if yyhl998 {
			yyb998 = yyj998 > l
		} else {
			yyb998 = r.CheckBreak()
		}
		if yyb998 {
			break
		}
		z.DecStructFieldNotFound(yyj998-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1000 := z.EncBinary()
		_ = yym1000
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1001 := !z.EncBinary()
			yy2arr1001 := z.EncBasicHandle().StructToArray
			var yyq1001 [1]bool
			_, _, _ = yysep1001, yyq1001, yy2arr1001
			const yyr1001 bool = false
			if yyr1001 || yy2arr1001 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1001 int = 1
				for _, b := range yyq1001 {
					if b {
						yynn1001++
					}
				}
				r.EncodeMapStart(yynn1001)
			}
			if yyr1001 || yy2arr1001 {
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yysep1001 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		switch yys1007 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1008 := &x.Paths
				yym1009 := z.DecBinary()
				_ = yym1009
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1008), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	if !yyhl1007 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1010 int
	var yyb1010 bool
	var yyhl1010 bool = l >= 0
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1011 := &x.Paths
		yym1012 := z.DecBinary()
		_ = yym1012
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1011), d)
		}
	}
	for {
		yyj1010++
		if yyhl1010 {
			yyb1010 = yyj1010 > l
		} else {
			yyb1010 = r.CheckBreak()
		}
		if yyb1010 {
			break
		}
		z.DecStructFieldNotFound(yyj1010-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1013 := z.EncBinary()
		_ = yym1013
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1014 := !z.EncBinary()
			yy2arr1014 := z.EncBasicHandle().StructToArray
			var yyq1014 [2]bool
			_, _, _ = yysep1014, yyq1014, yy2arr1014
			const yyr1014 bool = false
			yyq1014[0] = x.Path != ""
			if yyr1014 || yy2arr1014 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1014 int = 1
				for _, b := range yyq1014 {
					if b {
						yynn1014++
					}
				}
				r.EncodeMapStart(yynn1014)
			}
			if yyr1014 || yy2arr1014 {
				if yyq1014[0] {
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1014[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				yy1019 := &x.Backend
				yy1019.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				yy1020 := &x.Backend
				yy1020.CodecEncodeSelf(e)
			}
			if yysep1014 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1022 := r.ReadMapStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1022, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1022 := r.ReadArrayStart()
			if yyl1022 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1023Slc
	var yyhl1023 bool = l >= 0
	for yyj1023 := 0; ; yyj1023++ {
		if yyhl1023 {
			if yyj1023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1023Slc = r.DecodeBytes(yys1023Slc, true, true)
		yys1023 := string(yys1023Slc)
		switch yys1023 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1025 := &x.Backend
				yyv1025.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1023)
		} // end switch yys1023
	} // end for yyj1023
	if !yyhl1023 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1026 int
	var yyb1026 bool
	var yyhl1026 bool = l >= 0
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1028 := &x.Backend
		yyv1028.CodecDecodeSelf(d)
	}
	for {
		yyj1026++
		if yyhl1026 {
			yyb1026 = yyj1026 > l
		} else {
			yyb1026 = r.CheckBreak()
		}
		if yyb1026 {
			break
		}
		z.DecStructFieldNotFound(yyj1026-1, "")
	}
	r.ReadEnd()
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1029 := z.EncBinary()
		_ = yym1029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1030 := !z.EncBinary()
			yy2arr1030 := z.EncBasicHandle().StructToArray
			var yyq1030 [2]bool
			_, _, _ = yysep1030, yyq1030, yy2arr1030
			const yyr1030 bool = false
			if yyr1030 || yy2arr1030 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1030 int = 2
				for _, b := range yyq1030 {
					if b {
						yynn1030++
					}
				}
				r.EncodeMapStart(yynn1030)
			}
			if yyr1030 || yy2arr1030 {
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1030 || yy2arr1030 {
				yy1035 := &x.ServicePort
				yym1036 := z.EncBinary()
				_ = yym1036
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1035) {
				} else if !yym1036 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1035)
				} else {
					z.EncFallback(yy1035)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				yy1037 := &x.ServicePort
				yym1038 := z.EncBinary()
				_ = yym1038
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1037) {
				} else if !yym1038 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1037)
				} else {
					z.EncFallback(yy1037)
				}
			}
			if yysep1030 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1039 := z.DecBinary()
	_ = yym1039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1040 := r.ReadMapStart()
			if yyl1040 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1040, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1040 := r.ReadArrayStart()
			if yyl1040 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1041Slc
	var yyhl1041 bool = l >= 0
	for yyj1041 := 0; ; yyj1041++ {
		if yyhl1041 {
			if yyj1041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1041Slc = r.DecodeBytes(yys1041Slc, true, true)
		yys1041 := string(yys1041Slc)
		switch yys1041 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_util.IntOrString{}
			} else {
				yyv1043 := &x.ServicePort
				yym1044 := z.DecBinary()
				_ = yym1044
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1043) {
				} else if !yym1044 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1043)
				} else {
					z.DecFallback(yyv1043, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1041)
		} // end switch yys1041
	} // end for yyj1041
	if !yyhl1041 {
		r.ReadEnd()
	}
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1045 int
	var yyb1045 bool
	var yyhl1045 bool = l >= 0
	yyj1045++
	if yyhl1045 {
		yyb1045 = yyj1045 > l
	} else {
		yyb1045 = r.CheckBreak()
	}
	if yyb1045 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1045++
	if yyhl1045 {
		yyb1045 = yyj1045 > l
	} else {
		yyb1045 = r.CheckBreak()
	}
	if yyb1045 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_util.IntOrString{}
	} else {
		yyv1047 := &x.ServicePort
		yym1048 := z.DecBinary()
		_ = yym1048
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1047) {
		} else if !yym1048 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1047)
		} else {
			z.DecFallback(yyv1047, false)
		}
	}
	for {
		yyj1045++
		if yyhl1045 {
			yyb1045 = yyj1045 > l
		} else {
			yyb1045 = r.CheckBreak()
		}
		if yyb1045 {
			break
		}
		z.DecStructFieldNotFound(yyj1045-1, "")
	}
	r.ReadEnd()
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1049 := z.EncBinary()
	_ = yym1049
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1050 := z.DecBinary()
	_ = yym1050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1051 := z.EncBinary()
		_ = yym1051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1052 := !z.EncBinary()
			yy2arr1052 := z.EncBasicHandle().StructToArray
			var yyq1052 [2]bool
			_, _, _ = yysep1052, yyq1052, yy2arr1052
			const yyr1052 bool = false
			if yyr1052 || yy2arr1052 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1052 int = 2
				for _, b := range yyq1052 {
					if b {
						yynn1052++
					}
				}
				r.EncodeMapStart(yynn1052)
			}
			if yyr1052 || yy2arr1052 {
				x.Resource.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1052 || yy2arr1052 {
				yym1055 := z.EncBinary()
				_ = yym1055
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				yym1056 := z.EncBinary()
				_ = yym1056
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yysep1052 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1057 := z.DecBinary()
	_ = yym1057
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1058 := r.ReadMapStart()
			if yyl1058 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1058, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1058 := r.ReadArrayStart()
			if yyl1058 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1058, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1059Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1059Slc
	var yyhl1059 bool = l >= 0
	for yyj1059 := 0; ; yyj1059++ {
		if yyhl1059 {
			if yyj1059 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1059Slc = r.DecodeBytes(yys1059Slc, true, true)
		yys1059 := string(yys1059Slc)
		switch yys1059 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1059)
		} // end switch yys1059
	} // end for yyj1059
	if !yyhl1059 {
		r.ReadEnd()
	}
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1062 int
	var yyb1062 bool
	var yyhl1062 bool = l >= 0
	yyj1062++
	if yyhl1062 {
		yyb1062 = yyj1062 > l
	} else {
		yyb1062 = r.CheckBreak()
	}
	if yyb1062 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1062++
	if yyhl1062 {
		yyb1062 = yyj1062 > l
	} else {
		yyb1062 = r.CheckBreak()
	}
	if yyb1062 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1062++
		if yyhl1062 {
			yyb1062 = yyj1062 > l
		} else {
			yyb1062 = r.CheckBreak()
		}
		if yyb1062 {
			break
		}
		z.DecStructFieldNotFound(yyj1062-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1065 := z.EncBinary()
		_ = yym1065
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1066 := !z.EncBinary()
			yy2arr1066 := z.EncBasicHandle().StructToArray
			var yyq1066 [3]bool
			_, _, _ = yysep1066, yyq1066, yy2arr1066
			const yyr1066 bool = false
			if yyr1066 || yy2arr1066 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1066 int = 3
				for _, b := range yyq1066 {
					if b {
						yynn1066++
					}
				}
				r.EncodeMapStart(yynn1066)
			}
			if yyr1066 || yy2arr1066 {
				yym1068 := z.EncBinary()
				_ = yym1068
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				yym1069 := z.EncBinary()
				_ = yym1069
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1066 || yy2arr1066 {
				yym1071 := z.EncBinary()
				_ = yym1071
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				yym1072 := z.EncBinary()
				_ = yym1072
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1066 || yy2arr1066 {
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1075 := z.EncBinary()
					_ = yym1075
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yysep1066 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1076 := z.DecBinary()
	_ = yym1076
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1077 := r.ReadMapStart()
			if yyl1077 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1077, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1077 := r.ReadArrayStart()
			if yyl1077 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1077, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1078Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1078Slc
	var yyhl1078 bool = l >= 0
	for yyj1078 := 0; ; yyj1078++ {
		if yyhl1078 {
			if yyj1078 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1078Slc = r.DecodeBytes(yys1078Slc, true, true)
		yys1078 := string(yys1078Slc)
		switch yys1078 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1081 := &x.TargetUtilization
				yym1082 := z.DecBinary()
				_ = yym1082
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1081), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1078)
		} // end switch yys1078
	} // end for yyj1078
	if !yyhl1078 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1083 int
	var yyb1083 bool
	var yyhl1083 bool = l >= 0
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1086 := &x.TargetUtilization
		yym1087 := z.DecBinary()
		_ = yym1087
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1086), d)
		}
	}
	for {
		yyj1083++
		if yyhl1083 {
			yyb1083 = yyj1083 > l
		} else {
			yyb1083 = r.CheckBreak()
		}
		if yyb1083 {
			break
		}
		z.DecStructFieldNotFound(yyj1083-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1088 := z.EncBinary()
		_ = yym1088
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1089 := !z.EncBinary()
			yy2arr1089 := z.EncBasicHandle().StructToArray
			var yyq1089 [4]bool
			_, _, _ = yysep1089, yyq1089, yy2arr1089
			const yyr1089 bool = false
			yyq1089[0] = x.Kind != ""
			yyq1089[1] = true
			yyq1089[2] = true
			yyq1089[3] = true
			if yyr1089 || yy2arr1089 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1089 int = 0
				for _, b := range yyq1089 {
					if b {
						yynn1089++
					}
				}
				r.EncodeMapStart(yynn1089)
			}
			if yyr1089 || yy2arr1089 {
				if yyq1089[0] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1089[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				if yyq1089[1] {
					yy1094 := &x.APIVersion
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1094) {
					} else if !yym1095 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1094)
					} else {
						z.EncFallback(yy1094)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1096 := &x.APIVersion
					yym1097 := z.EncBinary()
					_ = yym1097
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1096) {
					} else if !yym1097 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1096)
					} else {
						z.EncFallback(yy1096)
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				if yyq1089[2] {
					yy1099 := &x.ObjectMeta
					yy1099.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1100 := &x.ObjectMeta
					yy1100.CodecEncodeSelf(e)
				}
			}
			if yyr1089 || yy2arr1089 {
				if yyq1089[3] {
					yy1102 := &x.Spec
					yy1102.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1103 := &x.Spec
					yy1103.CodecEncodeSelf(e)
				}
			}
			if yysep1089 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1104 := z.DecBinary()
	_ = yym1104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1105 := r.ReadMapStart()
			if yyl1105 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1105, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1105 := r.ReadArrayStart()
			if yyl1105 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1106Slc
	var yyhl1106 bool = l >= 0
	for yyj1106 := 0; ; yyj1106++ {
		if yyhl1106 {
			if yyj1106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1106Slc = r.DecodeBytes(yys1106Slc, true, true)
		yys1106 := string(yys1106Slc)
		switch yys1106 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv1108 := &x.APIVersion
				yym1109 := z.DecBinary()
				_ = yym1109
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1108) {
				} else if !yym1109 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1108)
				} else {
					z.DecFallback(yyv1108, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1110 := &x.ObjectMeta
				yyv1110.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1111 := &x.Spec
				yyv1111.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1106)
		} // end switch yys1106
	} // end for yyj1106
	if !yyhl1106 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1112 int
	var yyb1112 bool
	var yyhl1112 bool = l >= 0
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv1114 := &x.APIVersion
		yym1115 := z.DecBinary()
		_ = yym1115
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1114) {
		} else if !yym1115 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1114)
		} else {
			z.DecFallback(yyv1114, false)
		}
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1116 := &x.ObjectMeta
		yyv1116.CodecDecodeSelf(d)
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1117 := &x.Spec
		yyv1117.CodecDecodeSelf(d)
	}
	for {
		yyj1112++
		if yyhl1112 {
			yyb1112 = yyj1112 > l
		} else {
			yyb1112 = r.CheckBreak()
		}
		if yyb1112 {
			break
		}
		z.DecStructFieldNotFound(yyj1112-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1118 := z.EncBinary()
		_ = yym1118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1119 := !z.EncBinary()
			yy2arr1119 := z.EncBasicHandle().StructToArray
			var yyq1119 [4]bool
			_, _, _ = yysep1119, yyq1119, yy2arr1119
			const yyr1119 bool = false
			yyq1119[0] = x.Kind != ""
			yyq1119[1] = true
			yyq1119[2] = true
			if yyr1119 || yy2arr1119 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1119 int = 1
				for _, b := range yyq1119 {
					if b {
						yynn1119++
					}
				}
				r.EncodeMapStart(yynn1119)
			}
			if yyr1119 || yy2arr1119 {
				if yyq1119[0] {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1119[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1119 || yy2arr1119 {
				if yyq1119[1] {
					yy1124 := &x.APIVersion
					yym1125 := z.EncBinary()
					_ = yym1125
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1124) {
					} else if !yym1125 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1124)
					} else {
						z.EncFallback(yy1124)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1119[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1126 := &x.APIVersion
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1126) {
					} else if !yym1127 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1126)
					} else {
						z.EncFallback(yy1126)
					}
				}
			}
			if yyr1119 || yy2arr1119 {
				if yyq1119[2] {
					yy1129 := &x.ListMeta
					yym1130 := z.EncBinary()
					_ = yym1130
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1129) {
					} else {
						z.EncFallback(yy1129)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1119[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1131 := &x.ListMeta
					yym1132 := z.EncBinary()
					_ = yym1132
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1131) {
					} else {
						z.EncFallback(yy1131)
					}
				}
			}
			if yyr1119 || yy2arr1119 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1134 := z.EncBinary()
					_ = yym1134
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1135 := z.EncBinary()
					_ = yym1135
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep1119 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1136 := z.DecBinary()
	_ = yym1136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1137 := r.ReadMapStart()
			if yyl1137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1137, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1137 := r.ReadArrayStart()
			if yyl1137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1138Slc
	var yyhl1138 bool = l >= 0
	for yyj1138 := 0; ; yyj1138++ {
		if yyhl1138 {
			if yyj1138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1138Slc = r.DecodeBytes(yys1138Slc, true, true)
		yys1138 := string(yys1138Slc)
		switch yys1138 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv1140 := &x.APIVersion
				yym1141 := z.DecBinary()
				_ = yym1141
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1140) {
				} else if !yym1141 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1140)
				} else {
					z.DecFallback(yyv1140, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1142 := &x.ListMeta
				yym1143 := z.DecBinary()
				_ = yym1143
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1142) {
				} else {
					z.DecFallback(yyv1142, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1144 := &x.Items
				yym1145 := z.DecBinary()
				_ = yym1145
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1144), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1138)
		} // end switch yys1138
	} // end for yyj1138
	if !yyhl1138 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1146 int
	var yyb1146 bool
	var yyhl1146 bool = l >= 0
	yyj1146++
	if yyhl1146 {
		yyb1146 = yyj1146 > l
	} else {
		yyb1146 = r.CheckBreak()
	}
	if yyb1146 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1146++
	if yyhl1146 {
		yyb1146 = yyj1146 > l
	} else {
		yyb1146 = r.CheckBreak()
	}
	if yyb1146 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv1148 := &x.APIVersion
		yym1149 := z.DecBinary()
		_ = yym1149
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1148) {
		} else if !yym1149 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1148)
		} else {
			z.DecFallback(yyv1148, false)
		}
	}
	yyj1146++
	if yyhl1146 {
		yyb1146 = yyj1146 > l
	} else {
		yyb1146 = r.CheckBreak()
	}
	if yyb1146 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1150 := &x.ListMeta
		yym1151 := z.DecBinary()
		_ = yym1151
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1150) {
		} else {
			z.DecFallback(yyv1150, false)
		}
	}
	yyj1146++
	if yyhl1146 {
		yyb1146 = yyj1146 > l
	} else {
		yyb1146 = r.CheckBreak()
	}
	if yyb1146 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1152 := &x.Items
		yym1153 := z.DecBinary()
		_ = yym1153
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1152), d)
		}
	}
	for {
		yyj1146++
		if yyhl1146 {
			yyb1146 = yyj1146 > l
		} else {
			yyb1146 = r.CheckBreak()
		}
		if yyb1146 {
			break
		}
		z.DecStructFieldNotFound(yyj1146-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [2]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[0] = len(x.MatchLabels) != 0
			yyq1155[1] = len(x.MatchExpressions) != 0
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1155 int = 0
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1157 := z.EncBinary()
						_ = yym1157
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[0] {
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1158 := z.EncBinary()
						_ = yym1158
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				if yyq1155[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1160 := z.EncBinary()
						_ = yym1160
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[1] {
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1161 := z.EncBinary()
						_ = yym1161
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yysep1155 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1162 := z.DecBinary()
	_ = yym1162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1163 := r.ReadMapStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1163, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1163 := r.ReadArrayStart()
			if yyl1163 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1164Slc
	var yyhl1164 bool = l >= 0
	for yyj1164 := 0; ; yyj1164++ {
		if yyhl1164 {
			if yyj1164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1164Slc = r.DecodeBytes(yys1164Slc, true, true)
		yys1164 := string(yys1164Slc)
		switch yys1164 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1165 := &x.MatchLabels
				yym1166 := z.DecBinary()
				_ = yym1166
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1165, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1167 := &x.MatchExpressions
				yym1168 := z.DecBinary()
				_ = yym1168
				if false {
				} else {
					h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1167), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1164)
		} // end switch yys1164
	} // end for yyj1164
	if !yyhl1164 {
		r.ReadEnd()
	}
}

func (x *PodSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1169 int
	var yyb1169 bool
	var yyhl1169 bool = l >= 0
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1170 := &x.MatchLabels
		yym1171 := z.DecBinary()
		_ = yym1171
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1170, false, d)
		}
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1172 := &x.MatchExpressions
		yym1173 := z.DecBinary()
		_ = yym1173
		if false {
		} else {
			h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1172), d)
		}
	}
	for {
		yyj1169++
		if yyhl1169 {
			yyb1169 = yyj1169 > l
		} else {
			yyb1169 = r.CheckBreak()
		}
		if yyb1169 {
			break
		}
		z.DecStructFieldNotFound(yyj1169-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1174 := z.EncBinary()
		_ = yym1174
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1175 := !z.EncBinary()
			yy2arr1175 := z.EncBasicHandle().StructToArray
			var yyq1175 [3]bool
			_, _, _ = yysep1175, yyq1175, yy2arr1175
			const yyr1175 bool = false
			yyq1175[2] = len(x.Values) != 0
			if yyr1175 || yy2arr1175 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1175 int = 2
				for _, b := range yyq1175 {
					if b {
						yynn1175++
					}
				}
				r.EncodeMapStart(yynn1175)
			}
			if yyr1175 || yy2arr1175 {
				yym1177 := z.EncBinary()
				_ = yym1177
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				yym1178 := z.EncBinary()
				_ = yym1178
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1175 || yy2arr1175 {
				x.Operator.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1175 || yy2arr1175 {
				if yyq1175[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1181 := z.EncBinary()
						_ = yym1181
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1175[2] {
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1182 := z.EncBinary()
						_ = yym1182
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yysep1175 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1183 := z.DecBinary()
	_ = yym1183
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1184 := r.ReadMapStart()
			if yyl1184 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1184, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1184 := r.ReadArrayStart()
			if yyl1184 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1184, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1185Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1185Slc
	var yyhl1185 bool = l >= 0
	for yyj1185 := 0; ; yyj1185++ {
		if yyhl1185 {
			if yyj1185 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1185Slc = r.DecodeBytes(yys1185Slc, true, true)
		yys1185 := string(yys1185Slc)
		switch yys1185 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = PodSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1188 := &x.Values
				yym1189 := z.DecBinary()
				_ = yym1189
				if false {
				} else {
					z.F.DecSliceStringX(yyv1188, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1185)
		} // end switch yys1185
	} // end for yyj1185
	if !yyhl1185 {
		r.ReadEnd()
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1190 int
	var yyb1190 bool
	var yyhl1190 bool = l >= 0
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = PodSelectorOperator(r.DecodeString())
	}
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1193 := &x.Values
		yym1194 := z.DecBinary()
		_ = yym1194
		if false {
		} else {
			z.F.DecSliceStringX(yyv1193, false, d)
		}
	}
	for {
		yyj1190++
		if yyhl1190 {
			yyb1190 = yyj1190 > l
		} else {
			yyb1190 = r.CheckBreak()
		}
		if yyb1190 {
			break
		}
		z.DecStructFieldNotFound(yyj1190-1, "")
	}
	r.ReadEnd()
}

func (x PodSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1195 := z.EncBinary()
	_ = yym1195
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1196 := z.DecBinary()
	_ = yym1196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1197 := range v {
		yy1198 := &yyv1197
		yy1198.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1199 := *v
	yyh1199, yyl1199 := z.DecSliceHelperStart()

	var yyrr1199, yyrl1199 int
	var yyc1199, yyrt1199 bool
	_, _, _ = yyc1199, yyrt1199, yyrl1199
	yyrr1199 = yyl1199

	if yyv1199 == nil {
		if yyrl1199, yyrt1199 = z.DecInferLen(yyl1199, z.DecBasicHandle().MaxInitLen, 336); yyrt1199 {
			yyrr1199 = yyrl1199
		}
		yyv1199 = make([]HorizontalPodAutoscaler, yyrl1199)
		yyc1199 = true
	}

	if yyl1199 == 0 {
		if len(yyv1199) != 0 {
			yyv1199 = yyv1199[:0]
			yyc1199 = true
		}
	} else if yyl1199 > 0 {

		if yyl1199 > cap(yyv1199) {
			yyrl1199, yyrt1199 = z.DecInferLen(yyl1199, z.DecBasicHandle().MaxInitLen, 336)
			yyv1199 = make([]HorizontalPodAutoscaler, yyrl1199)
			yyc1199 = true

			yyrr1199 = len(yyv1199)
		} else if yyl1199 != len(yyv1199) {
			yyv1199 = yyv1199[:yyl1199]
			yyc1199 = true
		}
		yyj1199 := 0
		for ; yyj1199 < yyrr1199; yyj1199++ {
			if r.TryDecodeAsNil() {
				yyv1199[yyj1199] = HorizontalPodAutoscaler{}
			} else {
				yyv1200 := &yyv1199[yyj1199]
				yyv1200.CodecDecodeSelf(d)
			}

		}
		if yyrt1199 {
			for ; yyj1199 < yyl1199; yyj1199++ {
				yyv1199 = append(yyv1199, HorizontalPodAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1199[yyj1199] = HorizontalPodAutoscaler{}
				} else {
					yyv1201 := &yyv1199[yyj1199]
					yyv1201.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1199 := 0; !r.CheckBreak(); yyj1199++ {
			if yyj1199 >= len(yyv1199) {
				yyv1199 = append(yyv1199, HorizontalPodAutoscaler{}) // var yyz1199 HorizontalPodAutoscaler
				yyc1199 = true
			}

			if yyj1199 < len(yyv1199) {
				if r.TryDecodeAsNil() {
					yyv1199[yyj1199] = HorizontalPodAutoscaler{}
				} else {
					yyv1202 := &yyv1199[yyj1199]
					yyv1202.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1199.End()
	}
	if yyc1199 {
		*v = yyv1199
	}

}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1203 := range v {
		yy1204 := &yyv1203
		yy1204.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1205 := *v
	yyh1205, yyl1205 := z.DecSliceHelperStart()

	var yyrr1205, yyrl1205 int
	var yyc1205, yyrt1205 bool
	_, _, _ = yyc1205, yyrt1205, yyrl1205
	yyrr1205 = yyl1205

	if yyv1205 == nil {
		if yyrl1205, yyrt1205 = z.DecInferLen(yyl1205, z.DecBasicHandle().MaxInitLen, 32); yyrt1205 {
			yyrr1205 = yyrl1205
		}
		yyv1205 = make([]APIVersion, yyrl1205)
		yyc1205 = true
	}

	if yyl1205 == 0 {
		if len(yyv1205) != 0 {
			yyv1205 = yyv1205[:0]
			yyc1205 = true
		}
	} else if yyl1205 > 0 {

		if yyl1205 > cap(yyv1205) {
			yyrl1205, yyrt1205 = z.DecInferLen(yyl1205, z.DecBasicHandle().MaxInitLen, 32)
			yyv1205 = make([]APIVersion, yyrl1205)
			yyc1205 = true

			yyrr1205 = len(yyv1205)
		} else if yyl1205 != len(yyv1205) {
			yyv1205 = yyv1205[:yyl1205]
			yyc1205 = true
		}
		yyj1205 := 0
		for ; yyj1205 < yyrr1205; yyj1205++ {
			if r.TryDecodeAsNil() {
				yyv1205[yyj1205] = APIVersion{}
			} else {
				yyv1206 := &yyv1205[yyj1205]
				yyv1206.CodecDecodeSelf(d)
			}

		}
		if yyrt1205 {
			for ; yyj1205 < yyl1205; yyj1205++ {
				yyv1205 = append(yyv1205, APIVersion{})
				if r.TryDecodeAsNil() {
					yyv1205[yyj1205] = APIVersion{}
				} else {
					yyv1207 := &yyv1205[yyj1205]
					yyv1207.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1205 := 0; !r.CheckBreak(); yyj1205++ {
			if yyj1205 >= len(yyv1205) {
				yyv1205 = append(yyv1205, APIVersion{}) // var yyz1205 APIVersion
				yyc1205 = true
			}

			if yyj1205 < len(yyv1205) {
				if r.TryDecodeAsNil() {
					yyv1205[yyj1205] = APIVersion{}
				} else {
					yyv1208 := &yyv1205[yyj1205]
					yyv1208.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1205.End()
	}
	if yyc1205 {
		*v = yyv1205
	}

}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1209 := range v {
		yy1210 := &yyv1209
		yy1210.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1211 := *v
	yyh1211, yyl1211 := z.DecSliceHelperStart()

	var yyrr1211, yyrl1211 int
	var yyc1211, yyrt1211 bool
	_, _, _ = yyc1211, yyrt1211, yyrl1211
	yyrr1211 = yyl1211

	if yyv1211 == nil {
		if yyrl1211, yyrt1211 = z.DecInferLen(yyl1211, z.DecBasicHandle().MaxInitLen, 248); yyrt1211 {
			yyrr1211 = yyrl1211
		}
		yyv1211 = make([]ThirdPartyResource, yyrl1211)
		yyc1211 = true
	}

	if yyl1211 == 0 {
		if len(yyv1211) != 0 {
			yyv1211 = yyv1211[:0]
			yyc1211 = true
		}
	} else if yyl1211 > 0 {

		if yyl1211 > cap(yyv1211) {
			yyrl1211, yyrt1211 = z.DecInferLen(yyl1211, z.DecBasicHandle().MaxInitLen, 248)
			yyv1211 = make([]ThirdPartyResource, yyrl1211)
			yyc1211 = true

			yyrr1211 = len(yyv1211)
		} else if yyl1211 != len(yyv1211) {
			yyv1211 = yyv1211[:yyl1211]
			yyc1211 = true
		}
		yyj1211 := 0
		for ; yyj1211 < yyrr1211; yyj1211++ {
			if r.TryDecodeAsNil() {
				yyv1211[yyj1211] = ThirdPartyResource{}
			} else {
				yyv1212 := &yyv1211[yyj1211]
				yyv1212.CodecDecodeSelf(d)
			}

		}
		if yyrt1211 {
			for ; yyj1211 < yyl1211; yyj1211++ {
				yyv1211 = append(yyv1211, ThirdPartyResource{})
				if r.TryDecodeAsNil() {
					yyv1211[yyj1211] = ThirdPartyResource{}
				} else {
					yyv1213 := &yyv1211[yyj1211]
					yyv1213.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1211 := 0; !r.CheckBreak(); yyj1211++ {
			if yyj1211 >= len(yyv1211) {
				yyv1211 = append(yyv1211, ThirdPartyResource{}) // var yyz1211 ThirdPartyResource
				yyc1211 = true
			}

			if yyj1211 < len(yyv1211) {
				if r.TryDecodeAsNil() {
					yyv1211[yyj1211] = ThirdPartyResource{}
				} else {
					yyv1214 := &yyv1211[yyj1211]
					yyv1214.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1211.End()
	}
	if yyc1211 {
		*v = yyv1211
	}

}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1215 := range v {
		yy1216 := &yyv1215
		yy1216.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1217 := *v
	yyh1217, yyl1217 := z.DecSliceHelperStart()

	var yyrr1217, yyrl1217 int
	var yyc1217, yyrt1217 bool
	_, _, _ = yyc1217, yyrt1217, yyrl1217
	yyrr1217 = yyl1217

	if yyv1217 == nil {
		if yyrl1217, yyrt1217 = z.DecInferLen(yyl1217, z.DecBasicHandle().MaxInitLen, 608); yyrt1217 {
			yyrr1217 = yyrl1217
		}
		yyv1217 = make([]Deployment, yyrl1217)
		yyc1217 = true
	}

	if yyl1217 == 0 {
		if len(yyv1217) != 0 {
			yyv1217 = yyv1217[:0]
			yyc1217 = true
		}
	} else if yyl1217 > 0 {

		if yyl1217 > cap(yyv1217) {
			yyrl1217, yyrt1217 = z.DecInferLen(yyl1217, z.DecBasicHandle().MaxInitLen, 608)
			yyv1217 = make([]Deployment, yyrl1217)
			yyc1217 = true

			yyrr1217 = len(yyv1217)
		} else if yyl1217 != len(yyv1217) {
			yyv1217 = yyv1217[:yyl1217]
			yyc1217 = true
		}
		yyj1217 := 0
		for ; yyj1217 < yyrr1217; yyj1217++ {
			if r.TryDecodeAsNil() {
				yyv1217[yyj1217] = Deployment{}
			} else {
				yyv1218 := &yyv1217[yyj1217]
				yyv1218.CodecDecodeSelf(d)
			}

		}
		if yyrt1217 {
			for ; yyj1217 < yyl1217; yyj1217++ {
				yyv1217 = append(yyv1217, Deployment{})
				if r.TryDecodeAsNil() {
					yyv1217[yyj1217] = Deployment{}
				} else {
					yyv1219 := &yyv1217[yyj1217]
					yyv1219.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1217 := 0; !r.CheckBreak(); yyj1217++ {
			if yyj1217 >= len(yyv1217) {
				yyv1217 = append(yyv1217, Deployment{}) // var yyz1217 Deployment
				yyc1217 = true
			}

			if yyj1217 < len(yyv1217) {
				if r.TryDecodeAsNil() {
					yyv1217[yyj1217] = Deployment{}
				} else {
					yyv1220 := &yyv1217[yyj1217]
					yyv1220.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1217.End()
	}
	if yyc1217 {
		*v = yyv1217
	}

}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1221 := range v {
		yy1222 := &yyv1221
		yy1222.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1223 := *v
	yyh1223, yyl1223 := z.DecSliceHelperStart()

	var yyrr1223, yyrl1223 int
	var yyc1223, yyrt1223 bool
	_, _, _ = yyc1223, yyrt1223, yyrl1223
	yyrr1223 = yyl1223

	if yyv1223 == nil {
		if yyrl1223, yyrt1223 = z.DecInferLen(yyl1223, z.DecBasicHandle().MaxInitLen, 248); yyrt1223 {
			yyrr1223 = yyrl1223
		}
		yyv1223 = make([]DaemonSet, yyrl1223)
		yyc1223 = true
	}

	if yyl1223 == 0 {
		if len(yyv1223) != 0 {
			yyv1223 = yyv1223[:0]
			yyc1223 = true
		}
	} else if yyl1223 > 0 {

		if yyl1223 > cap(yyv1223) {
			yyrl1223, yyrt1223 = z.DecInferLen(yyl1223, z.DecBasicHandle().MaxInitLen, 248)
			yyv1223 = make([]DaemonSet, yyrl1223)
			yyc1223 = true

			yyrr1223 = len(yyv1223)
		} else if yyl1223 != len(yyv1223) {
			yyv1223 = yyv1223[:yyl1223]
			yyc1223 = true
		}
		yyj1223 := 0
		for ; yyj1223 < yyrr1223; yyj1223++ {
			if r.TryDecodeAsNil() {
				yyv1223[yyj1223] = DaemonSet{}
			} else {
				yyv1224 := &yyv1223[yyj1223]
				yyv1224.CodecDecodeSelf(d)
			}

		}
		if yyrt1223 {
			for ; yyj1223 < yyl1223; yyj1223++ {
				yyv1223 = append(yyv1223, DaemonSet{})
				if r.TryDecodeAsNil() {
					yyv1223[yyj1223] = DaemonSet{}
				} else {
					yyv1225 := &yyv1223[yyj1223]
					yyv1225.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1223 := 0; !r.CheckBreak(); yyj1223++ {
			if yyj1223 >= len(yyv1223) {
				yyv1223 = append(yyv1223, DaemonSet{}) // var yyz1223 DaemonSet
				yyc1223 = true
			}

			if yyj1223 < len(yyv1223) {
				if r.TryDecodeAsNil() {
					yyv1223[yyj1223] = DaemonSet{}
				} else {
					yyv1226 := &yyv1223[yyj1223]
					yyv1226.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1223.End()
	}
	if yyc1223 {
		*v = yyv1223
	}

}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1227 := range v {
		yy1228 := &yyv1227
		yy1228.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1229 := *v
	yyh1229, yyl1229 := z.DecSliceHelperStart()

	var yyrr1229, yyrl1229 int
	var yyc1229, yyrt1229 bool
	_, _, _ = yyc1229, yyrt1229, yyrl1229
	yyrr1229 = yyl1229

	if yyv1229 == nil {
		if yyrl1229, yyrt1229 = z.DecInferLen(yyl1229, z.DecBasicHandle().MaxInitLen, 232); yyrt1229 {
			yyrr1229 = yyrl1229
		}
		yyv1229 = make([]ThirdPartyResourceData, yyrl1229)
		yyc1229 = true
	}

	if yyl1229 == 0 {
		if len(yyv1229) != 0 {
			yyv1229 = yyv1229[:0]
			yyc1229 = true
		}
	} else if yyl1229 > 0 {

		if yyl1229 > cap(yyv1229) {
			yyrl1229, yyrt1229 = z.DecInferLen(yyl1229, z.DecBasicHandle().MaxInitLen, 232)
			yyv1229 = make([]ThirdPartyResourceData, yyrl1229)
			yyc1229 = true

			yyrr1229 = len(yyv1229)
		} else if yyl1229 != len(yyv1229) {
			yyv1229 = yyv1229[:yyl1229]
			yyc1229 = true
		}
		yyj1229 := 0
		for ; yyj1229 < yyrr1229; yyj1229++ {
			if r.TryDecodeAsNil() {
				yyv1229[yyj1229] = ThirdPartyResourceData{}
			} else {
				yyv1230 := &yyv1229[yyj1229]
				yyv1230.CodecDecodeSelf(d)
			}

		}
		if yyrt1229 {
			for ; yyj1229 < yyl1229; yyj1229++ {
				yyv1229 = append(yyv1229, ThirdPartyResourceData{})
				if r.TryDecodeAsNil() {
					yyv1229[yyj1229] = ThirdPartyResourceData{}
				} else {
					yyv1231 := &yyv1229[yyj1229]
					yyv1231.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1229 := 0; !r.CheckBreak(); yyj1229++ {
			if yyj1229 >= len(yyv1229) {
				yyv1229 = append(yyv1229, ThirdPartyResourceData{}) // var yyz1229 ThirdPartyResourceData
				yyc1229 = true
			}

			if yyj1229 < len(yyv1229) {
				if r.TryDecodeAsNil() {
					yyv1229[yyj1229] = ThirdPartyResourceData{}
				} else {
					yyv1232 := &yyv1229[yyj1229]
					yyv1232.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1229.End()
	}
	if yyc1229 {
		*v = yyv1229
	}

}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1233 := range v {
		yy1234 := &yyv1233
		yy1234.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1235 := *v
	yyh1235, yyl1235 := z.DecSliceHelperStart()

	var yyrr1235, yyrl1235 int
	var yyc1235, yyrt1235 bool
	_, _, _ = yyc1235, yyrt1235, yyrl1235
	yyrr1235 = yyl1235

	if yyv1235 == nil {
		if yyrl1235, yyrt1235 = z.DecInferLen(yyl1235, z.DecBasicHandle().MaxInitLen, 624); yyrt1235 {
			yyrr1235 = yyrl1235
		}
		yyv1235 = make([]Job, yyrl1235)
		yyc1235 = true
	}

	if yyl1235 == 0 {
		if len(yyv1235) != 0 {
			yyv1235 = yyv1235[:0]
			yyc1235 = true
		}
	} else if yyl1235 > 0 {

		if yyl1235 > cap(yyv1235) {
			yyrl1235, yyrt1235 = z.DecInferLen(yyl1235, z.DecBasicHandle().MaxInitLen, 624)
			yyv1235 = make([]Job, yyrl1235)
			yyc1235 = true

			yyrr1235 = len(yyv1235)
		} else if yyl1235 != len(yyv1235) {
			yyv1235 = yyv1235[:yyl1235]
			yyc1235 = true
		}
		yyj1235 := 0
		for ; yyj1235 < yyrr1235; yyj1235++ {
			if r.TryDecodeAsNil() {
				yyv1235[yyj1235] = Job{}
			} else {
				yyv1236 := &yyv1235[yyj1235]
				yyv1236.CodecDecodeSelf(d)
			}

		}
		if yyrt1235 {
			for ; yyj1235 < yyl1235; yyj1235++ {
				yyv1235 = append(yyv1235, Job{})
				if r.TryDecodeAsNil() {
					yyv1235[yyj1235] = Job{}
				} else {
					yyv1237 := &yyv1235[yyj1235]
					yyv1237.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1235 := 0; !r.CheckBreak(); yyj1235++ {
			if yyj1235 >= len(yyv1235) {
				yyv1235 = append(yyv1235, Job{}) // var yyz1235 Job
				yyc1235 = true
			}

			if yyj1235 < len(yyv1235) {
				if r.TryDecodeAsNil() {
					yyv1235[yyj1235] = Job{}
				} else {
					yyv1238 := &yyv1235[yyj1235]
					yyv1238.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1235.End()
	}
	if yyc1235 {
		*v = yyv1235
	}

}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1239 := range v {
		yy1240 := &yyv1239
		yy1240.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1241 := *v
	yyh1241, yyl1241 := z.DecSliceHelperStart()

	var yyrr1241, yyrl1241 int
	var yyc1241, yyrt1241 bool
	_, _, _ = yyc1241, yyrt1241, yyrl1241
	yyrr1241 = yyl1241

	if yyv1241 == nil {
		if yyrl1241, yyrt1241 = z.DecInferLen(yyl1241, z.DecBasicHandle().MaxInitLen, 112); yyrt1241 {
			yyrr1241 = yyrl1241
		}
		yyv1241 = make([]JobCondition, yyrl1241)
		yyc1241 = true
	}

	if yyl1241 == 0 {
		if len(yyv1241) != 0 {
			yyv1241 = yyv1241[:0]
			yyc1241 = true
		}
	} else if yyl1241 > 0 {

		if yyl1241 > cap(yyv1241) {
			yyrl1241, yyrt1241 = z.DecInferLen(yyl1241, z.DecBasicHandle().MaxInitLen, 112)
			yyv1241 = make([]JobCondition, yyrl1241)
			yyc1241 = true

			yyrr1241 = len(yyv1241)
		} else if yyl1241 != len(yyv1241) {
			yyv1241 = yyv1241[:yyl1241]
			yyc1241 = true
		}
		yyj1241 := 0
		for ; yyj1241 < yyrr1241; yyj1241++ {
			if r.TryDecodeAsNil() {
				yyv1241[yyj1241] = JobCondition{}
			} else {
				yyv1242 := &yyv1241[yyj1241]
				yyv1242.CodecDecodeSelf(d)
			}

		}
		if yyrt1241 {
			for ; yyj1241 < yyl1241; yyj1241++ {
				yyv1241 = append(yyv1241, JobCondition{})
				if r.TryDecodeAsNil() {
					yyv1241[yyj1241] = JobCondition{}
				} else {
					yyv1243 := &yyv1241[yyj1241]
					yyv1243.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1241 := 0; !r.CheckBreak(); yyj1241++ {
			if yyj1241 >= len(yyv1241) {
				yyv1241 = append(yyv1241, JobCondition{}) // var yyz1241 JobCondition
				yyc1241 = true
			}

			if yyj1241 < len(yyv1241) {
				if r.TryDecodeAsNil() {
					yyv1241[yyj1241] = JobCondition{}
				} else {
					yyv1244 := &yyv1241[yyj1241]
					yyv1244.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1241.End()
	}
	if yyc1241 {
		*v = yyv1241
	}

}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1245 := range v {
		yy1246 := &yyv1245
		yy1246.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1247 := *v
	yyh1247, yyl1247 := z.DecSliceHelperStart()

	var yyrr1247, yyrl1247 int
	var yyc1247, yyrt1247 bool
	_, _, _ = yyc1247, yyrt1247, yyrl1247
	yyrr1247 = yyl1247

	if yyv1247 == nil {
		if yyrl1247, yyrt1247 = z.DecInferLen(yyl1247, z.DecBasicHandle().MaxInitLen, 264); yyrt1247 {
			yyrr1247 = yyrl1247
		}
		yyv1247 = make([]Ingress, yyrl1247)
		yyc1247 = true
	}

	if yyl1247 == 0 {
		if len(yyv1247) != 0 {
			yyv1247 = yyv1247[:0]
			yyc1247 = true
		}
	} else if yyl1247 > 0 {

		if yyl1247 > cap(yyv1247) {
			yyrl1247, yyrt1247 = z.DecInferLen(yyl1247, z.DecBasicHandle().MaxInitLen, 264)
			yyv1247 = make([]Ingress, yyrl1247)
			yyc1247 = true

			yyrr1247 = len(yyv1247)
		} else if yyl1247 != len(yyv1247) {
			yyv1247 = yyv1247[:yyl1247]
			yyc1247 = true
		}
		yyj1247 := 0
		for ; yyj1247 < yyrr1247; yyj1247++ {
			if r.TryDecodeAsNil() {
				yyv1247[yyj1247] = Ingress{}
			} else {
				yyv1248 := &yyv1247[yyj1247]
				yyv1248.CodecDecodeSelf(d)
			}

		}
		if yyrt1247 {
			for ; yyj1247 < yyl1247; yyj1247++ {
				yyv1247 = append(yyv1247, Ingress{})
				if r.TryDecodeAsNil() {
					yyv1247[yyj1247] = Ingress{}
				} else {
					yyv1249 := &yyv1247[yyj1247]
					yyv1249.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1247 := 0; !r.CheckBreak(); yyj1247++ {
			if yyj1247 >= len(yyv1247) {
				yyv1247 = append(yyv1247, Ingress{}) // var yyz1247 Ingress
				yyc1247 = true
			}

			if yyj1247 < len(yyv1247) {
				if r.TryDecodeAsNil() {
					yyv1247[yyj1247] = Ingress{}
				} else {
					yyv1250 := &yyv1247[yyj1247]
					yyv1250.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1247.End()
	}
	if yyc1247 {
		*v = yyv1247
	}

}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1251 := range v {
		yy1252 := &yyv1251
		yy1252.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1253 := *v
	yyh1253, yyl1253 := z.DecSliceHelperStart()

	var yyrr1253, yyrl1253 int
	var yyc1253, yyrt1253 bool
	_, _, _ = yyc1253, yyrt1253, yyrl1253
	yyrr1253 = yyl1253

	if yyv1253 == nil {
		if yyrl1253, yyrt1253 = z.DecInferLen(yyl1253, z.DecBasicHandle().MaxInitLen, 24); yyrt1253 {
			yyrr1253 = yyrl1253
		}
		yyv1253 = make([]IngressRule, yyrl1253)
		yyc1253 = true
	}

	if yyl1253 == 0 {
		if len(yyv1253) != 0 {
			yyv1253 = yyv1253[:0]
			yyc1253 = true
		}
	} else if yyl1253 > 0 {

		if yyl1253 > cap(yyv1253) {
			yyrl1253, yyrt1253 = z.DecInferLen(yyl1253, z.DecBasicHandle().MaxInitLen, 24)
			yyv1253 = make([]IngressRule, yyrl1253)
			yyc1253 = true

			yyrr1253 = len(yyv1253)
		} else if yyl1253 != len(yyv1253) {
			yyv1253 = yyv1253[:yyl1253]
			yyc1253 = true
		}
		yyj1253 := 0
		for ; yyj1253 < yyrr1253; yyj1253++ {
			if r.TryDecodeAsNil() {
				yyv1253[yyj1253] = IngressRule{}
			} else {
				yyv1254 := &yyv1253[yyj1253]
				yyv1254.CodecDecodeSelf(d)
			}

		}
		if yyrt1253 {
			for ; yyj1253 < yyl1253; yyj1253++ {
				yyv1253 = append(yyv1253, IngressRule{})
				if r.TryDecodeAsNil() {
					yyv1253[yyj1253] = IngressRule{}
				} else {
					yyv1255 := &yyv1253[yyj1253]
					yyv1255.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1253 := 0; !r.CheckBreak(); yyj1253++ {
			if yyj1253 >= len(yyv1253) {
				yyv1253 = append(yyv1253, IngressRule{}) // var yyz1253 IngressRule
				yyc1253 = true
			}

			if yyj1253 < len(yyv1253) {
				if r.TryDecodeAsNil() {
					yyv1253[yyj1253] = IngressRule{}
				} else {
					yyv1256 := &yyv1253[yyj1253]
					yyv1256.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1253.End()
	}
	if yyc1253 {
		*v = yyv1253
	}

}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1257 := range v {
		yy1258 := &yyv1257
		yy1258.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1259 := *v
	yyh1259, yyl1259 := z.DecSliceHelperStart()

	var yyrr1259, yyrl1259 int
	var yyc1259, yyrt1259 bool
	_, _, _ = yyc1259, yyrt1259, yyrl1259
	yyrr1259 = yyl1259

	if yyv1259 == nil {
		if yyrl1259, yyrt1259 = z.DecInferLen(yyl1259, z.DecBasicHandle().MaxInitLen, 64); yyrt1259 {
			yyrr1259 = yyrl1259
		}
		yyv1259 = make([]HTTPIngressPath, yyrl1259)
		yyc1259 = true
	}

	if yyl1259 == 0 {
		if len(yyv1259) != 0 {
			yyv1259 = yyv1259[:0]
			yyc1259 = true
		}
	} else if yyl1259 > 0 {

		if yyl1259 > cap(yyv1259) {
			yyrl1259, yyrt1259 = z.DecInferLen(yyl1259, z.DecBasicHandle().MaxInitLen, 64)
			yyv1259 = make([]HTTPIngressPath, yyrl1259)
			yyc1259 = true

			yyrr1259 = len(yyv1259)
		} else if yyl1259 != len(yyv1259) {
			yyv1259 = yyv1259[:yyl1259]
			yyc1259 = true
		}
		yyj1259 := 0
		for ; yyj1259 < yyrr1259; yyj1259++ {
			if r.TryDecodeAsNil() {
				yyv1259[yyj1259] = HTTPIngressPath{}
			} else {
				yyv1260 := &yyv1259[yyj1259]
				yyv1260.CodecDecodeSelf(d)
			}

		}
		if yyrt1259 {
			for ; yyj1259 < yyl1259; yyj1259++ {
				yyv1259 = append(yyv1259, HTTPIngressPath{})
				if r.TryDecodeAsNil() {
					yyv1259[yyj1259] = HTTPIngressPath{}
				} else {
					yyv1261 := &yyv1259[yyj1259]
					yyv1261.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1259 := 0; !r.CheckBreak(); yyj1259++ {
			if yyj1259 >= len(yyv1259) {
				yyv1259 = append(yyv1259, HTTPIngressPath{}) // var yyz1259 HTTPIngressPath
				yyc1259 = true
			}

			if yyj1259 < len(yyv1259) {
				if r.TryDecodeAsNil() {
					yyv1259[yyj1259] = HTTPIngressPath{}
				} else {
					yyv1262 := &yyv1259[yyj1259]
					yyv1262.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1259.End()
	}
	if yyc1259 {
		*v = yyv1259
	}

}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1263 := range v {
		yy1264 := &yyv1263
		yy1264.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1265 := *v
	yyh1265, yyl1265 := z.DecSliceHelperStart()

	var yyrr1265, yyrl1265 int
	var yyc1265, yyrt1265 bool
	_, _, _ = yyc1265, yyrt1265, yyrl1265
	yyrr1265 = yyl1265

	if yyv1265 == nil {
		if yyrl1265, yyrt1265 = z.DecInferLen(yyl1265, z.DecBasicHandle().MaxInitLen, 24); yyrt1265 {
			yyrr1265 = yyrl1265
		}
		yyv1265 = make([]NodeUtilization, yyrl1265)
		yyc1265 = true
	}

	if yyl1265 == 0 {
		if len(yyv1265) != 0 {
			yyv1265 = yyv1265[:0]
			yyc1265 = true
		}
	} else if yyl1265 > 0 {

		if yyl1265 > cap(yyv1265) {
			yyrl1265, yyrt1265 = z.DecInferLen(yyl1265, z.DecBasicHandle().MaxInitLen, 24)
			yyv1265 = make([]NodeUtilization, yyrl1265)
			yyc1265 = true

			yyrr1265 = len(yyv1265)
		} else if yyl1265 != len(yyv1265) {
			yyv1265 = yyv1265[:yyl1265]
			yyc1265 = true
		}
		yyj1265 := 0
		for ; yyj1265 < yyrr1265; yyj1265++ {
			if r.TryDecodeAsNil() {
				yyv1265[yyj1265] = NodeUtilization{}
			} else {
				yyv1266 := &yyv1265[yyj1265]
				yyv1266.CodecDecodeSelf(d)
			}

		}
		if yyrt1265 {
			for ; yyj1265 < yyl1265; yyj1265++ {
				yyv1265 = append(yyv1265, NodeUtilization{})
				if r.TryDecodeAsNil() {
					yyv1265[yyj1265] = NodeUtilization{}
				} else {
					yyv1267 := &yyv1265[yyj1265]
					yyv1267.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1265 := 0; !r.CheckBreak(); yyj1265++ {
			if yyj1265 >= len(yyv1265) {
				yyv1265 = append(yyv1265, NodeUtilization{}) // var yyz1265 NodeUtilization
				yyc1265 = true
			}

			if yyj1265 < len(yyv1265) {
				if r.TryDecodeAsNil() {
					yyv1265[yyj1265] = NodeUtilization{}
				} else {
					yyv1268 := &yyv1265[yyj1265]
					yyv1268.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1265.End()
	}
	if yyc1265 {
		*v = yyv1265
	}

}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1269 := range v {
		yy1270 := &yyv1269
		yy1270.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1271 := *v
	yyh1271, yyl1271 := z.DecSliceHelperStart()

	var yyrr1271, yyrl1271 int
	var yyc1271, yyrt1271 bool
	_, _, _ = yyc1271, yyrt1271, yyrl1271
	yyrr1271 = yyl1271

	if yyv1271 == nil {
		if yyrl1271, yyrt1271 = z.DecInferLen(yyl1271, z.DecBasicHandle().MaxInitLen, 248); yyrt1271 {
			yyrr1271 = yyrl1271
		}
		yyv1271 = make([]ClusterAutoscaler, yyrl1271)
		yyc1271 = true
	}

	if yyl1271 == 0 {
		if len(yyv1271) != 0 {
			yyv1271 = yyv1271[:0]
			yyc1271 = true
		}
	} else if yyl1271 > 0 {

		if yyl1271 > cap(yyv1271) {
			yyrl1271, yyrt1271 = z.DecInferLen(yyl1271, z.DecBasicHandle().MaxInitLen, 248)
			yyv1271 = make([]ClusterAutoscaler, yyrl1271)
			yyc1271 = true

			yyrr1271 = len(yyv1271)
		} else if yyl1271 != len(yyv1271) {
			yyv1271 = yyv1271[:yyl1271]
			yyc1271 = true
		}
		yyj1271 := 0
		for ; yyj1271 < yyrr1271; yyj1271++ {
			if r.TryDecodeAsNil() {
				yyv1271[yyj1271] = ClusterAutoscaler{}
			} else {
				yyv1272 := &yyv1271[yyj1271]
				yyv1272.CodecDecodeSelf(d)
			}

		}
		if yyrt1271 {
			for ; yyj1271 < yyl1271; yyj1271++ {
				yyv1271 = append(yyv1271, ClusterAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1271[yyj1271] = ClusterAutoscaler{}
				} else {
					yyv1273 := &yyv1271[yyj1271]
					yyv1273.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1271 := 0; !r.CheckBreak(); yyj1271++ {
			if yyj1271 >= len(yyv1271) {
				yyv1271 = append(yyv1271, ClusterAutoscaler{}) // var yyz1271 ClusterAutoscaler
				yyc1271 = true
			}

			if yyj1271 < len(yyv1271) {
				if r.TryDecodeAsNil() {
					yyv1271[yyj1271] = ClusterAutoscaler{}
				} else {
					yyv1274 := &yyv1271[yyj1271]
					yyv1274.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1271.End()
	}
	if yyc1271 {
		*v = yyv1271
	}

}

func (x codecSelfer1234) encSlicePodSelectorRequirement(v []PodSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1275 := range v {
		yy1276 := &yyv1275
		yy1276.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodSelectorRequirement(v *[]PodSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1277 := *v
	yyh1277, yyl1277 := z.DecSliceHelperStart()

	var yyrr1277, yyrl1277 int
	var yyc1277, yyrt1277 bool
	_, _, _ = yyc1277, yyrt1277, yyrl1277
	yyrr1277 = yyl1277

	if yyv1277 == nil {
		if yyrl1277, yyrt1277 = z.DecInferLen(yyl1277, z.DecBasicHandle().MaxInitLen, 56); yyrt1277 {
			yyrr1277 = yyrl1277
		}
		yyv1277 = make([]PodSelectorRequirement, yyrl1277)
		yyc1277 = true
	}

	if yyl1277 == 0 {
		if len(yyv1277) != 0 {
			yyv1277 = yyv1277[:0]
			yyc1277 = true
		}
	} else if yyl1277 > 0 {

		if yyl1277 > cap(yyv1277) {
			yyrl1277, yyrt1277 = z.DecInferLen(yyl1277, z.DecBasicHandle().MaxInitLen, 56)
			yyv1277 = make([]PodSelectorRequirement, yyrl1277)
			yyc1277 = true

			yyrr1277 = len(yyv1277)
		} else if yyl1277 != len(yyv1277) {
			yyv1277 = yyv1277[:yyl1277]
			yyc1277 = true
		}
		yyj1277 := 0
		for ; yyj1277 < yyrr1277; yyj1277++ {
			if r.TryDecodeAsNil() {
				yyv1277[yyj1277] = PodSelectorRequirement{}
			} else {
				yyv1278 := &yyv1277[yyj1277]
				yyv1278.CodecDecodeSelf(d)
			}

		}
		if yyrt1277 {
			for ; yyj1277 < yyl1277; yyj1277++ {
				yyv1277 = append(yyv1277, PodSelectorRequirement{})
				if r.TryDecodeAsNil() {
					yyv1277[yyj1277] = PodSelectorRequirement{}
				} else {
					yyv1279 := &yyv1277[yyj1277]
					yyv1279.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1277 := 0; !r.CheckBreak(); yyj1277++ {
			if yyj1277 >= len(yyv1277) {
				yyv1277 = append(yyv1277, PodSelectorRequirement{}) // var yyz1277 PodSelectorRequirement
				yyc1277 = true
			}

			if yyj1277 < len(yyv1277) {
				if r.TryDecodeAsNil() {
					yyv1277[yyj1277] = PodSelectorRequirement{}
				} else {
					yyv1280 := &yyv1277[yyj1277]
					yyv1280.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1277.End()
	}
	if yyc1277 {
		*v = yyv1277
	}

}
