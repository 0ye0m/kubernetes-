/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg6_intstr.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yy39.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy40 := &x.ObjectMeta
					yy40.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy42 := &x.Spec
					yy42.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.Spec
					yy43.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy45 := &x.Status
					yy45.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy46 := &x.Status
					yy46.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym47 := z.DecBinary()
	_ = yym47
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct48 := r.ContainerType()
		if yyct48 == codecSelferValueTypeMap1234 {
			yyl48 := r.ReadMapStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl48, d)
			}
		} else if yyct48 == codecSelferValueTypeArray1234 {
			yyl48 := r.ReadArrayStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl48, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys49Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys49Slc
	var yyhl49 bool = l >= 0
	for yyj49 := 0; ; yyj49++ {
		if yyhl49 {
			if yyj49 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys49Slc = r.DecodeBytes(yys49Slc, true, true)
		yys49 := string(yys49Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys49 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv52 := &x.ObjectMeta
				yyv52.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv53 := &x.Spec
				yyv53.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv54 := &x.Status
				yyv54.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys49)
		} // end switch yys49
	} // end for yyj49
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj55 int
	var yyb55 bool
	var yyhl55 bool = l >= 0
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv58 := &x.ObjectMeta
		yyv58.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv59 := &x.Spec
		yyv59.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv60 := &x.Status
		yyv60.CodecDecodeSelf(d)
	}
	for {
		yyj55++
		if yyhl55 {
			yyb55 = yyj55 > l
		} else {
			yyb55 = r.CheckBreak()
		}
		if yyb55 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj55-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym61 := z.EncBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep62 := !z.EncBinary()
			yy2arr62 := z.EncBasicHandle().StructToArray
			var yyq62 [2]bool
			_, _, _ = yysep62, yyq62, yy2arr62
			const yyr62 bool = false
			yyq62[0] = x.Kind != ""
			yyq62[1] = x.APIVersion != ""
			var yynn62 int
			if yyr62 || yy2arr62 {
				r.EncodeArrayStart(2)
			} else {
				yynn62 = 0
				for _, b := range yyq62 {
					if b {
						yynn62++
					}
				}
				r.EncodeMapStart(yynn62)
				yynn62 = 0
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[0] {
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym65 := z.EncBinary()
					_ = yym65
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[1] {
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym69 := z.DecBinary()
	_ = yym69
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct70 := r.ContainerType()
		if yyct70 == codecSelferValueTypeMap1234 {
			yyl70 := r.ReadMapStart()
			if yyl70 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl70, d)
			}
		} else if yyct70 == codecSelferValueTypeArray1234 {
			yyl70 := r.ReadArrayStart()
			if yyl70 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl70, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys71Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys71Slc
	var yyhl71 bool = l >= 0
	for yyj71 := 0; ; yyj71++ {
		if yyhl71 {
			if yyj71 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys71Slc = r.DecodeBytes(yys71Slc, true, true)
		yys71 := string(yys71Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys71 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys71)
		} // end switch yys71
	} // end for yyj71
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj74 int
	var yyb74 bool
	var yyhl74 bool = l >= 0
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj74++
		if yyhl74 {
			yyb74 = yyj74 > l
		} else {
			yyb74 = r.CheckBreak()
		}
		if yyb74 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj74-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym77 := z.EncBinary()
		_ = yym77
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep78 := !z.EncBinary()
			yy2arr78 := z.EncBasicHandle().StructToArray
			var yyq78 [2]bool
			_, _, _ = yysep78, yyq78, yy2arr78
			const yyr78 bool = false
			var yynn78 int
			if yyr78 || yy2arr78 {
				r.EncodeArrayStart(2)
			} else {
				yynn78 = 2
				for _, b := range yyq78 {
					if b {
						yynn78++
					}
				}
				r.EncodeMapStart(yynn78)
				yynn78 = 0
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym80 := z.EncBinary()
				_ = yym80
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym81 := z.EncBinary()
				_ = yym81
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy83 := &x.TargetValue
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else if z.HasExtensions() && z.EncExt(yy83) {
				} else if !yym84 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy83)
				} else {
					z.EncFallback(yy83)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy85 := &x.TargetValue
				yym86 := z.EncBinary()
				_ = yym86
				if false {
				} else if z.HasExtensions() && z.EncExt(yy85) {
				} else if !yym86 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy85)
				} else {
					z.EncFallback(yy85)
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym87 := z.DecBinary()
	_ = yym87
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct88 := r.ContainerType()
		if yyct88 == codecSelferValueTypeMap1234 {
			yyl88 := r.ReadMapStart()
			if yyl88 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl88, d)
			}
		} else if yyct88 == codecSelferValueTypeArray1234 {
			yyl88 := r.ReadArrayStart()
			if yyl88 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl88, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys89Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys89Slc
	var yyhl89 bool = l >= 0
	for yyj89 := 0; ; yyj89++ {
		if yyhl89 {
			if yyj89 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys89Slc = r.DecodeBytes(yys89Slc, true, true)
		yys89 := string(yys89Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys89 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv91 := &x.TargetValue
				yym92 := z.DecBinary()
				_ = yym92
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv91) {
				} else if !yym92 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv91)
				} else {
					z.DecFallback(yyv91, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys89)
		} // end switch yys89
	} // end for yyj89
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj93 int
	var yyb93 bool
	var yyhl93 bool = l >= 0
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv95 := &x.TargetValue
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv95) {
		} else if !yym96 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv95)
		} else {
			z.DecFallback(yyv95, false)
		}
	}
	for {
		yyj93++
		if yyhl93 {
			yyb93 = yyj93 > l
		} else {
			yyb93 = r.CheckBreak()
		}
		if yyb93 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj93-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym97 := z.EncBinary()
		_ = yym97
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep98 := !z.EncBinary()
			yy2arr98 := z.EncBasicHandle().StructToArray
			var yyq98 [1]bool
			_, _, _ = yysep98, yyq98, yy2arr98
			const yyr98 bool = false
			var yynn98 int
			if yyr98 || yy2arr98 {
				r.EncodeArrayStart(1)
			} else {
				yynn98 = 1
				for _, b := range yyq98 {
					if b {
						yynn98++
					}
				}
				r.EncodeMapStart(yynn98)
				yynn98 = 0
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym100 := z.EncBinary()
					_ = yym100
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym101 := z.EncBinary()
					_ = yym101
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct103 := r.ContainerType()
		if yyct103 == codecSelferValueTypeMap1234 {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if yyct103 == codecSelferValueTypeArray1234 {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys104 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv105 := &x.Items
				yym106 := z.DecBinary()
				_ = yym106
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv105), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj107 int
	var yyb107 bool
	var yyhl107 bool = l >= 0
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv108 := &x.Items
		yym109 := z.DecBinary()
		_ = yym109
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv108), d)
		}
	}
	for {
		yyj107++
		if yyhl107 {
			yyb107 = yyj107 > l
		} else {
			yyb107 = r.CheckBreak()
		}
		if yyb107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym110 := z.EncBinary()
		_ = yym110
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep111 := !z.EncBinary()
			yy2arr111 := z.EncBasicHandle().StructToArray
			var yyq111 [2]bool
			_, _, _ = yysep111, yyq111, yy2arr111
			const yyr111 bool = false
			var yynn111 int
			if yyr111 || yy2arr111 {
				r.EncodeArrayStart(2)
			} else {
				yynn111 = 2
				for _, b := range yyq111 {
					if b {
						yynn111++
					}
				}
				r.EncodeMapStart(yynn111)
				yynn111 = 0
			}
			if yyr111 || yy2arr111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym113 := z.EncBinary()
				_ = yym113
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym114 := z.EncBinary()
				_ = yym114
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr111 || yy2arr111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy116 := &x.CurrentValue
				yym117 := z.EncBinary()
				_ = yym117
				if false {
				} else if z.HasExtensions() && z.EncExt(yy116) {
				} else if !yym117 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy116)
				} else {
					z.EncFallback(yy116)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy118 := &x.CurrentValue
				yym119 := z.EncBinary()
				_ = yym119
				if false {
				} else if z.HasExtensions() && z.EncExt(yy118) {
				} else if !yym119 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy118)
				} else {
					z.EncFallback(yy118)
				}
			}
			if yyr111 || yy2arr111 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym120 := z.DecBinary()
	_ = yym120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct121 := r.ContainerType()
		if yyct121 == codecSelferValueTypeMap1234 {
			yyl121 := r.ReadMapStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl121, d)
			}
		} else if yyct121 == codecSelferValueTypeArray1234 {
			yyl121 := r.ReadArrayStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys122Slc
	var yyhl122 bool = l >= 0
	for yyj122 := 0; ; yyj122++ {
		if yyhl122 {
			if yyj122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys122Slc = r.DecodeBytes(yys122Slc, true, true)
		yys122 := string(yys122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys122 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv124 := &x.CurrentValue
				yym125 := z.DecBinary()
				_ = yym125
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv124) {
				} else if !yym125 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv124)
				} else {
					z.DecFallback(yyv124, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys122)
		} // end switch yys122
	} // end for yyj122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj126 int
	var yyb126 bool
	var yyhl126 bool = l >= 0
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv128 := &x.CurrentValue
		yym129 := z.DecBinary()
		_ = yym129
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv128) {
		} else if !yym129 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv128)
		} else {
			z.DecFallback(yyv128, false)
		}
	}
	for {
		yyj126++
		if yyhl126 {
			yyb126 = yyj126 > l
		} else {
			yyb126 = r.CheckBreak()
		}
		if yyb126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym130 := z.EncBinary()
		_ = yym130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep131 := !z.EncBinary()
			yy2arr131 := z.EncBasicHandle().StructToArray
			var yyq131 [1]bool
			_, _, _ = yysep131, yyq131, yy2arr131
			const yyr131 bool = false
			var yynn131 int
			if yyr131 || yy2arr131 {
				r.EncodeArrayStart(1)
			} else {
				yynn131 = 1
				for _, b := range yyq131 {
					if b {
						yynn131++
					}
				}
				r.EncodeMapStart(yynn131)
				yynn131 = 0
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym133 := z.EncBinary()
					_ = yym133
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym134 := z.EncBinary()
					_ = yym134
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym135 := z.DecBinary()
	_ = yym135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct136 := r.ContainerType()
		if yyct136 == codecSelferValueTypeMap1234 {
			yyl136 := r.ReadMapStart()
			if yyl136 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl136, d)
			}
		} else if yyct136 == codecSelferValueTypeArray1234 {
			yyl136 := r.ReadArrayStart()
			if yyl136 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys137Slc
	var yyhl137 bool = l >= 0
	for yyj137 := 0; ; yyj137++ {
		if yyhl137 {
			if yyj137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys137Slc = r.DecodeBytes(yys137Slc, true, true)
		yys137 := string(yys137Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys137 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv138 := &x.Items
				yym139 := z.DecBinary()
				_ = yym139
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv138), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys137)
		} // end switch yys137
	} // end for yyj137
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj140 int
	var yyb140 bool
	var yyhl140 bool = l >= 0
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv141 := &x.Items
		yym142 := z.DecBinary()
		_ = yym142
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv141), d)
		}
	}
	for {
		yyj140++
		if yyhl140 {
			yyb140 = yyj140 > l
		} else {
			yyb140 = r.CheckBreak()
		}
		if yyb140 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj140-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [5]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.Kind != ""
			yyq144[1] = x.APIVersion != ""
			yyq144[2] = true
			yyq144[3] = x.Description != ""
			yyq144[4] = len(x.Versions) != 0
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(5)
			} else {
				yynn144 = 0
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[1] {
					yym149 := z.EncBinary()
					_ = yym149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym150 := z.EncBinary()
					_ = yym150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[2] {
					yy152 := &x.ObjectMeta
					yy152.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy153 := &x.ObjectMeta
					yy153.CodecEncodeSelf(e)
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[3] {
					yym155 := z.EncBinary()
					_ = yym155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym156 := z.EncBinary()
					_ = yym156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym158 := z.EncBinary()
						_ = yym158
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym159 := z.EncBinary()
						_ = yym159
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym160 := z.DecBinary()
	_ = yym160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct161 := r.ContainerType()
		if yyct161 == codecSelferValueTypeMap1234 {
			yyl161 := r.ReadMapStart()
			if yyl161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl161, d)
			}
		} else if yyct161 == codecSelferValueTypeArray1234 {
			yyl161 := r.ReadArrayStart()
			if yyl161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys162Slc
	var yyhl162 bool = l >= 0
	for yyj162 := 0; ; yyj162++ {
		if yyhl162 {
			if yyj162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys162Slc = r.DecodeBytes(yys162Slc, true, true)
		yys162 := string(yys162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys162 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv165 := &x.ObjectMeta
				yyv165.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv167 := &x.Versions
				yym168 := z.DecBinary()
				_ = yym168
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv167), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys162)
		} // end switch yys162
	} // end for yyj162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj169 int
	var yyb169 bool
	var yyhl169 bool = l >= 0
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv172 := &x.ObjectMeta
		yyv172.CodecDecodeSelf(d)
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv174 := &x.Versions
		yym175 := z.DecBinary()
		_ = yym175
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv174), d)
		}
	}
	for {
		yyj169++
		if yyhl169 {
			yyb169 = yyj169 > l
		} else {
			yyb169 = r.CheckBreak()
		}
		if yyb169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym176 := z.EncBinary()
		_ = yym176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep177 := !z.EncBinary()
			yy2arr177 := z.EncBasicHandle().StructToArray
			var yyq177 [4]bool
			_, _, _ = yysep177, yyq177, yy2arr177
			const yyr177 bool = false
			yyq177[0] = x.Kind != ""
			yyq177[1] = x.APIVersion != ""
			yyq177[2] = true
			var yynn177 int
			if yyr177 || yy2arr177 {
				r.EncodeArrayStart(4)
			} else {
				yynn177 = 1
				for _, b := range yyq177 {
					if b {
						yynn177++
					}
				}
				r.EncodeMapStart(yynn177)
				yynn177 = 0
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[0] {
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq177[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym180 := z.EncBinary()
					_ = yym180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[1] {
					yym182 := z.EncBinary()
					_ = yym182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq177[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym183 := z.EncBinary()
					_ = yym183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[2] {
					yy185 := &x.ListMeta
					yym186 := z.EncBinary()
					_ = yym186
					if false {
					} else if z.HasExtensions() && z.EncExt(yy185) {
					} else {
						z.EncFallback(yy185)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq177[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy187 := &x.ListMeta
					yym188 := z.EncBinary()
					_ = yym188
					if false {
					} else if z.HasExtensions() && z.EncExt(yy187) {
					} else {
						z.EncFallback(yy187)
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym190 := z.EncBinary()
					_ = yym190
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym192 := z.DecBinary()
	_ = yym192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct193 := r.ContainerType()
		if yyct193 == codecSelferValueTypeMap1234 {
			yyl193 := r.ReadMapStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl193, d)
			}
		} else if yyct193 == codecSelferValueTypeArray1234 {
			yyl193 := r.ReadArrayStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys194Slc
	var yyhl194 bool = l >= 0
	for yyj194 := 0; ; yyj194++ {
		if yyhl194 {
			if yyj194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys194Slc = r.DecodeBytes(yys194Slc, true, true)
		yys194 := string(yys194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys194 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv197 := &x.ListMeta
				yym198 := z.DecBinary()
				_ = yym198
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv197) {
				} else {
					z.DecFallback(yyv197, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv199 := &x.Items
				yym200 := z.DecBinary()
				_ = yym200
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv199), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys194)
		} // end switch yys194
	} // end for yyj194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj201 int
	var yyb201 bool
	var yyhl201 bool = l >= 0
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv204 := &x.ListMeta
		yym205 := z.DecBinary()
		_ = yym205
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv204) {
		} else {
			z.DecFallback(yyv204, false)
		}
	}
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv206 := &x.Items
		yym207 := z.DecBinary()
		_ = yym207
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv206), d)
		}
	}
	for {
		yyj201++
		if yyhl201 {
			yyb201 = yyj201 > l
		} else {
			yyb201 = r.CheckBreak()
		}
		if yyb201 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj201-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym208 := z.EncBinary()
		_ = yym208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep209 := !z.EncBinary()
			yy2arr209 := z.EncBasicHandle().StructToArray
			var yyq209 [2]bool
			_, _, _ = yysep209, yyq209, yy2arr209
			const yyr209 bool = false
			yyq209[0] = x.Name != ""
			yyq209[1] = x.APIGroup != ""
			var yynn209 int
			if yyr209 || yy2arr209 {
				r.EncodeArrayStart(2)
			} else {
				yynn209 = 0
				for _, b := range yyq209 {
					if b {
						yynn209++
					}
				}
				r.EncodeMapStart(yynn209)
				yynn209 = 0
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq209[0] {
					yym211 := z.EncBinary()
					_ = yym211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq209[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym212 := z.EncBinary()
					_ = yym212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq209[1] {
					yym214 := z.EncBinary()
					_ = yym214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq209[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym215 := z.EncBinary()
					_ = yym215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym216 := z.DecBinary()
	_ = yym216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct217 := r.ContainerType()
		if yyct217 == codecSelferValueTypeMap1234 {
			yyl217 := r.ReadMapStart()
			if yyl217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl217, d)
			}
		} else if yyct217 == codecSelferValueTypeArray1234 {
			yyl217 := r.ReadArrayStart()
			if yyl217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys218Slc
	var yyhl218 bool = l >= 0
	for yyj218 := 0; ; yyj218++ {
		if yyhl218 {
			if yyj218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys218Slc = r.DecodeBytes(yys218Slc, true, true)
		yys218 := string(yys218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys218 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys218)
		} // end switch yys218
	} // end for yyj218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym224 := z.EncBinary()
		_ = yym224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep225 := !z.EncBinary()
			yy2arr225 := z.EncBasicHandle().StructToArray
			var yyq225 [4]bool
			_, _, _ = yysep225, yyq225, yy2arr225
			const yyr225 bool = false
			yyq225[0] = x.Kind != ""
			yyq225[1] = x.APIVersion != ""
			yyq225[2] = true
			yyq225[3] = len(x.Data) != 0
			var yynn225 int
			if yyr225 || yy2arr225 {
				r.EncodeArrayStart(4)
			} else {
				yynn225 = 0
				for _, b := range yyq225 {
					if b {
						yynn225++
					}
				}
				r.EncodeMapStart(yynn225)
				yynn225 = 0
			}
			if yyr225 || yy2arr225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq225[0] {
					yym227 := z.EncBinary()
					_ = yym227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq225[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym228 := z.EncBinary()
					_ = yym228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr225 || yy2arr225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq225[1] {
					yym230 := z.EncBinary()
					_ = yym230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq225[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym231 := z.EncBinary()
					_ = yym231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr225 || yy2arr225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq225[2] {
					yy233 := &x.ObjectMeta
					yy233.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq225[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy234 := &x.ObjectMeta
					yy234.CodecEncodeSelf(e)
				}
			}
			if yyr225 || yy2arr225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq225[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym236 := z.EncBinary()
						_ = yym236
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq225[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym237 := z.EncBinary()
						_ = yym237
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr225 || yy2arr225 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym238 := z.DecBinary()
	_ = yym238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct239 := r.ContainerType()
		if yyct239 == codecSelferValueTypeMap1234 {
			yyl239 := r.ReadMapStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl239, d)
			}
		} else if yyct239 == codecSelferValueTypeArray1234 {
			yyl239 := r.ReadArrayStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys240Slc
	var yyhl240 bool = l >= 0
	for yyj240 := 0; ; yyj240++ {
		if yyhl240 {
			if yyj240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys240Slc = r.DecodeBytes(yys240Slc, true, true)
		yys240 := string(yys240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys240 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv243 := &x.ObjectMeta
				yyv243.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv244 := &x.Data
				yym245 := z.DecBinary()
				_ = yym245
				if false {
				} else {
					*yyv244 = r.DecodeBytes(*(*[]byte)(yyv244), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys240)
		} // end switch yys240
	} // end for yyj240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv249 := &x.ObjectMeta
		yyv249.CodecDecodeSelf(d)
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv250 := &x.Data
		yym251 := z.DecBinary()
		_ = yym251
		if false {
		} else {
			*yyv250 = r.DecodeBytes(*(*[]byte)(yyv250), false, false)
		}
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym252 := z.EncBinary()
		_ = yym252
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep253 := !z.EncBinary()
			yy2arr253 := z.EncBasicHandle().StructToArray
			var yyq253 [5]bool
			_, _, _ = yysep253, yyq253, yy2arr253
			const yyr253 bool = false
			yyq253[0] = x.Kind != ""
			yyq253[1] = x.APIVersion != ""
			yyq253[2] = true
			yyq253[3] = true
			yyq253[4] = true
			var yynn253 int
			if yyr253 || yy2arr253 {
				r.EncodeArrayStart(5)
			} else {
				yynn253 = 0
				for _, b := range yyq253 {
					if b {
						yynn253++
					}
				}
				r.EncodeMapStart(yynn253)
				yynn253 = 0
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq253[0] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq253[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq253[1] {
					yym258 := z.EncBinary()
					_ = yym258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq253[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym259 := z.EncBinary()
					_ = yym259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq253[2] {
					yy261 := &x.ObjectMeta
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq253[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy262 := &x.ObjectMeta
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq253[3] {
					yy264 := &x.Spec
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq253[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy265 := &x.Spec
					yy265.CodecEncodeSelf(e)
				}
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq253[4] {
					yy267 := &x.Status
					yy267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq253[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy268 := &x.Status
					yy268.CodecEncodeSelf(e)
				}
			}
			if yyr253 || yy2arr253 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym269 := z.DecBinary()
	_ = yym269
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct270 := r.ContainerType()
		if yyct270 == codecSelferValueTypeMap1234 {
			yyl270 := r.ReadMapStart()
			if yyl270 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl270, d)
			}
		} else if yyct270 == codecSelferValueTypeArray1234 {
			yyl270 := r.ReadArrayStart()
			if yyl270 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl270, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys271Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys271Slc
	var yyhl271 bool = l >= 0
	for yyj271 := 0; ; yyj271++ {
		if yyhl271 {
			if yyj271 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys271Slc = r.DecodeBytes(yys271Slc, true, true)
		yys271 := string(yys271Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys271 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv274 := &x.ObjectMeta
				yyv274.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv275 := &x.Spec
				yyv275.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv276 := &x.Status
				yyv276.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys271)
		} // end switch yys271
	} // end for yyj271
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj277 int
	var yyb277 bool
	var yyhl277 bool = l >= 0
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv280 := &x.ObjectMeta
		yyv280.CodecDecodeSelf(d)
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv281 := &x.Spec
		yyv281.CodecDecodeSelf(d)
	}
	yyj277++
	if yyhl277 {
		yyb277 = yyj277 > l
	} else {
		yyb277 = r.CheckBreak()
	}
	if yyb277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv282 := &x.Status
		yyv282.CodecDecodeSelf(d)
	}
	for {
		yyj277++
		if yyhl277 {
			yyb277 = yyj277 > l
		} else {
			yyb277 = r.CheckBreak()
		}
		if yyb277 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj277-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym283 := z.EncBinary()
		_ = yym283
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep284 := !z.EncBinary()
			yy2arr284 := z.EncBasicHandle().StructToArray
			var yyq284 [8]bool
			_, _, _ = yysep284, yyq284, yy2arr284
			const yyr284 bool = false
			yyq284[0] = x.Replicas != 0
			yyq284[1] = len(x.Selector) != 0
			yyq284[3] = true
			yyq284[4] = x.RevisionHistoryLimit != nil
			yyq284[5] = x.UniqueLabelKey != ""
			yyq284[6] = x.Paused != false
			yyq284[7] = x.RollbackTo != nil
			var yynn284 int
			if yyr284 || yy2arr284 {
				r.EncodeArrayStart(8)
			} else {
				yynn284 = 1
				for _, b := range yyq284 {
					if b {
						yynn284++
					}
				}
				r.EncodeMapStart(yynn284)
				yynn284 = 0
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[0] {
					yym286 := z.EncBinary()
					_ = yym286
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq284[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym287 := z.EncBinary()
					_ = yym287
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym289 := z.EncBinary()
						_ = yym289
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym290 := z.EncBinary()
						_ = yym290
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy292 := &x.Template
				yy292.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy293 := &x.Template
				yy293.CodecEncodeSelf(e)
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[3] {
					yy295 := &x.Strategy
					yy295.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy296 := &x.Strategy
					yy296.CodecEncodeSelf(e)
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[4] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy298 := *x.RevisionHistoryLimit
						yym299 := z.EncBinary()
						_ = yym299
						if false {
						} else {
							r.EncodeInt(int64(yy298))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy300 := *x.RevisionHistoryLimit
						yym301 := z.EncBinary()
						_ = yym301
						if false {
						} else {
							r.EncodeInt(int64(yy300))
						}
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[5] {
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq284[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym304 := z.EncBinary()
					_ = yym304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[6] {
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq284[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym307 := z.EncBinary()
					_ = yym307
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq284[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq284[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr284 || yy2arr284 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv313 := &x.Selector
				yym314 := z.DecBinary()
				_ = yym314
				if false {
				} else {
					z.F.DecMapStringStringX(yyv313, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv315 := &x.Template
				yyv315.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv316 := &x.Strategy
				yyv316.CodecDecodeSelf(d)
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int)
				}
				yym318 := z.DecBinary()
				_ = yym318
				if false {
				} else {
					*((*int)(x.RevisionHistoryLimit)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj322 int
	var yyb322 bool
	var yyhl322 bool = l >= 0
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv324 := &x.Selector
		yym325 := z.DecBinary()
		_ = yym325
		if false {
		} else {
			z.F.DecMapStringStringX(yyv324, false, d)
		}
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv326 := &x.Template
		yyv326.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv327 := &x.Strategy
		yyv327.CodecDecodeSelf(d)
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int)
		}
		yym329 := z.DecBinary()
		_ = yym329
		if false {
		} else {
			*((*int)(x.RevisionHistoryLimit)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj322++
		if yyhl322 {
			yyb322 = yyj322 > l
		} else {
			yyb322 = r.CheckBreak()
		}
		if yyb322 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj322-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym333 := z.EncBinary()
		_ = yym333
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep334 := !z.EncBinary()
			yy2arr334 := z.EncBasicHandle().StructToArray
			var yyq334 [5]bool
			_, _, _ = yysep334, yyq334, yy2arr334
			const yyr334 bool = false
			yyq334[0] = x.Kind != ""
			yyq334[1] = x.APIVersion != ""
			yyq334[3] = len(x.UpdatedAnnotations) != 0
			var yynn334 int
			if yyr334 || yy2arr334 {
				r.EncodeArrayStart(5)
			} else {
				yynn334 = 2
				for _, b := range yyq334 {
					if b {
						yynn334++
					}
				}
				r.EncodeMapStart(yynn334)
				yynn334 = 0
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq334[0] {
					yym336 := z.EncBinary()
					_ = yym336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq334[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym337 := z.EncBinary()
					_ = yym337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq334[1] {
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq334[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym340 := z.EncBinary()
					_ = yym340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym342 := z.EncBinary()
				_ = yym342
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym343 := z.EncBinary()
				_ = yym343
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq334[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym345 := z.EncBinary()
						_ = yym345
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq334[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym346 := z.EncBinary()
						_ = yym346
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy348 := &x.RollbackTo
				yy348.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy349 := &x.RollbackTo
				yy349.CodecEncodeSelf(e)
			}
			if yyr334 || yy2arr334 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym350 := z.DecBinary()
	_ = yym350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct351 := r.ContainerType()
		if yyct351 == codecSelferValueTypeMap1234 {
			yyl351 := r.ReadMapStart()
			if yyl351 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl351, d)
			}
		} else if yyct351 == codecSelferValueTypeArray1234 {
			yyl351 := r.ReadArrayStart()
			if yyl351 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl351, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys352Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys352Slc
	var yyhl352 bool = l >= 0
	for yyj352 := 0; ; yyj352++ {
		if yyhl352 {
			if yyj352 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys352Slc = r.DecodeBytes(yys352Slc, true, true)
		yys352 := string(yys352Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys352 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv356 := &x.UpdatedAnnotations
				yym357 := z.DecBinary()
				_ = yym357
				if false {
				} else {
					z.F.DecMapStringStringX(yyv356, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv358 := &x.RollbackTo
				yyv358.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys352)
		} // end switch yys352
	} // end for yyj352
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj359 int
	var yyb359 bool
	var yyhl359 bool = l >= 0
	yyj359++
	if yyhl359 {
		yyb359 = yyj359 > l
	} else {
		yyb359 = r.CheckBreak()
	}
	if yyb359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj359++
	if yyhl359 {
		yyb359 = yyj359 > l
	} else {
		yyb359 = r.CheckBreak()
	}
	if yyb359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj359++
	if yyhl359 {
		yyb359 = yyj359 > l
	} else {
		yyb359 = r.CheckBreak()
	}
	if yyb359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj359++
	if yyhl359 {
		yyb359 = yyj359 > l
	} else {
		yyb359 = r.CheckBreak()
	}
	if yyb359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv363 := &x.UpdatedAnnotations
		yym364 := z.DecBinary()
		_ = yym364
		if false {
		} else {
			z.F.DecMapStringStringX(yyv363, false, d)
		}
	}
	yyj359++
	if yyhl359 {
		yyb359 = yyj359 > l
	} else {
		yyb359 = r.CheckBreak()
	}
	if yyb359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv365 := &x.RollbackTo
		yyv365.CodecDecodeSelf(d)
	}
	for {
		yyj359++
		if yyhl359 {
			yyb359 = yyj359 > l
		} else {
			yyb359 = r.CheckBreak()
		}
		if yyb359 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj359-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym366 := z.EncBinary()
		_ = yym366
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep367 := !z.EncBinary()
			yy2arr367 := z.EncBasicHandle().StructToArray
			var yyq367 [1]bool
			_, _, _ = yysep367, yyq367, yy2arr367
			const yyr367 bool = false
			yyq367[0] = x.Revision != 0
			var yynn367 int
			if yyr367 || yy2arr367 {
				r.EncodeArrayStart(1)
			} else {
				yynn367 = 0
				for _, b := range yyq367 {
					if b {
						yynn367++
					}
				}
				r.EncodeMapStart(yynn367)
				yynn367 = 0
			}
			if yyr367 || yy2arr367 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq367[0] {
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq367[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr367 || yy2arr367 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym371 := z.DecBinary()
	_ = yym371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct372 := r.ContainerType()
		if yyct372 == codecSelferValueTypeMap1234 {
			yyl372 := r.ReadMapStart()
			if yyl372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl372, d)
			}
		} else if yyct372 == codecSelferValueTypeArray1234 {
			yyl372 := r.ReadArrayStart()
			if yyl372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys373Slc
	var yyhl373 bool = l >= 0
	for yyj373 := 0; ; yyj373++ {
		if yyhl373 {
			if yyj373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys373Slc = r.DecodeBytes(yys373Slc, true, true)
		yys373 := string(yys373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys373 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys373)
		} // end switch yys373
	} // end for yyj373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj375 int
	var yyb375 bool
	var yyhl375 bool = l >= 0
	yyj375++
	if yyhl375 {
		yyb375 = yyj375 > l
	} else {
		yyb375 = r.CheckBreak()
	}
	if yyb375 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj375++
		if yyhl375 {
			yyb375 = yyj375 > l
		} else {
			yyb375 = r.CheckBreak()
		}
		if yyb375 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj375-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym377 := z.EncBinary()
		_ = yym377
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep378 := !z.EncBinary()
			yy2arr378 := z.EncBasicHandle().StructToArray
			var yyq378 [2]bool
			_, _, _ = yysep378, yyq378, yy2arr378
			const yyr378 bool = false
			yyq378[0] = x.Type != ""
			yyq378[1] = x.RollingUpdate != nil
			var yynn378 int
			if yyr378 || yy2arr378 {
				r.EncodeArrayStart(2)
			} else {
				yynn378 = 0
				for _, b := range yyq378 {
					if b {
						yynn378++
					}
				}
				r.EncodeMapStart(yynn378)
				yynn378 = 0
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq378[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq378[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq378[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq378[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr378 || yy2arr378 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym381 := z.DecBinary()
	_ = yym381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct382 := r.ContainerType()
		if yyct382 == codecSelferValueTypeMap1234 {
			yyl382 := r.ReadMapStart()
			if yyl382 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl382, d)
			}
		} else if yyct382 == codecSelferValueTypeArray1234 {
			yyl382 := r.ReadArrayStart()
			if yyl382 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys383Slc
	var yyhl383 bool = l >= 0
	for yyj383 := 0; ; yyj383++ {
		if yyhl383 {
			if yyj383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys383Slc = r.DecodeBytes(yys383Slc, true, true)
		yys383 := string(yys383Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys383 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys383)
		} // end switch yys383
	} // end for yyj383
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj386 int
	var yyb386 bool
	var yyhl386 bool = l >= 0
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj386++
	if yyhl386 {
		yyb386 = yyj386 > l
	} else {
		yyb386 = r.CheckBreak()
	}
	if yyb386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj386++
		if yyhl386 {
			yyb386 = yyj386 > l
		} else {
			yyb386 = r.CheckBreak()
		}
		if yyb386 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj386-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym389 := z.EncBinary()
	_ = yym389
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym390 := z.DecBinary()
	_ = yym390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym391 := z.EncBinary()
		_ = yym391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep392 := !z.EncBinary()
			yy2arr392 := z.EncBasicHandle().StructToArray
			var yyq392 [3]bool
			_, _, _ = yysep392, yyq392, yy2arr392
			const yyr392 bool = false
			yyq392[0] = true
			yyq392[1] = true
			yyq392[2] = x.MinReadySeconds != 0
			var yynn392 int
			if yyr392 || yy2arr392 {
				r.EncodeArrayStart(3)
			} else {
				yynn392 = 0
				for _, b := range yyq392 {
					if b {
						yynn392++
					}
				}
				r.EncodeMapStart(yynn392)
				yynn392 = 0
			}
			if yyr392 || yy2arr392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq392[0] {
					yy394 := &x.MaxUnavailable
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else if z.HasExtensions() && z.EncExt(yy394) {
					} else if !yym395 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy394)
					} else {
						z.EncFallback(yy394)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq392[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy396 := &x.MaxUnavailable
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else if z.HasExtensions() && z.EncExt(yy396) {
					} else if !yym397 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy396)
					} else {
						z.EncFallback(yy396)
					}
				}
			}
			if yyr392 || yy2arr392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq392[1] {
					yy399 := &x.MaxSurge
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else if z.HasExtensions() && z.EncExt(yy399) {
					} else if !yym400 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy399)
					} else {
						z.EncFallback(yy399)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq392[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy401 := &x.MaxSurge
					yym402 := z.EncBinary()
					_ = yym402
					if false {
					} else if z.HasExtensions() && z.EncExt(yy401) {
					} else if !yym402 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy401)
					} else {
						z.EncFallback(yy401)
					}
				}
			}
			if yyr392 || yy2arr392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq392[2] {
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq392[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym405 := z.EncBinary()
					_ = yym405
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr392 || yy2arr392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym406 := z.DecBinary()
	_ = yym406
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct407 := r.ContainerType()
		if yyct407 == codecSelferValueTypeMap1234 {
			yyl407 := r.ReadMapStart()
			if yyl407 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl407, d)
			}
		} else if yyct407 == codecSelferValueTypeArray1234 {
			yyl407 := r.ReadArrayStart()
			if yyl407 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl407, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys408Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys408Slc
	var yyhl408 bool = l >= 0
	for yyj408 := 0; ; yyj408++ {
		if yyhl408 {
			if yyj408 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys408Slc = r.DecodeBytes(yys408Slc, true, true)
		yys408 := string(yys408Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys408 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv409 := &x.MaxUnavailable
				yym410 := z.DecBinary()
				_ = yym410
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv409) {
				} else if !yym410 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv409)
				} else {
					z.DecFallback(yyv409, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg6_intstr.IntOrString{}
			} else {
				yyv411 := &x.MaxSurge
				yym412 := z.DecBinary()
				_ = yym412
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv411) {
				} else if !yym412 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv411)
				} else {
					z.DecFallback(yyv411, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys408)
		} // end switch yys408
	} // end for yyj408
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj414 int
	var yyb414 bool
	var yyhl414 bool = l >= 0
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv415 := &x.MaxUnavailable
		yym416 := z.DecBinary()
		_ = yym416
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv415) {
		} else if !yym416 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv415)
		} else {
			z.DecFallback(yyv415, false)
		}
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg6_intstr.IntOrString{}
	} else {
		yyv417 := &x.MaxSurge
		yym418 := z.DecBinary()
		_ = yym418
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv417) {
		} else if !yym418 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv417)
		} else {
			z.DecFallback(yyv417, false)
		}
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj414++
		if yyhl414 {
			yyb414 = yyj414 > l
		} else {
			yyb414 = r.CheckBreak()
		}
		if yyb414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym420 := z.EncBinary()
		_ = yym420
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep421 := !z.EncBinary()
			yy2arr421 := z.EncBasicHandle().StructToArray
			var yyq421 [4]bool
			_, _, _ = yysep421, yyq421, yy2arr421
			const yyr421 bool = false
			yyq421[0] = x.Replicas != 0
			yyq421[1] = x.UpdatedReplicas != 0
			yyq421[2] = x.AvailableReplicas != 0
			yyq421[3] = x.UnavailableReplicas != 0
			var yynn421 int
			if yyr421 || yy2arr421 {
				r.EncodeArrayStart(4)
			} else {
				yynn421 = 0
				for _, b := range yyq421 {
					if b {
						yynn421++
					}
				}
				r.EncodeMapStart(yynn421)
				yynn421 = 0
			}
			if yyr421 || yy2arr421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq421[0] {
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq421[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr421 || yy2arr421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq421[1] {
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq421[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr421 || yy2arr421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq421[2] {
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq421[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr421 || yy2arr421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq421[3] {
					yym432 := z.EncBinary()
					_ = yym432
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq421[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr421 || yy2arr421 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym434 := z.DecBinary()
	_ = yym434
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct435 := r.ContainerType()
		if yyct435 == codecSelferValueTypeMap1234 {
			yyl435 := r.ReadMapStart()
			if yyl435 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl435, d)
			}
		} else if yyct435 == codecSelferValueTypeArray1234 {
			yyl435 := r.ReadArrayStart()
			if yyl435 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl435, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys436Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys436Slc
	var yyhl436 bool = l >= 0
	for yyj436 := 0; ; yyj436++ {
		if yyhl436 {
			if yyj436 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys436Slc = r.DecodeBytes(yys436Slc, true, true)
		yys436 := string(yys436Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys436 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys436)
		} // end switch yys436
	} // end for yyj436
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj441 int
	var yyb441 bool
	var yyhl441 bool = l >= 0
	yyj441++
	if yyhl441 {
		yyb441 = yyj441 > l
	} else {
		yyb441 = r.CheckBreak()
	}
	if yyb441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj441++
	if yyhl441 {
		yyb441 = yyj441 > l
	} else {
		yyb441 = r.CheckBreak()
	}
	if yyb441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj441++
	if yyhl441 {
		yyb441 = yyj441 > l
	} else {
		yyb441 = r.CheckBreak()
	}
	if yyb441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj441++
	if yyhl441 {
		yyb441 = yyj441 > l
	} else {
		yyb441 = r.CheckBreak()
	}
	if yyb441 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj441++
		if yyhl441 {
			yyb441 = yyj441 > l
		} else {
			yyb441 = r.CheckBreak()
		}
		if yyb441 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj441-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym446 := z.EncBinary()
		_ = yym446
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep447 := !z.EncBinary()
			yy2arr447 := z.EncBasicHandle().StructToArray
			var yyq447 [4]bool
			_, _, _ = yysep447, yyq447, yy2arr447
			const yyr447 bool = false
			yyq447[0] = x.Kind != ""
			yyq447[1] = x.APIVersion != ""
			yyq447[2] = true
			var yynn447 int
			if yyr447 || yy2arr447 {
				r.EncodeArrayStart(4)
			} else {
				yynn447 = 1
				for _, b := range yyq447 {
					if b {
						yynn447++
					}
				}
				r.EncodeMapStart(yynn447)
				yynn447 = 0
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[0] {
					yym449 := z.EncBinary()
					_ = yym449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[1] {
					yym452 := z.EncBinary()
					_ = yym452
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq447[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq447[2] {
					yy455 := &x.ListMeta
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else if z.HasExtensions() && z.EncExt(yy455) {
					} else {
						z.EncFallback(yy455)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq447[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy457 := &x.ListMeta
					yym458 := z.EncBinary()
					_ = yym458
					if false {
					} else if z.HasExtensions() && z.EncExt(yy457) {
					} else {
						z.EncFallback(yy457)
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr447 || yy2arr447 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct463 := r.ContainerType()
		if yyct463 == codecSelferValueTypeMap1234 {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if yyct463 == codecSelferValueTypeArray1234 {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys464 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv467 := &x.ListMeta
				yym468 := z.DecBinary()
				_ = yym468
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv467) {
				} else {
					z.DecFallback(yyv467, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv469 := &x.Items
				yym470 := z.DecBinary()
				_ = yym470
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv469), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj471 int
	var yyb471 bool
	var yyhl471 bool = l >= 0
	yyj471++
	if yyhl471 {
		yyb471 = yyj471 > l
	} else {
		yyb471 = r.CheckBreak()
	}
	if yyb471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj471++
	if yyhl471 {
		yyb471 = yyj471 > l
	} else {
		yyb471 = r.CheckBreak()
	}
	if yyb471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj471++
	if yyhl471 {
		yyb471 = yyj471 > l
	} else {
		yyb471 = r.CheckBreak()
	}
	if yyb471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv474 := &x.ListMeta
		yym475 := z.DecBinary()
		_ = yym475
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv474) {
		} else {
			z.DecFallback(yyv474, false)
		}
	}
	yyj471++
	if yyhl471 {
		yyb471 = yyj471 > l
	} else {
		yyb471 = r.CheckBreak()
	}
	if yyb471 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv476 := &x.Items
		yym477 := z.DecBinary()
		_ = yym477
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv476), d)
		}
	}
	for {
		yyj471++
		if yyhl471 {
			yyb471 = yyj471 > l
		} else {
			yyb471 = r.CheckBreak()
		}
		if yyb471 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj471-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetUpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym478 := z.EncBinary()
		_ = yym478
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep479 := !z.EncBinary()
			yy2arr479 := z.EncBasicHandle().StructToArray
			var yyq479 [2]bool
			_, _, _ = yysep479, yyq479, yy2arr479
			const yyr479 bool = false
			yyq479[0] = x.Type != ""
			yyq479[1] = x.RollingUpdate != nil
			var yynn479 int
			if yyr479 || yy2arr479 {
				r.EncodeArrayStart(2)
			} else {
				yynn479 = 0
				for _, b := range yyq479 {
					if b {
						yynn479++
					}
				}
				r.EncodeMapStart(yynn479)
				yynn479 = 0
			}
			if yyr479 || yy2arr479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq479[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq479[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr479 || yy2arr479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq479[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq479[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr479 || yy2arr479 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetUpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym482 := z.DecBinary()
	_ = yym482
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct483 := r.ContainerType()
		if yyct483 == codecSelferValueTypeMap1234 {
			yyl483 := r.ReadMapStart()
			if yyl483 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl483, d)
			}
		} else if yyct483 == codecSelferValueTypeArray1234 {
			yyl483 := r.ReadArrayStart()
			if yyl483 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl483, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys484Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys484Slc
	var yyhl484 bool = l >= 0
	for yyj484 := 0; ; yyj484++ {
		if yyhl484 {
			if yyj484 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys484Slc = r.DecodeBytes(yys484Slc, true, true)
		yys484 := string(yys484Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys484 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDaemonSet)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys484)
		} // end switch yys484
	} // end for yyj484
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj487 int
	var yyb487 bool
	var yyhl487 bool = l >= 0
	yyj487++
	if yyhl487 {
		yyb487 = yyj487 > l
	} else {
		yyb487 = r.CheckBreak()
	}
	if yyb487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
	}
	yyj487++
	if yyhl487 {
		yyb487 = yyj487 > l
	} else {
		yyb487 = r.CheckBreak()
	}
	if yyb487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDaemonSet)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj487++
		if yyhl487 {
			yyb487 = yyj487 > l
		} else {
			yyb487 = r.CheckBreak()
		}
		if yyb487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DaemonSetUpdateStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym490 := z.EncBinary()
	_ = yym490
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DaemonSetUpdateStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym491 := z.DecBinary()
	_ = yym491
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym492 := z.EncBinary()
		_ = yym492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep493 := !z.EncBinary()
			yy2arr493 := z.EncBasicHandle().StructToArray
			var yyq493 [2]bool
			_, _, _ = yysep493, yyq493, yy2arr493
			const yyr493 bool = false
			yyq493[0] = true
			yyq493[1] = x.MinReadySeconds != 0
			var yynn493 int
			if yyr493 || yy2arr493 {
				r.EncodeArrayStart(2)
			} else {
				yynn493 = 0
				for _, b := range yyq493 {
					if b {
						yynn493++
					}
				}
				r.EncodeMapStart(yynn493)
				yynn493 = 0
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[0] {
					yy495 := &x.MaxUnavailable
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else if z.HasExtensions() && z.EncExt(yy495) {
					} else if !yym496 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy495)
					} else {
						z.EncFallback(yy495)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq493[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy497 := &x.MaxUnavailable
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else if z.HasExtensions() && z.EncExt(yy497) {
					} else if !yym498 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy497)
					} else {
						z.EncFallback(yy497)
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[1] {
					yym500 := z.EncBinary()
					_ = yym500
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq493[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym502 := z.DecBinary()
	_ = yym502
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct503 := r.ContainerType()
		if yyct503 == codecSelferValueTypeMap1234 {
			yyl503 := r.ReadMapStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl503, d)
			}
		} else if yyct503 == codecSelferValueTypeArray1234 {
			yyl503 := r.ReadArrayStart()
			if yyl503 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl503, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys504Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys504Slc
	var yyhl504 bool = l >= 0
	for yyj504 := 0; ; yyj504++ {
		if yyhl504 {
			if yyj504 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys504Slc = r.DecodeBytes(yys504Slc, true, true)
		yys504 := string(yys504Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys504 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv505 := &x.MaxUnavailable
				yym506 := z.DecBinary()
				_ = yym506
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv505) {
				} else if !yym506 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv505)
				} else {
					z.DecFallback(yyv505, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys504)
		} // end switch yys504
	} // end for yyj504
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv509 := &x.MaxUnavailable
		yym510 := z.DecBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv509) {
		} else if !yym510 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv509)
		} else {
			z.DecFallback(yyv509, false)
		}
	}
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym512 := z.EncBinary()
		_ = yym512
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep513 := !z.EncBinary()
			yy2arr513 := z.EncBasicHandle().StructToArray
			var yyq513 [4]bool
			_, _, _ = yysep513, yyq513, yy2arr513
			const yyr513 bool = false
			yyq513[0] = x.Selector != nil
			yyq513[2] = true
			yyq513[3] = x.UniqueLabelKey != ""
			var yynn513 int
			if yyr513 || yy2arr513 {
				r.EncodeArrayStart(4)
			} else {
				yynn513 = 1
				for _, b := range yyq513 {
					if b {
						yynn513++
					}
				}
				r.EncodeMapStart(yynn513)
				yynn513 = 0
			}
			if yyr513 || yy2arr513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq513[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq513[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr513 || yy2arr513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy516 := &x.Template
				yy516.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy517 := &x.Template
				yy517.CodecEncodeSelf(e)
			}
			if yyr513 || yy2arr513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq513[2] {
					yy519 := &x.UpdateStrategy
					yy519.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq513[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updateStrategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy520 := &x.UpdateStrategy
					yy520.CodecEncodeSelf(e)
				}
			}
			if yyr513 || yy2arr513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq513[3] {
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq513[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr513 || yy2arr513 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym524 := z.DecBinary()
	_ = yym524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct525 := r.ContainerType()
		if yyct525 == codecSelferValueTypeMap1234 {
			yyl525 := r.ReadMapStart()
			if yyl525 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl525, d)
			}
		} else if yyct525 == codecSelferValueTypeArray1234 {
			yyl525 := r.ReadArrayStart()
			if yyl525 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl525, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys526Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys526Slc
	var yyhl526 bool = l >= 0
	for yyj526 := 0; ; yyj526++ {
		if yyhl526 {
			if yyj526 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys526Slc = r.DecodeBytes(yys526Slc, true, true)
		yys526 := string(yys526Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys526 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv528 := &x.Template
				yyv528.CodecDecodeSelf(d)
			}
		case "updateStrategy":
			if r.TryDecodeAsNil() {
				x.UpdateStrategy = DaemonSetUpdateStrategy{}
			} else {
				yyv529 := &x.UpdateStrategy
				yyv529.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys526)
		} // end switch yys526
	} // end for yyj526
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj531 int
	var yyb531 bool
	var yyhl531 bool = l >= 0
	yyj531++
	if yyhl531 {
		yyb531 = yyj531 > l
	} else {
		yyb531 = r.CheckBreak()
	}
	if yyb531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj531++
	if yyhl531 {
		yyb531 = yyj531 > l
	} else {
		yyb531 = r.CheckBreak()
	}
	if yyb531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv533 := &x.Template
		yyv533.CodecDecodeSelf(d)
	}
	yyj531++
	if yyhl531 {
		yyb531 = yyj531 > l
	} else {
		yyb531 = r.CheckBreak()
	}
	if yyb531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdateStrategy = DaemonSetUpdateStrategy{}
	} else {
		yyv534 := &x.UpdateStrategy
		yyv534.CodecDecodeSelf(d)
	}
	yyj531++
	if yyhl531 {
		yyb531 = yyj531 > l
	} else {
		yyb531 = r.CheckBreak()
	}
	if yyb531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj531++
		if yyhl531 {
			yyb531 = yyj531 > l
		} else {
			yyb531 = r.CheckBreak()
		}
		if yyb531 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj531-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym536 := z.EncBinary()
		_ = yym536
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep537 := !z.EncBinary()
			yy2arr537 := z.EncBasicHandle().StructToArray
			var yyq537 [3]bool
			_, _, _ = yysep537, yyq537, yy2arr537
			const yyr537 bool = false
			var yynn537 int
			if yyr537 || yy2arr537 {
				r.EncodeArrayStart(3)
			} else {
				yynn537 = 3
				for _, b := range yyq537 {
					if b {
						yynn537++
					}
				}
				r.EncodeMapStart(yynn537)
				yynn537 = 0
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym539 := z.EncBinary()
				_ = yym539
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym540 := z.EncBinary()
				_ = yym540
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym542 := z.EncBinary()
				_ = yym542
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym543 := z.EncBinary()
				_ = yym543
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym545 := z.EncBinary()
				_ = yym545
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym546 := z.EncBinary()
				_ = yym546
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr537 || yy2arr537 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym547 := z.DecBinary()
	_ = yym547
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct548 := r.ContainerType()
		if yyct548 == codecSelferValueTypeMap1234 {
			yyl548 := r.ReadMapStart()
			if yyl548 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl548, d)
			}
		} else if yyct548 == codecSelferValueTypeArray1234 {
			yyl548 := r.ReadArrayStart()
			if yyl548 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl548, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys549Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys549Slc
	var yyhl549 bool = l >= 0
	for yyj549 := 0; ; yyj549++ {
		if yyhl549 {
			if yyj549 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys549Slc = r.DecodeBytes(yys549Slc, true, true)
		yys549 := string(yys549Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys549 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys549)
		} // end switch yys549
	} // end for yyj549
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj553 int
	var yyb553 bool
	var yyhl553 bool = l >= 0
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj553++
		if yyhl553 {
			yyb553 = yyj553 > l
		} else {
			yyb553 = r.CheckBreak()
		}
		if yyb553 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj553-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym557 := z.EncBinary()
		_ = yym557
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep558 := !z.EncBinary()
			yy2arr558 := z.EncBasicHandle().StructToArray
			var yyq558 [5]bool
			_, _, _ = yysep558, yyq558, yy2arr558
			const yyr558 bool = false
			yyq558[0] = x.Kind != ""
			yyq558[1] = x.APIVersion != ""
			yyq558[2] = true
			yyq558[3] = true
			yyq558[4] = true
			var yynn558 int
			if yyr558 || yy2arr558 {
				r.EncodeArrayStart(5)
			} else {
				yynn558 = 0
				for _, b := range yyq558 {
					if b {
						yynn558++
					}
				}
				r.EncodeMapStart(yynn558)
				yynn558 = 0
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[0] {
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq558[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[1] {
					yym563 := z.EncBinary()
					_ = yym563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq558[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[2] {
					yy566 := &x.ObjectMeta
					yy566.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq558[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy567 := &x.ObjectMeta
					yy567.CodecEncodeSelf(e)
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[3] {
					yy569 := &x.Spec
					yy569.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq558[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy570 := &x.Spec
					yy570.CodecEncodeSelf(e)
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[4] {
					yy572 := &x.Status
					yy572.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq558[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy573 := &x.Status
					yy573.CodecEncodeSelf(e)
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym574 := z.DecBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct575 := r.ContainerType()
		if yyct575 == codecSelferValueTypeMap1234 {
			yyl575 := r.ReadMapStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl575, d)
			}
		} else if yyct575 == codecSelferValueTypeArray1234 {
			yyl575 := r.ReadArrayStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys576Slc
	var yyhl576 bool = l >= 0
	for yyj576 := 0; ; yyj576++ {
		if yyhl576 {
			if yyj576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys576Slc = r.DecodeBytes(yys576Slc, true, true)
		yys576 := string(yys576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys576 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv579 := &x.ObjectMeta
				yyv579.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv580 := &x.Spec
				yyv580.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv581 := &x.Status
				yyv581.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys576)
		} // end switch yys576
	} // end for yyj576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj582 int
	var yyb582 bool
	var yyhl582 bool = l >= 0
	yyj582++
	if yyhl582 {
		yyb582 = yyj582 > l
	} else {
		yyb582 = r.CheckBreak()
	}
	if yyb582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj582++
	if yyhl582 {
		yyb582 = yyj582 > l
	} else {
		yyb582 = r.CheckBreak()
	}
	if yyb582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj582++
	if yyhl582 {
		yyb582 = yyj582 > l
	} else {
		yyb582 = r.CheckBreak()
	}
	if yyb582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv585 := &x.ObjectMeta
		yyv585.CodecDecodeSelf(d)
	}
	yyj582++
	if yyhl582 {
		yyb582 = yyj582 > l
	} else {
		yyb582 = r.CheckBreak()
	}
	if yyb582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv586 := &x.Spec
		yyv586.CodecDecodeSelf(d)
	}
	yyj582++
	if yyhl582 {
		yyb582 = yyj582 > l
	} else {
		yyb582 = r.CheckBreak()
	}
	if yyb582 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv587 := &x.Status
		yyv587.CodecDecodeSelf(d)
	}
	for {
		yyj582++
		if yyhl582 {
			yyb582 = yyj582 > l
		} else {
			yyb582 = r.CheckBreak()
		}
		if yyb582 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj582-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym588 := z.EncBinary()
		_ = yym588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep589 := !z.EncBinary()
			yy2arr589 := z.EncBasicHandle().StructToArray
			var yyq589 [4]bool
			_, _, _ = yysep589, yyq589, yy2arr589
			const yyr589 bool = false
			yyq589[0] = x.Kind != ""
			yyq589[1] = x.APIVersion != ""
			yyq589[2] = true
			var yynn589 int
			if yyr589 || yy2arr589 {
				r.EncodeArrayStart(4)
			} else {
				yynn589 = 1
				for _, b := range yyq589 {
					if b {
						yynn589++
					}
				}
				r.EncodeMapStart(yynn589)
				yynn589 = 0
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq589[0] {
					yym591 := z.EncBinary()
					_ = yym591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq589[1] {
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq589[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym595 := z.EncBinary()
					_ = yym595
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq589[2] {
					yy597 := &x.ListMeta
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else if z.HasExtensions() && z.EncExt(yy597) {
					} else {
						z.EncFallback(yy597)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq589[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy599 := &x.ListMeta
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else if z.HasExtensions() && z.EncExt(yy599) {
					} else {
						z.EncFallback(yy599)
					}
				}
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym602 := z.EncBinary()
					_ = yym602
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym603 := z.EncBinary()
					_ = yym603
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr589 || yy2arr589 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym604 := z.DecBinary()
	_ = yym604
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct605 := r.ContainerType()
		if yyct605 == codecSelferValueTypeMap1234 {
			yyl605 := r.ReadMapStart()
			if yyl605 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl605, d)
			}
		} else if yyct605 == codecSelferValueTypeArray1234 {
			yyl605 := r.ReadArrayStart()
			if yyl605 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl605, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys606Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys606Slc
	var yyhl606 bool = l >= 0
	for yyj606 := 0; ; yyj606++ {
		if yyhl606 {
			if yyj606 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys606Slc = r.DecodeBytes(yys606Slc, true, true)
		yys606 := string(yys606Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys606 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv609 := &x.ListMeta
				yym610 := z.DecBinary()
				_ = yym610
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv609) {
				} else {
					z.DecFallback(yyv609, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv611 := &x.Items
				yym612 := z.DecBinary()
				_ = yym612
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv611), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys606)
		} // end switch yys606
	} // end for yyj606
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj613 int
	var yyb613 bool
	var yyhl613 bool = l >= 0
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv616 := &x.ListMeta
		yym617 := z.DecBinary()
		_ = yym617
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv616) {
		} else {
			z.DecFallback(yyv616, false)
		}
	}
	yyj613++
	if yyhl613 {
		yyb613 = yyj613 > l
	} else {
		yyb613 = r.CheckBreak()
	}
	if yyb613 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv618 := &x.Items
		yym619 := z.DecBinary()
		_ = yym619
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv618), d)
		}
	}
	for {
		yyj613++
		if yyhl613 {
			yyb613 = yyj613 > l
		} else {
			yyb613 = r.CheckBreak()
		}
		if yyb613 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj613-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym620 := z.EncBinary()
		_ = yym620
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep621 := !z.EncBinary()
			yy2arr621 := z.EncBasicHandle().StructToArray
			var yyq621 [4]bool
			_, _, _ = yysep621, yyq621, yy2arr621
			const yyr621 bool = false
			yyq621[0] = x.Kind != ""
			yyq621[1] = x.APIVersion != ""
			yyq621[2] = true
			var yynn621 int
			if yyr621 || yy2arr621 {
				r.EncodeArrayStart(4)
			} else {
				yynn621 = 1
				for _, b := range yyq621 {
					if b {
						yynn621++
					}
				}
				r.EncodeMapStart(yynn621)
				yynn621 = 0
			}
			if yyr621 || yy2arr621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq621[0] {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq621[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr621 || yy2arr621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq621[1] {
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq621[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr621 || yy2arr621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq621[2] {
					yy629 := &x.ListMeta
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else if z.HasExtensions() && z.EncExt(yy629) {
					} else {
						z.EncFallback(yy629)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq621[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy631 := &x.ListMeta
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else if z.HasExtensions() && z.EncExt(yy631) {
					} else {
						z.EncFallback(yy631)
					}
				}
			}
			if yyr621 || yy2arr621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr621 || yy2arr621 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym636 := z.DecBinary()
	_ = yym636
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct637 := r.ContainerType()
		if yyct637 == codecSelferValueTypeMap1234 {
			yyl637 := r.ReadMapStart()
			if yyl637 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl637, d)
			}
		} else if yyct637 == codecSelferValueTypeArray1234 {
			yyl637 := r.ReadArrayStart()
			if yyl637 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl637, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys638Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys638Slc
	var yyhl638 bool = l >= 0
	for yyj638 := 0; ; yyj638++ {
		if yyhl638 {
			if yyj638 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys638Slc = r.DecodeBytes(yys638Slc, true, true)
		yys638 := string(yys638Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys638 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv641 := &x.ListMeta
				yym642 := z.DecBinary()
				_ = yym642
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv641) {
				} else {
					z.DecFallback(yyv641, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv643 := &x.Items
				yym644 := z.DecBinary()
				_ = yym644
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv643), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys638)
		} // end switch yys638
	} // end for yyj638
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj645 int
	var yyb645 bool
	var yyhl645 bool = l >= 0
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv648 := &x.ListMeta
		yym649 := z.DecBinary()
		_ = yym649
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv648) {
		} else {
			z.DecFallback(yyv648, false)
		}
	}
	yyj645++
	if yyhl645 {
		yyb645 = yyj645 > l
	} else {
		yyb645 = r.CheckBreak()
	}
	if yyb645 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv650 := &x.Items
		yym651 := z.DecBinary()
		_ = yym651
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv650), d)
		}
	}
	for {
		yyj645++
		if yyhl645 {
			yyb645 = yyj645 > l
		} else {
			yyb645 = r.CheckBreak()
		}
		if yyb645 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj645-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym652 := z.EncBinary()
		_ = yym652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep653 := !z.EncBinary()
			yy2arr653 := z.EncBasicHandle().StructToArray
			var yyq653 [5]bool
			_, _, _ = yysep653, yyq653, yy2arr653
			const yyr653 bool = false
			yyq653[0] = x.Kind != ""
			yyq653[1] = x.APIVersion != ""
			yyq653[2] = true
			yyq653[3] = true
			yyq653[4] = true
			var yynn653 int
			if yyr653 || yy2arr653 {
				r.EncodeArrayStart(5)
			} else {
				yynn653 = 0
				for _, b := range yyq653 {
					if b {
						yynn653++
					}
				}
				r.EncodeMapStart(yynn653)
				yynn653 = 0
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq653[0] {
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq653[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym656 := z.EncBinary()
					_ = yym656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq653[1] {
					yym658 := z.EncBinary()
					_ = yym658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq653[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq653[2] {
					yy661 := &x.ObjectMeta
					yy661.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq653[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy662 := &x.ObjectMeta
					yy662.CodecEncodeSelf(e)
				}
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq653[3] {
					yy664 := &x.Spec
					yy664.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq653[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy665 := &x.Spec
					yy665.CodecEncodeSelf(e)
				}
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq653[4] {
					yy667 := &x.Status
					yy667.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq653[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy668 := &x.Status
					yy668.CodecEncodeSelf(e)
				}
			}
			if yyr653 || yy2arr653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym669 := z.DecBinary()
	_ = yym669
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct670 := r.ContainerType()
		if yyct670 == codecSelferValueTypeMap1234 {
			yyl670 := r.ReadMapStart()
			if yyl670 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl670, d)
			}
		} else if yyct670 == codecSelferValueTypeArray1234 {
			yyl670 := r.ReadArrayStart()
			if yyl670 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl670, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys671Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys671Slc
	var yyhl671 bool = l >= 0
	for yyj671 := 0; ; yyj671++ {
		if yyhl671 {
			if yyj671 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys671Slc = r.DecodeBytes(yys671Slc, true, true)
		yys671 := string(yys671Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys671 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv674 := &x.ObjectMeta
				yyv674.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv675 := &x.Spec
				yyv675.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv676 := &x.Status
				yyv676.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys671)
		} // end switch yys671
	} // end for yyj671
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj677 int
	var yyb677 bool
	var yyhl677 bool = l >= 0
	yyj677++
	if yyhl677 {
		yyb677 = yyj677 > l
	} else {
		yyb677 = r.CheckBreak()
	}
	if yyb677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj677++
	if yyhl677 {
		yyb677 = yyj677 > l
	} else {
		yyb677 = r.CheckBreak()
	}
	if yyb677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj677++
	if yyhl677 {
		yyb677 = yyj677 > l
	} else {
		yyb677 = r.CheckBreak()
	}
	if yyb677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv680 := &x.ObjectMeta
		yyv680.CodecDecodeSelf(d)
	}
	yyj677++
	if yyhl677 {
		yyb677 = yyj677 > l
	} else {
		yyb677 = r.CheckBreak()
	}
	if yyb677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv681 := &x.Spec
		yyv681.CodecDecodeSelf(d)
	}
	yyj677++
	if yyhl677 {
		yyb677 = yyj677 > l
	} else {
		yyb677 = r.CheckBreak()
	}
	if yyb677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv682 := &x.Status
		yyv682.CodecDecodeSelf(d)
	}
	for {
		yyj677++
		if yyhl677 {
			yyb677 = yyj677 > l
		} else {
			yyb677 = r.CheckBreak()
		}
		if yyb677 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj677-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym683 := z.EncBinary()
		_ = yym683
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep684 := !z.EncBinary()
			yy2arr684 := z.EncBasicHandle().StructToArray
			var yyq684 [4]bool
			_, _, _ = yysep684, yyq684, yy2arr684
			const yyr684 bool = false
			yyq684[0] = x.Kind != ""
			yyq684[1] = x.APIVersion != ""
			yyq684[2] = true
			var yynn684 int
			if yyr684 || yy2arr684 {
				r.EncodeArrayStart(4)
			} else {
				yynn684 = 1
				for _, b := range yyq684 {
					if b {
						yynn684++
					}
				}
				r.EncodeMapStart(yynn684)
				yynn684 = 0
			}
			if yyr684 || yy2arr684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq684[0] {
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq684[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr684 || yy2arr684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq684[1] {
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq684[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym690 := z.EncBinary()
					_ = yym690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr684 || yy2arr684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq684[2] {
					yy692 := &x.ListMeta
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else if z.HasExtensions() && z.EncExt(yy692) {
					} else {
						z.EncFallback(yy692)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq684[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy694 := &x.ListMeta
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else if z.HasExtensions() && z.EncExt(yy694) {
					} else {
						z.EncFallback(yy694)
					}
				}
			}
			if yyr684 || yy2arr684 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr684 || yy2arr684 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym699 := z.DecBinary()
	_ = yym699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct700 := r.ContainerType()
		if yyct700 == codecSelferValueTypeMap1234 {
			yyl700 := r.ReadMapStart()
			if yyl700 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl700, d)
			}
		} else if yyct700 == codecSelferValueTypeArray1234 {
			yyl700 := r.ReadArrayStart()
			if yyl700 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys701Slc
	var yyhl701 bool = l >= 0
	for yyj701 := 0; ; yyj701++ {
		if yyhl701 {
			if yyj701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys701Slc = r.DecodeBytes(yys701Slc, true, true)
		yys701 := string(yys701Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys701 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv704 := &x.ListMeta
				yym705 := z.DecBinary()
				_ = yym705
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv704) {
				} else {
					z.DecFallback(yyv704, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv706 := &x.Items
				yym707 := z.DecBinary()
				_ = yym707
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv706), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys701)
		} // end switch yys701
	} // end for yyj701
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj708 int
	var yyb708 bool
	var yyhl708 bool = l >= 0
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv711 := &x.ListMeta
		yym712 := z.DecBinary()
		_ = yym712
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv711) {
		} else {
			z.DecFallback(yyv711, false)
		}
	}
	yyj708++
	if yyhl708 {
		yyb708 = yyj708 > l
	} else {
		yyb708 = r.CheckBreak()
	}
	if yyb708 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv713 := &x.Items
		yym714 := z.DecBinary()
		_ = yym714
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv713), d)
		}
	}
	for {
		yyj708++
		if yyhl708 {
			yyb708 = yyj708 > l
		} else {
			yyb708 = r.CheckBreak()
		}
		if yyb708 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj708-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym715 := z.EncBinary()
		_ = yym715
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep716 := !z.EncBinary()
			yy2arr716 := z.EncBasicHandle().StructToArray
			var yyq716 [5]bool
			_, _, _ = yysep716, yyq716, yy2arr716
			const yyr716 bool = false
			yyq716[0] = x.Parallelism != nil
			yyq716[1] = x.Completions != nil
			yyq716[2] = x.ActiveDeadlineSeconds != nil
			yyq716[3] = x.Selector != nil
			var yynn716 int
			if yyr716 || yy2arr716 {
				r.EncodeArrayStart(5)
			} else {
				yynn716 = 1
				for _, b := range yyq716 {
					if b {
						yynn716++
					}
				}
				r.EncodeMapStart(yynn716)
				yynn716 = 0
			}
			if yyr716 || yy2arr716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq716[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy718 := *x.Parallelism
						yym719 := z.EncBinary()
						_ = yym719
						if false {
						} else {
							r.EncodeInt(int64(yy718))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq716[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy720 := *x.Parallelism
						yym721 := z.EncBinary()
						_ = yym721
						if false {
						} else {
							r.EncodeInt(int64(yy720))
						}
					}
				}
			}
			if yyr716 || yy2arr716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq716[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy723 := *x.Completions
						yym724 := z.EncBinary()
						_ = yym724
						if false {
						} else {
							r.EncodeInt(int64(yy723))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq716[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy725 := *x.Completions
						yym726 := z.EncBinary()
						_ = yym726
						if false {
						} else {
							r.EncodeInt(int64(yy725))
						}
					}
				}
			}
			if yyr716 || yy2arr716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq716[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy728 := *x.ActiveDeadlineSeconds
						yym729 := z.EncBinary()
						_ = yym729
						if false {
						} else {
							r.EncodeInt(int64(yy728))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq716[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy730 := *x.ActiveDeadlineSeconds
						yym731 := z.EncBinary()
						_ = yym731
						if false {
						} else {
							r.EncodeInt(int64(yy730))
						}
					}
				}
			}
			if yyr716 || yy2arr716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq716[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq716[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr716 || yy2arr716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy734 := &x.Template
				yy734.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy735 := &x.Template
				yy735.CodecEncodeSelf(e)
			}
			if yyr716 || yy2arr716 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym736 := z.DecBinary()
	_ = yym736
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct737 := r.ContainerType()
		if yyct737 == codecSelferValueTypeMap1234 {
			yyl737 := r.ReadMapStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl737, d)
			}
		} else if yyct737 == codecSelferValueTypeArray1234 {
			yyl737 := r.ReadArrayStart()
			if yyl737 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl737, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys738Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys738Slc
	var yyhl738 bool = l >= 0
	for yyj738 := 0; ; yyj738++ {
		if yyhl738 {
			if yyj738 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys738Slc = r.DecodeBytes(yys738Slc, true, true)
		yys738 := string(yys738Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys738 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym740 := z.DecBinary()
				_ = yym740
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym742 := z.DecBinary()
				_ = yym742
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym744 := z.DecBinary()
				_ = yym744
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv746 := &x.Template
				yyv746.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys738)
		} // end switch yys738
	} // end for yyj738
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj747 int
	var yyb747 bool
	var yyhl747 bool = l >= 0
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym749 := z.DecBinary()
		_ = yym749
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym751 := z.DecBinary()
		_ = yym751
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym753 := z.DecBinary()
		_ = yym753
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv755 := &x.Template
		yyv755.CodecDecodeSelf(d)
	}
	for {
		yyj747++
		if yyhl747 {
			yyb747 = yyj747 > l
		} else {
			yyb747 = r.CheckBreak()
		}
		if yyb747 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj747-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym756 := z.EncBinary()
		_ = yym756
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep757 := !z.EncBinary()
			yy2arr757 := z.EncBasicHandle().StructToArray
			var yyq757 [6]bool
			_, _, _ = yysep757, yyq757, yy2arr757
			const yyr757 bool = false
			yyq757[0] = len(x.Conditions) != 0
			yyq757[1] = x.StartTime != nil
			yyq757[2] = x.CompletionTime != nil
			yyq757[3] = x.Active != 0
			yyq757[4] = x.Succeeded != 0
			yyq757[5] = x.Failed != 0
			var yynn757 int
			if yyr757 || yy2arr757 {
				r.EncodeArrayStart(6)
			} else {
				yynn757 = 0
				for _, b := range yyq757 {
					if b {
						yynn757++
					}
				}
				r.EncodeMapStart(yynn757)
				yynn757 = 0
			}
			if yyr757 || yy2arr757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq757[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym759 := z.EncBinary()
						_ = yym759
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq757[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym760 := z.EncBinary()
						_ = yym760
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr757 || yy2arr757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq757[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym762 := z.EncBinary()
						_ = yym762
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym762 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym762 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq757[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym763 := z.EncBinary()
						_ = yym763
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym763 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym763 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr757 || yy2arr757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq757[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym765 := z.EncBinary()
						_ = yym765
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym765 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym765 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq757[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym766 := z.EncBinary()
						_ = yym766
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym766 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym766 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr757 || yy2arr757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq757[3] {
					yym768 := z.EncBinary()
					_ = yym768
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq757[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr757 || yy2arr757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq757[4] {
					yym771 := z.EncBinary()
					_ = yym771
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq757[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym772 := z.EncBinary()
					_ = yym772
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr757 || yy2arr757 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq757[5] {
					yym774 := z.EncBinary()
					_ = yym774
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq757[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym775 := z.EncBinary()
					_ = yym775
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr757 || yy2arr757 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym776 := z.DecBinary()
	_ = yym776
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct777 := r.ContainerType()
		if yyct777 == codecSelferValueTypeMap1234 {
			yyl777 := r.ReadMapStart()
			if yyl777 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl777, d)
			}
		} else if yyct777 == codecSelferValueTypeArray1234 {
			yyl777 := r.ReadArrayStart()
			if yyl777 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl777, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys778Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys778Slc
	var yyhl778 bool = l >= 0
	for yyj778 := 0; ; yyj778++ {
		if yyhl778 {
			if yyj778 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys778Slc = r.DecodeBytes(yys778Slc, true, true)
		yys778 := string(yys778Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys778 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv779 := &x.Conditions
				yym780 := z.DecBinary()
				_ = yym780
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv779), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym782 := z.DecBinary()
				_ = yym782
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym782 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym782 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym784 := z.DecBinary()
				_ = yym784
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym784 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym784 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys778)
		} // end switch yys778
	} // end for yyj778
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj788 int
	var yyb788 bool
	var yyhl788 bool = l >= 0
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv789 := &x.Conditions
		yym790 := z.DecBinary()
		_ = yym790
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv789), d)
		}
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym792 := z.DecBinary()
		_ = yym792
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym792 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym792 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym794 := z.DecBinary()
		_ = yym794
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym794 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym794 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj788++
		if yyhl788 {
			yyb788 = yyj788 > l
		} else {
			yyb788 = r.CheckBreak()
		}
		if yyb788 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj788-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym798 := z.EncBinary()
	_ = yym798
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym799 := z.DecBinary()
	_ = yym799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym800 := z.EncBinary()
		_ = yym800
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep801 := !z.EncBinary()
			yy2arr801 := z.EncBasicHandle().StructToArray
			var yyq801 [6]bool
			_, _, _ = yysep801, yyq801, yy2arr801
			const yyr801 bool = false
			yyq801[2] = true
			yyq801[3] = true
			yyq801[4] = x.Reason != ""
			yyq801[5] = x.Message != ""
			var yynn801 int
			if yyr801 || yy2arr801 {
				r.EncodeArrayStart(6)
			} else {
				yynn801 = 2
				for _, b := range yyq801 {
					if b {
						yynn801++
					}
				}
				r.EncodeMapStart(yynn801)
				yynn801 = 0
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym804 := z.EncBinary()
				_ = yym804
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym805 := z.EncBinary()
				_ = yym805
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq801[2] {
					yy807 := &x.LastProbeTime
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else if z.HasExtensions() && z.EncExt(yy807) {
					} else if yym808 {
						z.EncBinaryMarshal(yy807)
					} else if !yym808 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy807)
					} else {
						z.EncFallback(yy807)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq801[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy809 := &x.LastProbeTime
					yym810 := z.EncBinary()
					_ = yym810
					if false {
					} else if z.HasExtensions() && z.EncExt(yy809) {
					} else if yym810 {
						z.EncBinaryMarshal(yy809)
					} else if !yym810 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy809)
					} else {
						z.EncFallback(yy809)
					}
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq801[3] {
					yy812 := &x.LastTransitionTime
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else if z.HasExtensions() && z.EncExt(yy812) {
					} else if yym813 {
						z.EncBinaryMarshal(yy812)
					} else if !yym813 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy812)
					} else {
						z.EncFallback(yy812)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq801[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy814 := &x.LastTransitionTime
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else if z.HasExtensions() && z.EncExt(yy814) {
					} else if yym815 {
						z.EncBinaryMarshal(yy814)
					} else if !yym815 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy814)
					} else {
						z.EncFallback(yy814)
					}
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq801[4] {
					yym817 := z.EncBinary()
					_ = yym817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq801[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym818 := z.EncBinary()
					_ = yym818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq801[5] {
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq801[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym821 := z.EncBinary()
					_ = yym821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr801 || yy2arr801 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym822 := z.DecBinary()
	_ = yym822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct823 := r.ContainerType()
		if yyct823 == codecSelferValueTypeMap1234 {
			yyl823 := r.ReadMapStart()
			if yyl823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl823, d)
			}
		} else if yyct823 == codecSelferValueTypeArray1234 {
			yyl823 := r.ReadArrayStart()
			if yyl823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys824Slc
	var yyhl824 bool = l >= 0
	for yyj824 := 0; ; yyj824++ {
		if yyhl824 {
			if yyj824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys824Slc = r.DecodeBytes(yys824Slc, true, true)
		yys824 := string(yys824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys824 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv827 := &x.LastProbeTime
				yym828 := z.DecBinary()
				_ = yym828
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv827) {
				} else if yym828 {
					z.DecBinaryUnmarshal(yyv827)
				} else if !yym828 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv827)
				} else {
					z.DecFallback(yyv827, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv829 := &x.LastTransitionTime
				yym830 := z.DecBinary()
				_ = yym830
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv829) {
				} else if yym830 {
					z.DecBinaryUnmarshal(yyv829)
				} else if !yym830 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv829)
				} else {
					z.DecFallback(yyv829, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys824)
		} // end switch yys824
	} // end for yyj824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj833 int
	var yyb833 bool
	var yyhl833 bool = l >= 0
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv836 := &x.LastProbeTime
		yym837 := z.DecBinary()
		_ = yym837
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv836) {
		} else if yym837 {
			z.DecBinaryUnmarshal(yyv836)
		} else if !yym837 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv836)
		} else {
			z.DecFallback(yyv836, false)
		}
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv838 := &x.LastTransitionTime
		yym839 := z.DecBinary()
		_ = yym839
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv838) {
		} else if yym839 {
			z.DecBinaryUnmarshal(yyv838)
		} else if !yym839 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv838)
		} else {
			z.DecFallback(yyv838, false)
		}
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj833++
		if yyhl833 {
			yyb833 = yyj833 > l
		} else {
			yyb833 = r.CheckBreak()
		}
		if yyb833 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj833-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym842 := z.EncBinary()
		_ = yym842
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep843 := !z.EncBinary()
			yy2arr843 := z.EncBasicHandle().StructToArray
			var yyq843 [5]bool
			_, _, _ = yysep843, yyq843, yy2arr843
			const yyr843 bool = false
			yyq843[0] = x.Kind != ""
			yyq843[1] = x.APIVersion != ""
			yyq843[2] = true
			yyq843[3] = true
			yyq843[4] = true
			var yynn843 int
			if yyr843 || yy2arr843 {
				r.EncodeArrayStart(5)
			} else {
				yynn843 = 0
				for _, b := range yyq843 {
					if b {
						yynn843++
					}
				}
				r.EncodeMapStart(yynn843)
				yynn843 = 0
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq843[0] {
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq843[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq843[1] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq843[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq843[2] {
					yy851 := &x.ObjectMeta
					yy851.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq843[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy852 := &x.ObjectMeta
					yy852.CodecEncodeSelf(e)
				}
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq843[3] {
					yy854 := &x.Spec
					yy854.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq843[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy855 := &x.Spec
					yy855.CodecEncodeSelf(e)
				}
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq843[4] {
					yy857 := &x.Status
					yy857.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq843[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy858 := &x.Status
					yy858.CodecEncodeSelf(e)
				}
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym859 := z.DecBinary()
	_ = yym859
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct860 := r.ContainerType()
		if yyct860 == codecSelferValueTypeMap1234 {
			yyl860 := r.ReadMapStart()
			if yyl860 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl860, d)
			}
		} else if yyct860 == codecSelferValueTypeArray1234 {
			yyl860 := r.ReadArrayStart()
			if yyl860 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl860, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys861Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys861Slc
	var yyhl861 bool = l >= 0
	for yyj861 := 0; ; yyj861++ {
		if yyhl861 {
			if yyj861 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys861Slc = r.DecodeBytes(yys861Slc, true, true)
		yys861 := string(yys861Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys861 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv864 := &x.ObjectMeta
				yyv864.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv865 := &x.Spec
				yyv865.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv866 := &x.Status
				yyv866.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys861)
		} // end switch yys861
	} // end for yyj861
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj867 int
	var yyb867 bool
	var yyhl867 bool = l >= 0
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv870 := &x.ObjectMeta
		yyv870.CodecDecodeSelf(d)
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv871 := &x.Spec
		yyv871.CodecDecodeSelf(d)
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv872 := &x.Status
		yyv872.CodecDecodeSelf(d)
	}
	for {
		yyj867++
		if yyhl867 {
			yyb867 = yyj867 > l
		} else {
			yyb867 = r.CheckBreak()
		}
		if yyb867 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj867-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym873 := z.EncBinary()
		_ = yym873
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep874 := !z.EncBinary()
			yy2arr874 := z.EncBasicHandle().StructToArray
			var yyq874 [4]bool
			_, _, _ = yysep874, yyq874, yy2arr874
			const yyr874 bool = false
			yyq874[0] = x.Kind != ""
			yyq874[1] = x.APIVersion != ""
			yyq874[2] = true
			var yynn874 int
			if yyr874 || yy2arr874 {
				r.EncodeArrayStart(4)
			} else {
				yynn874 = 1
				for _, b := range yyq874 {
					if b {
						yynn874++
					}
				}
				r.EncodeMapStart(yynn874)
				yynn874 = 0
			}
			if yyr874 || yy2arr874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq874[0] {
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq874[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr874 || yy2arr874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq874[1] {
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq874[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr874 || yy2arr874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq874[2] {
					yy882 := &x.ListMeta
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else if z.HasExtensions() && z.EncExt(yy882) {
					} else {
						z.EncFallback(yy882)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq874[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy884 := &x.ListMeta
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else if z.HasExtensions() && z.EncExt(yy884) {
					} else {
						z.EncFallback(yy884)
					}
				}
			}
			if yyr874 || yy2arr874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr874 || yy2arr874 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym889 := z.DecBinary()
	_ = yym889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct890 := r.ContainerType()
		if yyct890 == codecSelferValueTypeMap1234 {
			yyl890 := r.ReadMapStart()
			if yyl890 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl890, d)
			}
		} else if yyct890 == codecSelferValueTypeArray1234 {
			yyl890 := r.ReadArrayStart()
			if yyl890 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys891Slc
	var yyhl891 bool = l >= 0
	for yyj891 := 0; ; yyj891++ {
		if yyhl891 {
			if yyj891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys891Slc = r.DecodeBytes(yys891Slc, true, true)
		yys891 := string(yys891Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys891 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv894 := &x.ListMeta
				yym895 := z.DecBinary()
				_ = yym895
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv894) {
				} else {
					z.DecFallback(yyv894, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv896 := &x.Items
				yym897 := z.DecBinary()
				_ = yym897
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv896), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys891)
		} // end switch yys891
	} // end for yyj891
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj898 int
	var yyb898 bool
	var yyhl898 bool = l >= 0
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv901 := &x.ListMeta
		yym902 := z.DecBinary()
		_ = yym902
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv901) {
		} else {
			z.DecFallback(yyv901, false)
		}
	}
	yyj898++
	if yyhl898 {
		yyb898 = yyj898 > l
	} else {
		yyb898 = r.CheckBreak()
	}
	if yyb898 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv903 := &x.Items
		yym904 := z.DecBinary()
		_ = yym904
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv903), d)
		}
	}
	for {
		yyj898++
		if yyhl898 {
			yyb898 = yyj898 > l
		} else {
			yyb898 = r.CheckBreak()
		}
		if yyb898 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj898-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym905 := z.EncBinary()
		_ = yym905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep906 := !z.EncBinary()
			yy2arr906 := z.EncBasicHandle().StructToArray
			var yyq906 [2]bool
			_, _, _ = yysep906, yyq906, yy2arr906
			const yyr906 bool = false
			yyq906[0] = x.Backend != nil
			yyq906[1] = len(x.Rules) != 0
			var yynn906 int
			if yyr906 || yy2arr906 {
				r.EncodeArrayStart(2)
			} else {
				yynn906 = 0
				for _, b := range yyq906 {
					if b {
						yynn906++
					}
				}
				r.EncodeMapStart(yynn906)
				yynn906 = 0
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq906[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym909 := z.EncBinary()
						_ = yym909
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq906[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym910 := z.EncBinary()
						_ = yym910
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym911 := z.DecBinary()
	_ = yym911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct912 := r.ContainerType()
		if yyct912 == codecSelferValueTypeMap1234 {
			yyl912 := r.ReadMapStart()
			if yyl912 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl912, d)
			}
		} else if yyct912 == codecSelferValueTypeArray1234 {
			yyl912 := r.ReadArrayStart()
			if yyl912 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys913Slc
	var yyhl913 bool = l >= 0
	for yyj913 := 0; ; yyj913++ {
		if yyhl913 {
			if yyj913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys913Slc = r.DecodeBytes(yys913Slc, true, true)
		yys913 := string(yys913Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys913 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv915 := &x.Rules
				yym916 := z.DecBinary()
				_ = yym916
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv915), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys913)
		} // end switch yys913
	} // end for yyj913
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj917 int
	var yyb917 bool
	var yyhl917 bool = l >= 0
	yyj917++
	if yyhl917 {
		yyb917 = yyj917 > l
	} else {
		yyb917 = r.CheckBreak()
	}
	if yyb917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj917++
	if yyhl917 {
		yyb917 = yyj917 > l
	} else {
		yyb917 = r.CheckBreak()
	}
	if yyb917 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv919 := &x.Rules
		yym920 := z.DecBinary()
		_ = yym920
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv919), d)
		}
	}
	for {
		yyj917++
		if yyhl917 {
			yyb917 = yyj917 > l
		} else {
			yyb917 = r.CheckBreak()
		}
		if yyb917 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj917-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym921 := z.EncBinary()
		_ = yym921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep922 := !z.EncBinary()
			yy2arr922 := z.EncBasicHandle().StructToArray
			var yyq922 [1]bool
			_, _, _ = yysep922, yyq922, yy2arr922
			const yyr922 bool = false
			yyq922[0] = true
			var yynn922 int
			if yyr922 || yy2arr922 {
				r.EncodeArrayStart(1)
			} else {
				yynn922 = 0
				for _, b := range yyq922 {
					if b {
						yynn922++
					}
				}
				r.EncodeMapStart(yynn922)
				yynn922 = 0
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq922[0] {
					yy924 := &x.LoadBalancer
					yy924.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq922[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy925 := &x.LoadBalancer
					yy925.CodecEncodeSelf(e)
				}
			}
			if yyr922 || yy2arr922 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym926 := z.DecBinary()
	_ = yym926
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct927 := r.ContainerType()
		if yyct927 == codecSelferValueTypeMap1234 {
			yyl927 := r.ReadMapStart()
			if yyl927 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl927, d)
			}
		} else if yyct927 == codecSelferValueTypeArray1234 {
			yyl927 := r.ReadArrayStart()
			if yyl927 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl927, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys928Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys928Slc
	var yyhl928 bool = l >= 0
	for yyj928 := 0; ; yyj928++ {
		if yyhl928 {
			if yyj928 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys928Slc = r.DecodeBytes(yys928Slc, true, true)
		yys928 := string(yys928Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys928 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv929 := &x.LoadBalancer
				yyv929.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys928)
		} // end switch yys928
	} // end for yyj928
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj930 int
	var yyb930 bool
	var yyhl930 bool = l >= 0
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv931 := &x.LoadBalancer
		yyv931.CodecDecodeSelf(d)
	}
	for {
		yyj930++
		if yyhl930 {
			yyb930 = yyj930 > l
		} else {
			yyb930 = r.CheckBreak()
		}
		if yyb930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym932 := z.EncBinary()
		_ = yym932
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep933 := !z.EncBinary()
			yy2arr933 := z.EncBasicHandle().StructToArray
			var yyq933 [2]bool
			_, _, _ = yysep933, yyq933, yy2arr933
			const yyr933 bool = false
			yyq933[0] = x.Host != ""
			yyq933[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn933 int
			if yyr933 || yy2arr933 {
				r.EncodeArrayStart(2)
			} else {
				yynn933 = 0
				for _, b := range yyq933 {
					if b {
						yynn933++
					}
				}
				r.EncodeMapStart(yynn933)
				yynn933 = 0
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq933[0] {
					yym935 := z.EncBinary()
					_ = yym935
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq933[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym936 := z.EncBinary()
					_ = yym936
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn937 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn937 = true
				goto LABEL937
			}
		LABEL937:
			if yyr933 || yy2arr933 {
				if yyn937 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq933[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq933[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn937 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr933 || yy2arr933 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym938 := z.DecBinary()
	_ = yym938
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct939 := r.ContainerType()
		if yyct939 == codecSelferValueTypeMap1234 {
			yyl939 := r.ReadMapStart()
			if yyl939 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl939, d)
			}
		} else if yyct939 == codecSelferValueTypeArray1234 {
			yyl939 := r.ReadArrayStart()
			if yyl939 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl939, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys940Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys940Slc
	var yyhl940 bool = l >= 0
	for yyj940 := 0; ; yyj940++ {
		if yyhl940 {
			if yyj940 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys940Slc = r.DecodeBytes(yys940Slc, true, true)
		yys940 := string(yys940Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys940 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys940)
		} // end switch yys940
	} // end for yyj940
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj943 int
	var yyb943 bool
	var yyhl943 bool = l >= 0
	yyj943++
	if yyhl943 {
		yyb943 = yyj943 > l
	} else {
		yyb943 = r.CheckBreak()
	}
	if yyb943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj943++
	if yyhl943 {
		yyb943 = yyj943 > l
	} else {
		yyb943 = r.CheckBreak()
	}
	if yyb943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj943++
		if yyhl943 {
			yyb943 = yyj943 > l
		} else {
			yyb943 = r.CheckBreak()
		}
		if yyb943 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj943-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym946 := z.EncBinary()
		_ = yym946
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep947 := !z.EncBinary()
			yy2arr947 := z.EncBasicHandle().StructToArray
			var yyq947 [1]bool
			_, _, _ = yysep947, yyq947, yy2arr947
			const yyr947 bool = false
			yyq947[0] = x.HTTP != nil
			var yynn947 int
			if yyr947 || yy2arr947 {
				r.EncodeArrayStart(1)
			} else {
				yynn947 = 0
				for _, b := range yyq947 {
					if b {
						yynn947++
					}
				}
				r.EncodeMapStart(yynn947)
				yynn947 = 0
			}
			if yyr947 || yy2arr947 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq947[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq947[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr947 || yy2arr947 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym949 := z.DecBinary()
	_ = yym949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct950 := r.ContainerType()
		if yyct950 == codecSelferValueTypeMap1234 {
			yyl950 := r.ReadMapStart()
			if yyl950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl950, d)
			}
		} else if yyct950 == codecSelferValueTypeArray1234 {
			yyl950 := r.ReadArrayStart()
			if yyl950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys951Slc
	var yyhl951 bool = l >= 0
	for yyj951 := 0; ; yyj951++ {
		if yyhl951 {
			if yyj951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys951Slc = r.DecodeBytes(yys951Slc, true, true)
		yys951 := string(yys951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys951 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys951)
		} // end switch yys951
	} // end for yyj951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj953 int
	var yyb953 bool
	var yyhl953 bool = l >= 0
	yyj953++
	if yyhl953 {
		yyb953 = yyj953 > l
	} else {
		yyb953 = r.CheckBreak()
	}
	if yyb953 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj953++
		if yyhl953 {
			yyb953 = yyj953 > l
		} else {
			yyb953 = r.CheckBreak()
		}
		if yyb953 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj953-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym955 := z.EncBinary()
		_ = yym955
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep956 := !z.EncBinary()
			yy2arr956 := z.EncBasicHandle().StructToArray
			var yyq956 [1]bool
			_, _, _ = yysep956, yyq956, yy2arr956
			const yyr956 bool = false
			var yynn956 int
			if yyr956 || yy2arr956 {
				r.EncodeArrayStart(1)
			} else {
				yynn956 = 1
				for _, b := range yyq956 {
					if b {
						yynn956++
					}
				}
				r.EncodeMapStart(yynn956)
				yynn956 = 0
			}
			if yyr956 || yy2arr956 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym958 := z.EncBinary()
					_ = yym958
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr956 || yy2arr956 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct961 := r.ContainerType()
		if yyct961 == codecSelferValueTypeMap1234 {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if yyct961 == codecSelferValueTypeArray1234 {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys962 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv963 := &x.Paths
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv963), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv966 := &x.Paths
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv966), d)
		}
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym968 := z.EncBinary()
		_ = yym968
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep969 := !z.EncBinary()
			yy2arr969 := z.EncBasicHandle().StructToArray
			var yyq969 [2]bool
			_, _, _ = yysep969, yyq969, yy2arr969
			const yyr969 bool = false
			yyq969[0] = x.Path != ""
			var yynn969 int
			if yyr969 || yy2arr969 {
				r.EncodeArrayStart(2)
			} else {
				yynn969 = 1
				for _, b := range yyq969 {
					if b {
						yynn969++
					}
				}
				r.EncodeMapStart(yynn969)
				yynn969 = 0
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq969[0] {
					yym971 := z.EncBinary()
					_ = yym971
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq969[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym972 := z.EncBinary()
					_ = yym972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy974 := &x.Backend
				yy974.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy975 := &x.Backend
				yy975.CodecEncodeSelf(e)
			}
			if yyr969 || yy2arr969 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym976 := z.DecBinary()
	_ = yym976
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct977 := r.ContainerType()
		if yyct977 == codecSelferValueTypeMap1234 {
			yyl977 := r.ReadMapStart()
			if yyl977 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl977, d)
			}
		} else if yyct977 == codecSelferValueTypeArray1234 {
			yyl977 := r.ReadArrayStart()
			if yyl977 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl977, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys978Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys978Slc
	var yyhl978 bool = l >= 0
	for yyj978 := 0; ; yyj978++ {
		if yyhl978 {
			if yyj978 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys978Slc = r.DecodeBytes(yys978Slc, true, true)
		yys978 := string(yys978Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys978 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv980 := &x.Backend
				yyv980.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys978)
		} // end switch yys978
	} // end for yyj978
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj981 int
	var yyb981 bool
	var yyhl981 bool = l >= 0
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj981++
	if yyhl981 {
		yyb981 = yyj981 > l
	} else {
		yyb981 = r.CheckBreak()
	}
	if yyb981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv983 := &x.Backend
		yyv983.CodecDecodeSelf(d)
	}
	for {
		yyj981++
		if yyhl981 {
			yyb981 = yyj981 > l
		} else {
			yyb981 = r.CheckBreak()
		}
		if yyb981 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj981-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym984 := z.EncBinary()
		_ = yym984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep985 := !z.EncBinary()
			yy2arr985 := z.EncBasicHandle().StructToArray
			var yyq985 [2]bool
			_, _, _ = yysep985, yyq985, yy2arr985
			const yyr985 bool = false
			var yynn985 int
			if yyr985 || yy2arr985 {
				r.EncodeArrayStart(2)
			} else {
				yynn985 = 2
				for _, b := range yyq985 {
					if b {
						yynn985++
					}
				}
				r.EncodeMapStart(yynn985)
				yynn985 = 0
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym987 := z.EncBinary()
				_ = yym987
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym988 := z.EncBinary()
				_ = yym988
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy990 := &x.ServicePort
				yym991 := z.EncBinary()
				_ = yym991
				if false {
				} else if z.HasExtensions() && z.EncExt(yy990) {
				} else if !yym991 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy990)
				} else {
					z.EncFallback(yy990)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy992 := &x.ServicePort
				yym993 := z.EncBinary()
				_ = yym993
				if false {
				} else if z.HasExtensions() && z.EncExt(yy992) {
				} else if !yym993 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy992)
				} else {
					z.EncFallback(yy992)
				}
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct995 := r.ContainerType()
		if yyct995 == codecSelferValueTypeMap1234 {
			yyl995 := r.ReadMapStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl995, d)
			}
		} else if yyct995 == codecSelferValueTypeArray1234 {
			yyl995 := r.ReadArrayStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl995, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys996Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys996Slc
	var yyhl996 bool = l >= 0
	for yyj996 := 0; ; yyj996++ {
		if yyhl996 {
			if yyj996 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys996Slc = r.DecodeBytes(yys996Slc, true, true)
		yys996 := string(yys996Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys996 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_intstr.IntOrString{}
			} else {
				yyv998 := &x.ServicePort
				yym999 := z.DecBinary()
				_ = yym999
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv998) {
				} else if !yym999 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv998)
				} else {
					z.DecFallback(yyv998, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys996)
		} // end switch yys996
	} // end for yyj996
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1000 int
	var yyb1000 bool
	var yyhl1000 bool = l >= 0
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1000++
	if yyhl1000 {
		yyb1000 = yyj1000 > l
	} else {
		yyb1000 = r.CheckBreak()
	}
	if yyb1000 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_intstr.IntOrString{}
	} else {
		yyv1002 := &x.ServicePort
		yym1003 := z.DecBinary()
		_ = yym1003
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1002) {
		} else if !yym1003 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1002)
		} else {
			z.DecFallback(yyv1002, false)
		}
	}
	for {
		yyj1000++
		if yyhl1000 {
			yyb1000 = yyj1000 > l
		} else {
			yyb1000 = r.CheckBreak()
		}
		if yyb1000 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1000-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1004 := z.EncBinary()
	_ = yym1004
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1006 := z.EncBinary()
		_ = yym1006
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1007 := !z.EncBinary()
			yy2arr1007 := z.EncBasicHandle().StructToArray
			var yyq1007 [2]bool
			_, _, _ = yysep1007, yyq1007, yy2arr1007
			const yyr1007 bool = false
			var yynn1007 int
			if yyr1007 || yy2arr1007 {
				r.EncodeArrayStart(2)
			} else {
				yynn1007 = 2
				for _, b := range yyq1007 {
					if b {
						yynn1007++
					}
				}
				r.EncodeMapStart(yynn1007)
				yynn1007 = 0
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1010 := z.EncBinary()
				_ = yym1010
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1011 := z.EncBinary()
				_ = yym1011
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1012 := z.DecBinary()
	_ = yym1012
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1013 := r.ContainerType()
		if yyct1013 == codecSelferValueTypeMap1234 {
			yyl1013 := r.ReadMapStart()
			if yyl1013 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1013, d)
			}
		} else if yyct1013 == codecSelferValueTypeArray1234 {
			yyl1013 := r.ReadArrayStart()
			if yyl1013 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1013, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1014Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1014Slc
	var yyhl1014 bool = l >= 0
	for yyj1014 := 0; ; yyj1014++ {
		if yyhl1014 {
			if yyj1014 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1014Slc = r.DecodeBytes(yys1014Slc, true, true)
		yys1014 := string(yys1014Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1014 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1014)
		} // end switch yys1014
	} // end for yyj1014
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1017 int
	var yyb1017 bool
	var yyhl1017 bool = l >= 0
	yyj1017++
	if yyhl1017 {
		yyb1017 = yyj1017 > l
	} else {
		yyb1017 = r.CheckBreak()
	}
	if yyb1017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1017++
	if yyhl1017 {
		yyb1017 = yyj1017 > l
	} else {
		yyb1017 = r.CheckBreak()
	}
	if yyb1017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1017++
		if yyhl1017 {
			yyb1017 = yyj1017 > l
		} else {
			yyb1017 = r.CheckBreak()
		}
		if yyb1017 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1017-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1020 := z.EncBinary()
		_ = yym1020
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1021 := !z.EncBinary()
			yy2arr1021 := z.EncBasicHandle().StructToArray
			var yyq1021 [3]bool
			_, _, _ = yysep1021, yyq1021, yy2arr1021
			const yyr1021 bool = false
			var yynn1021 int
			if yyr1021 || yy2arr1021 {
				r.EncodeArrayStart(3)
			} else {
				yynn1021 = 3
				for _, b := range yyq1021 {
					if b {
						yynn1021++
					}
				}
				r.EncodeMapStart(yynn1021)
				yynn1021 = 0
			}
			if yyr1021 || yy2arr1021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1023 := z.EncBinary()
				_ = yym1023
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1024 := z.EncBinary()
				_ = yym1024
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1021 || yy2arr1021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1026 := z.EncBinary()
				_ = yym1026
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1027 := z.EncBinary()
				_ = yym1027
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1021 || yy2arr1021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1029 := z.EncBinary()
					_ = yym1029
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1021 || yy2arr1021 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1031 := z.DecBinary()
	_ = yym1031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1032 := r.ContainerType()
		if yyct1032 == codecSelferValueTypeMap1234 {
			yyl1032 := r.ReadMapStart()
			if yyl1032 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1032, d)
			}
		} else if yyct1032 == codecSelferValueTypeArray1234 {
			yyl1032 := r.ReadArrayStart()
			if yyl1032 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1032, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1033Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1033Slc
	var yyhl1033 bool = l >= 0
	for yyj1033 := 0; ; yyj1033++ {
		if yyhl1033 {
			if yyj1033 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1033Slc = r.DecodeBytes(yys1033Slc, true, true)
		yys1033 := string(yys1033Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1033 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1036 := &x.TargetUtilization
				yym1037 := z.DecBinary()
				_ = yym1037
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1036), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1033)
		} // end switch yys1033
	} // end for yyj1033
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1038 int
	var yyb1038 bool
	var yyhl1038 bool = l >= 0
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1041 := &x.TargetUtilization
		yym1042 := z.DecBinary()
		_ = yym1042
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1041), d)
		}
	}
	for {
		yyj1038++
		if yyhl1038 {
			yyb1038 = yyj1038 > l
		} else {
			yyb1038 = r.CheckBreak()
		}
		if yyb1038 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1038-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1043 := z.EncBinary()
		_ = yym1043
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1044 := !z.EncBinary()
			yy2arr1044 := z.EncBasicHandle().StructToArray
			var yyq1044 [4]bool
			_, _, _ = yysep1044, yyq1044, yy2arr1044
			const yyr1044 bool = false
			yyq1044[0] = x.Kind != ""
			yyq1044[1] = x.APIVersion != ""
			yyq1044[2] = true
			yyq1044[3] = true
			var yynn1044 int
			if yyr1044 || yy2arr1044 {
				r.EncodeArrayStart(4)
			} else {
				yynn1044 = 0
				for _, b := range yyq1044 {
					if b {
						yynn1044++
					}
				}
				r.EncodeMapStart(yynn1044)
				yynn1044 = 0
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1044[0] {
					yym1046 := z.EncBinary()
					_ = yym1046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1044[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1047 := z.EncBinary()
					_ = yym1047
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1044[1] {
					yym1049 := z.EncBinary()
					_ = yym1049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1044[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1050 := z.EncBinary()
					_ = yym1050
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1044[2] {
					yy1052 := &x.ObjectMeta
					yy1052.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1044[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1053 := &x.ObjectMeta
					yy1053.CodecEncodeSelf(e)
				}
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1044[3] {
					yy1055 := &x.Spec
					yy1055.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1044[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1056 := &x.Spec
					yy1056.CodecEncodeSelf(e)
				}
			}
			if yyr1044 || yy2arr1044 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1057 := z.DecBinary()
	_ = yym1057
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1058 := r.ContainerType()
		if yyct1058 == codecSelferValueTypeMap1234 {
			yyl1058 := r.ReadMapStart()
			if yyl1058 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1058, d)
			}
		} else if yyct1058 == codecSelferValueTypeArray1234 {
			yyl1058 := r.ReadArrayStart()
			if yyl1058 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1058, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1059Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1059Slc
	var yyhl1059 bool = l >= 0
	for yyj1059 := 0; ; yyj1059++ {
		if yyhl1059 {
			if yyj1059 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1059Slc = r.DecodeBytes(yys1059Slc, true, true)
		yys1059 := string(yys1059Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1059 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1062 := &x.ObjectMeta
				yyv1062.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1063 := &x.Spec
				yyv1063.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1059)
		} // end switch yys1059
	} // end for yyj1059
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1064 int
	var yyb1064 bool
	var yyhl1064 bool = l >= 0
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1067 := &x.ObjectMeta
		yyv1067.CodecDecodeSelf(d)
	}
	yyj1064++
	if yyhl1064 {
		yyb1064 = yyj1064 > l
	} else {
		yyb1064 = r.CheckBreak()
	}
	if yyb1064 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1068 := &x.Spec
		yyv1068.CodecDecodeSelf(d)
	}
	for {
		yyj1064++
		if yyhl1064 {
			yyb1064 = yyj1064 > l
		} else {
			yyb1064 = r.CheckBreak()
		}
		if yyb1064 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1064-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1069 := z.EncBinary()
		_ = yym1069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1070 := !z.EncBinary()
			yy2arr1070 := z.EncBasicHandle().StructToArray
			var yyq1070 [4]bool
			_, _, _ = yysep1070, yyq1070, yy2arr1070
			const yyr1070 bool = false
			yyq1070[0] = x.Kind != ""
			yyq1070[1] = x.APIVersion != ""
			yyq1070[2] = true
			var yynn1070 int
			if yyr1070 || yy2arr1070 {
				r.EncodeArrayStart(4)
			} else {
				yynn1070 = 1
				for _, b := range yyq1070 {
					if b {
						yynn1070++
					}
				}
				r.EncodeMapStart(yynn1070)
				yynn1070 = 0
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1070[0] {
					yym1072 := z.EncBinary()
					_ = yym1072
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1070[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1070[1] {
					yym1075 := z.EncBinary()
					_ = yym1075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1070[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1076 := z.EncBinary()
					_ = yym1076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1070[2] {
					yy1078 := &x.ListMeta
					yym1079 := z.EncBinary()
					_ = yym1079
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1078) {
					} else {
						z.EncFallback(yy1078)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1070[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1080 := &x.ListMeta
					yym1081 := z.EncBinary()
					_ = yym1081
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1080) {
					} else {
						z.EncFallback(yy1080)
					}
				}
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1083 := z.EncBinary()
					_ = yym1083
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1084 := z.EncBinary()
					_ = yym1084
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1085 := z.DecBinary()
	_ = yym1085
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1086 := r.ContainerType()
		if yyct1086 == codecSelferValueTypeMap1234 {
			yyl1086 := r.ReadMapStart()
			if yyl1086 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1086, d)
			}
		} else if yyct1086 == codecSelferValueTypeArray1234 {
			yyl1086 := r.ReadArrayStart()
			if yyl1086 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1086, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1087Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1087Slc
	var yyhl1087 bool = l >= 0
	for yyj1087 := 0; ; yyj1087++ {
		if yyhl1087 {
			if yyj1087 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1087Slc = r.DecodeBytes(yys1087Slc, true, true)
		yys1087 := string(yys1087Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1087 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1090 := &x.ListMeta
				yym1091 := z.DecBinary()
				_ = yym1091
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1090) {
				} else {
					z.DecFallback(yyv1090, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1092 := &x.Items
				yym1093 := z.DecBinary()
				_ = yym1093
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1092), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1087)
		} // end switch yys1087
	} // end for yyj1087
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1094 int
	var yyb1094 bool
	var yyhl1094 bool = l >= 0
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1097 := &x.ListMeta
		yym1098 := z.DecBinary()
		_ = yym1098
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1097) {
		} else {
			z.DecFallback(yyv1097, false)
		}
	}
	yyj1094++
	if yyhl1094 {
		yyb1094 = yyj1094 > l
	} else {
		yyb1094 = r.CheckBreak()
	}
	if yyb1094 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1099 := &x.Items
		yym1100 := z.DecBinary()
		_ = yym1100
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1099), d)
		}
	}
	for {
		yyj1094++
		if yyhl1094 {
			yyb1094 = yyj1094 > l
		} else {
			yyb1094 = r.CheckBreak()
		}
		if yyb1094 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1094-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1101 := z.EncBinary()
		_ = yym1101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1102 := !z.EncBinary()
			yy2arr1102 := z.EncBasicHandle().StructToArray
			var yyq1102 [2]bool
			_, _, _ = yysep1102, yyq1102, yy2arr1102
			const yyr1102 bool = false
			yyq1102[0] = len(x.MatchLabels) != 0
			yyq1102[1] = len(x.MatchExpressions) != 0
			var yynn1102 int
			if yyr1102 || yy2arr1102 {
				r.EncodeArrayStart(2)
			} else {
				yynn1102 = 0
				for _, b := range yyq1102 {
					if b {
						yynn1102++
					}
				}
				r.EncodeMapStart(yynn1102)
				yynn1102 = 0
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1102[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1104 := z.EncBinary()
						_ = yym1104
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1105 := z.EncBinary()
						_ = yym1105
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1102[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1107 := z.EncBinary()
						_ = yym1107
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1108 := z.EncBinary()
						_ = yym1108
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1109 := z.DecBinary()
	_ = yym1109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1110 := r.ContainerType()
		if yyct1110 == codecSelferValueTypeMap1234 {
			yyl1110 := r.ReadMapStart()
			if yyl1110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1110, d)
			}
		} else if yyct1110 == codecSelferValueTypeArray1234 {
			yyl1110 := r.ReadArrayStart()
			if yyl1110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1111Slc
	var yyhl1111 bool = l >= 0
	for yyj1111 := 0; ; yyj1111++ {
		if yyhl1111 {
			if yyj1111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1111Slc = r.DecodeBytes(yys1111Slc, true, true)
		yys1111 := string(yys1111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1111 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1112 := &x.MatchLabels
				yym1113 := z.DecBinary()
				_ = yym1113
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1112, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1114 := &x.MatchExpressions
				yym1115 := z.DecBinary()
				_ = yym1115
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1114), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1111)
		} // end switch yys1111
	} // end for yyj1111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1116 int
	var yyb1116 bool
	var yyhl1116 bool = l >= 0
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1117 := &x.MatchLabels
		yym1118 := z.DecBinary()
		_ = yym1118
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1117, false, d)
		}
	}
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1119 := &x.MatchExpressions
		yym1120 := z.DecBinary()
		_ = yym1120
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1119), d)
		}
	}
	for {
		yyj1116++
		if yyhl1116 {
			yyb1116 = yyj1116 > l
		} else {
			yyb1116 = r.CheckBreak()
		}
		if yyb1116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1121 := z.EncBinary()
		_ = yym1121
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1122 := !z.EncBinary()
			yy2arr1122 := z.EncBasicHandle().StructToArray
			var yyq1122 [3]bool
			_, _, _ = yysep1122, yyq1122, yy2arr1122
			const yyr1122 bool = false
			yyq1122[2] = len(x.Values) != 0
			var yynn1122 int
			if yyr1122 || yy2arr1122 {
				r.EncodeArrayStart(3)
			} else {
				yynn1122 = 2
				for _, b := range yyq1122 {
					if b {
						yynn1122++
					}
				}
				r.EncodeMapStart(yynn1122)
				yynn1122 = 0
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1124 := z.EncBinary()
				_ = yym1124
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1125 := z.EncBinary()
				_ = yym1125
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1128 := z.EncBinary()
						_ = yym1128
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1129 := z.EncBinary()
						_ = yym1129
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1130 := z.DecBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1131 := r.ContainerType()
		if yyct1131 == codecSelferValueTypeMap1234 {
			yyl1131 := r.ReadMapStart()
			if yyl1131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1131, d)
			}
		} else if yyct1131 == codecSelferValueTypeArray1234 {
			yyl1131 := r.ReadArrayStart()
			if yyl1131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1132Slc
	var yyhl1132 bool = l >= 0
	for yyj1132 := 0; ; yyj1132++ {
		if yyhl1132 {
			if yyj1132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1132Slc = r.DecodeBytes(yys1132Slc, true, true)
		yys1132 := string(yys1132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1132 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1135 := &x.Values
				yym1136 := z.DecBinary()
				_ = yym1136
				if false {
				} else {
					z.F.DecSliceStringX(yyv1135, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1132)
		} // end switch yys1132
	} // end for yyj1132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1137 int
	var yyb1137 bool
	var yyhl1137 bool = l >= 0
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1140 := &x.Values
		yym1141 := z.DecBinary()
		_ = yym1141
		if false {
		} else {
			z.F.DecSliceStringX(yyv1140, false, d)
		}
	}
	for {
		yyj1137++
		if yyhl1137 {
			yyb1137 = yyj1137 > l
		} else {
			yyb1137 = r.CheckBreak()
		}
		if yyb1137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1142 := z.EncBinary()
	_ = yym1142
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1143 := z.DecBinary()
	_ = yym1143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1144 := z.EncBinary()
		_ = yym1144
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1145 := !z.EncBinary()
			yy2arr1145 := z.EncBasicHandle().StructToArray
			var yyq1145 [5]bool
			_, _, _ = yysep1145, yyq1145, yy2arr1145
			const yyr1145 bool = false
			yyq1145[0] = x.Kind != ""
			yyq1145[1] = x.APIVersion != ""
			yyq1145[2] = true
			yyq1145[3] = true
			yyq1145[4] = true
			var yynn1145 int
			if yyr1145 || yy2arr1145 {
				r.EncodeArrayStart(5)
			} else {
				yynn1145 = 0
				for _, b := range yyq1145 {
					if b {
						yynn1145++
					}
				}
				r.EncodeMapStart(yynn1145)
				yynn1145 = 0
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1145[0] {
					yym1147 := z.EncBinary()
					_ = yym1147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1145[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1148 := z.EncBinary()
					_ = yym1148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1145[1] {
					yym1150 := z.EncBinary()
					_ = yym1150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1145[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1151 := z.EncBinary()
					_ = yym1151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1145[2] {
					yy1153 := &x.ObjectMeta
					yy1153.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1145[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1154 := &x.ObjectMeta
					yy1154.CodecEncodeSelf(e)
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1145[3] {
					yy1156 := &x.Spec
					yy1156.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1145[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1157 := &x.Spec
					yy1157.CodecEncodeSelf(e)
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1145[4] {
					yy1159 := &x.Status
					yy1159.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1145[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1160 := &x.Status
					yy1160.CodecEncodeSelf(e)
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1161 := z.DecBinary()
	_ = yym1161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1162 := r.ContainerType()
		if yyct1162 == codecSelferValueTypeMap1234 {
			yyl1162 := r.ReadMapStart()
			if yyl1162 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1162, d)
			}
		} else if yyct1162 == codecSelferValueTypeArray1234 {
			yyl1162 := r.ReadArrayStart()
			if yyl1162 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1163Slc
	var yyhl1163 bool = l >= 0
	for yyj1163 := 0; ; yyj1163++ {
		if yyhl1163 {
			if yyj1163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1163Slc = r.DecodeBytes(yys1163Slc, true, true)
		yys1163 := string(yys1163Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1163 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1166 := &x.ObjectMeta
				yyv1166.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1167 := &x.Spec
				yyv1167.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1168 := &x.Status
				yyv1168.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1163)
		} // end switch yys1163
	} // end for yyj1163
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1169 int
	var yyb1169 bool
	var yyhl1169 bool = l >= 0
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1172 := &x.ObjectMeta
		yyv1172.CodecDecodeSelf(d)
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1173 := &x.Spec
		yyv1173.CodecDecodeSelf(d)
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1174 := &x.Status
		yyv1174.CodecDecodeSelf(d)
	}
	for {
		yyj1169++
		if yyhl1169 {
			yyb1169 = yyj1169 > l
		} else {
			yyb1169 = r.CheckBreak()
		}
		if yyb1169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1175 := z.EncBinary()
		_ = yym1175
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1176 := !z.EncBinary()
			yy2arr1176 := z.EncBasicHandle().StructToArray
			var yyq1176 [4]bool
			_, _, _ = yysep1176, yyq1176, yy2arr1176
			const yyr1176 bool = false
			yyq1176[0] = x.Kind != ""
			yyq1176[1] = x.APIVersion != ""
			yyq1176[2] = true
			var yynn1176 int
			if yyr1176 || yy2arr1176 {
				r.EncodeArrayStart(4)
			} else {
				yynn1176 = 1
				for _, b := range yyq1176 {
					if b {
						yynn1176++
					}
				}
				r.EncodeMapStart(yynn1176)
				yynn1176 = 0
			}
			if yyr1176 || yy2arr1176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1176[0] {
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1176[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1176 || yy2arr1176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1176[1] {
					yym1181 := z.EncBinary()
					_ = yym1181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1176[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1182 := z.EncBinary()
					_ = yym1182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1176 || yy2arr1176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1176[2] {
					yy1184 := &x.ListMeta
					yym1185 := z.EncBinary()
					_ = yym1185
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1184) {
					} else {
						z.EncFallback(yy1184)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1176[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1186 := &x.ListMeta
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1186) {
					} else {
						z.EncFallback(yy1186)
					}
				}
			}
			if yyr1176 || yy2arr1176 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1190 := z.EncBinary()
					_ = yym1190
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1176 || yy2arr1176 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1191 := z.DecBinary()
	_ = yym1191
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1192 := r.ContainerType()
		if yyct1192 == codecSelferValueTypeMap1234 {
			yyl1192 := r.ReadMapStart()
			if yyl1192 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1192, d)
			}
		} else if yyct1192 == codecSelferValueTypeArray1234 {
			yyl1192 := r.ReadArrayStart()
			if yyl1192 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1192, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1193Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1193Slc
	var yyhl1193 bool = l >= 0
	for yyj1193 := 0; ; yyj1193++ {
		if yyhl1193 {
			if yyj1193 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1193Slc = r.DecodeBytes(yys1193Slc, true, true)
		yys1193 := string(yys1193Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1193 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1196 := &x.ListMeta
				yym1197 := z.DecBinary()
				_ = yym1197
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1196) {
				} else {
					z.DecFallback(yyv1196, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1198 := &x.Items
				yym1199 := z.DecBinary()
				_ = yym1199
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1198), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1193)
		} // end switch yys1193
	} // end for yyj1193
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1200 int
	var yyb1200 bool
	var yyhl1200 bool = l >= 0
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1203 := &x.ListMeta
		yym1204 := z.DecBinary()
		_ = yym1204
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1203) {
		} else {
			z.DecFallback(yyv1203, false)
		}
	}
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1205 := &x.Items
		yym1206 := z.DecBinary()
		_ = yym1206
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1205), d)
		}
	}
	for {
		yyj1200++
		if yyhl1200 {
			yyb1200 = yyj1200 > l
		} else {
			yyb1200 = r.CheckBreak()
		}
		if yyb1200 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1200-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1207 := z.EncBinary()
		_ = yym1207
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1208 := !z.EncBinary()
			yy2arr1208 := z.EncBasicHandle().StructToArray
			var yyq1208 [3]bool
			_, _, _ = yysep1208, yyq1208, yy2arr1208
			const yyr1208 bool = false
			yyq1208[1] = x.Selector != nil
			yyq1208[2] = x.Template != nil
			var yynn1208 int
			if yyr1208 || yy2arr1208 {
				r.EncodeArrayStart(3)
			} else {
				yynn1208 = 1
				for _, b := range yyq1208 {
					if b {
						yynn1208++
					}
				}
				r.EncodeMapStart(yynn1208)
				yynn1208 = 0
			}
			if yyr1208 || yy2arr1208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1210 := z.EncBinary()
				_ = yym1210
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1211 := z.EncBinary()
				_ = yym1211
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1208 || yy2arr1208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1208[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1208[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1208 || yy2arr1208 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1208[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1208[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1208 || yy2arr1208 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1214 := z.DecBinary()
	_ = yym1214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1215 := r.ContainerType()
		if yyct1215 == codecSelferValueTypeMap1234 {
			yyl1215 := r.ReadMapStart()
			if yyl1215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1215, d)
			}
		} else if yyct1215 == codecSelferValueTypeArray1234 {
			yyl1215 := r.ReadArrayStart()
			if yyl1215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1216Slc
	var yyhl1216 bool = l >= 0
	for yyj1216 := 0; ; yyj1216++ {
		if yyhl1216 {
			if yyj1216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1216Slc = r.DecodeBytes(yys1216Slc, true, true)
		yys1216 := string(yys1216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1216 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1216)
		} // end switch yys1216
	} // end for yyj1216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1220 int
	var yyb1220 bool
	var yyhl1220 bool = l >= 0
	yyj1220++
	if yyhl1220 {
		yyb1220 = yyj1220 > l
	} else {
		yyb1220 = r.CheckBreak()
	}
	if yyb1220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1220++
	if yyhl1220 {
		yyb1220 = yyj1220 > l
	} else {
		yyb1220 = r.CheckBreak()
	}
	if yyb1220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1220++
	if yyhl1220 {
		yyb1220 = yyj1220 > l
	} else {
		yyb1220 = r.CheckBreak()
	}
	if yyb1220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1220++
		if yyhl1220 {
			yyb1220 = yyj1220 > l
		} else {
			yyb1220 = r.CheckBreak()
		}
		if yyb1220 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1220-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1224 := z.EncBinary()
		_ = yym1224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1225 := !z.EncBinary()
			yy2arr1225 := z.EncBasicHandle().StructToArray
			var yyq1225 [2]bool
			_, _, _ = yysep1225, yyq1225, yy2arr1225
			const yyr1225 bool = false
			yyq1225[1] = x.ObservedGeneration != 0
			var yynn1225 int
			if yyr1225 || yy2arr1225 {
				r.EncodeArrayStart(2)
			} else {
				yynn1225 = 1
				for _, b := range yyq1225 {
					if b {
						yynn1225++
					}
				}
				r.EncodeMapStart(yynn1225)
				yynn1225 = 0
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1227 := z.EncBinary()
				_ = yym1227
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1228 := z.EncBinary()
				_ = yym1228
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1225[1] {
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1225[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1232 := z.DecBinary()
	_ = yym1232
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1233 := r.ContainerType()
		if yyct1233 == codecSelferValueTypeMap1234 {
			yyl1233 := r.ReadMapStart()
			if yyl1233 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1233, d)
			}
		} else if yyct1233 == codecSelferValueTypeArray1234 {
			yyl1233 := r.ReadArrayStart()
			if yyl1233 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1233, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1234Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1234Slc
	var yyhl1234 bool = l >= 0
	for yyj1234 := 0; ; yyj1234++ {
		if yyhl1234 {
			if yyj1234 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1234Slc = r.DecodeBytes(yys1234Slc, true, true)
		yys1234 := string(yys1234Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1234 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1234)
		} // end switch yys1234
	} // end for yyj1234
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1237 int
	var yyb1237 bool
	var yyhl1237 bool = l >= 0
	yyj1237++
	if yyhl1237 {
		yyb1237 = yyj1237 > l
	} else {
		yyb1237 = r.CheckBreak()
	}
	if yyb1237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1237++
	if yyhl1237 {
		yyb1237 = yyj1237 > l
	} else {
		yyb1237 = r.CheckBreak()
	}
	if yyb1237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1237++
		if yyhl1237 {
			yyb1237 = yyj1237 > l
		} else {
			yyb1237 = r.CheckBreak()
		}
		if yyb1237 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1237-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1240 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1241 := &yyv1240
		yy1241.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1242 := *v
	yyh1242, yyl1242 := z.DecSliceHelperStart()
	var yyc1242 bool
	if yyl1242 == 0 {
		if yyv1242 == nil {
			yyv1242 = []CustomMetricTarget{}
			yyc1242 = true
		} else if len(yyv1242) != 0 {
			yyv1242 = yyv1242[:0]
			yyc1242 = true
		}
	} else if yyl1242 > 0 {
		var yyrr1242, yyrl1242 int
		var yyrt1242 bool
		if yyl1242 > cap(yyv1242) {

			yyrg1242 := len(yyv1242) > 0
			yyv21242 := yyv1242
			yyrl1242, yyrt1242 = z.DecInferLen(yyl1242, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1242 {
				if yyrl1242 <= cap(yyv1242) {
					yyv1242 = yyv1242[:yyrl1242]
				} else {
					yyv1242 = make([]CustomMetricTarget, yyrl1242)
				}
			} else {
				yyv1242 = make([]CustomMetricTarget, yyrl1242)
			}
			yyc1242 = true
			yyrr1242 = len(yyv1242)
			if yyrg1242 {
				copy(yyv1242, yyv21242)
			}
		} else if yyl1242 != len(yyv1242) {
			yyv1242 = yyv1242[:yyl1242]
			yyc1242 = true
		}
		yyj1242 := 0
		for ; yyj1242 < yyrr1242; yyj1242++ {
			yyh1242.ElemContainerState(yyj1242)
			if r.TryDecodeAsNil() {
				yyv1242[yyj1242] = CustomMetricTarget{}
			} else {
				yyv1243 := &yyv1242[yyj1242]
				yyv1243.CodecDecodeSelf(d)
			}

		}
		if yyrt1242 {
			for ; yyj1242 < yyl1242; yyj1242++ {
				yyv1242 = append(yyv1242, CustomMetricTarget{})
				yyh1242.ElemContainerState(yyj1242)
				if r.TryDecodeAsNil() {
					yyv1242[yyj1242] = CustomMetricTarget{}
				} else {
					yyv1244 := &yyv1242[yyj1242]
					yyv1244.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1242 := 0
		for ; !r.CheckBreak(); yyj1242++ {

			if yyj1242 >= len(yyv1242) {
				yyv1242 = append(yyv1242, CustomMetricTarget{}) // var yyz1242 CustomMetricTarget
				yyc1242 = true
			}
			yyh1242.ElemContainerState(yyj1242)
			if yyj1242 < len(yyv1242) {
				if r.TryDecodeAsNil() {
					yyv1242[yyj1242] = CustomMetricTarget{}
				} else {
					yyv1245 := &yyv1242[yyj1242]
					yyv1245.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1242 < len(yyv1242) {
			yyv1242 = yyv1242[:yyj1242]
			yyc1242 = true
		} else if yyj1242 == 0 && yyv1242 == nil {
			yyv1242 = []CustomMetricTarget{}
			yyc1242 = true
		}
	}
	yyh1242.End()
	if yyc1242 {
		*v = yyv1242
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1246 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1247 := &yyv1246
		yy1247.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1248 := *v
	yyh1248, yyl1248 := z.DecSliceHelperStart()
	var yyc1248 bool
	if yyl1248 == 0 {
		if yyv1248 == nil {
			yyv1248 = []CustomMetricCurrentStatus{}
			yyc1248 = true
		} else if len(yyv1248) != 0 {
			yyv1248 = yyv1248[:0]
			yyc1248 = true
		}
	} else if yyl1248 > 0 {
		var yyrr1248, yyrl1248 int
		var yyrt1248 bool
		if yyl1248 > cap(yyv1248) {

			yyrg1248 := len(yyv1248) > 0
			yyv21248 := yyv1248
			yyrl1248, yyrt1248 = z.DecInferLen(yyl1248, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1248 {
				if yyrl1248 <= cap(yyv1248) {
					yyv1248 = yyv1248[:yyrl1248]
				} else {
					yyv1248 = make([]CustomMetricCurrentStatus, yyrl1248)
				}
			} else {
				yyv1248 = make([]CustomMetricCurrentStatus, yyrl1248)
			}
			yyc1248 = true
			yyrr1248 = len(yyv1248)
			if yyrg1248 {
				copy(yyv1248, yyv21248)
			}
		} else if yyl1248 != len(yyv1248) {
			yyv1248 = yyv1248[:yyl1248]
			yyc1248 = true
		}
		yyj1248 := 0
		for ; yyj1248 < yyrr1248; yyj1248++ {
			yyh1248.ElemContainerState(yyj1248)
			if r.TryDecodeAsNil() {
				yyv1248[yyj1248] = CustomMetricCurrentStatus{}
			} else {
				yyv1249 := &yyv1248[yyj1248]
				yyv1249.CodecDecodeSelf(d)
			}

		}
		if yyrt1248 {
			for ; yyj1248 < yyl1248; yyj1248++ {
				yyv1248 = append(yyv1248, CustomMetricCurrentStatus{})
				yyh1248.ElemContainerState(yyj1248)
				if r.TryDecodeAsNil() {
					yyv1248[yyj1248] = CustomMetricCurrentStatus{}
				} else {
					yyv1250 := &yyv1248[yyj1248]
					yyv1250.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1248 := 0
		for ; !r.CheckBreak(); yyj1248++ {

			if yyj1248 >= len(yyv1248) {
				yyv1248 = append(yyv1248, CustomMetricCurrentStatus{}) // var yyz1248 CustomMetricCurrentStatus
				yyc1248 = true
			}
			yyh1248.ElemContainerState(yyj1248)
			if yyj1248 < len(yyv1248) {
				if r.TryDecodeAsNil() {
					yyv1248[yyj1248] = CustomMetricCurrentStatus{}
				} else {
					yyv1251 := &yyv1248[yyj1248]
					yyv1251.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1248 < len(yyv1248) {
			yyv1248 = yyv1248[:yyj1248]
			yyc1248 = true
		} else if yyj1248 == 0 && yyv1248 == nil {
			yyv1248 = []CustomMetricCurrentStatus{}
			yyc1248 = true
		}
	}
	yyh1248.End()
	if yyc1248 {
		*v = yyv1248
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1252 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1253 := &yyv1252
		yy1253.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1254 := *v
	yyh1254, yyl1254 := z.DecSliceHelperStart()
	var yyc1254 bool
	if yyl1254 == 0 {
		if yyv1254 == nil {
			yyv1254 = []APIVersion{}
			yyc1254 = true
		} else if len(yyv1254) != 0 {
			yyv1254 = yyv1254[:0]
			yyc1254 = true
		}
	} else if yyl1254 > 0 {
		var yyrr1254, yyrl1254 int
		var yyrt1254 bool
		if yyl1254 > cap(yyv1254) {

			yyrg1254 := len(yyv1254) > 0
			yyv21254 := yyv1254
			yyrl1254, yyrt1254 = z.DecInferLen(yyl1254, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1254 {
				if yyrl1254 <= cap(yyv1254) {
					yyv1254 = yyv1254[:yyrl1254]
				} else {
					yyv1254 = make([]APIVersion, yyrl1254)
				}
			} else {
				yyv1254 = make([]APIVersion, yyrl1254)
			}
			yyc1254 = true
			yyrr1254 = len(yyv1254)
			if yyrg1254 {
				copy(yyv1254, yyv21254)
			}
		} else if yyl1254 != len(yyv1254) {
			yyv1254 = yyv1254[:yyl1254]
			yyc1254 = true
		}
		yyj1254 := 0
		for ; yyj1254 < yyrr1254; yyj1254++ {
			yyh1254.ElemContainerState(yyj1254)
			if r.TryDecodeAsNil() {
				yyv1254[yyj1254] = APIVersion{}
			} else {
				yyv1255 := &yyv1254[yyj1254]
				yyv1255.CodecDecodeSelf(d)
			}

		}
		if yyrt1254 {
			for ; yyj1254 < yyl1254; yyj1254++ {
				yyv1254 = append(yyv1254, APIVersion{})
				yyh1254.ElemContainerState(yyj1254)
				if r.TryDecodeAsNil() {
					yyv1254[yyj1254] = APIVersion{}
				} else {
					yyv1256 := &yyv1254[yyj1254]
					yyv1256.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1254 := 0
		for ; !r.CheckBreak(); yyj1254++ {

			if yyj1254 >= len(yyv1254) {
				yyv1254 = append(yyv1254, APIVersion{}) // var yyz1254 APIVersion
				yyc1254 = true
			}
			yyh1254.ElemContainerState(yyj1254)
			if yyj1254 < len(yyv1254) {
				if r.TryDecodeAsNil() {
					yyv1254[yyj1254] = APIVersion{}
				} else {
					yyv1257 := &yyv1254[yyj1254]
					yyv1257.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1254 < len(yyv1254) {
			yyv1254 = yyv1254[:yyj1254]
			yyc1254 = true
		} else if yyj1254 == 0 && yyv1254 == nil {
			yyv1254 = []APIVersion{}
			yyc1254 = true
		}
	}
	yyh1254.End()
	if yyc1254 {
		*v = yyv1254
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1258 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1259 := &yyv1258
		yy1259.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1260 := *v
	yyh1260, yyl1260 := z.DecSliceHelperStart()
	var yyc1260 bool
	if yyl1260 == 0 {
		if yyv1260 == nil {
			yyv1260 = []ThirdPartyResource{}
			yyc1260 = true
		} else if len(yyv1260) != 0 {
			yyv1260 = yyv1260[:0]
			yyc1260 = true
		}
	} else if yyl1260 > 0 {
		var yyrr1260, yyrl1260 int
		var yyrt1260 bool
		if yyl1260 > cap(yyv1260) {

			yyrg1260 := len(yyv1260) > 0
			yyv21260 := yyv1260
			yyrl1260, yyrt1260 = z.DecInferLen(yyl1260, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1260 {
				if yyrl1260 <= cap(yyv1260) {
					yyv1260 = yyv1260[:yyrl1260]
				} else {
					yyv1260 = make([]ThirdPartyResource, yyrl1260)
				}
			} else {
				yyv1260 = make([]ThirdPartyResource, yyrl1260)
			}
			yyc1260 = true
			yyrr1260 = len(yyv1260)
			if yyrg1260 {
				copy(yyv1260, yyv21260)
			}
		} else if yyl1260 != len(yyv1260) {
			yyv1260 = yyv1260[:yyl1260]
			yyc1260 = true
		}
		yyj1260 := 0
		for ; yyj1260 < yyrr1260; yyj1260++ {
			yyh1260.ElemContainerState(yyj1260)
			if r.TryDecodeAsNil() {
				yyv1260[yyj1260] = ThirdPartyResource{}
			} else {
				yyv1261 := &yyv1260[yyj1260]
				yyv1261.CodecDecodeSelf(d)
			}

		}
		if yyrt1260 {
			for ; yyj1260 < yyl1260; yyj1260++ {
				yyv1260 = append(yyv1260, ThirdPartyResource{})
				yyh1260.ElemContainerState(yyj1260)
				if r.TryDecodeAsNil() {
					yyv1260[yyj1260] = ThirdPartyResource{}
				} else {
					yyv1262 := &yyv1260[yyj1260]
					yyv1262.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1260 := 0
		for ; !r.CheckBreak(); yyj1260++ {

			if yyj1260 >= len(yyv1260) {
				yyv1260 = append(yyv1260, ThirdPartyResource{}) // var yyz1260 ThirdPartyResource
				yyc1260 = true
			}
			yyh1260.ElemContainerState(yyj1260)
			if yyj1260 < len(yyv1260) {
				if r.TryDecodeAsNil() {
					yyv1260[yyj1260] = ThirdPartyResource{}
				} else {
					yyv1263 := &yyv1260[yyj1260]
					yyv1263.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1260 < len(yyv1260) {
			yyv1260 = yyv1260[:yyj1260]
			yyc1260 = true
		} else if yyj1260 == 0 && yyv1260 == nil {
			yyv1260 = []ThirdPartyResource{}
			yyc1260 = true
		}
	}
	yyh1260.End()
	if yyc1260 {
		*v = yyv1260
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1264 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1265 := &yyv1264
		yy1265.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1266 := *v
	yyh1266, yyl1266 := z.DecSliceHelperStart()
	var yyc1266 bool
	if yyl1266 == 0 {
		if yyv1266 == nil {
			yyv1266 = []Deployment{}
			yyc1266 = true
		} else if len(yyv1266) != 0 {
			yyv1266 = yyv1266[:0]
			yyc1266 = true
		}
	} else if yyl1266 > 0 {
		var yyrr1266, yyrl1266 int
		var yyrt1266 bool
		if yyl1266 > cap(yyv1266) {

			yyrg1266 := len(yyv1266) > 0
			yyv21266 := yyv1266
			yyrl1266, yyrt1266 = z.DecInferLen(yyl1266, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt1266 {
				if yyrl1266 <= cap(yyv1266) {
					yyv1266 = yyv1266[:yyrl1266]
				} else {
					yyv1266 = make([]Deployment, yyrl1266)
				}
			} else {
				yyv1266 = make([]Deployment, yyrl1266)
			}
			yyc1266 = true
			yyrr1266 = len(yyv1266)
			if yyrg1266 {
				copy(yyv1266, yyv21266)
			}
		} else if yyl1266 != len(yyv1266) {
			yyv1266 = yyv1266[:yyl1266]
			yyc1266 = true
		}
		yyj1266 := 0
		for ; yyj1266 < yyrr1266; yyj1266++ {
			yyh1266.ElemContainerState(yyj1266)
			if r.TryDecodeAsNil() {
				yyv1266[yyj1266] = Deployment{}
			} else {
				yyv1267 := &yyv1266[yyj1266]
				yyv1267.CodecDecodeSelf(d)
			}

		}
		if yyrt1266 {
			for ; yyj1266 < yyl1266; yyj1266++ {
				yyv1266 = append(yyv1266, Deployment{})
				yyh1266.ElemContainerState(yyj1266)
				if r.TryDecodeAsNil() {
					yyv1266[yyj1266] = Deployment{}
				} else {
					yyv1268 := &yyv1266[yyj1266]
					yyv1268.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1266 := 0
		for ; !r.CheckBreak(); yyj1266++ {

			if yyj1266 >= len(yyv1266) {
				yyv1266 = append(yyv1266, Deployment{}) // var yyz1266 Deployment
				yyc1266 = true
			}
			yyh1266.ElemContainerState(yyj1266)
			if yyj1266 < len(yyv1266) {
				if r.TryDecodeAsNil() {
					yyv1266[yyj1266] = Deployment{}
				} else {
					yyv1269 := &yyv1266[yyj1266]
					yyv1269.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1266 < len(yyv1266) {
			yyv1266 = yyv1266[:yyj1266]
			yyc1266 = true
		} else if yyj1266 == 0 && yyv1266 == nil {
			yyv1266 = []Deployment{}
			yyc1266 = true
		}
	}
	yyh1266.End()
	if yyc1266 {
		*v = yyv1266
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1270 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1271 := &yyv1270
		yy1271.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1272 := *v
	yyh1272, yyl1272 := z.DecSliceHelperStart()
	var yyc1272 bool
	if yyl1272 == 0 {
		if yyv1272 == nil {
			yyv1272 = []DaemonSet{}
			yyc1272 = true
		} else if len(yyv1272) != 0 {
			yyv1272 = yyv1272[:0]
			yyc1272 = true
		}
	} else if yyl1272 > 0 {
		var yyrr1272, yyrl1272 int
		var yyrt1272 bool
		if yyl1272 > cap(yyv1272) {

			yyrg1272 := len(yyv1272) > 0
			yyv21272 := yyv1272
			yyrl1272, yyrt1272 = z.DecInferLen(yyl1272, z.DecBasicHandle().MaxInitLen, 592)
			if yyrt1272 {
				if yyrl1272 <= cap(yyv1272) {
					yyv1272 = yyv1272[:yyrl1272]
				} else {
					yyv1272 = make([]DaemonSet, yyrl1272)
				}
			} else {
				yyv1272 = make([]DaemonSet, yyrl1272)
			}
			yyc1272 = true
			yyrr1272 = len(yyv1272)
			if yyrg1272 {
				copy(yyv1272, yyv21272)
			}
		} else if yyl1272 != len(yyv1272) {
			yyv1272 = yyv1272[:yyl1272]
			yyc1272 = true
		}
		yyj1272 := 0
		for ; yyj1272 < yyrr1272; yyj1272++ {
			yyh1272.ElemContainerState(yyj1272)
			if r.TryDecodeAsNil() {
				yyv1272[yyj1272] = DaemonSet{}
			} else {
				yyv1273 := &yyv1272[yyj1272]
				yyv1273.CodecDecodeSelf(d)
			}

		}
		if yyrt1272 {
			for ; yyj1272 < yyl1272; yyj1272++ {
				yyv1272 = append(yyv1272, DaemonSet{})
				yyh1272.ElemContainerState(yyj1272)
				if r.TryDecodeAsNil() {
					yyv1272[yyj1272] = DaemonSet{}
				} else {
					yyv1274 := &yyv1272[yyj1272]
					yyv1274.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1272 := 0
		for ; !r.CheckBreak(); yyj1272++ {

			if yyj1272 >= len(yyv1272) {
				yyv1272 = append(yyv1272, DaemonSet{}) // var yyz1272 DaemonSet
				yyc1272 = true
			}
			yyh1272.ElemContainerState(yyj1272)
			if yyj1272 < len(yyv1272) {
				if r.TryDecodeAsNil() {
					yyv1272[yyj1272] = DaemonSet{}
				} else {
					yyv1275 := &yyv1272[yyj1272]
					yyv1275.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1272 < len(yyv1272) {
			yyv1272 = yyv1272[:yyj1272]
			yyc1272 = true
		} else if yyj1272 == 0 && yyv1272 == nil {
			yyv1272 = []DaemonSet{}
			yyc1272 = true
		}
	}
	yyh1272.End()
	if yyc1272 {
		*v = yyv1272
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1276 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1277 := &yyv1276
		yy1277.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1278 := *v
	yyh1278, yyl1278 := z.DecSliceHelperStart()
	var yyc1278 bool
	if yyl1278 == 0 {
		if yyv1278 == nil {
			yyv1278 = []ThirdPartyResourceData{}
			yyc1278 = true
		} else if len(yyv1278) != 0 {
			yyv1278 = yyv1278[:0]
			yyc1278 = true
		}
	} else if yyl1278 > 0 {
		var yyrr1278, yyrl1278 int
		var yyrt1278 bool
		if yyl1278 > cap(yyv1278) {

			yyrg1278 := len(yyv1278) > 0
			yyv21278 := yyv1278
			yyrl1278, yyrt1278 = z.DecInferLen(yyl1278, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1278 {
				if yyrl1278 <= cap(yyv1278) {
					yyv1278 = yyv1278[:yyrl1278]
				} else {
					yyv1278 = make([]ThirdPartyResourceData, yyrl1278)
				}
			} else {
				yyv1278 = make([]ThirdPartyResourceData, yyrl1278)
			}
			yyc1278 = true
			yyrr1278 = len(yyv1278)
			if yyrg1278 {
				copy(yyv1278, yyv21278)
			}
		} else if yyl1278 != len(yyv1278) {
			yyv1278 = yyv1278[:yyl1278]
			yyc1278 = true
		}
		yyj1278 := 0
		for ; yyj1278 < yyrr1278; yyj1278++ {
			yyh1278.ElemContainerState(yyj1278)
			if r.TryDecodeAsNil() {
				yyv1278[yyj1278] = ThirdPartyResourceData{}
			} else {
				yyv1279 := &yyv1278[yyj1278]
				yyv1279.CodecDecodeSelf(d)
			}

		}
		if yyrt1278 {
			for ; yyj1278 < yyl1278; yyj1278++ {
				yyv1278 = append(yyv1278, ThirdPartyResourceData{})
				yyh1278.ElemContainerState(yyj1278)
				if r.TryDecodeAsNil() {
					yyv1278[yyj1278] = ThirdPartyResourceData{}
				} else {
					yyv1280 := &yyv1278[yyj1278]
					yyv1280.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1278 := 0
		for ; !r.CheckBreak(); yyj1278++ {

			if yyj1278 >= len(yyv1278) {
				yyv1278 = append(yyv1278, ThirdPartyResourceData{}) // var yyz1278 ThirdPartyResourceData
				yyc1278 = true
			}
			yyh1278.ElemContainerState(yyj1278)
			if yyj1278 < len(yyv1278) {
				if r.TryDecodeAsNil() {
					yyv1278[yyj1278] = ThirdPartyResourceData{}
				} else {
					yyv1281 := &yyv1278[yyj1278]
					yyv1281.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1278 < len(yyv1278) {
			yyv1278 = yyv1278[:yyj1278]
			yyc1278 = true
		} else if yyj1278 == 0 && yyv1278 == nil {
			yyv1278 = []ThirdPartyResourceData{}
			yyc1278 = true
		}
	}
	yyh1278.End()
	if yyc1278 {
		*v = yyv1278
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1282 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1283 := &yyv1282
		yy1283.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1284 := *v
	yyh1284, yyl1284 := z.DecSliceHelperStart()
	var yyc1284 bool
	if yyl1284 == 0 {
		if yyv1284 == nil {
			yyv1284 = []Job{}
			yyc1284 = true
		} else if len(yyv1284) != 0 {
			yyv1284 = yyv1284[:0]
			yyc1284 = true
		}
	} else if yyl1284 > 0 {
		var yyrr1284, yyrl1284 int
		var yyrt1284 bool
		if yyl1284 > cap(yyv1284) {

			yyrg1284 := len(yyv1284) > 0
			yyv21284 := yyv1284
			yyrl1284, yyrt1284 = z.DecInferLen(yyl1284, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt1284 {
				if yyrl1284 <= cap(yyv1284) {
					yyv1284 = yyv1284[:yyrl1284]
				} else {
					yyv1284 = make([]Job, yyrl1284)
				}
			} else {
				yyv1284 = make([]Job, yyrl1284)
			}
			yyc1284 = true
			yyrr1284 = len(yyv1284)
			if yyrg1284 {
				copy(yyv1284, yyv21284)
			}
		} else if yyl1284 != len(yyv1284) {
			yyv1284 = yyv1284[:yyl1284]
			yyc1284 = true
		}
		yyj1284 := 0
		for ; yyj1284 < yyrr1284; yyj1284++ {
			yyh1284.ElemContainerState(yyj1284)
			if r.TryDecodeAsNil() {
				yyv1284[yyj1284] = Job{}
			} else {
				yyv1285 := &yyv1284[yyj1284]
				yyv1285.CodecDecodeSelf(d)
			}

		}
		if yyrt1284 {
			for ; yyj1284 < yyl1284; yyj1284++ {
				yyv1284 = append(yyv1284, Job{})
				yyh1284.ElemContainerState(yyj1284)
				if r.TryDecodeAsNil() {
					yyv1284[yyj1284] = Job{}
				} else {
					yyv1286 := &yyv1284[yyj1284]
					yyv1286.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1284 := 0
		for ; !r.CheckBreak(); yyj1284++ {

			if yyj1284 >= len(yyv1284) {
				yyv1284 = append(yyv1284, Job{}) // var yyz1284 Job
				yyc1284 = true
			}
			yyh1284.ElemContainerState(yyj1284)
			if yyj1284 < len(yyv1284) {
				if r.TryDecodeAsNil() {
					yyv1284[yyj1284] = Job{}
				} else {
					yyv1287 := &yyv1284[yyj1284]
					yyv1287.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1284 < len(yyv1284) {
			yyv1284 = yyv1284[:yyj1284]
			yyc1284 = true
		} else if yyj1284 == 0 && yyv1284 == nil {
			yyv1284 = []Job{}
			yyc1284 = true
		}
	}
	yyh1284.End()
	if yyc1284 {
		*v = yyv1284
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1288 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1289 := &yyv1288
		yy1289.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1290 := *v
	yyh1290, yyl1290 := z.DecSliceHelperStart()
	var yyc1290 bool
	if yyl1290 == 0 {
		if yyv1290 == nil {
			yyv1290 = []JobCondition{}
			yyc1290 = true
		} else if len(yyv1290) != 0 {
			yyv1290 = yyv1290[:0]
			yyc1290 = true
		}
	} else if yyl1290 > 0 {
		var yyrr1290, yyrl1290 int
		var yyrt1290 bool
		if yyl1290 > cap(yyv1290) {

			yyrg1290 := len(yyv1290) > 0
			yyv21290 := yyv1290
			yyrl1290, yyrt1290 = z.DecInferLen(yyl1290, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1290 {
				if yyrl1290 <= cap(yyv1290) {
					yyv1290 = yyv1290[:yyrl1290]
				} else {
					yyv1290 = make([]JobCondition, yyrl1290)
				}
			} else {
				yyv1290 = make([]JobCondition, yyrl1290)
			}
			yyc1290 = true
			yyrr1290 = len(yyv1290)
			if yyrg1290 {
				copy(yyv1290, yyv21290)
			}
		} else if yyl1290 != len(yyv1290) {
			yyv1290 = yyv1290[:yyl1290]
			yyc1290 = true
		}
		yyj1290 := 0
		for ; yyj1290 < yyrr1290; yyj1290++ {
			yyh1290.ElemContainerState(yyj1290)
			if r.TryDecodeAsNil() {
				yyv1290[yyj1290] = JobCondition{}
			} else {
				yyv1291 := &yyv1290[yyj1290]
				yyv1291.CodecDecodeSelf(d)
			}

		}
		if yyrt1290 {
			for ; yyj1290 < yyl1290; yyj1290++ {
				yyv1290 = append(yyv1290, JobCondition{})
				yyh1290.ElemContainerState(yyj1290)
				if r.TryDecodeAsNil() {
					yyv1290[yyj1290] = JobCondition{}
				} else {
					yyv1292 := &yyv1290[yyj1290]
					yyv1292.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1290 := 0
		for ; !r.CheckBreak(); yyj1290++ {

			if yyj1290 >= len(yyv1290) {
				yyv1290 = append(yyv1290, JobCondition{}) // var yyz1290 JobCondition
				yyc1290 = true
			}
			yyh1290.ElemContainerState(yyj1290)
			if yyj1290 < len(yyv1290) {
				if r.TryDecodeAsNil() {
					yyv1290[yyj1290] = JobCondition{}
				} else {
					yyv1293 := &yyv1290[yyj1290]
					yyv1293.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1290 < len(yyv1290) {
			yyv1290 = yyv1290[:yyj1290]
			yyc1290 = true
		} else if yyj1290 == 0 && yyv1290 == nil {
			yyv1290 = []JobCondition{}
			yyc1290 = true
		}
	}
	yyh1290.End()
	if yyc1290 {
		*v = yyv1290
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1294 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1295 := &yyv1294
		yy1295.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1296 := *v
	yyh1296, yyl1296 := z.DecSliceHelperStart()
	var yyc1296 bool
	if yyl1296 == 0 {
		if yyv1296 == nil {
			yyv1296 = []Ingress{}
			yyc1296 = true
		} else if len(yyv1296) != 0 {
			yyv1296 = yyv1296[:0]
			yyc1296 = true
		}
	} else if yyl1296 > 0 {
		var yyrr1296, yyrl1296 int
		var yyrt1296 bool
		if yyl1296 > cap(yyv1296) {

			yyrg1296 := len(yyv1296) > 0
			yyv21296 := yyv1296
			yyrl1296, yyrt1296 = z.DecInferLen(yyl1296, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt1296 {
				if yyrl1296 <= cap(yyv1296) {
					yyv1296 = yyv1296[:yyrl1296]
				} else {
					yyv1296 = make([]Ingress, yyrl1296)
				}
			} else {
				yyv1296 = make([]Ingress, yyrl1296)
			}
			yyc1296 = true
			yyrr1296 = len(yyv1296)
			if yyrg1296 {
				copy(yyv1296, yyv21296)
			}
		} else if yyl1296 != len(yyv1296) {
			yyv1296 = yyv1296[:yyl1296]
			yyc1296 = true
		}
		yyj1296 := 0
		for ; yyj1296 < yyrr1296; yyj1296++ {
			yyh1296.ElemContainerState(yyj1296)
			if r.TryDecodeAsNil() {
				yyv1296[yyj1296] = Ingress{}
			} else {
				yyv1297 := &yyv1296[yyj1296]
				yyv1297.CodecDecodeSelf(d)
			}

		}
		if yyrt1296 {
			for ; yyj1296 < yyl1296; yyj1296++ {
				yyv1296 = append(yyv1296, Ingress{})
				yyh1296.ElemContainerState(yyj1296)
				if r.TryDecodeAsNil() {
					yyv1296[yyj1296] = Ingress{}
				} else {
					yyv1298 := &yyv1296[yyj1296]
					yyv1298.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1296 := 0
		for ; !r.CheckBreak(); yyj1296++ {

			if yyj1296 >= len(yyv1296) {
				yyv1296 = append(yyv1296, Ingress{}) // var yyz1296 Ingress
				yyc1296 = true
			}
			yyh1296.ElemContainerState(yyj1296)
			if yyj1296 < len(yyv1296) {
				if r.TryDecodeAsNil() {
					yyv1296[yyj1296] = Ingress{}
				} else {
					yyv1299 := &yyv1296[yyj1296]
					yyv1299.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1296 < len(yyv1296) {
			yyv1296 = yyv1296[:yyj1296]
			yyc1296 = true
		} else if yyj1296 == 0 && yyv1296 == nil {
			yyv1296 = []Ingress{}
			yyc1296 = true
		}
	}
	yyh1296.End()
	if yyc1296 {
		*v = yyv1296
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1300 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1301 := &yyv1300
		yy1301.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1302 := *v
	yyh1302, yyl1302 := z.DecSliceHelperStart()
	var yyc1302 bool
	if yyl1302 == 0 {
		if yyv1302 == nil {
			yyv1302 = []IngressRule{}
			yyc1302 = true
		} else if len(yyv1302) != 0 {
			yyv1302 = yyv1302[:0]
			yyc1302 = true
		}
	} else if yyl1302 > 0 {
		var yyrr1302, yyrl1302 int
		var yyrt1302 bool
		if yyl1302 > cap(yyv1302) {

			yyrg1302 := len(yyv1302) > 0
			yyv21302 := yyv1302
			yyrl1302, yyrt1302 = z.DecInferLen(yyl1302, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1302 {
				if yyrl1302 <= cap(yyv1302) {
					yyv1302 = yyv1302[:yyrl1302]
				} else {
					yyv1302 = make([]IngressRule, yyrl1302)
				}
			} else {
				yyv1302 = make([]IngressRule, yyrl1302)
			}
			yyc1302 = true
			yyrr1302 = len(yyv1302)
			if yyrg1302 {
				copy(yyv1302, yyv21302)
			}
		} else if yyl1302 != len(yyv1302) {
			yyv1302 = yyv1302[:yyl1302]
			yyc1302 = true
		}
		yyj1302 := 0
		for ; yyj1302 < yyrr1302; yyj1302++ {
			yyh1302.ElemContainerState(yyj1302)
			if r.TryDecodeAsNil() {
				yyv1302[yyj1302] = IngressRule{}
			} else {
				yyv1303 := &yyv1302[yyj1302]
				yyv1303.CodecDecodeSelf(d)
			}

		}
		if yyrt1302 {
			for ; yyj1302 < yyl1302; yyj1302++ {
				yyv1302 = append(yyv1302, IngressRule{})
				yyh1302.ElemContainerState(yyj1302)
				if r.TryDecodeAsNil() {
					yyv1302[yyj1302] = IngressRule{}
				} else {
					yyv1304 := &yyv1302[yyj1302]
					yyv1304.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1302 := 0
		for ; !r.CheckBreak(); yyj1302++ {

			if yyj1302 >= len(yyv1302) {
				yyv1302 = append(yyv1302, IngressRule{}) // var yyz1302 IngressRule
				yyc1302 = true
			}
			yyh1302.ElemContainerState(yyj1302)
			if yyj1302 < len(yyv1302) {
				if r.TryDecodeAsNil() {
					yyv1302[yyj1302] = IngressRule{}
				} else {
					yyv1305 := &yyv1302[yyj1302]
					yyv1305.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1302 < len(yyv1302) {
			yyv1302 = yyv1302[:yyj1302]
			yyc1302 = true
		} else if yyj1302 == 0 && yyv1302 == nil {
			yyv1302 = []IngressRule{}
			yyc1302 = true
		}
	}
	yyh1302.End()
	if yyc1302 {
		*v = yyv1302
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1306 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1307 := &yyv1306
		yy1307.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1308 := *v
	yyh1308, yyl1308 := z.DecSliceHelperStart()
	var yyc1308 bool
	if yyl1308 == 0 {
		if yyv1308 == nil {
			yyv1308 = []HTTPIngressPath{}
			yyc1308 = true
		} else if len(yyv1308) != 0 {
			yyv1308 = yyv1308[:0]
			yyc1308 = true
		}
	} else if yyl1308 > 0 {
		var yyrr1308, yyrl1308 int
		var yyrt1308 bool
		if yyl1308 > cap(yyv1308) {

			yyrg1308 := len(yyv1308) > 0
			yyv21308 := yyv1308
			yyrl1308, yyrt1308 = z.DecInferLen(yyl1308, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1308 {
				if yyrl1308 <= cap(yyv1308) {
					yyv1308 = yyv1308[:yyrl1308]
				} else {
					yyv1308 = make([]HTTPIngressPath, yyrl1308)
				}
			} else {
				yyv1308 = make([]HTTPIngressPath, yyrl1308)
			}
			yyc1308 = true
			yyrr1308 = len(yyv1308)
			if yyrg1308 {
				copy(yyv1308, yyv21308)
			}
		} else if yyl1308 != len(yyv1308) {
			yyv1308 = yyv1308[:yyl1308]
			yyc1308 = true
		}
		yyj1308 := 0
		for ; yyj1308 < yyrr1308; yyj1308++ {
			yyh1308.ElemContainerState(yyj1308)
			if r.TryDecodeAsNil() {
				yyv1308[yyj1308] = HTTPIngressPath{}
			} else {
				yyv1309 := &yyv1308[yyj1308]
				yyv1309.CodecDecodeSelf(d)
			}

		}
		if yyrt1308 {
			for ; yyj1308 < yyl1308; yyj1308++ {
				yyv1308 = append(yyv1308, HTTPIngressPath{})
				yyh1308.ElemContainerState(yyj1308)
				if r.TryDecodeAsNil() {
					yyv1308[yyj1308] = HTTPIngressPath{}
				} else {
					yyv1310 := &yyv1308[yyj1308]
					yyv1310.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1308 := 0
		for ; !r.CheckBreak(); yyj1308++ {

			if yyj1308 >= len(yyv1308) {
				yyv1308 = append(yyv1308, HTTPIngressPath{}) // var yyz1308 HTTPIngressPath
				yyc1308 = true
			}
			yyh1308.ElemContainerState(yyj1308)
			if yyj1308 < len(yyv1308) {
				if r.TryDecodeAsNil() {
					yyv1308[yyj1308] = HTTPIngressPath{}
				} else {
					yyv1311 := &yyv1308[yyj1308]
					yyv1311.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1308 < len(yyv1308) {
			yyv1308 = yyv1308[:yyj1308]
			yyc1308 = true
		} else if yyj1308 == 0 && yyv1308 == nil {
			yyv1308 = []HTTPIngressPath{}
			yyc1308 = true
		}
	}
	yyh1308.End()
	if yyc1308 {
		*v = yyv1308
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1312 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1313 := &yyv1312
		yy1313.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1314 := *v
	yyh1314, yyl1314 := z.DecSliceHelperStart()
	var yyc1314 bool
	if yyl1314 == 0 {
		if yyv1314 == nil {
			yyv1314 = []NodeUtilization{}
			yyc1314 = true
		} else if len(yyv1314) != 0 {
			yyv1314 = yyv1314[:0]
			yyc1314 = true
		}
	} else if yyl1314 > 0 {
		var yyrr1314, yyrl1314 int
		var yyrt1314 bool
		if yyl1314 > cap(yyv1314) {

			yyrg1314 := len(yyv1314) > 0
			yyv21314 := yyv1314
			yyrl1314, yyrt1314 = z.DecInferLen(yyl1314, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1314 {
				if yyrl1314 <= cap(yyv1314) {
					yyv1314 = yyv1314[:yyrl1314]
				} else {
					yyv1314 = make([]NodeUtilization, yyrl1314)
				}
			} else {
				yyv1314 = make([]NodeUtilization, yyrl1314)
			}
			yyc1314 = true
			yyrr1314 = len(yyv1314)
			if yyrg1314 {
				copy(yyv1314, yyv21314)
			}
		} else if yyl1314 != len(yyv1314) {
			yyv1314 = yyv1314[:yyl1314]
			yyc1314 = true
		}
		yyj1314 := 0
		for ; yyj1314 < yyrr1314; yyj1314++ {
			yyh1314.ElemContainerState(yyj1314)
			if r.TryDecodeAsNil() {
				yyv1314[yyj1314] = NodeUtilization{}
			} else {
				yyv1315 := &yyv1314[yyj1314]
				yyv1315.CodecDecodeSelf(d)
			}

		}
		if yyrt1314 {
			for ; yyj1314 < yyl1314; yyj1314++ {
				yyv1314 = append(yyv1314, NodeUtilization{})
				yyh1314.ElemContainerState(yyj1314)
				if r.TryDecodeAsNil() {
					yyv1314[yyj1314] = NodeUtilization{}
				} else {
					yyv1316 := &yyv1314[yyj1314]
					yyv1316.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1314 := 0
		for ; !r.CheckBreak(); yyj1314++ {

			if yyj1314 >= len(yyv1314) {
				yyv1314 = append(yyv1314, NodeUtilization{}) // var yyz1314 NodeUtilization
				yyc1314 = true
			}
			yyh1314.ElemContainerState(yyj1314)
			if yyj1314 < len(yyv1314) {
				if r.TryDecodeAsNil() {
					yyv1314[yyj1314] = NodeUtilization{}
				} else {
					yyv1317 := &yyv1314[yyj1314]
					yyv1317.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1314 < len(yyv1314) {
			yyv1314 = yyv1314[:yyj1314]
			yyc1314 = true
		} else if yyj1314 == 0 && yyv1314 == nil {
			yyv1314 = []NodeUtilization{}
			yyc1314 = true
		}
	}
	yyh1314.End()
	if yyc1314 {
		*v = yyv1314
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1318 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1319 := &yyv1318
		yy1319.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1320 := *v
	yyh1320, yyl1320 := z.DecSliceHelperStart()
	var yyc1320 bool
	if yyl1320 == 0 {
		if yyv1320 == nil {
			yyv1320 = []ClusterAutoscaler{}
			yyc1320 = true
		} else if len(yyv1320) != 0 {
			yyv1320 = yyv1320[:0]
			yyc1320 = true
		}
	} else if yyl1320 > 0 {
		var yyrr1320, yyrl1320 int
		var yyrt1320 bool
		if yyl1320 > cap(yyv1320) {

			yyrg1320 := len(yyv1320) > 0
			yyv21320 := yyv1320
			yyrl1320, yyrt1320 = z.DecInferLen(yyl1320, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1320 {
				if yyrl1320 <= cap(yyv1320) {
					yyv1320 = yyv1320[:yyrl1320]
				} else {
					yyv1320 = make([]ClusterAutoscaler, yyrl1320)
				}
			} else {
				yyv1320 = make([]ClusterAutoscaler, yyrl1320)
			}
			yyc1320 = true
			yyrr1320 = len(yyv1320)
			if yyrg1320 {
				copy(yyv1320, yyv21320)
			}
		} else if yyl1320 != len(yyv1320) {
			yyv1320 = yyv1320[:yyl1320]
			yyc1320 = true
		}
		yyj1320 := 0
		for ; yyj1320 < yyrr1320; yyj1320++ {
			yyh1320.ElemContainerState(yyj1320)
			if r.TryDecodeAsNil() {
				yyv1320[yyj1320] = ClusterAutoscaler{}
			} else {
				yyv1321 := &yyv1320[yyj1320]
				yyv1321.CodecDecodeSelf(d)
			}

		}
		if yyrt1320 {
			for ; yyj1320 < yyl1320; yyj1320++ {
				yyv1320 = append(yyv1320, ClusterAutoscaler{})
				yyh1320.ElemContainerState(yyj1320)
				if r.TryDecodeAsNil() {
					yyv1320[yyj1320] = ClusterAutoscaler{}
				} else {
					yyv1322 := &yyv1320[yyj1320]
					yyv1322.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1320 := 0
		for ; !r.CheckBreak(); yyj1320++ {

			if yyj1320 >= len(yyv1320) {
				yyv1320 = append(yyv1320, ClusterAutoscaler{}) // var yyz1320 ClusterAutoscaler
				yyc1320 = true
			}
			yyh1320.ElemContainerState(yyj1320)
			if yyj1320 < len(yyv1320) {
				if r.TryDecodeAsNil() {
					yyv1320[yyj1320] = ClusterAutoscaler{}
				} else {
					yyv1323 := &yyv1320[yyj1320]
					yyv1323.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1320 < len(yyv1320) {
			yyv1320 = yyv1320[:yyj1320]
			yyc1320 = true
		} else if yyj1320 == 0 && yyv1320 == nil {
			yyv1320 = []ClusterAutoscaler{}
			yyc1320 = true
		}
	}
	yyh1320.End()
	if yyc1320 {
		*v = yyv1320
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1324 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1325 := &yyv1324
		yy1325.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1326 := *v
	yyh1326, yyl1326 := z.DecSliceHelperStart()
	var yyc1326 bool
	if yyl1326 == 0 {
		if yyv1326 == nil {
			yyv1326 = []LabelSelectorRequirement{}
			yyc1326 = true
		} else if len(yyv1326) != 0 {
			yyv1326 = yyv1326[:0]
			yyc1326 = true
		}
	} else if yyl1326 > 0 {
		var yyrr1326, yyrl1326 int
		var yyrt1326 bool
		if yyl1326 > cap(yyv1326) {

			yyrg1326 := len(yyv1326) > 0
			yyv21326 := yyv1326
			yyrl1326, yyrt1326 = z.DecInferLen(yyl1326, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1326 {
				if yyrl1326 <= cap(yyv1326) {
					yyv1326 = yyv1326[:yyrl1326]
				} else {
					yyv1326 = make([]LabelSelectorRequirement, yyrl1326)
				}
			} else {
				yyv1326 = make([]LabelSelectorRequirement, yyrl1326)
			}
			yyc1326 = true
			yyrr1326 = len(yyv1326)
			if yyrg1326 {
				copy(yyv1326, yyv21326)
			}
		} else if yyl1326 != len(yyv1326) {
			yyv1326 = yyv1326[:yyl1326]
			yyc1326 = true
		}
		yyj1326 := 0
		for ; yyj1326 < yyrr1326; yyj1326++ {
			yyh1326.ElemContainerState(yyj1326)
			if r.TryDecodeAsNil() {
				yyv1326[yyj1326] = LabelSelectorRequirement{}
			} else {
				yyv1327 := &yyv1326[yyj1326]
				yyv1327.CodecDecodeSelf(d)
			}

		}
		if yyrt1326 {
			for ; yyj1326 < yyl1326; yyj1326++ {
				yyv1326 = append(yyv1326, LabelSelectorRequirement{})
				yyh1326.ElemContainerState(yyj1326)
				if r.TryDecodeAsNil() {
					yyv1326[yyj1326] = LabelSelectorRequirement{}
				} else {
					yyv1328 := &yyv1326[yyj1326]
					yyv1328.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1326 := 0
		for ; !r.CheckBreak(); yyj1326++ {

			if yyj1326 >= len(yyv1326) {
				yyv1326 = append(yyv1326, LabelSelectorRequirement{}) // var yyz1326 LabelSelectorRequirement
				yyc1326 = true
			}
			yyh1326.ElemContainerState(yyj1326)
			if yyj1326 < len(yyv1326) {
				if r.TryDecodeAsNil() {
					yyv1326[yyj1326] = LabelSelectorRequirement{}
				} else {
					yyv1329 := &yyv1326[yyj1326]
					yyv1329.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1326 < len(yyv1326) {
			yyv1326 = yyv1326[:yyj1326]
			yyc1326 = true
		} else if yyj1326 == 0 && yyv1326 == nil {
			yyv1326 = []LabelSelectorRequirement{}
			yyc1326 = true
		}
	}
	yyh1326.End()
	if yyc1326 {
		*v = yyv1326
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1330 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1331 := &yyv1330
		yy1331.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1332 := *v
	yyh1332, yyl1332 := z.DecSliceHelperStart()
	var yyc1332 bool
	if yyl1332 == 0 {
		if yyv1332 == nil {
			yyv1332 = []ReplicaSet{}
			yyc1332 = true
		} else if len(yyv1332) != 0 {
			yyv1332 = yyv1332[:0]
			yyc1332 = true
		}
	} else if yyl1332 > 0 {
		var yyrr1332, yyrl1332 int
		var yyrt1332 bool
		if yyl1332 > cap(yyv1332) {

			yyrg1332 := len(yyv1332) > 0
			yyv21332 := yyv1332
			yyrl1332, yyrt1332 = z.DecInferLen(yyl1332, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1332 {
				if yyrl1332 <= cap(yyv1332) {
					yyv1332 = yyv1332[:yyrl1332]
				} else {
					yyv1332 = make([]ReplicaSet, yyrl1332)
				}
			} else {
				yyv1332 = make([]ReplicaSet, yyrl1332)
			}
			yyc1332 = true
			yyrr1332 = len(yyv1332)
			if yyrg1332 {
				copy(yyv1332, yyv21332)
			}
		} else if yyl1332 != len(yyv1332) {
			yyv1332 = yyv1332[:yyl1332]
			yyc1332 = true
		}
		yyj1332 := 0
		for ; yyj1332 < yyrr1332; yyj1332++ {
			yyh1332.ElemContainerState(yyj1332)
			if r.TryDecodeAsNil() {
				yyv1332[yyj1332] = ReplicaSet{}
			} else {
				yyv1333 := &yyv1332[yyj1332]
				yyv1333.CodecDecodeSelf(d)
			}

		}
		if yyrt1332 {
			for ; yyj1332 < yyl1332; yyj1332++ {
				yyv1332 = append(yyv1332, ReplicaSet{})
				yyh1332.ElemContainerState(yyj1332)
				if r.TryDecodeAsNil() {
					yyv1332[yyj1332] = ReplicaSet{}
				} else {
					yyv1334 := &yyv1332[yyj1332]
					yyv1334.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1332 := 0
		for ; !r.CheckBreak(); yyj1332++ {

			if yyj1332 >= len(yyv1332) {
				yyv1332 = append(yyv1332, ReplicaSet{}) // var yyz1332 ReplicaSet
				yyc1332 = true
			}
			yyh1332.ElemContainerState(yyj1332)
			if yyj1332 < len(yyv1332) {
				if r.TryDecodeAsNil() {
					yyv1332[yyj1332] = ReplicaSet{}
				} else {
					yyv1335 := &yyv1332[yyj1332]
					yyv1335.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1332 < len(yyv1332) {
			yyv1332 = yyv1332[:yyj1332]
			yyc1332 = true
		} else if yyj1332 == 0 && yyv1332 == nil {
			yyv1332 = []ReplicaSet{}
			yyc1332 = true
		}
	}
	yyh1332.End()
	if yyc1332 {
		*v = yyv1332
	}
}
