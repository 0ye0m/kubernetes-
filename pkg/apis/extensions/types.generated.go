/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.LabelSelector
		var v3 pkg3_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = x.Selector != nil
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yy39.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy40 := &x.ObjectMeta
					yy40.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy42 := &x.Spec
					yy42.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.Spec
					yy43.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy45 := &x.Status
					yy45.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy46 := &x.Status
					yy46.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym47 := z.DecBinary()
	_ = yym47
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct48 := r.ContainerType()
		if yyct48 == codecSelferValueTypeMap1234 {
			yyl48 := r.ReadMapStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl48, d)
			}
		} else if yyct48 == codecSelferValueTypeArray1234 {
			yyl48 := r.ReadArrayStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl48, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys49Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys49Slc
	var yyhl49 bool = l >= 0
	for yyj49 := 0; ; yyj49++ {
		if yyhl49 {
			if yyj49 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys49Slc = r.DecodeBytes(yys49Slc, true, true)
		yys49 := string(yys49Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys49 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv52 := &x.ObjectMeta
				yyv52.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv53 := &x.Spec
				yyv53.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv54 := &x.Status
				yyv54.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys49)
		} // end switch yys49
	} // end for yyj49
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj55 int
	var yyb55 bool
	var yyhl55 bool = l >= 0
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv58 := &x.ObjectMeta
		yyv58.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv59 := &x.Spec
		yyv59.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv60 := &x.Status
		yyv60.CodecDecodeSelf(d)
	}
	for {
		yyj55++
		if yyhl55 {
			yyb55 = yyj55 > l
		} else {
			yyb55 = r.CheckBreak()
		}
		if yyb55 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj55-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym61 := z.EncBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep62 := !z.EncBinary()
			yy2arr62 := z.EncBasicHandle().StructToArray
			var yyq62 [2]bool
			_, _, _ = yysep62, yyq62, yy2arr62
			const yyr62 bool = false
			yyq62[0] = x.Kind != ""
			yyq62[1] = x.APIVersion != ""
			var yynn62 int
			if yyr62 || yy2arr62 {
				r.EncodeArrayStart(2)
			} else {
				yynn62 = 0
				for _, b := range yyq62 {
					if b {
						yynn62++
					}
				}
				r.EncodeMapStart(yynn62)
				yynn62 = 0
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[0] {
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym65 := z.EncBinary()
					_ = yym65
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[1] {
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym69 := z.DecBinary()
	_ = yym69
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct70 := r.ContainerType()
		if yyct70 == codecSelferValueTypeMap1234 {
			yyl70 := r.ReadMapStart()
			if yyl70 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl70, d)
			}
		} else if yyct70 == codecSelferValueTypeArray1234 {
			yyl70 := r.ReadArrayStart()
			if yyl70 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl70, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys71Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys71Slc
	var yyhl71 bool = l >= 0
	for yyj71 := 0; ; yyj71++ {
		if yyhl71 {
			if yyj71 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys71Slc = r.DecodeBytes(yys71Slc, true, true)
		yys71 := string(yys71Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys71 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys71)
		} // end switch yys71
	} // end for yyj71
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj74 int
	var yyb74 bool
	var yyhl74 bool = l >= 0
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj74++
	if yyhl74 {
		yyb74 = yyj74 > l
	} else {
		yyb74 = r.CheckBreak()
	}
	if yyb74 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj74++
		if yyhl74 {
			yyb74 = yyj74 > l
		} else {
			yyb74 = r.CheckBreak()
		}
		if yyb74 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj74-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym77 := z.EncBinary()
		_ = yym77
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep78 := !z.EncBinary()
			yy2arr78 := z.EncBasicHandle().StructToArray
			var yyq78 [2]bool
			_, _, _ = yysep78, yyq78, yy2arr78
			const yyr78 bool = false
			var yynn78 int
			if yyr78 || yy2arr78 {
				r.EncodeArrayStart(2)
			} else {
				yynn78 = 2
				for _, b := range yyq78 {
					if b {
						yynn78++
					}
				}
				r.EncodeMapStart(yynn78)
				yynn78 = 0
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym80 := z.EncBinary()
				_ = yym80
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym81 := z.EncBinary()
				_ = yym81
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy83 := &x.TargetValue
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else if z.HasExtensions() && z.EncExt(yy83) {
				} else if !yym84 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy83)
				} else {
					z.EncFallback(yy83)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy85 := &x.TargetValue
				yym86 := z.EncBinary()
				_ = yym86
				if false {
				} else if z.HasExtensions() && z.EncExt(yy85) {
				} else if !yym86 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy85)
				} else {
					z.EncFallback(yy85)
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym87 := z.DecBinary()
	_ = yym87
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct88 := r.ContainerType()
		if yyct88 == codecSelferValueTypeMap1234 {
			yyl88 := r.ReadMapStart()
			if yyl88 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl88, d)
			}
		} else if yyct88 == codecSelferValueTypeArray1234 {
			yyl88 := r.ReadArrayStart()
			if yyl88 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl88, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys89Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys89Slc
	var yyhl89 bool = l >= 0
	for yyj89 := 0; ; yyj89++ {
		if yyhl89 {
			if yyj89 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys89Slc = r.DecodeBytes(yys89Slc, true, true)
		yys89 := string(yys89Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys89 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv91 := &x.TargetValue
				yym92 := z.DecBinary()
				_ = yym92
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv91) {
				} else if !yym92 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv91)
				} else {
					z.DecFallback(yyv91, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys89)
		} // end switch yys89
	} // end for yyj89
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj93 int
	var yyb93 bool
	var yyhl93 bool = l >= 0
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv95 := &x.TargetValue
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv95) {
		} else if !yym96 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv95)
		} else {
			z.DecFallback(yyv95, false)
		}
	}
	for {
		yyj93++
		if yyhl93 {
			yyb93 = yyj93 > l
		} else {
			yyb93 = r.CheckBreak()
		}
		if yyb93 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj93-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym97 := z.EncBinary()
		_ = yym97
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep98 := !z.EncBinary()
			yy2arr98 := z.EncBasicHandle().StructToArray
			var yyq98 [1]bool
			_, _, _ = yysep98, yyq98, yy2arr98
			const yyr98 bool = false
			var yynn98 int
			if yyr98 || yy2arr98 {
				r.EncodeArrayStart(1)
			} else {
				yynn98 = 1
				for _, b := range yyq98 {
					if b {
						yynn98++
					}
				}
				r.EncodeMapStart(yynn98)
				yynn98 = 0
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym100 := z.EncBinary()
					_ = yym100
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym101 := z.EncBinary()
					_ = yym101
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct103 := r.ContainerType()
		if yyct103 == codecSelferValueTypeMap1234 {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if yyct103 == codecSelferValueTypeArray1234 {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys104 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv105 := &x.Items
				yym106 := z.DecBinary()
				_ = yym106
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv105), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj107 int
	var yyb107 bool
	var yyhl107 bool = l >= 0
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv108 := &x.Items
		yym109 := z.DecBinary()
		_ = yym109
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv108), d)
		}
	}
	for {
		yyj107++
		if yyhl107 {
			yyb107 = yyj107 > l
		} else {
			yyb107 = r.CheckBreak()
		}
		if yyb107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym110 := z.EncBinary()
		_ = yym110
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep111 := !z.EncBinary()
			yy2arr111 := z.EncBasicHandle().StructToArray
			var yyq111 [2]bool
			_, _, _ = yysep111, yyq111, yy2arr111
			const yyr111 bool = false
			var yynn111 int
			if yyr111 || yy2arr111 {
				r.EncodeArrayStart(2)
			} else {
				yynn111 = 2
				for _, b := range yyq111 {
					if b {
						yynn111++
					}
				}
				r.EncodeMapStart(yynn111)
				yynn111 = 0
			}
			if yyr111 || yy2arr111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym113 := z.EncBinary()
				_ = yym113
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym114 := z.EncBinary()
				_ = yym114
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr111 || yy2arr111 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy116 := &x.CurrentValue
				yym117 := z.EncBinary()
				_ = yym117
				if false {
				} else if z.HasExtensions() && z.EncExt(yy116) {
				} else if !yym117 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy116)
				} else {
					z.EncFallback(yy116)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy118 := &x.CurrentValue
				yym119 := z.EncBinary()
				_ = yym119
				if false {
				} else if z.HasExtensions() && z.EncExt(yy118) {
				} else if !yym119 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy118)
				} else {
					z.EncFallback(yy118)
				}
			}
			if yyr111 || yy2arr111 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym120 := z.DecBinary()
	_ = yym120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct121 := r.ContainerType()
		if yyct121 == codecSelferValueTypeMap1234 {
			yyl121 := r.ReadMapStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl121, d)
			}
		} else if yyct121 == codecSelferValueTypeArray1234 {
			yyl121 := r.ReadArrayStart()
			if yyl121 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl121, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys122Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys122Slc
	var yyhl122 bool = l >= 0
	for yyj122 := 0; ; yyj122++ {
		if yyhl122 {
			if yyj122 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys122Slc = r.DecodeBytes(yys122Slc, true, true)
		yys122 := string(yys122Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys122 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv124 := &x.CurrentValue
				yym125 := z.DecBinary()
				_ = yym125
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv124) {
				} else if !yym125 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv124)
				} else {
					z.DecFallback(yyv124, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys122)
		} // end switch yys122
	} // end for yyj122
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj126 int
	var yyb126 bool
	var yyhl126 bool = l >= 0
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv128 := &x.CurrentValue
		yym129 := z.DecBinary()
		_ = yym129
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv128) {
		} else if !yym129 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv128)
		} else {
			z.DecFallback(yyv128, false)
		}
	}
	for {
		yyj126++
		if yyhl126 {
			yyb126 = yyj126 > l
		} else {
			yyb126 = r.CheckBreak()
		}
		if yyb126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym130 := z.EncBinary()
		_ = yym130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep131 := !z.EncBinary()
			yy2arr131 := z.EncBasicHandle().StructToArray
			var yyq131 [1]bool
			_, _, _ = yysep131, yyq131, yy2arr131
			const yyr131 bool = false
			var yynn131 int
			if yyr131 || yy2arr131 {
				r.EncodeArrayStart(1)
			} else {
				yynn131 = 1
				for _, b := range yyq131 {
					if b {
						yynn131++
					}
				}
				r.EncodeMapStart(yynn131)
				yynn131 = 0
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym133 := z.EncBinary()
					_ = yym133
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym134 := z.EncBinary()
					_ = yym134
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym135 := z.DecBinary()
	_ = yym135
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct136 := r.ContainerType()
		if yyct136 == codecSelferValueTypeMap1234 {
			yyl136 := r.ReadMapStart()
			if yyl136 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl136, d)
			}
		} else if yyct136 == codecSelferValueTypeArray1234 {
			yyl136 := r.ReadArrayStart()
			if yyl136 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl136, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys137Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys137Slc
	var yyhl137 bool = l >= 0
	for yyj137 := 0; ; yyj137++ {
		if yyhl137 {
			if yyj137 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys137Slc = r.DecodeBytes(yys137Slc, true, true)
		yys137 := string(yys137Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys137 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv138 := &x.Items
				yym139 := z.DecBinary()
				_ = yym139
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv138), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys137)
		} // end switch yys137
	} // end for yyj137
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj140 int
	var yyb140 bool
	var yyhl140 bool = l >= 0
	yyj140++
	if yyhl140 {
		yyb140 = yyj140 > l
	} else {
		yyb140 = r.CheckBreak()
	}
	if yyb140 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv141 := &x.Items
		yym142 := z.DecBinary()
		_ = yym142
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv141), d)
		}
	}
	for {
		yyj140++
		if yyhl140 {
			yyb140 = yyj140 > l
		} else {
			yyb140 = r.CheckBreak()
		}
		if yyb140 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj140-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [5]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.Kind != ""
			yyq144[1] = x.APIVersion != ""
			yyq144[2] = true
			yyq144[3] = x.Description != ""
			yyq144[4] = len(x.Versions) != 0
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(5)
			} else {
				yynn144 = 0
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[1] {
					yym149 := z.EncBinary()
					_ = yym149
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym150 := z.EncBinary()
					_ = yym150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[2] {
					yy152 := &x.ObjectMeta
					yy152.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy153 := &x.ObjectMeta
					yy153.CodecEncodeSelf(e)
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[3] {
					yym155 := z.EncBinary()
					_ = yym155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym156 := z.EncBinary()
					_ = yym156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym158 := z.EncBinary()
						_ = yym158
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym159 := z.EncBinary()
						_ = yym159
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym160 := z.DecBinary()
	_ = yym160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct161 := r.ContainerType()
		if yyct161 == codecSelferValueTypeMap1234 {
			yyl161 := r.ReadMapStart()
			if yyl161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl161, d)
			}
		} else if yyct161 == codecSelferValueTypeArray1234 {
			yyl161 := r.ReadArrayStart()
			if yyl161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys162Slc
	var yyhl162 bool = l >= 0
	for yyj162 := 0; ; yyj162++ {
		if yyhl162 {
			if yyj162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys162Slc = r.DecodeBytes(yys162Slc, true, true)
		yys162 := string(yys162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys162 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv165 := &x.ObjectMeta
				yyv165.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv167 := &x.Versions
				yym168 := z.DecBinary()
				_ = yym168
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv167), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys162)
		} // end switch yys162
	} // end for yyj162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj169 int
	var yyb169 bool
	var yyhl169 bool = l >= 0
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv172 := &x.ObjectMeta
		yyv172.CodecDecodeSelf(d)
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj169++
	if yyhl169 {
		yyb169 = yyj169 > l
	} else {
		yyb169 = r.CheckBreak()
	}
	if yyb169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv174 := &x.Versions
		yym175 := z.DecBinary()
		_ = yym175
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv174), d)
		}
	}
	for {
		yyj169++
		if yyhl169 {
			yyb169 = yyj169 > l
		} else {
			yyb169 = r.CheckBreak()
		}
		if yyb169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym176 := z.EncBinary()
		_ = yym176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep177 := !z.EncBinary()
			yy2arr177 := z.EncBasicHandle().StructToArray
			var yyq177 [4]bool
			_, _, _ = yysep177, yyq177, yy2arr177
			const yyr177 bool = false
			yyq177[0] = x.Kind != ""
			yyq177[1] = x.APIVersion != ""
			yyq177[2] = true
			var yynn177 int
			if yyr177 || yy2arr177 {
				r.EncodeArrayStart(4)
			} else {
				yynn177 = 1
				for _, b := range yyq177 {
					if b {
						yynn177++
					}
				}
				r.EncodeMapStart(yynn177)
				yynn177 = 0
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[0] {
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq177[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym180 := z.EncBinary()
					_ = yym180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[1] {
					yym182 := z.EncBinary()
					_ = yym182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq177[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym183 := z.EncBinary()
					_ = yym183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[2] {
					yy185 := &x.ListMeta
					yym186 := z.EncBinary()
					_ = yym186
					if false {
					} else if z.HasExtensions() && z.EncExt(yy185) {
					} else {
						z.EncFallback(yy185)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq177[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy187 := &x.ListMeta
					yym188 := z.EncBinary()
					_ = yym188
					if false {
					} else if z.HasExtensions() && z.EncExt(yy187) {
					} else {
						z.EncFallback(yy187)
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym190 := z.EncBinary()
					_ = yym190
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym192 := z.DecBinary()
	_ = yym192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct193 := r.ContainerType()
		if yyct193 == codecSelferValueTypeMap1234 {
			yyl193 := r.ReadMapStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl193, d)
			}
		} else if yyct193 == codecSelferValueTypeArray1234 {
			yyl193 := r.ReadArrayStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys194Slc
	var yyhl194 bool = l >= 0
	for yyj194 := 0; ; yyj194++ {
		if yyhl194 {
			if yyj194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys194Slc = r.DecodeBytes(yys194Slc, true, true)
		yys194 := string(yys194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys194 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv197 := &x.ListMeta
				yym198 := z.DecBinary()
				_ = yym198
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv197) {
				} else {
					z.DecFallback(yyv197, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv199 := &x.Items
				yym200 := z.DecBinary()
				_ = yym200
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv199), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys194)
		} // end switch yys194
	} // end for yyj194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj201 int
	var yyb201 bool
	var yyhl201 bool = l >= 0
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv204 := &x.ListMeta
		yym205 := z.DecBinary()
		_ = yym205
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv204) {
		} else {
			z.DecFallback(yyv204, false)
		}
	}
	yyj201++
	if yyhl201 {
		yyb201 = yyj201 > l
	} else {
		yyb201 = r.CheckBreak()
	}
	if yyb201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv206 := &x.Items
		yym207 := z.DecBinary()
		_ = yym207
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv206), d)
		}
	}
	for {
		yyj201++
		if yyhl201 {
			yyb201 = yyj201 > l
		} else {
			yyb201 = r.CheckBreak()
		}
		if yyb201 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj201-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym208 := z.EncBinary()
		_ = yym208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep209 := !z.EncBinary()
			yy2arr209 := z.EncBasicHandle().StructToArray
			var yyq209 [1]bool
			_, _, _ = yysep209, yyq209, yy2arr209
			const yyr209 bool = false
			yyq209[0] = x.Name != ""
			var yynn209 int
			if yyr209 || yy2arr209 {
				r.EncodeArrayStart(1)
			} else {
				yynn209 = 0
				for _, b := range yyq209 {
					if b {
						yynn209++
					}
				}
				r.EncodeMapStart(yynn209)
				yynn209 = 0
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq209[0] {
					yym211 := z.EncBinary()
					_ = yym211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq209[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym212 := z.EncBinary()
					_ = yym212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym213 := z.DecBinary()
	_ = yym213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct214 := r.ContainerType()
		if yyct214 == codecSelferValueTypeMap1234 {
			yyl214 := r.ReadMapStart()
			if yyl214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl214, d)
			}
		} else if yyct214 == codecSelferValueTypeArray1234 {
			yyl214 := r.ReadArrayStart()
			if yyl214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys215Slc
	var yyhl215 bool = l >= 0
	for yyj215 := 0; ; yyj215++ {
		if yyhl215 {
			if yyj215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys215Slc = r.DecodeBytes(yys215Slc, true, true)
		yys215 := string(yys215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys215 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys215)
		} // end switch yys215
	} // end for yyj215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj217 int
	var yyb217 bool
	var yyhl217 bool = l >= 0
	yyj217++
	if yyhl217 {
		yyb217 = yyj217 > l
	} else {
		yyb217 = r.CheckBreak()
	}
	if yyb217 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj217++
		if yyhl217 {
			yyb217 = yyj217 > l
		} else {
			yyb217 = r.CheckBreak()
		}
		if yyb217 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj217-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym219 := z.EncBinary()
		_ = yym219
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep220 := !z.EncBinary()
			yy2arr220 := z.EncBasicHandle().StructToArray
			var yyq220 [4]bool
			_, _, _ = yysep220, yyq220, yy2arr220
			const yyr220 bool = false
			yyq220[0] = x.Kind != ""
			yyq220[1] = x.APIVersion != ""
			yyq220[2] = true
			yyq220[3] = len(x.Data) != 0
			var yynn220 int
			if yyr220 || yy2arr220 {
				r.EncodeArrayStart(4)
			} else {
				yynn220 = 0
				for _, b := range yyq220 {
					if b {
						yynn220++
					}
				}
				r.EncodeMapStart(yynn220)
				yynn220 = 0
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[0] {
					yym222 := z.EncBinary()
					_ = yym222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq220[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym223 := z.EncBinary()
					_ = yym223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[1] {
					yym225 := z.EncBinary()
					_ = yym225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq220[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym226 := z.EncBinary()
					_ = yym226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[2] {
					yy228 := &x.ObjectMeta
					yy228.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq220[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy229 := &x.ObjectMeta
					yy229.CodecEncodeSelf(e)
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq220[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym231 := z.EncBinary()
						_ = yym231
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq220[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym232 := z.EncBinary()
						_ = yym232
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr220 || yy2arr220 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym233 := z.DecBinary()
	_ = yym233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct234 := r.ContainerType()
		if yyct234 == codecSelferValueTypeMap1234 {
			yyl234 := r.ReadMapStart()
			if yyl234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl234, d)
			}
		} else if yyct234 == codecSelferValueTypeArray1234 {
			yyl234 := r.ReadArrayStart()
			if yyl234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys235Slc
	var yyhl235 bool = l >= 0
	for yyj235 := 0; ; yyj235++ {
		if yyhl235 {
			if yyj235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys235Slc = r.DecodeBytes(yys235Slc, true, true)
		yys235 := string(yys235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys235 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv238 := &x.ObjectMeta
				yyv238.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv239 := &x.Data
				yym240 := z.DecBinary()
				_ = yym240
				if false {
				} else {
					*yyv239 = r.DecodeBytes(*(*[]byte)(yyv239), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys235)
		} // end switch yys235
	} // end for yyj235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj241 int
	var yyb241 bool
	var yyhl241 bool = l >= 0
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv244 := &x.ObjectMeta
		yyv244.CodecDecodeSelf(d)
	}
	yyj241++
	if yyhl241 {
		yyb241 = yyj241 > l
	} else {
		yyb241 = r.CheckBreak()
	}
	if yyb241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv245 := &x.Data
		yym246 := z.DecBinary()
		_ = yym246
		if false {
		} else {
			*yyv245 = r.DecodeBytes(*(*[]byte)(yyv245), false, false)
		}
	}
	for {
		yyj241++
		if yyhl241 {
			yyb241 = yyj241 > l
		} else {
			yyb241 = r.CheckBreak()
		}
		if yyb241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym247 := z.EncBinary()
		_ = yym247
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep248 := !z.EncBinary()
			yy2arr248 := z.EncBasicHandle().StructToArray
			var yyq248 [5]bool
			_, _, _ = yysep248, yyq248, yy2arr248
			const yyr248 bool = false
			yyq248[0] = x.Kind != ""
			yyq248[1] = x.APIVersion != ""
			yyq248[2] = true
			yyq248[3] = true
			yyq248[4] = true
			var yynn248 int
			if yyr248 || yy2arr248 {
				r.EncodeArrayStart(5)
			} else {
				yynn248 = 0
				for _, b := range yyq248 {
					if b {
						yynn248++
					}
				}
				r.EncodeMapStart(yynn248)
				yynn248 = 0
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq248[0] {
					yym250 := z.EncBinary()
					_ = yym250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq248[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym251 := z.EncBinary()
					_ = yym251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq248[1] {
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq248[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym254 := z.EncBinary()
					_ = yym254
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq248[2] {
					yy256 := &x.ObjectMeta
					yy256.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq248[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy257 := &x.ObjectMeta
					yy257.CodecEncodeSelf(e)
				}
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq248[3] {
					yy259 := &x.Spec
					yy259.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq248[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy260 := &x.Spec
					yy260.CodecEncodeSelf(e)
				}
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq248[4] {
					yy262 := &x.Status
					yy262.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq248[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy263 := &x.Status
					yy263.CodecEncodeSelf(e)
				}
			}
			if yyr248 || yy2arr248 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym264 := z.DecBinary()
	_ = yym264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct265 := r.ContainerType()
		if yyct265 == codecSelferValueTypeMap1234 {
			yyl265 := r.ReadMapStart()
			if yyl265 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl265, d)
			}
		} else if yyct265 == codecSelferValueTypeArray1234 {
			yyl265 := r.ReadArrayStart()
			if yyl265 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl265, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys266Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys266Slc
	var yyhl266 bool = l >= 0
	for yyj266 := 0; ; yyj266++ {
		if yyhl266 {
			if yyj266 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys266Slc = r.DecodeBytes(yys266Slc, true, true)
		yys266 := string(yys266Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys266 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv269 := &x.ObjectMeta
				yyv269.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv270 := &x.Spec
				yyv270.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv271 := &x.Status
				yyv271.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys266)
		} // end switch yys266
	} // end for yyj266
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj272 int
	var yyb272 bool
	var yyhl272 bool = l >= 0
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv275 := &x.ObjectMeta
		yyv275.CodecDecodeSelf(d)
	}
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv276 := &x.Spec
		yyv276.CodecDecodeSelf(d)
	}
	yyj272++
	if yyhl272 {
		yyb272 = yyj272 > l
	} else {
		yyb272 = r.CheckBreak()
	}
	if yyb272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv277 := &x.Status
		yyv277.CodecDecodeSelf(d)
	}
	for {
		yyj272++
		if yyhl272 {
			yyb272 = yyj272 > l
		} else {
			yyb272 = r.CheckBreak()
		}
		if yyb272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym278 := z.EncBinary()
		_ = yym278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep279 := !z.EncBinary()
			yy2arr279 := z.EncBasicHandle().StructToArray
			var yyq279 [9]bool
			_, _, _ = yysep279, yyq279, yy2arr279
			const yyr279 bool = false
			yyq279[0] = x.Replicas != 0
			yyq279[1] = x.Selector != nil
			yyq279[3] = true
			yyq279[4] = x.MinReadySeconds != 0
			yyq279[5] = x.RevisionHistoryLimit != nil
			yyq279[6] = x.Paused != false
			yyq279[7] = x.RollbackTo != nil
			yyq279[8] = x.ProgressDeadlineSeconds != nil
			var yynn279 int
			if yyr279 || yy2arr279 {
				r.EncodeArrayStart(9)
			} else {
				yynn279 = 1
				for _, b := range yyq279 {
					if b {
						yynn279++
					}
				}
				r.EncodeMapStart(yynn279)
				yynn279 = 0
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[0] {
					yym281 := z.EncBinary()
					_ = yym281
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym282 := z.EncBinary()
					_ = yym282
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym284 := z.EncBinary()
						_ = yym284
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym285 := z.EncBinary()
						_ = yym285
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy287 := &x.Template
				yy287.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy288 := &x.Template
				yy288.CodecEncodeSelf(e)
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[3] {
					yy290 := &x.Strategy
					yy290.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy291 := &x.Strategy
					yy291.CodecEncodeSelf(e)
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[4] {
					yym293 := z.EncBinary()
					_ = yym293
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq279[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym294 := z.EncBinary()
					_ = yym294
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[5] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy296 := *x.RevisionHistoryLimit
						yym297 := z.EncBinary()
						_ = yym297
						if false {
						} else {
							r.EncodeInt(int64(yy296))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy298 := *x.RevisionHistoryLimit
						yym299 := z.EncBinary()
						_ = yym299
						if false {
						} else {
							r.EncodeInt(int64(yy298))
						}
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[6] {
					yym301 := z.EncBinary()
					_ = yym301
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq279[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[8] {
					if x.ProgressDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy305 := *x.ProgressDeadlineSeconds
						yym306 := z.EncBinary()
						_ = yym306
						if false {
						} else {
							r.EncodeInt(int64(yy305))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("progressDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ProgressDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy307 := *x.ProgressDeadlineSeconds
						yym308 := z.EncBinary()
						_ = yym308
						if false {
						} else {
							r.EncodeInt(int64(yy307))
						}
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym314 := z.DecBinary()
				_ = yym314
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv315 := &x.Template
				yyv315.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv316 := &x.Strategy
				yyv316.CodecDecodeSelf(d)
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int32)
				}
				yym319 := z.DecBinary()
				_ = yym319
				if false {
				} else {
					*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		case "progressDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ProgressDeadlineSeconds != nil {
					x.ProgressDeadlineSeconds = nil
				}
			} else {
				if x.ProgressDeadlineSeconds == nil {
					x.ProgressDeadlineSeconds = new(int32)
				}
				yym323 := z.DecBinary()
				_ = yym323
				if false {
				} else {
					*((*int32)(x.ProgressDeadlineSeconds)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj324 int
	var yyb324 bool
	var yyhl324 bool = l >= 0
	yyj324++
	if yyhl324 {
		yyb324 = yyj324 > l
	} else {
		yyb324 = r.CheckBreak()
	}
	if yyb324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj324++
	if yyhl324 {
		yyb324 = yyj324 > l
	} else {
		yyb324 = r.CheckBreak()
	}
	if yyb324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym327 := z.DecBinary()
		_ = yym327
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj324++
	if yyhl324 {
		yyb324 = yyj324 > l
	} else {
		yyb324 = r.CheckBreak()
	}
	if yyb324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv328 := &x.Template
		yyv328.CodecDecodeSelf(d)
	}
	yyj324++
	if yyhl324 {
		yyb324 = yyj324 > l
	} else {
		yyb324 = r.CheckBreak()
	}
	if yyb324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv329 := &x.Strategy
		yyv329.CodecDecodeSelf(d)
	}
	yyj324++
	if yyhl324 {
		yyb324 = yyj324 > l
	} else {
		yyb324 = r.CheckBreak()
	}
	if yyb324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj324++
	if yyhl324 {
		yyb324 = yyj324 > l
	} else {
		yyb324 = r.CheckBreak()
	}
	if yyb324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int32)
		}
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
		}
	}
	yyj324++
	if yyhl324 {
		yyb324 = yyj324 > l
	} else {
		yyb324 = r.CheckBreak()
	}
	if yyb324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj324++
	if yyhl324 {
		yyb324 = yyj324 > l
	} else {
		yyb324 = r.CheckBreak()
	}
	if yyb324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	yyj324++
	if yyhl324 {
		yyb324 = yyj324 > l
	} else {
		yyb324 = r.CheckBreak()
	}
	if yyb324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ProgressDeadlineSeconds != nil {
			x.ProgressDeadlineSeconds = nil
		}
	} else {
		if x.ProgressDeadlineSeconds == nil {
			x.ProgressDeadlineSeconds = new(int32)
		}
		yym336 := z.DecBinary()
		_ = yym336
		if false {
		} else {
			*((*int32)(x.ProgressDeadlineSeconds)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj324++
		if yyhl324 {
			yyb324 = yyj324 > l
		} else {
			yyb324 = r.CheckBreak()
		}
		if yyb324 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj324-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [5]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Kind != ""
			yyq338[1] = x.APIVersion != ""
			yyq338[3] = len(x.UpdatedAnnotations) != 0
			var yynn338 int
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(5)
			} else {
				yynn338 = 2
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
				yynn338 = 0
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[0] {
					yym340 := z.EncBinary()
					_ = yym340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[1] {
					yym343 := z.EncBinary()
					_ = yym343
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym346 := z.EncBinary()
				_ = yym346
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym347 := z.EncBinary()
				_ = yym347
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym349 := z.EncBinary()
						_ = yym349
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq338[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym350 := z.EncBinary()
						_ = yym350
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy352 := &x.RollbackTo
				yy352.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy353 := &x.RollbackTo
				yy353.CodecEncodeSelf(e)
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym354 := z.DecBinary()
	_ = yym354
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct355 := r.ContainerType()
		if yyct355 == codecSelferValueTypeMap1234 {
			yyl355 := r.ReadMapStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl355, d)
			}
		} else if yyct355 == codecSelferValueTypeArray1234 {
			yyl355 := r.ReadArrayStart()
			if yyl355 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl355, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys356Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys356Slc
	var yyhl356 bool = l >= 0
	for yyj356 := 0; ; yyj356++ {
		if yyhl356 {
			if yyj356 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys356Slc = r.DecodeBytes(yys356Slc, true, true)
		yys356 := string(yys356Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys356 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv360 := &x.UpdatedAnnotations
				yym361 := z.DecBinary()
				_ = yym361
				if false {
				} else {
					z.F.DecMapStringStringX(yyv360, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv362 := &x.RollbackTo
				yyv362.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys356)
		} // end switch yys356
	} // end for yyj356
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj363 int
	var yyb363 bool
	var yyhl363 bool = l >= 0
	yyj363++
	if yyhl363 {
		yyb363 = yyj363 > l
	} else {
		yyb363 = r.CheckBreak()
	}
	if yyb363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj363++
	if yyhl363 {
		yyb363 = yyj363 > l
	} else {
		yyb363 = r.CheckBreak()
	}
	if yyb363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj363++
	if yyhl363 {
		yyb363 = yyj363 > l
	} else {
		yyb363 = r.CheckBreak()
	}
	if yyb363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj363++
	if yyhl363 {
		yyb363 = yyj363 > l
	} else {
		yyb363 = r.CheckBreak()
	}
	if yyb363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv367 := &x.UpdatedAnnotations
		yym368 := z.DecBinary()
		_ = yym368
		if false {
		} else {
			z.F.DecMapStringStringX(yyv367, false, d)
		}
	}
	yyj363++
	if yyhl363 {
		yyb363 = yyj363 > l
	} else {
		yyb363 = r.CheckBreak()
	}
	if yyb363 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv369 := &x.RollbackTo
		yyv369.CodecDecodeSelf(d)
	}
	for {
		yyj363++
		if yyhl363 {
			yyb363 = yyj363 > l
		} else {
			yyb363 = r.CheckBreak()
		}
		if yyb363 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj363-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym370 := z.EncBinary()
		_ = yym370
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep371 := !z.EncBinary()
			yy2arr371 := z.EncBasicHandle().StructToArray
			var yyq371 [1]bool
			_, _, _ = yysep371, yyq371, yy2arr371
			const yyr371 bool = false
			yyq371[0] = x.Revision != 0
			var yynn371 int
			if yyr371 || yy2arr371 {
				r.EncodeArrayStart(1)
			} else {
				yynn371 = 0
				for _, b := range yyq371 {
					if b {
						yynn371++
					}
				}
				r.EncodeMapStart(yynn371)
				yynn371 = 0
			}
			if yyr371 || yy2arr371 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq371[0] {
					yym373 := z.EncBinary()
					_ = yym373
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq371[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr371 || yy2arr371 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym375 := z.DecBinary()
	_ = yym375
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct376 := r.ContainerType()
		if yyct376 == codecSelferValueTypeMap1234 {
			yyl376 := r.ReadMapStart()
			if yyl376 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl376, d)
			}
		} else if yyct376 == codecSelferValueTypeArray1234 {
			yyl376 := r.ReadArrayStart()
			if yyl376 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl376, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys377Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys377Slc
	var yyhl377 bool = l >= 0
	for yyj377 := 0; ; yyj377++ {
		if yyhl377 {
			if yyj377 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys377Slc = r.DecodeBytes(yys377Slc, true, true)
		yys377 := string(yys377Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys377 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys377)
		} // end switch yys377
	} // end for yyj377
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj379 int
	var yyb379 bool
	var yyhl379 bool = l >= 0
	yyj379++
	if yyhl379 {
		yyb379 = yyj379 > l
	} else {
		yyb379 = r.CheckBreak()
	}
	if yyb379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj379++
		if yyhl379 {
			yyb379 = yyj379 > l
		} else {
			yyb379 = r.CheckBreak()
		}
		if yyb379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym381 := z.EncBinary()
		_ = yym381
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep382 := !z.EncBinary()
			yy2arr382 := z.EncBasicHandle().StructToArray
			var yyq382 [2]bool
			_, _, _ = yysep382, yyq382, yy2arr382
			const yyr382 bool = false
			yyq382[0] = x.Type != ""
			yyq382[1] = x.RollingUpdate != nil
			var yynn382 int
			if yyr382 || yy2arr382 {
				r.EncodeArrayStart(2)
			} else {
				yynn382 = 0
				for _, b := range yyq382 {
					if b {
						yynn382++
					}
				}
				r.EncodeMapStart(yynn382)
				yynn382 = 0
			}
			if yyr382 || yy2arr382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq382[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq382[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr382 || yy2arr382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq382[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq382[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr382 || yy2arr382 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym385 := z.DecBinary()
	_ = yym385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct386 := r.ContainerType()
		if yyct386 == codecSelferValueTypeMap1234 {
			yyl386 := r.ReadMapStart()
			if yyl386 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl386, d)
			}
		} else if yyct386 == codecSelferValueTypeArray1234 {
			yyl386 := r.ReadArrayStart()
			if yyl386 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl386, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys387Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys387Slc
	var yyhl387 bool = l >= 0
	for yyj387 := 0; ; yyj387++ {
		if yyhl387 {
			if yyj387 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys387Slc = r.DecodeBytes(yys387Slc, true, true)
		yys387 := string(yys387Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys387 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys387)
		} // end switch yys387
	} // end for yyj387
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj390 int
	var yyb390 bool
	var yyhl390 bool = l >= 0
	yyj390++
	if yyhl390 {
		yyb390 = yyj390 > l
	} else {
		yyb390 = r.CheckBreak()
	}
	if yyb390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj390++
	if yyhl390 {
		yyb390 = yyj390 > l
	} else {
		yyb390 = r.CheckBreak()
	}
	if yyb390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj390++
		if yyhl390 {
			yyb390 = yyj390 > l
		} else {
			yyb390 = r.CheckBreak()
		}
		if yyb390 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj390-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym393 := z.EncBinary()
	_ = yym393
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym394 := z.DecBinary()
	_ = yym394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym395 := z.EncBinary()
		_ = yym395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep396 := !z.EncBinary()
			yy2arr396 := z.EncBasicHandle().StructToArray
			var yyq396 [2]bool
			_, _, _ = yysep396, yyq396, yy2arr396
			const yyr396 bool = false
			yyq396[0] = true
			yyq396[1] = true
			var yynn396 int
			if yyr396 || yy2arr396 {
				r.EncodeArrayStart(2)
			} else {
				yynn396 = 0
				for _, b := range yyq396 {
					if b {
						yynn396++
					}
				}
				r.EncodeMapStart(yynn396)
				yynn396 = 0
			}
			if yyr396 || yy2arr396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq396[0] {
					yy398 := &x.MaxUnavailable
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else if z.HasExtensions() && z.EncExt(yy398) {
					} else if !yym399 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy398)
					} else {
						z.EncFallback(yy398)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq396[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy400 := &x.MaxUnavailable
					yym401 := z.EncBinary()
					_ = yym401
					if false {
					} else if z.HasExtensions() && z.EncExt(yy400) {
					} else if !yym401 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy400)
					} else {
						z.EncFallback(yy400)
					}
				}
			}
			if yyr396 || yy2arr396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq396[1] {
					yy403 := &x.MaxSurge
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else if z.HasExtensions() && z.EncExt(yy403) {
					} else if !yym404 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy403)
					} else {
						z.EncFallback(yy403)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq396[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy405 := &x.MaxSurge
					yym406 := z.EncBinary()
					_ = yym406
					if false {
					} else if z.HasExtensions() && z.EncExt(yy405) {
					} else if !yym406 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy405)
					} else {
						z.EncFallback(yy405)
					}
				}
			}
			if yyr396 || yy2arr396 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym407 := z.DecBinary()
	_ = yym407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct408 := r.ContainerType()
		if yyct408 == codecSelferValueTypeMap1234 {
			yyl408 := r.ReadMapStart()
			if yyl408 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl408, d)
			}
		} else if yyct408 == codecSelferValueTypeArray1234 {
			yyl408 := r.ReadArrayStart()
			if yyl408 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys409Slc
	var yyhl409 bool = l >= 0
	for yyj409 := 0; ; yyj409++ {
		if yyhl409 {
			if yyj409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys409Slc = r.DecodeBytes(yys409Slc, true, true)
		yys409 := string(yys409Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys409 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg5_intstr.IntOrString{}
			} else {
				yyv410 := &x.MaxUnavailable
				yym411 := z.DecBinary()
				_ = yym411
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv410) {
				} else if !yym411 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv410)
				} else {
					z.DecFallback(yyv410, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg5_intstr.IntOrString{}
			} else {
				yyv412 := &x.MaxSurge
				yym413 := z.DecBinary()
				_ = yym413
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv412) {
				} else if !yym413 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv412)
				} else {
					z.DecFallback(yyv412, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys409)
		} // end switch yys409
	} // end for yyj409
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj414 int
	var yyb414 bool
	var yyhl414 bool = l >= 0
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg5_intstr.IntOrString{}
	} else {
		yyv415 := &x.MaxUnavailable
		yym416 := z.DecBinary()
		_ = yym416
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv415) {
		} else if !yym416 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv415)
		} else {
			z.DecFallback(yyv415, false)
		}
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg5_intstr.IntOrString{}
	} else {
		yyv417 := &x.MaxSurge
		yym418 := z.DecBinary()
		_ = yym418
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv417) {
		} else if !yym418 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv417)
		} else {
			z.DecFallback(yyv417, false)
		}
	}
	for {
		yyj414++
		if yyhl414 {
			yyb414 = yyj414 > l
		} else {
			yyb414 = r.CheckBreak()
		}
		if yyb414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [6]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.ObservedGeneration != 0
			yyq420[1] = x.Replicas != 0
			yyq420[2] = x.UpdatedReplicas != 0
			yyq420[3] = x.AvailableReplicas != 0
			yyq420[4] = x.UnavailableReplicas != 0
			yyq420[5] = len(x.Conditions) != 0
			var yynn420 int
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(6)
			} else {
				yynn420 = 0
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
				yynn420 = 0
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[2] {
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[3] {
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq420[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym432 := z.EncBinary()
					_ = yym432
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[4] {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq420[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym437 := z.EncBinary()
						_ = yym437
						if false {
						} else {
							h.encSliceDeploymentCondition(([]DeploymentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym438 := z.EncBinary()
						_ = yym438
						if false {
						} else {
							h.encSliceDeploymentCondition(([]DeploymentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym439 := z.DecBinary()
	_ = yym439
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct440 := r.ContainerType()
		if yyct440 == codecSelferValueTypeMap1234 {
			yyl440 := r.ReadMapStart()
			if yyl440 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl440, d)
			}
		} else if yyct440 == codecSelferValueTypeArray1234 {
			yyl440 := r.ReadArrayStart()
			if yyl440 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl440, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys441Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys441Slc
	var yyhl441 bool = l >= 0
	for yyj441 := 0; ; yyj441++ {
		if yyhl441 {
			if yyj441 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys441Slc = r.DecodeBytes(yys441Slc, true, true)
		yys441 := string(yys441Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys441 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv447 := &x.Conditions
				yym448 := z.DecBinary()
				_ = yym448
				if false {
				} else {
					h.decSliceDeploymentCondition((*[]DeploymentCondition)(yyv447), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys441)
		} // end switch yys441
	} // end for yyj441
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv455 := &x.Conditions
		yym456 := z.DecBinary()
		_ = yym456
		if false {
		} else {
			h.decSliceDeploymentCondition((*[]DeploymentCondition)(yyv455), d)
		}
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym457 := z.EncBinary()
	_ = yym457
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym458 := z.DecBinary()
	_ = yym458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *DeploymentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym459 := z.EncBinary()
		_ = yym459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep460 := !z.EncBinary()
			yy2arr460 := z.EncBasicHandle().StructToArray
			var yyq460 [5]bool
			_, _, _ = yysep460, yyq460, yy2arr460
			const yyr460 bool = false
			yyq460[2] = true
			yyq460[3] = x.Reason != ""
			yyq460[4] = x.Message != ""
			var yynn460 int
			if yyr460 || yy2arr460 {
				r.EncodeArrayStart(5)
			} else {
				yynn460 = 2
				for _, b := range yyq460 {
					if b {
						yynn460++
					}
				}
				r.EncodeMapStart(yynn460)
				yynn460 = 0
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym463 := z.EncBinary()
				_ = yym463
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym464 := z.EncBinary()
				_ = yym464
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[2] {
					yy466 := &x.LastTransitionTime
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else if z.HasExtensions() && z.EncExt(yy466) {
					} else if yym467 {
						z.EncBinaryMarshal(yy466)
					} else if !yym467 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy466)
					} else {
						z.EncFallback(yy466)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq460[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy468 := &x.LastTransitionTime
					yym469 := z.EncBinary()
					_ = yym469
					if false {
					} else if z.HasExtensions() && z.EncExt(yy468) {
					} else if yym469 {
						z.EncBinaryMarshal(yy468)
					} else if !yym469 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy468)
					} else {
						z.EncFallback(yy468)
					}
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[3] {
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq460[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[4] {
					yym474 := z.EncBinary()
					_ = yym474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq460[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym476 := z.DecBinary()
	_ = yym476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct477 := r.ContainerType()
		if yyct477 == codecSelferValueTypeMap1234 {
			yyl477 := r.ReadMapStart()
			if yyl477 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl477, d)
			}
		} else if yyct477 == codecSelferValueTypeArray1234 {
			yyl477 := r.ReadArrayStart()
			if yyl477 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl477, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys478Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys478Slc
	var yyhl478 bool = l >= 0
	for yyj478 := 0; ; yyj478++ {
		if yyhl478 {
			if yyj478 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys478Slc = r.DecodeBytes(yys478Slc, true, true)
		yys478 := string(yys478Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys478 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv481 := &x.LastTransitionTime
				yym482 := z.DecBinary()
				_ = yym482
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv481) {
				} else if yym482 {
					z.DecBinaryUnmarshal(yyv481)
				} else if !yym482 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv481)
				} else {
					z.DecFallback(yyv481, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys478)
		} // end switch yys478
	} // end for yyj478
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj485 int
	var yyb485 bool
	var yyhl485 bool = l >= 0
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentConditionType(r.DecodeString())
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv488 := &x.LastTransitionTime
		yym489 := z.DecBinary()
		_ = yym489
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv488) {
		} else if yym489 {
			z.DecBinaryUnmarshal(yyv488)
		} else if !yym489 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv488)
		} else {
			z.DecFallback(yyv488, false)
		}
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj485++
	if yyhl485 {
		yyb485 = yyj485 > l
	} else {
		yyb485 = r.CheckBreak()
	}
	if yyb485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj485++
		if yyhl485 {
			yyb485 = yyj485 > l
		} else {
			yyb485 = r.CheckBreak()
		}
		if yyb485 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj485-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym492 := z.EncBinary()
		_ = yym492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep493 := !z.EncBinary()
			yy2arr493 := z.EncBasicHandle().StructToArray
			var yyq493 [4]bool
			_, _, _ = yysep493, yyq493, yy2arr493
			const yyr493 bool = false
			yyq493[0] = x.Kind != ""
			yyq493[1] = x.APIVersion != ""
			yyq493[2] = true
			var yynn493 int
			if yyr493 || yy2arr493 {
				r.EncodeArrayStart(4)
			} else {
				yynn493 = 1
				for _, b := range yyq493 {
					if b {
						yynn493++
					}
				}
				r.EncodeMapStart(yynn493)
				yynn493 = 0
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[0] {
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq493[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[1] {
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq493[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq493[2] {
					yy501 := &x.ListMeta
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else if z.HasExtensions() && z.EncExt(yy501) {
					} else {
						z.EncFallback(yy501)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq493[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy503 := &x.ListMeta
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else if z.HasExtensions() && z.EncExt(yy503) {
					} else {
						z.EncFallback(yy503)
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym506 := z.EncBinary()
					_ = yym506
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym507 := z.EncBinary()
					_ = yym507
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr493 || yy2arr493 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym508 := z.DecBinary()
	_ = yym508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct509 := r.ContainerType()
		if yyct509 == codecSelferValueTypeMap1234 {
			yyl509 := r.ReadMapStart()
			if yyl509 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl509, d)
			}
		} else if yyct509 == codecSelferValueTypeArray1234 {
			yyl509 := r.ReadArrayStart()
			if yyl509 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys510Slc
	var yyhl510 bool = l >= 0
	for yyj510 := 0; ; yyj510++ {
		if yyhl510 {
			if yyj510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys510Slc = r.DecodeBytes(yys510Slc, true, true)
		yys510 := string(yys510Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys510 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv513 := &x.ListMeta
				yym514 := z.DecBinary()
				_ = yym514
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv513) {
				} else {
					z.DecFallback(yyv513, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv515 := &x.Items
				yym516 := z.DecBinary()
				_ = yym516
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv515), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys510)
		} // end switch yys510
	} // end for yyj510
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv520 := &x.ListMeta
		yym521 := z.DecBinary()
		_ = yym521
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv520) {
		} else {
			z.DecFallback(yyv520, false)
		}
	}
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv522 := &x.Items
		yym523 := z.DecBinary()
		_ = yym523
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv522), d)
		}
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym524 := z.EncBinary()
		_ = yym524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep525 := !z.EncBinary()
			yy2arr525 := z.EncBasicHandle().StructToArray
			var yyq525 [2]bool
			_, _, _ = yysep525, yyq525, yy2arr525
			const yyr525 bool = false
			yyq525[0] = x.Selector != nil
			var yynn525 int
			if yyr525 || yy2arr525 {
				r.EncodeArrayStart(2)
			} else {
				yynn525 = 1
				for _, b := range yyq525 {
					if b {
						yynn525++
					}
				}
				r.EncodeMapStart(yynn525)
				yynn525 = 0
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq525[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym527 := z.EncBinary()
						_ = yym527
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq525[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym528 := z.EncBinary()
						_ = yym528
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy530 := &x.Template
				yy530.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy531 := &x.Template
				yy531.CodecEncodeSelf(e)
			}
			if yyr525 || yy2arr525 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct533 := r.ContainerType()
		if yyct533 == codecSelferValueTypeMap1234 {
			yyl533 := r.ReadMapStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl533, d)
			}
		} else if yyct533 == codecSelferValueTypeArray1234 {
			yyl533 := r.ReadArrayStart()
			if yyl533 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys534Slc
	var yyhl534 bool = l >= 0
	for yyj534 := 0; ; yyj534++ {
		if yyhl534 {
			if yyj534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys534Slc = r.DecodeBytes(yys534Slc, true, true)
		yys534 := string(yys534Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys534 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym536 := z.DecBinary()
				_ = yym536
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv537 := &x.Template
				yyv537.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys534)
		} // end switch yys534
	} // end for yyj534
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj538 int
	var yyb538 bool
	var yyhl538 bool = l >= 0
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym540 := z.DecBinary()
		_ = yym540
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv541 := &x.Template
		yyv541.CodecDecodeSelf(d)
	}
	for {
		yyj538++
		if yyhl538 {
			yyb538 = yyj538 > l
		} else {
			yyb538 = r.CheckBreak()
		}
		if yyb538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym542 := z.EncBinary()
		_ = yym542
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep543 := !z.EncBinary()
			yy2arr543 := z.EncBasicHandle().StructToArray
			var yyq543 [3]bool
			_, _, _ = yysep543, yyq543, yy2arr543
			const yyr543 bool = false
			var yynn543 int
			if yyr543 || yy2arr543 {
				r.EncodeArrayStart(3)
			} else {
				yynn543 = 3
				for _, b := range yyq543 {
					if b {
						yynn543++
					}
				}
				r.EncodeMapStart(yynn543)
				yynn543 = 0
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym545 := z.EncBinary()
				_ = yym545
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym546 := z.EncBinary()
				_ = yym546
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym551 := z.EncBinary()
				_ = yym551
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym552 := z.EncBinary()
				_ = yym552
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr543 || yy2arr543 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym553 := z.DecBinary()
	_ = yym553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct554 := r.ContainerType()
		if yyct554 == codecSelferValueTypeMap1234 {
			yyl554 := r.ReadMapStart()
			if yyl554 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl554, d)
			}
		} else if yyct554 == codecSelferValueTypeArray1234 {
			yyl554 := r.ReadArrayStart()
			if yyl554 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl554, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys555Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys555Slc
	var yyhl555 bool = l >= 0
	for yyj555 := 0; ; yyj555++ {
		if yyhl555 {
			if yyj555 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys555Slc = r.DecodeBytes(yys555Slc, true, true)
		yys555 := string(yys555Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys555 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys555)
		} // end switch yys555
	} // end for yyj555
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj559 int
	var yyb559 bool
	var yyhl559 bool = l >= 0
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	for {
		yyj559++
		if yyhl559 {
			yyb559 = yyj559 > l
		} else {
			yyb559 = r.CheckBreak()
		}
		if yyb559 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj559-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym563 := z.EncBinary()
		_ = yym563
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep564 := !z.EncBinary()
			yy2arr564 := z.EncBasicHandle().StructToArray
			var yyq564 [5]bool
			_, _, _ = yysep564, yyq564, yy2arr564
			const yyr564 bool = false
			yyq564[0] = x.Kind != ""
			yyq564[1] = x.APIVersion != ""
			yyq564[2] = true
			yyq564[3] = true
			yyq564[4] = true
			var yynn564 int
			if yyr564 || yy2arr564 {
				r.EncodeArrayStart(5)
			} else {
				yynn564 = 0
				for _, b := range yyq564 {
					if b {
						yynn564++
					}
				}
				r.EncodeMapStart(yynn564)
				yynn564 = 0
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq564[0] {
					yym566 := z.EncBinary()
					_ = yym566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq564[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq564[1] {
					yym569 := z.EncBinary()
					_ = yym569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq564[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym570 := z.EncBinary()
					_ = yym570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq564[2] {
					yy572 := &x.ObjectMeta
					yy572.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq564[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy573 := &x.ObjectMeta
					yy573.CodecEncodeSelf(e)
				}
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq564[3] {
					yy575 := &x.Spec
					yy575.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq564[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy576 := &x.Spec
					yy576.CodecEncodeSelf(e)
				}
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq564[4] {
					yy578 := &x.Status
					yy578.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq564[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy579 := &x.Status
					yy579.CodecEncodeSelf(e)
				}
			}
			if yyr564 || yy2arr564 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym580 := z.DecBinary()
	_ = yym580
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct581 := r.ContainerType()
		if yyct581 == codecSelferValueTypeMap1234 {
			yyl581 := r.ReadMapStart()
			if yyl581 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl581, d)
			}
		} else if yyct581 == codecSelferValueTypeArray1234 {
			yyl581 := r.ReadArrayStart()
			if yyl581 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl581, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys582Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys582Slc
	var yyhl582 bool = l >= 0
	for yyj582 := 0; ; yyj582++ {
		if yyhl582 {
			if yyj582 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys582Slc = r.DecodeBytes(yys582Slc, true, true)
		yys582 := string(yys582Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys582 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv585 := &x.ObjectMeta
				yyv585.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv586 := &x.Spec
				yyv586.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv587 := &x.Status
				yyv587.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys582)
		} // end switch yys582
	} // end for yyj582
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj588 int
	var yyb588 bool
	var yyhl588 bool = l >= 0
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv591 := &x.ObjectMeta
		yyv591.CodecDecodeSelf(d)
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv592 := &x.Spec
		yyv592.CodecDecodeSelf(d)
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv593 := &x.Status
		yyv593.CodecDecodeSelf(d)
	}
	for {
		yyj588++
		if yyhl588 {
			yyb588 = yyj588 > l
		} else {
			yyb588 = r.CheckBreak()
		}
		if yyb588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym594 := z.EncBinary()
		_ = yym594
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep595 := !z.EncBinary()
			yy2arr595 := z.EncBasicHandle().StructToArray
			var yyq595 [4]bool
			_, _, _ = yysep595, yyq595, yy2arr595
			const yyr595 bool = false
			yyq595[0] = x.Kind != ""
			yyq595[1] = x.APIVersion != ""
			yyq595[2] = true
			var yynn595 int
			if yyr595 || yy2arr595 {
				r.EncodeArrayStart(4)
			} else {
				yynn595 = 1
				for _, b := range yyq595 {
					if b {
						yynn595++
					}
				}
				r.EncodeMapStart(yynn595)
				yynn595 = 0
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[0] {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq595[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[1] {
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq595[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym601 := z.EncBinary()
					_ = yym601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq595[2] {
					yy603 := &x.ListMeta
					yym604 := z.EncBinary()
					_ = yym604
					if false {
					} else if z.HasExtensions() && z.EncExt(yy603) {
					} else {
						z.EncFallback(yy603)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq595[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy605 := &x.ListMeta
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else if z.HasExtensions() && z.EncExt(yy605) {
					} else {
						z.EncFallback(yy605)
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym608 := z.EncBinary()
					_ = yym608
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym609 := z.EncBinary()
					_ = yym609
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym610 := z.DecBinary()
	_ = yym610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct611 := r.ContainerType()
		if yyct611 == codecSelferValueTypeMap1234 {
			yyl611 := r.ReadMapStart()
			if yyl611 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl611, d)
			}
		} else if yyct611 == codecSelferValueTypeArray1234 {
			yyl611 := r.ReadArrayStart()
			if yyl611 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl611, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys612Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys612Slc
	var yyhl612 bool = l >= 0
	for yyj612 := 0; ; yyj612++ {
		if yyhl612 {
			if yyj612 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys612Slc = r.DecodeBytes(yys612Slc, true, true)
		yys612 := string(yys612Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys612 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv615 := &x.ListMeta
				yym616 := z.DecBinary()
				_ = yym616
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv615) {
				} else {
					z.DecFallback(yyv615, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv617 := &x.Items
				yym618 := z.DecBinary()
				_ = yym618
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv617), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys612)
		} // end switch yys612
	} // end for yyj612
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj619 int
	var yyb619 bool
	var yyhl619 bool = l >= 0
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv622 := &x.ListMeta
		yym623 := z.DecBinary()
		_ = yym623
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv622) {
		} else {
			z.DecFallback(yyv622, false)
		}
	}
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv624 := &x.Items
		yym625 := z.DecBinary()
		_ = yym625
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv624), d)
		}
	}
	for {
		yyj619++
		if yyhl619 {
			yyb619 = yyj619 > l
		} else {
			yyb619 = r.CheckBreak()
		}
		if yyb619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym626 := z.EncBinary()
		_ = yym626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep627 := !z.EncBinary()
			yy2arr627 := z.EncBasicHandle().StructToArray
			var yyq627 [4]bool
			_, _, _ = yysep627, yyq627, yy2arr627
			const yyr627 bool = false
			yyq627[0] = x.Kind != ""
			yyq627[1] = x.APIVersion != ""
			yyq627[2] = true
			var yynn627 int
			if yyr627 || yy2arr627 {
				r.EncodeArrayStart(4)
			} else {
				yynn627 = 1
				for _, b := range yyq627 {
					if b {
						yynn627++
					}
				}
				r.EncodeMapStart(yynn627)
				yynn627 = 0
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[0] {
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[1] {
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq627[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq627[2] {
					yy635 := &x.ListMeta
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else if z.HasExtensions() && z.EncExt(yy635) {
					} else {
						z.EncFallback(yy635)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq627[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy637 := &x.ListMeta
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else if z.HasExtensions() && z.EncExt(yy637) {
					} else {
						z.EncFallback(yy637)
					}
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr627 || yy2arr627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym642 := z.DecBinary()
	_ = yym642
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct643 := r.ContainerType()
		if yyct643 == codecSelferValueTypeMap1234 {
			yyl643 := r.ReadMapStart()
			if yyl643 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl643, d)
			}
		} else if yyct643 == codecSelferValueTypeArray1234 {
			yyl643 := r.ReadArrayStart()
			if yyl643 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl643, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys644Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys644Slc
	var yyhl644 bool = l >= 0
	for yyj644 := 0; ; yyj644++ {
		if yyhl644 {
			if yyj644 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys644Slc = r.DecodeBytes(yys644Slc, true, true)
		yys644 := string(yys644Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys644 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv647 := &x.ListMeta
				yym648 := z.DecBinary()
				_ = yym648
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv647) {
				} else {
					z.DecFallback(yyv647, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv649 := &x.Items
				yym650 := z.DecBinary()
				_ = yym650
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv649), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys644)
		} // end switch yys644
	} // end for yyj644
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj651 int
	var yyb651 bool
	var yyhl651 bool = l >= 0
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv654 := &x.ListMeta
		yym655 := z.DecBinary()
		_ = yym655
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv654) {
		} else {
			z.DecFallback(yyv654, false)
		}
	}
	yyj651++
	if yyhl651 {
		yyb651 = yyj651 > l
	} else {
		yyb651 = r.CheckBreak()
	}
	if yyb651 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv656 := &x.Items
		yym657 := z.DecBinary()
		_ = yym657
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv656), d)
		}
	}
	for {
		yyj651++
		if yyhl651 {
			yyb651 = yyj651 > l
		} else {
			yyb651 = r.CheckBreak()
		}
		if yyb651 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj651-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym658 := z.EncBinary()
		_ = yym658
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep659 := !z.EncBinary()
			yy2arr659 := z.EncBasicHandle().StructToArray
			var yyq659 [5]bool
			_, _, _ = yysep659, yyq659, yy2arr659
			const yyr659 bool = false
			yyq659[0] = x.Kind != ""
			yyq659[1] = x.APIVersion != ""
			yyq659[2] = true
			yyq659[3] = true
			yyq659[4] = true
			var yynn659 int
			if yyr659 || yy2arr659 {
				r.EncodeArrayStart(5)
			} else {
				yynn659 = 0
				for _, b := range yyq659 {
					if b {
						yynn659++
					}
				}
				r.EncodeMapStart(yynn659)
				yynn659 = 0
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq659[0] {
					yym661 := z.EncBinary()
					_ = yym661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq659[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq659[1] {
					yym664 := z.EncBinary()
					_ = yym664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq659[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq659[2] {
					yy667 := &x.ObjectMeta
					yy667.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq659[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy668 := &x.ObjectMeta
					yy668.CodecEncodeSelf(e)
				}
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq659[3] {
					yy670 := &x.Spec
					yy670.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq659[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy671 := &x.Spec
					yy671.CodecEncodeSelf(e)
				}
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq659[4] {
					yy673 := &x.Status
					yy673.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq659[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy674 := &x.Status
					yy674.CodecEncodeSelf(e)
				}
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym675 := z.DecBinary()
	_ = yym675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct676 := r.ContainerType()
		if yyct676 == codecSelferValueTypeMap1234 {
			yyl676 := r.ReadMapStart()
			if yyl676 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl676, d)
			}
		} else if yyct676 == codecSelferValueTypeArray1234 {
			yyl676 := r.ReadArrayStart()
			if yyl676 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl676, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys677Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys677Slc
	var yyhl677 bool = l >= 0
	for yyj677 := 0; ; yyj677++ {
		if yyhl677 {
			if yyj677 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys677Slc = r.DecodeBytes(yys677Slc, true, true)
		yys677 := string(yys677Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys677 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv680 := &x.ObjectMeta
				yyv680.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv681 := &x.Spec
				yyv681.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv682 := &x.Status
				yyv682.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys677)
		} // end switch yys677
	} // end for yyj677
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj683 int
	var yyb683 bool
	var yyhl683 bool = l >= 0
	yyj683++
	if yyhl683 {
		yyb683 = yyj683 > l
	} else {
		yyb683 = r.CheckBreak()
	}
	if yyb683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj683++
	if yyhl683 {
		yyb683 = yyj683 > l
	} else {
		yyb683 = r.CheckBreak()
	}
	if yyb683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj683++
	if yyhl683 {
		yyb683 = yyj683 > l
	} else {
		yyb683 = r.CheckBreak()
	}
	if yyb683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv686 := &x.ObjectMeta
		yyv686.CodecDecodeSelf(d)
	}
	yyj683++
	if yyhl683 {
		yyb683 = yyj683 > l
	} else {
		yyb683 = r.CheckBreak()
	}
	if yyb683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv687 := &x.Spec
		yyv687.CodecDecodeSelf(d)
	}
	yyj683++
	if yyhl683 {
		yyb683 = yyj683 > l
	} else {
		yyb683 = r.CheckBreak()
	}
	if yyb683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv688 := &x.Status
		yyv688.CodecDecodeSelf(d)
	}
	for {
		yyj683++
		if yyhl683 {
			yyb683 = yyj683 > l
		} else {
			yyb683 = r.CheckBreak()
		}
		if yyb683 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj683-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym689 := z.EncBinary()
		_ = yym689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep690 := !z.EncBinary()
			yy2arr690 := z.EncBasicHandle().StructToArray
			var yyq690 [4]bool
			_, _, _ = yysep690, yyq690, yy2arr690
			const yyr690 bool = false
			yyq690[0] = x.Kind != ""
			yyq690[1] = x.APIVersion != ""
			yyq690[2] = true
			var yynn690 int
			if yyr690 || yy2arr690 {
				r.EncodeArrayStart(4)
			} else {
				yynn690 = 1
				for _, b := range yyq690 {
					if b {
						yynn690++
					}
				}
				r.EncodeMapStart(yynn690)
				yynn690 = 0
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq690[0] {
					yym692 := z.EncBinary()
					_ = yym692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq690[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq690[1] {
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq690[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq690[2] {
					yy698 := &x.ListMeta
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else if z.HasExtensions() && z.EncExt(yy698) {
					} else {
						z.EncFallback(yy698)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq690[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy700 := &x.ListMeta
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else if z.HasExtensions() && z.EncExt(yy700) {
					} else {
						z.EncFallback(yy700)
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym705 := z.DecBinary()
	_ = yym705
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct706 := r.ContainerType()
		if yyct706 == codecSelferValueTypeMap1234 {
			yyl706 := r.ReadMapStart()
			if yyl706 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl706, d)
			}
		} else if yyct706 == codecSelferValueTypeArray1234 {
			yyl706 := r.ReadArrayStart()
			if yyl706 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl706, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys707Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys707Slc
	var yyhl707 bool = l >= 0
	for yyj707 := 0; ; yyj707++ {
		if yyhl707 {
			if yyj707 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys707Slc = r.DecodeBytes(yys707Slc, true, true)
		yys707 := string(yys707Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys707 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv710 := &x.ListMeta
				yym711 := z.DecBinary()
				_ = yym711
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv710) {
				} else {
					z.DecFallback(yyv710, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv712 := &x.Items
				yym713 := z.DecBinary()
				_ = yym713
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv712), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys707)
		} // end switch yys707
	} // end for yyj707
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj714 int
	var yyb714 bool
	var yyhl714 bool = l >= 0
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv717 := &x.ListMeta
		yym718 := z.DecBinary()
		_ = yym718
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv717) {
		} else {
			z.DecFallback(yyv717, false)
		}
	}
	yyj714++
	if yyhl714 {
		yyb714 = yyj714 > l
	} else {
		yyb714 = r.CheckBreak()
	}
	if yyb714 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv719 := &x.Items
		yym720 := z.DecBinary()
		_ = yym720
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv719), d)
		}
	}
	for {
		yyj714++
		if yyhl714 {
			yyb714 = yyj714 > l
		} else {
			yyb714 = r.CheckBreak()
		}
		if yyb714 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj714-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym721 := z.EncBinary()
		_ = yym721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep722 := !z.EncBinary()
			yy2arr722 := z.EncBasicHandle().StructToArray
			var yyq722 [3]bool
			_, _, _ = yysep722, yyq722, yy2arr722
			const yyr722 bool = false
			yyq722[0] = x.Backend != nil
			yyq722[1] = len(x.TLS) != 0
			yyq722[2] = len(x.Rules) != 0
			var yynn722 int
			if yyr722 || yy2arr722 {
				r.EncodeArrayStart(3)
			} else {
				yynn722 = 0
				for _, b := range yyq722 {
					if b {
						yynn722++
					}
				}
				r.EncodeMapStart(yynn722)
				yynn722 = 0
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq722[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[1] {
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym725 := z.EncBinary()
						_ = yym725
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq722[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tls"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym726 := z.EncBinary()
						_ = yym726
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq722[2] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym728 := z.EncBinary()
						_ = yym728
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq722[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym729 := z.EncBinary()
						_ = yym729
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr722 || yy2arr722 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym730 := z.DecBinary()
	_ = yym730
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct731 := r.ContainerType()
		if yyct731 == codecSelferValueTypeMap1234 {
			yyl731 := r.ReadMapStart()
			if yyl731 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl731, d)
			}
		} else if yyct731 == codecSelferValueTypeArray1234 {
			yyl731 := r.ReadArrayStart()
			if yyl731 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl731, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys732Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys732Slc
	var yyhl732 bool = l >= 0
	for yyj732 := 0; ; yyj732++ {
		if yyhl732 {
			if yyj732 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys732Slc = r.DecodeBytes(yys732Slc, true, true)
		yys732 := string(yys732Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys732 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "tls":
			if r.TryDecodeAsNil() {
				x.TLS = nil
			} else {
				yyv734 := &x.TLS
				yym735 := z.DecBinary()
				_ = yym735
				if false {
				} else {
					h.decSliceIngressTLS((*[]IngressTLS)(yyv734), d)
				}
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv736 := &x.Rules
				yym737 := z.DecBinary()
				_ = yym737
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv736), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys732)
		} // end switch yys732
	} // end for yyj732
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj738 int
	var yyb738 bool
	var yyhl738 bool = l >= 0
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TLS = nil
	} else {
		yyv740 := &x.TLS
		yym741 := z.DecBinary()
		_ = yym741
		if false {
		} else {
			h.decSliceIngressTLS((*[]IngressTLS)(yyv740), d)
		}
	}
	yyj738++
	if yyhl738 {
		yyb738 = yyj738 > l
	} else {
		yyb738 = r.CheckBreak()
	}
	if yyb738 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv742 := &x.Rules
		yym743 := z.DecBinary()
		_ = yym743
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv742), d)
		}
	}
	for {
		yyj738++
		if yyhl738 {
			yyb738 = yyj738 > l
		} else {
			yyb738 = r.CheckBreak()
		}
		if yyb738 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj738-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressTLS) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym744 := z.EncBinary()
		_ = yym744
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep745 := !z.EncBinary()
			yy2arr745 := z.EncBasicHandle().StructToArray
			var yyq745 [2]bool
			_, _, _ = yysep745, yyq745, yy2arr745
			const yyr745 bool = false
			yyq745[0] = len(x.Hosts) != 0
			yyq745[1] = x.SecretName != ""
			var yynn745 int
			if yyr745 || yy2arr745 {
				r.EncodeArrayStart(2)
			} else {
				yynn745 = 0
				for _, b := range yyq745 {
					if b {
						yynn745++
					}
				}
				r.EncodeMapStart(yynn745)
				yynn745 = 0
			}
			if yyr745 || yy2arr745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq745[0] {
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym747 := z.EncBinary()
						_ = yym747
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq745[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hosts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym748 := z.EncBinary()
						_ = yym748
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				}
			}
			if yyr745 || yy2arr745 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq745[1] {
					yym750 := z.EncBinary()
					_ = yym750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq745[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym751 := z.EncBinary()
					_ = yym751
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr745 || yy2arr745 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressTLS) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym752 := z.DecBinary()
	_ = yym752
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct753 := r.ContainerType()
		if yyct753 == codecSelferValueTypeMap1234 {
			yyl753 := r.ReadMapStart()
			if yyl753 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl753, d)
			}
		} else if yyct753 == codecSelferValueTypeArray1234 {
			yyl753 := r.ReadArrayStart()
			if yyl753 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl753, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressTLS) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys754Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys754Slc
	var yyhl754 bool = l >= 0
	for yyj754 := 0; ; yyj754++ {
		if yyhl754 {
			if yyj754 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys754Slc = r.DecodeBytes(yys754Slc, true, true)
		yys754 := string(yys754Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys754 {
		case "hosts":
			if r.TryDecodeAsNil() {
				x.Hosts = nil
			} else {
				yyv755 := &x.Hosts
				yym756 := z.DecBinary()
				_ = yym756
				if false {
				} else {
					z.F.DecSliceStringX(yyv755, false, d)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys754)
		} // end switch yys754
	} // end for yyj754
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressTLS) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj758 int
	var yyb758 bool
	var yyhl758 bool = l >= 0
	yyj758++
	if yyhl758 {
		yyb758 = yyj758 > l
	} else {
		yyb758 = r.CheckBreak()
	}
	if yyb758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hosts = nil
	} else {
		yyv759 := &x.Hosts
		yym760 := z.DecBinary()
		_ = yym760
		if false {
		} else {
			z.F.DecSliceStringX(yyv759, false, d)
		}
	}
	yyj758++
	if yyhl758 {
		yyb758 = yyj758 > l
	} else {
		yyb758 = r.CheckBreak()
	}
	if yyb758 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj758++
		if yyhl758 {
			yyb758 = yyj758 > l
		} else {
			yyb758 = r.CheckBreak()
		}
		if yyb758 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj758-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym762 := z.EncBinary()
		_ = yym762
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep763 := !z.EncBinary()
			yy2arr763 := z.EncBasicHandle().StructToArray
			var yyq763 [1]bool
			_, _, _ = yysep763, yyq763, yy2arr763
			const yyr763 bool = false
			yyq763[0] = true
			var yynn763 int
			if yyr763 || yy2arr763 {
				r.EncodeArrayStart(1)
			} else {
				yynn763 = 0
				for _, b := range yyq763 {
					if b {
						yynn763++
					}
				}
				r.EncodeMapStart(yynn763)
				yynn763 = 0
			}
			if yyr763 || yy2arr763 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq763[0] {
					yy765 := &x.LoadBalancer
					yy765.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq763[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy766 := &x.LoadBalancer
					yy766.CodecEncodeSelf(e)
				}
			}
			if yyr763 || yy2arr763 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym767 := z.DecBinary()
	_ = yym767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct768 := r.ContainerType()
		if yyct768 == codecSelferValueTypeMap1234 {
			yyl768 := r.ReadMapStart()
			if yyl768 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl768, d)
			}
		} else if yyct768 == codecSelferValueTypeArray1234 {
			yyl768 := r.ReadArrayStart()
			if yyl768 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl768, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys769Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys769Slc
	var yyhl769 bool = l >= 0
	for yyj769 := 0; ; yyj769++ {
		if yyhl769 {
			if yyj769 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys769Slc = r.DecodeBytes(yys769Slc, true, true)
		yys769 := string(yys769Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys769 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv770 := &x.LoadBalancer
				yyv770.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys769)
		} // end switch yys769
	} // end for yyj769
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj771 int
	var yyb771 bool
	var yyhl771 bool = l >= 0
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv772 := &x.LoadBalancer
		yyv772.CodecDecodeSelf(d)
	}
	for {
		yyj771++
		if yyhl771 {
			yyb771 = yyj771 > l
		} else {
			yyb771 = r.CheckBreak()
		}
		if yyb771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym773 := z.EncBinary()
		_ = yym773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep774 := !z.EncBinary()
			yy2arr774 := z.EncBasicHandle().StructToArray
			var yyq774 [2]bool
			_, _, _ = yysep774, yyq774, yy2arr774
			const yyr774 bool = false
			yyq774[0] = x.Host != ""
			yyq774[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn774 int
			if yyr774 || yy2arr774 {
				r.EncodeArrayStart(2)
			} else {
				yynn774 = 0
				for _, b := range yyq774 {
					if b {
						yynn774++
					}
				}
				r.EncodeMapStart(yynn774)
				yynn774 = 0
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq774[0] {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq774[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn778 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn778 = true
				goto LABEL778
			}
		LABEL778:
			if yyr774 || yy2arr774 {
				if yyn778 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq774[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq774[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn778 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym779 := z.DecBinary()
	_ = yym779
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct780 := r.ContainerType()
		if yyct780 == codecSelferValueTypeMap1234 {
			yyl780 := r.ReadMapStart()
			if yyl780 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl780, d)
			}
		} else if yyct780 == codecSelferValueTypeArray1234 {
			yyl780 := r.ReadArrayStart()
			if yyl780 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl780, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys781Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys781Slc
	var yyhl781 bool = l >= 0
	for yyj781 := 0; ; yyj781++ {
		if yyhl781 {
			if yyj781 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys781Slc = r.DecodeBytes(yys781Slc, true, true)
		yys781 := string(yys781Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys781 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys781)
		} // end switch yys781
	} // end for yyj781
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj784 int
	var yyb784 bool
	var yyhl784 bool = l >= 0
	yyj784++
	if yyhl784 {
		yyb784 = yyj784 > l
	} else {
		yyb784 = r.CheckBreak()
	}
	if yyb784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj784++
	if yyhl784 {
		yyb784 = yyj784 > l
	} else {
		yyb784 = r.CheckBreak()
	}
	if yyb784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj784++
		if yyhl784 {
			yyb784 = yyj784 > l
		} else {
			yyb784 = r.CheckBreak()
		}
		if yyb784 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj784-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym787 := z.EncBinary()
		_ = yym787
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep788 := !z.EncBinary()
			yy2arr788 := z.EncBasicHandle().StructToArray
			var yyq788 [1]bool
			_, _, _ = yysep788, yyq788, yy2arr788
			const yyr788 bool = false
			yyq788[0] = x.HTTP != nil
			var yynn788 int
			if yyr788 || yy2arr788 {
				r.EncodeArrayStart(1)
			} else {
				yynn788 = 0
				for _, b := range yyq788 {
					if b {
						yynn788++
					}
				}
				r.EncodeMapStart(yynn788)
				yynn788 = 0
			}
			if yyr788 || yy2arr788 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq788[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq788[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr788 || yy2arr788 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym790 := z.DecBinary()
	_ = yym790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct791 := r.ContainerType()
		if yyct791 == codecSelferValueTypeMap1234 {
			yyl791 := r.ReadMapStart()
			if yyl791 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl791, d)
			}
		} else if yyct791 == codecSelferValueTypeArray1234 {
			yyl791 := r.ReadArrayStart()
			if yyl791 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl791, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys792Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys792Slc
	var yyhl792 bool = l >= 0
	for yyj792 := 0; ; yyj792++ {
		if yyhl792 {
			if yyj792 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys792Slc = r.DecodeBytes(yys792Slc, true, true)
		yys792 := string(yys792Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys792 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys792)
		} // end switch yys792
	} // end for yyj792
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj794 int
	var yyb794 bool
	var yyhl794 bool = l >= 0
	yyj794++
	if yyhl794 {
		yyb794 = yyj794 > l
	} else {
		yyb794 = r.CheckBreak()
	}
	if yyb794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj794++
		if yyhl794 {
			yyb794 = yyj794 > l
		} else {
			yyb794 = r.CheckBreak()
		}
		if yyb794 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj794-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym796 := z.EncBinary()
		_ = yym796
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep797 := !z.EncBinary()
			yy2arr797 := z.EncBasicHandle().StructToArray
			var yyq797 [1]bool
			_, _, _ = yysep797, yyq797, yy2arr797
			const yyr797 bool = false
			var yynn797 int
			if yyr797 || yy2arr797 {
				r.EncodeArrayStart(1)
			} else {
				yynn797 = 1
				for _, b := range yyq797 {
					if b {
						yynn797++
					}
				}
				r.EncodeMapStart(yynn797)
				yynn797 = 0
			}
			if yyr797 || yy2arr797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr797 || yy2arr797 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym801 := z.DecBinary()
	_ = yym801
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct802 := r.ContainerType()
		if yyct802 == codecSelferValueTypeMap1234 {
			yyl802 := r.ReadMapStart()
			if yyl802 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl802, d)
			}
		} else if yyct802 == codecSelferValueTypeArray1234 {
			yyl802 := r.ReadArrayStart()
			if yyl802 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl802, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys803Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys803Slc
	var yyhl803 bool = l >= 0
	for yyj803 := 0; ; yyj803++ {
		if yyhl803 {
			if yyj803 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys803Slc = r.DecodeBytes(yys803Slc, true, true)
		yys803 := string(yys803Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys803 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv804 := &x.Paths
				yym805 := z.DecBinary()
				_ = yym805
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv804), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys803)
		} // end switch yys803
	} // end for yyj803
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj806 int
	var yyb806 bool
	var yyhl806 bool = l >= 0
	yyj806++
	if yyhl806 {
		yyb806 = yyj806 > l
	} else {
		yyb806 = r.CheckBreak()
	}
	if yyb806 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv807 := &x.Paths
		yym808 := z.DecBinary()
		_ = yym808
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv807), d)
		}
	}
	for {
		yyj806++
		if yyhl806 {
			yyb806 = yyj806 > l
		} else {
			yyb806 = r.CheckBreak()
		}
		if yyb806 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj806-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym809 := z.EncBinary()
		_ = yym809
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep810 := !z.EncBinary()
			yy2arr810 := z.EncBasicHandle().StructToArray
			var yyq810 [2]bool
			_, _, _ = yysep810, yyq810, yy2arr810
			const yyr810 bool = false
			yyq810[0] = x.Path != ""
			var yynn810 int
			if yyr810 || yy2arr810 {
				r.EncodeArrayStart(2)
			} else {
				yynn810 = 1
				for _, b := range yyq810 {
					if b {
						yynn810++
					}
				}
				r.EncodeMapStart(yynn810)
				yynn810 = 0
			}
			if yyr810 || yy2arr810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq810[0] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq810[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr810 || yy2arr810 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy815 := &x.Backend
				yy815.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy816 := &x.Backend
				yy816.CodecEncodeSelf(e)
			}
			if yyr810 || yy2arr810 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym817 := z.DecBinary()
	_ = yym817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct818 := r.ContainerType()
		if yyct818 == codecSelferValueTypeMap1234 {
			yyl818 := r.ReadMapStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl818, d)
			}
		} else if yyct818 == codecSelferValueTypeArray1234 {
			yyl818 := r.ReadArrayStart()
			if yyl818 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys819Slc
	var yyhl819 bool = l >= 0
	for yyj819 := 0; ; yyj819++ {
		if yyhl819 {
			if yyj819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys819Slc = r.DecodeBytes(yys819Slc, true, true)
		yys819 := string(yys819Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys819 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv821 := &x.Backend
				yyv821.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys819)
		} // end switch yys819
	} // end for yyj819
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj822 int
	var yyb822 bool
	var yyhl822 bool = l >= 0
	yyj822++
	if yyhl822 {
		yyb822 = yyj822 > l
	} else {
		yyb822 = r.CheckBreak()
	}
	if yyb822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj822++
	if yyhl822 {
		yyb822 = yyj822 > l
	} else {
		yyb822 = r.CheckBreak()
	}
	if yyb822 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv824 := &x.Backend
		yyv824.CodecDecodeSelf(d)
	}
	for {
		yyj822++
		if yyhl822 {
			yyb822 = yyj822 > l
		} else {
			yyb822 = r.CheckBreak()
		}
		if yyb822 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj822-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym825 := z.EncBinary()
		_ = yym825
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep826 := !z.EncBinary()
			yy2arr826 := z.EncBasicHandle().StructToArray
			var yyq826 [2]bool
			_, _, _ = yysep826, yyq826, yy2arr826
			const yyr826 bool = false
			var yynn826 int
			if yyr826 || yy2arr826 {
				r.EncodeArrayStart(2)
			} else {
				yynn826 = 2
				for _, b := range yyq826 {
					if b {
						yynn826++
					}
				}
				r.EncodeMapStart(yynn826)
				yynn826 = 0
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym828 := z.EncBinary()
				_ = yym828
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym829 := z.EncBinary()
				_ = yym829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy831 := &x.ServicePort
				yym832 := z.EncBinary()
				_ = yym832
				if false {
				} else if z.HasExtensions() && z.EncExt(yy831) {
				} else if !yym832 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy831)
				} else {
					z.EncFallback(yy831)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy833 := &x.ServicePort
				yym834 := z.EncBinary()
				_ = yym834
				if false {
				} else if z.HasExtensions() && z.EncExt(yy833) {
				} else if !yym834 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy833)
				} else {
					z.EncFallback(yy833)
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym835 := z.DecBinary()
	_ = yym835
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct836 := r.ContainerType()
		if yyct836 == codecSelferValueTypeMap1234 {
			yyl836 := r.ReadMapStart()
			if yyl836 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl836, d)
			}
		} else if yyct836 == codecSelferValueTypeArray1234 {
			yyl836 := r.ReadArrayStart()
			if yyl836 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl836, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys837Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys837Slc
	var yyhl837 bool = l >= 0
	for yyj837 := 0; ; yyj837++ {
		if yyhl837 {
			if yyj837 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys837Slc = r.DecodeBytes(yys837Slc, true, true)
		yys837 := string(yys837Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys837 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg5_intstr.IntOrString{}
			} else {
				yyv839 := &x.ServicePort
				yym840 := z.DecBinary()
				_ = yym840
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv839) {
				} else if !yym840 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv839)
				} else {
					z.DecFallback(yyv839, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys837)
		} // end switch yys837
	} // end for yyj837
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj841 int
	var yyb841 bool
	var yyhl841 bool = l >= 0
	yyj841++
	if yyhl841 {
		yyb841 = yyj841 > l
	} else {
		yyb841 = r.CheckBreak()
	}
	if yyb841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj841++
	if yyhl841 {
		yyb841 = yyj841 > l
	} else {
		yyb841 = r.CheckBreak()
	}
	if yyb841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg5_intstr.IntOrString{}
	} else {
		yyv843 := &x.ServicePort
		yym844 := z.DecBinary()
		_ = yym844
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv843) {
		} else if !yym844 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv843)
		} else {
			z.DecFallback(yyv843, false)
		}
	}
	for {
		yyj841++
		if yyhl841 {
			yyb841 = yyj841 > l
		} else {
			yyb841 = r.CheckBreak()
		}
		if yyb841 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj841-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [5]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[0] = x.Kind != ""
			yyq846[1] = x.APIVersion != ""
			yyq846[2] = true
			yyq846[3] = true
			yyq846[4] = true
			var yynn846 int
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(5)
			} else {
				yynn846 = 0
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
				yynn846 = 0
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[0] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[2] {
					yy854 := &x.ObjectMeta
					yy854.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq846[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy855 := &x.ObjectMeta
					yy855.CodecEncodeSelf(e)
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[3] {
					yy857 := &x.Spec
					yy857.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq846[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy858 := &x.Spec
					yy858.CodecEncodeSelf(e)
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[4] {
					yy860 := &x.Status
					yy860.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq846[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy861 := &x.Status
					yy861.CodecEncodeSelf(e)
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym862 := z.DecBinary()
	_ = yym862
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct863 := r.ContainerType()
		if yyct863 == codecSelferValueTypeMap1234 {
			yyl863 := r.ReadMapStart()
			if yyl863 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl863, d)
			}
		} else if yyct863 == codecSelferValueTypeArray1234 {
			yyl863 := r.ReadArrayStart()
			if yyl863 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl863, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys864Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys864Slc
	var yyhl864 bool = l >= 0
	for yyj864 := 0; ; yyj864++ {
		if yyhl864 {
			if yyj864 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys864Slc = r.DecodeBytes(yys864Slc, true, true)
		yys864 := string(yys864Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys864 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv867 := &x.ObjectMeta
				yyv867.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv868 := &x.Spec
				yyv868.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv869 := &x.Status
				yyv869.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys864)
		} // end switch yys864
	} // end for yyj864
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj870 int
	var yyb870 bool
	var yyhl870 bool = l >= 0
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv873 := &x.ObjectMeta
		yyv873.CodecDecodeSelf(d)
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv874 := &x.Spec
		yyv874.CodecDecodeSelf(d)
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv875 := &x.Status
		yyv875.CodecDecodeSelf(d)
	}
	for {
		yyj870++
		if yyhl870 {
			yyb870 = yyj870 > l
		} else {
			yyb870 = r.CheckBreak()
		}
		if yyb870 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj870-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym876 := z.EncBinary()
		_ = yym876
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep877 := !z.EncBinary()
			yy2arr877 := z.EncBasicHandle().StructToArray
			var yyq877 [4]bool
			_, _, _ = yysep877, yyq877, yy2arr877
			const yyr877 bool = false
			yyq877[0] = x.Kind != ""
			yyq877[1] = x.APIVersion != ""
			yyq877[2] = true
			var yynn877 int
			if yyr877 || yy2arr877 {
				r.EncodeArrayStart(4)
			} else {
				yynn877 = 1
				for _, b := range yyq877 {
					if b {
						yynn877++
					}
				}
				r.EncodeMapStart(yynn877)
				yynn877 = 0
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[0] {
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq877[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[1] {
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq877[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq877[2] {
					yy885 := &x.ListMeta
					yym886 := z.EncBinary()
					_ = yym886
					if false {
					} else if z.HasExtensions() && z.EncExt(yy885) {
					} else {
						z.EncFallback(yy885)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq877[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy887 := &x.ListMeta
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else if z.HasExtensions() && z.EncExt(yy887) {
					} else {
						z.EncFallback(yy887)
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr877 || yy2arr877 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym892 := z.DecBinary()
	_ = yym892
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct893 := r.ContainerType()
		if yyct893 == codecSelferValueTypeMap1234 {
			yyl893 := r.ReadMapStart()
			if yyl893 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl893, d)
			}
		} else if yyct893 == codecSelferValueTypeArray1234 {
			yyl893 := r.ReadArrayStart()
			if yyl893 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl893, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys894Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys894Slc
	var yyhl894 bool = l >= 0
	for yyj894 := 0; ; yyj894++ {
		if yyhl894 {
			if yyj894 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys894Slc = r.DecodeBytes(yys894Slc, true, true)
		yys894 := string(yys894Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys894 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv897 := &x.ListMeta
				yym898 := z.DecBinary()
				_ = yym898
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv897) {
				} else {
					z.DecFallback(yyv897, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv899 := &x.Items
				yym900 := z.DecBinary()
				_ = yym900
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv899), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys894)
		} // end switch yys894
	} // end for yyj894
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj901 int
	var yyb901 bool
	var yyhl901 bool = l >= 0
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv904 := &x.ListMeta
		yym905 := z.DecBinary()
		_ = yym905
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv904) {
		} else {
			z.DecFallback(yyv904, false)
		}
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv906 := &x.Items
		yym907 := z.DecBinary()
		_ = yym907
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv906), d)
		}
	}
	for {
		yyj901++
		if yyhl901 {
			yyb901 = yyj901 > l
		} else {
			yyb901 = r.CheckBreak()
		}
		if yyb901 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj901-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym908 := z.EncBinary()
		_ = yym908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep909 := !z.EncBinary()
			yy2arr909 := z.EncBasicHandle().StructToArray
			var yyq909 [3]bool
			_, _, _ = yysep909, yyq909, yy2arr909
			const yyr909 bool = false
			yyq909[1] = x.Selector != nil
			yyq909[2] = true
			var yynn909 int
			if yyr909 || yy2arr909 {
				r.EncodeArrayStart(3)
			} else {
				yynn909 = 1
				for _, b := range yyq909 {
					if b {
						yynn909++
					}
				}
				r.EncodeMapStart(yynn909)
				yynn909 = 0
			}
			if yyr909 || yy2arr909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym911 := z.EncBinary()
				_ = yym911
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym912 := z.EncBinary()
				_ = yym912
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr909 || yy2arr909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq909[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym914 := z.EncBinary()
						_ = yym914
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq909[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym915 := z.EncBinary()
						_ = yym915
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr909 || yy2arr909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq909[2] {
					yy917 := &x.Template
					yy917.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq909[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy918 := &x.Template
					yy918.CodecEncodeSelf(e)
				}
			}
			if yyr909 || yy2arr909 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym919 := z.DecBinary()
	_ = yym919
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct920 := r.ContainerType()
		if yyct920 == codecSelferValueTypeMap1234 {
			yyl920 := r.ReadMapStart()
			if yyl920 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl920, d)
			}
		} else if yyct920 == codecSelferValueTypeArray1234 {
			yyl920 := r.ReadArrayStart()
			if yyl920 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl920, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys921Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys921Slc
	var yyhl921 bool = l >= 0
	for yyj921 := 0; ; yyj921++ {
		if yyhl921 {
			if yyj921 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys921Slc = r.DecodeBytes(yys921Slc, true, true)
		yys921 := string(yys921Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys921 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym924 := z.DecBinary()
				_ = yym924
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv925 := &x.Template
				yyv925.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys921)
		} // end switch yys921
	} // end for yyj921
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj926 int
	var yyb926 bool
	var yyhl926 bool = l >= 0
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym929 := z.DecBinary()
		_ = yym929
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj926++
	if yyhl926 {
		yyb926 = yyj926 > l
	} else {
		yyb926 = r.CheckBreak()
	}
	if yyb926 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv930 := &x.Template
		yyv930.CodecDecodeSelf(d)
	}
	for {
		yyj926++
		if yyhl926 {
			yyb926 = yyj926 > l
		} else {
			yyb926 = r.CheckBreak()
		}
		if yyb926 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj926-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym931 := z.EncBinary()
		_ = yym931
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep932 := !z.EncBinary()
			yy2arr932 := z.EncBasicHandle().StructToArray
			var yyq932 [4]bool
			_, _, _ = yysep932, yyq932, yy2arr932
			const yyr932 bool = false
			yyq932[1] = x.FullyLabeledReplicas != 0
			yyq932[2] = x.ReadyReplicas != 0
			yyq932[3] = x.ObservedGeneration != 0
			var yynn932 int
			if yyr932 || yy2arr932 {
				r.EncodeArrayStart(4)
			} else {
				yynn932 = 1
				for _, b := range yyq932 {
					if b {
						yynn932++
					}
				}
				r.EncodeMapStart(yynn932)
				yynn932 = 0
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym934 := z.EncBinary()
				_ = yym934
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym935 := z.EncBinary()
				_ = yym935
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[1] {
					yym937 := z.EncBinary()
					_ = yym937
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq932[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym938 := z.EncBinary()
					_ = yym938
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[2] {
					yym940 := z.EncBinary()
					_ = yym940
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq932[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym941 := z.EncBinary()
					_ = yym941
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[3] {
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq932[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym944 := z.EncBinary()
					_ = yym944
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym945 := z.DecBinary()
	_ = yym945
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct946 := r.ContainerType()
		if yyct946 == codecSelferValueTypeMap1234 {
			yyl946 := r.ReadMapStart()
			if yyl946 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl946, d)
			}
		} else if yyct946 == codecSelferValueTypeArray1234 {
			yyl946 := r.ReadArrayStart()
			if yyl946 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl946, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys947Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys947Slc
	var yyhl947 bool = l >= 0
	for yyj947 := 0; ; yyj947++ {
		if yyhl947 {
			if yyj947 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys947Slc = r.DecodeBytes(yys947Slc, true, true)
		yys947 := string(yys947Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys947 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys947)
		} // end switch yys947
	} // end for yyj947
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj952 int
	var yyb952 bool
	var yyhl952 bool = l >= 0
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj952++
	if yyhl952 {
		yyb952 = yyj952 > l
	} else {
		yyb952 = r.CheckBreak()
	}
	if yyb952 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj952++
		if yyhl952 {
			yyb952 = yyj952 > l
		} else {
			yyb952 = r.CheckBreak()
		}
		if yyb952 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj952-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym957 := z.EncBinary()
		_ = yym957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep958 := !z.EncBinary()
			yy2arr958 := z.EncBasicHandle().StructToArray
			var yyq958 [4]bool
			_, _, _ = yysep958, yyq958, yy2arr958
			const yyr958 bool = false
			yyq958[0] = x.Kind != ""
			yyq958[1] = x.APIVersion != ""
			yyq958[2] = true
			yyq958[3] = true
			var yynn958 int
			if yyr958 || yy2arr958 {
				r.EncodeArrayStart(4)
			} else {
				yynn958 = 0
				for _, b := range yyq958 {
					if b {
						yynn958++
					}
				}
				r.EncodeMapStart(yynn958)
				yynn958 = 0
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[0] {
					yym960 := z.EncBinary()
					_ = yym960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq958[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym961 := z.EncBinary()
					_ = yym961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[1] {
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq958[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym964 := z.EncBinary()
					_ = yym964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[2] {
					yy966 := &x.ObjectMeta
					yy966.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq958[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy967 := &x.ObjectMeta
					yy967.CodecEncodeSelf(e)
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[3] {
					yy969 := &x.Spec
					yy969.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq958[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy970 := &x.Spec
					yy970.CodecEncodeSelf(e)
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym971 := z.DecBinary()
	_ = yym971
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct972 := r.ContainerType()
		if yyct972 == codecSelferValueTypeMap1234 {
			yyl972 := r.ReadMapStart()
			if yyl972 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl972, d)
			}
		} else if yyct972 == codecSelferValueTypeArray1234 {
			yyl972 := r.ReadArrayStart()
			if yyl972 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl972, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys973Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys973Slc
	var yyhl973 bool = l >= 0
	for yyj973 := 0; ; yyj973++ {
		if yyhl973 {
			if yyj973 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys973Slc = r.DecodeBytes(yys973Slc, true, true)
		yys973 := string(yys973Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys973 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv976 := &x.ObjectMeta
				yyv976.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSecurityPolicySpec{}
			} else {
				yyv977 := &x.Spec
				yyv977.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys973)
		} // end switch yys973
	} // end for yyj973
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj978 int
	var yyb978 bool
	var yyhl978 bool = l >= 0
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv981 := &x.ObjectMeta
		yyv981.CodecDecodeSelf(d)
	}
	yyj978++
	if yyhl978 {
		yyb978 = yyj978 > l
	} else {
		yyb978 = r.CheckBreak()
	}
	if yyb978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSecurityPolicySpec{}
	} else {
		yyv982 := &x.Spec
		yyv982.CodecDecodeSelf(d)
	}
	for {
		yyj978++
		if yyhl978 {
			yyb978 = yyj978 > l
		} else {
			yyb978 = r.CheckBreak()
		}
		if yyb978 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj978-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym983 := z.EncBinary()
		_ = yym983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep984 := !z.EncBinary()
			yy2arr984 := z.EncBasicHandle().StructToArray
			var yyq984 [14]bool
			_, _, _ = yysep984, yyq984, yy2arr984
			const yyr984 bool = false
			yyq984[0] = x.Privileged != false
			yyq984[1] = len(x.DefaultAddCapabilities) != 0
			yyq984[2] = len(x.RequiredDropCapabilities) != 0
			yyq984[3] = len(x.AllowedCapabilities) != 0
			yyq984[4] = len(x.Volumes) != 0
			yyq984[5] = x.HostNetwork != false
			yyq984[6] = len(x.HostPorts) != 0
			yyq984[7] = x.HostPID != false
			yyq984[8] = x.HostIPC != false
			yyq984[13] = x.ReadOnlyRootFilesystem != false
			var yynn984 int
			if yyr984 || yy2arr984 {
				r.EncodeArrayStart(14)
			} else {
				yynn984 = 4
				for _, b := range yyq984 {
					if b {
						yynn984++
					}
				}
				r.EncodeMapStart(yynn984)
				yynn984 = 0
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[0] {
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq984[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[1] {
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym989 := z.EncBinary()
						_ = yym989
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultAddCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym990 := z.EncBinary()
						_ = yym990
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[2] {
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym992 := z.EncBinary()
						_ = yym992
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDropCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym993 := z.EncBinary()
						_ = yym993
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[3] {
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym995 := z.EncBinary()
						_ = yym995
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.AllowedCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allowedCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym996 := z.EncBinary()
						_ = yym996
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.AllowedCapabilities), e)
						}
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[4] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym998 := z.EncBinary()
						_ = yym998
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym999 := z.EncBinary()
						_ = yym999
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[5] {
					yym1001 := z.EncBinary()
					_ = yym1001
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq984[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1002 := z.EncBinary()
					_ = yym1002
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[6] {
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1004 := z.EncBinary()
						_ = yym1004
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq984[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPorts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1005 := z.EncBinary()
						_ = yym1005
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[7] {
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq984[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1008 := z.EncBinary()
					_ = yym1008
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[8] {
					yym1010 := z.EncBinary()
					_ = yym1010
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq984[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1011 := z.EncBinary()
					_ = yym1011
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1013 := &x.SELinux
				yy1013.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("seLinux"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1014 := &x.SELinux
				yy1014.CodecEncodeSelf(e)
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1016 := &x.RunAsUser
				yy1016.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1017 := &x.RunAsUser
				yy1017.CodecEncodeSelf(e)
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1019 := &x.SupplementalGroups
				yy1019.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1020 := &x.SupplementalGroups
				yy1020.CodecEncodeSelf(e)
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1022 := &x.FSGroup
				yy1022.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1023 := &x.FSGroup
				yy1023.CodecEncodeSelf(e)
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq984[13] {
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq984[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				}
			}
			if yyr984 || yy2arr984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1027 := z.DecBinary()
	_ = yym1027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1028 := r.ContainerType()
		if yyct1028 == codecSelferValueTypeMap1234 {
			yyl1028 := r.ReadMapStart()
			if yyl1028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1028, d)
			}
		} else if yyct1028 == codecSelferValueTypeArray1234 {
			yyl1028 := r.ReadArrayStart()
			if yyl1028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1029Slc
	var yyhl1029 bool = l >= 0
	for yyj1029 := 0; ; yyj1029++ {
		if yyhl1029 {
			if yyj1029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1029Slc = r.DecodeBytes(yys1029Slc, true, true)
		yys1029 := string(yys1029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1029 {
		case "privileged":
			if r.TryDecodeAsNil() {
				x.Privileged = false
			} else {
				x.Privileged = bool(r.DecodeBool())
			}
		case "defaultAddCapabilities":
			if r.TryDecodeAsNil() {
				x.DefaultAddCapabilities = nil
			} else {
				yyv1031 := &x.DefaultAddCapabilities
				yym1032 := z.DecBinary()
				_ = yym1032
				if false {
				} else {
					h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1031), d)
				}
			}
		case "requiredDropCapabilities":
			if r.TryDecodeAsNil() {
				x.RequiredDropCapabilities = nil
			} else {
				yyv1033 := &x.RequiredDropCapabilities
				yym1034 := z.DecBinary()
				_ = yym1034
				if false {
				} else {
					h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1033), d)
				}
			}
		case "allowedCapabilities":
			if r.TryDecodeAsNil() {
				x.AllowedCapabilities = nil
			} else {
				yyv1035 := &x.AllowedCapabilities
				yym1036 := z.DecBinary()
				_ = yym1036
				if false {
				} else {
					h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1035), d)
				}
			}
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1037 := &x.Volumes
				yym1038 := z.DecBinary()
				_ = yym1038
				if false {
				} else {
					h.decSliceFSType((*[]FSType)(yyv1037), d)
				}
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPorts":
			if r.TryDecodeAsNil() {
				x.HostPorts = nil
			} else {
				yyv1040 := &x.HostPorts
				yym1041 := z.DecBinary()
				_ = yym1041
				if false {
				} else {
					h.decSliceHostPortRange((*[]HostPortRange)(yyv1040), d)
				}
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinux":
			if r.TryDecodeAsNil() {
				x.SELinux = SELinuxStrategyOptions{}
			} else {
				yyv1044 := &x.SELinux
				yyv1044.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				x.RunAsUser = RunAsUserStrategyOptions{}
			} else {
				yyv1045 := &x.RunAsUser
				yyv1045.CodecDecodeSelf(d)
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
			} else {
				yyv1046 := &x.SupplementalGroups
				yyv1046.CodecDecodeSelf(d)
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				x.FSGroup = FSGroupStrategyOptions{}
			} else {
				yyv1047 := &x.FSGroup
				yyv1047.CodecDecodeSelf(d)
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				x.ReadOnlyRootFilesystem = false
			} else {
				x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1029)
		} // end switch yys1029
	} // end for yyj1029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1049 int
	var yyb1049 bool
	var yyhl1049 bool = l >= 0
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Privileged = false
	} else {
		x.Privileged = bool(r.DecodeBool())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultAddCapabilities = nil
	} else {
		yyv1051 := &x.DefaultAddCapabilities
		yym1052 := z.DecBinary()
		_ = yym1052
		if false {
		} else {
			h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1051), d)
		}
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDropCapabilities = nil
	} else {
		yyv1053 := &x.RequiredDropCapabilities
		yym1054 := z.DecBinary()
		_ = yym1054
		if false {
		} else {
			h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1053), d)
		}
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AllowedCapabilities = nil
	} else {
		yyv1055 := &x.AllowedCapabilities
		yym1056 := z.DecBinary()
		_ = yym1056
		if false {
		} else {
			h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1055), d)
		}
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1057 := &x.Volumes
		yym1058 := z.DecBinary()
		_ = yym1058
		if false {
		} else {
			h.decSliceFSType((*[]FSType)(yyv1057), d)
		}
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPorts = nil
	} else {
		yyv1060 := &x.HostPorts
		yym1061 := z.DecBinary()
		_ = yym1061
		if false {
		} else {
			h.decSliceHostPortRange((*[]HostPortRange)(yyv1060), d)
		}
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SELinux = SELinuxStrategyOptions{}
	} else {
		yyv1064 := &x.SELinux
		yyv1064.CodecDecodeSelf(d)
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RunAsUser = RunAsUserStrategyOptions{}
	} else {
		yyv1065 := &x.RunAsUser
		yyv1065.CodecDecodeSelf(d)
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
	} else {
		yyv1066 := &x.SupplementalGroups
		yyv1066.CodecDecodeSelf(d)
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSGroup = FSGroupStrategyOptions{}
	} else {
		yyv1067 := &x.FSGroup
		yyv1067.CodecDecodeSelf(d)
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnlyRootFilesystem = false
	} else {
		x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
	}
	for {
		yyj1049++
		if yyhl1049 {
			yyb1049 = yyj1049 > l
		} else {
			yyb1049 = r.CheckBreak()
		}
		if yyb1049 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1049-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HostPortRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1069 := z.EncBinary()
		_ = yym1069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1070 := !z.EncBinary()
			yy2arr1070 := z.EncBasicHandle().StructToArray
			var yyq1070 [2]bool
			_, _, _ = yysep1070, yyq1070, yy2arr1070
			const yyr1070 bool = false
			var yynn1070 int
			if yyr1070 || yy2arr1070 {
				r.EncodeArrayStart(2)
			} else {
				yynn1070 = 2
				for _, b := range yyq1070 {
					if b {
						yynn1070++
					}
				}
				r.EncodeMapStart(yynn1070)
				yynn1070 = 0
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1072 := z.EncBinary()
				_ = yym1072
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1073 := z.EncBinary()
				_ = yym1073
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1075 := z.EncBinary()
				_ = yym1075
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1076 := z.EncBinary()
				_ = yym1076
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPortRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1077 := z.DecBinary()
	_ = yym1077
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1078 := r.ContainerType()
		if yyct1078 == codecSelferValueTypeMap1234 {
			yyl1078 := r.ReadMapStart()
			if yyl1078 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1078, d)
			}
		} else if yyct1078 == codecSelferValueTypeArray1234 {
			yyl1078 := r.ReadArrayStart()
			if yyl1078 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1078, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPortRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1079Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1079Slc
	var yyhl1079 bool = l >= 0
	for yyj1079 := 0; ; yyj1079++ {
		if yyhl1079 {
			if yyj1079 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1079Slc = r.DecodeBytes(yys1079Slc, true, true)
		yys1079 := string(yys1079Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1079 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1079)
		} // end switch yys1079
	} // end for yyj1079
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPortRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1082 int
	var yyb1082 bool
	var yyhl1082 bool = l >= 0
	yyj1082++
	if yyhl1082 {
		yyb1082 = yyj1082 > l
	} else {
		yyb1082 = r.CheckBreak()
	}
	if yyb1082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1082++
	if yyhl1082 {
		yyb1082 = yyj1082 > l
	} else {
		yyb1082 = r.CheckBreak()
	}
	if yyb1082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1082++
		if yyhl1082 {
			yyb1082 = yyj1082 > l
		} else {
			yyb1082 = r.CheckBreak()
		}
		if yyb1082 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1082-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1085 := z.EncBinary()
	_ = yym1085
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1086 := z.DecBinary()
	_ = yym1086
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SELinuxStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1087 := z.EncBinary()
		_ = yym1087
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1088 := !z.EncBinary()
			yy2arr1088 := z.EncBasicHandle().StructToArray
			var yyq1088 [2]bool
			_, _, _ = yysep1088, yyq1088, yy2arr1088
			const yyr1088 bool = false
			yyq1088[1] = x.SELinuxOptions != nil
			var yynn1088 int
			if yyr1088 || yy2arr1088 {
				r.EncodeArrayStart(2)
			} else {
				yynn1088 = 1
				for _, b := range yyq1088 {
					if b {
						yynn1088++
					}
				}
				r.EncodeMapStart(yynn1088)
				yynn1088 = 0
			}
			if yyr1088 || yy2arr1088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1088 || yy2arr1088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1088[1] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1088[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1088 || yy2arr1088 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1091 := z.DecBinary()
	_ = yym1091
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1092 := r.ContainerType()
		if yyct1092 == codecSelferValueTypeMap1234 {
			yyl1092 := r.ReadMapStart()
			if yyl1092 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1092, d)
			}
		} else if yyct1092 == codecSelferValueTypeArray1234 {
			yyl1092 := r.ReadArrayStart()
			if yyl1092 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1092, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1093Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1093Slc
	var yyhl1093 bool = l >= 0
	for yyj1093 := 0; ; yyj1093++ {
		if yyhl1093 {
			if yyj1093 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1093Slc = r.DecodeBytes(yys1093Slc, true, true)
		yys1093 := string(yys1093Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1093 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SELinuxStrategy(r.DecodeString())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(pkg2_api.SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1093)
		} // end switch yys1093
	} // end for yyj1093
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1096 int
	var yyb1096 bool
	var yyhl1096 bool = l >= 0
	yyj1096++
	if yyhl1096 {
		yyb1096 = yyj1096 > l
	} else {
		yyb1096 = r.CheckBreak()
	}
	if yyb1096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SELinuxStrategy(r.DecodeString())
	}
	yyj1096++
	if yyhl1096 {
		yyb1096 = yyj1096 > l
	} else {
		yyb1096 = r.CheckBreak()
	}
	if yyb1096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(pkg2_api.SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	for {
		yyj1096++
		if yyhl1096 {
			yyb1096 = yyj1096 > l
		} else {
			yyb1096 = r.CheckBreak()
		}
		if yyb1096 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1096-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SELinuxStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1099 := z.EncBinary()
	_ = yym1099
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SELinuxStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1100 := z.DecBinary()
	_ = yym1100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RunAsUserStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1101 := z.EncBinary()
		_ = yym1101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1102 := !z.EncBinary()
			yy2arr1102 := z.EncBasicHandle().StructToArray
			var yyq1102 [2]bool
			_, _, _ = yysep1102, yyq1102, yy2arr1102
			const yyr1102 bool = false
			yyq1102[1] = len(x.Ranges) != 0
			var yynn1102 int
			if yyr1102 || yy2arr1102 {
				r.EncodeArrayStart(2)
			} else {
				yynn1102 = 1
				for _, b := range yyq1102 {
					if b {
						yynn1102++
					}
				}
				r.EncodeMapStart(yynn1102)
				yynn1102 = 0
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1102[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1105 := z.EncBinary()
						_ = yym1105
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1102[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1106 := z.EncBinary()
						_ = yym1106
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1102 || yy2arr1102 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RunAsUserStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1107 := z.DecBinary()
	_ = yym1107
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1108 := r.ContainerType()
		if yyct1108 == codecSelferValueTypeMap1234 {
			yyl1108 := r.ReadMapStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1108, d)
			}
		} else if yyct1108 == codecSelferValueTypeArray1234 {
			yyl1108 := r.ReadArrayStart()
			if yyl1108 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1108, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1109Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1109Slc
	var yyhl1109 bool = l >= 0
	for yyj1109 := 0; ; yyj1109++ {
		if yyhl1109 {
			if yyj1109 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1109Slc = r.DecodeBytes(yys1109Slc, true, true)
		yys1109 := string(yys1109Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1109 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = RunAsUserStrategy(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1111 := &x.Ranges
				yym1112 := z.DecBinary()
				_ = yym1112
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1111), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1109)
		} // end switch yys1109
	} // end for yyj1109
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1113 int
	var yyb1113 bool
	var yyhl1113 bool = l >= 0
	yyj1113++
	if yyhl1113 {
		yyb1113 = yyj1113 > l
	} else {
		yyb1113 = r.CheckBreak()
	}
	if yyb1113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = RunAsUserStrategy(r.DecodeString())
	}
	yyj1113++
	if yyhl1113 {
		yyb1113 = yyj1113 > l
	} else {
		yyb1113 = r.CheckBreak()
	}
	if yyb1113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1115 := &x.Ranges
		yym1116 := z.DecBinary()
		_ = yym1116
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1115), d)
		}
	}
	for {
		yyj1113++
		if yyhl1113 {
			yyb1113 = yyj1113 > l
		} else {
			yyb1113 = r.CheckBreak()
		}
		if yyb1113 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1113-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IDRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1117 := z.EncBinary()
		_ = yym1117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1118 := !z.EncBinary()
			yy2arr1118 := z.EncBasicHandle().StructToArray
			var yyq1118 [2]bool
			_, _, _ = yysep1118, yyq1118, yy2arr1118
			const yyr1118 bool = false
			var yynn1118 int
			if yyr1118 || yy2arr1118 {
				r.EncodeArrayStart(2)
			} else {
				yynn1118 = 2
				for _, b := range yyq1118 {
					if b {
						yynn1118++
					}
				}
				r.EncodeMapStart(yynn1118)
				yynn1118 = 0
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1120 := z.EncBinary()
				_ = yym1120
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1121 := z.EncBinary()
				_ = yym1121
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1123 := z.EncBinary()
				_ = yym1123
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1124 := z.EncBinary()
				_ = yym1124
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1118 || yy2arr1118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IDRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1125 := z.DecBinary()
	_ = yym1125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1126 := r.ContainerType()
		if yyct1126 == codecSelferValueTypeMap1234 {
			yyl1126 := r.ReadMapStart()
			if yyl1126 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1126, d)
			}
		} else if yyct1126 == codecSelferValueTypeArray1234 {
			yyl1126 := r.ReadArrayStart()
			if yyl1126 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IDRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1127Slc
	var yyhl1127 bool = l >= 0
	for yyj1127 := 0; ; yyj1127++ {
		if yyhl1127 {
			if yyj1127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1127Slc = r.DecodeBytes(yys1127Slc, true, true)
		yys1127 := string(yys1127Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1127 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int64(r.DecodeInt(64))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1127)
		} // end switch yys1127
	} // end for yyj1127
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IDRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1130 int
	var yyb1130 bool
	var yyhl1130 bool = l >= 0
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int64(r.DecodeInt(64))
	}
	yyj1130++
	if yyhl1130 {
		yyb1130 = yyj1130 > l
	} else {
		yyb1130 = r.CheckBreak()
	}
	if yyb1130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int64(r.DecodeInt(64))
	}
	for {
		yyj1130++
		if yyhl1130 {
			yyb1130 = yyj1130 > l
		} else {
			yyb1130 = r.CheckBreak()
		}
		if yyb1130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RunAsUserStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1133 := z.EncBinary()
	_ = yym1133
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RunAsUserStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1134 := z.DecBinary()
	_ = yym1134
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *FSGroupStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1135 := z.EncBinary()
		_ = yym1135
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1136 := !z.EncBinary()
			yy2arr1136 := z.EncBasicHandle().StructToArray
			var yyq1136 [2]bool
			_, _, _ = yysep1136, yyq1136, yy2arr1136
			const yyr1136 bool = false
			yyq1136[0] = x.Rule != ""
			yyq1136[1] = len(x.Ranges) != 0
			var yynn1136 int
			if yyr1136 || yy2arr1136 {
				r.EncodeArrayStart(2)
			} else {
				yynn1136 = 0
				for _, b := range yyq1136 {
					if b {
						yynn1136++
					}
				}
				r.EncodeMapStart(yynn1136)
				yynn1136 = 0
			}
			if yyr1136 || yy2arr1136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1136[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1136[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1136 || yy2arr1136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1136[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1139 := z.EncBinary()
						_ = yym1139
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1136[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1140 := z.EncBinary()
						_ = yym1140
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1136 || yy2arr1136 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FSGroupStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1141 := z.DecBinary()
	_ = yym1141
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1142 := r.ContainerType()
		if yyct1142 == codecSelferValueTypeMap1234 {
			yyl1142 := r.ReadMapStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1142, d)
			}
		} else if yyct1142 == codecSelferValueTypeArray1234 {
			yyl1142 := r.ReadArrayStart()
			if yyl1142 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1142, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1143Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1143Slc
	var yyhl1143 bool = l >= 0
	for yyj1143 := 0; ; yyj1143++ {
		if yyhl1143 {
			if yyj1143 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1143Slc = r.DecodeBytes(yys1143Slc, true, true)
		yys1143 := string(yys1143Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1143 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = FSGroupStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1145 := &x.Ranges
				yym1146 := z.DecBinary()
				_ = yym1146
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1145), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1143)
		} // end switch yys1143
	} // end for yyj1143
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1147 int
	var yyb1147 bool
	var yyhl1147 bool = l >= 0
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = FSGroupStrategyType(r.DecodeString())
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1149 := &x.Ranges
		yym1150 := z.DecBinary()
		_ = yym1150
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1149), d)
		}
	}
	for {
		yyj1147++
		if yyhl1147 {
			yyb1147 = yyj1147 > l
		} else {
			yyb1147 = r.CheckBreak()
		}
		if yyb1147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSGroupStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1151 := z.EncBinary()
	_ = yym1151
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSGroupStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1152 := z.DecBinary()
	_ = yym1152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1153 := z.EncBinary()
		_ = yym1153
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1154 := !z.EncBinary()
			yy2arr1154 := z.EncBasicHandle().StructToArray
			var yyq1154 [2]bool
			_, _, _ = yysep1154, yyq1154, yy2arr1154
			const yyr1154 bool = false
			yyq1154[0] = x.Rule != ""
			yyq1154[1] = len(x.Ranges) != 0
			var yynn1154 int
			if yyr1154 || yy2arr1154 {
				r.EncodeArrayStart(2)
			} else {
				yynn1154 = 0
				for _, b := range yyq1154 {
					if b {
						yynn1154++
					}
				}
				r.EncodeMapStart(yynn1154)
				yynn1154 = 0
			}
			if yyr1154 || yy2arr1154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1154[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1154[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1154 || yy2arr1154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1154[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1157 := z.EncBinary()
						_ = yym1157
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1154[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1158 := z.EncBinary()
						_ = yym1158
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1154 || yy2arr1154 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1159 := z.DecBinary()
	_ = yym1159
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1160 := r.ContainerType()
		if yyct1160 == codecSelferValueTypeMap1234 {
			yyl1160 := r.ReadMapStart()
			if yyl1160 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1160, d)
			}
		} else if yyct1160 == codecSelferValueTypeArray1234 {
			yyl1160 := r.ReadArrayStart()
			if yyl1160 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1160, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1161Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1161Slc
	var yyhl1161 bool = l >= 0
	for yyj1161 := 0; ; yyj1161++ {
		if yyhl1161 {
			if yyj1161 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1161Slc = r.DecodeBytes(yys1161Slc, true, true)
		yys1161 := string(yys1161Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1161 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1163 := &x.Ranges
				yym1164 := z.DecBinary()
				_ = yym1164
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1163), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1161)
		} // end switch yys1161
	} // end for yyj1161
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1165 int
	var yyb1165 bool
	var yyhl1165 bool = l >= 0
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
	}
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1167 := &x.Ranges
		yym1168 := z.DecBinary()
		_ = yym1168
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1167), d)
		}
	}
	for {
		yyj1165++
		if yyhl1165 {
			yyb1165 = yyj1165 > l
		} else {
			yyb1165 = r.CheckBreak()
		}
		if yyb1165 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1165-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SupplementalGroupsStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1169 := z.EncBinary()
	_ = yym1169
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SupplementalGroupsStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1170 := z.DecBinary()
	_ = yym1170
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSecurityPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1171 := z.EncBinary()
		_ = yym1171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1172 := !z.EncBinary()
			yy2arr1172 := z.EncBasicHandle().StructToArray
			var yyq1172 [4]bool
			_, _, _ = yysep1172, yyq1172, yy2arr1172
			const yyr1172 bool = false
			yyq1172[0] = x.Kind != ""
			yyq1172[1] = x.APIVersion != ""
			yyq1172[2] = true
			var yynn1172 int
			if yyr1172 || yy2arr1172 {
				r.EncodeArrayStart(4)
			} else {
				yynn1172 = 1
				for _, b := range yyq1172 {
					if b {
						yynn1172++
					}
				}
				r.EncodeMapStart(yynn1172)
				yynn1172 = 0
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1172[0] {
					yym1174 := z.EncBinary()
					_ = yym1174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1172[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1175 := z.EncBinary()
					_ = yym1175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1172[1] {
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1172[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1178 := z.EncBinary()
					_ = yym1178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1172[2] {
					yy1180 := &x.ListMeta
					yym1181 := z.EncBinary()
					_ = yym1181
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1180) {
					} else {
						z.EncFallback(yy1180)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1172[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1182 := &x.ListMeta
					yym1183 := z.EncBinary()
					_ = yym1183
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1182) {
					} else {
						z.EncFallback(yy1182)
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1185 := z.EncBinary()
					_ = yym1185
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1187 := z.DecBinary()
	_ = yym1187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1188 := r.ContainerType()
		if yyct1188 == codecSelferValueTypeMap1234 {
			yyl1188 := r.ReadMapStart()
			if yyl1188 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1188, d)
			}
		} else if yyct1188 == codecSelferValueTypeArray1234 {
			yyl1188 := r.ReadArrayStart()
			if yyl1188 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1189Slc
	var yyhl1189 bool = l >= 0
	for yyj1189 := 0; ; yyj1189++ {
		if yyhl1189 {
			if yyj1189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1189Slc = r.DecodeBytes(yys1189Slc, true, true)
		yys1189 := string(yys1189Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1189 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1192 := &x.ListMeta
				yym1193 := z.DecBinary()
				_ = yym1193
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1192) {
				} else {
					z.DecFallback(yyv1192, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1194 := &x.Items
				yym1195 := z.DecBinary()
				_ = yym1195
				if false {
				} else {
					h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1194), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1189)
		} // end switch yys1189
	} // end for yyj1189
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1196 int
	var yyb1196 bool
	var yyhl1196 bool = l >= 0
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1199 := &x.ListMeta
		yym1200 := z.DecBinary()
		_ = yym1200
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1199) {
		} else {
			z.DecFallback(yyv1199, false)
		}
	}
	yyj1196++
	if yyhl1196 {
		yyb1196 = yyj1196 > l
	} else {
		yyb1196 = r.CheckBreak()
	}
	if yyb1196 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1201 := &x.Items
		yym1202 := z.DecBinary()
		_ = yym1202
		if false {
		} else {
			h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1201), d)
		}
	}
	for {
		yyj1196++
		if yyhl1196 {
			yyb1196 = yyj1196 > l
		} else {
			yyb1196 = r.CheckBreak()
		}
		if yyb1196 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1196-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1203 := z.EncBinary()
		_ = yym1203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1204 := !z.EncBinary()
			yy2arr1204 := z.EncBasicHandle().StructToArray
			var yyq1204 [4]bool
			_, _, _ = yysep1204, yyq1204, yy2arr1204
			const yyr1204 bool = false
			yyq1204[0] = x.Kind != ""
			yyq1204[1] = x.APIVersion != ""
			yyq1204[2] = true
			yyq1204[3] = true
			var yynn1204 int
			if yyr1204 || yy2arr1204 {
				r.EncodeArrayStart(4)
			} else {
				yynn1204 = 0
				for _, b := range yyq1204 {
					if b {
						yynn1204++
					}
				}
				r.EncodeMapStart(yynn1204)
				yynn1204 = 0
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1204[0] {
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1204[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1207 := z.EncBinary()
					_ = yym1207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1204[1] {
					yym1209 := z.EncBinary()
					_ = yym1209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1204[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1210 := z.EncBinary()
					_ = yym1210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1204[2] {
					yy1212 := &x.ObjectMeta
					yy1212.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1204[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1213 := &x.ObjectMeta
					yy1213.CodecEncodeSelf(e)
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1204[3] {
					yy1215 := &x.Spec
					yy1215.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1204[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1216 := &x.Spec
					yy1216.CodecEncodeSelf(e)
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1217 := z.DecBinary()
	_ = yym1217
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1218 := r.ContainerType()
		if yyct1218 == codecSelferValueTypeMap1234 {
			yyl1218 := r.ReadMapStart()
			if yyl1218 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1218, d)
			}
		} else if yyct1218 == codecSelferValueTypeArray1234 {
			yyl1218 := r.ReadArrayStart()
			if yyl1218 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1218, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1219Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1219Slc
	var yyhl1219 bool = l >= 0
	for yyj1219 := 0; ; yyj1219++ {
		if yyhl1219 {
			if yyj1219 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1219Slc = r.DecodeBytes(yys1219Slc, true, true)
		yys1219 := string(yys1219Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1219 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1222 := &x.ObjectMeta
				yyv1222.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkPolicySpec{}
			} else {
				yyv1223 := &x.Spec
				yyv1223.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1219)
		} // end switch yys1219
	} // end for yyj1219
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1224 int
	var yyb1224 bool
	var yyhl1224 bool = l >= 0
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1227 := &x.ObjectMeta
		yyv1227.CodecDecodeSelf(d)
	}
	yyj1224++
	if yyhl1224 {
		yyb1224 = yyj1224 > l
	} else {
		yyb1224 = r.CheckBreak()
	}
	if yyb1224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NetworkPolicySpec{}
	} else {
		yyv1228 := &x.Spec
		yyv1228.CodecDecodeSelf(d)
	}
	for {
		yyj1224++
		if yyhl1224 {
			yyb1224 = yyj1224 > l
		} else {
			yyb1224 = r.CheckBreak()
		}
		if yyb1224 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1224-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1229 := z.EncBinary()
		_ = yym1229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1230 := !z.EncBinary()
			yy2arr1230 := z.EncBasicHandle().StructToArray
			var yyq1230 [2]bool
			_, _, _ = yysep1230, yyq1230, yy2arr1230
			const yyr1230 bool = false
			yyq1230[1] = len(x.Ingress) != 0
			var yynn1230 int
			if yyr1230 || yy2arr1230 {
				r.EncodeArrayStart(2)
			} else {
				yynn1230 = 1
				for _, b := range yyq1230 {
					if b {
						yynn1230++
					}
				}
				r.EncodeMapStart(yynn1230)
				yynn1230 = 0
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1232 := &x.PodSelector
				yym1233 := z.EncBinary()
				_ = yym1233
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1232) {
				} else {
					z.EncFallback(yy1232)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1234 := &x.PodSelector
				yym1235 := z.EncBinary()
				_ = yym1235
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1234) {
				} else {
					z.EncFallback(yy1234)
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[1] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1237 := z.EncBinary()
						_ = yym1237
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1238 := z.EncBinary()
						_ = yym1238
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1239 := z.DecBinary()
	_ = yym1239
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1240 := r.ContainerType()
		if yyct1240 == codecSelferValueTypeMap1234 {
			yyl1240 := r.ReadMapStart()
			if yyl1240 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1240, d)
			}
		} else if yyct1240 == codecSelferValueTypeArray1234 {
			yyl1240 := r.ReadArrayStart()
			if yyl1240 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1240, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1241Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1241Slc
	var yyhl1241 bool = l >= 0
	for yyj1241 := 0; ; yyj1241++ {
		if yyhl1241 {
			if yyj1241 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1241Slc = r.DecodeBytes(yys1241Slc, true, true)
		yys1241 := string(yys1241Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1241 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				x.PodSelector = pkg1_unversioned.LabelSelector{}
			} else {
				yyv1242 := &x.PodSelector
				yym1243 := z.DecBinary()
				_ = yym1243
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1242) {
				} else {
					z.DecFallback(yyv1242, false)
				}
			}
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1244 := &x.Ingress
				yym1245 := z.DecBinary()
				_ = yym1245
				if false {
				} else {
					h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1244), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1241)
		} // end switch yys1241
	} // end for yyj1241
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1246 int
	var yyb1246 bool
	var yyhl1246 bool = l >= 0
	yyj1246++
	if yyhl1246 {
		yyb1246 = yyj1246 > l
	} else {
		yyb1246 = r.CheckBreak()
	}
	if yyb1246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSelector = pkg1_unversioned.LabelSelector{}
	} else {
		yyv1247 := &x.PodSelector
		yym1248 := z.DecBinary()
		_ = yym1248
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1247) {
		} else {
			z.DecFallback(yyv1247, false)
		}
	}
	yyj1246++
	if yyhl1246 {
		yyb1246 = yyj1246 > l
	} else {
		yyb1246 = r.CheckBreak()
	}
	if yyb1246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1249 := &x.Ingress
		yym1250 := z.DecBinary()
		_ = yym1250
		if false {
		} else {
			h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1249), d)
		}
	}
	for {
		yyj1246++
		if yyhl1246 {
			yyb1246 = yyj1246 > l
		} else {
			yyb1246 = r.CheckBreak()
		}
		if yyb1246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyIngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1251 := z.EncBinary()
		_ = yym1251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1252 := !z.EncBinary()
			yy2arr1252 := z.EncBasicHandle().StructToArray
			var yyq1252 [2]bool
			_, _, _ = yysep1252, yyq1252, yy2arr1252
			const yyr1252 bool = false
			yyq1252[0] = len(x.Ports) != 0
			yyq1252[1] = len(x.From) != 0
			var yynn1252 int
			if yyr1252 || yy2arr1252 {
				r.EncodeArrayStart(2)
			} else {
				yynn1252 = 0
				for _, b := range yyq1252 {
					if b {
						yynn1252++
					}
				}
				r.EncodeMapStart(yynn1252)
				yynn1252 = 0
			}
			if yyr1252 || yy2arr1252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1252[0] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1254 := z.EncBinary()
						_ = yym1254
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1252[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1255 := z.EncBinary()
						_ = yym1255
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1252 || yy2arr1252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1252[1] {
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1257 := z.EncBinary()
						_ = yym1257
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1252[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("from"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1258 := z.EncBinary()
						_ = yym1258
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				}
			}
			if yyr1252 || yy2arr1252 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyIngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1259 := z.DecBinary()
	_ = yym1259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1260 := r.ContainerType()
		if yyct1260 == codecSelferValueTypeMap1234 {
			yyl1260 := r.ReadMapStart()
			if yyl1260 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1260, d)
			}
		} else if yyct1260 == codecSelferValueTypeArray1234 {
			yyl1260 := r.ReadArrayStart()
			if yyl1260 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1260, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1261Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1261Slc
	var yyhl1261 bool = l >= 0
	for yyj1261 := 0; ; yyj1261++ {
		if yyhl1261 {
			if yyj1261 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1261Slc = r.DecodeBytes(yys1261Slc, true, true)
		yys1261 := string(yys1261Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1261 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1262 := &x.Ports
				yym1263 := z.DecBinary()
				_ = yym1263
				if false {
				} else {
					h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1262), d)
				}
			}
		case "from":
			if r.TryDecodeAsNil() {
				x.From = nil
			} else {
				yyv1264 := &x.From
				yym1265 := z.DecBinary()
				_ = yym1265
				if false {
				} else {
					h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1264), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1261)
		} // end switch yys1261
	} // end for yyj1261
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1266 int
	var yyb1266 bool
	var yyhl1266 bool = l >= 0
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1267 := &x.Ports
		yym1268 := z.DecBinary()
		_ = yym1268
		if false {
		} else {
			h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1267), d)
		}
	}
	yyj1266++
	if yyhl1266 {
		yyb1266 = yyj1266 > l
	} else {
		yyb1266 = r.CheckBreak()
	}
	if yyb1266 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.From = nil
	} else {
		yyv1269 := &x.From
		yym1270 := z.DecBinary()
		_ = yym1270
		if false {
		} else {
			h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1269), d)
		}
	}
	for {
		yyj1266++
		if yyhl1266 {
			yyb1266 = yyj1266 > l
		} else {
			yyb1266 = r.CheckBreak()
		}
		if yyb1266 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1266-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1271 := z.EncBinary()
		_ = yym1271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1272 := !z.EncBinary()
			yy2arr1272 := z.EncBasicHandle().StructToArray
			var yyq1272 [2]bool
			_, _, _ = yysep1272, yyq1272, yy2arr1272
			const yyr1272 bool = false
			yyq1272[0] = x.Protocol != nil
			yyq1272[1] = x.Port != nil
			var yynn1272 int
			if yyr1272 || yy2arr1272 {
				r.EncodeArrayStart(2)
			} else {
				yynn1272 = 0
				for _, b := range yyq1272 {
					if b {
						yynn1272++
					}
				}
				r.EncodeMapStart(yynn1272)
				yynn1272 = 0
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1272[0] {
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1274 := *x.Protocol
						yym1275 := z.EncBinary()
						_ = yym1275
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1274) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1274))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1272[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1276 := *x.Protocol
						yym1277 := z.EncBinary()
						_ = yym1277
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1276) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1276))
						}
					}
				}
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1272[1] {
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1279 := z.EncBinary()
						_ = yym1279
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1279 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1272[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1280 := z.EncBinary()
						_ = yym1280
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1280 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				}
			}
			if yyr1272 || yy2arr1272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1281 := z.DecBinary()
	_ = yym1281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1282 := r.ContainerType()
		if yyct1282 == codecSelferValueTypeMap1234 {
			yyl1282 := r.ReadMapStart()
			if yyl1282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1282, d)
			}
		} else if yyct1282 == codecSelferValueTypeArray1234 {
			yyl1282 := r.ReadArrayStart()
			if yyl1282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1283Slc
	var yyhl1283 bool = l >= 0
	for yyj1283 := 0; ; yyj1283++ {
		if yyhl1283 {
			if yyj1283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1283Slc = r.DecodeBytes(yys1283Slc, true, true)
		yys1283 := string(yys1283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1283 {
		case "protocol":
			if r.TryDecodeAsNil() {
				if x.Protocol != nil {
					x.Protocol = nil
				}
			} else {
				if x.Protocol == nil {
					x.Protocol = new(pkg2_api.Protocol)
				}
				x.Protocol.CodecDecodeSelf(d)
			}
		case "port":
			if r.TryDecodeAsNil() {
				if x.Port != nil {
					x.Port = nil
				}
			} else {
				if x.Port == nil {
					x.Port = new(pkg5_intstr.IntOrString)
				}
				yym1286 := z.DecBinary()
				_ = yym1286
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Port) {
				} else if !yym1286 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Port)
				} else {
					z.DecFallback(x.Port, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1283)
		} // end switch yys1283
	} // end for yyj1283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1287 int
	var yyb1287 bool
	var yyhl1287 bool = l >= 0
	yyj1287++
	if yyhl1287 {
		yyb1287 = yyj1287 > l
	} else {
		yyb1287 = r.CheckBreak()
	}
	if yyb1287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Protocol != nil {
			x.Protocol = nil
		}
	} else {
		if x.Protocol == nil {
			x.Protocol = new(pkg2_api.Protocol)
		}
		x.Protocol.CodecDecodeSelf(d)
	}
	yyj1287++
	if yyhl1287 {
		yyb1287 = yyj1287 > l
	} else {
		yyb1287 = r.CheckBreak()
	}
	if yyb1287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Port != nil {
			x.Port = nil
		}
	} else {
		if x.Port == nil {
			x.Port = new(pkg5_intstr.IntOrString)
		}
		yym1290 := z.DecBinary()
		_ = yym1290
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Port) {
		} else if !yym1290 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Port)
		} else {
			z.DecFallback(x.Port, false)
		}
	}
	for {
		yyj1287++
		if yyhl1287 {
			yyb1287 = yyj1287 > l
		} else {
			yyb1287 = r.CheckBreak()
		}
		if yyb1287 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1287-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPeer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1291 := z.EncBinary()
		_ = yym1291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1292 := !z.EncBinary()
			yy2arr1292 := z.EncBasicHandle().StructToArray
			var yyq1292 [2]bool
			_, _, _ = yysep1292, yyq1292, yy2arr1292
			const yyr1292 bool = false
			yyq1292[0] = x.PodSelector != nil
			yyq1292[1] = x.NamespaceSelector != nil
			var yynn1292 int
			if yyr1292 || yy2arr1292 {
				r.EncodeArrayStart(2)
			} else {
				yynn1292 = 0
				for _, b := range yyq1292 {
					if b {
						yynn1292++
					}
				}
				r.EncodeMapStart(yynn1292)
				yynn1292 = 0
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[0] {
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1294 := z.EncBinary()
						_ = yym1294
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1292[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1295 := z.EncBinary()
						_ = yym1295
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[1] {
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1297 := z.EncBinary()
						_ = yym1297
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1292[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespaceSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1298 := z.EncBinary()
						_ = yym1298
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPeer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1299 := z.DecBinary()
	_ = yym1299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1300 := r.ContainerType()
		if yyct1300 == codecSelferValueTypeMap1234 {
			yyl1300 := r.ReadMapStart()
			if yyl1300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1300, d)
			}
		} else if yyct1300 == codecSelferValueTypeArray1234 {
			yyl1300 := r.ReadArrayStart()
			if yyl1300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1301Slc
	var yyhl1301 bool = l >= 0
	for yyj1301 := 0; ; yyj1301++ {
		if yyhl1301 {
			if yyj1301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1301Slc = r.DecodeBytes(yys1301Slc, true, true)
		yys1301 := string(yys1301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1301 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				if x.PodSelector != nil {
					x.PodSelector = nil
				}
			} else {
				if x.PodSelector == nil {
					x.PodSelector = new(pkg1_unversioned.LabelSelector)
				}
				yym1303 := z.DecBinary()
				_ = yym1303
				if false {
				} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
				} else {
					z.DecFallback(x.PodSelector, false)
				}
			}
		case "namespaceSelector":
			if r.TryDecodeAsNil() {
				if x.NamespaceSelector != nil {
					x.NamespaceSelector = nil
				}
			} else {
				if x.NamespaceSelector == nil {
					x.NamespaceSelector = new(pkg1_unversioned.LabelSelector)
				}
				yym1305 := z.DecBinary()
				_ = yym1305
				if false {
				} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
				} else {
					z.DecFallback(x.NamespaceSelector, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1301)
		} // end switch yys1301
	} // end for yyj1301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1306 int
	var yyb1306 bool
	var yyhl1306 bool = l >= 0
	yyj1306++
	if yyhl1306 {
		yyb1306 = yyj1306 > l
	} else {
		yyb1306 = r.CheckBreak()
	}
	if yyb1306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodSelector != nil {
			x.PodSelector = nil
		}
	} else {
		if x.PodSelector == nil {
			x.PodSelector = new(pkg1_unversioned.LabelSelector)
		}
		yym1308 := z.DecBinary()
		_ = yym1308
		if false {
		} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
		} else {
			z.DecFallback(x.PodSelector, false)
		}
	}
	yyj1306++
	if yyhl1306 {
		yyb1306 = yyj1306 > l
	} else {
		yyb1306 = r.CheckBreak()
	}
	if yyb1306 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NamespaceSelector != nil {
			x.NamespaceSelector = nil
		}
	} else {
		if x.NamespaceSelector == nil {
			x.NamespaceSelector = new(pkg1_unversioned.LabelSelector)
		}
		yym1310 := z.DecBinary()
		_ = yym1310
		if false {
		} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
		} else {
			z.DecFallback(x.NamespaceSelector, false)
		}
	}
	for {
		yyj1306++
		if yyhl1306 {
			yyb1306 = yyj1306 > l
		} else {
			yyb1306 = r.CheckBreak()
		}
		if yyb1306 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1306-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1311 := z.EncBinary()
		_ = yym1311
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1312 := !z.EncBinary()
			yy2arr1312 := z.EncBasicHandle().StructToArray
			var yyq1312 [4]bool
			_, _, _ = yysep1312, yyq1312, yy2arr1312
			const yyr1312 bool = false
			yyq1312[0] = x.Kind != ""
			yyq1312[1] = x.APIVersion != ""
			yyq1312[2] = true
			var yynn1312 int
			if yyr1312 || yy2arr1312 {
				r.EncodeArrayStart(4)
			} else {
				yynn1312 = 1
				for _, b := range yyq1312 {
					if b {
						yynn1312++
					}
				}
				r.EncodeMapStart(yynn1312)
				yynn1312 = 0
			}
			if yyr1312 || yy2arr1312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1312[0] {
					yym1314 := z.EncBinary()
					_ = yym1314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1312[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1312 || yy2arr1312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1312[1] {
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1312[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1312 || yy2arr1312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1312[2] {
					yy1320 := &x.ListMeta
					yym1321 := z.EncBinary()
					_ = yym1321
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1320) {
					} else {
						z.EncFallback(yy1320)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1312[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1322 := &x.ListMeta
					yym1323 := z.EncBinary()
					_ = yym1323
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1322) {
					} else {
						z.EncFallback(yy1322)
					}
				}
			}
			if yyr1312 || yy2arr1312 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1325 := z.EncBinary()
					_ = yym1325
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1326 := z.EncBinary()
					_ = yym1326
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			}
			if yyr1312 || yy2arr1312 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1327 := z.DecBinary()
	_ = yym1327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1328 := r.ContainerType()
		if yyct1328 == codecSelferValueTypeMap1234 {
			yyl1328 := r.ReadMapStart()
			if yyl1328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1328, d)
			}
		} else if yyct1328 == codecSelferValueTypeArray1234 {
			yyl1328 := r.ReadArrayStart()
			if yyl1328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1329Slc
	var yyhl1329 bool = l >= 0
	for yyj1329 := 0; ; yyj1329++ {
		if yyhl1329 {
			if yyj1329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1329Slc = r.DecodeBytes(yys1329Slc, true, true)
		yys1329 := string(yys1329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1332 := &x.ListMeta
				yym1333 := z.DecBinary()
				_ = yym1333
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1332) {
				} else {
					z.DecFallback(yyv1332, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1334 := &x.Items
				yym1335 := z.DecBinary()
				_ = yym1335
				if false {
				} else {
					h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1334), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1329)
		} // end switch yys1329
	} // end for yyj1329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1336 int
	var yyb1336 bool
	var yyhl1336 bool = l >= 0
	yyj1336++
	if yyhl1336 {
		yyb1336 = yyj1336 > l
	} else {
		yyb1336 = r.CheckBreak()
	}
	if yyb1336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1336++
	if yyhl1336 {
		yyb1336 = yyj1336 > l
	} else {
		yyb1336 = r.CheckBreak()
	}
	if yyb1336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1336++
	if yyhl1336 {
		yyb1336 = yyj1336 > l
	} else {
		yyb1336 = r.CheckBreak()
	}
	if yyb1336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1339 := &x.ListMeta
		yym1340 := z.DecBinary()
		_ = yym1340
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1339) {
		} else {
			z.DecFallback(yyv1339, false)
		}
	}
	yyj1336++
	if yyhl1336 {
		yyb1336 = yyj1336 > l
	} else {
		yyb1336 = r.CheckBreak()
	}
	if yyb1336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1341 := &x.Items
		yym1342 := z.DecBinary()
		_ = yym1342
		if false {
		} else {
			h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1341), d)
		}
	}
	for {
		yyj1336++
		if yyhl1336 {
			yyb1336 = yyj1336 > l
		} else {
			yyb1336 = r.CheckBreak()
		}
		if yyb1336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *StorageClass) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1343 := z.EncBinary()
		_ = yym1343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1344 := !z.EncBinary()
			yy2arr1344 := z.EncBasicHandle().StructToArray
			var yyq1344 [5]bool
			_, _, _ = yysep1344, yyq1344, yy2arr1344
			const yyr1344 bool = false
			yyq1344[0] = x.Kind != ""
			yyq1344[1] = x.APIVersion != ""
			yyq1344[2] = true
			yyq1344[4] = len(x.Parameters) != 0
			var yynn1344 int
			if yyr1344 || yy2arr1344 {
				r.EncodeArrayStart(5)
			} else {
				yynn1344 = 1
				for _, b := range yyq1344 {
					if b {
						yynn1344++
					}
				}
				r.EncodeMapStart(yynn1344)
				yynn1344 = 0
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1344[0] {
					yym1346 := z.EncBinary()
					_ = yym1346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1347 := z.EncBinary()
					_ = yym1347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1344[1] {
					yym1349 := z.EncBinary()
					_ = yym1349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1344[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1350 := z.EncBinary()
					_ = yym1350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1344[2] {
					yy1352 := &x.ObjectMeta
					yy1352.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1353 := &x.ObjectMeta
					yy1353.CodecEncodeSelf(e)
				}
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1355 := z.EncBinary()
				_ = yym1355
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Provisioner))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("provisioner"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1356 := z.EncBinary()
				_ = yym1356
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Provisioner))
				}
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1344[4] {
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym1358 := z.EncBinary()
						_ = yym1358
						if false {
						} else {
							z.F.EncMapStringStringV(x.Parameters, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1344[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parameters"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym1359 := z.EncBinary()
						_ = yym1359
						if false {
						} else {
							z.F.EncMapStringStringV(x.Parameters, false, e)
						}
					}
				}
			}
			if yyr1344 || yy2arr1344 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *StorageClass) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1360 := z.DecBinary()
	_ = yym1360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1361 := r.ContainerType()
		if yyct1361 == codecSelferValueTypeMap1234 {
			yyl1361 := r.ReadMapStart()
			if yyl1361 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1361, d)
			}
		} else if yyct1361 == codecSelferValueTypeArray1234 {
			yyl1361 := r.ReadArrayStart()
			if yyl1361 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1361, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *StorageClass) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1362Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1362Slc
	var yyhl1362 bool = l >= 0
	for yyj1362 := 0; ; yyj1362++ {
		if yyhl1362 {
			if yyj1362 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1362Slc = r.DecodeBytes(yys1362Slc, true, true)
		yys1362 := string(yys1362Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1362 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1365 := &x.ObjectMeta
				yyv1365.CodecDecodeSelf(d)
			}
		case "provisioner":
			if r.TryDecodeAsNil() {
				x.Provisioner = ""
			} else {
				x.Provisioner = string(r.DecodeString())
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				x.Parameters = nil
			} else {
				yyv1367 := &x.Parameters
				yym1368 := z.DecBinary()
				_ = yym1368
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1367, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1362)
		} // end switch yys1362
	} // end for yyj1362
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *StorageClass) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1369 int
	var yyb1369 bool
	var yyhl1369 bool = l >= 0
	yyj1369++
	if yyhl1369 {
		yyb1369 = yyj1369 > l
	} else {
		yyb1369 = r.CheckBreak()
	}
	if yyb1369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1369++
	if yyhl1369 {
		yyb1369 = yyj1369 > l
	} else {
		yyb1369 = r.CheckBreak()
	}
	if yyb1369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1369++
	if yyhl1369 {
		yyb1369 = yyj1369 > l
	} else {
		yyb1369 = r.CheckBreak()
	}
	if yyb1369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1372 := &x.ObjectMeta
		yyv1372.CodecDecodeSelf(d)
	}
	yyj1369++
	if yyhl1369 {
		yyb1369 = yyj1369 > l
	} else {
		yyb1369 = r.CheckBreak()
	}
	if yyb1369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Provisioner = ""
	} else {
		x.Provisioner = string(r.DecodeString())
	}
	yyj1369++
	if yyhl1369 {
		yyb1369 = yyj1369 > l
	} else {
		yyb1369 = r.CheckBreak()
	}
	if yyb1369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Parameters = nil
	} else {
		yyv1374 := &x.Parameters
		yym1375 := z.DecBinary()
		_ = yym1375
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1374, false, d)
		}
	}
	for {
		yyj1369++
		if yyhl1369 {
			yyb1369 = yyj1369 > l
		} else {
			yyb1369 = r.CheckBreak()
		}
		if yyb1369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *StorageClassList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1376 := z.EncBinary()
		_ = yym1376
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1377 := !z.EncBinary()
			yy2arr1377 := z.EncBasicHandle().StructToArray
			var yyq1377 [4]bool
			_, _, _ = yysep1377, yyq1377, yy2arr1377
			const yyr1377 bool = false
			yyq1377[0] = x.Kind != ""
			yyq1377[1] = x.APIVersion != ""
			yyq1377[2] = true
			var yynn1377 int
			if yyr1377 || yy2arr1377 {
				r.EncodeArrayStart(4)
			} else {
				yynn1377 = 1
				for _, b := range yyq1377 {
					if b {
						yynn1377++
					}
				}
				r.EncodeMapStart(yynn1377)
				yynn1377 = 0
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[0] {
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1377[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[1] {
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1377[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1377[2] {
					yy1385 := &x.ListMeta
					yym1386 := z.EncBinary()
					_ = yym1386
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1385) {
					} else {
						z.EncFallback(yy1385)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1377[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1387 := &x.ListMeta
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1387) {
					} else {
						z.EncFallback(yy1387)
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						h.encSliceStorageClass(([]StorageClass)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						h.encSliceStorageClass(([]StorageClass)(x.Items), e)
					}
				}
			}
			if yyr1377 || yy2arr1377 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *StorageClassList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1392 := z.DecBinary()
	_ = yym1392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1393 := r.ContainerType()
		if yyct1393 == codecSelferValueTypeMap1234 {
			yyl1393 := r.ReadMapStart()
			if yyl1393 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1393, d)
			}
		} else if yyct1393 == codecSelferValueTypeArray1234 {
			yyl1393 := r.ReadArrayStart()
			if yyl1393 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1393, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *StorageClassList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1394Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1394Slc
	var yyhl1394 bool = l >= 0
	for yyj1394 := 0; ; yyj1394++ {
		if yyhl1394 {
			if yyj1394 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1394Slc = r.DecodeBytes(yys1394Slc, true, true)
		yys1394 := string(yys1394Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1394 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1397 := &x.ListMeta
				yym1398 := z.DecBinary()
				_ = yym1398
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1397) {
				} else {
					z.DecFallback(yyv1397, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1399 := &x.Items
				yym1400 := z.DecBinary()
				_ = yym1400
				if false {
				} else {
					h.decSliceStorageClass((*[]StorageClass)(yyv1399), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1394)
		} // end switch yys1394
	} // end for yyj1394
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *StorageClassList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1401 int
	var yyb1401 bool
	var yyhl1401 bool = l >= 0
	yyj1401++
	if yyhl1401 {
		yyb1401 = yyj1401 > l
	} else {
		yyb1401 = r.CheckBreak()
	}
	if yyb1401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1401++
	if yyhl1401 {
		yyb1401 = yyj1401 > l
	} else {
		yyb1401 = r.CheckBreak()
	}
	if yyb1401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1401++
	if yyhl1401 {
		yyb1401 = yyj1401 > l
	} else {
		yyb1401 = r.CheckBreak()
	}
	if yyb1401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1404 := &x.ListMeta
		yym1405 := z.DecBinary()
		_ = yym1405
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1404) {
		} else {
			z.DecFallback(yyv1404, false)
		}
	}
	yyj1401++
	if yyhl1401 {
		yyb1401 = yyj1401 > l
	} else {
		yyb1401 = r.CheckBreak()
	}
	if yyb1401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1406 := &x.Items
		yym1407 := z.DecBinary()
		_ = yym1407
		if false {
		} else {
			h.decSliceStorageClass((*[]StorageClass)(yyv1406), d)
		}
	}
	for {
		yyj1401++
		if yyhl1401 {
			yyb1401 = yyj1401 > l
		} else {
			yyb1401 = r.CheckBreak()
		}
		if yyb1401 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1401-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1408 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1409 := &yyv1408
		yy1409.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1410 := *v
	yyh1410, yyl1410 := z.DecSliceHelperStart()
	var yyc1410 bool
	if yyl1410 == 0 {
		if yyv1410 == nil {
			yyv1410 = []CustomMetricTarget{}
			yyc1410 = true
		} else if len(yyv1410) != 0 {
			yyv1410 = yyv1410[:0]
			yyc1410 = true
		}
	} else if yyl1410 > 0 {
		var yyrr1410, yyrl1410 int
		var yyrt1410 bool
		if yyl1410 > cap(yyv1410) {

			yyrg1410 := len(yyv1410) > 0
			yyv21410 := yyv1410
			yyrl1410, yyrt1410 = z.DecInferLen(yyl1410, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1410 {
				if yyrl1410 <= cap(yyv1410) {
					yyv1410 = yyv1410[:yyrl1410]
				} else {
					yyv1410 = make([]CustomMetricTarget, yyrl1410)
				}
			} else {
				yyv1410 = make([]CustomMetricTarget, yyrl1410)
			}
			yyc1410 = true
			yyrr1410 = len(yyv1410)
			if yyrg1410 {
				copy(yyv1410, yyv21410)
			}
		} else if yyl1410 != len(yyv1410) {
			yyv1410 = yyv1410[:yyl1410]
			yyc1410 = true
		}
		yyj1410 := 0
		for ; yyj1410 < yyrr1410; yyj1410++ {
			yyh1410.ElemContainerState(yyj1410)
			if r.TryDecodeAsNil() {
				yyv1410[yyj1410] = CustomMetricTarget{}
			} else {
				yyv1411 := &yyv1410[yyj1410]
				yyv1411.CodecDecodeSelf(d)
			}

		}
		if yyrt1410 {
			for ; yyj1410 < yyl1410; yyj1410++ {
				yyv1410 = append(yyv1410, CustomMetricTarget{})
				yyh1410.ElemContainerState(yyj1410)
				if r.TryDecodeAsNil() {
					yyv1410[yyj1410] = CustomMetricTarget{}
				} else {
					yyv1412 := &yyv1410[yyj1410]
					yyv1412.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1410 := 0
		for ; !r.CheckBreak(); yyj1410++ {

			if yyj1410 >= len(yyv1410) {
				yyv1410 = append(yyv1410, CustomMetricTarget{}) // var yyz1410 CustomMetricTarget
				yyc1410 = true
			}
			yyh1410.ElemContainerState(yyj1410)
			if yyj1410 < len(yyv1410) {
				if r.TryDecodeAsNil() {
					yyv1410[yyj1410] = CustomMetricTarget{}
				} else {
					yyv1413 := &yyv1410[yyj1410]
					yyv1413.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1410 < len(yyv1410) {
			yyv1410 = yyv1410[:yyj1410]
			yyc1410 = true
		} else if yyj1410 == 0 && yyv1410 == nil {
			yyv1410 = []CustomMetricTarget{}
			yyc1410 = true
		}
	}
	yyh1410.End()
	if yyc1410 {
		*v = yyv1410
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1414 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1415 := &yyv1414
		yy1415.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1416 := *v
	yyh1416, yyl1416 := z.DecSliceHelperStart()
	var yyc1416 bool
	if yyl1416 == 0 {
		if yyv1416 == nil {
			yyv1416 = []CustomMetricCurrentStatus{}
			yyc1416 = true
		} else if len(yyv1416) != 0 {
			yyv1416 = yyv1416[:0]
			yyc1416 = true
		}
	} else if yyl1416 > 0 {
		var yyrr1416, yyrl1416 int
		var yyrt1416 bool
		if yyl1416 > cap(yyv1416) {

			yyrg1416 := len(yyv1416) > 0
			yyv21416 := yyv1416
			yyrl1416, yyrt1416 = z.DecInferLen(yyl1416, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1416 {
				if yyrl1416 <= cap(yyv1416) {
					yyv1416 = yyv1416[:yyrl1416]
				} else {
					yyv1416 = make([]CustomMetricCurrentStatus, yyrl1416)
				}
			} else {
				yyv1416 = make([]CustomMetricCurrentStatus, yyrl1416)
			}
			yyc1416 = true
			yyrr1416 = len(yyv1416)
			if yyrg1416 {
				copy(yyv1416, yyv21416)
			}
		} else if yyl1416 != len(yyv1416) {
			yyv1416 = yyv1416[:yyl1416]
			yyc1416 = true
		}
		yyj1416 := 0
		for ; yyj1416 < yyrr1416; yyj1416++ {
			yyh1416.ElemContainerState(yyj1416)
			if r.TryDecodeAsNil() {
				yyv1416[yyj1416] = CustomMetricCurrentStatus{}
			} else {
				yyv1417 := &yyv1416[yyj1416]
				yyv1417.CodecDecodeSelf(d)
			}

		}
		if yyrt1416 {
			for ; yyj1416 < yyl1416; yyj1416++ {
				yyv1416 = append(yyv1416, CustomMetricCurrentStatus{})
				yyh1416.ElemContainerState(yyj1416)
				if r.TryDecodeAsNil() {
					yyv1416[yyj1416] = CustomMetricCurrentStatus{}
				} else {
					yyv1418 := &yyv1416[yyj1416]
					yyv1418.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1416 := 0
		for ; !r.CheckBreak(); yyj1416++ {

			if yyj1416 >= len(yyv1416) {
				yyv1416 = append(yyv1416, CustomMetricCurrentStatus{}) // var yyz1416 CustomMetricCurrentStatus
				yyc1416 = true
			}
			yyh1416.ElemContainerState(yyj1416)
			if yyj1416 < len(yyv1416) {
				if r.TryDecodeAsNil() {
					yyv1416[yyj1416] = CustomMetricCurrentStatus{}
				} else {
					yyv1419 := &yyv1416[yyj1416]
					yyv1419.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1416 < len(yyv1416) {
			yyv1416 = yyv1416[:yyj1416]
			yyc1416 = true
		} else if yyj1416 == 0 && yyv1416 == nil {
			yyv1416 = []CustomMetricCurrentStatus{}
			yyc1416 = true
		}
	}
	yyh1416.End()
	if yyc1416 {
		*v = yyv1416
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1420 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1421 := &yyv1420
		yy1421.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1422 := *v
	yyh1422, yyl1422 := z.DecSliceHelperStart()
	var yyc1422 bool
	if yyl1422 == 0 {
		if yyv1422 == nil {
			yyv1422 = []APIVersion{}
			yyc1422 = true
		} else if len(yyv1422) != 0 {
			yyv1422 = yyv1422[:0]
			yyc1422 = true
		}
	} else if yyl1422 > 0 {
		var yyrr1422, yyrl1422 int
		var yyrt1422 bool
		if yyl1422 > cap(yyv1422) {

			yyrg1422 := len(yyv1422) > 0
			yyv21422 := yyv1422
			yyrl1422, yyrt1422 = z.DecInferLen(yyl1422, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1422 {
				if yyrl1422 <= cap(yyv1422) {
					yyv1422 = yyv1422[:yyrl1422]
				} else {
					yyv1422 = make([]APIVersion, yyrl1422)
				}
			} else {
				yyv1422 = make([]APIVersion, yyrl1422)
			}
			yyc1422 = true
			yyrr1422 = len(yyv1422)
			if yyrg1422 {
				copy(yyv1422, yyv21422)
			}
		} else if yyl1422 != len(yyv1422) {
			yyv1422 = yyv1422[:yyl1422]
			yyc1422 = true
		}
		yyj1422 := 0
		for ; yyj1422 < yyrr1422; yyj1422++ {
			yyh1422.ElemContainerState(yyj1422)
			if r.TryDecodeAsNil() {
				yyv1422[yyj1422] = APIVersion{}
			} else {
				yyv1423 := &yyv1422[yyj1422]
				yyv1423.CodecDecodeSelf(d)
			}

		}
		if yyrt1422 {
			for ; yyj1422 < yyl1422; yyj1422++ {
				yyv1422 = append(yyv1422, APIVersion{})
				yyh1422.ElemContainerState(yyj1422)
				if r.TryDecodeAsNil() {
					yyv1422[yyj1422] = APIVersion{}
				} else {
					yyv1424 := &yyv1422[yyj1422]
					yyv1424.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1422 := 0
		for ; !r.CheckBreak(); yyj1422++ {

			if yyj1422 >= len(yyv1422) {
				yyv1422 = append(yyv1422, APIVersion{}) // var yyz1422 APIVersion
				yyc1422 = true
			}
			yyh1422.ElemContainerState(yyj1422)
			if yyj1422 < len(yyv1422) {
				if r.TryDecodeAsNil() {
					yyv1422[yyj1422] = APIVersion{}
				} else {
					yyv1425 := &yyv1422[yyj1422]
					yyv1425.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1422 < len(yyv1422) {
			yyv1422 = yyv1422[:yyj1422]
			yyc1422 = true
		} else if yyj1422 == 0 && yyv1422 == nil {
			yyv1422 = []APIVersion{}
			yyc1422 = true
		}
	}
	yyh1422.End()
	if yyc1422 {
		*v = yyv1422
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1426 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1427 := &yyv1426
		yy1427.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1428 := *v
	yyh1428, yyl1428 := z.DecSliceHelperStart()
	var yyc1428 bool
	if yyl1428 == 0 {
		if yyv1428 == nil {
			yyv1428 = []ThirdPartyResource{}
			yyc1428 = true
		} else if len(yyv1428) != 0 {
			yyv1428 = yyv1428[:0]
			yyc1428 = true
		}
	} else if yyl1428 > 0 {
		var yyrr1428, yyrl1428 int
		var yyrt1428 bool
		if yyl1428 > cap(yyv1428) {

			yyrg1428 := len(yyv1428) > 0
			yyv21428 := yyv1428
			yyrl1428, yyrt1428 = z.DecInferLen(yyl1428, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt1428 {
				if yyrl1428 <= cap(yyv1428) {
					yyv1428 = yyv1428[:yyrl1428]
				} else {
					yyv1428 = make([]ThirdPartyResource, yyrl1428)
				}
			} else {
				yyv1428 = make([]ThirdPartyResource, yyrl1428)
			}
			yyc1428 = true
			yyrr1428 = len(yyv1428)
			if yyrg1428 {
				copy(yyv1428, yyv21428)
			}
		} else if yyl1428 != len(yyv1428) {
			yyv1428 = yyv1428[:yyl1428]
			yyc1428 = true
		}
		yyj1428 := 0
		for ; yyj1428 < yyrr1428; yyj1428++ {
			yyh1428.ElemContainerState(yyj1428)
			if r.TryDecodeAsNil() {
				yyv1428[yyj1428] = ThirdPartyResource{}
			} else {
				yyv1429 := &yyv1428[yyj1428]
				yyv1429.CodecDecodeSelf(d)
			}

		}
		if yyrt1428 {
			for ; yyj1428 < yyl1428; yyj1428++ {
				yyv1428 = append(yyv1428, ThirdPartyResource{})
				yyh1428.ElemContainerState(yyj1428)
				if r.TryDecodeAsNil() {
					yyv1428[yyj1428] = ThirdPartyResource{}
				} else {
					yyv1430 := &yyv1428[yyj1428]
					yyv1430.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1428 := 0
		for ; !r.CheckBreak(); yyj1428++ {

			if yyj1428 >= len(yyv1428) {
				yyv1428 = append(yyv1428, ThirdPartyResource{}) // var yyz1428 ThirdPartyResource
				yyc1428 = true
			}
			yyh1428.ElemContainerState(yyj1428)
			if yyj1428 < len(yyv1428) {
				if r.TryDecodeAsNil() {
					yyv1428[yyj1428] = ThirdPartyResource{}
				} else {
					yyv1431 := &yyv1428[yyj1428]
					yyv1431.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1428 < len(yyv1428) {
			yyv1428 = yyv1428[:yyj1428]
			yyc1428 = true
		} else if yyj1428 == 0 && yyv1428 == nil {
			yyv1428 = []ThirdPartyResource{}
			yyc1428 = true
		}
	}
	yyh1428.End()
	if yyc1428 {
		*v = yyv1428
	}
}

func (x codecSelfer1234) encSliceDeploymentCondition(v []DeploymentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1432 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1433 := &yyv1432
		yy1433.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeploymentCondition(v *[]DeploymentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1434 := *v
	yyh1434, yyl1434 := z.DecSliceHelperStart()
	var yyc1434 bool
	if yyl1434 == 0 {
		if yyv1434 == nil {
			yyv1434 = []DeploymentCondition{}
			yyc1434 = true
		} else if len(yyv1434) != 0 {
			yyv1434 = yyv1434[:0]
			yyc1434 = true
		}
	} else if yyl1434 > 0 {
		var yyrr1434, yyrl1434 int
		var yyrt1434 bool
		if yyl1434 > cap(yyv1434) {

			yyrg1434 := len(yyv1434) > 0
			yyv21434 := yyv1434
			yyrl1434, yyrt1434 = z.DecInferLen(yyl1434, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt1434 {
				if yyrl1434 <= cap(yyv1434) {
					yyv1434 = yyv1434[:yyrl1434]
				} else {
					yyv1434 = make([]DeploymentCondition, yyrl1434)
				}
			} else {
				yyv1434 = make([]DeploymentCondition, yyrl1434)
			}
			yyc1434 = true
			yyrr1434 = len(yyv1434)
			if yyrg1434 {
				copy(yyv1434, yyv21434)
			}
		} else if yyl1434 != len(yyv1434) {
			yyv1434 = yyv1434[:yyl1434]
			yyc1434 = true
		}
		yyj1434 := 0
		for ; yyj1434 < yyrr1434; yyj1434++ {
			yyh1434.ElemContainerState(yyj1434)
			if r.TryDecodeAsNil() {
				yyv1434[yyj1434] = DeploymentCondition{}
			} else {
				yyv1435 := &yyv1434[yyj1434]
				yyv1435.CodecDecodeSelf(d)
			}

		}
		if yyrt1434 {
			for ; yyj1434 < yyl1434; yyj1434++ {
				yyv1434 = append(yyv1434, DeploymentCondition{})
				yyh1434.ElemContainerState(yyj1434)
				if r.TryDecodeAsNil() {
					yyv1434[yyj1434] = DeploymentCondition{}
				} else {
					yyv1436 := &yyv1434[yyj1434]
					yyv1436.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1434 := 0
		for ; !r.CheckBreak(); yyj1434++ {

			if yyj1434 >= len(yyv1434) {
				yyv1434 = append(yyv1434, DeploymentCondition{}) // var yyz1434 DeploymentCondition
				yyc1434 = true
			}
			yyh1434.ElemContainerState(yyj1434)
			if yyj1434 < len(yyv1434) {
				if r.TryDecodeAsNil() {
					yyv1434[yyj1434] = DeploymentCondition{}
				} else {
					yyv1437 := &yyv1434[yyj1434]
					yyv1437.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1434 < len(yyv1434) {
			yyv1434 = yyv1434[:yyj1434]
			yyc1434 = true
		} else if yyj1434 == 0 && yyv1434 == nil {
			yyv1434 = []DeploymentCondition{}
			yyc1434 = true
		}
	}
	yyh1434.End()
	if yyc1434 {
		*v = yyv1434
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1438 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1439 := &yyv1438
		yy1439.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1440 := *v
	yyh1440, yyl1440 := z.DecSliceHelperStart()
	var yyc1440 bool
	if yyl1440 == 0 {
		if yyv1440 == nil {
			yyv1440 = []Deployment{}
			yyc1440 = true
		} else if len(yyv1440) != 0 {
			yyv1440 = yyv1440[:0]
			yyc1440 = true
		}
	} else if yyl1440 > 0 {
		var yyrr1440, yyrl1440 int
		var yyrt1440 bool
		if yyl1440 > cap(yyv1440) {

			yyrg1440 := len(yyv1440) > 0
			yyv21440 := yyv1440
			yyrl1440, yyrt1440 = z.DecInferLen(yyl1440, z.DecBasicHandle().MaxInitLen, 832)
			if yyrt1440 {
				if yyrl1440 <= cap(yyv1440) {
					yyv1440 = yyv1440[:yyrl1440]
				} else {
					yyv1440 = make([]Deployment, yyrl1440)
				}
			} else {
				yyv1440 = make([]Deployment, yyrl1440)
			}
			yyc1440 = true
			yyrr1440 = len(yyv1440)
			if yyrg1440 {
				copy(yyv1440, yyv21440)
			}
		} else if yyl1440 != len(yyv1440) {
			yyv1440 = yyv1440[:yyl1440]
			yyc1440 = true
		}
		yyj1440 := 0
		for ; yyj1440 < yyrr1440; yyj1440++ {
			yyh1440.ElemContainerState(yyj1440)
			if r.TryDecodeAsNil() {
				yyv1440[yyj1440] = Deployment{}
			} else {
				yyv1441 := &yyv1440[yyj1440]
				yyv1441.CodecDecodeSelf(d)
			}

		}
		if yyrt1440 {
			for ; yyj1440 < yyl1440; yyj1440++ {
				yyv1440 = append(yyv1440, Deployment{})
				yyh1440.ElemContainerState(yyj1440)
				if r.TryDecodeAsNil() {
					yyv1440[yyj1440] = Deployment{}
				} else {
					yyv1442 := &yyv1440[yyj1440]
					yyv1442.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1440 := 0
		for ; !r.CheckBreak(); yyj1440++ {

			if yyj1440 >= len(yyv1440) {
				yyv1440 = append(yyv1440, Deployment{}) // var yyz1440 Deployment
				yyc1440 = true
			}
			yyh1440.ElemContainerState(yyj1440)
			if yyj1440 < len(yyv1440) {
				if r.TryDecodeAsNil() {
					yyv1440[yyj1440] = Deployment{}
				} else {
					yyv1443 := &yyv1440[yyj1440]
					yyv1443.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1440 < len(yyv1440) {
			yyv1440 = yyv1440[:yyj1440]
			yyc1440 = true
		} else if yyj1440 == 0 && yyv1440 == nil {
			yyv1440 = []Deployment{}
			yyc1440 = true
		}
	}
	yyh1440.End()
	if yyc1440 {
		*v = yyv1440
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1444 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1445 := &yyv1444
		yy1445.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1446 := *v
	yyh1446, yyl1446 := z.DecSliceHelperStart()
	var yyc1446 bool
	if yyl1446 == 0 {
		if yyv1446 == nil {
			yyv1446 = []DaemonSet{}
			yyc1446 = true
		} else if len(yyv1446) != 0 {
			yyv1446 = yyv1446[:0]
			yyc1446 = true
		}
	} else if yyl1446 > 0 {
		var yyrr1446, yyrl1446 int
		var yyrt1446 bool
		if yyl1446 > cap(yyv1446) {

			yyrg1446 := len(yyv1446) > 0
			yyv21446 := yyv1446
			yyrl1446, yyrt1446 = z.DecInferLen(yyl1446, z.DecBasicHandle().MaxInitLen, 728)
			if yyrt1446 {
				if yyrl1446 <= cap(yyv1446) {
					yyv1446 = yyv1446[:yyrl1446]
				} else {
					yyv1446 = make([]DaemonSet, yyrl1446)
				}
			} else {
				yyv1446 = make([]DaemonSet, yyrl1446)
			}
			yyc1446 = true
			yyrr1446 = len(yyv1446)
			if yyrg1446 {
				copy(yyv1446, yyv21446)
			}
		} else if yyl1446 != len(yyv1446) {
			yyv1446 = yyv1446[:yyl1446]
			yyc1446 = true
		}
		yyj1446 := 0
		for ; yyj1446 < yyrr1446; yyj1446++ {
			yyh1446.ElemContainerState(yyj1446)
			if r.TryDecodeAsNil() {
				yyv1446[yyj1446] = DaemonSet{}
			} else {
				yyv1447 := &yyv1446[yyj1446]
				yyv1447.CodecDecodeSelf(d)
			}

		}
		if yyrt1446 {
			for ; yyj1446 < yyl1446; yyj1446++ {
				yyv1446 = append(yyv1446, DaemonSet{})
				yyh1446.ElemContainerState(yyj1446)
				if r.TryDecodeAsNil() {
					yyv1446[yyj1446] = DaemonSet{}
				} else {
					yyv1448 := &yyv1446[yyj1446]
					yyv1448.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1446 := 0
		for ; !r.CheckBreak(); yyj1446++ {

			if yyj1446 >= len(yyv1446) {
				yyv1446 = append(yyv1446, DaemonSet{}) // var yyz1446 DaemonSet
				yyc1446 = true
			}
			yyh1446.ElemContainerState(yyj1446)
			if yyj1446 < len(yyv1446) {
				if r.TryDecodeAsNil() {
					yyv1446[yyj1446] = DaemonSet{}
				} else {
					yyv1449 := &yyv1446[yyj1446]
					yyv1449.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1446 < len(yyv1446) {
			yyv1446 = yyv1446[:yyj1446]
			yyc1446 = true
		} else if yyj1446 == 0 && yyv1446 == nil {
			yyv1446 = []DaemonSet{}
			yyc1446 = true
		}
	}
	yyh1446.End()
	if yyc1446 {
		*v = yyv1446
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1450 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1451 := &yyv1450
		yy1451.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1452 := *v
	yyh1452, yyl1452 := z.DecSliceHelperStart()
	var yyc1452 bool
	if yyl1452 == 0 {
		if yyv1452 == nil {
			yyv1452 = []ThirdPartyResourceData{}
			yyc1452 = true
		} else if len(yyv1452) != 0 {
			yyv1452 = yyv1452[:0]
			yyc1452 = true
		}
	} else if yyl1452 > 0 {
		var yyrr1452, yyrl1452 int
		var yyrt1452 bool
		if yyl1452 > cap(yyv1452) {

			yyrg1452 := len(yyv1452) > 0
			yyv21452 := yyv1452
			yyrl1452, yyrt1452 = z.DecInferLen(yyl1452, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt1452 {
				if yyrl1452 <= cap(yyv1452) {
					yyv1452 = yyv1452[:yyrl1452]
				} else {
					yyv1452 = make([]ThirdPartyResourceData, yyrl1452)
				}
			} else {
				yyv1452 = make([]ThirdPartyResourceData, yyrl1452)
			}
			yyc1452 = true
			yyrr1452 = len(yyv1452)
			if yyrg1452 {
				copy(yyv1452, yyv21452)
			}
		} else if yyl1452 != len(yyv1452) {
			yyv1452 = yyv1452[:yyl1452]
			yyc1452 = true
		}
		yyj1452 := 0
		for ; yyj1452 < yyrr1452; yyj1452++ {
			yyh1452.ElemContainerState(yyj1452)
			if r.TryDecodeAsNil() {
				yyv1452[yyj1452] = ThirdPartyResourceData{}
			} else {
				yyv1453 := &yyv1452[yyj1452]
				yyv1453.CodecDecodeSelf(d)
			}

		}
		if yyrt1452 {
			for ; yyj1452 < yyl1452; yyj1452++ {
				yyv1452 = append(yyv1452, ThirdPartyResourceData{})
				yyh1452.ElemContainerState(yyj1452)
				if r.TryDecodeAsNil() {
					yyv1452[yyj1452] = ThirdPartyResourceData{}
				} else {
					yyv1454 := &yyv1452[yyj1452]
					yyv1454.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1452 := 0
		for ; !r.CheckBreak(); yyj1452++ {

			if yyj1452 >= len(yyv1452) {
				yyv1452 = append(yyv1452, ThirdPartyResourceData{}) // var yyz1452 ThirdPartyResourceData
				yyc1452 = true
			}
			yyh1452.ElemContainerState(yyj1452)
			if yyj1452 < len(yyv1452) {
				if r.TryDecodeAsNil() {
					yyv1452[yyj1452] = ThirdPartyResourceData{}
				} else {
					yyv1455 := &yyv1452[yyj1452]
					yyv1455.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1452 < len(yyv1452) {
			yyv1452 = yyv1452[:yyj1452]
			yyc1452 = true
		} else if yyj1452 == 0 && yyv1452 == nil {
			yyv1452 = []ThirdPartyResourceData{}
			yyc1452 = true
		}
	}
	yyh1452.End()
	if yyc1452 {
		*v = yyv1452
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1456 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1457 := &yyv1456
		yy1457.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1458 := *v
	yyh1458, yyl1458 := z.DecSliceHelperStart()
	var yyc1458 bool
	if yyl1458 == 0 {
		if yyv1458 == nil {
			yyv1458 = []Ingress{}
			yyc1458 = true
		} else if len(yyv1458) != 0 {
			yyv1458 = yyv1458[:0]
			yyc1458 = true
		}
	} else if yyl1458 > 0 {
		var yyrr1458, yyrl1458 int
		var yyrt1458 bool
		if yyl1458 > cap(yyv1458) {

			yyrg1458 := len(yyv1458) > 0
			yyv21458 := yyv1458
			yyrl1458, yyrt1458 = z.DecInferLen(yyl1458, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt1458 {
				if yyrl1458 <= cap(yyv1458) {
					yyv1458 = yyv1458[:yyrl1458]
				} else {
					yyv1458 = make([]Ingress, yyrl1458)
				}
			} else {
				yyv1458 = make([]Ingress, yyrl1458)
			}
			yyc1458 = true
			yyrr1458 = len(yyv1458)
			if yyrg1458 {
				copy(yyv1458, yyv21458)
			}
		} else if yyl1458 != len(yyv1458) {
			yyv1458 = yyv1458[:yyl1458]
			yyc1458 = true
		}
		yyj1458 := 0
		for ; yyj1458 < yyrr1458; yyj1458++ {
			yyh1458.ElemContainerState(yyj1458)
			if r.TryDecodeAsNil() {
				yyv1458[yyj1458] = Ingress{}
			} else {
				yyv1459 := &yyv1458[yyj1458]
				yyv1459.CodecDecodeSelf(d)
			}

		}
		if yyrt1458 {
			for ; yyj1458 < yyl1458; yyj1458++ {
				yyv1458 = append(yyv1458, Ingress{})
				yyh1458.ElemContainerState(yyj1458)
				if r.TryDecodeAsNil() {
					yyv1458[yyj1458] = Ingress{}
				} else {
					yyv1460 := &yyv1458[yyj1458]
					yyv1460.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1458 := 0
		for ; !r.CheckBreak(); yyj1458++ {

			if yyj1458 >= len(yyv1458) {
				yyv1458 = append(yyv1458, Ingress{}) // var yyz1458 Ingress
				yyc1458 = true
			}
			yyh1458.ElemContainerState(yyj1458)
			if yyj1458 < len(yyv1458) {
				if r.TryDecodeAsNil() {
					yyv1458[yyj1458] = Ingress{}
				} else {
					yyv1461 := &yyv1458[yyj1458]
					yyv1461.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1458 < len(yyv1458) {
			yyv1458 = yyv1458[:yyj1458]
			yyc1458 = true
		} else if yyj1458 == 0 && yyv1458 == nil {
			yyv1458 = []Ingress{}
			yyc1458 = true
		}
	}
	yyh1458.End()
	if yyc1458 {
		*v = yyv1458
	}
}

func (x codecSelfer1234) encSliceIngressTLS(v []IngressTLS, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1462 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1463 := &yyv1462
		yy1463.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressTLS(v *[]IngressTLS, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1464 := *v
	yyh1464, yyl1464 := z.DecSliceHelperStart()
	var yyc1464 bool
	if yyl1464 == 0 {
		if yyv1464 == nil {
			yyv1464 = []IngressTLS{}
			yyc1464 = true
		} else if len(yyv1464) != 0 {
			yyv1464 = yyv1464[:0]
			yyc1464 = true
		}
	} else if yyl1464 > 0 {
		var yyrr1464, yyrl1464 int
		var yyrt1464 bool
		if yyl1464 > cap(yyv1464) {

			yyrg1464 := len(yyv1464) > 0
			yyv21464 := yyv1464
			yyrl1464, yyrt1464 = z.DecInferLen(yyl1464, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1464 {
				if yyrl1464 <= cap(yyv1464) {
					yyv1464 = yyv1464[:yyrl1464]
				} else {
					yyv1464 = make([]IngressTLS, yyrl1464)
				}
			} else {
				yyv1464 = make([]IngressTLS, yyrl1464)
			}
			yyc1464 = true
			yyrr1464 = len(yyv1464)
			if yyrg1464 {
				copy(yyv1464, yyv21464)
			}
		} else if yyl1464 != len(yyv1464) {
			yyv1464 = yyv1464[:yyl1464]
			yyc1464 = true
		}
		yyj1464 := 0
		for ; yyj1464 < yyrr1464; yyj1464++ {
			yyh1464.ElemContainerState(yyj1464)
			if r.TryDecodeAsNil() {
				yyv1464[yyj1464] = IngressTLS{}
			} else {
				yyv1465 := &yyv1464[yyj1464]
				yyv1465.CodecDecodeSelf(d)
			}

		}
		if yyrt1464 {
			for ; yyj1464 < yyl1464; yyj1464++ {
				yyv1464 = append(yyv1464, IngressTLS{})
				yyh1464.ElemContainerState(yyj1464)
				if r.TryDecodeAsNil() {
					yyv1464[yyj1464] = IngressTLS{}
				} else {
					yyv1466 := &yyv1464[yyj1464]
					yyv1466.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1464 := 0
		for ; !r.CheckBreak(); yyj1464++ {

			if yyj1464 >= len(yyv1464) {
				yyv1464 = append(yyv1464, IngressTLS{}) // var yyz1464 IngressTLS
				yyc1464 = true
			}
			yyh1464.ElemContainerState(yyj1464)
			if yyj1464 < len(yyv1464) {
				if r.TryDecodeAsNil() {
					yyv1464[yyj1464] = IngressTLS{}
				} else {
					yyv1467 := &yyv1464[yyj1464]
					yyv1467.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1464 < len(yyv1464) {
			yyv1464 = yyv1464[:yyj1464]
			yyc1464 = true
		} else if yyj1464 == 0 && yyv1464 == nil {
			yyv1464 = []IngressTLS{}
			yyc1464 = true
		}
	}
	yyh1464.End()
	if yyc1464 {
		*v = yyv1464
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1468 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1469 := &yyv1468
		yy1469.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1470 := *v
	yyh1470, yyl1470 := z.DecSliceHelperStart()
	var yyc1470 bool
	if yyl1470 == 0 {
		if yyv1470 == nil {
			yyv1470 = []IngressRule{}
			yyc1470 = true
		} else if len(yyv1470) != 0 {
			yyv1470 = yyv1470[:0]
			yyc1470 = true
		}
	} else if yyl1470 > 0 {
		var yyrr1470, yyrl1470 int
		var yyrt1470 bool
		if yyl1470 > cap(yyv1470) {

			yyrg1470 := len(yyv1470) > 0
			yyv21470 := yyv1470
			yyrl1470, yyrt1470 = z.DecInferLen(yyl1470, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1470 {
				if yyrl1470 <= cap(yyv1470) {
					yyv1470 = yyv1470[:yyrl1470]
				} else {
					yyv1470 = make([]IngressRule, yyrl1470)
				}
			} else {
				yyv1470 = make([]IngressRule, yyrl1470)
			}
			yyc1470 = true
			yyrr1470 = len(yyv1470)
			if yyrg1470 {
				copy(yyv1470, yyv21470)
			}
		} else if yyl1470 != len(yyv1470) {
			yyv1470 = yyv1470[:yyl1470]
			yyc1470 = true
		}
		yyj1470 := 0
		for ; yyj1470 < yyrr1470; yyj1470++ {
			yyh1470.ElemContainerState(yyj1470)
			if r.TryDecodeAsNil() {
				yyv1470[yyj1470] = IngressRule{}
			} else {
				yyv1471 := &yyv1470[yyj1470]
				yyv1471.CodecDecodeSelf(d)
			}

		}
		if yyrt1470 {
			for ; yyj1470 < yyl1470; yyj1470++ {
				yyv1470 = append(yyv1470, IngressRule{})
				yyh1470.ElemContainerState(yyj1470)
				if r.TryDecodeAsNil() {
					yyv1470[yyj1470] = IngressRule{}
				} else {
					yyv1472 := &yyv1470[yyj1470]
					yyv1472.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1470 := 0
		for ; !r.CheckBreak(); yyj1470++ {

			if yyj1470 >= len(yyv1470) {
				yyv1470 = append(yyv1470, IngressRule{}) // var yyz1470 IngressRule
				yyc1470 = true
			}
			yyh1470.ElemContainerState(yyj1470)
			if yyj1470 < len(yyv1470) {
				if r.TryDecodeAsNil() {
					yyv1470[yyj1470] = IngressRule{}
				} else {
					yyv1473 := &yyv1470[yyj1470]
					yyv1473.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1470 < len(yyv1470) {
			yyv1470 = yyv1470[:yyj1470]
			yyc1470 = true
		} else if yyj1470 == 0 && yyv1470 == nil {
			yyv1470 = []IngressRule{}
			yyc1470 = true
		}
	}
	yyh1470.End()
	if yyc1470 {
		*v = yyv1470
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1474 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1475 := &yyv1474
		yy1475.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1476 := *v
	yyh1476, yyl1476 := z.DecSliceHelperStart()
	var yyc1476 bool
	if yyl1476 == 0 {
		if yyv1476 == nil {
			yyv1476 = []HTTPIngressPath{}
			yyc1476 = true
		} else if len(yyv1476) != 0 {
			yyv1476 = yyv1476[:0]
			yyc1476 = true
		}
	} else if yyl1476 > 0 {
		var yyrr1476, yyrl1476 int
		var yyrt1476 bool
		if yyl1476 > cap(yyv1476) {

			yyrg1476 := len(yyv1476) > 0
			yyv21476 := yyv1476
			yyrl1476, yyrt1476 = z.DecInferLen(yyl1476, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1476 {
				if yyrl1476 <= cap(yyv1476) {
					yyv1476 = yyv1476[:yyrl1476]
				} else {
					yyv1476 = make([]HTTPIngressPath, yyrl1476)
				}
			} else {
				yyv1476 = make([]HTTPIngressPath, yyrl1476)
			}
			yyc1476 = true
			yyrr1476 = len(yyv1476)
			if yyrg1476 {
				copy(yyv1476, yyv21476)
			}
		} else if yyl1476 != len(yyv1476) {
			yyv1476 = yyv1476[:yyl1476]
			yyc1476 = true
		}
		yyj1476 := 0
		for ; yyj1476 < yyrr1476; yyj1476++ {
			yyh1476.ElemContainerState(yyj1476)
			if r.TryDecodeAsNil() {
				yyv1476[yyj1476] = HTTPIngressPath{}
			} else {
				yyv1477 := &yyv1476[yyj1476]
				yyv1477.CodecDecodeSelf(d)
			}

		}
		if yyrt1476 {
			for ; yyj1476 < yyl1476; yyj1476++ {
				yyv1476 = append(yyv1476, HTTPIngressPath{})
				yyh1476.ElemContainerState(yyj1476)
				if r.TryDecodeAsNil() {
					yyv1476[yyj1476] = HTTPIngressPath{}
				} else {
					yyv1478 := &yyv1476[yyj1476]
					yyv1478.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1476 := 0
		for ; !r.CheckBreak(); yyj1476++ {

			if yyj1476 >= len(yyv1476) {
				yyv1476 = append(yyv1476, HTTPIngressPath{}) // var yyz1476 HTTPIngressPath
				yyc1476 = true
			}
			yyh1476.ElemContainerState(yyj1476)
			if yyj1476 < len(yyv1476) {
				if r.TryDecodeAsNil() {
					yyv1476[yyj1476] = HTTPIngressPath{}
				} else {
					yyv1479 := &yyv1476[yyj1476]
					yyv1479.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1476 < len(yyv1476) {
			yyv1476 = yyv1476[:yyj1476]
			yyc1476 = true
		} else if yyj1476 == 0 && yyv1476 == nil {
			yyv1476 = []HTTPIngressPath{}
			yyc1476 = true
		}
	}
	yyh1476.End()
	if yyc1476 {
		*v = yyv1476
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1480 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1481 := &yyv1480
		yy1481.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1482 := *v
	yyh1482, yyl1482 := z.DecSliceHelperStart()
	var yyc1482 bool
	if yyl1482 == 0 {
		if yyv1482 == nil {
			yyv1482 = []ReplicaSet{}
			yyc1482 = true
		} else if len(yyv1482) != 0 {
			yyv1482 = yyv1482[:0]
			yyc1482 = true
		}
	} else if yyl1482 > 0 {
		var yyrr1482, yyrl1482 int
		var yyrt1482 bool
		if yyl1482 > cap(yyv1482) {

			yyrg1482 := len(yyv1482) > 0
			yyv21482 := yyv1482
			yyrl1482, yyrt1482 = z.DecInferLen(yyl1482, z.DecBasicHandle().MaxInitLen, 744)
			if yyrt1482 {
				if yyrl1482 <= cap(yyv1482) {
					yyv1482 = yyv1482[:yyrl1482]
				} else {
					yyv1482 = make([]ReplicaSet, yyrl1482)
				}
			} else {
				yyv1482 = make([]ReplicaSet, yyrl1482)
			}
			yyc1482 = true
			yyrr1482 = len(yyv1482)
			if yyrg1482 {
				copy(yyv1482, yyv21482)
			}
		} else if yyl1482 != len(yyv1482) {
			yyv1482 = yyv1482[:yyl1482]
			yyc1482 = true
		}
		yyj1482 := 0
		for ; yyj1482 < yyrr1482; yyj1482++ {
			yyh1482.ElemContainerState(yyj1482)
			if r.TryDecodeAsNil() {
				yyv1482[yyj1482] = ReplicaSet{}
			} else {
				yyv1483 := &yyv1482[yyj1482]
				yyv1483.CodecDecodeSelf(d)
			}

		}
		if yyrt1482 {
			for ; yyj1482 < yyl1482; yyj1482++ {
				yyv1482 = append(yyv1482, ReplicaSet{})
				yyh1482.ElemContainerState(yyj1482)
				if r.TryDecodeAsNil() {
					yyv1482[yyj1482] = ReplicaSet{}
				} else {
					yyv1484 := &yyv1482[yyj1482]
					yyv1484.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1482 := 0
		for ; !r.CheckBreak(); yyj1482++ {

			if yyj1482 >= len(yyv1482) {
				yyv1482 = append(yyv1482, ReplicaSet{}) // var yyz1482 ReplicaSet
				yyc1482 = true
			}
			yyh1482.ElemContainerState(yyj1482)
			if yyj1482 < len(yyv1482) {
				if r.TryDecodeAsNil() {
					yyv1482[yyj1482] = ReplicaSet{}
				} else {
					yyv1485 := &yyv1482[yyj1482]
					yyv1485.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1482 < len(yyv1482) {
			yyv1482 = yyv1482[:yyj1482]
			yyc1482 = true
		} else if yyj1482 == 0 && yyv1482 == nil {
			yyv1482 = []ReplicaSet{}
			yyc1482 = true
		}
	}
	yyh1482.End()
	if yyc1482 {
		*v = yyv1482
	}
}

func (x codecSelfer1234) encSliceapi_Capability(v []pkg2_api.Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1486 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yym1487 := z.EncBinary()
		_ = yym1487
		if false {
		} else if z.HasExtensions() && z.EncExt(yyv1486) {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyv1486))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceapi_Capability(v *[]pkg2_api.Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1488 := *v
	yyh1488, yyl1488 := z.DecSliceHelperStart()
	var yyc1488 bool
	if yyl1488 == 0 {
		if yyv1488 == nil {
			yyv1488 = []pkg2_api.Capability{}
			yyc1488 = true
		} else if len(yyv1488) != 0 {
			yyv1488 = yyv1488[:0]
			yyc1488 = true
		}
	} else if yyl1488 > 0 {
		var yyrr1488, yyrl1488 int
		var yyrt1488 bool
		if yyl1488 > cap(yyv1488) {

			yyrl1488, yyrt1488 = z.DecInferLen(yyl1488, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1488 {
				if yyrl1488 <= cap(yyv1488) {
					yyv1488 = yyv1488[:yyrl1488]
				} else {
					yyv1488 = make([]pkg2_api.Capability, yyrl1488)
				}
			} else {
				yyv1488 = make([]pkg2_api.Capability, yyrl1488)
			}
			yyc1488 = true
			yyrr1488 = len(yyv1488)
		} else if yyl1488 != len(yyv1488) {
			yyv1488 = yyv1488[:yyl1488]
			yyc1488 = true
		}
		yyj1488 := 0
		for ; yyj1488 < yyrr1488; yyj1488++ {
			yyh1488.ElemContainerState(yyj1488)
			if r.TryDecodeAsNil() {
				yyv1488[yyj1488] = ""
			} else {
				yyv1488[yyj1488] = pkg2_api.Capability(r.DecodeString())
			}

		}
		if yyrt1488 {
			for ; yyj1488 < yyl1488; yyj1488++ {
				yyv1488 = append(yyv1488, "")
				yyh1488.ElemContainerState(yyj1488)
				if r.TryDecodeAsNil() {
					yyv1488[yyj1488] = ""
				} else {
					yyv1488[yyj1488] = pkg2_api.Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj1488 := 0
		for ; !r.CheckBreak(); yyj1488++ {

			if yyj1488 >= len(yyv1488) {
				yyv1488 = append(yyv1488, "") // var yyz1488 pkg2_api.Capability
				yyc1488 = true
			}
			yyh1488.ElemContainerState(yyj1488)
			if yyj1488 < len(yyv1488) {
				if r.TryDecodeAsNil() {
					yyv1488[yyj1488] = ""
				} else {
					yyv1488[yyj1488] = pkg2_api.Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1488 < len(yyv1488) {
			yyv1488 = yyv1488[:yyj1488]
			yyc1488 = true
		} else if yyj1488 == 0 && yyv1488 == nil {
			yyv1488 = []pkg2_api.Capability{}
			yyc1488 = true
		}
	}
	yyh1488.End()
	if yyc1488 {
		*v = yyv1488
	}
}

func (x codecSelfer1234) encSliceFSType(v []FSType, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1492 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv1492.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFSType(v *[]FSType, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1493 := *v
	yyh1493, yyl1493 := z.DecSliceHelperStart()
	var yyc1493 bool
	if yyl1493 == 0 {
		if yyv1493 == nil {
			yyv1493 = []FSType{}
			yyc1493 = true
		} else if len(yyv1493) != 0 {
			yyv1493 = yyv1493[:0]
			yyc1493 = true
		}
	} else if yyl1493 > 0 {
		var yyrr1493, yyrl1493 int
		var yyrt1493 bool
		if yyl1493 > cap(yyv1493) {

			yyrl1493, yyrt1493 = z.DecInferLen(yyl1493, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1493 {
				if yyrl1493 <= cap(yyv1493) {
					yyv1493 = yyv1493[:yyrl1493]
				} else {
					yyv1493 = make([]FSType, yyrl1493)
				}
			} else {
				yyv1493 = make([]FSType, yyrl1493)
			}
			yyc1493 = true
			yyrr1493 = len(yyv1493)
		} else if yyl1493 != len(yyv1493) {
			yyv1493 = yyv1493[:yyl1493]
			yyc1493 = true
		}
		yyj1493 := 0
		for ; yyj1493 < yyrr1493; yyj1493++ {
			yyh1493.ElemContainerState(yyj1493)
			if r.TryDecodeAsNil() {
				yyv1493[yyj1493] = ""
			} else {
				yyv1493[yyj1493] = FSType(r.DecodeString())
			}

		}
		if yyrt1493 {
			for ; yyj1493 < yyl1493; yyj1493++ {
				yyv1493 = append(yyv1493, "")
				yyh1493.ElemContainerState(yyj1493)
				if r.TryDecodeAsNil() {
					yyv1493[yyj1493] = ""
				} else {
					yyv1493[yyj1493] = FSType(r.DecodeString())
				}

			}
		}

	} else {
		yyj1493 := 0
		for ; !r.CheckBreak(); yyj1493++ {

			if yyj1493 >= len(yyv1493) {
				yyv1493 = append(yyv1493, "") // var yyz1493 FSType
				yyc1493 = true
			}
			yyh1493.ElemContainerState(yyj1493)
			if yyj1493 < len(yyv1493) {
				if r.TryDecodeAsNil() {
					yyv1493[yyj1493] = ""
				} else {
					yyv1493[yyj1493] = FSType(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1493 < len(yyv1493) {
			yyv1493 = yyv1493[:yyj1493]
			yyc1493 = true
		} else if yyj1493 == 0 && yyv1493 == nil {
			yyv1493 = []FSType{}
			yyc1493 = true
		}
	}
	yyh1493.End()
	if yyc1493 {
		*v = yyv1493
	}
}

func (x codecSelfer1234) encSliceHostPortRange(v []HostPortRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1497 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1498 := &yyv1497
		yy1498.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHostPortRange(v *[]HostPortRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1499 := *v
	yyh1499, yyl1499 := z.DecSliceHelperStart()
	var yyc1499 bool
	if yyl1499 == 0 {
		if yyv1499 == nil {
			yyv1499 = []HostPortRange{}
			yyc1499 = true
		} else if len(yyv1499) != 0 {
			yyv1499 = yyv1499[:0]
			yyc1499 = true
		}
	} else if yyl1499 > 0 {
		var yyrr1499, yyrl1499 int
		var yyrt1499 bool
		if yyl1499 > cap(yyv1499) {

			yyrg1499 := len(yyv1499) > 0
			yyv21499 := yyv1499
			yyrl1499, yyrt1499 = z.DecInferLen(yyl1499, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1499 {
				if yyrl1499 <= cap(yyv1499) {
					yyv1499 = yyv1499[:yyrl1499]
				} else {
					yyv1499 = make([]HostPortRange, yyrl1499)
				}
			} else {
				yyv1499 = make([]HostPortRange, yyrl1499)
			}
			yyc1499 = true
			yyrr1499 = len(yyv1499)
			if yyrg1499 {
				copy(yyv1499, yyv21499)
			}
		} else if yyl1499 != len(yyv1499) {
			yyv1499 = yyv1499[:yyl1499]
			yyc1499 = true
		}
		yyj1499 := 0
		for ; yyj1499 < yyrr1499; yyj1499++ {
			yyh1499.ElemContainerState(yyj1499)
			if r.TryDecodeAsNil() {
				yyv1499[yyj1499] = HostPortRange{}
			} else {
				yyv1500 := &yyv1499[yyj1499]
				yyv1500.CodecDecodeSelf(d)
			}

		}
		if yyrt1499 {
			for ; yyj1499 < yyl1499; yyj1499++ {
				yyv1499 = append(yyv1499, HostPortRange{})
				yyh1499.ElemContainerState(yyj1499)
				if r.TryDecodeAsNil() {
					yyv1499[yyj1499] = HostPortRange{}
				} else {
					yyv1501 := &yyv1499[yyj1499]
					yyv1501.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1499 := 0
		for ; !r.CheckBreak(); yyj1499++ {

			if yyj1499 >= len(yyv1499) {
				yyv1499 = append(yyv1499, HostPortRange{}) // var yyz1499 HostPortRange
				yyc1499 = true
			}
			yyh1499.ElemContainerState(yyj1499)
			if yyj1499 < len(yyv1499) {
				if r.TryDecodeAsNil() {
					yyv1499[yyj1499] = HostPortRange{}
				} else {
					yyv1502 := &yyv1499[yyj1499]
					yyv1502.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1499 < len(yyv1499) {
			yyv1499 = yyv1499[:yyj1499]
			yyc1499 = true
		} else if yyj1499 == 0 && yyv1499 == nil {
			yyv1499 = []HostPortRange{}
			yyc1499 = true
		}
	}
	yyh1499.End()
	if yyc1499 {
		*v = yyv1499
	}
}

func (x codecSelfer1234) encSliceIDRange(v []IDRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1503 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1504 := &yyv1503
		yy1504.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIDRange(v *[]IDRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1505 := *v
	yyh1505, yyl1505 := z.DecSliceHelperStart()
	var yyc1505 bool
	if yyl1505 == 0 {
		if yyv1505 == nil {
			yyv1505 = []IDRange{}
			yyc1505 = true
		} else if len(yyv1505) != 0 {
			yyv1505 = yyv1505[:0]
			yyc1505 = true
		}
	} else if yyl1505 > 0 {
		var yyrr1505, yyrl1505 int
		var yyrt1505 bool
		if yyl1505 > cap(yyv1505) {

			yyrg1505 := len(yyv1505) > 0
			yyv21505 := yyv1505
			yyrl1505, yyrt1505 = z.DecInferLen(yyl1505, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1505 {
				if yyrl1505 <= cap(yyv1505) {
					yyv1505 = yyv1505[:yyrl1505]
				} else {
					yyv1505 = make([]IDRange, yyrl1505)
				}
			} else {
				yyv1505 = make([]IDRange, yyrl1505)
			}
			yyc1505 = true
			yyrr1505 = len(yyv1505)
			if yyrg1505 {
				copy(yyv1505, yyv21505)
			}
		} else if yyl1505 != len(yyv1505) {
			yyv1505 = yyv1505[:yyl1505]
			yyc1505 = true
		}
		yyj1505 := 0
		for ; yyj1505 < yyrr1505; yyj1505++ {
			yyh1505.ElemContainerState(yyj1505)
			if r.TryDecodeAsNil() {
				yyv1505[yyj1505] = IDRange{}
			} else {
				yyv1506 := &yyv1505[yyj1505]
				yyv1506.CodecDecodeSelf(d)
			}

		}
		if yyrt1505 {
			for ; yyj1505 < yyl1505; yyj1505++ {
				yyv1505 = append(yyv1505, IDRange{})
				yyh1505.ElemContainerState(yyj1505)
				if r.TryDecodeAsNil() {
					yyv1505[yyj1505] = IDRange{}
				} else {
					yyv1507 := &yyv1505[yyj1505]
					yyv1507.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1505 := 0
		for ; !r.CheckBreak(); yyj1505++ {

			if yyj1505 >= len(yyv1505) {
				yyv1505 = append(yyv1505, IDRange{}) // var yyz1505 IDRange
				yyc1505 = true
			}
			yyh1505.ElemContainerState(yyj1505)
			if yyj1505 < len(yyv1505) {
				if r.TryDecodeAsNil() {
					yyv1505[yyj1505] = IDRange{}
				} else {
					yyv1508 := &yyv1505[yyj1505]
					yyv1508.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1505 < len(yyv1505) {
			yyv1505 = yyv1505[:yyj1505]
			yyc1505 = true
		} else if yyj1505 == 0 && yyv1505 == nil {
			yyv1505 = []IDRange{}
			yyc1505 = true
		}
	}
	yyh1505.End()
	if yyc1505 {
		*v = yyv1505
	}
}

func (x codecSelfer1234) encSlicePodSecurityPolicy(v []PodSecurityPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1509 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1510 := &yyv1509
		yy1510.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodSecurityPolicy(v *[]PodSecurityPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1511 := *v
	yyh1511, yyl1511 := z.DecSliceHelperStart()
	var yyc1511 bool
	if yyl1511 == 0 {
		if yyv1511 == nil {
			yyv1511 = []PodSecurityPolicy{}
			yyc1511 = true
		} else if len(yyv1511) != 0 {
			yyv1511 = yyv1511[:0]
			yyc1511 = true
		}
	} else if yyl1511 > 0 {
		var yyrr1511, yyrl1511 int
		var yyrt1511 bool
		if yyl1511 > cap(yyv1511) {

			yyrg1511 := len(yyv1511) > 0
			yyv21511 := yyv1511
			yyrl1511, yyrt1511 = z.DecInferLen(yyl1511, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt1511 {
				if yyrl1511 <= cap(yyv1511) {
					yyv1511 = yyv1511[:yyrl1511]
				} else {
					yyv1511 = make([]PodSecurityPolicy, yyrl1511)
				}
			} else {
				yyv1511 = make([]PodSecurityPolicy, yyrl1511)
			}
			yyc1511 = true
			yyrr1511 = len(yyv1511)
			if yyrg1511 {
				copy(yyv1511, yyv21511)
			}
		} else if yyl1511 != len(yyv1511) {
			yyv1511 = yyv1511[:yyl1511]
			yyc1511 = true
		}
		yyj1511 := 0
		for ; yyj1511 < yyrr1511; yyj1511++ {
			yyh1511.ElemContainerState(yyj1511)
			if r.TryDecodeAsNil() {
				yyv1511[yyj1511] = PodSecurityPolicy{}
			} else {
				yyv1512 := &yyv1511[yyj1511]
				yyv1512.CodecDecodeSelf(d)
			}

		}
		if yyrt1511 {
			for ; yyj1511 < yyl1511; yyj1511++ {
				yyv1511 = append(yyv1511, PodSecurityPolicy{})
				yyh1511.ElemContainerState(yyj1511)
				if r.TryDecodeAsNil() {
					yyv1511[yyj1511] = PodSecurityPolicy{}
				} else {
					yyv1513 := &yyv1511[yyj1511]
					yyv1513.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1511 := 0
		for ; !r.CheckBreak(); yyj1511++ {

			if yyj1511 >= len(yyv1511) {
				yyv1511 = append(yyv1511, PodSecurityPolicy{}) // var yyz1511 PodSecurityPolicy
				yyc1511 = true
			}
			yyh1511.ElemContainerState(yyj1511)
			if yyj1511 < len(yyv1511) {
				if r.TryDecodeAsNil() {
					yyv1511[yyj1511] = PodSecurityPolicy{}
				} else {
					yyv1514 := &yyv1511[yyj1511]
					yyv1514.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1511 < len(yyv1511) {
			yyv1511 = yyv1511[:yyj1511]
			yyc1511 = true
		} else if yyj1511 == 0 && yyv1511 == nil {
			yyv1511 = []PodSecurityPolicy{}
			yyc1511 = true
		}
	}
	yyh1511.End()
	if yyc1511 {
		*v = yyv1511
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyIngressRule(v []NetworkPolicyIngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1515 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1516 := &yyv1515
		yy1516.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyIngressRule(v *[]NetworkPolicyIngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1517 := *v
	yyh1517, yyl1517 := z.DecSliceHelperStart()
	var yyc1517 bool
	if yyl1517 == 0 {
		if yyv1517 == nil {
			yyv1517 = []NetworkPolicyIngressRule{}
			yyc1517 = true
		} else if len(yyv1517) != 0 {
			yyv1517 = yyv1517[:0]
			yyc1517 = true
		}
	} else if yyl1517 > 0 {
		var yyrr1517, yyrl1517 int
		var yyrt1517 bool
		if yyl1517 > cap(yyv1517) {

			yyrg1517 := len(yyv1517) > 0
			yyv21517 := yyv1517
			yyrl1517, yyrt1517 = z.DecInferLen(yyl1517, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt1517 {
				if yyrl1517 <= cap(yyv1517) {
					yyv1517 = yyv1517[:yyrl1517]
				} else {
					yyv1517 = make([]NetworkPolicyIngressRule, yyrl1517)
				}
			} else {
				yyv1517 = make([]NetworkPolicyIngressRule, yyrl1517)
			}
			yyc1517 = true
			yyrr1517 = len(yyv1517)
			if yyrg1517 {
				copy(yyv1517, yyv21517)
			}
		} else if yyl1517 != len(yyv1517) {
			yyv1517 = yyv1517[:yyl1517]
			yyc1517 = true
		}
		yyj1517 := 0
		for ; yyj1517 < yyrr1517; yyj1517++ {
			yyh1517.ElemContainerState(yyj1517)
			if r.TryDecodeAsNil() {
				yyv1517[yyj1517] = NetworkPolicyIngressRule{}
			} else {
				yyv1518 := &yyv1517[yyj1517]
				yyv1518.CodecDecodeSelf(d)
			}

		}
		if yyrt1517 {
			for ; yyj1517 < yyl1517; yyj1517++ {
				yyv1517 = append(yyv1517, NetworkPolicyIngressRule{})
				yyh1517.ElemContainerState(yyj1517)
				if r.TryDecodeAsNil() {
					yyv1517[yyj1517] = NetworkPolicyIngressRule{}
				} else {
					yyv1519 := &yyv1517[yyj1517]
					yyv1519.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1517 := 0
		for ; !r.CheckBreak(); yyj1517++ {

			if yyj1517 >= len(yyv1517) {
				yyv1517 = append(yyv1517, NetworkPolicyIngressRule{}) // var yyz1517 NetworkPolicyIngressRule
				yyc1517 = true
			}
			yyh1517.ElemContainerState(yyj1517)
			if yyj1517 < len(yyv1517) {
				if r.TryDecodeAsNil() {
					yyv1517[yyj1517] = NetworkPolicyIngressRule{}
				} else {
					yyv1520 := &yyv1517[yyj1517]
					yyv1520.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1517 < len(yyv1517) {
			yyv1517 = yyv1517[:yyj1517]
			yyc1517 = true
		} else if yyj1517 == 0 && yyv1517 == nil {
			yyv1517 = []NetworkPolicyIngressRule{}
			yyc1517 = true
		}
	}
	yyh1517.End()
	if yyc1517 {
		*v = yyv1517
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPort(v []NetworkPolicyPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1521 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1522 := &yyv1521
		yy1522.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPort(v *[]NetworkPolicyPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1523 := *v
	yyh1523, yyl1523 := z.DecSliceHelperStart()
	var yyc1523 bool
	if yyl1523 == 0 {
		if yyv1523 == nil {
			yyv1523 = []NetworkPolicyPort{}
			yyc1523 = true
		} else if len(yyv1523) != 0 {
			yyv1523 = yyv1523[:0]
			yyc1523 = true
		}
	} else if yyl1523 > 0 {
		var yyrr1523, yyrl1523 int
		var yyrt1523 bool
		if yyl1523 > cap(yyv1523) {

			yyrg1523 := len(yyv1523) > 0
			yyv21523 := yyv1523
			yyrl1523, yyrt1523 = z.DecInferLen(yyl1523, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1523 {
				if yyrl1523 <= cap(yyv1523) {
					yyv1523 = yyv1523[:yyrl1523]
				} else {
					yyv1523 = make([]NetworkPolicyPort, yyrl1523)
				}
			} else {
				yyv1523 = make([]NetworkPolicyPort, yyrl1523)
			}
			yyc1523 = true
			yyrr1523 = len(yyv1523)
			if yyrg1523 {
				copy(yyv1523, yyv21523)
			}
		} else if yyl1523 != len(yyv1523) {
			yyv1523 = yyv1523[:yyl1523]
			yyc1523 = true
		}
		yyj1523 := 0
		for ; yyj1523 < yyrr1523; yyj1523++ {
			yyh1523.ElemContainerState(yyj1523)
			if r.TryDecodeAsNil() {
				yyv1523[yyj1523] = NetworkPolicyPort{}
			} else {
				yyv1524 := &yyv1523[yyj1523]
				yyv1524.CodecDecodeSelf(d)
			}

		}
		if yyrt1523 {
			for ; yyj1523 < yyl1523; yyj1523++ {
				yyv1523 = append(yyv1523, NetworkPolicyPort{})
				yyh1523.ElemContainerState(yyj1523)
				if r.TryDecodeAsNil() {
					yyv1523[yyj1523] = NetworkPolicyPort{}
				} else {
					yyv1525 := &yyv1523[yyj1523]
					yyv1525.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1523 := 0
		for ; !r.CheckBreak(); yyj1523++ {

			if yyj1523 >= len(yyv1523) {
				yyv1523 = append(yyv1523, NetworkPolicyPort{}) // var yyz1523 NetworkPolicyPort
				yyc1523 = true
			}
			yyh1523.ElemContainerState(yyj1523)
			if yyj1523 < len(yyv1523) {
				if r.TryDecodeAsNil() {
					yyv1523[yyj1523] = NetworkPolicyPort{}
				} else {
					yyv1526 := &yyv1523[yyj1523]
					yyv1526.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1523 < len(yyv1523) {
			yyv1523 = yyv1523[:yyj1523]
			yyc1523 = true
		} else if yyj1523 == 0 && yyv1523 == nil {
			yyv1523 = []NetworkPolicyPort{}
			yyc1523 = true
		}
	}
	yyh1523.End()
	if yyc1523 {
		*v = yyv1523
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPeer(v []NetworkPolicyPeer, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1527 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1528 := &yyv1527
		yy1528.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPeer(v *[]NetworkPolicyPeer, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1529 := *v
	yyh1529, yyl1529 := z.DecSliceHelperStart()
	var yyc1529 bool
	if yyl1529 == 0 {
		if yyv1529 == nil {
			yyv1529 = []NetworkPolicyPeer{}
			yyc1529 = true
		} else if len(yyv1529) != 0 {
			yyv1529 = yyv1529[:0]
			yyc1529 = true
		}
	} else if yyl1529 > 0 {
		var yyrr1529, yyrl1529 int
		var yyrt1529 bool
		if yyl1529 > cap(yyv1529) {

			yyrg1529 := len(yyv1529) > 0
			yyv21529 := yyv1529
			yyrl1529, yyrt1529 = z.DecInferLen(yyl1529, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1529 {
				if yyrl1529 <= cap(yyv1529) {
					yyv1529 = yyv1529[:yyrl1529]
				} else {
					yyv1529 = make([]NetworkPolicyPeer, yyrl1529)
				}
			} else {
				yyv1529 = make([]NetworkPolicyPeer, yyrl1529)
			}
			yyc1529 = true
			yyrr1529 = len(yyv1529)
			if yyrg1529 {
				copy(yyv1529, yyv21529)
			}
		} else if yyl1529 != len(yyv1529) {
			yyv1529 = yyv1529[:yyl1529]
			yyc1529 = true
		}
		yyj1529 := 0
		for ; yyj1529 < yyrr1529; yyj1529++ {
			yyh1529.ElemContainerState(yyj1529)
			if r.TryDecodeAsNil() {
				yyv1529[yyj1529] = NetworkPolicyPeer{}
			} else {
				yyv1530 := &yyv1529[yyj1529]
				yyv1530.CodecDecodeSelf(d)
			}

		}
		if yyrt1529 {
			for ; yyj1529 < yyl1529; yyj1529++ {
				yyv1529 = append(yyv1529, NetworkPolicyPeer{})
				yyh1529.ElemContainerState(yyj1529)
				if r.TryDecodeAsNil() {
					yyv1529[yyj1529] = NetworkPolicyPeer{}
				} else {
					yyv1531 := &yyv1529[yyj1529]
					yyv1531.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1529 := 0
		for ; !r.CheckBreak(); yyj1529++ {

			if yyj1529 >= len(yyv1529) {
				yyv1529 = append(yyv1529, NetworkPolicyPeer{}) // var yyz1529 NetworkPolicyPeer
				yyc1529 = true
			}
			yyh1529.ElemContainerState(yyj1529)
			if yyj1529 < len(yyv1529) {
				if r.TryDecodeAsNil() {
					yyv1529[yyj1529] = NetworkPolicyPeer{}
				} else {
					yyv1532 := &yyv1529[yyj1529]
					yyv1532.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1529 < len(yyv1529) {
			yyv1529 = yyv1529[:yyj1529]
			yyc1529 = true
		} else if yyj1529 == 0 && yyv1529 == nil {
			yyv1529 = []NetworkPolicyPeer{}
			yyc1529 = true
		}
	}
	yyh1529.End()
	if yyc1529 {
		*v = yyv1529
	}
}

func (x codecSelfer1234) encSliceNetworkPolicy(v []NetworkPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1533 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1534 := &yyv1533
		yy1534.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicy(v *[]NetworkPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1535 := *v
	yyh1535, yyl1535 := z.DecSliceHelperStart()
	var yyc1535 bool
	if yyl1535 == 0 {
		if yyv1535 == nil {
			yyv1535 = []NetworkPolicy{}
			yyc1535 = true
		} else if len(yyv1535) != 0 {
			yyv1535 = yyv1535[:0]
			yyc1535 = true
		}
	} else if yyl1535 > 0 {
		var yyrr1535, yyrl1535 int
		var yyrt1535 bool
		if yyl1535 > cap(yyv1535) {

			yyrg1535 := len(yyv1535) > 0
			yyv21535 := yyv1535
			yyrl1535, yyrt1535 = z.DecInferLen(yyl1535, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt1535 {
				if yyrl1535 <= cap(yyv1535) {
					yyv1535 = yyv1535[:yyrl1535]
				} else {
					yyv1535 = make([]NetworkPolicy, yyrl1535)
				}
			} else {
				yyv1535 = make([]NetworkPolicy, yyrl1535)
			}
			yyc1535 = true
			yyrr1535 = len(yyv1535)
			if yyrg1535 {
				copy(yyv1535, yyv21535)
			}
		} else if yyl1535 != len(yyv1535) {
			yyv1535 = yyv1535[:yyl1535]
			yyc1535 = true
		}
		yyj1535 := 0
		for ; yyj1535 < yyrr1535; yyj1535++ {
			yyh1535.ElemContainerState(yyj1535)
			if r.TryDecodeAsNil() {
				yyv1535[yyj1535] = NetworkPolicy{}
			} else {
				yyv1536 := &yyv1535[yyj1535]
				yyv1536.CodecDecodeSelf(d)
			}

		}
		if yyrt1535 {
			for ; yyj1535 < yyl1535; yyj1535++ {
				yyv1535 = append(yyv1535, NetworkPolicy{})
				yyh1535.ElemContainerState(yyj1535)
				if r.TryDecodeAsNil() {
					yyv1535[yyj1535] = NetworkPolicy{}
				} else {
					yyv1537 := &yyv1535[yyj1535]
					yyv1537.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1535 := 0
		for ; !r.CheckBreak(); yyj1535++ {

			if yyj1535 >= len(yyv1535) {
				yyv1535 = append(yyv1535, NetworkPolicy{}) // var yyz1535 NetworkPolicy
				yyc1535 = true
			}
			yyh1535.ElemContainerState(yyj1535)
			if yyj1535 < len(yyv1535) {
				if r.TryDecodeAsNil() {
					yyv1535[yyj1535] = NetworkPolicy{}
				} else {
					yyv1538 := &yyv1535[yyj1535]
					yyv1538.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1535 < len(yyv1535) {
			yyv1535 = yyv1535[:yyj1535]
			yyc1535 = true
		} else if yyj1535 == 0 && yyv1535 == nil {
			yyv1535 = []NetworkPolicy{}
			yyc1535 = true
		}
	}
	yyh1535.End()
	if yyc1535 {
		*v = yyv1535
	}
}

func (x codecSelfer1234) encSliceStorageClass(v []StorageClass, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1539 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1540 := &yyv1539
		yy1540.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceStorageClass(v *[]StorageClass, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1541 := *v
	yyh1541, yyl1541 := z.DecSliceHelperStart()
	var yyc1541 bool
	if yyl1541 == 0 {
		if yyv1541 == nil {
			yyv1541 = []StorageClass{}
			yyc1541 = true
		} else if len(yyv1541) != 0 {
			yyv1541 = yyv1541[:0]
			yyc1541 = true
		}
	} else if yyl1541 > 0 {
		var yyrr1541, yyrl1541 int
		var yyrt1541 bool
		if yyl1541 > cap(yyv1541) {

			yyrg1541 := len(yyv1541) > 0
			yyv21541 := yyv1541
			yyrl1541, yyrt1541 = z.DecInferLen(yyl1541, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt1541 {
				if yyrl1541 <= cap(yyv1541) {
					yyv1541 = yyv1541[:yyrl1541]
				} else {
					yyv1541 = make([]StorageClass, yyrl1541)
				}
			} else {
				yyv1541 = make([]StorageClass, yyrl1541)
			}
			yyc1541 = true
			yyrr1541 = len(yyv1541)
			if yyrg1541 {
				copy(yyv1541, yyv21541)
			}
		} else if yyl1541 != len(yyv1541) {
			yyv1541 = yyv1541[:yyl1541]
			yyc1541 = true
		}
		yyj1541 := 0
		for ; yyj1541 < yyrr1541; yyj1541++ {
			yyh1541.ElemContainerState(yyj1541)
			if r.TryDecodeAsNil() {
				yyv1541[yyj1541] = StorageClass{}
			} else {
				yyv1542 := &yyv1541[yyj1541]
				yyv1542.CodecDecodeSelf(d)
			}

		}
		if yyrt1541 {
			for ; yyj1541 < yyl1541; yyj1541++ {
				yyv1541 = append(yyv1541, StorageClass{})
				yyh1541.ElemContainerState(yyj1541)
				if r.TryDecodeAsNil() {
					yyv1541[yyj1541] = StorageClass{}
				} else {
					yyv1543 := &yyv1541[yyj1541]
					yyv1543.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1541 := 0
		for ; !r.CheckBreak(); yyj1541++ {

			if yyj1541 >= len(yyv1541) {
				yyv1541 = append(yyv1541, StorageClass{}) // var yyz1541 StorageClass
				yyc1541 = true
			}
			yyh1541.ElemContainerState(yyj1541)
			if yyj1541 < len(yyv1541) {
				if r.TryDecodeAsNil() {
					yyv1541[yyj1541] = StorageClass{}
				} else {
					yyv1544 := &yyv1541[yyj1541]
					yyv1544.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1541 < len(yyv1541) {
			yyv1541 = yyv1541[:yyj1541]
			yyc1541 = true
		} else if yyj1541 == 0 && yyv1541 == nil {
			yyv1541 = []StorageClass{}
			yyc1541 = true
		}
	}
	yyh1541.End()
	if yyc1541 {
		*v = yyv1541
	}
}
