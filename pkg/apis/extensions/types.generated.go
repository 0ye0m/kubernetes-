/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg6_intstr.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yy39.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy40 := &x.ObjectMeta
					yy40.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy42 := &x.Spec
					yy42.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.Spec
					yy43.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy45 := &x.Status
					yy45.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy46 := &x.Status
					yy46.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym47 := z.DecBinary()
	_ = yym47
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct48 := r.ContainerType()
		if yyct48 == codecSelferValueTypeMap1234 {
			yyl48 := r.ReadMapStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl48, d)
			}
		} else if yyct48 == codecSelferValueTypeArray1234 {
			yyl48 := r.ReadArrayStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl48, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys49Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys49Slc
	var yyhl49 bool = l >= 0
	for yyj49 := 0; ; yyj49++ {
		if yyhl49 {
			if yyj49 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys49Slc = r.DecodeBytes(yys49Slc, true, true)
		yys49 := string(yys49Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys49 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv52 := &x.ObjectMeta
				yyv52.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv53 := &x.Spec
				yyv53.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv54 := &x.Status
				yyv54.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys49)
		} // end switch yys49
	} // end for yyj49
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj55 int
	var yyb55 bool
	var yyhl55 bool = l >= 0
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv58 := &x.ObjectMeta
		yyv58.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv59 := &x.Spec
		yyv59.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv60 := &x.Status
		yyv60.CodecDecodeSelf(d)
	}
	for {
		yyj55++
		if yyhl55 {
			yyb55 = yyj55 > l
		} else {
			yyb55 = r.CheckBreak()
		}
		if yyb55 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj55-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleTwo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym61 := z.EncBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep62 := !z.EncBinary()
			yy2arr62 := z.EncBasicHandle().StructToArray
			var yyq62 [5]bool
			_, _, _ = yysep62, yyq62, yy2arr62
			const yyr62 bool = false
			yyq62[0] = x.Kind != ""
			yyq62[1] = x.APIVersion != ""
			yyq62[2] = true
			yyq62[3] = true
			yyq62[4] = true
			var yynn62 int
			if yyr62 || yy2arr62 {
				r.EncodeArrayStart(5)
			} else {
				yynn62 = 0
				for _, b := range yyq62 {
					if b {
						yynn62++
					}
				}
				r.EncodeMapStart(yynn62)
				yynn62 = 0
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[0] {
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym65 := z.EncBinary()
					_ = yym65
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[1] {
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[2] {
					yy70 := &x.ObjectMeta
					yy70.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq62[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy71 := &x.ObjectMeta
					yy71.CodecEncodeSelf(e)
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[3] {
					yy73 := &x.Spec
					yy73.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq62[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy74 := &x.Spec
					yy74.CodecEncodeSelf(e)
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[4] {
					yy76 := &x.Status
					yy76.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq62[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy77 := &x.Status
					yy77.CodecEncodeSelf(e)
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleTwo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym78 := z.DecBinary()
	_ = yym78
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct79 := r.ContainerType()
		if yyct79 == codecSelferValueTypeMap1234 {
			yyl79 := r.ReadMapStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl79, d)
			}
		} else if yyct79 == codecSelferValueTypeArray1234 {
			yyl79 := r.ReadArrayStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl79, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleTwo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys80Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys80Slc
	var yyhl80 bool = l >= 0
	for yyj80 := 0; ; yyj80++ {
		if yyhl80 {
			if yyj80 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys80Slc = r.DecodeBytes(yys80Slc, true, true)
		yys80 := string(yys80Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys80 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv83 := &x.ObjectMeta
				yyv83.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv84 := &x.Spec
				yyv84.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleTwoStatus{}
			} else {
				yyv85 := &x.Status
				yyv85.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys80)
		} // end switch yys80
	} // end for yyj80
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleTwo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj86 int
	var yyb86 bool
	var yyhl86 bool = l >= 0
	yyj86++
	if yyhl86 {
		yyb86 = yyj86 > l
	} else {
		yyb86 = r.CheckBreak()
	}
	if yyb86 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj86++
	if yyhl86 {
		yyb86 = yyj86 > l
	} else {
		yyb86 = r.CheckBreak()
	}
	if yyb86 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj86++
	if yyhl86 {
		yyb86 = yyj86 > l
	} else {
		yyb86 = r.CheckBreak()
	}
	if yyb86 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv89 := &x.ObjectMeta
		yyv89.CodecDecodeSelf(d)
	}
	yyj86++
	if yyhl86 {
		yyb86 = yyj86 > l
	} else {
		yyb86 = r.CheckBreak()
	}
	if yyb86 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv90 := &x.Spec
		yyv90.CodecDecodeSelf(d)
	}
	yyj86++
	if yyhl86 {
		yyb86 = yyj86 > l
	} else {
		yyb86 = r.CheckBreak()
	}
	if yyb86 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleTwoStatus{}
	} else {
		yyv91 := &x.Status
		yyv91.CodecDecodeSelf(d)
	}
	for {
		yyj86++
		if yyhl86 {
			yyb86 = yyj86 > l
		} else {
			yyb86 = r.CheckBreak()
		}
		if yyb86 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj86-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleTwoStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym92 := z.EncBinary()
		_ = yym92
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep93 := !z.EncBinary()
			yy2arr93 := z.EncBasicHandle().StructToArray
			var yyq93 [2]bool
			_, _, _ = yysep93, yyq93, yy2arr93
			const yyr93 bool = false
			yyq93[1] = x.Selector != ""
			var yynn93 int
			if yyr93 || yy2arr93 {
				r.EncodeArrayStart(2)
			} else {
				yynn93 = 1
				for _, b := range yyq93 {
					if b {
						yynn93++
					}
				}
				r.EncodeMapStart(yynn93)
				yynn93 = 0
			}
			if yyr93 || yy2arr93 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym95 := z.EncBinary()
				_ = yym95
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym96 := z.EncBinary()
				_ = yym96
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr93 || yy2arr93 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq93[1] {
					yym98 := z.EncBinary()
					_ = yym98
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Selector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq93[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym99 := z.EncBinary()
					_ = yym99
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Selector))
					}
				}
			}
			if yyr93 || yy2arr93 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleTwoStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym100 := z.DecBinary()
	_ = yym100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct101 := r.ContainerType()
		if yyct101 == codecSelferValueTypeMap1234 {
			yyl101 := r.ReadMapStart()
			if yyl101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl101, d)
			}
		} else if yyct101 == codecSelferValueTypeArray1234 {
			yyl101 := r.ReadArrayStart()
			if yyl101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleTwoStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys102Slc
	var yyhl102 bool = l >= 0
	for yyj102 := 0; ; yyj102++ {
		if yyhl102 {
			if yyj102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys102Slc = r.DecodeBytes(yys102Slc, true, true)
		yys102 := string(yys102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys102 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = ""
			} else {
				x.Selector = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys102)
		} // end switch yys102
	} // end for yyj102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleTwoStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj105 int
	var yyb105 bool
	var yyhl105 bool = l >= 0
	yyj105++
	if yyhl105 {
		yyb105 = yyj105 > l
	} else {
		yyb105 = r.CheckBreak()
	}
	if yyb105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj105++
	if yyhl105 {
		yyb105 = yyj105 > l
	} else {
		yyb105 = r.CheckBreak()
	}
	if yyb105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = ""
	} else {
		x.Selector = string(r.DecodeString())
	}
	for {
		yyj105++
		if yyhl105 {
			yyb105 = yyj105 > l
		} else {
			yyb105 = r.CheckBreak()
		}
		if yyb105 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj105-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym108 := z.EncBinary()
		_ = yym108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep109 := !z.EncBinary()
			yy2arr109 := z.EncBasicHandle().StructToArray
			var yyq109 [2]bool
			_, _, _ = yysep109, yyq109, yy2arr109
			const yyr109 bool = false
			yyq109[0] = x.Kind != ""
			yyq109[1] = x.APIVersion != ""
			var yynn109 int
			if yyr109 || yy2arr109 {
				r.EncodeArrayStart(2)
			} else {
				yynn109 = 0
				for _, b := range yyq109 {
					if b {
						yynn109++
					}
				}
				r.EncodeMapStart(yynn109)
				yynn109 = 0
			}
			if yyr109 || yy2arr109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq109[0] {
					yym111 := z.EncBinary()
					_ = yym111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq109[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym112 := z.EncBinary()
					_ = yym112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr109 || yy2arr109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq109[1] {
					yym114 := z.EncBinary()
					_ = yym114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq109[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym115 := z.EncBinary()
					_ = yym115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr109 || yy2arr109 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym116 := z.DecBinary()
	_ = yym116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct117 := r.ContainerType()
		if yyct117 == codecSelferValueTypeMap1234 {
			yyl117 := r.ReadMapStart()
			if yyl117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl117, d)
			}
		} else if yyct117 == codecSelferValueTypeArray1234 {
			yyl117 := r.ReadArrayStart()
			if yyl117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys118Slc
	var yyhl118 bool = l >= 0
	for yyj118 := 0; ; yyj118++ {
		if yyhl118 {
			if yyj118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys118Slc = r.DecodeBytes(yys118Slc, true, true)
		yys118 := string(yys118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys118 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys118)
		} // end switch yys118
	} // end for yyj118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj121 int
	var yyb121 bool
	var yyhl121 bool = l >= 0
	yyj121++
	if yyhl121 {
		yyb121 = yyj121 > l
	} else {
		yyb121 = r.CheckBreak()
	}
	if yyb121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj121++
	if yyhl121 {
		yyb121 = yyj121 > l
	} else {
		yyb121 = r.CheckBreak()
	}
	if yyb121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj121++
		if yyhl121 {
			yyb121 = yyj121 > l
		} else {
			yyb121 = r.CheckBreak()
		}
		if yyb121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym124 := z.EncBinary()
		_ = yym124
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep125 := !z.EncBinary()
			yy2arr125 := z.EncBasicHandle().StructToArray
			var yyq125 [4]bool
			_, _, _ = yysep125, yyq125, yy2arr125
			const yyr125 bool = false
			yyq125[0] = x.Kind != ""
			yyq125[1] = x.Name != ""
			yyq125[2] = x.APIVersion != ""
			yyq125[3] = x.Subresource != ""
			var yynn125 int
			if yyr125 || yy2arr125 {
				r.EncodeArrayStart(4)
			} else {
				yynn125 = 0
				for _, b := range yyq125 {
					if b {
						yynn125++
					}
				}
				r.EncodeMapStart(yynn125)
				yynn125 = 0
			}
			if yyr125 || yy2arr125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq125[0] {
					yym127 := z.EncBinary()
					_ = yym127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq125[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym128 := z.EncBinary()
					_ = yym128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr125 || yy2arr125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq125[1] {
					yym130 := z.EncBinary()
					_ = yym130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq125[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym131 := z.EncBinary()
					_ = yym131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr125 || yy2arr125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq125[2] {
					yym133 := z.EncBinary()
					_ = yym133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq125[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym134 := z.EncBinary()
					_ = yym134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr125 || yy2arr125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq125[3] {
					yym136 := z.EncBinary()
					_ = yym136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq125[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym137 := z.EncBinary()
					_ = yym137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr125 || yy2arr125 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym138 := z.DecBinary()
	_ = yym138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct139 := r.ContainerType()
		if yyct139 == codecSelferValueTypeMap1234 {
			yyl139 := r.ReadMapStart()
			if yyl139 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl139, d)
			}
		} else if yyct139 == codecSelferValueTypeArray1234 {
			yyl139 := r.ReadArrayStart()
			if yyl139 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys140Slc
	var yyhl140 bool = l >= 0
	for yyj140 := 0; ; yyj140++ {
		if yyhl140 {
			if yyj140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys140Slc = r.DecodeBytes(yys140Slc, true, true)
		yys140 := string(yys140Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys140 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys140)
		} // end switch yys140
	} // end for yyj140
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj145 int
	var yyb145 bool
	var yyhl145 bool = l >= 0
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj145++
		if yyhl145 {
			yyb145 = yyj145 > l
		} else {
			yyb145 = r.CheckBreak()
		}
		if yyb145 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj145-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym150 := z.EncBinary()
		_ = yym150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep151 := !z.EncBinary()
			yy2arr151 := z.EncBasicHandle().StructToArray
			var yyq151 [1]bool
			_, _, _ = yysep151, yyq151, yy2arr151
			const yyr151 bool = false
			var yynn151 int
			if yyr151 || yy2arr151 {
				r.EncodeArrayStart(1)
			} else {
				yynn151 = 1
				for _, b := range yyq151 {
					if b {
						yynn151++
					}
				}
				r.EncodeMapStart(yynn151)
				yynn151 = 0
			}
			if yyr151 || yy2arr151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym153 := z.EncBinary()
				_ = yym153
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym154 := z.EncBinary()
				_ = yym154
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr151 || yy2arr151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym155 := z.DecBinary()
	_ = yym155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct156 := r.ContainerType()
		if yyct156 == codecSelferValueTypeMap1234 {
			yyl156 := r.ReadMapStart()
			if yyl156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl156, d)
			}
		} else if yyct156 == codecSelferValueTypeArray1234 {
			yyl156 := r.ReadArrayStart()
			if yyl156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys157Slc
	var yyhl157 bool = l >= 0
	for yyj157 := 0; ; yyj157++ {
		if yyhl157 {
			if yyj157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys157Slc = r.DecodeBytes(yys157Slc, true, true)
		yys157 := string(yys157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys157 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys157)
		} // end switch yys157
	} // end for yyj157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj159 int
	var yyb159 bool
	var yyhl159 bool = l >= 0
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj159++
		if yyhl159 {
			yyb159 = yyj159 > l
		} else {
			yyb159 = r.CheckBreak()
		}
		if yyb159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym161 := z.EncBinary()
		_ = yym161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep162 := !z.EncBinary()
			yy2arr162 := z.EncBasicHandle().StructToArray
			var yyq162 [2]bool
			_, _, _ = yysep162, yyq162, yy2arr162
			const yyr162 bool = false
			var yynn162 int
			if yyr162 || yy2arr162 {
				r.EncodeArrayStart(2)
			} else {
				yynn162 = 2
				for _, b := range yyq162 {
					if b {
						yynn162++
					}
				}
				r.EncodeMapStart(yynn162)
				yynn162 = 0
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym164 := z.EncBinary()
				_ = yym164
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy167 := &x.TargetValue
				yym168 := z.EncBinary()
				_ = yym168
				if false {
				} else if z.HasExtensions() && z.EncExt(yy167) {
				} else if !yym168 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy167)
				} else {
					z.EncFallback(yy167)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy169 := &x.TargetValue
				yym170 := z.EncBinary()
				_ = yym170
				if false {
				} else if z.HasExtensions() && z.EncExt(yy169) {
				} else if !yym170 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy169)
				} else {
					z.EncFallback(yy169)
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym171 := z.DecBinary()
	_ = yym171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct172 := r.ContainerType()
		if yyct172 == codecSelferValueTypeMap1234 {
			yyl172 := r.ReadMapStart()
			if yyl172 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl172, d)
			}
		} else if yyct172 == codecSelferValueTypeArray1234 {
			yyl172 := r.ReadArrayStart()
			if yyl172 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys173Slc
	var yyhl173 bool = l >= 0
	for yyj173 := 0; ; yyj173++ {
		if yyhl173 {
			if yyj173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys173Slc = r.DecodeBytes(yys173Slc, true, true)
		yys173 := string(yys173Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys173 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv175 := &x.TargetValue
				yym176 := z.DecBinary()
				_ = yym176
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv175) {
				} else if !yym176 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv175)
				} else {
					z.DecFallback(yyv175, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys173)
		} // end switch yys173
	} // end for yyj173
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv179 := &x.TargetValue
		yym180 := z.DecBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv179) {
		} else if !yym180 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv179)
		} else {
			z.DecFallback(yyv179, false)
		}
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym181 := z.EncBinary()
		_ = yym181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep182 := !z.EncBinary()
			yy2arr182 := z.EncBasicHandle().StructToArray
			var yyq182 [1]bool
			_, _, _ = yysep182, yyq182, yy2arr182
			const yyr182 bool = false
			var yynn182 int
			if yyr182 || yy2arr182 {
				r.EncodeArrayStart(1)
			} else {
				yynn182 = 1
				for _, b := range yyq182 {
					if b {
						yynn182++
					}
				}
				r.EncodeMapStart(yynn182)
				yynn182 = 0
			}
			if yyr182 || yy2arr182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym184 := z.EncBinary()
					_ = yym184
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym185 := z.EncBinary()
					_ = yym185
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr182 || yy2arr182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym186 := z.DecBinary()
	_ = yym186
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct187 := r.ContainerType()
		if yyct187 == codecSelferValueTypeMap1234 {
			yyl187 := r.ReadMapStart()
			if yyl187 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl187, d)
			}
		} else if yyct187 == codecSelferValueTypeArray1234 {
			yyl187 := r.ReadArrayStart()
			if yyl187 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl187, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys188Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys188Slc
	var yyhl188 bool = l >= 0
	for yyj188 := 0; ; yyj188++ {
		if yyhl188 {
			if yyj188 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys188Slc = r.DecodeBytes(yys188Slc, true, true)
		yys188 := string(yys188Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys188 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv189 := &x.Items
				yym190 := z.DecBinary()
				_ = yym190
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv189), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys188)
		} // end switch yys188
	} // end for yyj188
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj191 int
	var yyb191 bool
	var yyhl191 bool = l >= 0
	yyj191++
	if yyhl191 {
		yyb191 = yyj191 > l
	} else {
		yyb191 = r.CheckBreak()
	}
	if yyb191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv192 := &x.Items
		yym193 := z.DecBinary()
		_ = yym193
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv192), d)
		}
	}
	for {
		yyj191++
		if yyhl191 {
			yyb191 = yyj191 > l
		} else {
			yyb191 = r.CheckBreak()
		}
		if yyb191 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj191-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			var yynn195 int
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				yynn195 = 2
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
				yynn195 = 0
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy200 := &x.CurrentValue
				yym201 := z.EncBinary()
				_ = yym201
				if false {
				} else if z.HasExtensions() && z.EncExt(yy200) {
				} else if !yym201 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy200)
				} else {
					z.EncFallback(yy200)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy202 := &x.CurrentValue
				yym203 := z.EncBinary()
				_ = yym203
				if false {
				} else if z.HasExtensions() && z.EncExt(yy202) {
				} else if !yym203 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy202)
				} else {
					z.EncFallback(yy202)
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym204 := z.DecBinary()
	_ = yym204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct205 := r.ContainerType()
		if yyct205 == codecSelferValueTypeMap1234 {
			yyl205 := r.ReadMapStart()
			if yyl205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl205, d)
			}
		} else if yyct205 == codecSelferValueTypeArray1234 {
			yyl205 := r.ReadArrayStart()
			if yyl205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys206Slc
	var yyhl206 bool = l >= 0
	for yyj206 := 0; ; yyj206++ {
		if yyhl206 {
			if yyj206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys206Slc = r.DecodeBytes(yys206Slc, true, true)
		yys206 := string(yys206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys206 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv208 := &x.CurrentValue
				yym209 := z.DecBinary()
				_ = yym209
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv208) {
				} else if !yym209 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv208)
				} else {
					z.DecFallback(yyv208, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys206)
		} // end switch yys206
	} // end for yyj206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj210 int
	var yyb210 bool
	var yyhl210 bool = l >= 0
	yyj210++
	if yyhl210 {
		yyb210 = yyj210 > l
	} else {
		yyb210 = r.CheckBreak()
	}
	if yyb210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj210++
	if yyhl210 {
		yyb210 = yyj210 > l
	} else {
		yyb210 = r.CheckBreak()
	}
	if yyb210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv212 := &x.CurrentValue
		yym213 := z.DecBinary()
		_ = yym213
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv212) {
		} else if !yym213 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv212)
		} else {
			z.DecFallback(yyv212, false)
		}
	}
	for {
		yyj210++
		if yyhl210 {
			yyb210 = yyj210 > l
		} else {
			yyb210 = r.CheckBreak()
		}
		if yyb210 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj210-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym214 := z.EncBinary()
		_ = yym214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep215 := !z.EncBinary()
			yy2arr215 := z.EncBasicHandle().StructToArray
			var yyq215 [1]bool
			_, _, _ = yysep215, yyq215, yy2arr215
			const yyr215 bool = false
			var yynn215 int
			if yyr215 || yy2arr215 {
				r.EncodeArrayStart(1)
			} else {
				yynn215 = 1
				for _, b := range yyq215 {
					if b {
						yynn215++
					}
				}
				r.EncodeMapStart(yynn215)
				yynn215 = 0
			}
			if yyr215 || yy2arr215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym217 := z.EncBinary()
					_ = yym217
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym218 := z.EncBinary()
					_ = yym218
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr215 || yy2arr215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym219 := z.DecBinary()
	_ = yym219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct220 := r.ContainerType()
		if yyct220 == codecSelferValueTypeMap1234 {
			yyl220 := r.ReadMapStart()
			if yyl220 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl220, d)
			}
		} else if yyct220 == codecSelferValueTypeArray1234 {
			yyl220 := r.ReadArrayStart()
			if yyl220 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl220, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys221Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys221Slc
	var yyhl221 bool = l >= 0
	for yyj221 := 0; ; yyj221++ {
		if yyhl221 {
			if yyj221 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys221Slc = r.DecodeBytes(yys221Slc, true, true)
		yys221 := string(yys221Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys221 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv222 := &x.Items
				yym223 := z.DecBinary()
				_ = yym223
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv222), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys221)
		} // end switch yys221
	} // end for yyj221
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj224 int
	var yyb224 bool
	var yyhl224 bool = l >= 0
	yyj224++
	if yyhl224 {
		yyb224 = yyj224 > l
	} else {
		yyb224 = r.CheckBreak()
	}
	if yyb224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv225 := &x.Items
		yym226 := z.DecBinary()
		_ = yym226
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv225), d)
		}
	}
	for {
		yyj224++
		if yyhl224 {
			yyb224 = yyj224 > l
		} else {
			yyb224 = r.CheckBreak()
		}
		if yyb224 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj224-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym227 := z.EncBinary()
		_ = yym227
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep228 := !z.EncBinary()
			yy2arr228 := z.EncBasicHandle().StructToArray
			var yyq228 [4]bool
			_, _, _ = yysep228, yyq228, yy2arr228
			const yyr228 bool = false
			yyq228[1] = x.MinReplicas != nil
			yyq228[3] = x.CPUUtilization != nil
			var yynn228 int
			if yyr228 || yy2arr228 {
				r.EncodeArrayStart(4)
			} else {
				yynn228 = 2
				for _, b := range yyq228 {
					if b {
						yynn228++
					}
				}
				r.EncodeMapStart(yynn228)
				yynn228 = 0
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy230 := &x.ScaleRef
				yy230.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy231 := &x.ScaleRef
				yy231.CodecEncodeSelf(e)
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq228[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy233 := *x.MinReplicas
						yym234 := z.EncBinary()
						_ = yym234
						if false {
						} else {
							r.EncodeInt(int64(yy233))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq228[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy235 := *x.MinReplicas
						yym236 := z.EncBinary()
						_ = yym236
						if false {
						} else {
							r.EncodeInt(int64(yy235))
						}
					}
				}
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym238 := z.EncBinary()
				_ = yym238
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym239 := z.EncBinary()
				_ = yym239
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq228[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq228[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct242 := r.ContainerType()
		if yyct242 == codecSelferValueTypeMap1234 {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if yyct242 == codecSelferValueTypeArray1234 {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys243 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv244 := &x.ScaleRef
				yyv244.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym246 := z.DecBinary()
				_ = yym246
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj249 int
	var yyb249 bool
	var yyhl249 bool = l >= 0
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv250 := &x.ScaleRef
		yyv250.CodecDecodeSelf(d)
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym252 := z.DecBinary()
		_ = yym252
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj249++
		if yyhl249 {
			yyb249 = yyj249 > l
		} else {
			yyb249 = r.CheckBreak()
		}
		if yyb249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym255 := z.EncBinary()
		_ = yym255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep256 := !z.EncBinary()
			yy2arr256 := z.EncBasicHandle().StructToArray
			var yyq256 [5]bool
			_, _, _ = yysep256, yyq256, yy2arr256
			const yyr256 bool = false
			yyq256[0] = x.ObservedGeneration != nil
			yyq256[1] = x.LastScaleTime != nil
			yyq256[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn256 int
			if yyr256 || yy2arr256 {
				r.EncodeArrayStart(5)
			} else {
				yynn256 = 2
				for _, b := range yyq256 {
					if b {
						yynn256++
					}
				}
				r.EncodeMapStart(yynn256)
				yynn256 = 0
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy258 := *x.ObservedGeneration
						yym259 := z.EncBinary()
						_ = yym259
						if false {
						} else {
							r.EncodeInt(int64(yy258))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy260 := *x.ObservedGeneration
						yym261 := z.EncBinary()
						_ = yym261
						if false {
						} else {
							r.EncodeInt(int64(yy260))
						}
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym263 := z.EncBinary()
						_ = yym263
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym263 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym263 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym264 := z.EncBinary()
						_ = yym264
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym264 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym264 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym266 := z.EncBinary()
				_ = yym266
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym267 := z.EncBinary()
				_ = yym267
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym269 := z.EncBinary()
				_ = yym269
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym270 := z.EncBinary()
				_ = yym270
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy272 := *x.CurrentCPUUtilizationPercentage
						yym273 := z.EncBinary()
						_ = yym273
						if false {
						} else {
							r.EncodeInt(int64(yy272))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy274 := *x.CurrentCPUUtilizationPercentage
						yym275 := z.EncBinary()
						_ = yym275
						if false {
						} else {
							r.EncodeInt(int64(yy274))
						}
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym276 := z.DecBinary()
	_ = yym276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct277 := r.ContainerType()
		if yyct277 == codecSelferValueTypeMap1234 {
			yyl277 := r.ReadMapStart()
			if yyl277 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl277, d)
			}
		} else if yyct277 == codecSelferValueTypeArray1234 {
			yyl277 := r.ReadArrayStart()
			if yyl277 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl277, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys278Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys278Slc
	var yyhl278 bool = l >= 0
	for yyj278 := 0; ; yyj278++ {
		if yyhl278 {
			if yyj278 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys278Slc = r.DecodeBytes(yys278Slc, true, true)
		yys278 := string(yys278Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys278 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym280 := z.DecBinary()
				_ = yym280
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym282 := z.DecBinary()
				_ = yym282
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym282 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym282 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym286 := z.DecBinary()
				_ = yym286
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys278)
		} // end switch yys278
	} // end for yyj278
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj287 int
	var yyb287 bool
	var yyhl287 bool = l >= 0
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym289 := z.DecBinary()
		_ = yym289
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym291 := z.DecBinary()
		_ = yym291
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym291 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym291 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym295 := z.DecBinary()
		_ = yym295
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj287++
		if yyhl287 {
			yyb287 = yyj287 > l
		} else {
			yyb287 = r.CheckBreak()
		}
		if yyb287 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj287-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym296 := z.EncBinary()
		_ = yym296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep297 := !z.EncBinary()
			yy2arr297 := z.EncBasicHandle().StructToArray
			var yyq297 [5]bool
			_, _, _ = yysep297, yyq297, yy2arr297
			const yyr297 bool = false
			yyq297[0] = x.Kind != ""
			yyq297[1] = x.APIVersion != ""
			yyq297[2] = true
			yyq297[3] = true
			yyq297[4] = true
			var yynn297 int
			if yyr297 || yy2arr297 {
				r.EncodeArrayStart(5)
			} else {
				yynn297 = 0
				for _, b := range yyq297 {
					if b {
						yynn297++
					}
				}
				r.EncodeMapStart(yynn297)
				yynn297 = 0
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[0] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[1] {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[2] {
					yy305 := &x.ObjectMeta
					yy305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy306 := &x.ObjectMeta
					yy306.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[3] {
					yy308 := &x.Spec
					yy308.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy309 := &x.Spec
					yy309.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[4] {
					yy311 := &x.Status
					yy311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy312 := &x.Status
					yy312.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym313 := z.DecBinary()
	_ = yym313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct314 := r.ContainerType()
		if yyct314 == codecSelferValueTypeMap1234 {
			yyl314 := r.ReadMapStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl314, d)
			}
		} else if yyct314 == codecSelferValueTypeArray1234 {
			yyl314 := r.ReadArrayStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys315Slc
	var yyhl315 bool = l >= 0
	for yyj315 := 0; ; yyj315++ {
		if yyhl315 {
			if yyj315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys315Slc = r.DecodeBytes(yys315Slc, true, true)
		yys315 := string(yys315Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys315 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv318 := &x.ObjectMeta
				yyv318.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv319 := &x.Spec
				yyv319.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv320 := &x.Status
				yyv320.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys315)
		} // end switch yys315
	} // end for yyj315
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj321 int
	var yyb321 bool
	var yyhl321 bool = l >= 0
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv324 := &x.ObjectMeta
		yyv324.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv325 := &x.Spec
		yyv325.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv326 := &x.Status
		yyv326.CodecDecodeSelf(d)
	}
	for {
		yyj321++
		if yyhl321 {
			yyb321 = yyj321 > l
		} else {
			yyb321 = r.CheckBreak()
		}
		if yyb321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym327 := z.EncBinary()
		_ = yym327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep328 := !z.EncBinary()
			yy2arr328 := z.EncBasicHandle().StructToArray
			var yyq328 [4]bool
			_, _, _ = yysep328, yyq328, yy2arr328
			const yyr328 bool = false
			yyq328[0] = x.Kind != ""
			yyq328[1] = x.APIVersion != ""
			yyq328[2] = true
			var yynn328 int
			if yyr328 || yy2arr328 {
				r.EncodeArrayStart(4)
			} else {
				yynn328 = 1
				for _, b := range yyq328 {
					if b {
						yynn328++
					}
				}
				r.EncodeMapStart(yynn328)
				yynn328 = 0
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[0] {
					yym330 := z.EncBinary()
					_ = yym330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq328[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[1] {
					yym333 := z.EncBinary()
					_ = yym333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[2] {
					yy336 := &x.ListMeta
					yym337 := z.EncBinary()
					_ = yym337
					if false {
					} else if z.HasExtensions() && z.EncExt(yy336) {
					} else {
						z.EncFallback(yy336)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy338 := &x.ListMeta
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else if z.HasExtensions() && z.EncExt(yy338) {
					} else {
						z.EncFallback(yy338)
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym343 := z.DecBinary()
	_ = yym343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct344 := r.ContainerType()
		if yyct344 == codecSelferValueTypeMap1234 {
			yyl344 := r.ReadMapStart()
			if yyl344 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl344, d)
			}
		} else if yyct344 == codecSelferValueTypeArray1234 {
			yyl344 := r.ReadArrayStart()
			if yyl344 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys345Slc
	var yyhl345 bool = l >= 0
	for yyj345 := 0; ; yyj345++ {
		if yyhl345 {
			if yyj345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys345Slc = r.DecodeBytes(yys345Slc, true, true)
		yys345 := string(yys345Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys345 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv348 := &x.ListMeta
				yym349 := z.DecBinary()
				_ = yym349
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv348) {
				} else {
					z.DecFallback(yyv348, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv350 := &x.Items
				yym351 := z.DecBinary()
				_ = yym351
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv350), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys345)
		} // end switch yys345
	} // end for yyj345
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv355 := &x.ListMeta
		yym356 := z.DecBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv355) {
		} else {
			z.DecFallback(yyv355, false)
		}
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv357 := &x.Items
		yym358 := z.DecBinary()
		_ = yym358
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv357), d)
		}
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym359 := z.EncBinary()
		_ = yym359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep360 := !z.EncBinary()
			yy2arr360 := z.EncBasicHandle().StructToArray
			var yyq360 [5]bool
			_, _, _ = yysep360, yyq360, yy2arr360
			const yyr360 bool = false
			yyq360[0] = x.Kind != ""
			yyq360[1] = x.APIVersion != ""
			yyq360[2] = true
			yyq360[3] = x.Description != ""
			yyq360[4] = len(x.Versions) != 0
			var yynn360 int
			if yyr360 || yy2arr360 {
				r.EncodeArrayStart(5)
			} else {
				yynn360 = 0
				for _, b := range yyq360 {
					if b {
						yynn360++
					}
				}
				r.EncodeMapStart(yynn360)
				yynn360 = 0
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[0] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[1] {
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[2] {
					yy368 := &x.ObjectMeta
					yy368.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy369 := &x.ObjectMeta
					yy369.CodecEncodeSelf(e)
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[3] {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym374 := z.EncBinary()
						_ = yym374
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym375 := z.EncBinary()
						_ = yym375
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym376 := z.DecBinary()
	_ = yym376
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct377 := r.ContainerType()
		if yyct377 == codecSelferValueTypeMap1234 {
			yyl377 := r.ReadMapStart()
			if yyl377 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl377, d)
			}
		} else if yyct377 == codecSelferValueTypeArray1234 {
			yyl377 := r.ReadArrayStart()
			if yyl377 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl377, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys378Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys378Slc
	var yyhl378 bool = l >= 0
	for yyj378 := 0; ; yyj378++ {
		if yyhl378 {
			if yyj378 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys378Slc = r.DecodeBytes(yys378Slc, true, true)
		yys378 := string(yys378Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys378 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv381 := &x.ObjectMeta
				yyv381.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv383 := &x.Versions
				yym384 := z.DecBinary()
				_ = yym384
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv383), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys378)
		} // end switch yys378
	} // end for yyj378
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj385 int
	var yyb385 bool
	var yyhl385 bool = l >= 0
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv388 := &x.ObjectMeta
		yyv388.CodecDecodeSelf(d)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv390 := &x.Versions
		yym391 := z.DecBinary()
		_ = yym391
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv390), d)
		}
	}
	for {
		yyj385++
		if yyhl385 {
			yyb385 = yyj385 > l
		} else {
			yyb385 = r.CheckBreak()
		}
		if yyb385 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj385-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym392 := z.EncBinary()
		_ = yym392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep393 := !z.EncBinary()
			yy2arr393 := z.EncBasicHandle().StructToArray
			var yyq393 [4]bool
			_, _, _ = yysep393, yyq393, yy2arr393
			const yyr393 bool = false
			yyq393[0] = x.Kind != ""
			yyq393[1] = x.APIVersion != ""
			yyq393[2] = true
			var yynn393 int
			if yyr393 || yy2arr393 {
				r.EncodeArrayStart(4)
			} else {
				yynn393 = 1
				for _, b := range yyq393 {
					if b {
						yynn393++
					}
				}
				r.EncodeMapStart(yynn393)
				yynn393 = 0
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq393[0] {
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq393[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym396 := z.EncBinary()
					_ = yym396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq393[1] {
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq393[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq393[2] {
					yy401 := &x.ListMeta
					yym402 := z.EncBinary()
					_ = yym402
					if false {
					} else if z.HasExtensions() && z.EncExt(yy401) {
					} else {
						z.EncFallback(yy401)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq393[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy403 := &x.ListMeta
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else if z.HasExtensions() && z.EncExt(yy403) {
					} else {
						z.EncFallback(yy403)
					}
				}
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym406 := z.EncBinary()
					_ = yym406
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym407 := z.EncBinary()
					_ = yym407
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym408 := z.DecBinary()
	_ = yym408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct409 := r.ContainerType()
		if yyct409 == codecSelferValueTypeMap1234 {
			yyl409 := r.ReadMapStart()
			if yyl409 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl409, d)
			}
		} else if yyct409 == codecSelferValueTypeArray1234 {
			yyl409 := r.ReadArrayStart()
			if yyl409 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys410Slc
	var yyhl410 bool = l >= 0
	for yyj410 := 0; ; yyj410++ {
		if yyhl410 {
			if yyj410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys410Slc = r.DecodeBytes(yys410Slc, true, true)
		yys410 := string(yys410Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys410 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv413 := &x.ListMeta
				yym414 := z.DecBinary()
				_ = yym414
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv413) {
				} else {
					z.DecFallback(yyv413, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv415 := &x.Items
				yym416 := z.DecBinary()
				_ = yym416
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv415), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys410)
		} // end switch yys410
	} // end for yyj410
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj417 int
	var yyb417 bool
	var yyhl417 bool = l >= 0
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv420 := &x.ListMeta
		yym421 := z.DecBinary()
		_ = yym421
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv420) {
		} else {
			z.DecFallback(yyv420, false)
		}
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv422 := &x.Items
		yym423 := z.DecBinary()
		_ = yym423
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv422), d)
		}
	}
	for {
		yyj417++
		if yyhl417 {
			yyb417 = yyj417 > l
		} else {
			yyb417 = r.CheckBreak()
		}
		if yyb417 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj417-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym424 := z.EncBinary()
		_ = yym424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep425 := !z.EncBinary()
			yy2arr425 := z.EncBasicHandle().StructToArray
			var yyq425 [2]bool
			_, _, _ = yysep425, yyq425, yy2arr425
			const yyr425 bool = false
			yyq425[0] = x.Name != ""
			yyq425[1] = x.APIGroup != ""
			var yynn425 int
			if yyr425 || yy2arr425 {
				r.EncodeArrayStart(2)
			} else {
				yynn425 = 0
				for _, b := range yyq425 {
					if b {
						yynn425++
					}
				}
				r.EncodeMapStart(yynn425)
				yynn425 = 0
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq425[0] {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq425[1] {
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym432 := z.DecBinary()
	_ = yym432
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct433 := r.ContainerType()
		if yyct433 == codecSelferValueTypeMap1234 {
			yyl433 := r.ReadMapStart()
			if yyl433 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl433, d)
			}
		} else if yyct433 == codecSelferValueTypeArray1234 {
			yyl433 := r.ReadArrayStart()
			if yyl433 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl433, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys434Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys434Slc
	var yyhl434 bool = l >= 0
	for yyj434 := 0; ; yyj434++ {
		if yyhl434 {
			if yyj434 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys434Slc = r.DecodeBytes(yys434Slc, true, true)
		yys434 := string(yys434Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys434 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys434)
		} // end switch yys434
	} // end for yyj434
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym440 := z.EncBinary()
		_ = yym440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep441 := !z.EncBinary()
			yy2arr441 := z.EncBasicHandle().StructToArray
			var yyq441 [4]bool
			_, _, _ = yysep441, yyq441, yy2arr441
			const yyr441 bool = false
			yyq441[0] = x.Kind != ""
			yyq441[1] = x.APIVersion != ""
			yyq441[2] = true
			yyq441[3] = len(x.Data) != 0
			var yynn441 int
			if yyr441 || yy2arr441 {
				r.EncodeArrayStart(4)
			} else {
				yynn441 = 0
				for _, b := range yyq441 {
					if b {
						yynn441++
					}
				}
				r.EncodeMapStart(yynn441)
				yynn441 = 0
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[0] {
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq441[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[1] {
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq441[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[2] {
					yy449 := &x.ObjectMeta
					yy449.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq441[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy450 := &x.ObjectMeta
					yy450.CodecEncodeSelf(e)
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym452 := z.EncBinary()
						_ = yym452
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq441[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym453 := z.EncBinary()
						_ = yym453
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym454 := z.DecBinary()
	_ = yym454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct455 := r.ContainerType()
		if yyct455 == codecSelferValueTypeMap1234 {
			yyl455 := r.ReadMapStart()
			if yyl455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl455, d)
			}
		} else if yyct455 == codecSelferValueTypeArray1234 {
			yyl455 := r.ReadArrayStart()
			if yyl455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys456Slc
	var yyhl456 bool = l >= 0
	for yyj456 := 0; ; yyj456++ {
		if yyhl456 {
			if yyj456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys456Slc = r.DecodeBytes(yys456Slc, true, true)
		yys456 := string(yys456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys456 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv459 := &x.ObjectMeta
				yyv459.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv460 := &x.Data
				yym461 := z.DecBinary()
				_ = yym461
				if false {
				} else {
					*yyv460 = r.DecodeBytes(*(*[]byte)(yyv460), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys456)
		} // end switch yys456
	} // end for yyj456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj462 int
	var yyb462 bool
	var yyhl462 bool = l >= 0
	yyj462++
	if yyhl462 {
		yyb462 = yyj462 > l
	} else {
		yyb462 = r.CheckBreak()
	}
	if yyb462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj462++
	if yyhl462 {
		yyb462 = yyj462 > l
	} else {
		yyb462 = r.CheckBreak()
	}
	if yyb462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj462++
	if yyhl462 {
		yyb462 = yyj462 > l
	} else {
		yyb462 = r.CheckBreak()
	}
	if yyb462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv465 := &x.ObjectMeta
		yyv465.CodecDecodeSelf(d)
	}
	yyj462++
	if yyhl462 {
		yyb462 = yyj462 > l
	} else {
		yyb462 = r.CheckBreak()
	}
	if yyb462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv466 := &x.Data
		yym467 := z.DecBinary()
		_ = yym467
		if false {
		} else {
			*yyv466 = r.DecodeBytes(*(*[]byte)(yyv466), false, false)
		}
	}
	for {
		yyj462++
		if yyhl462 {
			yyb462 = yyj462 > l
		} else {
			yyb462 = r.CheckBreak()
		}
		if yyb462 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj462-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym468 := z.EncBinary()
		_ = yym468
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep469 := !z.EncBinary()
			yy2arr469 := z.EncBasicHandle().StructToArray
			var yyq469 [5]bool
			_, _, _ = yysep469, yyq469, yy2arr469
			const yyr469 bool = false
			yyq469[0] = x.Kind != ""
			yyq469[1] = x.APIVersion != ""
			yyq469[2] = true
			yyq469[3] = true
			yyq469[4] = true
			var yynn469 int
			if yyr469 || yy2arr469 {
				r.EncodeArrayStart(5)
			} else {
				yynn469 = 0
				for _, b := range yyq469 {
					if b {
						yynn469++
					}
				}
				r.EncodeMapStart(yynn469)
				yynn469 = 0
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[0] {
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq469[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[1] {
					yym474 := z.EncBinary()
					_ = yym474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq469[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[2] {
					yy477 := &x.ObjectMeta
					yy477.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy478 := &x.ObjectMeta
					yy478.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[3] {
					yy480 := &x.Spec
					yy480.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy481 := &x.Spec
					yy481.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[4] {
					yy483 := &x.Status
					yy483.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy484 := &x.Status
					yy484.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym485 := z.DecBinary()
	_ = yym485
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct486 := r.ContainerType()
		if yyct486 == codecSelferValueTypeMap1234 {
			yyl486 := r.ReadMapStart()
			if yyl486 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl486, d)
			}
		} else if yyct486 == codecSelferValueTypeArray1234 {
			yyl486 := r.ReadArrayStart()
			if yyl486 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl486, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys487Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys487Slc
	var yyhl487 bool = l >= 0
	for yyj487 := 0; ; yyj487++ {
		if yyhl487 {
			if yyj487 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys487Slc = r.DecodeBytes(yys487Slc, true, true)
		yys487 := string(yys487Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys487 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv490 := &x.ObjectMeta
				yyv490.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv491 := &x.Spec
				yyv491.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv492 := &x.Status
				yyv492.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys487)
		} // end switch yys487
	} // end for yyj487
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj493 int
	var yyb493 bool
	var yyhl493 bool = l >= 0
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv496 := &x.ObjectMeta
		yyv496.CodecDecodeSelf(d)
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv497 := &x.Spec
		yyv497.CodecDecodeSelf(d)
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv498 := &x.Status
		yyv498.CodecDecodeSelf(d)
	}
	for {
		yyj493++
		if yyhl493 {
			yyb493 = yyj493 > l
		} else {
			yyb493 = r.CheckBreak()
		}
		if yyb493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [8]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			yyq500[0] = x.Replicas != 0
			yyq500[1] = len(x.Selector) != 0
			yyq500[3] = true
			yyq500[4] = x.RevisionHistoryLimit != nil
			yyq500[5] = x.UniqueLabelKey != ""
			yyq500[6] = x.Paused != false
			yyq500[7] = x.RollbackTo != nil
			var yynn500 int
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(8)
			} else {
				yynn500 = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
				yynn500 = 0
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[0] {
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq500[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym503 := z.EncBinary()
					_ = yym503
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym505 := z.EncBinary()
						_ = yym505
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym506 := z.EncBinary()
						_ = yym506
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy508 := &x.Template
				yy508.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy509 := &x.Template
				yy509.CodecEncodeSelf(e)
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[3] {
					yy511 := &x.Strategy
					yy511.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy512 := &x.Strategy
					yy512.CodecEncodeSelf(e)
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[4] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy514 := *x.RevisionHistoryLimit
						yym515 := z.EncBinary()
						_ = yym515
						if false {
						} else {
							r.EncodeInt(int64(yy514))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy516 := *x.RevisionHistoryLimit
						yym517 := z.EncBinary()
						_ = yym517
						if false {
						} else {
							r.EncodeInt(int64(yy516))
						}
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[5] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq500[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[6] {
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq500[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym525 := z.DecBinary()
	_ = yym525
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct526 := r.ContainerType()
		if yyct526 == codecSelferValueTypeMap1234 {
			yyl526 := r.ReadMapStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl526, d)
			}
		} else if yyct526 == codecSelferValueTypeArray1234 {
			yyl526 := r.ReadArrayStart()
			if yyl526 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl526, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys527Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys527Slc
	var yyhl527 bool = l >= 0
	for yyj527 := 0; ; yyj527++ {
		if yyhl527 {
			if yyj527 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys527Slc = r.DecodeBytes(yys527Slc, true, true)
		yys527 := string(yys527Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys527 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv529 := &x.Selector
				yym530 := z.DecBinary()
				_ = yym530
				if false {
				} else {
					z.F.DecMapStringStringX(yyv529, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv531 := &x.Template
				yyv531.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv532 := &x.Strategy
				yyv532.CodecDecodeSelf(d)
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int)
				}
				yym534 := z.DecBinary()
				_ = yym534
				if false {
				} else {
					*((*int)(x.RevisionHistoryLimit)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys527)
		} // end switch yys527
	} // end for yyj527
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj538 int
	var yyb538 bool
	var yyhl538 bool = l >= 0
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv540 := &x.Selector
		yym541 := z.DecBinary()
		_ = yym541
		if false {
		} else {
			z.F.DecMapStringStringX(yyv540, false, d)
		}
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv542 := &x.Template
		yyv542.CodecDecodeSelf(d)
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv543 := &x.Strategy
		yyv543.CodecDecodeSelf(d)
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int)
		}
		yym545 := z.DecBinary()
		_ = yym545
		if false {
		} else {
			*((*int)(x.RevisionHistoryLimit)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj538++
	if yyhl538 {
		yyb538 = yyj538 > l
	} else {
		yyb538 = r.CheckBreak()
	}
	if yyb538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj538++
		if yyhl538 {
			yyb538 = yyj538 > l
		} else {
			yyb538 = r.CheckBreak()
		}
		if yyb538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [5]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.Kind != ""
			yyq550[1] = x.APIVersion != ""
			yyq550[3] = len(x.UpdatedAnnotations) != 0
			var yynn550 int
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(5)
			} else {
				yynn550 = 2
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
				yynn550 = 0
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[0] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[1] {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym559 := z.EncBinary()
				_ = yym559
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym561 := z.EncBinary()
						_ = yym561
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq550[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym562 := z.EncBinary()
						_ = yym562
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy564 := &x.RollbackTo
				yy564.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy565 := &x.RollbackTo
				yy565.CodecEncodeSelf(e)
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym566 := z.DecBinary()
	_ = yym566
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct567 := r.ContainerType()
		if yyct567 == codecSelferValueTypeMap1234 {
			yyl567 := r.ReadMapStart()
			if yyl567 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl567, d)
			}
		} else if yyct567 == codecSelferValueTypeArray1234 {
			yyl567 := r.ReadArrayStart()
			if yyl567 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl567, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys568Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys568Slc
	var yyhl568 bool = l >= 0
	for yyj568 := 0; ; yyj568++ {
		if yyhl568 {
			if yyj568 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys568Slc = r.DecodeBytes(yys568Slc, true, true)
		yys568 := string(yys568Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys568 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv572 := &x.UpdatedAnnotations
				yym573 := z.DecBinary()
				_ = yym573
				if false {
				} else {
					z.F.DecMapStringStringX(yyv572, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv574 := &x.RollbackTo
				yyv574.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys568)
		} // end switch yys568
	} // end for yyj568
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj575 int
	var yyb575 bool
	var yyhl575 bool = l >= 0
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv579 := &x.UpdatedAnnotations
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else {
			z.F.DecMapStringStringX(yyv579, false, d)
		}
	}
	yyj575++
	if yyhl575 {
		yyb575 = yyj575 > l
	} else {
		yyb575 = r.CheckBreak()
	}
	if yyb575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv581 := &x.RollbackTo
		yyv581.CodecDecodeSelf(d)
	}
	for {
		yyj575++
		if yyhl575 {
			yyb575 = yyj575 > l
		} else {
			yyb575 = r.CheckBreak()
		}
		if yyb575 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj575-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym582 := z.EncBinary()
		_ = yym582
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep583 := !z.EncBinary()
			yy2arr583 := z.EncBasicHandle().StructToArray
			var yyq583 [1]bool
			_, _, _ = yysep583, yyq583, yy2arr583
			const yyr583 bool = false
			yyq583[0] = x.Revision != 0
			var yynn583 int
			if yyr583 || yy2arr583 {
				r.EncodeArrayStart(1)
			} else {
				yynn583 = 0
				for _, b := range yyq583 {
					if b {
						yynn583++
					}
				}
				r.EncodeMapStart(yynn583)
				yynn583 = 0
			}
			if yyr583 || yy2arr583 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq583[0] {
					yym585 := z.EncBinary()
					_ = yym585
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq583[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym586 := z.EncBinary()
					_ = yym586
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr583 || yy2arr583 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym587 := z.DecBinary()
	_ = yym587
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct588 := r.ContainerType()
		if yyct588 == codecSelferValueTypeMap1234 {
			yyl588 := r.ReadMapStart()
			if yyl588 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl588, d)
			}
		} else if yyct588 == codecSelferValueTypeArray1234 {
			yyl588 := r.ReadArrayStart()
			if yyl588 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl588, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys589Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys589Slc
	var yyhl589 bool = l >= 0
	for yyj589 := 0; ; yyj589++ {
		if yyhl589 {
			if yyj589 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys589Slc = r.DecodeBytes(yys589Slc, true, true)
		yys589 := string(yys589Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys589 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys589)
		} // end switch yys589
	} // end for yyj589
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj591 int
	var yyb591 bool
	var yyhl591 bool = l >= 0
	yyj591++
	if yyhl591 {
		yyb591 = yyj591 > l
	} else {
		yyb591 = r.CheckBreak()
	}
	if yyb591 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj591++
		if yyhl591 {
			yyb591 = yyj591 > l
		} else {
			yyb591 = r.CheckBreak()
		}
		if yyb591 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj591-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym593 := z.EncBinary()
		_ = yym593
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep594 := !z.EncBinary()
			yy2arr594 := z.EncBasicHandle().StructToArray
			var yyq594 [2]bool
			_, _, _ = yysep594, yyq594, yy2arr594
			const yyr594 bool = false
			yyq594[0] = x.Type != ""
			yyq594[1] = x.RollingUpdate != nil
			var yynn594 int
			if yyr594 || yy2arr594 {
				r.EncodeArrayStart(2)
			} else {
				yynn594 = 0
				for _, b := range yyq594 {
					if b {
						yynn594++
					}
				}
				r.EncodeMapStart(yynn594)
				yynn594 = 0
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq594[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq594[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq594[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq594[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym597 := z.DecBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct598 := r.ContainerType()
		if yyct598 == codecSelferValueTypeMap1234 {
			yyl598 := r.ReadMapStart()
			if yyl598 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl598, d)
			}
		} else if yyct598 == codecSelferValueTypeArray1234 {
			yyl598 := r.ReadArrayStart()
			if yyl598 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl598, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys599Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys599Slc
	var yyhl599 bool = l >= 0
	for yyj599 := 0; ; yyj599++ {
		if yyhl599 {
			if yyj599 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys599Slc = r.DecodeBytes(yys599Slc, true, true)
		yys599 := string(yys599Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys599 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys599)
		} // end switch yys599
	} // end for yyj599
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj602 int
	var yyb602 bool
	var yyhl602 bool = l >= 0
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj602++
	if yyhl602 {
		yyb602 = yyj602 > l
	} else {
		yyb602 = r.CheckBreak()
	}
	if yyb602 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj602++
		if yyhl602 {
			yyb602 = yyj602 > l
		} else {
			yyb602 = r.CheckBreak()
		}
		if yyb602 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj602-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym605 := z.EncBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym606 := z.DecBinary()
	_ = yym606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym607 := z.EncBinary()
		_ = yym607
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep608 := !z.EncBinary()
			yy2arr608 := z.EncBasicHandle().StructToArray
			var yyq608 [3]bool
			_, _, _ = yysep608, yyq608, yy2arr608
			const yyr608 bool = false
			yyq608[0] = true
			yyq608[1] = true
			yyq608[2] = x.MinReadySeconds != 0
			var yynn608 int
			if yyr608 || yy2arr608 {
				r.EncodeArrayStart(3)
			} else {
				yynn608 = 0
				for _, b := range yyq608 {
					if b {
						yynn608++
					}
				}
				r.EncodeMapStart(yynn608)
				yynn608 = 0
			}
			if yyr608 || yy2arr608 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq608[0] {
					yy610 := &x.MaxUnavailable
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else if z.HasExtensions() && z.EncExt(yy610) {
					} else if !yym611 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy610)
					} else {
						z.EncFallback(yy610)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq608[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy612 := &x.MaxUnavailable
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else if z.HasExtensions() && z.EncExt(yy612) {
					} else if !yym613 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy612)
					} else {
						z.EncFallback(yy612)
					}
				}
			}
			if yyr608 || yy2arr608 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq608[1] {
					yy615 := &x.MaxSurge
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else if z.HasExtensions() && z.EncExt(yy615) {
					} else if !yym616 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy615)
					} else {
						z.EncFallback(yy615)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq608[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy617 := &x.MaxSurge
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else if z.HasExtensions() && z.EncExt(yy617) {
					} else if !yym618 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy617)
					} else {
						z.EncFallback(yy617)
					}
				}
			}
			if yyr608 || yy2arr608 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq608[2] {
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq608[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr608 || yy2arr608 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym622 := z.DecBinary()
	_ = yym622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct623 := r.ContainerType()
		if yyct623 == codecSelferValueTypeMap1234 {
			yyl623 := r.ReadMapStart()
			if yyl623 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl623, d)
			}
		} else if yyct623 == codecSelferValueTypeArray1234 {
			yyl623 := r.ReadArrayStart()
			if yyl623 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys624Slc
	var yyhl624 bool = l >= 0
	for yyj624 := 0; ; yyj624++ {
		if yyhl624 {
			if yyj624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys624Slc = r.DecodeBytes(yys624Slc, true, true)
		yys624 := string(yys624Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys624 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv625 := &x.MaxUnavailable
				yym626 := z.DecBinary()
				_ = yym626
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv625) {
				} else if !yym626 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv625)
				} else {
					z.DecFallback(yyv625, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg6_intstr.IntOrString{}
			} else {
				yyv627 := &x.MaxSurge
				yym628 := z.DecBinary()
				_ = yym628
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv627) {
				} else if !yym628 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv627)
				} else {
					z.DecFallback(yyv627, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys624)
		} // end switch yys624
	} // end for yyj624
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj630 int
	var yyb630 bool
	var yyhl630 bool = l >= 0
	yyj630++
	if yyhl630 {
		yyb630 = yyj630 > l
	} else {
		yyb630 = r.CheckBreak()
	}
	if yyb630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv631 := &x.MaxUnavailable
		yym632 := z.DecBinary()
		_ = yym632
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv631) {
		} else if !yym632 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv631)
		} else {
			z.DecFallback(yyv631, false)
		}
	}
	yyj630++
	if yyhl630 {
		yyb630 = yyj630 > l
	} else {
		yyb630 = r.CheckBreak()
	}
	if yyb630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg6_intstr.IntOrString{}
	} else {
		yyv633 := &x.MaxSurge
		yym634 := z.DecBinary()
		_ = yym634
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv633) {
		} else if !yym634 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv633)
		} else {
			z.DecFallback(yyv633, false)
		}
	}
	yyj630++
	if yyhl630 {
		yyb630 = yyj630 > l
	} else {
		yyb630 = r.CheckBreak()
	}
	if yyb630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj630++
		if yyhl630 {
			yyb630 = yyj630 > l
		} else {
			yyb630 = r.CheckBreak()
		}
		if yyb630 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj630-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym636 := z.EncBinary()
		_ = yym636
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep637 := !z.EncBinary()
			yy2arr637 := z.EncBasicHandle().StructToArray
			var yyq637 [4]bool
			_, _, _ = yysep637, yyq637, yy2arr637
			const yyr637 bool = false
			yyq637[0] = x.Replicas != 0
			yyq637[1] = x.UpdatedReplicas != 0
			yyq637[2] = x.AvailableReplicas != 0
			yyq637[3] = x.UnavailableReplicas != 0
			var yynn637 int
			if yyr637 || yy2arr637 {
				r.EncodeArrayStart(4)
			} else {
				yynn637 = 0
				for _, b := range yyq637 {
					if b {
						yynn637++
					}
				}
				r.EncodeMapStart(yynn637)
				yynn637 = 0
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[0] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq637[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[1] {
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq637[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[2] {
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq637[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq637[3] {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq637[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr637 || yy2arr637 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym650 := z.DecBinary()
	_ = yym650
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct651 := r.ContainerType()
		if yyct651 == codecSelferValueTypeMap1234 {
			yyl651 := r.ReadMapStart()
			if yyl651 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl651, d)
			}
		} else if yyct651 == codecSelferValueTypeArray1234 {
			yyl651 := r.ReadArrayStart()
			if yyl651 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl651, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys652Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys652Slc
	var yyhl652 bool = l >= 0
	for yyj652 := 0; ; yyj652++ {
		if yyhl652 {
			if yyj652 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys652Slc = r.DecodeBytes(yys652Slc, true, true)
		yys652 := string(yys652Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys652 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys652)
		} // end switch yys652
	} // end for yyj652
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj657 int
	var yyb657 bool
	var yyhl657 bool = l >= 0
	yyj657++
	if yyhl657 {
		yyb657 = yyj657 > l
	} else {
		yyb657 = r.CheckBreak()
	}
	if yyb657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj657++
	if yyhl657 {
		yyb657 = yyj657 > l
	} else {
		yyb657 = r.CheckBreak()
	}
	if yyb657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj657++
	if yyhl657 {
		yyb657 = yyj657 > l
	} else {
		yyb657 = r.CheckBreak()
	}
	if yyb657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj657++
	if yyhl657 {
		yyb657 = yyj657 > l
	} else {
		yyb657 = r.CheckBreak()
	}
	if yyb657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj657++
		if yyhl657 {
			yyb657 = yyj657 > l
		} else {
			yyb657 = r.CheckBreak()
		}
		if yyb657 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj657-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym662 := z.EncBinary()
		_ = yym662
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep663 := !z.EncBinary()
			yy2arr663 := z.EncBasicHandle().StructToArray
			var yyq663 [4]bool
			_, _, _ = yysep663, yyq663, yy2arr663
			const yyr663 bool = false
			yyq663[0] = x.Kind != ""
			yyq663[1] = x.APIVersion != ""
			yyq663[2] = true
			var yynn663 int
			if yyr663 || yy2arr663 {
				r.EncodeArrayStart(4)
			} else {
				yynn663 = 1
				for _, b := range yyq663 {
					if b {
						yynn663++
					}
				}
				r.EncodeMapStart(yynn663)
				yynn663 = 0
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq663[0] {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq663[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq663[1] {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq663[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq663[2] {
					yy671 := &x.ListMeta
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else if z.HasExtensions() && z.EncExt(yy671) {
					} else {
						z.EncFallback(yy671)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq663[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy673 := &x.ListMeta
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else if z.HasExtensions() && z.EncExt(yy673) {
					} else {
						z.EncFallback(yy673)
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym678 := z.DecBinary()
	_ = yym678
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct679 := r.ContainerType()
		if yyct679 == codecSelferValueTypeMap1234 {
			yyl679 := r.ReadMapStart()
			if yyl679 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl679, d)
			}
		} else if yyct679 == codecSelferValueTypeArray1234 {
			yyl679 := r.ReadArrayStart()
			if yyl679 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl679, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys680Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys680Slc
	var yyhl680 bool = l >= 0
	for yyj680 := 0; ; yyj680++ {
		if yyhl680 {
			if yyj680 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys680Slc = r.DecodeBytes(yys680Slc, true, true)
		yys680 := string(yys680Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys680 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv683 := &x.ListMeta
				yym684 := z.DecBinary()
				_ = yym684
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv683) {
				} else {
					z.DecFallback(yyv683, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv685 := &x.Items
				yym686 := z.DecBinary()
				_ = yym686
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv685), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys680)
		} // end switch yys680
	} // end for yyj680
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj687 int
	var yyb687 bool
	var yyhl687 bool = l >= 0
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv690 := &x.ListMeta
		yym691 := z.DecBinary()
		_ = yym691
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv690) {
		} else {
			z.DecFallback(yyv690, false)
		}
	}
	yyj687++
	if yyhl687 {
		yyb687 = yyj687 > l
	} else {
		yyb687 = r.CheckBreak()
	}
	if yyb687 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv692 := &x.Items
		yym693 := z.DecBinary()
		_ = yym693
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv692), d)
		}
	}
	for {
		yyj687++
		if yyhl687 {
			yyb687 = yyj687 > l
		} else {
			yyb687 = r.CheckBreak()
		}
		if yyb687 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj687-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetUpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym694 := z.EncBinary()
		_ = yym694
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep695 := !z.EncBinary()
			yy2arr695 := z.EncBasicHandle().StructToArray
			var yyq695 [2]bool
			_, _, _ = yysep695, yyq695, yy2arr695
			const yyr695 bool = false
			yyq695[0] = x.Type != ""
			yyq695[1] = x.RollingUpdate != nil
			var yynn695 int
			if yyr695 || yy2arr695 {
				r.EncodeArrayStart(2)
			} else {
				yynn695 = 0
				for _, b := range yyq695 {
					if b {
						yynn695++
					}
				}
				r.EncodeMapStart(yynn695)
				yynn695 = 0
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq695[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq695[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq695[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr695 || yy2arr695 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetUpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym698 := z.DecBinary()
	_ = yym698
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct699 := r.ContainerType()
		if yyct699 == codecSelferValueTypeMap1234 {
			yyl699 := r.ReadMapStart()
			if yyl699 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl699, d)
			}
		} else if yyct699 == codecSelferValueTypeArray1234 {
			yyl699 := r.ReadArrayStart()
			if yyl699 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl699, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys700Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys700Slc
	var yyhl700 bool = l >= 0
	for yyj700 := 0; ; yyj700++ {
		if yyhl700 {
			if yyj700 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys700Slc = r.DecodeBytes(yys700Slc, true, true)
		yys700 := string(yys700Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys700 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDaemonSet)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys700)
		} // end switch yys700
	} // end for yyj700
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDaemonSet)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DaemonSetUpdateStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym706 := z.EncBinary()
	_ = yym706
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DaemonSetUpdateStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym707 := z.DecBinary()
	_ = yym707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym708 := z.EncBinary()
		_ = yym708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep709 := !z.EncBinary()
			yy2arr709 := z.EncBasicHandle().StructToArray
			var yyq709 [2]bool
			_, _, _ = yysep709, yyq709, yy2arr709
			const yyr709 bool = false
			yyq709[0] = true
			yyq709[1] = x.MinReadySeconds != 0
			var yynn709 int
			if yyr709 || yy2arr709 {
				r.EncodeArrayStart(2)
			} else {
				yynn709 = 0
				for _, b := range yyq709 {
					if b {
						yynn709++
					}
				}
				r.EncodeMapStart(yynn709)
				yynn709 = 0
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq709[0] {
					yy711 := &x.MaxUnavailable
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else if z.HasExtensions() && z.EncExt(yy711) {
					} else if !yym712 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy711)
					} else {
						z.EncFallback(yy711)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq709[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy713 := &x.MaxUnavailable
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else if z.HasExtensions() && z.EncExt(yy713) {
					} else if !yym714 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy713)
					} else {
						z.EncFallback(yy713)
					}
				}
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq709[1] {
					yym716 := z.EncBinary()
					_ = yym716
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq709[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym718 := z.DecBinary()
	_ = yym718
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct719 := r.ContainerType()
		if yyct719 == codecSelferValueTypeMap1234 {
			yyl719 := r.ReadMapStart()
			if yyl719 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl719, d)
			}
		} else if yyct719 == codecSelferValueTypeArray1234 {
			yyl719 := r.ReadArrayStart()
			if yyl719 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl719, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys720Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys720Slc
	var yyhl720 bool = l >= 0
	for yyj720 := 0; ; yyj720++ {
		if yyhl720 {
			if yyj720 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys720Slc = r.DecodeBytes(yys720Slc, true, true)
		yys720 := string(yys720Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys720 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv721 := &x.MaxUnavailable
				yym722 := z.DecBinary()
				_ = yym722
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv721) {
				} else if !yym722 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv721)
				} else {
					z.DecFallback(yyv721, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys720)
		} // end switch yys720
	} // end for yyj720
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj724 int
	var yyb724 bool
	var yyhl724 bool = l >= 0
	yyj724++
	if yyhl724 {
		yyb724 = yyj724 > l
	} else {
		yyb724 = r.CheckBreak()
	}
	if yyb724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv725 := &x.MaxUnavailable
		yym726 := z.DecBinary()
		_ = yym726
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv725) {
		} else if !yym726 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv725)
		} else {
			z.DecFallback(yyv725, false)
		}
	}
	yyj724++
	if yyhl724 {
		yyb724 = yyj724 > l
	} else {
		yyb724 = r.CheckBreak()
	}
	if yyb724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj724++
		if yyhl724 {
			yyb724 = yyj724 > l
		} else {
			yyb724 = r.CheckBreak()
		}
		if yyb724 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj724-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym728 := z.EncBinary()
		_ = yym728
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep729 := !z.EncBinary()
			yy2arr729 := z.EncBasicHandle().StructToArray
			var yyq729 [4]bool
			_, _, _ = yysep729, yyq729, yy2arr729
			const yyr729 bool = false
			yyq729[0] = x.Selector != nil
			yyq729[2] = true
			yyq729[3] = x.UniqueLabelKey != ""
			var yynn729 int
			if yyr729 || yy2arr729 {
				r.EncodeArrayStart(4)
			} else {
				yynn729 = 1
				for _, b := range yyq729 {
					if b {
						yynn729++
					}
				}
				r.EncodeMapStart(yynn729)
				yynn729 = 0
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq729[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy732 := &x.Template
				yy732.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy733 := &x.Template
				yy733.CodecEncodeSelf(e)
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[2] {
					yy735 := &x.UpdateStrategy
					yy735.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq729[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updateStrategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy736 := &x.UpdateStrategy
					yy736.CodecEncodeSelf(e)
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[3] {
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq729[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym740 := z.DecBinary()
	_ = yym740
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct741 := r.ContainerType()
		if yyct741 == codecSelferValueTypeMap1234 {
			yyl741 := r.ReadMapStart()
			if yyl741 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl741, d)
			}
		} else if yyct741 == codecSelferValueTypeArray1234 {
			yyl741 := r.ReadArrayStart()
			if yyl741 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl741, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys742Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys742Slc
	var yyhl742 bool = l >= 0
	for yyj742 := 0; ; yyj742++ {
		if yyhl742 {
			if yyj742 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys742Slc = r.DecodeBytes(yys742Slc, true, true)
		yys742 := string(yys742Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys742 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv744 := &x.Template
				yyv744.CodecDecodeSelf(d)
			}
		case "updateStrategy":
			if r.TryDecodeAsNil() {
				x.UpdateStrategy = DaemonSetUpdateStrategy{}
			} else {
				yyv745 := &x.UpdateStrategy
				yyv745.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys742)
		} // end switch yys742
	} // end for yyj742
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj747 int
	var yyb747 bool
	var yyhl747 bool = l >= 0
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv749 := &x.Template
		yyv749.CodecDecodeSelf(d)
	}
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdateStrategy = DaemonSetUpdateStrategy{}
	} else {
		yyv750 := &x.UpdateStrategy
		yyv750.CodecDecodeSelf(d)
	}
	yyj747++
	if yyhl747 {
		yyb747 = yyj747 > l
	} else {
		yyb747 = r.CheckBreak()
	}
	if yyb747 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj747++
		if yyhl747 {
			yyb747 = yyj747 > l
		} else {
			yyb747 = r.CheckBreak()
		}
		if yyb747 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj747-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym752 := z.EncBinary()
		_ = yym752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep753 := !z.EncBinary()
			yy2arr753 := z.EncBasicHandle().StructToArray
			var yyq753 [3]bool
			_, _, _ = yysep753, yyq753, yy2arr753
			const yyr753 bool = false
			var yynn753 int
			if yyr753 || yy2arr753 {
				r.EncodeArrayStart(3)
			} else {
				yynn753 = 3
				for _, b := range yyq753 {
					if b {
						yynn753++
					}
				}
				r.EncodeMapStart(yynn753)
				yynn753 = 0
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym755 := z.EncBinary()
				_ = yym755
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym758 := z.EncBinary()
				_ = yym758
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym761 := z.EncBinary()
				_ = yym761
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr753 || yy2arr753 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym763 := z.DecBinary()
	_ = yym763
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct764 := r.ContainerType()
		if yyct764 == codecSelferValueTypeMap1234 {
			yyl764 := r.ReadMapStart()
			if yyl764 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl764, d)
			}
		} else if yyct764 == codecSelferValueTypeArray1234 {
			yyl764 := r.ReadArrayStart()
			if yyl764 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl764, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys765Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys765Slc
	var yyhl765 bool = l >= 0
	for yyj765 := 0; ; yyj765++ {
		if yyhl765 {
			if yyj765 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys765Slc = r.DecodeBytes(yys765Slc, true, true)
		yys765 := string(yys765Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys765 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys765)
		} // end switch yys765
	} // end for yyj765
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj769 int
	var yyb769 bool
	var yyhl769 bool = l >= 0
	yyj769++
	if yyhl769 {
		yyb769 = yyj769 > l
	} else {
		yyb769 = r.CheckBreak()
	}
	if yyb769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj769++
	if yyhl769 {
		yyb769 = yyj769 > l
	} else {
		yyb769 = r.CheckBreak()
	}
	if yyb769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj769++
	if yyhl769 {
		yyb769 = yyj769 > l
	} else {
		yyb769 = r.CheckBreak()
	}
	if yyb769 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj769++
		if yyhl769 {
			yyb769 = yyj769 > l
		} else {
			yyb769 = r.CheckBreak()
		}
		if yyb769 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj769-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym773 := z.EncBinary()
		_ = yym773
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep774 := !z.EncBinary()
			yy2arr774 := z.EncBasicHandle().StructToArray
			var yyq774 [5]bool
			_, _, _ = yysep774, yyq774, yy2arr774
			const yyr774 bool = false
			yyq774[0] = x.Kind != ""
			yyq774[1] = x.APIVersion != ""
			yyq774[2] = true
			yyq774[3] = true
			yyq774[4] = true
			var yynn774 int
			if yyr774 || yy2arr774 {
				r.EncodeArrayStart(5)
			} else {
				yynn774 = 0
				for _, b := range yyq774 {
					if b {
						yynn774++
					}
				}
				r.EncodeMapStart(yynn774)
				yynn774 = 0
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq774[0] {
					yym776 := z.EncBinary()
					_ = yym776
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq774[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq774[1] {
					yym779 := z.EncBinary()
					_ = yym779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq774[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq774[2] {
					yy782 := &x.ObjectMeta
					yy782.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq774[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy783 := &x.ObjectMeta
					yy783.CodecEncodeSelf(e)
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq774[3] {
					yy785 := &x.Spec
					yy785.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq774[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy786 := &x.Spec
					yy786.CodecEncodeSelf(e)
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq774[4] {
					yy788 := &x.Status
					yy788.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq774[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy789 := &x.Status
					yy789.CodecEncodeSelf(e)
				}
			}
			if yyr774 || yy2arr774 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym790 := z.DecBinary()
	_ = yym790
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct791 := r.ContainerType()
		if yyct791 == codecSelferValueTypeMap1234 {
			yyl791 := r.ReadMapStart()
			if yyl791 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl791, d)
			}
		} else if yyct791 == codecSelferValueTypeArray1234 {
			yyl791 := r.ReadArrayStart()
			if yyl791 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl791, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys792Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys792Slc
	var yyhl792 bool = l >= 0
	for yyj792 := 0; ; yyj792++ {
		if yyhl792 {
			if yyj792 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys792Slc = r.DecodeBytes(yys792Slc, true, true)
		yys792 := string(yys792Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys792 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv795 := &x.ObjectMeta
				yyv795.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv796 := &x.Spec
				yyv796.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv797 := &x.Status
				yyv797.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys792)
		} // end switch yys792
	} // end for yyj792
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj798 int
	var yyb798 bool
	var yyhl798 bool = l >= 0
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv801 := &x.ObjectMeta
		yyv801.CodecDecodeSelf(d)
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv802 := &x.Spec
		yyv802.CodecDecodeSelf(d)
	}
	yyj798++
	if yyhl798 {
		yyb798 = yyj798 > l
	} else {
		yyb798 = r.CheckBreak()
	}
	if yyb798 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv803 := &x.Status
		yyv803.CodecDecodeSelf(d)
	}
	for {
		yyj798++
		if yyhl798 {
			yyb798 = yyj798 > l
		} else {
			yyb798 = r.CheckBreak()
		}
		if yyb798 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj798-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym804 := z.EncBinary()
		_ = yym804
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep805 := !z.EncBinary()
			yy2arr805 := z.EncBasicHandle().StructToArray
			var yyq805 [4]bool
			_, _, _ = yysep805, yyq805, yy2arr805
			const yyr805 bool = false
			yyq805[0] = x.Kind != ""
			yyq805[1] = x.APIVersion != ""
			yyq805[2] = true
			var yynn805 int
			if yyr805 || yy2arr805 {
				r.EncodeArrayStart(4)
			} else {
				yynn805 = 1
				for _, b := range yyq805 {
					if b {
						yynn805++
					}
				}
				r.EncodeMapStart(yynn805)
				yynn805 = 0
			}
			if yyr805 || yy2arr805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq805[0] {
					yym807 := z.EncBinary()
					_ = yym807
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq805[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym808 := z.EncBinary()
					_ = yym808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr805 || yy2arr805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq805[1] {
					yym810 := z.EncBinary()
					_ = yym810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq805[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym811 := z.EncBinary()
					_ = yym811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr805 || yy2arr805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq805[2] {
					yy813 := &x.ListMeta
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else if z.HasExtensions() && z.EncExt(yy813) {
					} else {
						z.EncFallback(yy813)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq805[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy815 := &x.ListMeta
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else if z.HasExtensions() && z.EncExt(yy815) {
					} else {
						z.EncFallback(yy815)
					}
				}
			}
			if yyr805 || yy2arr805 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym818 := z.EncBinary()
					_ = yym818
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr805 || yy2arr805 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym820 := z.DecBinary()
	_ = yym820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct821 := r.ContainerType()
		if yyct821 == codecSelferValueTypeMap1234 {
			yyl821 := r.ReadMapStart()
			if yyl821 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl821, d)
			}
		} else if yyct821 == codecSelferValueTypeArray1234 {
			yyl821 := r.ReadArrayStart()
			if yyl821 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl821, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys822Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys822Slc
	var yyhl822 bool = l >= 0
	for yyj822 := 0; ; yyj822++ {
		if yyhl822 {
			if yyj822 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys822Slc = r.DecodeBytes(yys822Slc, true, true)
		yys822 := string(yys822Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys822 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv825 := &x.ListMeta
				yym826 := z.DecBinary()
				_ = yym826
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv825) {
				} else {
					z.DecFallback(yyv825, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv827 := &x.Items
				yym828 := z.DecBinary()
				_ = yym828
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv827), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys822)
		} // end switch yys822
	} // end for yyj822
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj829 int
	var yyb829 bool
	var yyhl829 bool = l >= 0
	yyj829++
	if yyhl829 {
		yyb829 = yyj829 > l
	} else {
		yyb829 = r.CheckBreak()
	}
	if yyb829 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj829++
	if yyhl829 {
		yyb829 = yyj829 > l
	} else {
		yyb829 = r.CheckBreak()
	}
	if yyb829 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj829++
	if yyhl829 {
		yyb829 = yyj829 > l
	} else {
		yyb829 = r.CheckBreak()
	}
	if yyb829 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv832 := &x.ListMeta
		yym833 := z.DecBinary()
		_ = yym833
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv832) {
		} else {
			z.DecFallback(yyv832, false)
		}
	}
	yyj829++
	if yyhl829 {
		yyb829 = yyj829 > l
	} else {
		yyb829 = r.CheckBreak()
	}
	if yyb829 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv834 := &x.Items
		yym835 := z.DecBinary()
		_ = yym835
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv834), d)
		}
	}
	for {
		yyj829++
		if yyhl829 {
			yyb829 = yyj829 > l
		} else {
			yyb829 = r.CheckBreak()
		}
		if yyb829 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj829-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym836 := z.EncBinary()
		_ = yym836
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep837 := !z.EncBinary()
			yy2arr837 := z.EncBasicHandle().StructToArray
			var yyq837 [4]bool
			_, _, _ = yysep837, yyq837, yy2arr837
			const yyr837 bool = false
			yyq837[0] = x.Kind != ""
			yyq837[1] = x.APIVersion != ""
			yyq837[2] = true
			var yynn837 int
			if yyr837 || yy2arr837 {
				r.EncodeArrayStart(4)
			} else {
				yynn837 = 1
				for _, b := range yyq837 {
					if b {
						yynn837++
					}
				}
				r.EncodeMapStart(yynn837)
				yynn837 = 0
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq837[0] {
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq837[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq837[1] {
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq837[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq837[2] {
					yy845 := &x.ListMeta
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else if z.HasExtensions() && z.EncExt(yy845) {
					} else {
						z.EncFallback(yy845)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq837[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy847 := &x.ListMeta
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else if z.HasExtensions() && z.EncExt(yy847) {
					} else {
						z.EncFallback(yy847)
					}
				}
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym850 := z.EncBinary()
					_ = yym850
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr837 || yy2arr837 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym852 := z.DecBinary()
	_ = yym852
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct853 := r.ContainerType()
		if yyct853 == codecSelferValueTypeMap1234 {
			yyl853 := r.ReadMapStart()
			if yyl853 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl853, d)
			}
		} else if yyct853 == codecSelferValueTypeArray1234 {
			yyl853 := r.ReadArrayStart()
			if yyl853 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl853, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys854Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys854Slc
	var yyhl854 bool = l >= 0
	for yyj854 := 0; ; yyj854++ {
		if yyhl854 {
			if yyj854 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys854Slc = r.DecodeBytes(yys854Slc, true, true)
		yys854 := string(yys854Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys854 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv857 := &x.ListMeta
				yym858 := z.DecBinary()
				_ = yym858
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv857) {
				} else {
					z.DecFallback(yyv857, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv859 := &x.Items
				yym860 := z.DecBinary()
				_ = yym860
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv859), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys854)
		} // end switch yys854
	} // end for yyj854
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj861 int
	var yyb861 bool
	var yyhl861 bool = l >= 0
	yyj861++
	if yyhl861 {
		yyb861 = yyj861 > l
	} else {
		yyb861 = r.CheckBreak()
	}
	if yyb861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj861++
	if yyhl861 {
		yyb861 = yyj861 > l
	} else {
		yyb861 = r.CheckBreak()
	}
	if yyb861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj861++
	if yyhl861 {
		yyb861 = yyj861 > l
	} else {
		yyb861 = r.CheckBreak()
	}
	if yyb861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv864 := &x.ListMeta
		yym865 := z.DecBinary()
		_ = yym865
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv864) {
		} else {
			z.DecFallback(yyv864, false)
		}
	}
	yyj861++
	if yyhl861 {
		yyb861 = yyj861 > l
	} else {
		yyb861 = r.CheckBreak()
	}
	if yyb861 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv866 := &x.Items
		yym867 := z.DecBinary()
		_ = yym867
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv866), d)
		}
	}
	for {
		yyj861++
		if yyhl861 {
			yyb861 = yyj861 > l
		} else {
			yyb861 = r.CheckBreak()
		}
		if yyb861 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj861-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym868 := z.EncBinary()
		_ = yym868
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep869 := !z.EncBinary()
			yy2arr869 := z.EncBasicHandle().StructToArray
			var yyq869 [5]bool
			_, _, _ = yysep869, yyq869, yy2arr869
			const yyr869 bool = false
			yyq869[0] = x.Kind != ""
			yyq869[1] = x.APIVersion != ""
			yyq869[2] = true
			yyq869[3] = true
			yyq869[4] = true
			var yynn869 int
			if yyr869 || yy2arr869 {
				r.EncodeArrayStart(5)
			} else {
				yynn869 = 0
				for _, b := range yyq869 {
					if b {
						yynn869++
					}
				}
				r.EncodeMapStart(yynn869)
				yynn869 = 0
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[0] {
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq869[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[1] {
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq869[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym875 := z.EncBinary()
					_ = yym875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[2] {
					yy877 := &x.ObjectMeta
					yy877.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq869[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy878 := &x.ObjectMeta
					yy878.CodecEncodeSelf(e)
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[3] {
					yy880 := &x.Spec
					yy880.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq869[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy881 := &x.Spec
					yy881.CodecEncodeSelf(e)
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq869[4] {
					yy883 := &x.Status
					yy883.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq869[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy884 := &x.Status
					yy884.CodecEncodeSelf(e)
				}
			}
			if yyr869 || yy2arr869 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym885 := z.DecBinary()
	_ = yym885
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct886 := r.ContainerType()
		if yyct886 == codecSelferValueTypeMap1234 {
			yyl886 := r.ReadMapStart()
			if yyl886 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl886, d)
			}
		} else if yyct886 == codecSelferValueTypeArray1234 {
			yyl886 := r.ReadArrayStart()
			if yyl886 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl886, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys887Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys887Slc
	var yyhl887 bool = l >= 0
	for yyj887 := 0; ; yyj887++ {
		if yyhl887 {
			if yyj887 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys887Slc = r.DecodeBytes(yys887Slc, true, true)
		yys887 := string(yys887Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys887 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv890 := &x.ObjectMeta
				yyv890.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv891 := &x.Spec
				yyv891.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv892 := &x.Status
				yyv892.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys887)
		} // end switch yys887
	} // end for yyj887
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj893 int
	var yyb893 bool
	var yyhl893 bool = l >= 0
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv896 := &x.ObjectMeta
		yyv896.CodecDecodeSelf(d)
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv897 := &x.Spec
		yyv897.CodecDecodeSelf(d)
	}
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv898 := &x.Status
		yyv898.CodecDecodeSelf(d)
	}
	for {
		yyj893++
		if yyhl893 {
			yyb893 = yyj893 > l
		} else {
			yyb893 = r.CheckBreak()
		}
		if yyb893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym899 := z.EncBinary()
		_ = yym899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep900 := !z.EncBinary()
			yy2arr900 := z.EncBasicHandle().StructToArray
			var yyq900 [4]bool
			_, _, _ = yysep900, yyq900, yy2arr900
			const yyr900 bool = false
			yyq900[0] = x.Kind != ""
			yyq900[1] = x.APIVersion != ""
			yyq900[2] = true
			var yynn900 int
			if yyr900 || yy2arr900 {
				r.EncodeArrayStart(4)
			} else {
				yynn900 = 1
				for _, b := range yyq900 {
					if b {
						yynn900++
					}
				}
				r.EncodeMapStart(yynn900)
				yynn900 = 0
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[0] {
					yym902 := z.EncBinary()
					_ = yym902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym903 := z.EncBinary()
					_ = yym903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[1] {
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq900[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq900[2] {
					yy908 := &x.ListMeta
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else if z.HasExtensions() && z.EncExt(yy908) {
					} else {
						z.EncFallback(yy908)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq900[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy910 := &x.ListMeta
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else if z.HasExtensions() && z.EncExt(yy910) {
					} else {
						z.EncFallback(yy910)
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym913 := z.EncBinary()
					_ = yym913
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym914 := z.EncBinary()
					_ = yym914
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr900 || yy2arr900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym915 := z.DecBinary()
	_ = yym915
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct916 := r.ContainerType()
		if yyct916 == codecSelferValueTypeMap1234 {
			yyl916 := r.ReadMapStart()
			if yyl916 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl916, d)
			}
		} else if yyct916 == codecSelferValueTypeArray1234 {
			yyl916 := r.ReadArrayStart()
			if yyl916 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl916, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys917Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys917Slc
	var yyhl917 bool = l >= 0
	for yyj917 := 0; ; yyj917++ {
		if yyhl917 {
			if yyj917 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys917Slc = r.DecodeBytes(yys917Slc, true, true)
		yys917 := string(yys917Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys917 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv920 := &x.ListMeta
				yym921 := z.DecBinary()
				_ = yym921
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv920) {
				} else {
					z.DecFallback(yyv920, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv922 := &x.Items
				yym923 := z.DecBinary()
				_ = yym923
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv922), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys917)
		} // end switch yys917
	} // end for yyj917
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj924 int
	var yyb924 bool
	var yyhl924 bool = l >= 0
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv927 := &x.ListMeta
		yym928 := z.DecBinary()
		_ = yym928
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv927) {
		} else {
			z.DecFallback(yyv927, false)
		}
	}
	yyj924++
	if yyhl924 {
		yyb924 = yyj924 > l
	} else {
		yyb924 = r.CheckBreak()
	}
	if yyb924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv929 := &x.Items
		yym930 := z.DecBinary()
		_ = yym930
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv929), d)
		}
	}
	for {
		yyj924++
		if yyhl924 {
			yyb924 = yyj924 > l
		} else {
			yyb924 = r.CheckBreak()
		}
		if yyb924 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj924-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym931 := z.EncBinary()
		_ = yym931
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep932 := !z.EncBinary()
			yy2arr932 := z.EncBasicHandle().StructToArray
			var yyq932 [5]bool
			_, _, _ = yysep932, yyq932, yy2arr932
			const yyr932 bool = false
			yyq932[0] = x.Parallelism != nil
			yyq932[1] = x.Completions != nil
			yyq932[2] = x.ActiveDeadlineSeconds != nil
			yyq932[3] = x.Selector != nil
			var yynn932 int
			if yyr932 || yy2arr932 {
				r.EncodeArrayStart(5)
			} else {
				yynn932 = 1
				for _, b := range yyq932 {
					if b {
						yynn932++
					}
				}
				r.EncodeMapStart(yynn932)
				yynn932 = 0
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy934 := *x.Parallelism
						yym935 := z.EncBinary()
						_ = yym935
						if false {
						} else {
							r.EncodeInt(int64(yy934))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq932[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy936 := *x.Parallelism
						yym937 := z.EncBinary()
						_ = yym937
						if false {
						} else {
							r.EncodeInt(int64(yy936))
						}
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy939 := *x.Completions
						yym940 := z.EncBinary()
						_ = yym940
						if false {
						} else {
							r.EncodeInt(int64(yy939))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq932[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy941 := *x.Completions
						yym942 := z.EncBinary()
						_ = yym942
						if false {
						} else {
							r.EncodeInt(int64(yy941))
						}
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy944 := *x.ActiveDeadlineSeconds
						yym945 := z.EncBinary()
						_ = yym945
						if false {
						} else {
							r.EncodeInt(int64(yy944))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq932[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy946 := *x.ActiveDeadlineSeconds
						yym947 := z.EncBinary()
						_ = yym947
						if false {
						} else {
							r.EncodeInt(int64(yy946))
						}
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq932[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy950 := &x.Template
				yy950.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy951 := &x.Template
				yy951.CodecEncodeSelf(e)
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym952 := z.DecBinary()
	_ = yym952
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct953 := r.ContainerType()
		if yyct953 == codecSelferValueTypeMap1234 {
			yyl953 := r.ReadMapStart()
			if yyl953 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl953, d)
			}
		} else if yyct953 == codecSelferValueTypeArray1234 {
			yyl953 := r.ReadArrayStart()
			if yyl953 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl953, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys954Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys954Slc
	var yyhl954 bool = l >= 0
	for yyj954 := 0; ; yyj954++ {
		if yyhl954 {
			if yyj954 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys954Slc = r.DecodeBytes(yys954Slc, true, true)
		yys954 := string(yys954Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys954 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym956 := z.DecBinary()
				_ = yym956
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym958 := z.DecBinary()
				_ = yym958
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym960 := z.DecBinary()
				_ = yym960
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv962 := &x.Template
				yyv962.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys954)
		} // end switch yys954
	} // end for yyj954
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj963 int
	var yyb963 bool
	var yyhl963 bool = l >= 0
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym965 := z.DecBinary()
		_ = yym965
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym969 := z.DecBinary()
		_ = yym969
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv971 := &x.Template
		yyv971.CodecDecodeSelf(d)
	}
	for {
		yyj963++
		if yyhl963 {
			yyb963 = yyj963 > l
		} else {
			yyb963 = r.CheckBreak()
		}
		if yyb963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym972 := z.EncBinary()
		_ = yym972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep973 := !z.EncBinary()
			yy2arr973 := z.EncBasicHandle().StructToArray
			var yyq973 [6]bool
			_, _, _ = yysep973, yyq973, yy2arr973
			const yyr973 bool = false
			yyq973[0] = len(x.Conditions) != 0
			yyq973[1] = x.StartTime != nil
			yyq973[2] = x.CompletionTime != nil
			yyq973[3] = x.Active != 0
			yyq973[4] = x.Succeeded != 0
			yyq973[5] = x.Failed != 0
			var yynn973 int
			if yyr973 || yy2arr973 {
				r.EncodeArrayStart(6)
			} else {
				yynn973 = 0
				for _, b := range yyq973 {
					if b {
						yynn973++
					}
				}
				r.EncodeMapStart(yynn973)
				yynn973 = 0
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym975 := z.EncBinary()
						_ = yym975
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq973[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym976 := z.EncBinary()
						_ = yym976
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym978 := z.EncBinary()
						_ = yym978
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym978 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym978 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq973[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym979 := z.EncBinary()
						_ = yym979
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym979 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym979 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym981 := z.EncBinary()
						_ = yym981
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym981 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym981 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq973[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym982 := z.EncBinary()
						_ = yym982
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym982 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym982 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[3] {
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq973[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[4] {
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq973[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym988 := z.EncBinary()
					_ = yym988
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[5] {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq973[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym992 := z.DecBinary()
	_ = yym992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct993 := r.ContainerType()
		if yyct993 == codecSelferValueTypeMap1234 {
			yyl993 := r.ReadMapStart()
			if yyl993 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl993, d)
			}
		} else if yyct993 == codecSelferValueTypeArray1234 {
			yyl993 := r.ReadArrayStart()
			if yyl993 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl993, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys994Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys994Slc
	var yyhl994 bool = l >= 0
	for yyj994 := 0; ; yyj994++ {
		if yyhl994 {
			if yyj994 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys994Slc = r.DecodeBytes(yys994Slc, true, true)
		yys994 := string(yys994Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys994 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv995 := &x.Conditions
				yym996 := z.DecBinary()
				_ = yym996
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv995), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym998 := z.DecBinary()
				_ = yym998
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym998 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym998 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym1000 := z.DecBinary()
				_ = yym1000
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym1000 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym1000 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys994)
		} // end switch yys994
	} // end for yyj994
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1004 int
	var yyb1004 bool
	var yyhl1004 bool = l >= 0
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1005 := &x.Conditions
		yym1006 := z.DecBinary()
		_ = yym1006
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv1005), d)
		}
	}
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym1008 := z.DecBinary()
		_ = yym1008
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1008 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1008 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym1010 := z.DecBinary()
		_ = yym1010
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym1010 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym1010 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1004++
		if yyhl1004 {
			yyb1004 = yyj1004 > l
		} else {
			yyb1004 = r.CheckBreak()
		}
		if yyb1004 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1004-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1014 := z.EncBinary()
	_ = yym1014
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1015 := z.DecBinary()
	_ = yym1015
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1016 := z.EncBinary()
		_ = yym1016
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1017 := !z.EncBinary()
			yy2arr1017 := z.EncBasicHandle().StructToArray
			var yyq1017 [6]bool
			_, _, _ = yysep1017, yyq1017, yy2arr1017
			const yyr1017 bool = false
			yyq1017[2] = true
			yyq1017[3] = true
			yyq1017[4] = x.Reason != ""
			yyq1017[5] = x.Message != ""
			var yynn1017 int
			if yyr1017 || yy2arr1017 {
				r.EncodeArrayStart(6)
			} else {
				yynn1017 = 2
				for _, b := range yyq1017 {
					if b {
						yynn1017++
					}
				}
				r.EncodeMapStart(yynn1017)
				yynn1017 = 0
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1020 := z.EncBinary()
				_ = yym1020
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1021 := z.EncBinary()
				_ = yym1021
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1017[2] {
					yy1023 := &x.LastProbeTime
					yym1024 := z.EncBinary()
					_ = yym1024
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1023) {
					} else if yym1024 {
						z.EncBinaryMarshal(yy1023)
					} else if !yym1024 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1023)
					} else {
						z.EncFallback(yy1023)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1017[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1025 := &x.LastProbeTime
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1025) {
					} else if yym1026 {
						z.EncBinaryMarshal(yy1025)
					} else if !yym1026 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1025)
					} else {
						z.EncFallback(yy1025)
					}
				}
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1017[3] {
					yy1028 := &x.LastTransitionTime
					yym1029 := z.EncBinary()
					_ = yym1029
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1028) {
					} else if yym1029 {
						z.EncBinaryMarshal(yy1028)
					} else if !yym1029 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1028)
					} else {
						z.EncFallback(yy1028)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1017[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1030 := &x.LastTransitionTime
					yym1031 := z.EncBinary()
					_ = yym1031
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1030) {
					} else if yym1031 {
						z.EncBinaryMarshal(yy1030)
					} else if !yym1031 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1030)
					} else {
						z.EncFallback(yy1030)
					}
				}
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1017[4] {
					yym1033 := z.EncBinary()
					_ = yym1033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1017[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1034 := z.EncBinary()
					_ = yym1034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1017[5] {
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1017[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1037 := z.EncBinary()
					_ = yym1037
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1038 := z.DecBinary()
	_ = yym1038
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1039 := r.ContainerType()
		if yyct1039 == codecSelferValueTypeMap1234 {
			yyl1039 := r.ReadMapStart()
			if yyl1039 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1039, d)
			}
		} else if yyct1039 == codecSelferValueTypeArray1234 {
			yyl1039 := r.ReadArrayStart()
			if yyl1039 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1039, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1040Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1040Slc
	var yyhl1040 bool = l >= 0
	for yyj1040 := 0; ; yyj1040++ {
		if yyhl1040 {
			if yyj1040 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1040Slc = r.DecodeBytes(yys1040Slc, true, true)
		yys1040 := string(yys1040Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1040 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1043 := &x.LastProbeTime
				yym1044 := z.DecBinary()
				_ = yym1044
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1043) {
				} else if yym1044 {
					z.DecBinaryUnmarshal(yyv1043)
				} else if !yym1044 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1043)
				} else {
					z.DecFallback(yyv1043, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1045 := &x.LastTransitionTime
				yym1046 := z.DecBinary()
				_ = yym1046
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1045) {
				} else if yym1046 {
					z.DecBinaryUnmarshal(yyv1045)
				} else if !yym1046 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1045)
				} else {
					z.DecFallback(yyv1045, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1040)
		} // end switch yys1040
	} // end for yyj1040
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1049 int
	var yyb1049 bool
	var yyhl1049 bool = l >= 0
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1052 := &x.LastProbeTime
		yym1053 := z.DecBinary()
		_ = yym1053
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1052) {
		} else if yym1053 {
			z.DecBinaryUnmarshal(yyv1052)
		} else if !yym1053 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1052)
		} else {
			z.DecFallback(yyv1052, false)
		}
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1054 := &x.LastTransitionTime
		yym1055 := z.DecBinary()
		_ = yym1055
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1054) {
		} else if yym1055 {
			z.DecBinaryUnmarshal(yyv1054)
		} else if !yym1055 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1054)
		} else {
			z.DecFallback(yyv1054, false)
		}
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1049++
		if yyhl1049 {
			yyb1049 = yyj1049 > l
		} else {
			yyb1049 = r.CheckBreak()
		}
		if yyb1049 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1049-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1058 := z.EncBinary()
		_ = yym1058
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1059 := !z.EncBinary()
			yy2arr1059 := z.EncBasicHandle().StructToArray
			var yyq1059 [5]bool
			_, _, _ = yysep1059, yyq1059, yy2arr1059
			const yyr1059 bool = false
			yyq1059[0] = x.Kind != ""
			yyq1059[1] = x.APIVersion != ""
			yyq1059[2] = true
			yyq1059[3] = true
			yyq1059[4] = true
			var yynn1059 int
			if yyr1059 || yy2arr1059 {
				r.EncodeArrayStart(5)
			} else {
				yynn1059 = 0
				for _, b := range yyq1059 {
					if b {
						yynn1059++
					}
				}
				r.EncodeMapStart(yynn1059)
				yynn1059 = 0
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1059[0] {
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1059[1] {
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1059[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1059[2] {
					yy1067 := &x.ObjectMeta
					yy1067.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1068 := &x.ObjectMeta
					yy1068.CodecEncodeSelf(e)
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1059[3] {
					yy1070 := &x.Spec
					yy1070.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1071 := &x.Spec
					yy1071.CodecEncodeSelf(e)
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1059[4] {
					yy1073 := &x.Status
					yy1073.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1059[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1074 := &x.Status
					yy1074.CodecEncodeSelf(e)
				}
			}
			if yyr1059 || yy2arr1059 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1075 := z.DecBinary()
	_ = yym1075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1076 := r.ContainerType()
		if yyct1076 == codecSelferValueTypeMap1234 {
			yyl1076 := r.ReadMapStart()
			if yyl1076 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1076, d)
			}
		} else if yyct1076 == codecSelferValueTypeArray1234 {
			yyl1076 := r.ReadArrayStart()
			if yyl1076 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1077Slc
	var yyhl1077 bool = l >= 0
	for yyj1077 := 0; ; yyj1077++ {
		if yyhl1077 {
			if yyj1077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1077Slc = r.DecodeBytes(yys1077Slc, true, true)
		yys1077 := string(yys1077Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1077 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1080 := &x.ObjectMeta
				yyv1080.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv1081 := &x.Spec
				yyv1081.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv1082 := &x.Status
				yyv1082.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1077)
		} // end switch yys1077
	} // end for yyj1077
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1083 int
	var yyb1083 bool
	var yyhl1083 bool = l >= 0
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1086 := &x.ObjectMeta
		yyv1086.CodecDecodeSelf(d)
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv1087 := &x.Spec
		yyv1087.CodecDecodeSelf(d)
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv1088 := &x.Status
		yyv1088.CodecDecodeSelf(d)
	}
	for {
		yyj1083++
		if yyhl1083 {
			yyb1083 = yyj1083 > l
		} else {
			yyb1083 = r.CheckBreak()
		}
		if yyb1083 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1083-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1089 := z.EncBinary()
		_ = yym1089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1090 := !z.EncBinary()
			yy2arr1090 := z.EncBasicHandle().StructToArray
			var yyq1090 [4]bool
			_, _, _ = yysep1090, yyq1090, yy2arr1090
			const yyr1090 bool = false
			yyq1090[0] = x.Kind != ""
			yyq1090[1] = x.APIVersion != ""
			yyq1090[2] = true
			var yynn1090 int
			if yyr1090 || yy2arr1090 {
				r.EncodeArrayStart(4)
			} else {
				yynn1090 = 1
				for _, b := range yyq1090 {
					if b {
						yynn1090++
					}
				}
				r.EncodeMapStart(yynn1090)
				yynn1090 = 0
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1090[0] {
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1090[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1093 := z.EncBinary()
					_ = yym1093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1090[1] {
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1090[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1090[2] {
					yy1098 := &x.ListMeta
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1098) {
					} else {
						z.EncFallback(yy1098)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1090[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1100 := &x.ListMeta
					yym1101 := z.EncBinary()
					_ = yym1101
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1100) {
					} else {
						z.EncFallback(yy1100)
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1103 := z.EncBinary()
					_ = yym1103
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1105 := z.DecBinary()
	_ = yym1105
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1106 := r.ContainerType()
		if yyct1106 == codecSelferValueTypeMap1234 {
			yyl1106 := r.ReadMapStart()
			if yyl1106 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1106, d)
			}
		} else if yyct1106 == codecSelferValueTypeArray1234 {
			yyl1106 := r.ReadArrayStart()
			if yyl1106 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1106, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1107Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1107Slc
	var yyhl1107 bool = l >= 0
	for yyj1107 := 0; ; yyj1107++ {
		if yyhl1107 {
			if yyj1107 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1107Slc = r.DecodeBytes(yys1107Slc, true, true)
		yys1107 := string(yys1107Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1107 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1110 := &x.ListMeta
				yym1111 := z.DecBinary()
				_ = yym1111
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1110) {
				} else {
					z.DecFallback(yyv1110, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1112 := &x.Items
				yym1113 := z.DecBinary()
				_ = yym1113
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv1112), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1107)
		} // end switch yys1107
	} // end for yyj1107
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1114 int
	var yyb1114 bool
	var yyhl1114 bool = l >= 0
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1117 := &x.ListMeta
		yym1118 := z.DecBinary()
		_ = yym1118
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1117) {
		} else {
			z.DecFallback(yyv1117, false)
		}
	}
	yyj1114++
	if yyhl1114 {
		yyb1114 = yyj1114 > l
	} else {
		yyb1114 = r.CheckBreak()
	}
	if yyb1114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1119 := &x.Items
		yym1120 := z.DecBinary()
		_ = yym1120
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv1119), d)
		}
	}
	for {
		yyj1114++
		if yyhl1114 {
			yyb1114 = yyj1114 > l
		} else {
			yyb1114 = r.CheckBreak()
		}
		if yyb1114 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1114-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1121 := z.EncBinary()
		_ = yym1121
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1122 := !z.EncBinary()
			yy2arr1122 := z.EncBasicHandle().StructToArray
			var yyq1122 [2]bool
			_, _, _ = yysep1122, yyq1122, yy2arr1122
			const yyr1122 bool = false
			yyq1122[0] = x.Backend != nil
			yyq1122[1] = len(x.Rules) != 0
			var yynn1122 int
			if yyr1122 || yy2arr1122 {
				r.EncodeArrayStart(2)
			} else {
				yynn1122 = 0
				for _, b := range yyq1122 {
					if b {
						yynn1122++
					}
				}
				r.EncodeMapStart(yynn1122)
				yynn1122 = 0
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1125 := z.EncBinary()
						_ = yym1125
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1122[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1126 := z.EncBinary()
						_ = yym1126
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1127 := z.DecBinary()
	_ = yym1127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1128 := r.ContainerType()
		if yyct1128 == codecSelferValueTypeMap1234 {
			yyl1128 := r.ReadMapStart()
			if yyl1128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1128, d)
			}
		} else if yyct1128 == codecSelferValueTypeArray1234 {
			yyl1128 := r.ReadArrayStart()
			if yyl1128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1129Slc
	var yyhl1129 bool = l >= 0
	for yyj1129 := 0; ; yyj1129++ {
		if yyhl1129 {
			if yyj1129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1129Slc = r.DecodeBytes(yys1129Slc, true, true)
		yys1129 := string(yys1129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1129 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv1131 := &x.Rules
				yym1132 := z.DecBinary()
				_ = yym1132
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv1131), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1129)
		} // end switch yys1129
	} // end for yyj1129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1133 int
	var yyb1133 bool
	var yyhl1133 bool = l >= 0
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj1133++
	if yyhl1133 {
		yyb1133 = yyj1133 > l
	} else {
		yyb1133 = r.CheckBreak()
	}
	if yyb1133 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv1135 := &x.Rules
		yym1136 := z.DecBinary()
		_ = yym1136
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv1135), d)
		}
	}
	for {
		yyj1133++
		if yyhl1133 {
			yyb1133 = yyj1133 > l
		} else {
			yyb1133 = r.CheckBreak()
		}
		if yyb1133 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1133-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1137 := z.EncBinary()
		_ = yym1137
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1138 := !z.EncBinary()
			yy2arr1138 := z.EncBasicHandle().StructToArray
			var yyq1138 [1]bool
			_, _, _ = yysep1138, yyq1138, yy2arr1138
			const yyr1138 bool = false
			yyq1138[0] = true
			var yynn1138 int
			if yyr1138 || yy2arr1138 {
				r.EncodeArrayStart(1)
			} else {
				yynn1138 = 0
				for _, b := range yyq1138 {
					if b {
						yynn1138++
					}
				}
				r.EncodeMapStart(yynn1138)
				yynn1138 = 0
			}
			if yyr1138 || yy2arr1138 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1138[0] {
					yy1140 := &x.LoadBalancer
					yy1140.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1138[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1141 := &x.LoadBalancer
					yy1141.CodecEncodeSelf(e)
				}
			}
			if yyr1138 || yy2arr1138 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1142 := z.DecBinary()
	_ = yym1142
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1143 := r.ContainerType()
		if yyct1143 == codecSelferValueTypeMap1234 {
			yyl1143 := r.ReadMapStart()
			if yyl1143 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1143, d)
			}
		} else if yyct1143 == codecSelferValueTypeArray1234 {
			yyl1143 := r.ReadArrayStart()
			if yyl1143 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1143, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1144Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1144Slc
	var yyhl1144 bool = l >= 0
	for yyj1144 := 0; ; yyj1144++ {
		if yyhl1144 {
			if yyj1144 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1144Slc = r.DecodeBytes(yys1144Slc, true, true)
		yys1144 := string(yys1144Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1144 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv1145 := &x.LoadBalancer
				yyv1145.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1144)
		} // end switch yys1144
	} // end for yyj1144
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1146 int
	var yyb1146 bool
	var yyhl1146 bool = l >= 0
	yyj1146++
	if yyhl1146 {
		yyb1146 = yyj1146 > l
	} else {
		yyb1146 = r.CheckBreak()
	}
	if yyb1146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv1147 := &x.LoadBalancer
		yyv1147.CodecDecodeSelf(d)
	}
	for {
		yyj1146++
		if yyhl1146 {
			yyb1146 = yyj1146 > l
		} else {
			yyb1146 = r.CheckBreak()
		}
		if yyb1146 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1146-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1148 := z.EncBinary()
		_ = yym1148
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1149 := !z.EncBinary()
			yy2arr1149 := z.EncBasicHandle().StructToArray
			var yyq1149 [2]bool
			_, _, _ = yysep1149, yyq1149, yy2arr1149
			const yyr1149 bool = false
			yyq1149[0] = x.Host != ""
			yyq1149[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1149 int
			if yyr1149 || yy2arr1149 {
				r.EncodeArrayStart(2)
			} else {
				yynn1149 = 0
				for _, b := range yyq1149 {
					if b {
						yynn1149++
					}
				}
				r.EncodeMapStart(yynn1149)
				yynn1149 = 0
			}
			if yyr1149 || yy2arr1149 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1149[0] {
					yym1151 := z.EncBinary()
					_ = yym1151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1149[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1152 := z.EncBinary()
					_ = yym1152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1153 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1153 = true
				goto LABEL1153
			}
		LABEL1153:
			if yyr1149 || yy2arr1149 {
				if yyn1153 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1149[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1149[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1153 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1149 || yy2arr1149 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1154 := z.DecBinary()
	_ = yym1154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1155 := r.ContainerType()
		if yyct1155 == codecSelferValueTypeMap1234 {
			yyl1155 := r.ReadMapStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1155, d)
			}
		} else if yyct1155 == codecSelferValueTypeArray1234 {
			yyl1155 := r.ReadArrayStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1155, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1156Slc
	var yyhl1156 bool = l >= 0
	for yyj1156 := 0; ; yyj1156++ {
		if yyhl1156 {
			if yyj1156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1156Slc = r.DecodeBytes(yys1156Slc, true, true)
		yys1156 := string(yys1156Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1156 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1156)
		} // end switch yys1156
	} // end for yyj1156
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1159 int
	var yyb1159 bool
	var yyhl1159 bool = l >= 0
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1159++
	if yyhl1159 {
		yyb1159 = yyj1159 > l
	} else {
		yyb1159 = r.CheckBreak()
	}
	if yyb1159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1159++
		if yyhl1159 {
			yyb1159 = yyj1159 > l
		} else {
			yyb1159 = r.CheckBreak()
		}
		if yyb1159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1162 := z.EncBinary()
		_ = yym1162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1163 := !z.EncBinary()
			yy2arr1163 := z.EncBasicHandle().StructToArray
			var yyq1163 [1]bool
			_, _, _ = yysep1163, yyq1163, yy2arr1163
			const yyr1163 bool = false
			yyq1163[0] = x.HTTP != nil
			var yynn1163 int
			if yyr1163 || yy2arr1163 {
				r.EncodeArrayStart(1)
			} else {
				yynn1163 = 0
				for _, b := range yyq1163 {
					if b {
						yynn1163++
					}
				}
				r.EncodeMapStart(yynn1163)
				yynn1163 = 0
			}
			if yyr1163 || yy2arr1163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1163[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1163[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1163 || yy2arr1163 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1165 := z.DecBinary()
	_ = yym1165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1166 := r.ContainerType()
		if yyct1166 == codecSelferValueTypeMap1234 {
			yyl1166 := r.ReadMapStart()
			if yyl1166 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1166, d)
			}
		} else if yyct1166 == codecSelferValueTypeArray1234 {
			yyl1166 := r.ReadArrayStart()
			if yyl1166 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1166, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1167Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1167Slc
	var yyhl1167 bool = l >= 0
	for yyj1167 := 0; ; yyj1167++ {
		if yyhl1167 {
			if yyj1167 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1167Slc = r.DecodeBytes(yys1167Slc, true, true)
		yys1167 := string(yys1167Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1167 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1167)
		} // end switch yys1167
	} // end for yyj1167
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1169 int
	var yyb1169 bool
	var yyhl1169 bool = l >= 0
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1169++
		if yyhl1169 {
			yyb1169 = yyj1169 > l
		} else {
			yyb1169 = r.CheckBreak()
		}
		if yyb1169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1171 := z.EncBinary()
		_ = yym1171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1172 := !z.EncBinary()
			yy2arr1172 := z.EncBasicHandle().StructToArray
			var yyq1172 [1]bool
			_, _, _ = yysep1172, yyq1172, yy2arr1172
			const yyr1172 bool = false
			var yynn1172 int
			if yyr1172 || yy2arr1172 {
				r.EncodeArrayStart(1)
			} else {
				yynn1172 = 1
				for _, b := range yyq1172 {
					if b {
						yynn1172++
					}
				}
				r.EncodeMapStart(yynn1172)
				yynn1172 = 0
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1174 := z.EncBinary()
					_ = yym1174
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1175 := z.EncBinary()
					_ = yym1175
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1172 || yy2arr1172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1176 := z.DecBinary()
	_ = yym1176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1177 := r.ContainerType()
		if yyct1177 == codecSelferValueTypeMap1234 {
			yyl1177 := r.ReadMapStart()
			if yyl1177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1177, d)
			}
		} else if yyct1177 == codecSelferValueTypeArray1234 {
			yyl1177 := r.ReadArrayStart()
			if yyl1177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1178Slc
	var yyhl1178 bool = l >= 0
	for yyj1178 := 0; ; yyj1178++ {
		if yyhl1178 {
			if yyj1178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1178Slc = r.DecodeBytes(yys1178Slc, true, true)
		yys1178 := string(yys1178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1178 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1179 := &x.Paths
				yym1180 := z.DecBinary()
				_ = yym1180
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1179), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1178)
		} // end switch yys1178
	} // end for yyj1178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1181 int
	var yyb1181 bool
	var yyhl1181 bool = l >= 0
	yyj1181++
	if yyhl1181 {
		yyb1181 = yyj1181 > l
	} else {
		yyb1181 = r.CheckBreak()
	}
	if yyb1181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1182 := &x.Paths
		yym1183 := z.DecBinary()
		_ = yym1183
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1182), d)
		}
	}
	for {
		yyj1181++
		if yyhl1181 {
			yyb1181 = yyj1181 > l
		} else {
			yyb1181 = r.CheckBreak()
		}
		if yyb1181 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1181-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1184 := z.EncBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1185 := !z.EncBinary()
			yy2arr1185 := z.EncBasicHandle().StructToArray
			var yyq1185 [2]bool
			_, _, _ = yysep1185, yyq1185, yy2arr1185
			const yyr1185 bool = false
			yyq1185[0] = x.Path != ""
			var yynn1185 int
			if yyr1185 || yy2arr1185 {
				r.EncodeArrayStart(2)
			} else {
				yynn1185 = 1
				for _, b := range yyq1185 {
					if b {
						yynn1185++
					}
				}
				r.EncodeMapStart(yynn1185)
				yynn1185 = 0
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1185[0] {
					yym1187 := z.EncBinary()
					_ = yym1187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1185[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1190 := &x.Backend
				yy1190.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1191 := &x.Backend
				yy1191.CodecEncodeSelf(e)
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1192 := z.DecBinary()
	_ = yym1192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1193 := r.ContainerType()
		if yyct1193 == codecSelferValueTypeMap1234 {
			yyl1193 := r.ReadMapStart()
			if yyl1193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1193, d)
			}
		} else if yyct1193 == codecSelferValueTypeArray1234 {
			yyl1193 := r.ReadArrayStart()
			if yyl1193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1194Slc
	var yyhl1194 bool = l >= 0
	for yyj1194 := 0; ; yyj1194++ {
		if yyhl1194 {
			if yyj1194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1194Slc = r.DecodeBytes(yys1194Slc, true, true)
		yys1194 := string(yys1194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1194 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1196 := &x.Backend
				yyv1196.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1194)
		} // end switch yys1194
	} // end for yyj1194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1197 int
	var yyb1197 bool
	var yyhl1197 bool = l >= 0
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1199 := &x.Backend
		yyv1199.CodecDecodeSelf(d)
	}
	for {
		yyj1197++
		if yyhl1197 {
			yyb1197 = yyj1197 > l
		} else {
			yyb1197 = r.CheckBreak()
		}
		if yyb1197 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1197-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1200 := z.EncBinary()
		_ = yym1200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1201 := !z.EncBinary()
			yy2arr1201 := z.EncBasicHandle().StructToArray
			var yyq1201 [2]bool
			_, _, _ = yysep1201, yyq1201, yy2arr1201
			const yyr1201 bool = false
			var yynn1201 int
			if yyr1201 || yy2arr1201 {
				r.EncodeArrayStart(2)
			} else {
				yynn1201 = 2
				for _, b := range yyq1201 {
					if b {
						yynn1201++
					}
				}
				r.EncodeMapStart(yynn1201)
				yynn1201 = 0
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1203 := z.EncBinary()
				_ = yym1203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1204 := z.EncBinary()
				_ = yym1204
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1206 := &x.ServicePort
				yym1207 := z.EncBinary()
				_ = yym1207
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1206) {
				} else if !yym1207 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1206)
				} else {
					z.EncFallback(yy1206)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1208 := &x.ServicePort
				yym1209 := z.EncBinary()
				_ = yym1209
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1208) {
				} else if !yym1209 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1208)
				} else {
					z.EncFallback(yy1208)
				}
			}
			if yyr1201 || yy2arr1201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1210 := z.DecBinary()
	_ = yym1210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1211 := r.ContainerType()
		if yyct1211 == codecSelferValueTypeMap1234 {
			yyl1211 := r.ReadMapStart()
			if yyl1211 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1211, d)
			}
		} else if yyct1211 == codecSelferValueTypeArray1234 {
			yyl1211 := r.ReadArrayStart()
			if yyl1211 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1211, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1212Slc
	var yyhl1212 bool = l >= 0
	for yyj1212 := 0; ; yyj1212++ {
		if yyhl1212 {
			if yyj1212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1212Slc = r.DecodeBytes(yys1212Slc, true, true)
		yys1212 := string(yys1212Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1212 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_intstr.IntOrString{}
			} else {
				yyv1214 := &x.ServicePort
				yym1215 := z.DecBinary()
				_ = yym1215
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1214) {
				} else if !yym1215 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1214)
				} else {
					z.DecFallback(yyv1214, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1212)
		} // end switch yys1212
	} // end for yyj1212
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1216 int
	var yyb1216 bool
	var yyhl1216 bool = l >= 0
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_intstr.IntOrString{}
	} else {
		yyv1218 := &x.ServicePort
		yym1219 := z.DecBinary()
		_ = yym1219
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1218) {
		} else if !yym1219 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1218)
		} else {
			z.DecFallback(yyv1218, false)
		}
	}
	for {
		yyj1216++
		if yyhl1216 {
			yyb1216 = yyj1216 > l
		} else {
			yyb1216 = r.CheckBreak()
		}
		if yyb1216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1220 := z.EncBinary()
	_ = yym1220
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1221 := z.DecBinary()
	_ = yym1221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1222 := z.EncBinary()
		_ = yym1222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1223 := !z.EncBinary()
			yy2arr1223 := z.EncBasicHandle().StructToArray
			var yyq1223 [2]bool
			_, _, _ = yysep1223, yyq1223, yy2arr1223
			const yyr1223 bool = false
			var yynn1223 int
			if yyr1223 || yy2arr1223 {
				r.EncodeArrayStart(2)
			} else {
				yynn1223 = 2
				for _, b := range yyq1223 {
					if b {
						yynn1223++
					}
				}
				r.EncodeMapStart(yynn1223)
				yynn1223 = 0
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1226 := z.EncBinary()
				_ = yym1226
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1227 := z.EncBinary()
				_ = yym1227
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1223 || yy2arr1223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1228 := z.DecBinary()
	_ = yym1228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1229 := r.ContainerType()
		if yyct1229 == codecSelferValueTypeMap1234 {
			yyl1229 := r.ReadMapStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1229, d)
			}
		} else if yyct1229 == codecSelferValueTypeArray1234 {
			yyl1229 := r.ReadArrayStart()
			if yyl1229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1230Slc
	var yyhl1230 bool = l >= 0
	for yyj1230 := 0; ; yyj1230++ {
		if yyhl1230 {
			if yyj1230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1230Slc = r.DecodeBytes(yys1230Slc, true, true)
		yys1230 := string(yys1230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1230 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1230)
		} // end switch yys1230
	} // end for yyj1230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1233 int
	var yyb1233 bool
	var yyhl1233 bool = l >= 0
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1233++
		if yyhl1233 {
			yyb1233 = yyj1233 > l
		} else {
			yyb1233 = r.CheckBreak()
		}
		if yyb1233 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1233-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1236 := z.EncBinary()
		_ = yym1236
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1237 := !z.EncBinary()
			yy2arr1237 := z.EncBasicHandle().StructToArray
			var yyq1237 [3]bool
			_, _, _ = yysep1237, yyq1237, yy2arr1237
			const yyr1237 bool = false
			var yynn1237 int
			if yyr1237 || yy2arr1237 {
				r.EncodeArrayStart(3)
			} else {
				yynn1237 = 3
				for _, b := range yyq1237 {
					if b {
						yynn1237++
					}
				}
				r.EncodeMapStart(yynn1237)
				yynn1237 = 0
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1239 := z.EncBinary()
				_ = yym1239
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1240 := z.EncBinary()
				_ = yym1240
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1242 := z.EncBinary()
				_ = yym1242
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1243 := z.EncBinary()
				_ = yym1243
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1245 := z.EncBinary()
					_ = yym1245
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1237 || yy2arr1237 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1247 := z.DecBinary()
	_ = yym1247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1248 := r.ContainerType()
		if yyct1248 == codecSelferValueTypeMap1234 {
			yyl1248 := r.ReadMapStart()
			if yyl1248 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1248, d)
			}
		} else if yyct1248 == codecSelferValueTypeArray1234 {
			yyl1248 := r.ReadArrayStart()
			if yyl1248 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1248, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1249Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1249Slc
	var yyhl1249 bool = l >= 0
	for yyj1249 := 0; ; yyj1249++ {
		if yyhl1249 {
			if yyj1249 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1249Slc = r.DecodeBytes(yys1249Slc, true, true)
		yys1249 := string(yys1249Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1249 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1252 := &x.TargetUtilization
				yym1253 := z.DecBinary()
				_ = yym1253
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1252), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1249)
		} // end switch yys1249
	} // end for yyj1249
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1254 int
	var yyb1254 bool
	var yyhl1254 bool = l >= 0
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1254++
	if yyhl1254 {
		yyb1254 = yyj1254 > l
	} else {
		yyb1254 = r.CheckBreak()
	}
	if yyb1254 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1257 := &x.TargetUtilization
		yym1258 := z.DecBinary()
		_ = yym1258
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1257), d)
		}
	}
	for {
		yyj1254++
		if yyhl1254 {
			yyb1254 = yyj1254 > l
		} else {
			yyb1254 = r.CheckBreak()
		}
		if yyb1254 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1254-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1259 := z.EncBinary()
		_ = yym1259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1260 := !z.EncBinary()
			yy2arr1260 := z.EncBasicHandle().StructToArray
			var yyq1260 [4]bool
			_, _, _ = yysep1260, yyq1260, yy2arr1260
			const yyr1260 bool = false
			yyq1260[0] = x.Kind != ""
			yyq1260[1] = x.APIVersion != ""
			yyq1260[2] = true
			yyq1260[3] = true
			var yynn1260 int
			if yyr1260 || yy2arr1260 {
				r.EncodeArrayStart(4)
			} else {
				yynn1260 = 0
				for _, b := range yyq1260 {
					if b {
						yynn1260++
					}
				}
				r.EncodeMapStart(yynn1260)
				yynn1260 = 0
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1260[0] {
					yym1262 := z.EncBinary()
					_ = yym1262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1260[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1263 := z.EncBinary()
					_ = yym1263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1260[1] {
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1260[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1266 := z.EncBinary()
					_ = yym1266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1260[2] {
					yy1268 := &x.ObjectMeta
					yy1268.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1260[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1269 := &x.ObjectMeta
					yy1269.CodecEncodeSelf(e)
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1260[3] {
					yy1271 := &x.Spec
					yy1271.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1260[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1272 := &x.Spec
					yy1272.CodecEncodeSelf(e)
				}
			}
			if yyr1260 || yy2arr1260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1273 := z.DecBinary()
	_ = yym1273
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1274 := r.ContainerType()
		if yyct1274 == codecSelferValueTypeMap1234 {
			yyl1274 := r.ReadMapStart()
			if yyl1274 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1274, d)
			}
		} else if yyct1274 == codecSelferValueTypeArray1234 {
			yyl1274 := r.ReadArrayStart()
			if yyl1274 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1274, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1275Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1275Slc
	var yyhl1275 bool = l >= 0
	for yyj1275 := 0; ; yyj1275++ {
		if yyhl1275 {
			if yyj1275 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1275Slc = r.DecodeBytes(yys1275Slc, true, true)
		yys1275 := string(yys1275Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1275 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1278 := &x.ObjectMeta
				yyv1278.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1279 := &x.Spec
				yyv1279.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1275)
		} // end switch yys1275
	} // end for yyj1275
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1280 int
	var yyb1280 bool
	var yyhl1280 bool = l >= 0
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1283 := &x.ObjectMeta
		yyv1283.CodecDecodeSelf(d)
	}
	yyj1280++
	if yyhl1280 {
		yyb1280 = yyj1280 > l
	} else {
		yyb1280 = r.CheckBreak()
	}
	if yyb1280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1284 := &x.Spec
		yyv1284.CodecDecodeSelf(d)
	}
	for {
		yyj1280++
		if yyhl1280 {
			yyb1280 = yyj1280 > l
		} else {
			yyb1280 = r.CheckBreak()
		}
		if yyb1280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1285 := z.EncBinary()
		_ = yym1285
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1286 := !z.EncBinary()
			yy2arr1286 := z.EncBasicHandle().StructToArray
			var yyq1286 [4]bool
			_, _, _ = yysep1286, yyq1286, yy2arr1286
			const yyr1286 bool = false
			yyq1286[0] = x.Kind != ""
			yyq1286[1] = x.APIVersion != ""
			yyq1286[2] = true
			var yynn1286 int
			if yyr1286 || yy2arr1286 {
				r.EncodeArrayStart(4)
			} else {
				yynn1286 = 1
				for _, b := range yyq1286 {
					if b {
						yynn1286++
					}
				}
				r.EncodeMapStart(yynn1286)
				yynn1286 = 0
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1286[0] {
					yym1288 := z.EncBinary()
					_ = yym1288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1286[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1289 := z.EncBinary()
					_ = yym1289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1286[1] {
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1286[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1292 := z.EncBinary()
					_ = yym1292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1286[2] {
					yy1294 := &x.ListMeta
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1294) {
					} else {
						z.EncFallback(yy1294)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1286[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1296 := &x.ListMeta
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1296) {
					} else {
						z.EncFallback(yy1296)
					}
				}
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1299 := z.EncBinary()
					_ = yym1299
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1286 || yy2arr1286 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1301 := z.DecBinary()
	_ = yym1301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1302 := r.ContainerType()
		if yyct1302 == codecSelferValueTypeMap1234 {
			yyl1302 := r.ReadMapStart()
			if yyl1302 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1302, d)
			}
		} else if yyct1302 == codecSelferValueTypeArray1234 {
			yyl1302 := r.ReadArrayStart()
			if yyl1302 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1303Slc
	var yyhl1303 bool = l >= 0
	for yyj1303 := 0; ; yyj1303++ {
		if yyhl1303 {
			if yyj1303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1303Slc = r.DecodeBytes(yys1303Slc, true, true)
		yys1303 := string(yys1303Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1303 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1306 := &x.ListMeta
				yym1307 := z.DecBinary()
				_ = yym1307
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1306) {
				} else {
					z.DecFallback(yyv1306, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1308 := &x.Items
				yym1309 := z.DecBinary()
				_ = yym1309
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1308), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1303)
		} // end switch yys1303
	} // end for yyj1303
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1310 int
	var yyb1310 bool
	var yyhl1310 bool = l >= 0
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1313 := &x.ListMeta
		yym1314 := z.DecBinary()
		_ = yym1314
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1313) {
		} else {
			z.DecFallback(yyv1313, false)
		}
	}
	yyj1310++
	if yyhl1310 {
		yyb1310 = yyj1310 > l
	} else {
		yyb1310 = r.CheckBreak()
	}
	if yyb1310 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1315 := &x.Items
		yym1316 := z.DecBinary()
		_ = yym1316
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1315), d)
		}
	}
	for {
		yyj1310++
		if yyhl1310 {
			yyb1310 = yyj1310 > l
		} else {
			yyb1310 = r.CheckBreak()
		}
		if yyb1310 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1310-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1317 := z.EncBinary()
		_ = yym1317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1318 := !z.EncBinary()
			yy2arr1318 := z.EncBasicHandle().StructToArray
			var yyq1318 [2]bool
			_, _, _ = yysep1318, yyq1318, yy2arr1318
			const yyr1318 bool = false
			yyq1318[0] = len(x.MatchLabels) != 0
			yyq1318[1] = len(x.MatchExpressions) != 0
			var yynn1318 int
			if yyr1318 || yy2arr1318 {
				r.EncodeArrayStart(2)
			} else {
				yynn1318 = 0
				for _, b := range yyq1318 {
					if b {
						yynn1318++
					}
				}
				r.EncodeMapStart(yynn1318)
				yynn1318 = 0
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1320 := z.EncBinary()
						_ = yym1320
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1321 := z.EncBinary()
						_ = yym1321
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1318[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1323 := z.EncBinary()
						_ = yym1323
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1318[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1324 := z.EncBinary()
						_ = yym1324
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1318 || yy2arr1318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1325 := z.DecBinary()
	_ = yym1325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1326 := r.ContainerType()
		if yyct1326 == codecSelferValueTypeMap1234 {
			yyl1326 := r.ReadMapStart()
			if yyl1326 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1326, d)
			}
		} else if yyct1326 == codecSelferValueTypeArray1234 {
			yyl1326 := r.ReadArrayStart()
			if yyl1326 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1327Slc
	var yyhl1327 bool = l >= 0
	for yyj1327 := 0; ; yyj1327++ {
		if yyhl1327 {
			if yyj1327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1327Slc = r.DecodeBytes(yys1327Slc, true, true)
		yys1327 := string(yys1327Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1327 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1328 := &x.MatchLabels
				yym1329 := z.DecBinary()
				_ = yym1329
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1328, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1330 := &x.MatchExpressions
				yym1331 := z.DecBinary()
				_ = yym1331
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1330), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1327)
		} // end switch yys1327
	} // end for yyj1327
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1332 int
	var yyb1332 bool
	var yyhl1332 bool = l >= 0
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1333 := &x.MatchLabels
		yym1334 := z.DecBinary()
		_ = yym1334
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1333, false, d)
		}
	}
	yyj1332++
	if yyhl1332 {
		yyb1332 = yyj1332 > l
	} else {
		yyb1332 = r.CheckBreak()
	}
	if yyb1332 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1335 := &x.MatchExpressions
		yym1336 := z.DecBinary()
		_ = yym1336
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1335), d)
		}
	}
	for {
		yyj1332++
		if yyhl1332 {
			yyb1332 = yyj1332 > l
		} else {
			yyb1332 = r.CheckBreak()
		}
		if yyb1332 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1332-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1337 := z.EncBinary()
		_ = yym1337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1338 := !z.EncBinary()
			yy2arr1338 := z.EncBasicHandle().StructToArray
			var yyq1338 [3]bool
			_, _, _ = yysep1338, yyq1338, yy2arr1338
			const yyr1338 bool = false
			yyq1338[2] = len(x.Values) != 0
			var yynn1338 int
			if yyr1338 || yy2arr1338 {
				r.EncodeArrayStart(3)
			} else {
				yynn1338 = 2
				for _, b := range yyq1338 {
					if b {
						yynn1338++
					}
				}
				r.EncodeMapStart(yynn1338)
				yynn1338 = 0
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1340 := z.EncBinary()
				_ = yym1340
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1341 := z.EncBinary()
				_ = yym1341
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1338[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1344 := z.EncBinary()
						_ = yym1344
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1345 := z.EncBinary()
						_ = yym1345
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1338 || yy2arr1338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1346 := z.DecBinary()
	_ = yym1346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1347 := r.ContainerType()
		if yyct1347 == codecSelferValueTypeMap1234 {
			yyl1347 := r.ReadMapStart()
			if yyl1347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1347, d)
			}
		} else if yyct1347 == codecSelferValueTypeArray1234 {
			yyl1347 := r.ReadArrayStart()
			if yyl1347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1348Slc
	var yyhl1348 bool = l >= 0
	for yyj1348 := 0; ; yyj1348++ {
		if yyhl1348 {
			if yyj1348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1348Slc = r.DecodeBytes(yys1348Slc, true, true)
		yys1348 := string(yys1348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1348 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1351 := &x.Values
				yym1352 := z.DecBinary()
				_ = yym1352
				if false {
				} else {
					z.F.DecSliceStringX(yyv1351, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1348)
		} // end switch yys1348
	} // end for yyj1348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1353 int
	var yyb1353 bool
	var yyhl1353 bool = l >= 0
	yyj1353++
	if yyhl1353 {
		yyb1353 = yyj1353 > l
	} else {
		yyb1353 = r.CheckBreak()
	}
	if yyb1353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1353++
	if yyhl1353 {
		yyb1353 = yyj1353 > l
	} else {
		yyb1353 = r.CheckBreak()
	}
	if yyb1353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1353++
	if yyhl1353 {
		yyb1353 = yyj1353 > l
	} else {
		yyb1353 = r.CheckBreak()
	}
	if yyb1353 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1356 := &x.Values
		yym1357 := z.DecBinary()
		_ = yym1357
		if false {
		} else {
			z.F.DecSliceStringX(yyv1356, false, d)
		}
	}
	for {
		yyj1353++
		if yyhl1353 {
			yyb1353 = yyj1353 > l
		} else {
			yyb1353 = r.CheckBreak()
		}
		if yyb1353 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1353-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1358 := z.EncBinary()
	_ = yym1358
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1359 := z.DecBinary()
	_ = yym1359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1360 := z.EncBinary()
		_ = yym1360
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1361 := !z.EncBinary()
			yy2arr1361 := z.EncBasicHandle().StructToArray
			var yyq1361 [5]bool
			_, _, _ = yysep1361, yyq1361, yy2arr1361
			const yyr1361 bool = false
			yyq1361[0] = x.Kind != ""
			yyq1361[1] = x.APIVersion != ""
			yyq1361[2] = true
			yyq1361[3] = true
			yyq1361[4] = true
			var yynn1361 int
			if yyr1361 || yy2arr1361 {
				r.EncodeArrayStart(5)
			} else {
				yynn1361 = 0
				for _, b := range yyq1361 {
					if b {
						yynn1361++
					}
				}
				r.EncodeMapStart(yynn1361)
				yynn1361 = 0
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1361[0] {
					yym1363 := z.EncBinary()
					_ = yym1363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1361[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1361[1] {
					yym1366 := z.EncBinary()
					_ = yym1366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1361[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1361[2] {
					yy1369 := &x.ObjectMeta
					yy1369.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1361[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1370 := &x.ObjectMeta
					yy1370.CodecEncodeSelf(e)
				}
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1361[3] {
					yy1372 := &x.Spec
					yy1372.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1361[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1373 := &x.Spec
					yy1373.CodecEncodeSelf(e)
				}
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1361[4] {
					yy1375 := &x.Status
					yy1375.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1361[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1376 := &x.Status
					yy1376.CodecEncodeSelf(e)
				}
			}
			if yyr1361 || yy2arr1361 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1377 := z.DecBinary()
	_ = yym1377
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1378 := r.ContainerType()
		if yyct1378 == codecSelferValueTypeMap1234 {
			yyl1378 := r.ReadMapStart()
			if yyl1378 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1378, d)
			}
		} else if yyct1378 == codecSelferValueTypeArray1234 {
			yyl1378 := r.ReadArrayStart()
			if yyl1378 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1378, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1379Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1379Slc
	var yyhl1379 bool = l >= 0
	for yyj1379 := 0; ; yyj1379++ {
		if yyhl1379 {
			if yyj1379 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1379Slc = r.DecodeBytes(yys1379Slc, true, true)
		yys1379 := string(yys1379Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1379 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1382 := &x.ObjectMeta
				yyv1382.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1383 := &x.Spec
				yyv1383.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1384 := &x.Status
				yyv1384.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1379)
		} // end switch yys1379
	} // end for yyj1379
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1385 int
	var yyb1385 bool
	var yyhl1385 bool = l >= 0
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1388 := &x.ObjectMeta
		yyv1388.CodecDecodeSelf(d)
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1389 := &x.Spec
		yyv1389.CodecDecodeSelf(d)
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1390 := &x.Status
		yyv1390.CodecDecodeSelf(d)
	}
	for {
		yyj1385++
		if yyhl1385 {
			yyb1385 = yyj1385 > l
		} else {
			yyb1385 = r.CheckBreak()
		}
		if yyb1385 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1385-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1391 := z.EncBinary()
		_ = yym1391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1392 := !z.EncBinary()
			yy2arr1392 := z.EncBasicHandle().StructToArray
			var yyq1392 [4]bool
			_, _, _ = yysep1392, yyq1392, yy2arr1392
			const yyr1392 bool = false
			yyq1392[0] = x.Kind != ""
			yyq1392[1] = x.APIVersion != ""
			yyq1392[2] = true
			var yynn1392 int
			if yyr1392 || yy2arr1392 {
				r.EncodeArrayStart(4)
			} else {
				yynn1392 = 1
				for _, b := range yyq1392 {
					if b {
						yynn1392++
					}
				}
				r.EncodeMapStart(yynn1392)
				yynn1392 = 0
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1392[0] {
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1392[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1395 := z.EncBinary()
					_ = yym1395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1392[1] {
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1392[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1392[2] {
					yy1400 := &x.ListMeta
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1400) {
					} else {
						z.EncFallback(yy1400)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1392[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1402 := &x.ListMeta
					yym1403 := z.EncBinary()
					_ = yym1403
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1402) {
					} else {
						z.EncFallback(yy1402)
					}
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1406 := z.EncBinary()
					_ = yym1406
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1407 := z.DecBinary()
	_ = yym1407
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1408 := r.ContainerType()
		if yyct1408 == codecSelferValueTypeMap1234 {
			yyl1408 := r.ReadMapStart()
			if yyl1408 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1408, d)
			}
		} else if yyct1408 == codecSelferValueTypeArray1234 {
			yyl1408 := r.ReadArrayStart()
			if yyl1408 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1408, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1409Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1409Slc
	var yyhl1409 bool = l >= 0
	for yyj1409 := 0; ; yyj1409++ {
		if yyhl1409 {
			if yyj1409 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1409Slc = r.DecodeBytes(yys1409Slc, true, true)
		yys1409 := string(yys1409Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1409 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1412 := &x.ListMeta
				yym1413 := z.DecBinary()
				_ = yym1413
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1412) {
				} else {
					z.DecFallback(yyv1412, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1414 := &x.Items
				yym1415 := z.DecBinary()
				_ = yym1415
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1414), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1409)
		} // end switch yys1409
	} // end for yyj1409
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1416 int
	var yyb1416 bool
	var yyhl1416 bool = l >= 0
	yyj1416++
	if yyhl1416 {
		yyb1416 = yyj1416 > l
	} else {
		yyb1416 = r.CheckBreak()
	}
	if yyb1416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1416++
	if yyhl1416 {
		yyb1416 = yyj1416 > l
	} else {
		yyb1416 = r.CheckBreak()
	}
	if yyb1416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1416++
	if yyhl1416 {
		yyb1416 = yyj1416 > l
	} else {
		yyb1416 = r.CheckBreak()
	}
	if yyb1416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1419 := &x.ListMeta
		yym1420 := z.DecBinary()
		_ = yym1420
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1419) {
		} else {
			z.DecFallback(yyv1419, false)
		}
	}
	yyj1416++
	if yyhl1416 {
		yyb1416 = yyj1416 > l
	} else {
		yyb1416 = r.CheckBreak()
	}
	if yyb1416 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1421 := &x.Items
		yym1422 := z.DecBinary()
		_ = yym1422
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1421), d)
		}
	}
	for {
		yyj1416++
		if yyhl1416 {
			yyb1416 = yyj1416 > l
		} else {
			yyb1416 = r.CheckBreak()
		}
		if yyb1416 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1416-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1423 := z.EncBinary()
		_ = yym1423
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1424 := !z.EncBinary()
			yy2arr1424 := z.EncBasicHandle().StructToArray
			var yyq1424 [3]bool
			_, _, _ = yysep1424, yyq1424, yy2arr1424
			const yyr1424 bool = false
			yyq1424[1] = x.Selector != nil
			yyq1424[2] = x.Template != nil
			var yynn1424 int
			if yyr1424 || yy2arr1424 {
				r.EncodeArrayStart(3)
			} else {
				yynn1424 = 1
				for _, b := range yyq1424 {
					if b {
						yynn1424++
					}
				}
				r.EncodeMapStart(yynn1424)
				yynn1424 = 0
			}
			if yyr1424 || yy2arr1424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1426 := z.EncBinary()
				_ = yym1426
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1427 := z.EncBinary()
				_ = yym1427
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1424 || yy2arr1424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1424[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1424[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1424 || yy2arr1424 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1424[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1424[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1424 || yy2arr1424 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1430 := z.DecBinary()
	_ = yym1430
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1431 := r.ContainerType()
		if yyct1431 == codecSelferValueTypeMap1234 {
			yyl1431 := r.ReadMapStart()
			if yyl1431 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1431, d)
			}
		} else if yyct1431 == codecSelferValueTypeArray1234 {
			yyl1431 := r.ReadArrayStart()
			if yyl1431 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1431, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1432Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1432Slc
	var yyhl1432 bool = l >= 0
	for yyj1432 := 0; ; yyj1432++ {
		if yyhl1432 {
			if yyj1432 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1432Slc = r.DecodeBytes(yys1432Slc, true, true)
		yys1432 := string(yys1432Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1432 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1432)
		} // end switch yys1432
	} // end for yyj1432
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1436 int
	var yyb1436 bool
	var yyhl1436 bool = l >= 0
	yyj1436++
	if yyhl1436 {
		yyb1436 = yyj1436 > l
	} else {
		yyb1436 = r.CheckBreak()
	}
	if yyb1436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1436++
	if yyhl1436 {
		yyb1436 = yyj1436 > l
	} else {
		yyb1436 = r.CheckBreak()
	}
	if yyb1436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1436++
	if yyhl1436 {
		yyb1436 = yyj1436 > l
	} else {
		yyb1436 = r.CheckBreak()
	}
	if yyb1436 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1436++
		if yyhl1436 {
			yyb1436 = yyj1436 > l
		} else {
			yyb1436 = r.CheckBreak()
		}
		if yyb1436 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1436-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1440 := z.EncBinary()
		_ = yym1440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1441 := !z.EncBinary()
			yy2arr1441 := z.EncBasicHandle().StructToArray
			var yyq1441 [2]bool
			_, _, _ = yysep1441, yyq1441, yy2arr1441
			const yyr1441 bool = false
			yyq1441[1] = x.ObservedGeneration != 0
			var yynn1441 int
			if yyr1441 || yy2arr1441 {
				r.EncodeArrayStart(2)
			} else {
				yynn1441 = 1
				for _, b := range yyq1441 {
					if b {
						yynn1441++
					}
				}
				r.EncodeMapStart(yynn1441)
				yynn1441 = 0
			}
			if yyr1441 || yy2arr1441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1443 := z.EncBinary()
				_ = yym1443
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1444 := z.EncBinary()
				_ = yym1444
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1441 || yy2arr1441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1441[1] {
					yym1446 := z.EncBinary()
					_ = yym1446
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1441[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1447 := z.EncBinary()
					_ = yym1447
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1441 || yy2arr1441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1448 := z.DecBinary()
	_ = yym1448
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1449 := r.ContainerType()
		if yyct1449 == codecSelferValueTypeMap1234 {
			yyl1449 := r.ReadMapStart()
			if yyl1449 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1449, d)
			}
		} else if yyct1449 == codecSelferValueTypeArray1234 {
			yyl1449 := r.ReadArrayStart()
			if yyl1449 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1449, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1450Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1450Slc
	var yyhl1450 bool = l >= 0
	for yyj1450 := 0; ; yyj1450++ {
		if yyhl1450 {
			if yyj1450 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1450Slc = r.DecodeBytes(yys1450Slc, true, true)
		yys1450 := string(yys1450Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1450 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1450)
		} // end switch yys1450
	} // end for yyj1450
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1453 int
	var yyb1453 bool
	var yyhl1453 bool = l >= 0
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1453++
		if yyhl1453 {
			yyb1453 = yyj1453 > l
		} else {
			yyb1453 = r.CheckBreak()
		}
		if yyb1453 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1453-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1456 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1457 := &yyv1456
		yy1457.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1458 := *v
	yyh1458, yyl1458 := z.DecSliceHelperStart()
	var yyc1458 bool
	if yyl1458 == 0 {
		if yyv1458 == nil {
			yyv1458 = []CustomMetricTarget{}
			yyc1458 = true
		} else if len(yyv1458) != 0 {
			yyv1458 = yyv1458[:0]
			yyc1458 = true
		}
	} else if yyl1458 > 0 {
		var yyrr1458, yyrl1458 int
		var yyrt1458 bool
		if yyl1458 > cap(yyv1458) {

			yyrg1458 := len(yyv1458) > 0
			yyv21458 := yyv1458
			yyrl1458, yyrt1458 = z.DecInferLen(yyl1458, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1458 {
				if yyrl1458 <= cap(yyv1458) {
					yyv1458 = yyv1458[:yyrl1458]
				} else {
					yyv1458 = make([]CustomMetricTarget, yyrl1458)
				}
			} else {
				yyv1458 = make([]CustomMetricTarget, yyrl1458)
			}
			yyc1458 = true
			yyrr1458 = len(yyv1458)
			if yyrg1458 {
				copy(yyv1458, yyv21458)
			}
		} else if yyl1458 != len(yyv1458) {
			yyv1458 = yyv1458[:yyl1458]
			yyc1458 = true
		}
		yyj1458 := 0
		for ; yyj1458 < yyrr1458; yyj1458++ {
			yyh1458.ElemContainerState(yyj1458)
			if r.TryDecodeAsNil() {
				yyv1458[yyj1458] = CustomMetricTarget{}
			} else {
				yyv1459 := &yyv1458[yyj1458]
				yyv1459.CodecDecodeSelf(d)
			}

		}
		if yyrt1458 {
			for ; yyj1458 < yyl1458; yyj1458++ {
				yyv1458 = append(yyv1458, CustomMetricTarget{})
				yyh1458.ElemContainerState(yyj1458)
				if r.TryDecodeAsNil() {
					yyv1458[yyj1458] = CustomMetricTarget{}
				} else {
					yyv1460 := &yyv1458[yyj1458]
					yyv1460.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1458 := 0
		for ; !r.CheckBreak(); yyj1458++ {

			if yyj1458 >= len(yyv1458) {
				yyv1458 = append(yyv1458, CustomMetricTarget{}) // var yyz1458 CustomMetricTarget
				yyc1458 = true
			}
			yyh1458.ElemContainerState(yyj1458)
			if yyj1458 < len(yyv1458) {
				if r.TryDecodeAsNil() {
					yyv1458[yyj1458] = CustomMetricTarget{}
				} else {
					yyv1461 := &yyv1458[yyj1458]
					yyv1461.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1458 < len(yyv1458) {
			yyv1458 = yyv1458[:yyj1458]
			yyc1458 = true
		} else if yyj1458 == 0 && yyv1458 == nil {
			yyv1458 = []CustomMetricTarget{}
			yyc1458 = true
		}
	}
	yyh1458.End()
	if yyc1458 {
		*v = yyv1458
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1462 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1463 := &yyv1462
		yy1463.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1464 := *v
	yyh1464, yyl1464 := z.DecSliceHelperStart()
	var yyc1464 bool
	if yyl1464 == 0 {
		if yyv1464 == nil {
			yyv1464 = []CustomMetricCurrentStatus{}
			yyc1464 = true
		} else if len(yyv1464) != 0 {
			yyv1464 = yyv1464[:0]
			yyc1464 = true
		}
	} else if yyl1464 > 0 {
		var yyrr1464, yyrl1464 int
		var yyrt1464 bool
		if yyl1464 > cap(yyv1464) {

			yyrg1464 := len(yyv1464) > 0
			yyv21464 := yyv1464
			yyrl1464, yyrt1464 = z.DecInferLen(yyl1464, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1464 {
				if yyrl1464 <= cap(yyv1464) {
					yyv1464 = yyv1464[:yyrl1464]
				} else {
					yyv1464 = make([]CustomMetricCurrentStatus, yyrl1464)
				}
			} else {
				yyv1464 = make([]CustomMetricCurrentStatus, yyrl1464)
			}
			yyc1464 = true
			yyrr1464 = len(yyv1464)
			if yyrg1464 {
				copy(yyv1464, yyv21464)
			}
		} else if yyl1464 != len(yyv1464) {
			yyv1464 = yyv1464[:yyl1464]
			yyc1464 = true
		}
		yyj1464 := 0
		for ; yyj1464 < yyrr1464; yyj1464++ {
			yyh1464.ElemContainerState(yyj1464)
			if r.TryDecodeAsNil() {
				yyv1464[yyj1464] = CustomMetricCurrentStatus{}
			} else {
				yyv1465 := &yyv1464[yyj1464]
				yyv1465.CodecDecodeSelf(d)
			}

		}
		if yyrt1464 {
			for ; yyj1464 < yyl1464; yyj1464++ {
				yyv1464 = append(yyv1464, CustomMetricCurrentStatus{})
				yyh1464.ElemContainerState(yyj1464)
				if r.TryDecodeAsNil() {
					yyv1464[yyj1464] = CustomMetricCurrentStatus{}
				} else {
					yyv1466 := &yyv1464[yyj1464]
					yyv1466.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1464 := 0
		for ; !r.CheckBreak(); yyj1464++ {

			if yyj1464 >= len(yyv1464) {
				yyv1464 = append(yyv1464, CustomMetricCurrentStatus{}) // var yyz1464 CustomMetricCurrentStatus
				yyc1464 = true
			}
			yyh1464.ElemContainerState(yyj1464)
			if yyj1464 < len(yyv1464) {
				if r.TryDecodeAsNil() {
					yyv1464[yyj1464] = CustomMetricCurrentStatus{}
				} else {
					yyv1467 := &yyv1464[yyj1464]
					yyv1467.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1464 < len(yyv1464) {
			yyv1464 = yyv1464[:yyj1464]
			yyc1464 = true
		} else if yyj1464 == 0 && yyv1464 == nil {
			yyv1464 = []CustomMetricCurrentStatus{}
			yyc1464 = true
		}
	}
	yyh1464.End()
	if yyc1464 {
		*v = yyv1464
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1468 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1469 := &yyv1468
		yy1469.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1470 := *v
	yyh1470, yyl1470 := z.DecSliceHelperStart()
	var yyc1470 bool
	if yyl1470 == 0 {
		if yyv1470 == nil {
			yyv1470 = []HorizontalPodAutoscaler{}
			yyc1470 = true
		} else if len(yyv1470) != 0 {
			yyv1470 = yyv1470[:0]
			yyc1470 = true
		}
	} else if yyl1470 > 0 {
		var yyrr1470, yyrl1470 int
		var yyrt1470 bool
		if yyl1470 > cap(yyv1470) {

			yyrg1470 := len(yyv1470) > 0
			yyv21470 := yyv1470
			yyrl1470, yyrt1470 = z.DecInferLen(yyl1470, z.DecBasicHandle().MaxInitLen, 320)
			if yyrt1470 {
				if yyrl1470 <= cap(yyv1470) {
					yyv1470 = yyv1470[:yyrl1470]
				} else {
					yyv1470 = make([]HorizontalPodAutoscaler, yyrl1470)
				}
			} else {
				yyv1470 = make([]HorizontalPodAutoscaler, yyrl1470)
			}
			yyc1470 = true
			yyrr1470 = len(yyv1470)
			if yyrg1470 {
				copy(yyv1470, yyv21470)
			}
		} else if yyl1470 != len(yyv1470) {
			yyv1470 = yyv1470[:yyl1470]
			yyc1470 = true
		}
		yyj1470 := 0
		for ; yyj1470 < yyrr1470; yyj1470++ {
			yyh1470.ElemContainerState(yyj1470)
			if r.TryDecodeAsNil() {
				yyv1470[yyj1470] = HorizontalPodAutoscaler{}
			} else {
				yyv1471 := &yyv1470[yyj1470]
				yyv1471.CodecDecodeSelf(d)
			}

		}
		if yyrt1470 {
			for ; yyj1470 < yyl1470; yyj1470++ {
				yyv1470 = append(yyv1470, HorizontalPodAutoscaler{})
				yyh1470.ElemContainerState(yyj1470)
				if r.TryDecodeAsNil() {
					yyv1470[yyj1470] = HorizontalPodAutoscaler{}
				} else {
					yyv1472 := &yyv1470[yyj1470]
					yyv1472.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1470 := 0
		for ; !r.CheckBreak(); yyj1470++ {

			if yyj1470 >= len(yyv1470) {
				yyv1470 = append(yyv1470, HorizontalPodAutoscaler{}) // var yyz1470 HorizontalPodAutoscaler
				yyc1470 = true
			}
			yyh1470.ElemContainerState(yyj1470)
			if yyj1470 < len(yyv1470) {
				if r.TryDecodeAsNil() {
					yyv1470[yyj1470] = HorizontalPodAutoscaler{}
				} else {
					yyv1473 := &yyv1470[yyj1470]
					yyv1473.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1470 < len(yyv1470) {
			yyv1470 = yyv1470[:yyj1470]
			yyc1470 = true
		} else if yyj1470 == 0 && yyv1470 == nil {
			yyv1470 = []HorizontalPodAutoscaler{}
			yyc1470 = true
		}
	}
	yyh1470.End()
	if yyc1470 {
		*v = yyv1470
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1474 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1475 := &yyv1474
		yy1475.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1476 := *v
	yyh1476, yyl1476 := z.DecSliceHelperStart()
	var yyc1476 bool
	if yyl1476 == 0 {
		if yyv1476 == nil {
			yyv1476 = []APIVersion{}
			yyc1476 = true
		} else if len(yyv1476) != 0 {
			yyv1476 = yyv1476[:0]
			yyc1476 = true
		}
	} else if yyl1476 > 0 {
		var yyrr1476, yyrl1476 int
		var yyrt1476 bool
		if yyl1476 > cap(yyv1476) {

			yyrg1476 := len(yyv1476) > 0
			yyv21476 := yyv1476
			yyrl1476, yyrt1476 = z.DecInferLen(yyl1476, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1476 {
				if yyrl1476 <= cap(yyv1476) {
					yyv1476 = yyv1476[:yyrl1476]
				} else {
					yyv1476 = make([]APIVersion, yyrl1476)
				}
			} else {
				yyv1476 = make([]APIVersion, yyrl1476)
			}
			yyc1476 = true
			yyrr1476 = len(yyv1476)
			if yyrg1476 {
				copy(yyv1476, yyv21476)
			}
		} else if yyl1476 != len(yyv1476) {
			yyv1476 = yyv1476[:yyl1476]
			yyc1476 = true
		}
		yyj1476 := 0
		for ; yyj1476 < yyrr1476; yyj1476++ {
			yyh1476.ElemContainerState(yyj1476)
			if r.TryDecodeAsNil() {
				yyv1476[yyj1476] = APIVersion{}
			} else {
				yyv1477 := &yyv1476[yyj1476]
				yyv1477.CodecDecodeSelf(d)
			}

		}
		if yyrt1476 {
			for ; yyj1476 < yyl1476; yyj1476++ {
				yyv1476 = append(yyv1476, APIVersion{})
				yyh1476.ElemContainerState(yyj1476)
				if r.TryDecodeAsNil() {
					yyv1476[yyj1476] = APIVersion{}
				} else {
					yyv1478 := &yyv1476[yyj1476]
					yyv1478.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1476 := 0
		for ; !r.CheckBreak(); yyj1476++ {

			if yyj1476 >= len(yyv1476) {
				yyv1476 = append(yyv1476, APIVersion{}) // var yyz1476 APIVersion
				yyc1476 = true
			}
			yyh1476.ElemContainerState(yyj1476)
			if yyj1476 < len(yyv1476) {
				if r.TryDecodeAsNil() {
					yyv1476[yyj1476] = APIVersion{}
				} else {
					yyv1479 := &yyv1476[yyj1476]
					yyv1479.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1476 < len(yyv1476) {
			yyv1476 = yyv1476[:yyj1476]
			yyc1476 = true
		} else if yyj1476 == 0 && yyv1476 == nil {
			yyv1476 = []APIVersion{}
			yyc1476 = true
		}
	}
	yyh1476.End()
	if yyc1476 {
		*v = yyv1476
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1480 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1481 := &yyv1480
		yy1481.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1482 := *v
	yyh1482, yyl1482 := z.DecSliceHelperStart()
	var yyc1482 bool
	if yyl1482 == 0 {
		if yyv1482 == nil {
			yyv1482 = []ThirdPartyResource{}
			yyc1482 = true
		} else if len(yyv1482) != 0 {
			yyv1482 = yyv1482[:0]
			yyc1482 = true
		}
	} else if yyl1482 > 0 {
		var yyrr1482, yyrl1482 int
		var yyrt1482 bool
		if yyl1482 > cap(yyv1482) {

			yyrg1482 := len(yyv1482) > 0
			yyv21482 := yyv1482
			yyrl1482, yyrt1482 = z.DecInferLen(yyl1482, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1482 {
				if yyrl1482 <= cap(yyv1482) {
					yyv1482 = yyv1482[:yyrl1482]
				} else {
					yyv1482 = make([]ThirdPartyResource, yyrl1482)
				}
			} else {
				yyv1482 = make([]ThirdPartyResource, yyrl1482)
			}
			yyc1482 = true
			yyrr1482 = len(yyv1482)
			if yyrg1482 {
				copy(yyv1482, yyv21482)
			}
		} else if yyl1482 != len(yyv1482) {
			yyv1482 = yyv1482[:yyl1482]
			yyc1482 = true
		}
		yyj1482 := 0
		for ; yyj1482 < yyrr1482; yyj1482++ {
			yyh1482.ElemContainerState(yyj1482)
			if r.TryDecodeAsNil() {
				yyv1482[yyj1482] = ThirdPartyResource{}
			} else {
				yyv1483 := &yyv1482[yyj1482]
				yyv1483.CodecDecodeSelf(d)
			}

		}
		if yyrt1482 {
			for ; yyj1482 < yyl1482; yyj1482++ {
				yyv1482 = append(yyv1482, ThirdPartyResource{})
				yyh1482.ElemContainerState(yyj1482)
				if r.TryDecodeAsNil() {
					yyv1482[yyj1482] = ThirdPartyResource{}
				} else {
					yyv1484 := &yyv1482[yyj1482]
					yyv1484.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1482 := 0
		for ; !r.CheckBreak(); yyj1482++ {

			if yyj1482 >= len(yyv1482) {
				yyv1482 = append(yyv1482, ThirdPartyResource{}) // var yyz1482 ThirdPartyResource
				yyc1482 = true
			}
			yyh1482.ElemContainerState(yyj1482)
			if yyj1482 < len(yyv1482) {
				if r.TryDecodeAsNil() {
					yyv1482[yyj1482] = ThirdPartyResource{}
				} else {
					yyv1485 := &yyv1482[yyj1482]
					yyv1485.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1482 < len(yyv1482) {
			yyv1482 = yyv1482[:yyj1482]
			yyc1482 = true
		} else if yyj1482 == 0 && yyv1482 == nil {
			yyv1482 = []ThirdPartyResource{}
			yyc1482 = true
		}
	}
	yyh1482.End()
	if yyc1482 {
		*v = yyv1482
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1486 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1487 := &yyv1486
		yy1487.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1488 := *v
	yyh1488, yyl1488 := z.DecSliceHelperStart()
	var yyc1488 bool
	if yyl1488 == 0 {
		if yyv1488 == nil {
			yyv1488 = []Deployment{}
			yyc1488 = true
		} else if len(yyv1488) != 0 {
			yyv1488 = yyv1488[:0]
			yyc1488 = true
		}
	} else if yyl1488 > 0 {
		var yyrr1488, yyrl1488 int
		var yyrt1488 bool
		if yyl1488 > cap(yyv1488) {

			yyrg1488 := len(yyv1488) > 0
			yyv21488 := yyv1488
			yyrl1488, yyrt1488 = z.DecInferLen(yyl1488, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt1488 {
				if yyrl1488 <= cap(yyv1488) {
					yyv1488 = yyv1488[:yyrl1488]
				} else {
					yyv1488 = make([]Deployment, yyrl1488)
				}
			} else {
				yyv1488 = make([]Deployment, yyrl1488)
			}
			yyc1488 = true
			yyrr1488 = len(yyv1488)
			if yyrg1488 {
				copy(yyv1488, yyv21488)
			}
		} else if yyl1488 != len(yyv1488) {
			yyv1488 = yyv1488[:yyl1488]
			yyc1488 = true
		}
		yyj1488 := 0
		for ; yyj1488 < yyrr1488; yyj1488++ {
			yyh1488.ElemContainerState(yyj1488)
			if r.TryDecodeAsNil() {
				yyv1488[yyj1488] = Deployment{}
			} else {
				yyv1489 := &yyv1488[yyj1488]
				yyv1489.CodecDecodeSelf(d)
			}

		}
		if yyrt1488 {
			for ; yyj1488 < yyl1488; yyj1488++ {
				yyv1488 = append(yyv1488, Deployment{})
				yyh1488.ElemContainerState(yyj1488)
				if r.TryDecodeAsNil() {
					yyv1488[yyj1488] = Deployment{}
				} else {
					yyv1490 := &yyv1488[yyj1488]
					yyv1490.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1488 := 0
		for ; !r.CheckBreak(); yyj1488++ {

			if yyj1488 >= len(yyv1488) {
				yyv1488 = append(yyv1488, Deployment{}) // var yyz1488 Deployment
				yyc1488 = true
			}
			yyh1488.ElemContainerState(yyj1488)
			if yyj1488 < len(yyv1488) {
				if r.TryDecodeAsNil() {
					yyv1488[yyj1488] = Deployment{}
				} else {
					yyv1491 := &yyv1488[yyj1488]
					yyv1491.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1488 < len(yyv1488) {
			yyv1488 = yyv1488[:yyj1488]
			yyc1488 = true
		} else if yyj1488 == 0 && yyv1488 == nil {
			yyv1488 = []Deployment{}
			yyc1488 = true
		}
	}
	yyh1488.End()
	if yyc1488 {
		*v = yyv1488
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1492 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1493 := &yyv1492
		yy1493.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1494 := *v
	yyh1494, yyl1494 := z.DecSliceHelperStart()
	var yyc1494 bool
	if yyl1494 == 0 {
		if yyv1494 == nil {
			yyv1494 = []DaemonSet{}
			yyc1494 = true
		} else if len(yyv1494) != 0 {
			yyv1494 = yyv1494[:0]
			yyc1494 = true
		}
	} else if yyl1494 > 0 {
		var yyrr1494, yyrl1494 int
		var yyrt1494 bool
		if yyl1494 > cap(yyv1494) {

			yyrg1494 := len(yyv1494) > 0
			yyv21494 := yyv1494
			yyrl1494, yyrt1494 = z.DecInferLen(yyl1494, z.DecBasicHandle().MaxInitLen, 592)
			if yyrt1494 {
				if yyrl1494 <= cap(yyv1494) {
					yyv1494 = yyv1494[:yyrl1494]
				} else {
					yyv1494 = make([]DaemonSet, yyrl1494)
				}
			} else {
				yyv1494 = make([]DaemonSet, yyrl1494)
			}
			yyc1494 = true
			yyrr1494 = len(yyv1494)
			if yyrg1494 {
				copy(yyv1494, yyv21494)
			}
		} else if yyl1494 != len(yyv1494) {
			yyv1494 = yyv1494[:yyl1494]
			yyc1494 = true
		}
		yyj1494 := 0
		for ; yyj1494 < yyrr1494; yyj1494++ {
			yyh1494.ElemContainerState(yyj1494)
			if r.TryDecodeAsNil() {
				yyv1494[yyj1494] = DaemonSet{}
			} else {
				yyv1495 := &yyv1494[yyj1494]
				yyv1495.CodecDecodeSelf(d)
			}

		}
		if yyrt1494 {
			for ; yyj1494 < yyl1494; yyj1494++ {
				yyv1494 = append(yyv1494, DaemonSet{})
				yyh1494.ElemContainerState(yyj1494)
				if r.TryDecodeAsNil() {
					yyv1494[yyj1494] = DaemonSet{}
				} else {
					yyv1496 := &yyv1494[yyj1494]
					yyv1496.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1494 := 0
		for ; !r.CheckBreak(); yyj1494++ {

			if yyj1494 >= len(yyv1494) {
				yyv1494 = append(yyv1494, DaemonSet{}) // var yyz1494 DaemonSet
				yyc1494 = true
			}
			yyh1494.ElemContainerState(yyj1494)
			if yyj1494 < len(yyv1494) {
				if r.TryDecodeAsNil() {
					yyv1494[yyj1494] = DaemonSet{}
				} else {
					yyv1497 := &yyv1494[yyj1494]
					yyv1497.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1494 < len(yyv1494) {
			yyv1494 = yyv1494[:yyj1494]
			yyc1494 = true
		} else if yyj1494 == 0 && yyv1494 == nil {
			yyv1494 = []DaemonSet{}
			yyc1494 = true
		}
	}
	yyh1494.End()
	if yyc1494 {
		*v = yyv1494
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1498 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1499 := &yyv1498
		yy1499.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1500 := *v
	yyh1500, yyl1500 := z.DecSliceHelperStart()
	var yyc1500 bool
	if yyl1500 == 0 {
		if yyv1500 == nil {
			yyv1500 = []ThirdPartyResourceData{}
			yyc1500 = true
		} else if len(yyv1500) != 0 {
			yyv1500 = yyv1500[:0]
			yyc1500 = true
		}
	} else if yyl1500 > 0 {
		var yyrr1500, yyrl1500 int
		var yyrt1500 bool
		if yyl1500 > cap(yyv1500) {

			yyrg1500 := len(yyv1500) > 0
			yyv21500 := yyv1500
			yyrl1500, yyrt1500 = z.DecInferLen(yyl1500, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1500 {
				if yyrl1500 <= cap(yyv1500) {
					yyv1500 = yyv1500[:yyrl1500]
				} else {
					yyv1500 = make([]ThirdPartyResourceData, yyrl1500)
				}
			} else {
				yyv1500 = make([]ThirdPartyResourceData, yyrl1500)
			}
			yyc1500 = true
			yyrr1500 = len(yyv1500)
			if yyrg1500 {
				copy(yyv1500, yyv21500)
			}
		} else if yyl1500 != len(yyv1500) {
			yyv1500 = yyv1500[:yyl1500]
			yyc1500 = true
		}
		yyj1500 := 0
		for ; yyj1500 < yyrr1500; yyj1500++ {
			yyh1500.ElemContainerState(yyj1500)
			if r.TryDecodeAsNil() {
				yyv1500[yyj1500] = ThirdPartyResourceData{}
			} else {
				yyv1501 := &yyv1500[yyj1500]
				yyv1501.CodecDecodeSelf(d)
			}

		}
		if yyrt1500 {
			for ; yyj1500 < yyl1500; yyj1500++ {
				yyv1500 = append(yyv1500, ThirdPartyResourceData{})
				yyh1500.ElemContainerState(yyj1500)
				if r.TryDecodeAsNil() {
					yyv1500[yyj1500] = ThirdPartyResourceData{}
				} else {
					yyv1502 := &yyv1500[yyj1500]
					yyv1502.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1500 := 0
		for ; !r.CheckBreak(); yyj1500++ {

			if yyj1500 >= len(yyv1500) {
				yyv1500 = append(yyv1500, ThirdPartyResourceData{}) // var yyz1500 ThirdPartyResourceData
				yyc1500 = true
			}
			yyh1500.ElemContainerState(yyj1500)
			if yyj1500 < len(yyv1500) {
				if r.TryDecodeAsNil() {
					yyv1500[yyj1500] = ThirdPartyResourceData{}
				} else {
					yyv1503 := &yyv1500[yyj1500]
					yyv1503.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1500 < len(yyv1500) {
			yyv1500 = yyv1500[:yyj1500]
			yyc1500 = true
		} else if yyj1500 == 0 && yyv1500 == nil {
			yyv1500 = []ThirdPartyResourceData{}
			yyc1500 = true
		}
	}
	yyh1500.End()
	if yyc1500 {
		*v = yyv1500
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1504 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1505 := &yyv1504
		yy1505.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1506 := *v
	yyh1506, yyl1506 := z.DecSliceHelperStart()
	var yyc1506 bool
	if yyl1506 == 0 {
		if yyv1506 == nil {
			yyv1506 = []Job{}
			yyc1506 = true
		} else if len(yyv1506) != 0 {
			yyv1506 = yyv1506[:0]
			yyc1506 = true
		}
	} else if yyl1506 > 0 {
		var yyrr1506, yyrl1506 int
		var yyrt1506 bool
		if yyl1506 > cap(yyv1506) {

			yyrg1506 := len(yyv1506) > 0
			yyv21506 := yyv1506
			yyrl1506, yyrt1506 = z.DecInferLen(yyl1506, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt1506 {
				if yyrl1506 <= cap(yyv1506) {
					yyv1506 = yyv1506[:yyrl1506]
				} else {
					yyv1506 = make([]Job, yyrl1506)
				}
			} else {
				yyv1506 = make([]Job, yyrl1506)
			}
			yyc1506 = true
			yyrr1506 = len(yyv1506)
			if yyrg1506 {
				copy(yyv1506, yyv21506)
			}
		} else if yyl1506 != len(yyv1506) {
			yyv1506 = yyv1506[:yyl1506]
			yyc1506 = true
		}
		yyj1506 := 0
		for ; yyj1506 < yyrr1506; yyj1506++ {
			yyh1506.ElemContainerState(yyj1506)
			if r.TryDecodeAsNil() {
				yyv1506[yyj1506] = Job{}
			} else {
				yyv1507 := &yyv1506[yyj1506]
				yyv1507.CodecDecodeSelf(d)
			}

		}
		if yyrt1506 {
			for ; yyj1506 < yyl1506; yyj1506++ {
				yyv1506 = append(yyv1506, Job{})
				yyh1506.ElemContainerState(yyj1506)
				if r.TryDecodeAsNil() {
					yyv1506[yyj1506] = Job{}
				} else {
					yyv1508 := &yyv1506[yyj1506]
					yyv1508.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1506 := 0
		for ; !r.CheckBreak(); yyj1506++ {

			if yyj1506 >= len(yyv1506) {
				yyv1506 = append(yyv1506, Job{}) // var yyz1506 Job
				yyc1506 = true
			}
			yyh1506.ElemContainerState(yyj1506)
			if yyj1506 < len(yyv1506) {
				if r.TryDecodeAsNil() {
					yyv1506[yyj1506] = Job{}
				} else {
					yyv1509 := &yyv1506[yyj1506]
					yyv1509.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1506 < len(yyv1506) {
			yyv1506 = yyv1506[:yyj1506]
			yyc1506 = true
		} else if yyj1506 == 0 && yyv1506 == nil {
			yyv1506 = []Job{}
			yyc1506 = true
		}
	}
	yyh1506.End()
	if yyc1506 {
		*v = yyv1506
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1510 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1511 := &yyv1510
		yy1511.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1512 := *v
	yyh1512, yyl1512 := z.DecSliceHelperStart()
	var yyc1512 bool
	if yyl1512 == 0 {
		if yyv1512 == nil {
			yyv1512 = []JobCondition{}
			yyc1512 = true
		} else if len(yyv1512) != 0 {
			yyv1512 = yyv1512[:0]
			yyc1512 = true
		}
	} else if yyl1512 > 0 {
		var yyrr1512, yyrl1512 int
		var yyrt1512 bool
		if yyl1512 > cap(yyv1512) {

			yyrg1512 := len(yyv1512) > 0
			yyv21512 := yyv1512
			yyrl1512, yyrt1512 = z.DecInferLen(yyl1512, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1512 {
				if yyrl1512 <= cap(yyv1512) {
					yyv1512 = yyv1512[:yyrl1512]
				} else {
					yyv1512 = make([]JobCondition, yyrl1512)
				}
			} else {
				yyv1512 = make([]JobCondition, yyrl1512)
			}
			yyc1512 = true
			yyrr1512 = len(yyv1512)
			if yyrg1512 {
				copy(yyv1512, yyv21512)
			}
		} else if yyl1512 != len(yyv1512) {
			yyv1512 = yyv1512[:yyl1512]
			yyc1512 = true
		}
		yyj1512 := 0
		for ; yyj1512 < yyrr1512; yyj1512++ {
			yyh1512.ElemContainerState(yyj1512)
			if r.TryDecodeAsNil() {
				yyv1512[yyj1512] = JobCondition{}
			} else {
				yyv1513 := &yyv1512[yyj1512]
				yyv1513.CodecDecodeSelf(d)
			}

		}
		if yyrt1512 {
			for ; yyj1512 < yyl1512; yyj1512++ {
				yyv1512 = append(yyv1512, JobCondition{})
				yyh1512.ElemContainerState(yyj1512)
				if r.TryDecodeAsNil() {
					yyv1512[yyj1512] = JobCondition{}
				} else {
					yyv1514 := &yyv1512[yyj1512]
					yyv1514.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1512 := 0
		for ; !r.CheckBreak(); yyj1512++ {

			if yyj1512 >= len(yyv1512) {
				yyv1512 = append(yyv1512, JobCondition{}) // var yyz1512 JobCondition
				yyc1512 = true
			}
			yyh1512.ElemContainerState(yyj1512)
			if yyj1512 < len(yyv1512) {
				if r.TryDecodeAsNil() {
					yyv1512[yyj1512] = JobCondition{}
				} else {
					yyv1515 := &yyv1512[yyj1512]
					yyv1515.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1512 < len(yyv1512) {
			yyv1512 = yyv1512[:yyj1512]
			yyc1512 = true
		} else if yyj1512 == 0 && yyv1512 == nil {
			yyv1512 = []JobCondition{}
			yyc1512 = true
		}
	}
	yyh1512.End()
	if yyc1512 {
		*v = yyv1512
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1516 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1517 := &yyv1516
		yy1517.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1518 := *v
	yyh1518, yyl1518 := z.DecSliceHelperStart()
	var yyc1518 bool
	if yyl1518 == 0 {
		if yyv1518 == nil {
			yyv1518 = []Ingress{}
			yyc1518 = true
		} else if len(yyv1518) != 0 {
			yyv1518 = yyv1518[:0]
			yyc1518 = true
		}
	} else if yyl1518 > 0 {
		var yyrr1518, yyrl1518 int
		var yyrt1518 bool
		if yyl1518 > cap(yyv1518) {

			yyrg1518 := len(yyv1518) > 0
			yyv21518 := yyv1518
			yyrl1518, yyrt1518 = z.DecInferLen(yyl1518, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt1518 {
				if yyrl1518 <= cap(yyv1518) {
					yyv1518 = yyv1518[:yyrl1518]
				} else {
					yyv1518 = make([]Ingress, yyrl1518)
				}
			} else {
				yyv1518 = make([]Ingress, yyrl1518)
			}
			yyc1518 = true
			yyrr1518 = len(yyv1518)
			if yyrg1518 {
				copy(yyv1518, yyv21518)
			}
		} else if yyl1518 != len(yyv1518) {
			yyv1518 = yyv1518[:yyl1518]
			yyc1518 = true
		}
		yyj1518 := 0
		for ; yyj1518 < yyrr1518; yyj1518++ {
			yyh1518.ElemContainerState(yyj1518)
			if r.TryDecodeAsNil() {
				yyv1518[yyj1518] = Ingress{}
			} else {
				yyv1519 := &yyv1518[yyj1518]
				yyv1519.CodecDecodeSelf(d)
			}

		}
		if yyrt1518 {
			for ; yyj1518 < yyl1518; yyj1518++ {
				yyv1518 = append(yyv1518, Ingress{})
				yyh1518.ElemContainerState(yyj1518)
				if r.TryDecodeAsNil() {
					yyv1518[yyj1518] = Ingress{}
				} else {
					yyv1520 := &yyv1518[yyj1518]
					yyv1520.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1518 := 0
		for ; !r.CheckBreak(); yyj1518++ {

			if yyj1518 >= len(yyv1518) {
				yyv1518 = append(yyv1518, Ingress{}) // var yyz1518 Ingress
				yyc1518 = true
			}
			yyh1518.ElemContainerState(yyj1518)
			if yyj1518 < len(yyv1518) {
				if r.TryDecodeAsNil() {
					yyv1518[yyj1518] = Ingress{}
				} else {
					yyv1521 := &yyv1518[yyj1518]
					yyv1521.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1518 < len(yyv1518) {
			yyv1518 = yyv1518[:yyj1518]
			yyc1518 = true
		} else if yyj1518 == 0 && yyv1518 == nil {
			yyv1518 = []Ingress{}
			yyc1518 = true
		}
	}
	yyh1518.End()
	if yyc1518 {
		*v = yyv1518
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1522 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1523 := &yyv1522
		yy1523.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1524 := *v
	yyh1524, yyl1524 := z.DecSliceHelperStart()
	var yyc1524 bool
	if yyl1524 == 0 {
		if yyv1524 == nil {
			yyv1524 = []IngressRule{}
			yyc1524 = true
		} else if len(yyv1524) != 0 {
			yyv1524 = yyv1524[:0]
			yyc1524 = true
		}
	} else if yyl1524 > 0 {
		var yyrr1524, yyrl1524 int
		var yyrt1524 bool
		if yyl1524 > cap(yyv1524) {

			yyrg1524 := len(yyv1524) > 0
			yyv21524 := yyv1524
			yyrl1524, yyrt1524 = z.DecInferLen(yyl1524, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1524 {
				if yyrl1524 <= cap(yyv1524) {
					yyv1524 = yyv1524[:yyrl1524]
				} else {
					yyv1524 = make([]IngressRule, yyrl1524)
				}
			} else {
				yyv1524 = make([]IngressRule, yyrl1524)
			}
			yyc1524 = true
			yyrr1524 = len(yyv1524)
			if yyrg1524 {
				copy(yyv1524, yyv21524)
			}
		} else if yyl1524 != len(yyv1524) {
			yyv1524 = yyv1524[:yyl1524]
			yyc1524 = true
		}
		yyj1524 := 0
		for ; yyj1524 < yyrr1524; yyj1524++ {
			yyh1524.ElemContainerState(yyj1524)
			if r.TryDecodeAsNil() {
				yyv1524[yyj1524] = IngressRule{}
			} else {
				yyv1525 := &yyv1524[yyj1524]
				yyv1525.CodecDecodeSelf(d)
			}

		}
		if yyrt1524 {
			for ; yyj1524 < yyl1524; yyj1524++ {
				yyv1524 = append(yyv1524, IngressRule{})
				yyh1524.ElemContainerState(yyj1524)
				if r.TryDecodeAsNil() {
					yyv1524[yyj1524] = IngressRule{}
				} else {
					yyv1526 := &yyv1524[yyj1524]
					yyv1526.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1524 := 0
		for ; !r.CheckBreak(); yyj1524++ {

			if yyj1524 >= len(yyv1524) {
				yyv1524 = append(yyv1524, IngressRule{}) // var yyz1524 IngressRule
				yyc1524 = true
			}
			yyh1524.ElemContainerState(yyj1524)
			if yyj1524 < len(yyv1524) {
				if r.TryDecodeAsNil() {
					yyv1524[yyj1524] = IngressRule{}
				} else {
					yyv1527 := &yyv1524[yyj1524]
					yyv1527.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1524 < len(yyv1524) {
			yyv1524 = yyv1524[:yyj1524]
			yyc1524 = true
		} else if yyj1524 == 0 && yyv1524 == nil {
			yyv1524 = []IngressRule{}
			yyc1524 = true
		}
	}
	yyh1524.End()
	if yyc1524 {
		*v = yyv1524
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1528 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1529 := &yyv1528
		yy1529.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1530 := *v
	yyh1530, yyl1530 := z.DecSliceHelperStart()
	var yyc1530 bool
	if yyl1530 == 0 {
		if yyv1530 == nil {
			yyv1530 = []HTTPIngressPath{}
			yyc1530 = true
		} else if len(yyv1530) != 0 {
			yyv1530 = yyv1530[:0]
			yyc1530 = true
		}
	} else if yyl1530 > 0 {
		var yyrr1530, yyrl1530 int
		var yyrt1530 bool
		if yyl1530 > cap(yyv1530) {

			yyrg1530 := len(yyv1530) > 0
			yyv21530 := yyv1530
			yyrl1530, yyrt1530 = z.DecInferLen(yyl1530, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1530 {
				if yyrl1530 <= cap(yyv1530) {
					yyv1530 = yyv1530[:yyrl1530]
				} else {
					yyv1530 = make([]HTTPIngressPath, yyrl1530)
				}
			} else {
				yyv1530 = make([]HTTPIngressPath, yyrl1530)
			}
			yyc1530 = true
			yyrr1530 = len(yyv1530)
			if yyrg1530 {
				copy(yyv1530, yyv21530)
			}
		} else if yyl1530 != len(yyv1530) {
			yyv1530 = yyv1530[:yyl1530]
			yyc1530 = true
		}
		yyj1530 := 0
		for ; yyj1530 < yyrr1530; yyj1530++ {
			yyh1530.ElemContainerState(yyj1530)
			if r.TryDecodeAsNil() {
				yyv1530[yyj1530] = HTTPIngressPath{}
			} else {
				yyv1531 := &yyv1530[yyj1530]
				yyv1531.CodecDecodeSelf(d)
			}

		}
		if yyrt1530 {
			for ; yyj1530 < yyl1530; yyj1530++ {
				yyv1530 = append(yyv1530, HTTPIngressPath{})
				yyh1530.ElemContainerState(yyj1530)
				if r.TryDecodeAsNil() {
					yyv1530[yyj1530] = HTTPIngressPath{}
				} else {
					yyv1532 := &yyv1530[yyj1530]
					yyv1532.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1530 := 0
		for ; !r.CheckBreak(); yyj1530++ {

			if yyj1530 >= len(yyv1530) {
				yyv1530 = append(yyv1530, HTTPIngressPath{}) // var yyz1530 HTTPIngressPath
				yyc1530 = true
			}
			yyh1530.ElemContainerState(yyj1530)
			if yyj1530 < len(yyv1530) {
				if r.TryDecodeAsNil() {
					yyv1530[yyj1530] = HTTPIngressPath{}
				} else {
					yyv1533 := &yyv1530[yyj1530]
					yyv1533.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1530 < len(yyv1530) {
			yyv1530 = yyv1530[:yyj1530]
			yyc1530 = true
		} else if yyj1530 == 0 && yyv1530 == nil {
			yyv1530 = []HTTPIngressPath{}
			yyc1530 = true
		}
	}
	yyh1530.End()
	if yyc1530 {
		*v = yyv1530
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1534 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1535 := &yyv1534
		yy1535.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1536 := *v
	yyh1536, yyl1536 := z.DecSliceHelperStart()
	var yyc1536 bool
	if yyl1536 == 0 {
		if yyv1536 == nil {
			yyv1536 = []NodeUtilization{}
			yyc1536 = true
		} else if len(yyv1536) != 0 {
			yyv1536 = yyv1536[:0]
			yyc1536 = true
		}
	} else if yyl1536 > 0 {
		var yyrr1536, yyrl1536 int
		var yyrt1536 bool
		if yyl1536 > cap(yyv1536) {

			yyrg1536 := len(yyv1536) > 0
			yyv21536 := yyv1536
			yyrl1536, yyrt1536 = z.DecInferLen(yyl1536, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1536 {
				if yyrl1536 <= cap(yyv1536) {
					yyv1536 = yyv1536[:yyrl1536]
				} else {
					yyv1536 = make([]NodeUtilization, yyrl1536)
				}
			} else {
				yyv1536 = make([]NodeUtilization, yyrl1536)
			}
			yyc1536 = true
			yyrr1536 = len(yyv1536)
			if yyrg1536 {
				copy(yyv1536, yyv21536)
			}
		} else if yyl1536 != len(yyv1536) {
			yyv1536 = yyv1536[:yyl1536]
			yyc1536 = true
		}
		yyj1536 := 0
		for ; yyj1536 < yyrr1536; yyj1536++ {
			yyh1536.ElemContainerState(yyj1536)
			if r.TryDecodeAsNil() {
				yyv1536[yyj1536] = NodeUtilization{}
			} else {
				yyv1537 := &yyv1536[yyj1536]
				yyv1537.CodecDecodeSelf(d)
			}

		}
		if yyrt1536 {
			for ; yyj1536 < yyl1536; yyj1536++ {
				yyv1536 = append(yyv1536, NodeUtilization{})
				yyh1536.ElemContainerState(yyj1536)
				if r.TryDecodeAsNil() {
					yyv1536[yyj1536] = NodeUtilization{}
				} else {
					yyv1538 := &yyv1536[yyj1536]
					yyv1538.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1536 := 0
		for ; !r.CheckBreak(); yyj1536++ {

			if yyj1536 >= len(yyv1536) {
				yyv1536 = append(yyv1536, NodeUtilization{}) // var yyz1536 NodeUtilization
				yyc1536 = true
			}
			yyh1536.ElemContainerState(yyj1536)
			if yyj1536 < len(yyv1536) {
				if r.TryDecodeAsNil() {
					yyv1536[yyj1536] = NodeUtilization{}
				} else {
					yyv1539 := &yyv1536[yyj1536]
					yyv1539.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1536 < len(yyv1536) {
			yyv1536 = yyv1536[:yyj1536]
			yyc1536 = true
		} else if yyj1536 == 0 && yyv1536 == nil {
			yyv1536 = []NodeUtilization{}
			yyc1536 = true
		}
	}
	yyh1536.End()
	if yyc1536 {
		*v = yyv1536
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1540 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1541 := &yyv1540
		yy1541.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1542 := *v
	yyh1542, yyl1542 := z.DecSliceHelperStart()
	var yyc1542 bool
	if yyl1542 == 0 {
		if yyv1542 == nil {
			yyv1542 = []ClusterAutoscaler{}
			yyc1542 = true
		} else if len(yyv1542) != 0 {
			yyv1542 = yyv1542[:0]
			yyc1542 = true
		}
	} else if yyl1542 > 0 {
		var yyrr1542, yyrl1542 int
		var yyrt1542 bool
		if yyl1542 > cap(yyv1542) {

			yyrg1542 := len(yyv1542) > 0
			yyv21542 := yyv1542
			yyrl1542, yyrt1542 = z.DecInferLen(yyl1542, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1542 {
				if yyrl1542 <= cap(yyv1542) {
					yyv1542 = yyv1542[:yyrl1542]
				} else {
					yyv1542 = make([]ClusterAutoscaler, yyrl1542)
				}
			} else {
				yyv1542 = make([]ClusterAutoscaler, yyrl1542)
			}
			yyc1542 = true
			yyrr1542 = len(yyv1542)
			if yyrg1542 {
				copy(yyv1542, yyv21542)
			}
		} else if yyl1542 != len(yyv1542) {
			yyv1542 = yyv1542[:yyl1542]
			yyc1542 = true
		}
		yyj1542 := 0
		for ; yyj1542 < yyrr1542; yyj1542++ {
			yyh1542.ElemContainerState(yyj1542)
			if r.TryDecodeAsNil() {
				yyv1542[yyj1542] = ClusterAutoscaler{}
			} else {
				yyv1543 := &yyv1542[yyj1542]
				yyv1543.CodecDecodeSelf(d)
			}

		}
		if yyrt1542 {
			for ; yyj1542 < yyl1542; yyj1542++ {
				yyv1542 = append(yyv1542, ClusterAutoscaler{})
				yyh1542.ElemContainerState(yyj1542)
				if r.TryDecodeAsNil() {
					yyv1542[yyj1542] = ClusterAutoscaler{}
				} else {
					yyv1544 := &yyv1542[yyj1542]
					yyv1544.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1542 := 0
		for ; !r.CheckBreak(); yyj1542++ {

			if yyj1542 >= len(yyv1542) {
				yyv1542 = append(yyv1542, ClusterAutoscaler{}) // var yyz1542 ClusterAutoscaler
				yyc1542 = true
			}
			yyh1542.ElemContainerState(yyj1542)
			if yyj1542 < len(yyv1542) {
				if r.TryDecodeAsNil() {
					yyv1542[yyj1542] = ClusterAutoscaler{}
				} else {
					yyv1545 := &yyv1542[yyj1542]
					yyv1545.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1542 < len(yyv1542) {
			yyv1542 = yyv1542[:yyj1542]
			yyc1542 = true
		} else if yyj1542 == 0 && yyv1542 == nil {
			yyv1542 = []ClusterAutoscaler{}
			yyc1542 = true
		}
	}
	yyh1542.End()
	if yyc1542 {
		*v = yyv1542
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1546 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1547 := &yyv1546
		yy1547.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1548 := *v
	yyh1548, yyl1548 := z.DecSliceHelperStart()
	var yyc1548 bool
	if yyl1548 == 0 {
		if yyv1548 == nil {
			yyv1548 = []LabelSelectorRequirement{}
			yyc1548 = true
		} else if len(yyv1548) != 0 {
			yyv1548 = yyv1548[:0]
			yyc1548 = true
		}
	} else if yyl1548 > 0 {
		var yyrr1548, yyrl1548 int
		var yyrt1548 bool
		if yyl1548 > cap(yyv1548) {

			yyrg1548 := len(yyv1548) > 0
			yyv21548 := yyv1548
			yyrl1548, yyrt1548 = z.DecInferLen(yyl1548, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1548 {
				if yyrl1548 <= cap(yyv1548) {
					yyv1548 = yyv1548[:yyrl1548]
				} else {
					yyv1548 = make([]LabelSelectorRequirement, yyrl1548)
				}
			} else {
				yyv1548 = make([]LabelSelectorRequirement, yyrl1548)
			}
			yyc1548 = true
			yyrr1548 = len(yyv1548)
			if yyrg1548 {
				copy(yyv1548, yyv21548)
			}
		} else if yyl1548 != len(yyv1548) {
			yyv1548 = yyv1548[:yyl1548]
			yyc1548 = true
		}
		yyj1548 := 0
		for ; yyj1548 < yyrr1548; yyj1548++ {
			yyh1548.ElemContainerState(yyj1548)
			if r.TryDecodeAsNil() {
				yyv1548[yyj1548] = LabelSelectorRequirement{}
			} else {
				yyv1549 := &yyv1548[yyj1548]
				yyv1549.CodecDecodeSelf(d)
			}

		}
		if yyrt1548 {
			for ; yyj1548 < yyl1548; yyj1548++ {
				yyv1548 = append(yyv1548, LabelSelectorRequirement{})
				yyh1548.ElemContainerState(yyj1548)
				if r.TryDecodeAsNil() {
					yyv1548[yyj1548] = LabelSelectorRequirement{}
				} else {
					yyv1550 := &yyv1548[yyj1548]
					yyv1550.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1548 := 0
		for ; !r.CheckBreak(); yyj1548++ {

			if yyj1548 >= len(yyv1548) {
				yyv1548 = append(yyv1548, LabelSelectorRequirement{}) // var yyz1548 LabelSelectorRequirement
				yyc1548 = true
			}
			yyh1548.ElemContainerState(yyj1548)
			if yyj1548 < len(yyv1548) {
				if r.TryDecodeAsNil() {
					yyv1548[yyj1548] = LabelSelectorRequirement{}
				} else {
					yyv1551 := &yyv1548[yyj1548]
					yyv1551.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1548 < len(yyv1548) {
			yyv1548 = yyv1548[:yyj1548]
			yyc1548 = true
		} else if yyj1548 == 0 && yyv1548 == nil {
			yyv1548 = []LabelSelectorRequirement{}
			yyc1548 = true
		}
	}
	yyh1548.End()
	if yyc1548 {
		*v = yyv1548
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1552 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1553 := &yyv1552
		yy1553.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1554 := *v
	yyh1554, yyl1554 := z.DecSliceHelperStart()
	var yyc1554 bool
	if yyl1554 == 0 {
		if yyv1554 == nil {
			yyv1554 = []ReplicaSet{}
			yyc1554 = true
		} else if len(yyv1554) != 0 {
			yyv1554 = yyv1554[:0]
			yyc1554 = true
		}
	} else if yyl1554 > 0 {
		var yyrr1554, yyrl1554 int
		var yyrt1554 bool
		if yyl1554 > cap(yyv1554) {

			yyrg1554 := len(yyv1554) > 0
			yyv21554 := yyv1554
			yyrl1554, yyrt1554 = z.DecInferLen(yyl1554, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1554 {
				if yyrl1554 <= cap(yyv1554) {
					yyv1554 = yyv1554[:yyrl1554]
				} else {
					yyv1554 = make([]ReplicaSet, yyrl1554)
				}
			} else {
				yyv1554 = make([]ReplicaSet, yyrl1554)
			}
			yyc1554 = true
			yyrr1554 = len(yyv1554)
			if yyrg1554 {
				copy(yyv1554, yyv21554)
			}
		} else if yyl1554 != len(yyv1554) {
			yyv1554 = yyv1554[:yyl1554]
			yyc1554 = true
		}
		yyj1554 := 0
		for ; yyj1554 < yyrr1554; yyj1554++ {
			yyh1554.ElemContainerState(yyj1554)
			if r.TryDecodeAsNil() {
				yyv1554[yyj1554] = ReplicaSet{}
			} else {
				yyv1555 := &yyv1554[yyj1554]
				yyv1555.CodecDecodeSelf(d)
			}

		}
		if yyrt1554 {
			for ; yyj1554 < yyl1554; yyj1554++ {
				yyv1554 = append(yyv1554, ReplicaSet{})
				yyh1554.ElemContainerState(yyj1554)
				if r.TryDecodeAsNil() {
					yyv1554[yyj1554] = ReplicaSet{}
				} else {
					yyv1556 := &yyv1554[yyj1554]
					yyv1556.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1554 := 0
		for ; !r.CheckBreak(); yyj1554++ {

			if yyj1554 >= len(yyv1554) {
				yyv1554 = append(yyv1554, ReplicaSet{}) // var yyz1554 ReplicaSet
				yyc1554 = true
			}
			yyh1554.ElemContainerState(yyj1554)
			if yyj1554 < len(yyv1554) {
				if r.TryDecodeAsNil() {
					yyv1554[yyj1554] = ReplicaSet{}
				} else {
					yyv1557 := &yyv1554[yyj1554]
					yyv1557.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1554 < len(yyv1554) {
			yyv1554 = yyv1554[:yyj1554]
			yyc1554 = true
		} else if yyj1554 == 0 && yyv1554 == nil {
			yyv1554 = []ReplicaSet{}
			yyc1554 = true
		}
	}
	yyh1554.End()
	if yyc1554 {
		*v = yyv1554
	}
}
