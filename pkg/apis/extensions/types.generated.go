/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg6_intstr.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = x.Selector != ""
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					yym18 := z.EncBinary()
					_ = yym18
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Selector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Selector))
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = ""
			} else {
				x.Selector = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj25 int
	var yyb25 bool
	var yyhl25 bool = l >= 0
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = ""
	} else {
		x.Selector = string(r.DecodeString())
	}
	for {
		yyj25++
		if yyhl25 {
			yyb25 = yyj25 > l
		} else {
			yyb25 = r.CheckBreak()
		}
		if yyb25 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj25-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym28 := z.EncBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep29 := !z.EncBinary()
			yy2arr29 := z.EncBasicHandle().StructToArray
			var yyq29 [5]bool
			_, _, _ = yysep29, yyq29, yy2arr29
			const yyr29 bool = false
			yyq29[0] = x.Kind != ""
			yyq29[1] = x.APIVersion != ""
			yyq29[2] = true
			yyq29[3] = true
			yyq29[4] = true
			var yynn29 int
			if yyr29 || yy2arr29 {
				r.EncodeArrayStart(5)
			} else {
				yynn29 = 0
				for _, b := range yyq29 {
					if b {
						yynn29++
					}
				}
				r.EncodeMapStart(yynn29)
				yynn29 = 0
			}
			if yyr29 || yy2arr29 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq29[0] {
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq29[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym32 := z.EncBinary()
					_ = yym32
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr29 || yy2arr29 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq29[1] {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq29[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr29 || yy2arr29 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq29[2] {
					yy37 := &x.ObjectMeta
					yy37.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq29[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy38 := &x.ObjectMeta
					yy38.CodecEncodeSelf(e)
				}
			}
			if yyr29 || yy2arr29 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq29[3] {
					yy40 := &x.Spec
					yy40.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq29[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy41 := &x.Spec
					yy41.CodecEncodeSelf(e)
				}
			}
			if yyr29 || yy2arr29 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq29[4] {
					yy43 := &x.Status
					yy43.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq29[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy44 := &x.Status
					yy44.CodecEncodeSelf(e)
				}
			}
			if yyr29 || yy2arr29 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym45 := z.DecBinary()
	_ = yym45
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct46 := r.ContainerType()
		if yyct46 == codecSelferValueTypeMap1234 {
			yyl46 := r.ReadMapStart()
			if yyl46 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl46, d)
			}
		} else if yyct46 == codecSelferValueTypeArray1234 {
			yyl46 := r.ReadArrayStart()
			if yyl46 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl46, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys47Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys47Slc
	var yyhl47 bool = l >= 0
	for yyj47 := 0; ; yyj47++ {
		if yyhl47 {
			if yyj47 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys47Slc = r.DecodeBytes(yys47Slc, true, true)
		yys47 := string(yys47Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys47 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv50 := &x.ObjectMeta
				yyv50.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv51 := &x.Spec
				yyv51.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv52 := &x.Status
				yyv52.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys47)
		} // end switch yys47
	} // end for yyj47
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj53 int
	var yyb53 bool
	var yyhl53 bool = l >= 0
	yyj53++
	if yyhl53 {
		yyb53 = yyj53 > l
	} else {
		yyb53 = r.CheckBreak()
	}
	if yyb53 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj53++
	if yyhl53 {
		yyb53 = yyj53 > l
	} else {
		yyb53 = r.CheckBreak()
	}
	if yyb53 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj53++
	if yyhl53 {
		yyb53 = yyj53 > l
	} else {
		yyb53 = r.CheckBreak()
	}
	if yyb53 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv56 := &x.ObjectMeta
		yyv56.CodecDecodeSelf(d)
	}
	yyj53++
	if yyhl53 {
		yyb53 = yyj53 > l
	} else {
		yyb53 = r.CheckBreak()
	}
	if yyb53 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv57 := &x.Spec
		yyv57.CodecDecodeSelf(d)
	}
	yyj53++
	if yyhl53 {
		yyb53 = yyj53 > l
	} else {
		yyb53 = r.CheckBreak()
	}
	if yyb53 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv58 := &x.Status
		yyv58.CodecDecodeSelf(d)
	}
	for {
		yyj53++
		if yyhl53 {
			yyb53 = yyj53 > l
		} else {
			yyb53 = r.CheckBreak()
		}
		if yyb53 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj53-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym59 := z.EncBinary()
		_ = yym59
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep60 := !z.EncBinary()
			yy2arr60 := z.EncBasicHandle().StructToArray
			var yyq60 [2]bool
			_, _, _ = yysep60, yyq60, yy2arr60
			const yyr60 bool = false
			yyq60[0] = x.Kind != ""
			yyq60[1] = x.APIVersion != ""
			var yynn60 int
			if yyr60 || yy2arr60 {
				r.EncodeArrayStart(2)
			} else {
				yynn60 = 0
				for _, b := range yyq60 {
					if b {
						yynn60++
					}
				}
				r.EncodeMapStart(yynn60)
				yynn60 = 0
			}
			if yyr60 || yy2arr60 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq60[0] {
					yym62 := z.EncBinary()
					_ = yym62
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq60[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym63 := z.EncBinary()
					_ = yym63
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr60 || yy2arr60 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq60[1] {
					yym65 := z.EncBinary()
					_ = yym65
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq60[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym66 := z.EncBinary()
					_ = yym66
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr60 || yy2arr60 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym67 := z.DecBinary()
	_ = yym67
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct68 := r.ContainerType()
		if yyct68 == codecSelferValueTypeMap1234 {
			yyl68 := r.ReadMapStart()
			if yyl68 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl68, d)
			}
		} else if yyct68 == codecSelferValueTypeArray1234 {
			yyl68 := r.ReadArrayStart()
			if yyl68 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl68, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys69Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys69Slc
	var yyhl69 bool = l >= 0
	for yyj69 := 0; ; yyj69++ {
		if yyhl69 {
			if yyj69 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys69Slc = r.DecodeBytes(yys69Slc, true, true)
		yys69 := string(yys69Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys69 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys69)
		} // end switch yys69
	} // end for yyj69
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj72 int
	var yyb72 bool
	var yyhl72 bool = l >= 0
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj72++
		if yyhl72 {
			yyb72 = yyj72 > l
		} else {
			yyb72 = r.CheckBreak()
		}
		if yyb72 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj72-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym75 := z.EncBinary()
		_ = yym75
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep76 := !z.EncBinary()
			yy2arr76 := z.EncBasicHandle().StructToArray
			var yyq76 [4]bool
			_, _, _ = yysep76, yyq76, yy2arr76
			const yyr76 bool = false
			yyq76[0] = x.Kind != ""
			yyq76[1] = x.Name != ""
			yyq76[2] = x.APIVersion != ""
			yyq76[3] = x.Subresource != ""
			var yynn76 int
			if yyr76 || yy2arr76 {
				r.EncodeArrayStart(4)
			} else {
				yynn76 = 0
				for _, b := range yyq76 {
					if b {
						yynn76++
					}
				}
				r.EncodeMapStart(yynn76)
				yynn76 = 0
			}
			if yyr76 || yy2arr76 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq76[0] {
					yym78 := z.EncBinary()
					_ = yym78
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq76[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym79 := z.EncBinary()
					_ = yym79
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr76 || yy2arr76 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq76[1] {
					yym81 := z.EncBinary()
					_ = yym81
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq76[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym82 := z.EncBinary()
					_ = yym82
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr76 || yy2arr76 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq76[2] {
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq76[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr76 || yy2arr76 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq76[3] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq76[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr76 || yy2arr76 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym89 := z.DecBinary()
	_ = yym89
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct90 := r.ContainerType()
		if yyct90 == codecSelferValueTypeMap1234 {
			yyl90 := r.ReadMapStart()
			if yyl90 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl90, d)
			}
		} else if yyct90 == codecSelferValueTypeArray1234 {
			yyl90 := r.ReadArrayStart()
			if yyl90 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl90, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys91Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys91Slc
	var yyhl91 bool = l >= 0
	for yyj91 := 0; ; yyj91++ {
		if yyhl91 {
			if yyj91 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys91Slc = r.DecodeBytes(yys91Slc, true, true)
		yys91 := string(yys91Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys91 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys91)
		} // end switch yys91
	} // end for yyj91
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj96 int
	var yyb96 bool
	var yyhl96 bool = l >= 0
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj96++
	if yyhl96 {
		yyb96 = yyj96 > l
	} else {
		yyb96 = r.CheckBreak()
	}
	if yyb96 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj96++
		if yyhl96 {
			yyb96 = yyj96 > l
		} else {
			yyb96 = r.CheckBreak()
		}
		if yyb96 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj96-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym101 := z.EncBinary()
		_ = yym101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep102 := !z.EncBinary()
			yy2arr102 := z.EncBasicHandle().StructToArray
			var yyq102 [1]bool
			_, _, _ = yysep102, yyq102, yy2arr102
			const yyr102 bool = false
			var yynn102 int
			if yyr102 || yy2arr102 {
				r.EncodeArrayStart(1)
			} else {
				yynn102 = 1
				for _, b := range yyq102 {
					if b {
						yynn102++
					}
				}
				r.EncodeMapStart(yynn102)
				yynn102 = 0
			}
			if yyr102 || yy2arr102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym105 := z.EncBinary()
				_ = yym105
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr102 || yy2arr102 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym106 := z.DecBinary()
	_ = yym106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct107 := r.ContainerType()
		if yyct107 == codecSelferValueTypeMap1234 {
			yyl107 := r.ReadMapStart()
			if yyl107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl107, d)
			}
		} else if yyct107 == codecSelferValueTypeArray1234 {
			yyl107 := r.ReadArrayStart()
			if yyl107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys108Slc
	var yyhl108 bool = l >= 0
	for yyj108 := 0; ; yyj108++ {
		if yyhl108 {
			if yyj108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys108Slc = r.DecodeBytes(yys108Slc, true, true)
		yys108 := string(yys108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys108 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys108)
		} // end switch yys108
	} // end for yyj108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj110 int
	var yyb110 bool
	var yyhl110 bool = l >= 0
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj110++
		if yyhl110 {
			yyb110 = yyj110 > l
		} else {
			yyb110 = r.CheckBreak()
		}
		if yyb110 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj110-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym112 := z.EncBinary()
		_ = yym112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep113 := !z.EncBinary()
			yy2arr113 := z.EncBasicHandle().StructToArray
			var yyq113 [4]bool
			_, _, _ = yysep113, yyq113, yy2arr113
			const yyr113 bool = false
			yyq113[1] = x.MinReplicas != nil
			yyq113[3] = x.CPUUtilization != nil
			var yynn113 int
			if yyr113 || yy2arr113 {
				r.EncodeArrayStart(4)
			} else {
				yynn113 = 2
				for _, b := range yyq113 {
					if b {
						yynn113++
					}
				}
				r.EncodeMapStart(yynn113)
				yynn113 = 0
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy115 := &x.ScaleRef
				yy115.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy116 := &x.ScaleRef
				yy116.CodecEncodeSelf(e)
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq113[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy118 := *x.MinReplicas
						yym119 := z.EncBinary()
						_ = yym119
						if false {
						} else {
							r.EncodeInt(int64(yy118))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq113[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy120 := *x.MinReplicas
						yym121 := z.EncBinary()
						_ = yym121
						if false {
						} else {
							r.EncodeInt(int64(yy120))
						}
					}
				}
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym123 := z.EncBinary()
				_ = yym123
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym124 := z.EncBinary()
				_ = yym124
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq113[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq113[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym126 := z.DecBinary()
	_ = yym126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct127 := r.ContainerType()
		if yyct127 == codecSelferValueTypeMap1234 {
			yyl127 := r.ReadMapStart()
			if yyl127 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl127, d)
			}
		} else if yyct127 == codecSelferValueTypeArray1234 {
			yyl127 := r.ReadArrayStart()
			if yyl127 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl127, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys128Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys128Slc
	var yyhl128 bool = l >= 0
	for yyj128 := 0; ; yyj128++ {
		if yyhl128 {
			if yyj128 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys128Slc = r.DecodeBytes(yys128Slc, true, true)
		yys128 := string(yys128Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys128 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv129 := &x.ScaleRef
				yyv129.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym131 := z.DecBinary()
				_ = yym131
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys128)
		} // end switch yys128
	} // end for yyj128
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj134 int
	var yyb134 bool
	var yyhl134 bool = l >= 0
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv135 := &x.ScaleRef
		yyv135.CodecDecodeSelf(d)
	}
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym137 := z.DecBinary()
		_ = yym137
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj134++
		if yyhl134 {
			yyb134 = yyj134 > l
		} else {
			yyb134 = r.CheckBreak()
		}
		if yyb134 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj134-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [5]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.ObservedGeneration != nil
			yyq141[1] = x.LastScaleTime != nil
			yyq141[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn141 int
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(5)
			} else {
				yynn141 = 2
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
				yynn141 = 0
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy143 := *x.ObservedGeneration
						yym144 := z.EncBinary()
						_ = yym144
						if false {
						} else {
							r.EncodeInt(int64(yy143))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy145 := *x.ObservedGeneration
						yym146 := z.EncBinary()
						_ = yym146
						if false {
						} else {
							r.EncodeInt(int64(yy145))
						}
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym148 := z.EncBinary()
						_ = yym148
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym148 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym148 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym149 := z.EncBinary()
						_ = yym149
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym149 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym149 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym151 := z.EncBinary()
				_ = yym151
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym152 := z.EncBinary()
				_ = yym152
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym154 := z.EncBinary()
				_ = yym154
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym155 := z.EncBinary()
				_ = yym155
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy157 := *x.CurrentCPUUtilizationPercentage
						yym158 := z.EncBinary()
						_ = yym158
						if false {
						} else {
							r.EncodeInt(int64(yy157))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy159 := *x.CurrentCPUUtilizationPercentage
						yym160 := z.EncBinary()
						_ = yym160
						if false {
						} else {
							r.EncodeInt(int64(yy159))
						}
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym161 := z.DecBinary()
	_ = yym161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct162 := r.ContainerType()
		if yyct162 == codecSelferValueTypeMap1234 {
			yyl162 := r.ReadMapStart()
			if yyl162 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl162, d)
			}
		} else if yyct162 == codecSelferValueTypeArray1234 {
			yyl162 := r.ReadArrayStart()
			if yyl162 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys163Slc
	var yyhl163 bool = l >= 0
	for yyj163 := 0; ; yyj163++ {
		if yyhl163 {
			if yyj163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys163Slc = r.DecodeBytes(yys163Slc, true, true)
		yys163 := string(yys163Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys163 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym165 := z.DecBinary()
				_ = yym165
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym167 := z.DecBinary()
				_ = yym167
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym167 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym167 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym171 := z.DecBinary()
				_ = yym171
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys163)
		} // end switch yys163
	} // end for yyj163
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj172 int
	var yyb172 bool
	var yyhl172 bool = l >= 0
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym174 := z.DecBinary()
		_ = yym174
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym176 := z.DecBinary()
		_ = yym176
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym176 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym176 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym180 := z.DecBinary()
		_ = yym180
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj172++
		if yyhl172 {
			yyb172 = yyj172 > l
		} else {
			yyb172 = r.CheckBreak()
		}
		if yyb172 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj172-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym181 := z.EncBinary()
		_ = yym181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep182 := !z.EncBinary()
			yy2arr182 := z.EncBasicHandle().StructToArray
			var yyq182 [5]bool
			_, _, _ = yysep182, yyq182, yy2arr182
			const yyr182 bool = false
			yyq182[0] = x.Kind != ""
			yyq182[1] = x.APIVersion != ""
			yyq182[2] = true
			yyq182[3] = true
			yyq182[4] = true
			var yynn182 int
			if yyr182 || yy2arr182 {
				r.EncodeArrayStart(5)
			} else {
				yynn182 = 0
				for _, b := range yyq182 {
					if b {
						yynn182++
					}
				}
				r.EncodeMapStart(yynn182)
				yynn182 = 0
			}
			if yyr182 || yy2arr182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq182[0] {
					yym184 := z.EncBinary()
					_ = yym184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq182[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym185 := z.EncBinary()
					_ = yym185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr182 || yy2arr182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq182[1] {
					yym187 := z.EncBinary()
					_ = yym187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym188 := z.EncBinary()
					_ = yym188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr182 || yy2arr182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq182[2] {
					yy190 := &x.ObjectMeta
					yy190.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq182[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy191 := &x.ObjectMeta
					yy191.CodecEncodeSelf(e)
				}
			}
			if yyr182 || yy2arr182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq182[3] {
					yy193 := &x.Spec
					yy193.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq182[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy194 := &x.Spec
					yy194.CodecEncodeSelf(e)
				}
			}
			if yyr182 || yy2arr182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq182[4] {
					yy196 := &x.Status
					yy196.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq182[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy197 := &x.Status
					yy197.CodecEncodeSelf(e)
				}
			}
			if yyr182 || yy2arr182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym198 := z.DecBinary()
	_ = yym198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct199 := r.ContainerType()
		if yyct199 == codecSelferValueTypeMap1234 {
			yyl199 := r.ReadMapStart()
			if yyl199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl199, d)
			}
		} else if yyct199 == codecSelferValueTypeArray1234 {
			yyl199 := r.ReadArrayStart()
			if yyl199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys200Slc
	var yyhl200 bool = l >= 0
	for yyj200 := 0; ; yyj200++ {
		if yyhl200 {
			if yyj200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys200Slc = r.DecodeBytes(yys200Slc, true, true)
		yys200 := string(yys200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys200 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv203 := &x.ObjectMeta
				yyv203.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv204 := &x.Spec
				yyv204.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv205 := &x.Status
				yyv205.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys200)
		} // end switch yys200
	} // end for yyj200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj206 int
	var yyb206 bool
	var yyhl206 bool = l >= 0
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv209 := &x.ObjectMeta
		yyv209.CodecDecodeSelf(d)
	}
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv210 := &x.Spec
		yyv210.CodecDecodeSelf(d)
	}
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv211 := &x.Status
		yyv211.CodecDecodeSelf(d)
	}
	for {
		yyj206++
		if yyhl206 {
			yyb206 = yyj206 > l
		} else {
			yyb206 = r.CheckBreak()
		}
		if yyb206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym212 := z.EncBinary()
		_ = yym212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep213 := !z.EncBinary()
			yy2arr213 := z.EncBasicHandle().StructToArray
			var yyq213 [4]bool
			_, _, _ = yysep213, yyq213, yy2arr213
			const yyr213 bool = false
			yyq213[0] = x.Kind != ""
			yyq213[1] = x.APIVersion != ""
			yyq213[2] = true
			var yynn213 int
			if yyr213 || yy2arr213 {
				r.EncodeArrayStart(4)
			} else {
				yynn213 = 1
				for _, b := range yyq213 {
					if b {
						yynn213++
					}
				}
				r.EncodeMapStart(yynn213)
				yynn213 = 0
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[0] {
					yym215 := z.EncBinary()
					_ = yym215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq213[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym216 := z.EncBinary()
					_ = yym216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[1] {
					yym218 := z.EncBinary()
					_ = yym218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq213[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym219 := z.EncBinary()
					_ = yym219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[2] {
					yy221 := &x.ListMeta
					yym222 := z.EncBinary()
					_ = yym222
					if false {
					} else if z.HasExtensions() && z.EncExt(yy221) {
					} else {
						z.EncFallback(yy221)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq213[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy223 := &x.ListMeta
					yym224 := z.EncBinary()
					_ = yym224
					if false {
					} else if z.HasExtensions() && z.EncExt(yy223) {
					} else {
						z.EncFallback(yy223)
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym226 := z.EncBinary()
					_ = yym226
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym227 := z.EncBinary()
					_ = yym227
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym228 := z.DecBinary()
	_ = yym228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct229 := r.ContainerType()
		if yyct229 == codecSelferValueTypeMap1234 {
			yyl229 := r.ReadMapStart()
			if yyl229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl229, d)
			}
		} else if yyct229 == codecSelferValueTypeArray1234 {
			yyl229 := r.ReadArrayStart()
			if yyl229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys230Slc
	var yyhl230 bool = l >= 0
	for yyj230 := 0; ; yyj230++ {
		if yyhl230 {
			if yyj230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys230Slc = r.DecodeBytes(yys230Slc, true, true)
		yys230 := string(yys230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys230 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv233 := &x.ListMeta
				yym234 := z.DecBinary()
				_ = yym234
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv233) {
				} else {
					z.DecFallback(yyv233, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv235 := &x.Items
				yym236 := z.DecBinary()
				_ = yym236
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv235), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys230)
		} // end switch yys230
	} // end for yyj230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj237 int
	var yyb237 bool
	var yyhl237 bool = l >= 0
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv240 := &x.ListMeta
		yym241 := z.DecBinary()
		_ = yym241
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv240) {
		} else {
			z.DecFallback(yyv240, false)
		}
	}
	yyj237++
	if yyhl237 {
		yyb237 = yyj237 > l
	} else {
		yyb237 = r.CheckBreak()
	}
	if yyb237 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv242 := &x.Items
		yym243 := z.DecBinary()
		_ = yym243
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv242), d)
		}
	}
	for {
		yyj237++
		if yyhl237 {
			yyb237 = yyj237 > l
		} else {
			yyb237 = r.CheckBreak()
		}
		if yyb237 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj237-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym244 := z.EncBinary()
		_ = yym244
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep245 := !z.EncBinary()
			yy2arr245 := z.EncBasicHandle().StructToArray
			var yyq245 [5]bool
			_, _, _ = yysep245, yyq245, yy2arr245
			const yyr245 bool = false
			yyq245[0] = x.Kind != ""
			yyq245[1] = x.APIVersion != ""
			yyq245[2] = true
			yyq245[3] = x.Description != ""
			yyq245[4] = len(x.Versions) != 0
			var yynn245 int
			if yyr245 || yy2arr245 {
				r.EncodeArrayStart(5)
			} else {
				yynn245 = 0
				for _, b := range yyq245 {
					if b {
						yynn245++
					}
				}
				r.EncodeMapStart(yynn245)
				yynn245 = 0
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[0] {
					yym247 := z.EncBinary()
					_ = yym247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq245[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym248 := z.EncBinary()
					_ = yym248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[1] {
					yym250 := z.EncBinary()
					_ = yym250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq245[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym251 := z.EncBinary()
					_ = yym251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[2] {
					yy253 := &x.ObjectMeta
					yy253.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy254 := &x.ObjectMeta
					yy254.CodecEncodeSelf(e)
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[3] {
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq245[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym257 := z.EncBinary()
					_ = yym257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq245[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym259 := z.EncBinary()
						_ = yym259
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq245[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym260 := z.EncBinary()
						_ = yym260
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr245 || yy2arr245 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym261 := z.DecBinary()
	_ = yym261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct262 := r.ContainerType()
		if yyct262 == codecSelferValueTypeMap1234 {
			yyl262 := r.ReadMapStart()
			if yyl262 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl262, d)
			}
		} else if yyct262 == codecSelferValueTypeArray1234 {
			yyl262 := r.ReadArrayStart()
			if yyl262 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl262, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys263Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys263Slc
	var yyhl263 bool = l >= 0
	for yyj263 := 0; ; yyj263++ {
		if yyhl263 {
			if yyj263 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys263Slc = r.DecodeBytes(yys263Slc, true, true)
		yys263 := string(yys263Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys263 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv266 := &x.ObjectMeta
				yyv266.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv268 := &x.Versions
				yym269 := z.DecBinary()
				_ = yym269
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv268), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys263)
		} // end switch yys263
	} // end for yyj263
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj270 int
	var yyb270 bool
	var yyhl270 bool = l >= 0
	yyj270++
	if yyhl270 {
		yyb270 = yyj270 > l
	} else {
		yyb270 = r.CheckBreak()
	}
	if yyb270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj270++
	if yyhl270 {
		yyb270 = yyj270 > l
	} else {
		yyb270 = r.CheckBreak()
	}
	if yyb270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj270++
	if yyhl270 {
		yyb270 = yyj270 > l
	} else {
		yyb270 = r.CheckBreak()
	}
	if yyb270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv273 := &x.ObjectMeta
		yyv273.CodecDecodeSelf(d)
	}
	yyj270++
	if yyhl270 {
		yyb270 = yyj270 > l
	} else {
		yyb270 = r.CheckBreak()
	}
	if yyb270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj270++
	if yyhl270 {
		yyb270 = yyj270 > l
	} else {
		yyb270 = r.CheckBreak()
	}
	if yyb270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv275 := &x.Versions
		yym276 := z.DecBinary()
		_ = yym276
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv275), d)
		}
	}
	for {
		yyj270++
		if yyhl270 {
			yyb270 = yyj270 > l
		} else {
			yyb270 = r.CheckBreak()
		}
		if yyb270 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj270-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym277 := z.EncBinary()
		_ = yym277
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep278 := !z.EncBinary()
			yy2arr278 := z.EncBasicHandle().StructToArray
			var yyq278 [4]bool
			_, _, _ = yysep278, yyq278, yy2arr278
			const yyr278 bool = false
			yyq278[0] = x.Kind != ""
			yyq278[1] = x.APIVersion != ""
			yyq278[2] = true
			var yynn278 int
			if yyr278 || yy2arr278 {
				r.EncodeArrayStart(4)
			} else {
				yynn278 = 1
				for _, b := range yyq278 {
					if b {
						yynn278++
					}
				}
				r.EncodeMapStart(yynn278)
				yynn278 = 0
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[0] {
					yym280 := z.EncBinary()
					_ = yym280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq278[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym281 := z.EncBinary()
					_ = yym281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[1] {
					yym283 := z.EncBinary()
					_ = yym283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq278[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym284 := z.EncBinary()
					_ = yym284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq278[2] {
					yy286 := &x.ListMeta
					yym287 := z.EncBinary()
					_ = yym287
					if false {
					} else if z.HasExtensions() && z.EncExt(yy286) {
					} else {
						z.EncFallback(yy286)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq278[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy288 := &x.ListMeta
					yym289 := z.EncBinary()
					_ = yym289
					if false {
					} else if z.HasExtensions() && z.EncExt(yy288) {
					} else {
						z.EncFallback(yy288)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym291 := z.EncBinary()
					_ = yym291
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym292 := z.EncBinary()
					_ = yym292
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr278 || yy2arr278 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym293 := z.DecBinary()
	_ = yym293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct294 := r.ContainerType()
		if yyct294 == codecSelferValueTypeMap1234 {
			yyl294 := r.ReadMapStart()
			if yyl294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl294, d)
			}
		} else if yyct294 == codecSelferValueTypeArray1234 {
			yyl294 := r.ReadArrayStart()
			if yyl294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys295Slc
	var yyhl295 bool = l >= 0
	for yyj295 := 0; ; yyj295++ {
		if yyhl295 {
			if yyj295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys295Slc = r.DecodeBytes(yys295Slc, true, true)
		yys295 := string(yys295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys295 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv298 := &x.ListMeta
				yym299 := z.DecBinary()
				_ = yym299
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv298) {
				} else {
					z.DecFallback(yyv298, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv300 := &x.Items
				yym301 := z.DecBinary()
				_ = yym301
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv300), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys295)
		} // end switch yys295
	} // end for yyj295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj302 int
	var yyb302 bool
	var yyhl302 bool = l >= 0
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv305 := &x.ListMeta
		yym306 := z.DecBinary()
		_ = yym306
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv305) {
		} else {
			z.DecFallback(yyv305, false)
		}
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv307 := &x.Items
		yym308 := z.DecBinary()
		_ = yym308
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv307), d)
		}
	}
	for {
		yyj302++
		if yyhl302 {
			yyb302 = yyj302 > l
		} else {
			yyb302 = r.CheckBreak()
		}
		if yyb302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym309 := z.EncBinary()
		_ = yym309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep310 := !z.EncBinary()
			yy2arr310 := z.EncBasicHandle().StructToArray
			var yyq310 [2]bool
			_, _, _ = yysep310, yyq310, yy2arr310
			const yyr310 bool = false
			yyq310[0] = x.Name != ""
			yyq310[1] = x.APIGroup != ""
			var yynn310 int
			if yyr310 || yy2arr310 {
				r.EncodeArrayStart(2)
			} else {
				yynn310 = 0
				for _, b := range yyq310 {
					if b {
						yynn310++
					}
				}
				r.EncodeMapStart(yynn310)
				yynn310 = 0
			}
			if yyr310 || yy2arr310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq310[0] {
					yym312 := z.EncBinary()
					_ = yym312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq310[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr310 || yy2arr310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq310[1] {
					yym315 := z.EncBinary()
					_ = yym315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq310[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr310 || yy2arr310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym317 := z.DecBinary()
	_ = yym317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct318 := r.ContainerType()
		if yyct318 == codecSelferValueTypeMap1234 {
			yyl318 := r.ReadMapStart()
			if yyl318 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl318, d)
			}
		} else if yyct318 == codecSelferValueTypeArray1234 {
			yyl318 := r.ReadArrayStart()
			if yyl318 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys319Slc
	var yyhl319 bool = l >= 0
	for yyj319 := 0; ; yyj319++ {
		if yyhl319 {
			if yyj319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys319Slc = r.DecodeBytes(yys319Slc, true, true)
		yys319 := string(yys319Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys319 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys319)
		} // end switch yys319
	} // end for yyj319
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj322 int
	var yyb322 bool
	var yyhl322 bool = l >= 0
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj322++
		if yyhl322 {
			yyb322 = yyj322 > l
		} else {
			yyb322 = r.CheckBreak()
		}
		if yyb322 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj322-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym325 := z.EncBinary()
		_ = yym325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep326 := !z.EncBinary()
			yy2arr326 := z.EncBasicHandle().StructToArray
			var yyq326 [4]bool
			_, _, _ = yysep326, yyq326, yy2arr326
			const yyr326 bool = false
			yyq326[0] = x.Kind != ""
			yyq326[1] = x.APIVersion != ""
			yyq326[2] = true
			yyq326[3] = len(x.Data) != 0
			var yynn326 int
			if yyr326 || yy2arr326 {
				r.EncodeArrayStart(4)
			} else {
				yynn326 = 0
				for _, b := range yyq326 {
					if b {
						yynn326++
					}
				}
				r.EncodeMapStart(yynn326)
				yynn326 = 0
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[0] {
					yym328 := z.EncBinary()
					_ = yym328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym329 := z.EncBinary()
					_ = yym329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[1] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[2] {
					yy334 := &x.ObjectMeta
					yy334.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq326[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy335 := &x.ObjectMeta
					yy335.CodecEncodeSelf(e)
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym337 := z.EncBinary()
						_ = yym337
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq326[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym338 := z.EncBinary()
						_ = yym338
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym339 := z.DecBinary()
	_ = yym339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct340 := r.ContainerType()
		if yyct340 == codecSelferValueTypeMap1234 {
			yyl340 := r.ReadMapStart()
			if yyl340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl340, d)
			}
		} else if yyct340 == codecSelferValueTypeArray1234 {
			yyl340 := r.ReadArrayStart()
			if yyl340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys341Slc
	var yyhl341 bool = l >= 0
	for yyj341 := 0; ; yyj341++ {
		if yyhl341 {
			if yyj341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys341Slc = r.DecodeBytes(yys341Slc, true, true)
		yys341 := string(yys341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys341 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv344 := &x.ObjectMeta
				yyv344.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv345 := &x.Data
				yym346 := z.DecBinary()
				_ = yym346
				if false {
				} else {
					*yyv345 = r.DecodeBytes(*(*[]byte)(yyv345), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys341)
		} // end switch yys341
	} // end for yyj341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj347 int
	var yyb347 bool
	var yyhl347 bool = l >= 0
	yyj347++
	if yyhl347 {
		yyb347 = yyj347 > l
	} else {
		yyb347 = r.CheckBreak()
	}
	if yyb347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj347++
	if yyhl347 {
		yyb347 = yyj347 > l
	} else {
		yyb347 = r.CheckBreak()
	}
	if yyb347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj347++
	if yyhl347 {
		yyb347 = yyj347 > l
	} else {
		yyb347 = r.CheckBreak()
	}
	if yyb347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv350 := &x.ObjectMeta
		yyv350.CodecDecodeSelf(d)
	}
	yyj347++
	if yyhl347 {
		yyb347 = yyj347 > l
	} else {
		yyb347 = r.CheckBreak()
	}
	if yyb347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv351 := &x.Data
		yym352 := z.DecBinary()
		_ = yym352
		if false {
		} else {
			*yyv351 = r.DecodeBytes(*(*[]byte)(yyv351), false, false)
		}
	}
	for {
		yyj347++
		if yyhl347 {
			yyb347 = yyj347 > l
		} else {
			yyb347 = r.CheckBreak()
		}
		if yyb347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym353 := z.EncBinary()
		_ = yym353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep354 := !z.EncBinary()
			yy2arr354 := z.EncBasicHandle().StructToArray
			var yyq354 [5]bool
			_, _, _ = yysep354, yyq354, yy2arr354
			const yyr354 bool = false
			yyq354[0] = x.Kind != ""
			yyq354[1] = x.APIVersion != ""
			yyq354[2] = true
			yyq354[3] = true
			yyq354[4] = true
			var yynn354 int
			if yyr354 || yy2arr354 {
				r.EncodeArrayStart(5)
			} else {
				yynn354 = 0
				for _, b := range yyq354 {
					if b {
						yynn354++
					}
				}
				r.EncodeMapStart(yynn354)
				yynn354 = 0
			}
			if yyr354 || yy2arr354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq354[0] {
					yym356 := z.EncBinary()
					_ = yym356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq354[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym357 := z.EncBinary()
					_ = yym357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr354 || yy2arr354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq354[1] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq354[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr354 || yy2arr354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq354[2] {
					yy362 := &x.ObjectMeta
					yy362.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq354[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy363 := &x.ObjectMeta
					yy363.CodecEncodeSelf(e)
				}
			}
			if yyr354 || yy2arr354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq354[3] {
					yy365 := &x.Spec
					yy365.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq354[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy366 := &x.Spec
					yy366.CodecEncodeSelf(e)
				}
			}
			if yyr354 || yy2arr354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq354[4] {
					yy368 := &x.Status
					yy368.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq354[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy369 := &x.Status
					yy369.CodecEncodeSelf(e)
				}
			}
			if yyr354 || yy2arr354 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym370 := z.DecBinary()
	_ = yym370
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct371 := r.ContainerType()
		if yyct371 == codecSelferValueTypeMap1234 {
			yyl371 := r.ReadMapStart()
			if yyl371 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl371, d)
			}
		} else if yyct371 == codecSelferValueTypeArray1234 {
			yyl371 := r.ReadArrayStart()
			if yyl371 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl371, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys372Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys372Slc
	var yyhl372 bool = l >= 0
	for yyj372 := 0; ; yyj372++ {
		if yyhl372 {
			if yyj372 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys372Slc = r.DecodeBytes(yys372Slc, true, true)
		yys372 := string(yys372Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys372 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv375 := &x.ObjectMeta
				yyv375.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv376 := &x.Spec
				yyv376.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv377 := &x.Status
				yyv377.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys372)
		} // end switch yys372
	} // end for yyj372
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj378 int
	var yyb378 bool
	var yyhl378 bool = l >= 0
	yyj378++
	if yyhl378 {
		yyb378 = yyj378 > l
	} else {
		yyb378 = r.CheckBreak()
	}
	if yyb378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj378++
	if yyhl378 {
		yyb378 = yyj378 > l
	} else {
		yyb378 = r.CheckBreak()
	}
	if yyb378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj378++
	if yyhl378 {
		yyb378 = yyj378 > l
	} else {
		yyb378 = r.CheckBreak()
	}
	if yyb378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv381 := &x.ObjectMeta
		yyv381.CodecDecodeSelf(d)
	}
	yyj378++
	if yyhl378 {
		yyb378 = yyj378 > l
	} else {
		yyb378 = r.CheckBreak()
	}
	if yyb378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv382 := &x.Spec
		yyv382.CodecDecodeSelf(d)
	}
	yyj378++
	if yyhl378 {
		yyb378 = yyj378 > l
	} else {
		yyb378 = r.CheckBreak()
	}
	if yyb378 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv383 := &x.Status
		yyv383.CodecDecodeSelf(d)
	}
	for {
		yyj378++
		if yyhl378 {
			yyb378 = yyj378 > l
		} else {
			yyb378 = r.CheckBreak()
		}
		if yyb378 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj378-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym384 := z.EncBinary()
		_ = yym384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep385 := !z.EncBinary()
			yy2arr385 := z.EncBasicHandle().StructToArray
			var yyq385 [6]bool
			_, _, _ = yysep385, yyq385, yy2arr385
			const yyr385 bool = false
			yyq385[0] = x.Replicas != 0
			yyq385[1] = len(x.Selector) != 0
			yyq385[3] = true
			yyq385[4] = x.UniqueLabelKey != ""
			yyq385[5] = x.Paused != false
			var yynn385 int
			if yyr385 || yy2arr385 {
				r.EncodeArrayStart(6)
			} else {
				yynn385 = 1
				for _, b := range yyq385 {
					if b {
						yynn385++
					}
				}
				r.EncodeMapStart(yynn385)
				yynn385 = 0
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq385[0] {
					yym387 := z.EncBinary()
					_ = yym387
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq385[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym388 := z.EncBinary()
					_ = yym388
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq385[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym390 := z.EncBinary()
						_ = yym390
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq385[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym391 := z.EncBinary()
						_ = yym391
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy393 := &x.Template
				yy393.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy394 := &x.Template
				yy394.CodecEncodeSelf(e)
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq385[3] {
					yy396 := &x.Strategy
					yy396.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq385[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy397 := &x.Strategy
					yy397.CodecEncodeSelf(e)
				}
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq385[4] {
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq385[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq385[5] {
					yym402 := z.EncBinary()
					_ = yym402
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq385[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr385 || yy2arr385 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym404 := z.DecBinary()
	_ = yym404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct405 := r.ContainerType()
		if yyct405 == codecSelferValueTypeMap1234 {
			yyl405 := r.ReadMapStart()
			if yyl405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl405, d)
			}
		} else if yyct405 == codecSelferValueTypeArray1234 {
			yyl405 := r.ReadArrayStart()
			if yyl405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys406Slc
	var yyhl406 bool = l >= 0
	for yyj406 := 0; ; yyj406++ {
		if yyhl406 {
			if yyj406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys406Slc = r.DecodeBytes(yys406Slc, true, true)
		yys406 := string(yys406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys406 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv408 := &x.Selector
				yym409 := z.DecBinary()
				_ = yym409
				if false {
				} else {
					z.F.DecMapStringStringX(yyv408, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv410 := &x.Template
				yyv410.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv411 := &x.Strategy
				yyv411.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys406)
		} // end switch yys406
	} // end for yyj406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj414 int
	var yyb414 bool
	var yyhl414 bool = l >= 0
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv416 := &x.Selector
		yym417 := z.DecBinary()
		_ = yym417
		if false {
		} else {
			z.F.DecMapStringStringX(yyv416, false, d)
		}
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv418 := &x.Template
		yyv418.CodecDecodeSelf(d)
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv419 := &x.Strategy
		yyv419.CodecDecodeSelf(d)
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	yyj414++
	if yyhl414 {
		yyb414 = yyj414 > l
	} else {
		yyb414 = r.CheckBreak()
	}
	if yyb414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	for {
		yyj414++
		if yyhl414 {
			yyb414 = yyj414 > l
		} else {
			yyb414 = r.CheckBreak()
		}
		if yyb414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym422 := z.EncBinary()
		_ = yym422
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep423 := !z.EncBinary()
			yy2arr423 := z.EncBasicHandle().StructToArray
			var yyq423 [2]bool
			_, _, _ = yysep423, yyq423, yy2arr423
			const yyr423 bool = false
			yyq423[0] = x.Type != ""
			yyq423[1] = x.RollingUpdate != nil
			var yynn423 int
			if yyr423 || yy2arr423 {
				r.EncodeArrayStart(2)
			} else {
				yynn423 = 0
				for _, b := range yyq423 {
					if b {
						yynn423++
					}
				}
				r.EncodeMapStart(yynn423)
				yynn423 = 0
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq423[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq423[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq423[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr423 || yy2arr423 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym426 := z.DecBinary()
	_ = yym426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct427 := r.ContainerType()
		if yyct427 == codecSelferValueTypeMap1234 {
			yyl427 := r.ReadMapStart()
			if yyl427 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl427, d)
			}
		} else if yyct427 == codecSelferValueTypeArray1234 {
			yyl427 := r.ReadArrayStart()
			if yyl427 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl427, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys428Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys428Slc
	var yyhl428 bool = l >= 0
	for yyj428 := 0; ; yyj428++ {
		if yyhl428 {
			if yyj428 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys428Slc = r.DecodeBytes(yys428Slc, true, true)
		yys428 := string(yys428Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys428 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys428)
		} // end switch yys428
	} // end for yyj428
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj431 int
	var yyb431 bool
	var yyhl431 bool = l >= 0
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj431++
	if yyhl431 {
		yyb431 = yyj431 > l
	} else {
		yyb431 = r.CheckBreak()
	}
	if yyb431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj431++
		if yyhl431 {
			yyb431 = yyj431 > l
		} else {
			yyb431 = r.CheckBreak()
		}
		if yyb431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym434 := z.EncBinary()
	_ = yym434
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym436 := z.EncBinary()
		_ = yym436
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep437 := !z.EncBinary()
			yy2arr437 := z.EncBasicHandle().StructToArray
			var yyq437 [3]bool
			_, _, _ = yysep437, yyq437, yy2arr437
			const yyr437 bool = false
			yyq437[0] = true
			yyq437[1] = true
			yyq437[2] = x.MinReadySeconds != 0
			var yynn437 int
			if yyr437 || yy2arr437 {
				r.EncodeArrayStart(3)
			} else {
				yynn437 = 0
				for _, b := range yyq437 {
					if b {
						yynn437++
					}
				}
				r.EncodeMapStart(yynn437)
				yynn437 = 0
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq437[0] {
					yy439 := &x.MaxUnavailable
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else if z.HasExtensions() && z.EncExt(yy439) {
					} else if !yym440 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy439)
					} else {
						z.EncFallback(yy439)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq437[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy441 := &x.MaxUnavailable
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else if z.HasExtensions() && z.EncExt(yy441) {
					} else if !yym442 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy441)
					} else {
						z.EncFallback(yy441)
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq437[1] {
					yy444 := &x.MaxSurge
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else if z.HasExtensions() && z.EncExt(yy444) {
					} else if !yym445 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy444)
					} else {
						z.EncFallback(yy444)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq437[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy446 := &x.MaxSurge
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy446) {
					} else if !yym447 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy446)
					} else {
						z.EncFallback(yy446)
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq437[2] {
					yym449 := z.EncBinary()
					_ = yym449
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq437[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr437 || yy2arr437 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym451 := z.DecBinary()
	_ = yym451
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct452 := r.ContainerType()
		if yyct452 == codecSelferValueTypeMap1234 {
			yyl452 := r.ReadMapStart()
			if yyl452 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl452, d)
			}
		} else if yyct452 == codecSelferValueTypeArray1234 {
			yyl452 := r.ReadArrayStart()
			if yyl452 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl452, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys453Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys453Slc
	var yyhl453 bool = l >= 0
	for yyj453 := 0; ; yyj453++ {
		if yyhl453 {
			if yyj453 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys453Slc = r.DecodeBytes(yys453Slc, true, true)
		yys453 := string(yys453Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys453 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv454 := &x.MaxUnavailable
				yym455 := z.DecBinary()
				_ = yym455
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv454) {
				} else if !yym455 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv454)
				} else {
					z.DecFallback(yyv454, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg6_intstr.IntOrString{}
			} else {
				yyv456 := &x.MaxSurge
				yym457 := z.DecBinary()
				_ = yym457
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv456) {
				} else if !yym457 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv456)
				} else {
					z.DecFallback(yyv456, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys453)
		} // end switch yys453
	} // end for yyj453
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj459 int
	var yyb459 bool
	var yyhl459 bool = l >= 0
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv460 := &x.MaxUnavailable
		yym461 := z.DecBinary()
		_ = yym461
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv460) {
		} else if !yym461 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv460)
		} else {
			z.DecFallback(yyv460, false)
		}
	}
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg6_intstr.IntOrString{}
	} else {
		yyv462 := &x.MaxSurge
		yym463 := z.DecBinary()
		_ = yym463
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv462) {
		} else if !yym463 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv462)
		} else {
			z.DecFallback(yyv462, false)
		}
	}
	yyj459++
	if yyhl459 {
		yyb459 = yyj459 > l
	} else {
		yyb459 = r.CheckBreak()
	}
	if yyb459 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj459++
		if yyhl459 {
			yyb459 = yyj459 > l
		} else {
			yyb459 = r.CheckBreak()
		}
		if yyb459 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj459-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym465 := z.EncBinary()
		_ = yym465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep466 := !z.EncBinary()
			yy2arr466 := z.EncBasicHandle().StructToArray
			var yyq466 [4]bool
			_, _, _ = yysep466, yyq466, yy2arr466
			const yyr466 bool = false
			yyq466[0] = x.Replicas != 0
			yyq466[1] = x.UpdatedReplicas != 0
			yyq466[2] = x.AvailableReplicas != 0
			yyq466[3] = x.UnavailableReplicas != 0
			var yynn466 int
			if yyr466 || yy2arr466 {
				r.EncodeArrayStart(4)
			} else {
				yynn466 = 0
				for _, b := range yyq466 {
					if b {
						yynn466++
					}
				}
				r.EncodeMapStart(yynn466)
				yynn466 = 0
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[0] {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq466[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym469 := z.EncBinary()
					_ = yym469
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[1] {
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq466[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[2] {
					yym474 := z.EncBinary()
					_ = yym474
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq466[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq466[3] {
					yym477 := z.EncBinary()
					_ = yym477
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq466[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym478 := z.EncBinary()
					_ = yym478
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym479 := z.DecBinary()
	_ = yym479
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct480 := r.ContainerType()
		if yyct480 == codecSelferValueTypeMap1234 {
			yyl480 := r.ReadMapStart()
			if yyl480 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl480, d)
			}
		} else if yyct480 == codecSelferValueTypeArray1234 {
			yyl480 := r.ReadArrayStart()
			if yyl480 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl480, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys481Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys481Slc
	var yyhl481 bool = l >= 0
	for yyj481 := 0; ; yyj481++ {
		if yyhl481 {
			if yyj481 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys481Slc = r.DecodeBytes(yys481Slc, true, true)
		yys481 := string(yys481Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys481 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys481)
		} // end switch yys481
	} // end for yyj481
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj486 int
	var yyb486 bool
	var yyhl486 bool = l >= 0
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj486++
		if yyhl486 {
			yyb486 = yyj486 > l
		} else {
			yyb486 = r.CheckBreak()
		}
		if yyb486 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj486-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym491 := z.EncBinary()
		_ = yym491
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep492 := !z.EncBinary()
			yy2arr492 := z.EncBasicHandle().StructToArray
			var yyq492 [4]bool
			_, _, _ = yysep492, yyq492, yy2arr492
			const yyr492 bool = false
			yyq492[0] = x.Kind != ""
			yyq492[1] = x.APIVersion != ""
			yyq492[2] = true
			var yynn492 int
			if yyr492 || yy2arr492 {
				r.EncodeArrayStart(4)
			} else {
				yynn492 = 1
				for _, b := range yyq492 {
					if b {
						yynn492++
					}
				}
				r.EncodeMapStart(yynn492)
				yynn492 = 0
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq492[0] {
					yym494 := z.EncBinary()
					_ = yym494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq492[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym495 := z.EncBinary()
					_ = yym495
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq492[1] {
					yym497 := z.EncBinary()
					_ = yym497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq492[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq492[2] {
					yy500 := &x.ListMeta
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else if z.HasExtensions() && z.EncExt(yy500) {
					} else {
						z.EncFallback(yy500)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq492[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy502 := &x.ListMeta
					yym503 := z.EncBinary()
					_ = yym503
					if false {
					} else if z.HasExtensions() && z.EncExt(yy502) {
					} else {
						z.EncFallback(yy502)
					}
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym505 := z.EncBinary()
					_ = yym505
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym506 := z.EncBinary()
					_ = yym506
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr492 || yy2arr492 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym507 := z.DecBinary()
	_ = yym507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct508 := r.ContainerType()
		if yyct508 == codecSelferValueTypeMap1234 {
			yyl508 := r.ReadMapStart()
			if yyl508 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl508, d)
			}
		} else if yyct508 == codecSelferValueTypeArray1234 {
			yyl508 := r.ReadArrayStart()
			if yyl508 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl508, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys509Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys509Slc
	var yyhl509 bool = l >= 0
	for yyj509 := 0; ; yyj509++ {
		if yyhl509 {
			if yyj509 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys509Slc = r.DecodeBytes(yys509Slc, true, true)
		yys509 := string(yys509Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys509 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv512 := &x.ListMeta
				yym513 := z.DecBinary()
				_ = yym513
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv512) {
				} else {
					z.DecFallback(yyv512, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv514 := &x.Items
				yym515 := z.DecBinary()
				_ = yym515
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv514), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys509)
		} // end switch yys509
	} // end for yyj509
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj516 int
	var yyb516 bool
	var yyhl516 bool = l >= 0
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv519 := &x.ListMeta
		yym520 := z.DecBinary()
		_ = yym520
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv519) {
		} else {
			z.DecFallback(yyv519, false)
		}
	}
	yyj516++
	if yyhl516 {
		yyb516 = yyj516 > l
	} else {
		yyb516 = r.CheckBreak()
	}
	if yyb516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv521 := &x.Items
		yym522 := z.DecBinary()
		_ = yym522
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv521), d)
		}
	}
	for {
		yyj516++
		if yyhl516 {
			yyb516 = yyj516 > l
		} else {
			yyb516 = r.CheckBreak()
		}
		if yyb516 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj516-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetUpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [2]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[0] = x.Type != ""
			yyq524[1] = x.RollingUpdate != nil
			var yynn524 int
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(2)
			} else {
				yynn524 = 0
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
				yynn524 = 0
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetUpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym527 := z.DecBinary()
	_ = yym527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct528 := r.ContainerType()
		if yyct528 == codecSelferValueTypeMap1234 {
			yyl528 := r.ReadMapStart()
			if yyl528 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl528, d)
			}
		} else if yyct528 == codecSelferValueTypeArray1234 {
			yyl528 := r.ReadArrayStart()
			if yyl528 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys529Slc
	var yyhl529 bool = l >= 0
	for yyj529 := 0; ; yyj529++ {
		if yyhl529 {
			if yyj529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys529Slc = r.DecodeBytes(yys529Slc, true, true)
		yys529 := string(yys529Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys529 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDaemonSet)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys529)
		} // end switch yys529
	} // end for yyj529
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj532 int
	var yyb532 bool
	var yyhl532 bool = l >= 0
	yyj532++
	if yyhl532 {
		yyb532 = yyj532 > l
	} else {
		yyb532 = r.CheckBreak()
	}
	if yyb532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
	}
	yyj532++
	if yyhl532 {
		yyb532 = yyj532 > l
	} else {
		yyb532 = r.CheckBreak()
	}
	if yyb532 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDaemonSet)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj532++
		if yyhl532 {
			yyb532 = yyj532 > l
		} else {
			yyb532 = r.CheckBreak()
		}
		if yyb532 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj532-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DaemonSetUpdateStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym535 := z.EncBinary()
	_ = yym535
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DaemonSetUpdateStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym536 := z.DecBinary()
	_ = yym536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym537 := z.EncBinary()
		_ = yym537
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep538 := !z.EncBinary()
			yy2arr538 := z.EncBasicHandle().StructToArray
			var yyq538 [2]bool
			_, _, _ = yysep538, yyq538, yy2arr538
			const yyr538 bool = false
			yyq538[0] = true
			yyq538[1] = x.MinReadySeconds != 0
			var yynn538 int
			if yyr538 || yy2arr538 {
				r.EncodeArrayStart(2)
			} else {
				yynn538 = 0
				for _, b := range yyq538 {
					if b {
						yynn538++
					}
				}
				r.EncodeMapStart(yynn538)
				yynn538 = 0
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[0] {
					yy540 := &x.MaxUnavailable
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else if z.HasExtensions() && z.EncExt(yy540) {
					} else if !yym541 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy540)
					} else {
						z.EncFallback(yy540)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq538[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy542 := &x.MaxUnavailable
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else if z.HasExtensions() && z.EncExt(yy542) {
					} else if !yym543 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy542)
					} else {
						z.EncFallback(yy542)
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq538[1] {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq538[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr538 || yy2arr538 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym547 := z.DecBinary()
	_ = yym547
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct548 := r.ContainerType()
		if yyct548 == codecSelferValueTypeMap1234 {
			yyl548 := r.ReadMapStart()
			if yyl548 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl548, d)
			}
		} else if yyct548 == codecSelferValueTypeArray1234 {
			yyl548 := r.ReadArrayStart()
			if yyl548 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl548, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys549Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys549Slc
	var yyhl549 bool = l >= 0
	for yyj549 := 0; ; yyj549++ {
		if yyhl549 {
			if yyj549 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys549Slc = r.DecodeBytes(yys549Slc, true, true)
		yys549 := string(yys549Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys549 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg6_intstr.IntOrString{}
			} else {
				yyv550 := &x.MaxUnavailable
				yym551 := z.DecBinary()
				_ = yym551
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv550) {
				} else if !yym551 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv550)
				} else {
					z.DecFallback(yyv550, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys549)
		} // end switch yys549
	} // end for yyj549
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj553 int
	var yyb553 bool
	var yyhl553 bool = l >= 0
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg6_intstr.IntOrString{}
	} else {
		yyv554 := &x.MaxUnavailable
		yym555 := z.DecBinary()
		_ = yym555
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv554) {
		} else if !yym555 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv554)
		} else {
			z.DecFallback(yyv554, false)
		}
	}
	yyj553++
	if yyhl553 {
		yyb553 = yyj553 > l
	} else {
		yyb553 = r.CheckBreak()
	}
	if yyb553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj553++
		if yyhl553 {
			yyb553 = yyj553 > l
		} else {
			yyb553 = r.CheckBreak()
		}
		if yyb553 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj553-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym557 := z.EncBinary()
		_ = yym557
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep558 := !z.EncBinary()
			yy2arr558 := z.EncBasicHandle().StructToArray
			var yyq558 [4]bool
			_, _, _ = yysep558, yyq558, yy2arr558
			const yyr558 bool = false
			yyq558[0] = x.Selector != nil
			yyq558[2] = true
			yyq558[3] = x.UniqueLabelKey != ""
			var yynn558 int
			if yyr558 || yy2arr558 {
				r.EncodeArrayStart(4)
			} else {
				yynn558 = 1
				for _, b := range yyq558 {
					if b {
						yynn558++
					}
				}
				r.EncodeMapStart(yynn558)
				yynn558 = 0
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq558[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy561 := &x.Template
				yy561.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy562 := &x.Template
				yy562.CodecEncodeSelf(e)
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[2] {
					yy564 := &x.UpdateStrategy
					yy564.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq558[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updateStrategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy565 := &x.UpdateStrategy
					yy565.CodecEncodeSelf(e)
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[3] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq558[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UniqueLabelKey))
					}
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym569 := z.DecBinary()
	_ = yym569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct570 := r.ContainerType()
		if yyct570 == codecSelferValueTypeMap1234 {
			yyl570 := r.ReadMapStart()
			if yyl570 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl570, d)
			}
		} else if yyct570 == codecSelferValueTypeArray1234 {
			yyl570 := r.ReadArrayStart()
			if yyl570 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl570, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys571Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys571Slc
	var yyhl571 bool = l >= 0
	for yyj571 := 0; ; yyj571++ {
		if yyhl571 {
			if yyj571 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys571Slc = r.DecodeBytes(yys571Slc, true, true)
		yys571 := string(yys571Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys571 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv573 := &x.Template
				yyv573.CodecDecodeSelf(d)
			}
		case "updateStrategy":
			if r.TryDecodeAsNil() {
				x.UpdateStrategy = DaemonSetUpdateStrategy{}
			} else {
				yyv574 := &x.UpdateStrategy
				yyv574.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				x.UniqueLabelKey = ""
			} else {
				x.UniqueLabelKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys571)
		} // end switch yys571
	} // end for yyj571
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj576 int
	var yyb576 bool
	var yyhl576 bool = l >= 0
	yyj576++
	if yyhl576 {
		yyb576 = yyj576 > l
	} else {
		yyb576 = r.CheckBreak()
	}
	if yyb576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj576++
	if yyhl576 {
		yyb576 = yyj576 > l
	} else {
		yyb576 = r.CheckBreak()
	}
	if yyb576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv578 := &x.Template
		yyv578.CodecDecodeSelf(d)
	}
	yyj576++
	if yyhl576 {
		yyb576 = yyj576 > l
	} else {
		yyb576 = r.CheckBreak()
	}
	if yyb576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdateStrategy = DaemonSetUpdateStrategy{}
	} else {
		yyv579 := &x.UpdateStrategy
		yyv579.CodecDecodeSelf(d)
	}
	yyj576++
	if yyhl576 {
		yyb576 = yyj576 > l
	} else {
		yyb576 = r.CheckBreak()
	}
	if yyb576 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UniqueLabelKey = ""
	} else {
		x.UniqueLabelKey = string(r.DecodeString())
	}
	for {
		yyj576++
		if yyhl576 {
			yyb576 = yyj576 > l
		} else {
			yyb576 = r.CheckBreak()
		}
		if yyb576 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj576-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym581 := z.EncBinary()
		_ = yym581
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep582 := !z.EncBinary()
			yy2arr582 := z.EncBasicHandle().StructToArray
			var yyq582 [3]bool
			_, _, _ = yysep582, yyq582, yy2arr582
			const yyr582 bool = false
			var yynn582 int
			if yyr582 || yy2arr582 {
				r.EncodeArrayStart(3)
			} else {
				yynn582 = 3
				for _, b := range yyq582 {
					if b {
						yynn582++
					}
				}
				r.EncodeMapStart(yynn582)
				yynn582 = 0
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym584 := z.EncBinary()
				_ = yym584
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym585 := z.EncBinary()
				_ = yym585
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym587 := z.EncBinary()
				_ = yym587
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym588 := z.EncBinary()
				_ = yym588
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym590 := z.EncBinary()
				_ = yym590
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym591 := z.EncBinary()
				_ = yym591
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym592 := z.DecBinary()
	_ = yym592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct593 := r.ContainerType()
		if yyct593 == codecSelferValueTypeMap1234 {
			yyl593 := r.ReadMapStart()
			if yyl593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl593, d)
			}
		} else if yyct593 == codecSelferValueTypeArray1234 {
			yyl593 := r.ReadArrayStart()
			if yyl593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys594Slc
	var yyhl594 bool = l >= 0
	for yyj594 := 0; ; yyj594++ {
		if yyhl594 {
			if yyj594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys594Slc = r.DecodeBytes(yys594Slc, true, true)
		yys594 := string(yys594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys594 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys594)
		} // end switch yys594
	} // end for yyj594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj598 int
	var yyb598 bool
	var yyhl598 bool = l >= 0
	yyj598++
	if yyhl598 {
		yyb598 = yyj598 > l
	} else {
		yyb598 = r.CheckBreak()
	}
	if yyb598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj598++
	if yyhl598 {
		yyb598 = yyj598 > l
	} else {
		yyb598 = r.CheckBreak()
	}
	if yyb598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj598++
	if yyhl598 {
		yyb598 = yyj598 > l
	} else {
		yyb598 = r.CheckBreak()
	}
	if yyb598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj598++
		if yyhl598 {
			yyb598 = yyj598 > l
		} else {
			yyb598 = r.CheckBreak()
		}
		if yyb598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym602 := z.EncBinary()
		_ = yym602
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep603 := !z.EncBinary()
			yy2arr603 := z.EncBasicHandle().StructToArray
			var yyq603 [5]bool
			_, _, _ = yysep603, yyq603, yy2arr603
			const yyr603 bool = false
			yyq603[0] = x.Kind != ""
			yyq603[1] = x.APIVersion != ""
			yyq603[2] = true
			yyq603[3] = true
			yyq603[4] = true
			var yynn603 int
			if yyr603 || yy2arr603 {
				r.EncodeArrayStart(5)
			} else {
				yynn603 = 0
				for _, b := range yyq603 {
					if b {
						yynn603++
					}
				}
				r.EncodeMapStart(yynn603)
				yynn603 = 0
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[0] {
					yym605 := z.EncBinary()
					_ = yym605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq603[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym606 := z.EncBinary()
					_ = yym606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[1] {
					yym608 := z.EncBinary()
					_ = yym608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq603[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym609 := z.EncBinary()
					_ = yym609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[2] {
					yy611 := &x.ObjectMeta
					yy611.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq603[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy612 := &x.ObjectMeta
					yy612.CodecEncodeSelf(e)
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[3] {
					yy614 := &x.Spec
					yy614.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq603[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy615 := &x.Spec
					yy615.CodecEncodeSelf(e)
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq603[4] {
					yy617 := &x.Status
					yy617.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq603[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy618 := &x.Status
					yy618.CodecEncodeSelf(e)
				}
			}
			if yyr603 || yy2arr603 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym619 := z.DecBinary()
	_ = yym619
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct620 := r.ContainerType()
		if yyct620 == codecSelferValueTypeMap1234 {
			yyl620 := r.ReadMapStart()
			if yyl620 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl620, d)
			}
		} else if yyct620 == codecSelferValueTypeArray1234 {
			yyl620 := r.ReadArrayStart()
			if yyl620 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl620, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys621Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys621Slc
	var yyhl621 bool = l >= 0
	for yyj621 := 0; ; yyj621++ {
		if yyhl621 {
			if yyj621 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys621Slc = r.DecodeBytes(yys621Slc, true, true)
		yys621 := string(yys621Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys621 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv624 := &x.ObjectMeta
				yyv624.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv625 := &x.Spec
				yyv625.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv626 := &x.Status
				yyv626.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys621)
		} // end switch yys621
	} // end for yyj621
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj627 int
	var yyb627 bool
	var yyhl627 bool = l >= 0
	yyj627++
	if yyhl627 {
		yyb627 = yyj627 > l
	} else {
		yyb627 = r.CheckBreak()
	}
	if yyb627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj627++
	if yyhl627 {
		yyb627 = yyj627 > l
	} else {
		yyb627 = r.CheckBreak()
	}
	if yyb627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj627++
	if yyhl627 {
		yyb627 = yyj627 > l
	} else {
		yyb627 = r.CheckBreak()
	}
	if yyb627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv630 := &x.ObjectMeta
		yyv630.CodecDecodeSelf(d)
	}
	yyj627++
	if yyhl627 {
		yyb627 = yyj627 > l
	} else {
		yyb627 = r.CheckBreak()
	}
	if yyb627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv631 := &x.Spec
		yyv631.CodecDecodeSelf(d)
	}
	yyj627++
	if yyhl627 {
		yyb627 = yyj627 > l
	} else {
		yyb627 = r.CheckBreak()
	}
	if yyb627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv632 := &x.Status
		yyv632.CodecDecodeSelf(d)
	}
	for {
		yyj627++
		if yyhl627 {
			yyb627 = yyj627 > l
		} else {
			yyb627 = r.CheckBreak()
		}
		if yyb627 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj627-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym633 := z.EncBinary()
		_ = yym633
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep634 := !z.EncBinary()
			yy2arr634 := z.EncBasicHandle().StructToArray
			var yyq634 [4]bool
			_, _, _ = yysep634, yyq634, yy2arr634
			const yyr634 bool = false
			yyq634[0] = x.Kind != ""
			yyq634[1] = x.APIVersion != ""
			yyq634[2] = true
			var yynn634 int
			if yyr634 || yy2arr634 {
				r.EncodeArrayStart(4)
			} else {
				yynn634 = 1
				for _, b := range yyq634 {
					if b {
						yynn634++
					}
				}
				r.EncodeMapStart(yynn634)
				yynn634 = 0
			}
			if yyr634 || yy2arr634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq634[0] {
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq634[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym637 := z.EncBinary()
					_ = yym637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr634 || yy2arr634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq634[1] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq634[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr634 || yy2arr634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq634[2] {
					yy642 := &x.ListMeta
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else if z.HasExtensions() && z.EncExt(yy642) {
					} else {
						z.EncFallback(yy642)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq634[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy644 := &x.ListMeta
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else if z.HasExtensions() && z.EncExt(yy644) {
					} else {
						z.EncFallback(yy644)
					}
				}
			}
			if yyr634 || yy2arr634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym648 := z.EncBinary()
					_ = yym648
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr634 || yy2arr634 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym649 := z.DecBinary()
	_ = yym649
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct650 := r.ContainerType()
		if yyct650 == codecSelferValueTypeMap1234 {
			yyl650 := r.ReadMapStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl650, d)
			}
		} else if yyct650 == codecSelferValueTypeArray1234 {
			yyl650 := r.ReadArrayStart()
			if yyl650 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl650, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys651Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys651Slc
	var yyhl651 bool = l >= 0
	for yyj651 := 0; ; yyj651++ {
		if yyhl651 {
			if yyj651 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys651Slc = r.DecodeBytes(yys651Slc, true, true)
		yys651 := string(yys651Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys651 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv654 := &x.ListMeta
				yym655 := z.DecBinary()
				_ = yym655
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv654) {
				} else {
					z.DecFallback(yyv654, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv656 := &x.Items
				yym657 := z.DecBinary()
				_ = yym657
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv656), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys651)
		} // end switch yys651
	} // end for yyj651
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj658 int
	var yyb658 bool
	var yyhl658 bool = l >= 0
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv661 := &x.ListMeta
		yym662 := z.DecBinary()
		_ = yym662
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv661) {
		} else {
			z.DecFallback(yyv661, false)
		}
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv663 := &x.Items
		yym664 := z.DecBinary()
		_ = yym664
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv663), d)
		}
	}
	for {
		yyj658++
		if yyhl658 {
			yyb658 = yyj658 > l
		} else {
			yyb658 = r.CheckBreak()
		}
		if yyb658 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj658-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym665 := z.EncBinary()
		_ = yym665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep666 := !z.EncBinary()
			yy2arr666 := z.EncBasicHandle().StructToArray
			var yyq666 [4]bool
			_, _, _ = yysep666, yyq666, yy2arr666
			const yyr666 bool = false
			yyq666[0] = x.Kind != ""
			yyq666[1] = x.APIVersion != ""
			yyq666[2] = true
			var yynn666 int
			if yyr666 || yy2arr666 {
				r.EncodeArrayStart(4)
			} else {
				yynn666 = 1
				for _, b := range yyq666 {
					if b {
						yynn666++
					}
				}
				r.EncodeMapStart(yynn666)
				yynn666 = 0
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[0] {
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[1] {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq666[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq666[2] {
					yy674 := &x.ListMeta
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else if z.HasExtensions() && z.EncExt(yy674) {
					} else {
						z.EncFallback(yy674)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq666[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy676 := &x.ListMeta
					yym677 := z.EncBinary()
					_ = yym677
					if false {
					} else if z.HasExtensions() && z.EncExt(yy676) {
					} else {
						z.EncFallback(yy676)
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr666 || yy2arr666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym681 := z.DecBinary()
	_ = yym681
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct682 := r.ContainerType()
		if yyct682 == codecSelferValueTypeMap1234 {
			yyl682 := r.ReadMapStart()
			if yyl682 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl682, d)
			}
		} else if yyct682 == codecSelferValueTypeArray1234 {
			yyl682 := r.ReadArrayStart()
			if yyl682 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl682, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys683Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys683Slc
	var yyhl683 bool = l >= 0
	for yyj683 := 0; ; yyj683++ {
		if yyhl683 {
			if yyj683 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys683Slc = r.DecodeBytes(yys683Slc, true, true)
		yys683 := string(yys683Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys683 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv686 := &x.ListMeta
				yym687 := z.DecBinary()
				_ = yym687
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv686) {
				} else {
					z.DecFallback(yyv686, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv688 := &x.Items
				yym689 := z.DecBinary()
				_ = yym689
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv688), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys683)
		} // end switch yys683
	} // end for yyj683
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj690 int
	var yyb690 bool
	var yyhl690 bool = l >= 0
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv693 := &x.ListMeta
		yym694 := z.DecBinary()
		_ = yym694
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv693) {
		} else {
			z.DecFallback(yyv693, false)
		}
	}
	yyj690++
	if yyhl690 {
		yyb690 = yyj690 > l
	} else {
		yyb690 = r.CheckBreak()
	}
	if yyb690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv695 := &x.Items
		yym696 := z.DecBinary()
		_ = yym696
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv695), d)
		}
	}
	for {
		yyj690++
		if yyhl690 {
			yyb690 = yyj690 > l
		} else {
			yyb690 = r.CheckBreak()
		}
		if yyb690 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj690-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym697 := z.EncBinary()
		_ = yym697
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep698 := !z.EncBinary()
			yy2arr698 := z.EncBasicHandle().StructToArray
			var yyq698 [5]bool
			_, _, _ = yysep698, yyq698, yy2arr698
			const yyr698 bool = false
			yyq698[0] = x.Kind != ""
			yyq698[1] = x.APIVersion != ""
			yyq698[2] = true
			yyq698[3] = true
			yyq698[4] = true
			var yynn698 int
			if yyr698 || yy2arr698 {
				r.EncodeArrayStart(5)
			} else {
				yynn698 = 0
				for _, b := range yyq698 {
					if b {
						yynn698++
					}
				}
				r.EncodeMapStart(yynn698)
				yynn698 = 0
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[0] {
					yym700 := z.EncBinary()
					_ = yym700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq698[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[1] {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq698[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[2] {
					yy706 := &x.ObjectMeta
					yy706.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq698[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy707 := &x.ObjectMeta
					yy707.CodecEncodeSelf(e)
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[3] {
					yy709 := &x.Spec
					yy709.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq698[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy710 := &x.Spec
					yy710.CodecEncodeSelf(e)
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq698[4] {
					yy712 := &x.Status
					yy712.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq698[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy713 := &x.Status
					yy713.CodecEncodeSelf(e)
				}
			}
			if yyr698 || yy2arr698 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym714 := z.DecBinary()
	_ = yym714
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct715 := r.ContainerType()
		if yyct715 == codecSelferValueTypeMap1234 {
			yyl715 := r.ReadMapStart()
			if yyl715 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl715, d)
			}
		} else if yyct715 == codecSelferValueTypeArray1234 {
			yyl715 := r.ReadArrayStart()
			if yyl715 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl715, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys716Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys716Slc
	var yyhl716 bool = l >= 0
	for yyj716 := 0; ; yyj716++ {
		if yyhl716 {
			if yyj716 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys716Slc = r.DecodeBytes(yys716Slc, true, true)
		yys716 := string(yys716Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys716 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv719 := &x.ObjectMeta
				yyv719.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv720 := &x.Spec
				yyv720.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv721 := &x.Status
				yyv721.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys716)
		} // end switch yys716
	} // end for yyj716
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj722 int
	var yyb722 bool
	var yyhl722 bool = l >= 0
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv725 := &x.ObjectMeta
		yyv725.CodecDecodeSelf(d)
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv726 := &x.Spec
		yyv726.CodecDecodeSelf(d)
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv727 := &x.Status
		yyv727.CodecDecodeSelf(d)
	}
	for {
		yyj722++
		if yyhl722 {
			yyb722 = yyj722 > l
		} else {
			yyb722 = r.CheckBreak()
		}
		if yyb722 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj722-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym728 := z.EncBinary()
		_ = yym728
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep729 := !z.EncBinary()
			yy2arr729 := z.EncBasicHandle().StructToArray
			var yyq729 [4]bool
			_, _, _ = yysep729, yyq729, yy2arr729
			const yyr729 bool = false
			yyq729[0] = x.Kind != ""
			yyq729[1] = x.APIVersion != ""
			yyq729[2] = true
			var yynn729 int
			if yyr729 || yy2arr729 {
				r.EncodeArrayStart(4)
			} else {
				yynn729 = 1
				for _, b := range yyq729 {
					if b {
						yynn729++
					}
				}
				r.EncodeMapStart(yynn729)
				yynn729 = 0
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[0] {
					yym731 := z.EncBinary()
					_ = yym731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq729[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[1] {
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq729[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq729[2] {
					yy737 := &x.ListMeta
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else if z.HasExtensions() && z.EncExt(yy737) {
					} else {
						z.EncFallback(yy737)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq729[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy739 := &x.ListMeta
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else if z.HasExtensions() && z.EncExt(yy739) {
					} else {
						z.EncFallback(yy739)
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym743 := z.EncBinary()
					_ = yym743
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr729 || yy2arr729 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym744 := z.DecBinary()
	_ = yym744
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct745 := r.ContainerType()
		if yyct745 == codecSelferValueTypeMap1234 {
			yyl745 := r.ReadMapStart()
			if yyl745 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl745, d)
			}
		} else if yyct745 == codecSelferValueTypeArray1234 {
			yyl745 := r.ReadArrayStart()
			if yyl745 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl745, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys746Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys746Slc
	var yyhl746 bool = l >= 0
	for yyj746 := 0; ; yyj746++ {
		if yyhl746 {
			if yyj746 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys746Slc = r.DecodeBytes(yys746Slc, true, true)
		yys746 := string(yys746Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys746 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv749 := &x.ListMeta
				yym750 := z.DecBinary()
				_ = yym750
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv749) {
				} else {
					z.DecFallback(yyv749, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv751 := &x.Items
				yym752 := z.DecBinary()
				_ = yym752
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv751), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys746)
		} // end switch yys746
	} // end for yyj746
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj753 int
	var yyb753 bool
	var yyhl753 bool = l >= 0
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv756 := &x.ListMeta
		yym757 := z.DecBinary()
		_ = yym757
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv756) {
		} else {
			z.DecFallback(yyv756, false)
		}
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv758 := &x.Items
		yym759 := z.DecBinary()
		_ = yym759
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv758), d)
		}
	}
	for {
		yyj753++
		if yyhl753 {
			yyb753 = yyj753 > l
		} else {
			yyb753 = r.CheckBreak()
		}
		if yyb753 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj753-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym760 := z.EncBinary()
		_ = yym760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep761 := !z.EncBinary()
			yy2arr761 := z.EncBasicHandle().StructToArray
			var yyq761 [5]bool
			_, _, _ = yysep761, yyq761, yy2arr761
			const yyr761 bool = false
			yyq761[0] = x.Parallelism != nil
			yyq761[1] = x.Completions != nil
			yyq761[2] = x.ActiveDeadlineSeconds != nil
			yyq761[3] = x.Selector != nil
			var yynn761 int
			if yyr761 || yy2arr761 {
				r.EncodeArrayStart(5)
			} else {
				yynn761 = 1
				for _, b := range yyq761 {
					if b {
						yynn761++
					}
				}
				r.EncodeMapStart(yynn761)
				yynn761 = 0
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy763 := *x.Parallelism
						yym764 := z.EncBinary()
						_ = yym764
						if false {
						} else {
							r.EncodeInt(int64(yy763))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq761[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy765 := *x.Parallelism
						yym766 := z.EncBinary()
						_ = yym766
						if false {
						} else {
							r.EncodeInt(int64(yy765))
						}
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy768 := *x.Completions
						yym769 := z.EncBinary()
						_ = yym769
						if false {
						} else {
							r.EncodeInt(int64(yy768))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq761[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy770 := *x.Completions
						yym771 := z.EncBinary()
						_ = yym771
						if false {
						} else {
							r.EncodeInt(int64(yy770))
						}
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy773 := *x.ActiveDeadlineSeconds
						yym774 := z.EncBinary()
						_ = yym774
						if false {
						} else {
							r.EncodeInt(int64(yy773))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy775 := *x.ActiveDeadlineSeconds
						yym776 := z.EncBinary()
						_ = yym776
						if false {
						} else {
							r.EncodeInt(int64(yy775))
						}
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq761[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy779 := &x.Template
				yy779.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy780 := &x.Template
				yy780.CodecEncodeSelf(e)
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym781 := z.DecBinary()
	_ = yym781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct782 := r.ContainerType()
		if yyct782 == codecSelferValueTypeMap1234 {
			yyl782 := r.ReadMapStart()
			if yyl782 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl782, d)
			}
		} else if yyct782 == codecSelferValueTypeArray1234 {
			yyl782 := r.ReadArrayStart()
			if yyl782 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys783Slc
	var yyhl783 bool = l >= 0
	for yyj783 := 0; ; yyj783++ {
		if yyhl783 {
			if yyj783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys783Slc = r.DecodeBytes(yys783Slc, true, true)
		yys783 := string(yys783Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys783 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym785 := z.DecBinary()
				_ = yym785
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym787 := z.DecBinary()
				_ = yym787
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym789 := z.DecBinary()
				_ = yym789
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv791 := &x.Template
				yyv791.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys783)
		} // end switch yys783
	} // end for yyj783
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj792 int
	var yyb792 bool
	var yyhl792 bool = l >= 0
	yyj792++
	if yyhl792 {
		yyb792 = yyj792 > l
	} else {
		yyb792 = r.CheckBreak()
	}
	if yyb792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym794 := z.DecBinary()
		_ = yym794
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj792++
	if yyhl792 {
		yyb792 = yyj792 > l
	} else {
		yyb792 = r.CheckBreak()
	}
	if yyb792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym796 := z.DecBinary()
		_ = yym796
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj792++
	if yyhl792 {
		yyb792 = yyj792 > l
	} else {
		yyb792 = r.CheckBreak()
	}
	if yyb792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym798 := z.DecBinary()
		_ = yym798
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj792++
	if yyhl792 {
		yyb792 = yyj792 > l
	} else {
		yyb792 = r.CheckBreak()
	}
	if yyb792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj792++
	if yyhl792 {
		yyb792 = yyj792 > l
	} else {
		yyb792 = r.CheckBreak()
	}
	if yyb792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv800 := &x.Template
		yyv800.CodecDecodeSelf(d)
	}
	for {
		yyj792++
		if yyhl792 {
			yyb792 = yyj792 > l
		} else {
			yyb792 = r.CheckBreak()
		}
		if yyb792 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj792-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym801 := z.EncBinary()
		_ = yym801
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep802 := !z.EncBinary()
			yy2arr802 := z.EncBasicHandle().StructToArray
			var yyq802 [6]bool
			_, _, _ = yysep802, yyq802, yy2arr802
			const yyr802 bool = false
			yyq802[0] = len(x.Conditions) != 0
			yyq802[1] = x.StartTime != nil
			yyq802[2] = x.CompletionTime != nil
			yyq802[3] = x.Active != 0
			yyq802[4] = x.Succeeded != 0
			yyq802[5] = x.Failed != 0
			var yynn802 int
			if yyr802 || yy2arr802 {
				r.EncodeArrayStart(6)
			} else {
				yynn802 = 0
				for _, b := range yyq802 {
					if b {
						yynn802++
					}
				}
				r.EncodeMapStart(yynn802)
				yynn802 = 0
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq802[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym804 := z.EncBinary()
						_ = yym804
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq802[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym805 := z.EncBinary()
						_ = yym805
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq802[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym807 := z.EncBinary()
						_ = yym807
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym807 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym807 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq802[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym808 := z.EncBinary()
						_ = yym808
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym808 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym808 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq802[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym810 := z.EncBinary()
						_ = yym810
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym810 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym810 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq802[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym811 := z.EncBinary()
						_ = yym811
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym811 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym811 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq802[3] {
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq802[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq802[4] {
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq802[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym817 := z.EncBinary()
					_ = yym817
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq802[5] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq802[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr802 || yy2arr802 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym821 := z.DecBinary()
	_ = yym821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct822 := r.ContainerType()
		if yyct822 == codecSelferValueTypeMap1234 {
			yyl822 := r.ReadMapStart()
			if yyl822 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl822, d)
			}
		} else if yyct822 == codecSelferValueTypeArray1234 {
			yyl822 := r.ReadArrayStart()
			if yyl822 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys823Slc
	var yyhl823 bool = l >= 0
	for yyj823 := 0; ; yyj823++ {
		if yyhl823 {
			if yyj823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys823Slc = r.DecodeBytes(yys823Slc, true, true)
		yys823 := string(yys823Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys823 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv824 := &x.Conditions
				yym825 := z.DecBinary()
				_ = yym825
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv824), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym827 := z.DecBinary()
				_ = yym827
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym827 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym827 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym829 := z.DecBinary()
				_ = yym829
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym829 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym829 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys823)
		} // end switch yys823
	} // end for yyj823
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj833 int
	var yyb833 bool
	var yyhl833 bool = l >= 0
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv834 := &x.Conditions
		yym835 := z.DecBinary()
		_ = yym835
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv834), d)
		}
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym837 := z.DecBinary()
		_ = yym837
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym837 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym837 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym839 := z.DecBinary()
		_ = yym839
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym839 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym839 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj833++
	if yyhl833 {
		yyb833 = yyj833 > l
	} else {
		yyb833 = r.CheckBreak()
	}
	if yyb833 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj833++
		if yyhl833 {
			yyb833 = yyj833 > l
		} else {
			yyb833 = r.CheckBreak()
		}
		if yyb833 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj833-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym843 := z.EncBinary()
	_ = yym843
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym844 := z.DecBinary()
	_ = yym844
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [6]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[2] = true
			yyq846[3] = true
			yyq846[4] = x.Reason != ""
			yyq846[5] = x.Message != ""
			var yynn846 int
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(6)
			} else {
				yynn846 = 2
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
				yynn846 = 0
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym849 := z.EncBinary()
				_ = yym849
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym850 := z.EncBinary()
				_ = yym850
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[2] {
					yy852 := &x.LastProbeTime
					yym853 := z.EncBinary()
					_ = yym853
					if false {
					} else if z.HasExtensions() && z.EncExt(yy852) {
					} else if yym853 {
						z.EncBinaryMarshal(yy852)
					} else if !yym853 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy852)
					} else {
						z.EncFallback(yy852)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq846[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy854 := &x.LastProbeTime
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else if z.HasExtensions() && z.EncExt(yy854) {
					} else if yym855 {
						z.EncBinaryMarshal(yy854)
					} else if !yym855 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy854)
					} else {
						z.EncFallback(yy854)
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[3] {
					yy857 := &x.LastTransitionTime
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else if z.HasExtensions() && z.EncExt(yy857) {
					} else if yym858 {
						z.EncBinaryMarshal(yy857)
					} else if !yym858 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy857)
					} else {
						z.EncFallback(yy857)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq846[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy859 := &x.LastTransitionTime
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else if z.HasExtensions() && z.EncExt(yy859) {
					} else if yym860 {
						z.EncBinaryMarshal(yy859)
					} else if !yym860 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy859)
					} else {
						z.EncFallback(yy859)
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[4] {
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[5] {
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym866 := z.EncBinary()
					_ = yym866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym867 := z.DecBinary()
	_ = yym867
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct868 := r.ContainerType()
		if yyct868 == codecSelferValueTypeMap1234 {
			yyl868 := r.ReadMapStart()
			if yyl868 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl868, d)
			}
		} else if yyct868 == codecSelferValueTypeArray1234 {
			yyl868 := r.ReadArrayStart()
			if yyl868 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl868, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys869Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys869Slc
	var yyhl869 bool = l >= 0
	for yyj869 := 0; ; yyj869++ {
		if yyhl869 {
			if yyj869 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys869Slc = r.DecodeBytes(yys869Slc, true, true)
		yys869 := string(yys869Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys869 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv872 := &x.LastProbeTime
				yym873 := z.DecBinary()
				_ = yym873
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv872) {
				} else if yym873 {
					z.DecBinaryUnmarshal(yyv872)
				} else if !yym873 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv872)
				} else {
					z.DecFallback(yyv872, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv874 := &x.LastTransitionTime
				yym875 := z.DecBinary()
				_ = yym875
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv874) {
				} else if yym875 {
					z.DecBinaryUnmarshal(yyv874)
				} else if !yym875 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv874)
				} else {
					z.DecFallback(yyv874, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys869)
		} // end switch yys869
	} // end for yyj869
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj878 int
	var yyb878 bool
	var yyhl878 bool = l >= 0
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv881 := &x.LastProbeTime
		yym882 := z.DecBinary()
		_ = yym882
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv881) {
		} else if yym882 {
			z.DecBinaryUnmarshal(yyv881)
		} else if !yym882 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv881)
		} else {
			z.DecFallback(yyv881, false)
		}
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv883 := &x.LastTransitionTime
		yym884 := z.DecBinary()
		_ = yym884
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv883) {
		} else if yym884 {
			z.DecBinaryUnmarshal(yyv883)
		} else if !yym884 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv883)
		} else {
			z.DecFallback(yyv883, false)
		}
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj878++
		if yyhl878 {
			yyb878 = yyj878 > l
		} else {
			yyb878 = r.CheckBreak()
		}
		if yyb878 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj878-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym887 := z.EncBinary()
		_ = yym887
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep888 := !z.EncBinary()
			yy2arr888 := z.EncBasicHandle().StructToArray
			var yyq888 [5]bool
			_, _, _ = yysep888, yyq888, yy2arr888
			const yyr888 bool = false
			yyq888[0] = x.Kind != ""
			yyq888[1] = x.APIVersion != ""
			yyq888[2] = true
			yyq888[3] = true
			yyq888[4] = true
			var yynn888 int
			if yyr888 || yy2arr888 {
				r.EncodeArrayStart(5)
			} else {
				yynn888 = 0
				for _, b := range yyq888 {
					if b {
						yynn888++
					}
				}
				r.EncodeMapStart(yynn888)
				yynn888 = 0
			}
			if yyr888 || yy2arr888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq888[0] {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq888[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr888 || yy2arr888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq888[1] {
					yym893 := z.EncBinary()
					_ = yym893
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq888[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym894 := z.EncBinary()
					_ = yym894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr888 || yy2arr888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq888[2] {
					yy896 := &x.ObjectMeta
					yy896.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq888[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy897 := &x.ObjectMeta
					yy897.CodecEncodeSelf(e)
				}
			}
			if yyr888 || yy2arr888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq888[3] {
					yy899 := &x.Spec
					yy899.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq888[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy900 := &x.Spec
					yy900.CodecEncodeSelf(e)
				}
			}
			if yyr888 || yy2arr888 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq888[4] {
					yy902 := &x.Status
					yy902.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq888[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy903 := &x.Status
					yy903.CodecEncodeSelf(e)
				}
			}
			if yyr888 || yy2arr888 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym904 := z.DecBinary()
	_ = yym904
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct905 := r.ContainerType()
		if yyct905 == codecSelferValueTypeMap1234 {
			yyl905 := r.ReadMapStart()
			if yyl905 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl905, d)
			}
		} else if yyct905 == codecSelferValueTypeArray1234 {
			yyl905 := r.ReadArrayStart()
			if yyl905 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl905, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys906Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys906Slc
	var yyhl906 bool = l >= 0
	for yyj906 := 0; ; yyj906++ {
		if yyhl906 {
			if yyj906 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys906Slc = r.DecodeBytes(yys906Slc, true, true)
		yys906 := string(yys906Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys906 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv909 := &x.ObjectMeta
				yyv909.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv910 := &x.Spec
				yyv910.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv911 := &x.Status
				yyv911.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys906)
		} // end switch yys906
	} // end for yyj906
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj912 int
	var yyb912 bool
	var yyhl912 bool = l >= 0
	yyj912++
	if yyhl912 {
		yyb912 = yyj912 > l
	} else {
		yyb912 = r.CheckBreak()
	}
	if yyb912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj912++
	if yyhl912 {
		yyb912 = yyj912 > l
	} else {
		yyb912 = r.CheckBreak()
	}
	if yyb912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj912++
	if yyhl912 {
		yyb912 = yyj912 > l
	} else {
		yyb912 = r.CheckBreak()
	}
	if yyb912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv915 := &x.ObjectMeta
		yyv915.CodecDecodeSelf(d)
	}
	yyj912++
	if yyhl912 {
		yyb912 = yyj912 > l
	} else {
		yyb912 = r.CheckBreak()
	}
	if yyb912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv916 := &x.Spec
		yyv916.CodecDecodeSelf(d)
	}
	yyj912++
	if yyhl912 {
		yyb912 = yyj912 > l
	} else {
		yyb912 = r.CheckBreak()
	}
	if yyb912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv917 := &x.Status
		yyv917.CodecDecodeSelf(d)
	}
	for {
		yyj912++
		if yyhl912 {
			yyb912 = yyj912 > l
		} else {
			yyb912 = r.CheckBreak()
		}
		if yyb912 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj912-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym918 := z.EncBinary()
		_ = yym918
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep919 := !z.EncBinary()
			yy2arr919 := z.EncBasicHandle().StructToArray
			var yyq919 [4]bool
			_, _, _ = yysep919, yyq919, yy2arr919
			const yyr919 bool = false
			yyq919[0] = x.Kind != ""
			yyq919[1] = x.APIVersion != ""
			yyq919[2] = true
			var yynn919 int
			if yyr919 || yy2arr919 {
				r.EncodeArrayStart(4)
			} else {
				yynn919 = 1
				for _, b := range yyq919 {
					if b {
						yynn919++
					}
				}
				r.EncodeMapStart(yynn919)
				yynn919 = 0
			}
			if yyr919 || yy2arr919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq919[0] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq919[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr919 || yy2arr919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq919[1] {
					yym924 := z.EncBinary()
					_ = yym924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq919[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym925 := z.EncBinary()
					_ = yym925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr919 || yy2arr919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq919[2] {
					yy927 := &x.ListMeta
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else if z.HasExtensions() && z.EncExt(yy927) {
					} else {
						z.EncFallback(yy927)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq919[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy929 := &x.ListMeta
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else if z.HasExtensions() && z.EncExt(yy929) {
					} else {
						z.EncFallback(yy929)
					}
				}
			}
			if yyr919 || yy2arr919 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym932 := z.EncBinary()
					_ = yym932
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym933 := z.EncBinary()
					_ = yym933
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr919 || yy2arr919 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym934 := z.DecBinary()
	_ = yym934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct935 := r.ContainerType()
		if yyct935 == codecSelferValueTypeMap1234 {
			yyl935 := r.ReadMapStart()
			if yyl935 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl935, d)
			}
		} else if yyct935 == codecSelferValueTypeArray1234 {
			yyl935 := r.ReadArrayStart()
			if yyl935 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys936Slc
	var yyhl936 bool = l >= 0
	for yyj936 := 0; ; yyj936++ {
		if yyhl936 {
			if yyj936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys936Slc = r.DecodeBytes(yys936Slc, true, true)
		yys936 := string(yys936Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys936 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv939 := &x.ListMeta
				yym940 := z.DecBinary()
				_ = yym940
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv939) {
				} else {
					z.DecFallback(yyv939, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv941 := &x.Items
				yym942 := z.DecBinary()
				_ = yym942
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv941), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys936)
		} // end switch yys936
	} // end for yyj936
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj943 int
	var yyb943 bool
	var yyhl943 bool = l >= 0
	yyj943++
	if yyhl943 {
		yyb943 = yyj943 > l
	} else {
		yyb943 = r.CheckBreak()
	}
	if yyb943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj943++
	if yyhl943 {
		yyb943 = yyj943 > l
	} else {
		yyb943 = r.CheckBreak()
	}
	if yyb943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj943++
	if yyhl943 {
		yyb943 = yyj943 > l
	} else {
		yyb943 = r.CheckBreak()
	}
	if yyb943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv946 := &x.ListMeta
		yym947 := z.DecBinary()
		_ = yym947
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv946) {
		} else {
			z.DecFallback(yyv946, false)
		}
	}
	yyj943++
	if yyhl943 {
		yyb943 = yyj943 > l
	} else {
		yyb943 = r.CheckBreak()
	}
	if yyb943 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv948 := &x.Items
		yym949 := z.DecBinary()
		_ = yym949
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv948), d)
		}
	}
	for {
		yyj943++
		if yyhl943 {
			yyb943 = yyj943 > l
		} else {
			yyb943 = r.CheckBreak()
		}
		if yyb943 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj943-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym950 := z.EncBinary()
		_ = yym950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep951 := !z.EncBinary()
			yy2arr951 := z.EncBasicHandle().StructToArray
			var yyq951 [2]bool
			_, _, _ = yysep951, yyq951, yy2arr951
			const yyr951 bool = false
			yyq951[0] = x.Backend != nil
			yyq951[1] = len(x.Rules) != 0
			var yynn951 int
			if yyr951 || yy2arr951 {
				r.EncodeArrayStart(2)
			} else {
				yynn951 = 0
				for _, b := range yyq951 {
					if b {
						yynn951++
					}
				}
				r.EncodeMapStart(yynn951)
				yynn951 = 0
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq951[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq951[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym954 := z.EncBinary()
						_ = yym954
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq951[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym955 := z.EncBinary()
						_ = yym955
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr951 || yy2arr951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym956 := z.DecBinary()
	_ = yym956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct957 := r.ContainerType()
		if yyct957 == codecSelferValueTypeMap1234 {
			yyl957 := r.ReadMapStart()
			if yyl957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl957, d)
			}
		} else if yyct957 == codecSelferValueTypeArray1234 {
			yyl957 := r.ReadArrayStart()
			if yyl957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys958Slc
	var yyhl958 bool = l >= 0
	for yyj958 := 0; ; yyj958++ {
		if yyhl958 {
			if yyj958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys958Slc = r.DecodeBytes(yys958Slc, true, true)
		yys958 := string(yys958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys958 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv960 := &x.Rules
				yym961 := z.DecBinary()
				_ = yym961
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv960), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys958)
		} // end switch yys958
	} // end for yyj958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj962 int
	var yyb962 bool
	var yyhl962 bool = l >= 0
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj962++
	if yyhl962 {
		yyb962 = yyj962 > l
	} else {
		yyb962 = r.CheckBreak()
	}
	if yyb962 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv964 := &x.Rules
		yym965 := z.DecBinary()
		_ = yym965
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv964), d)
		}
	}
	for {
		yyj962++
		if yyhl962 {
			yyb962 = yyj962 > l
		} else {
			yyb962 = r.CheckBreak()
		}
		if yyb962 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj962-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym966 := z.EncBinary()
		_ = yym966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep967 := !z.EncBinary()
			yy2arr967 := z.EncBasicHandle().StructToArray
			var yyq967 [1]bool
			_, _, _ = yysep967, yyq967, yy2arr967
			const yyr967 bool = false
			yyq967[0] = true
			var yynn967 int
			if yyr967 || yy2arr967 {
				r.EncodeArrayStart(1)
			} else {
				yynn967 = 0
				for _, b := range yyq967 {
					if b {
						yynn967++
					}
				}
				r.EncodeMapStart(yynn967)
				yynn967 = 0
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq967[0] {
					yy969 := &x.LoadBalancer
					yy969.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq967[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy970 := &x.LoadBalancer
					yy970.CodecEncodeSelf(e)
				}
			}
			if yyr967 || yy2arr967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym971 := z.DecBinary()
	_ = yym971
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct972 := r.ContainerType()
		if yyct972 == codecSelferValueTypeMap1234 {
			yyl972 := r.ReadMapStart()
			if yyl972 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl972, d)
			}
		} else if yyct972 == codecSelferValueTypeArray1234 {
			yyl972 := r.ReadArrayStart()
			if yyl972 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl972, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys973Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys973Slc
	var yyhl973 bool = l >= 0
	for yyj973 := 0; ; yyj973++ {
		if yyhl973 {
			if yyj973 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys973Slc = r.DecodeBytes(yys973Slc, true, true)
		yys973 := string(yys973Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys973 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv974 := &x.LoadBalancer
				yyv974.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys973)
		} // end switch yys973
	} // end for yyj973
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj975 int
	var yyb975 bool
	var yyhl975 bool = l >= 0
	yyj975++
	if yyhl975 {
		yyb975 = yyj975 > l
	} else {
		yyb975 = r.CheckBreak()
	}
	if yyb975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv976 := &x.LoadBalancer
		yyv976.CodecDecodeSelf(d)
	}
	for {
		yyj975++
		if yyhl975 {
			yyb975 = yyj975 > l
		} else {
			yyb975 = r.CheckBreak()
		}
		if yyb975 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj975-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym977 := z.EncBinary()
		_ = yym977
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep978 := !z.EncBinary()
			yy2arr978 := z.EncBasicHandle().StructToArray
			var yyq978 [2]bool
			_, _, _ = yysep978, yyq978, yy2arr978
			const yyr978 bool = false
			yyq978[0] = x.Host != ""
			yyq978[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn978 int
			if yyr978 || yy2arr978 {
				r.EncodeArrayStart(2)
			} else {
				yynn978 = 0
				for _, b := range yyq978 {
					if b {
						yynn978++
					}
				}
				r.EncodeMapStart(yynn978)
				yynn978 = 0
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq978[0] {
					yym980 := z.EncBinary()
					_ = yym980
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq978[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym981 := z.EncBinary()
					_ = yym981
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn982 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn982 = true
				goto LABEL982
			}
		LABEL982:
			if yyr978 || yy2arr978 {
				if yyn982 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq978[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq978[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn982 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr978 || yy2arr978 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym983 := z.DecBinary()
	_ = yym983
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct984 := r.ContainerType()
		if yyct984 == codecSelferValueTypeMap1234 {
			yyl984 := r.ReadMapStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl984, d)
			}
		} else if yyct984 == codecSelferValueTypeArray1234 {
			yyl984 := r.ReadArrayStart()
			if yyl984 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl984, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys985Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys985Slc
	var yyhl985 bool = l >= 0
	for yyj985 := 0; ; yyj985++ {
		if yyhl985 {
			if yyj985 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys985Slc = r.DecodeBytes(yys985Slc, true, true)
		yys985 := string(yys985Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys985 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys985)
		} // end switch yys985
	} // end for yyj985
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj988 int
	var yyb988 bool
	var yyhl988 bool = l >= 0
	yyj988++
	if yyhl988 {
		yyb988 = yyj988 > l
	} else {
		yyb988 = r.CheckBreak()
	}
	if yyb988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj988++
	if yyhl988 {
		yyb988 = yyj988 > l
	} else {
		yyb988 = r.CheckBreak()
	}
	if yyb988 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj988++
		if yyhl988 {
			yyb988 = yyj988 > l
		} else {
			yyb988 = r.CheckBreak()
		}
		if yyb988 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj988-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym991 := z.EncBinary()
		_ = yym991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep992 := !z.EncBinary()
			yy2arr992 := z.EncBasicHandle().StructToArray
			var yyq992 [1]bool
			_, _, _ = yysep992, yyq992, yy2arr992
			const yyr992 bool = false
			yyq992[0] = x.HTTP != nil
			var yynn992 int
			if yyr992 || yy2arr992 {
				r.EncodeArrayStart(1)
			} else {
				yynn992 = 0
				for _, b := range yyq992 {
					if b {
						yynn992++
					}
				}
				r.EncodeMapStart(yynn992)
				yynn992 = 0
			}
			if yyr992 || yy2arr992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq992[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq992[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr992 || yy2arr992 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct995 := r.ContainerType()
		if yyct995 == codecSelferValueTypeMap1234 {
			yyl995 := r.ReadMapStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl995, d)
			}
		} else if yyct995 == codecSelferValueTypeArray1234 {
			yyl995 := r.ReadArrayStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl995, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys996Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys996Slc
	var yyhl996 bool = l >= 0
	for yyj996 := 0; ; yyj996++ {
		if yyhl996 {
			if yyj996 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys996Slc = r.DecodeBytes(yys996Slc, true, true)
		yys996 := string(yys996Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys996 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys996)
		} // end switch yys996
	} // end for yyj996
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj998 int
	var yyb998 bool
	var yyhl998 bool = l >= 0
	yyj998++
	if yyhl998 {
		yyb998 = yyj998 > l
	} else {
		yyb998 = r.CheckBreak()
	}
	if yyb998 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj998++
		if yyhl998 {
			yyb998 = yyj998 > l
		} else {
			yyb998 = r.CheckBreak()
		}
		if yyb998 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj998-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1000 := z.EncBinary()
		_ = yym1000
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1001 := !z.EncBinary()
			yy2arr1001 := z.EncBasicHandle().StructToArray
			var yyq1001 [1]bool
			_, _, _ = yysep1001, yyq1001, yy2arr1001
			const yyr1001 bool = false
			var yynn1001 int
			if yyr1001 || yy2arr1001 {
				r.EncodeArrayStart(1)
			} else {
				yynn1001 = 1
				for _, b := range yyq1001 {
					if b {
						yynn1001++
					}
				}
				r.EncodeMapStart(yynn1001)
				yynn1001 = 0
			}
			if yyr1001 || yy2arr1001 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1004 := z.EncBinary()
					_ = yym1004
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1001 || yy2arr1001 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1006 := r.ContainerType()
		if yyct1006 == codecSelferValueTypeMap1234 {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if yyct1006 == codecSelferValueTypeArray1234 {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1007 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1008 := &x.Paths
				yym1009 := z.DecBinary()
				_ = yym1009
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1008), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1010 int
	var yyb1010 bool
	var yyhl1010 bool = l >= 0
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1011 := &x.Paths
		yym1012 := z.DecBinary()
		_ = yym1012
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1011), d)
		}
	}
	for {
		yyj1010++
		if yyhl1010 {
			yyb1010 = yyj1010 > l
		} else {
			yyb1010 = r.CheckBreak()
		}
		if yyb1010 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1010-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1013 := z.EncBinary()
		_ = yym1013
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1014 := !z.EncBinary()
			yy2arr1014 := z.EncBasicHandle().StructToArray
			var yyq1014 [2]bool
			_, _, _ = yysep1014, yyq1014, yy2arr1014
			const yyr1014 bool = false
			yyq1014[0] = x.Path != ""
			var yynn1014 int
			if yyr1014 || yy2arr1014 {
				r.EncodeArrayStart(2)
			} else {
				yynn1014 = 1
				for _, b := range yyq1014 {
					if b {
						yynn1014++
					}
				}
				r.EncodeMapStart(yynn1014)
				yynn1014 = 0
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1014[0] {
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1014[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1019 := &x.Backend
				yy1019.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1020 := &x.Backend
				yy1020.CodecEncodeSelf(e)
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1022 := r.ContainerType()
		if yyct1022 == codecSelferValueTypeMap1234 {
			yyl1022 := r.ReadMapStart()
			if yyl1022 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1022, d)
			}
		} else if yyct1022 == codecSelferValueTypeArray1234 {
			yyl1022 := r.ReadArrayStart()
			if yyl1022 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1022, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1023Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1023Slc
	var yyhl1023 bool = l >= 0
	for yyj1023 := 0; ; yyj1023++ {
		if yyhl1023 {
			if yyj1023 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1023Slc = r.DecodeBytes(yys1023Slc, true, true)
		yys1023 := string(yys1023Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1023 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1025 := &x.Backend
				yyv1025.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1023)
		} // end switch yys1023
	} // end for yyj1023
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1026 int
	var yyb1026 bool
	var yyhl1026 bool = l >= 0
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1028 := &x.Backend
		yyv1028.CodecDecodeSelf(d)
	}
	for {
		yyj1026++
		if yyhl1026 {
			yyb1026 = yyj1026 > l
		} else {
			yyb1026 = r.CheckBreak()
		}
		if yyb1026 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1026-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1029 := z.EncBinary()
		_ = yym1029
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1030 := !z.EncBinary()
			yy2arr1030 := z.EncBasicHandle().StructToArray
			var yyq1030 [2]bool
			_, _, _ = yysep1030, yyq1030, yy2arr1030
			const yyr1030 bool = false
			var yynn1030 int
			if yyr1030 || yy2arr1030 {
				r.EncodeArrayStart(2)
			} else {
				yynn1030 = 2
				for _, b := range yyq1030 {
					if b {
						yynn1030++
					}
				}
				r.EncodeMapStart(yynn1030)
				yynn1030 = 0
			}
			if yyr1030 || yy2arr1030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1032 := z.EncBinary()
				_ = yym1032
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1033 := z.EncBinary()
				_ = yym1033
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1030 || yy2arr1030 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1035 := &x.ServicePort
				yym1036 := z.EncBinary()
				_ = yym1036
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1035) {
				} else if !yym1036 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1035)
				} else {
					z.EncFallback(yy1035)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1037 := &x.ServicePort
				yym1038 := z.EncBinary()
				_ = yym1038
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1037) {
				} else if !yym1038 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1037)
				} else {
					z.EncFallback(yy1037)
				}
			}
			if yyr1030 || yy2arr1030 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1039 := z.DecBinary()
	_ = yym1039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1040 := r.ContainerType()
		if yyct1040 == codecSelferValueTypeMap1234 {
			yyl1040 := r.ReadMapStart()
			if yyl1040 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1040, d)
			}
		} else if yyct1040 == codecSelferValueTypeArray1234 {
			yyl1040 := r.ReadArrayStart()
			if yyl1040 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1041Slc
	var yyhl1041 bool = l >= 0
	for yyj1041 := 0; ; yyj1041++ {
		if yyhl1041 {
			if yyj1041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1041Slc = r.DecodeBytes(yys1041Slc, true, true)
		yys1041 := string(yys1041Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1041 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_intstr.IntOrString{}
			} else {
				yyv1043 := &x.ServicePort
				yym1044 := z.DecBinary()
				_ = yym1044
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1043) {
				} else if !yym1044 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1043)
				} else {
					z.DecFallback(yyv1043, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1041)
		} // end switch yys1041
	} // end for yyj1041
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1045 int
	var yyb1045 bool
	var yyhl1045 bool = l >= 0
	yyj1045++
	if yyhl1045 {
		yyb1045 = yyj1045 > l
	} else {
		yyb1045 = r.CheckBreak()
	}
	if yyb1045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1045++
	if yyhl1045 {
		yyb1045 = yyj1045 > l
	} else {
		yyb1045 = r.CheckBreak()
	}
	if yyb1045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_intstr.IntOrString{}
	} else {
		yyv1047 := &x.ServicePort
		yym1048 := z.DecBinary()
		_ = yym1048
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1047) {
		} else if !yym1048 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1047)
		} else {
			z.DecFallback(yyv1047, false)
		}
	}
	for {
		yyj1045++
		if yyhl1045 {
			yyb1045 = yyj1045 > l
		} else {
			yyb1045 = r.CheckBreak()
		}
		if yyb1045 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1045-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1049 := z.EncBinary()
	_ = yym1049
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1050 := z.DecBinary()
	_ = yym1050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1051 := z.EncBinary()
		_ = yym1051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1052 := !z.EncBinary()
			yy2arr1052 := z.EncBasicHandle().StructToArray
			var yyq1052 [2]bool
			_, _, _ = yysep1052, yyq1052, yy2arr1052
			const yyr1052 bool = false
			var yynn1052 int
			if yyr1052 || yy2arr1052 {
				r.EncodeArrayStart(2)
			} else {
				yynn1052 = 2
				for _, b := range yyq1052 {
					if b {
						yynn1052++
					}
				}
				r.EncodeMapStart(yynn1052)
				yynn1052 = 0
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1055 := z.EncBinary()
				_ = yym1055
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1056 := z.EncBinary()
				_ = yym1056
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1057 := z.DecBinary()
	_ = yym1057
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1058 := r.ContainerType()
		if yyct1058 == codecSelferValueTypeMap1234 {
			yyl1058 := r.ReadMapStart()
			if yyl1058 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1058, d)
			}
		} else if yyct1058 == codecSelferValueTypeArray1234 {
			yyl1058 := r.ReadArrayStart()
			if yyl1058 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1058, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1059Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1059Slc
	var yyhl1059 bool = l >= 0
	for yyj1059 := 0; ; yyj1059++ {
		if yyhl1059 {
			if yyj1059 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1059Slc = r.DecodeBytes(yys1059Slc, true, true)
		yys1059 := string(yys1059Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1059 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1059)
		} // end switch yys1059
	} // end for yyj1059
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1062 int
	var yyb1062 bool
	var yyhl1062 bool = l >= 0
	yyj1062++
	if yyhl1062 {
		yyb1062 = yyj1062 > l
	} else {
		yyb1062 = r.CheckBreak()
	}
	if yyb1062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1062++
	if yyhl1062 {
		yyb1062 = yyj1062 > l
	} else {
		yyb1062 = r.CheckBreak()
	}
	if yyb1062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1062++
		if yyhl1062 {
			yyb1062 = yyj1062 > l
		} else {
			yyb1062 = r.CheckBreak()
		}
		if yyb1062 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1062-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1065 := z.EncBinary()
		_ = yym1065
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1066 := !z.EncBinary()
			yy2arr1066 := z.EncBasicHandle().StructToArray
			var yyq1066 [3]bool
			_, _, _ = yysep1066, yyq1066, yy2arr1066
			const yyr1066 bool = false
			var yynn1066 int
			if yyr1066 || yy2arr1066 {
				r.EncodeArrayStart(3)
			} else {
				yynn1066 = 3
				for _, b := range yyq1066 {
					if b {
						yynn1066++
					}
				}
				r.EncodeMapStart(yynn1066)
				yynn1066 = 0
			}
			if yyr1066 || yy2arr1066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1068 := z.EncBinary()
				_ = yym1068
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1069 := z.EncBinary()
				_ = yym1069
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1066 || yy2arr1066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1071 := z.EncBinary()
				_ = yym1071
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1072 := z.EncBinary()
				_ = yym1072
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1066 || yy2arr1066 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1075 := z.EncBinary()
					_ = yym1075
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1066 || yy2arr1066 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1076 := z.DecBinary()
	_ = yym1076
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1077 := r.ContainerType()
		if yyct1077 == codecSelferValueTypeMap1234 {
			yyl1077 := r.ReadMapStart()
			if yyl1077 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1077, d)
			}
		} else if yyct1077 == codecSelferValueTypeArray1234 {
			yyl1077 := r.ReadArrayStart()
			if yyl1077 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1077, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1078Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1078Slc
	var yyhl1078 bool = l >= 0
	for yyj1078 := 0; ; yyj1078++ {
		if yyhl1078 {
			if yyj1078 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1078Slc = r.DecodeBytes(yys1078Slc, true, true)
		yys1078 := string(yys1078Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1078 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1081 := &x.TargetUtilization
				yym1082 := z.DecBinary()
				_ = yym1082
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1081), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1078)
		} // end switch yys1078
	} // end for yyj1078
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1083 int
	var yyb1083 bool
	var yyhl1083 bool = l >= 0
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1083++
	if yyhl1083 {
		yyb1083 = yyj1083 > l
	} else {
		yyb1083 = r.CheckBreak()
	}
	if yyb1083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1086 := &x.TargetUtilization
		yym1087 := z.DecBinary()
		_ = yym1087
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1086), d)
		}
	}
	for {
		yyj1083++
		if yyhl1083 {
			yyb1083 = yyj1083 > l
		} else {
			yyb1083 = r.CheckBreak()
		}
		if yyb1083 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1083-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1088 := z.EncBinary()
		_ = yym1088
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1089 := !z.EncBinary()
			yy2arr1089 := z.EncBasicHandle().StructToArray
			var yyq1089 [4]bool
			_, _, _ = yysep1089, yyq1089, yy2arr1089
			const yyr1089 bool = false
			yyq1089[0] = x.Kind != ""
			yyq1089[1] = x.APIVersion != ""
			yyq1089[2] = true
			yyq1089[3] = true
			var yynn1089 int
			if yyr1089 || yy2arr1089 {
				r.EncodeArrayStart(4)
			} else {
				yynn1089 = 0
				for _, b := range yyq1089 {
					if b {
						yynn1089++
					}
				}
				r.EncodeMapStart(yynn1089)
				yynn1089 = 0
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[0] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1089[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[1] {
					yym1094 := z.EncBinary()
					_ = yym1094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1089[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[2] {
					yy1097 := &x.ObjectMeta
					yy1097.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1098 := &x.ObjectMeta
					yy1098.CodecEncodeSelf(e)
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[3] {
					yy1100 := &x.Spec
					yy1100.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1089[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1101 := &x.Spec
					yy1101.CodecEncodeSelf(e)
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1102 := z.DecBinary()
	_ = yym1102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1103 := r.ContainerType()
		if yyct1103 == codecSelferValueTypeMap1234 {
			yyl1103 := r.ReadMapStart()
			if yyl1103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1103, d)
			}
		} else if yyct1103 == codecSelferValueTypeArray1234 {
			yyl1103 := r.ReadArrayStart()
			if yyl1103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1104Slc
	var yyhl1104 bool = l >= 0
	for yyj1104 := 0; ; yyj1104++ {
		if yyhl1104 {
			if yyj1104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1104Slc = r.DecodeBytes(yys1104Slc, true, true)
		yys1104 := string(yys1104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1104 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1107 := &x.ObjectMeta
				yyv1107.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1108 := &x.Spec
				yyv1108.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1104)
		} // end switch yys1104
	} // end for yyj1104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1109 int
	var yyb1109 bool
	var yyhl1109 bool = l >= 0
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1112 := &x.ObjectMeta
		yyv1112.CodecDecodeSelf(d)
	}
	yyj1109++
	if yyhl1109 {
		yyb1109 = yyj1109 > l
	} else {
		yyb1109 = r.CheckBreak()
	}
	if yyb1109 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1113 := &x.Spec
		yyv1113.CodecDecodeSelf(d)
	}
	for {
		yyj1109++
		if yyhl1109 {
			yyb1109 = yyj1109 > l
		} else {
			yyb1109 = r.CheckBreak()
		}
		if yyb1109 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1109-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1114 := z.EncBinary()
		_ = yym1114
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1115 := !z.EncBinary()
			yy2arr1115 := z.EncBasicHandle().StructToArray
			var yyq1115 [4]bool
			_, _, _ = yysep1115, yyq1115, yy2arr1115
			const yyr1115 bool = false
			yyq1115[0] = x.Kind != ""
			yyq1115[1] = x.APIVersion != ""
			yyq1115[2] = true
			var yynn1115 int
			if yyr1115 || yy2arr1115 {
				r.EncodeArrayStart(4)
			} else {
				yynn1115 = 1
				for _, b := range yyq1115 {
					if b {
						yynn1115++
					}
				}
				r.EncodeMapStart(yynn1115)
				yynn1115 = 0
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1115[0] {
					yym1117 := z.EncBinary()
					_ = yym1117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1115[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1118 := z.EncBinary()
					_ = yym1118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1115[1] {
					yym1120 := z.EncBinary()
					_ = yym1120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1115[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1115[2] {
					yy1123 := &x.ListMeta
					yym1124 := z.EncBinary()
					_ = yym1124
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1123) {
					} else {
						z.EncFallback(yy1123)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1115[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1125 := &x.ListMeta
					yym1126 := z.EncBinary()
					_ = yym1126
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1125) {
					} else {
						z.EncFallback(yy1125)
					}
				}
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1129 := z.EncBinary()
					_ = yym1129
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1115 || yy2arr1115 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1130 := z.DecBinary()
	_ = yym1130
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1131 := r.ContainerType()
		if yyct1131 == codecSelferValueTypeMap1234 {
			yyl1131 := r.ReadMapStart()
			if yyl1131 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1131, d)
			}
		} else if yyct1131 == codecSelferValueTypeArray1234 {
			yyl1131 := r.ReadArrayStart()
			if yyl1131 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1131, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1132Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1132Slc
	var yyhl1132 bool = l >= 0
	for yyj1132 := 0; ; yyj1132++ {
		if yyhl1132 {
			if yyj1132 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1132Slc = r.DecodeBytes(yys1132Slc, true, true)
		yys1132 := string(yys1132Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1132 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1135 := &x.ListMeta
				yym1136 := z.DecBinary()
				_ = yym1136
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1135) {
				} else {
					z.DecFallback(yyv1135, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1137 := &x.Items
				yym1138 := z.DecBinary()
				_ = yym1138
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1137), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1132)
		} // end switch yys1132
	} // end for yyj1132
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1139 int
	var yyb1139 bool
	var yyhl1139 bool = l >= 0
	yyj1139++
	if yyhl1139 {
		yyb1139 = yyj1139 > l
	} else {
		yyb1139 = r.CheckBreak()
	}
	if yyb1139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1139++
	if yyhl1139 {
		yyb1139 = yyj1139 > l
	} else {
		yyb1139 = r.CheckBreak()
	}
	if yyb1139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1139++
	if yyhl1139 {
		yyb1139 = yyj1139 > l
	} else {
		yyb1139 = r.CheckBreak()
	}
	if yyb1139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1142 := &x.ListMeta
		yym1143 := z.DecBinary()
		_ = yym1143
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1142) {
		} else {
			z.DecFallback(yyv1142, false)
		}
	}
	yyj1139++
	if yyhl1139 {
		yyb1139 = yyj1139 > l
	} else {
		yyb1139 = r.CheckBreak()
	}
	if yyb1139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1144 := &x.Items
		yym1145 := z.DecBinary()
		_ = yym1145
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1144), d)
		}
	}
	for {
		yyj1139++
		if yyhl1139 {
			yyb1139 = yyj1139 > l
		} else {
			yyb1139 = r.CheckBreak()
		}
		if yyb1139 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1139-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1146 := z.EncBinary()
		_ = yym1146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1147 := !z.EncBinary()
			yy2arr1147 := z.EncBasicHandle().StructToArray
			var yyq1147 [2]bool
			_, _, _ = yysep1147, yyq1147, yy2arr1147
			const yyr1147 bool = false
			yyq1147[0] = len(x.MatchLabels) != 0
			yyq1147[1] = len(x.MatchExpressions) != 0
			var yynn1147 int
			if yyr1147 || yy2arr1147 {
				r.EncodeArrayStart(2)
			} else {
				yynn1147 = 0
				for _, b := range yyq1147 {
					if b {
						yynn1147++
					}
				}
				r.EncodeMapStart(yynn1147)
				yynn1147 = 0
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1147[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1149 := z.EncBinary()
						_ = yym1149
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1147[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1150 := z.EncBinary()
						_ = yym1150
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1147[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1152 := z.EncBinary()
						_ = yym1152
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1153 := z.EncBinary()
						_ = yym1153
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1147 || yy2arr1147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1154 := z.DecBinary()
	_ = yym1154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1155 := r.ContainerType()
		if yyct1155 == codecSelferValueTypeMap1234 {
			yyl1155 := r.ReadMapStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1155, d)
			}
		} else if yyct1155 == codecSelferValueTypeArray1234 {
			yyl1155 := r.ReadArrayStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1155, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1156Slc
	var yyhl1156 bool = l >= 0
	for yyj1156 := 0; ; yyj1156++ {
		if yyhl1156 {
			if yyj1156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1156Slc = r.DecodeBytes(yys1156Slc, true, true)
		yys1156 := string(yys1156Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1156 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1157 := &x.MatchLabels
				yym1158 := z.DecBinary()
				_ = yym1158
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1157, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1159 := &x.MatchExpressions
				yym1160 := z.DecBinary()
				_ = yym1160
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1159), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1156)
		} // end switch yys1156
	} // end for yyj1156
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1162 := &x.MatchLabels
		yym1163 := z.DecBinary()
		_ = yym1163
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1162, false, d)
		}
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1164 := &x.MatchExpressions
		yym1165 := z.DecBinary()
		_ = yym1165
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1164), d)
		}
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1166 := z.EncBinary()
		_ = yym1166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1167 := !z.EncBinary()
			yy2arr1167 := z.EncBasicHandle().StructToArray
			var yyq1167 [3]bool
			_, _, _ = yysep1167, yyq1167, yy2arr1167
			const yyr1167 bool = false
			yyq1167[2] = len(x.Values) != 0
			var yynn1167 int
			if yyr1167 || yy2arr1167 {
				r.EncodeArrayStart(3)
			} else {
				yynn1167 = 2
				for _, b := range yyq1167 {
					if b {
						yynn1167++
					}
				}
				r.EncodeMapStart(yynn1167)
				yynn1167 = 0
			}
			if yyr1167 || yy2arr1167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1169 := z.EncBinary()
				_ = yym1169
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1170 := z.EncBinary()
				_ = yym1170
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1167 || yy2arr1167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1167 || yy2arr1167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1167[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1173 := z.EncBinary()
						_ = yym1173
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1174 := z.EncBinary()
						_ = yym1174
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1167 || yy2arr1167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1175 := z.DecBinary()
	_ = yym1175
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1176 := r.ContainerType()
		if yyct1176 == codecSelferValueTypeMap1234 {
			yyl1176 := r.ReadMapStart()
			if yyl1176 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1176, d)
			}
		} else if yyct1176 == codecSelferValueTypeArray1234 {
			yyl1176 := r.ReadArrayStart()
			if yyl1176 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1176, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1177Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1177Slc
	var yyhl1177 bool = l >= 0
	for yyj1177 := 0; ; yyj1177++ {
		if yyhl1177 {
			if yyj1177 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1177Slc = r.DecodeBytes(yys1177Slc, true, true)
		yys1177 := string(yys1177Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1177 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1180 := &x.Values
				yym1181 := z.DecBinary()
				_ = yym1181
				if false {
				} else {
					z.F.DecSliceStringX(yyv1180, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1177)
		} // end switch yys1177
	} // end for yyj1177
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1182 int
	var yyb1182 bool
	var yyhl1182 bool = l >= 0
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1185 := &x.Values
		yym1186 := z.DecBinary()
		_ = yym1186
		if false {
		} else {
			z.F.DecSliceStringX(yyv1185, false, d)
		}
	}
	for {
		yyj1182++
		if yyhl1182 {
			yyb1182 = yyj1182 > l
		} else {
			yyb1182 = r.CheckBreak()
		}
		if yyb1182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1187 := z.EncBinary()
	_ = yym1187
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1188 := z.DecBinary()
	_ = yym1188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1189 := z.EncBinary()
		_ = yym1189
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1190 := !z.EncBinary()
			yy2arr1190 := z.EncBasicHandle().StructToArray
			var yyq1190 [5]bool
			_, _, _ = yysep1190, yyq1190, yy2arr1190
			const yyr1190 bool = false
			yyq1190[0] = x.Kind != ""
			yyq1190[1] = x.APIVersion != ""
			yyq1190[2] = true
			yyq1190[3] = true
			yyq1190[4] = true
			var yynn1190 int
			if yyr1190 || yy2arr1190 {
				r.EncodeArrayStart(5)
			} else {
				yynn1190 = 0
				for _, b := range yyq1190 {
					if b {
						yynn1190++
					}
				}
				r.EncodeMapStart(yynn1190)
				yynn1190 = 0
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1190[0] {
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1190[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1193 := z.EncBinary()
					_ = yym1193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1190[1] {
					yym1195 := z.EncBinary()
					_ = yym1195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1190[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1196 := z.EncBinary()
					_ = yym1196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1190[2] {
					yy1198 := &x.ObjectMeta
					yy1198.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1190[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1199 := &x.ObjectMeta
					yy1199.CodecEncodeSelf(e)
				}
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1190[3] {
					yy1201 := &x.Spec
					yy1201.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1190[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1202 := &x.Spec
					yy1202.CodecEncodeSelf(e)
				}
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1190[4] {
					yy1204 := &x.Status
					yy1204.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1190[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1205 := &x.Status
					yy1205.CodecEncodeSelf(e)
				}
			}
			if yyr1190 || yy2arr1190 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1206 := z.DecBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1207 := r.ContainerType()
		if yyct1207 == codecSelferValueTypeMap1234 {
			yyl1207 := r.ReadMapStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1207, d)
			}
		} else if yyct1207 == codecSelferValueTypeArray1234 {
			yyl1207 := r.ReadArrayStart()
			if yyl1207 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1207, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1208Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1208Slc
	var yyhl1208 bool = l >= 0
	for yyj1208 := 0; ; yyj1208++ {
		if yyhl1208 {
			if yyj1208 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1208Slc = r.DecodeBytes(yys1208Slc, true, true)
		yys1208 := string(yys1208Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1208 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1211 := &x.ObjectMeta
				yyv1211.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1212 := &x.Spec
				yyv1212.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1213 := &x.Status
				yyv1213.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1208)
		} // end switch yys1208
	} // end for yyj1208
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1214 int
	var yyb1214 bool
	var yyhl1214 bool = l >= 0
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1217 := &x.ObjectMeta
		yyv1217.CodecDecodeSelf(d)
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1218 := &x.Spec
		yyv1218.CodecDecodeSelf(d)
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1219 := &x.Status
		yyv1219.CodecDecodeSelf(d)
	}
	for {
		yyj1214++
		if yyhl1214 {
			yyb1214 = yyj1214 > l
		} else {
			yyb1214 = r.CheckBreak()
		}
		if yyb1214 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1214-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1220 := z.EncBinary()
		_ = yym1220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1221 := !z.EncBinary()
			yy2arr1221 := z.EncBasicHandle().StructToArray
			var yyq1221 [4]bool
			_, _, _ = yysep1221, yyq1221, yy2arr1221
			const yyr1221 bool = false
			yyq1221[0] = x.Kind != ""
			yyq1221[1] = x.APIVersion != ""
			yyq1221[2] = true
			var yynn1221 int
			if yyr1221 || yy2arr1221 {
				r.EncodeArrayStart(4)
			} else {
				yynn1221 = 1
				for _, b := range yyq1221 {
					if b {
						yynn1221++
					}
				}
				r.EncodeMapStart(yynn1221)
				yynn1221 = 0
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[0] {
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1221[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[1] {
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1221[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1227 := z.EncBinary()
					_ = yym1227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[2] {
					yy1229 := &x.ListMeta
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1229) {
					} else {
						z.EncFallback(yy1229)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1221[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1231 := &x.ListMeta
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1231) {
					} else {
						z.EncFallback(yy1231)
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1234 := z.EncBinary()
					_ = yym1234
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1235 := z.EncBinary()
					_ = yym1235
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1236 := z.DecBinary()
	_ = yym1236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1237 := r.ContainerType()
		if yyct1237 == codecSelferValueTypeMap1234 {
			yyl1237 := r.ReadMapStart()
			if yyl1237 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1237, d)
			}
		} else if yyct1237 == codecSelferValueTypeArray1234 {
			yyl1237 := r.ReadArrayStart()
			if yyl1237 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1238Slc
	var yyhl1238 bool = l >= 0
	for yyj1238 := 0; ; yyj1238++ {
		if yyhl1238 {
			if yyj1238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1238Slc = r.DecodeBytes(yys1238Slc, true, true)
		yys1238 := string(yys1238Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1238 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1241 := &x.ListMeta
				yym1242 := z.DecBinary()
				_ = yym1242
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1241) {
				} else {
					z.DecFallback(yyv1241, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1243 := &x.Items
				yym1244 := z.DecBinary()
				_ = yym1244
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1243), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1238)
		} // end switch yys1238
	} // end for yyj1238
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1245 int
	var yyb1245 bool
	var yyhl1245 bool = l >= 0
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1248 := &x.ListMeta
		yym1249 := z.DecBinary()
		_ = yym1249
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1248) {
		} else {
			z.DecFallback(yyv1248, false)
		}
	}
	yyj1245++
	if yyhl1245 {
		yyb1245 = yyj1245 > l
	} else {
		yyb1245 = r.CheckBreak()
	}
	if yyb1245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1250 := &x.Items
		yym1251 := z.DecBinary()
		_ = yym1251
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1250), d)
		}
	}
	for {
		yyj1245++
		if yyhl1245 {
			yyb1245 = yyj1245 > l
		} else {
			yyb1245 = r.CheckBreak()
		}
		if yyb1245 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1245-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1252 := z.EncBinary()
		_ = yym1252
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1253 := !z.EncBinary()
			yy2arr1253 := z.EncBasicHandle().StructToArray
			var yyq1253 [3]bool
			_, _, _ = yysep1253, yyq1253, yy2arr1253
			const yyr1253 bool = false
			yyq1253[1] = x.Selector != nil
			yyq1253[2] = x.Template != nil
			var yynn1253 int
			if yyr1253 || yy2arr1253 {
				r.EncodeArrayStart(3)
			} else {
				yynn1253 = 1
				for _, b := range yyq1253 {
					if b {
						yynn1253++
					}
				}
				r.EncodeMapStart(yynn1253)
				yynn1253 = 0
			}
			if yyr1253 || yy2arr1253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1255 := z.EncBinary()
				_ = yym1255
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1256 := z.EncBinary()
				_ = yym1256
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1253 || yy2arr1253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1253[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1253[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1253 || yy2arr1253 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1253[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1253[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1253 || yy2arr1253 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1259 := z.DecBinary()
	_ = yym1259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1260 := r.ContainerType()
		if yyct1260 == codecSelferValueTypeMap1234 {
			yyl1260 := r.ReadMapStart()
			if yyl1260 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1260, d)
			}
		} else if yyct1260 == codecSelferValueTypeArray1234 {
			yyl1260 := r.ReadArrayStart()
			if yyl1260 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1260, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1261Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1261Slc
	var yyhl1261 bool = l >= 0
	for yyj1261 := 0; ; yyj1261++ {
		if yyhl1261 {
			if yyj1261 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1261Slc = r.DecodeBytes(yys1261Slc, true, true)
		yys1261 := string(yys1261Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1261 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_api.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1261)
		} // end switch yys1261
	} // end for yyj1261
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1265 int
	var yyb1265 bool
	var yyhl1265 bool = l >= 0
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_api.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1265++
		if yyhl1265 {
			yyb1265 = yyj1265 > l
		} else {
			yyb1265 = r.CheckBreak()
		}
		if yyb1265 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1265-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1269 := z.EncBinary()
		_ = yym1269
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1270 := !z.EncBinary()
			yy2arr1270 := z.EncBasicHandle().StructToArray
			var yyq1270 [2]bool
			_, _, _ = yysep1270, yyq1270, yy2arr1270
			const yyr1270 bool = false
			yyq1270[1] = x.ObservedGeneration != 0
			var yynn1270 int
			if yyr1270 || yy2arr1270 {
				r.EncodeArrayStart(2)
			} else {
				yynn1270 = 1
				for _, b := range yyq1270 {
					if b {
						yynn1270++
					}
				}
				r.EncodeMapStart(yynn1270)
				yynn1270 = 0
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1272 := z.EncBinary()
				_ = yym1272
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1273 := z.EncBinary()
				_ = yym1273
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1270[1] {
					yym1275 := z.EncBinary()
					_ = yym1275
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1270[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1270 || yy2arr1270 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1277 := z.DecBinary()
	_ = yym1277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1278 := r.ContainerType()
		if yyct1278 == codecSelferValueTypeMap1234 {
			yyl1278 := r.ReadMapStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1278, d)
			}
		} else if yyct1278 == codecSelferValueTypeArray1234 {
			yyl1278 := r.ReadArrayStart()
			if yyl1278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1279Slc
	var yyhl1279 bool = l >= 0
	for yyj1279 := 0; ; yyj1279++ {
		if yyhl1279 {
			if yyj1279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1279Slc = r.DecodeBytes(yys1279Slc, true, true)
		yys1279 := string(yys1279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1279 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1279)
		} // end switch yys1279
	} // end for yyj1279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1282 int
	var yyb1282 bool
	var yyhl1282 bool = l >= 0
	yyj1282++
	if yyhl1282 {
		yyb1282 = yyj1282 > l
	} else {
		yyb1282 = r.CheckBreak()
	}
	if yyb1282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1282++
	if yyhl1282 {
		yyb1282 = yyj1282 > l
	} else {
		yyb1282 = r.CheckBreak()
	}
	if yyb1282 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1282++
		if yyhl1282 {
			yyb1282 = yyj1282 > l
		} else {
			yyb1282 = r.CheckBreak()
		}
		if yyb1282 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1282-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1285 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1286 := &yyv1285
		yy1286.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1287 := *v
	yyh1287, yyl1287 := z.DecSliceHelperStart()
	var yyc1287 bool
	if yyl1287 == 0 {
		if yyv1287 == nil {
			yyv1287 = []HorizontalPodAutoscaler{}
			yyc1287 = true
		} else if len(yyv1287) != 0 {
			yyv1287 = yyv1287[:0]
			yyc1287 = true
		}
	} else if yyl1287 > 0 {
		var yyrr1287, yyrl1287 int
		var yyrt1287 bool
		if yyl1287 > cap(yyv1287) {

			yyrg1287 := len(yyv1287) > 0
			yyv21287 := yyv1287
			yyrl1287, yyrt1287 = z.DecInferLen(yyl1287, z.DecBasicHandle().MaxInitLen, 320)
			if yyrt1287 {
				if yyrl1287 <= cap(yyv1287) {
					yyv1287 = yyv1287[:yyrl1287]
				} else {
					yyv1287 = make([]HorizontalPodAutoscaler, yyrl1287)
				}
			} else {
				yyv1287 = make([]HorizontalPodAutoscaler, yyrl1287)
			}
			yyc1287 = true
			yyrr1287 = len(yyv1287)
			if yyrg1287 {
				copy(yyv1287, yyv21287)
			}
		} else if yyl1287 != len(yyv1287) {
			yyv1287 = yyv1287[:yyl1287]
			yyc1287 = true
		}
		yyj1287 := 0
		for ; yyj1287 < yyrr1287; yyj1287++ {
			yyh1287.ElemContainerState(yyj1287)
			if r.TryDecodeAsNil() {
				yyv1287[yyj1287] = HorizontalPodAutoscaler{}
			} else {
				yyv1288 := &yyv1287[yyj1287]
				yyv1288.CodecDecodeSelf(d)
			}

		}
		if yyrt1287 {
			for ; yyj1287 < yyl1287; yyj1287++ {
				yyv1287 = append(yyv1287, HorizontalPodAutoscaler{})
				yyh1287.ElemContainerState(yyj1287)
				if r.TryDecodeAsNil() {
					yyv1287[yyj1287] = HorizontalPodAutoscaler{}
				} else {
					yyv1289 := &yyv1287[yyj1287]
					yyv1289.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1287 := 0
		for ; !r.CheckBreak(); yyj1287++ {

			if yyj1287 >= len(yyv1287) {
				yyv1287 = append(yyv1287, HorizontalPodAutoscaler{}) // var yyz1287 HorizontalPodAutoscaler
				yyc1287 = true
			}
			yyh1287.ElemContainerState(yyj1287)
			if yyj1287 < len(yyv1287) {
				if r.TryDecodeAsNil() {
					yyv1287[yyj1287] = HorizontalPodAutoscaler{}
				} else {
					yyv1290 := &yyv1287[yyj1287]
					yyv1290.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1287 < len(yyv1287) {
			yyv1287 = yyv1287[:yyj1287]
			yyc1287 = true
		} else if yyj1287 == 0 && yyv1287 == nil {
			yyv1287 = []HorizontalPodAutoscaler{}
			yyc1287 = true
		}
	}
	yyh1287.End()
	if yyc1287 {
		*v = yyv1287
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1291 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1292 := &yyv1291
		yy1292.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1293 := *v
	yyh1293, yyl1293 := z.DecSliceHelperStart()
	var yyc1293 bool
	if yyl1293 == 0 {
		if yyv1293 == nil {
			yyv1293 = []APIVersion{}
			yyc1293 = true
		} else if len(yyv1293) != 0 {
			yyv1293 = yyv1293[:0]
			yyc1293 = true
		}
	} else if yyl1293 > 0 {
		var yyrr1293, yyrl1293 int
		var yyrt1293 bool
		if yyl1293 > cap(yyv1293) {

			yyrg1293 := len(yyv1293) > 0
			yyv21293 := yyv1293
			yyrl1293, yyrt1293 = z.DecInferLen(yyl1293, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1293 {
				if yyrl1293 <= cap(yyv1293) {
					yyv1293 = yyv1293[:yyrl1293]
				} else {
					yyv1293 = make([]APIVersion, yyrl1293)
				}
			} else {
				yyv1293 = make([]APIVersion, yyrl1293)
			}
			yyc1293 = true
			yyrr1293 = len(yyv1293)
			if yyrg1293 {
				copy(yyv1293, yyv21293)
			}
		} else if yyl1293 != len(yyv1293) {
			yyv1293 = yyv1293[:yyl1293]
			yyc1293 = true
		}
		yyj1293 := 0
		for ; yyj1293 < yyrr1293; yyj1293++ {
			yyh1293.ElemContainerState(yyj1293)
			if r.TryDecodeAsNil() {
				yyv1293[yyj1293] = APIVersion{}
			} else {
				yyv1294 := &yyv1293[yyj1293]
				yyv1294.CodecDecodeSelf(d)
			}

		}
		if yyrt1293 {
			for ; yyj1293 < yyl1293; yyj1293++ {
				yyv1293 = append(yyv1293, APIVersion{})
				yyh1293.ElemContainerState(yyj1293)
				if r.TryDecodeAsNil() {
					yyv1293[yyj1293] = APIVersion{}
				} else {
					yyv1295 := &yyv1293[yyj1293]
					yyv1295.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1293 := 0
		for ; !r.CheckBreak(); yyj1293++ {

			if yyj1293 >= len(yyv1293) {
				yyv1293 = append(yyv1293, APIVersion{}) // var yyz1293 APIVersion
				yyc1293 = true
			}
			yyh1293.ElemContainerState(yyj1293)
			if yyj1293 < len(yyv1293) {
				if r.TryDecodeAsNil() {
					yyv1293[yyj1293] = APIVersion{}
				} else {
					yyv1296 := &yyv1293[yyj1293]
					yyv1296.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1293 < len(yyv1293) {
			yyv1293 = yyv1293[:yyj1293]
			yyc1293 = true
		} else if yyj1293 == 0 && yyv1293 == nil {
			yyv1293 = []APIVersion{}
			yyc1293 = true
		}
	}
	yyh1293.End()
	if yyc1293 {
		*v = yyv1293
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1297 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1298 := &yyv1297
		yy1298.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1299 := *v
	yyh1299, yyl1299 := z.DecSliceHelperStart()
	var yyc1299 bool
	if yyl1299 == 0 {
		if yyv1299 == nil {
			yyv1299 = []ThirdPartyResource{}
			yyc1299 = true
		} else if len(yyv1299) != 0 {
			yyv1299 = yyv1299[:0]
			yyc1299 = true
		}
	} else if yyl1299 > 0 {
		var yyrr1299, yyrl1299 int
		var yyrt1299 bool
		if yyl1299 > cap(yyv1299) {

			yyrg1299 := len(yyv1299) > 0
			yyv21299 := yyv1299
			yyrl1299, yyrt1299 = z.DecInferLen(yyl1299, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1299 {
				if yyrl1299 <= cap(yyv1299) {
					yyv1299 = yyv1299[:yyrl1299]
				} else {
					yyv1299 = make([]ThirdPartyResource, yyrl1299)
				}
			} else {
				yyv1299 = make([]ThirdPartyResource, yyrl1299)
			}
			yyc1299 = true
			yyrr1299 = len(yyv1299)
			if yyrg1299 {
				copy(yyv1299, yyv21299)
			}
		} else if yyl1299 != len(yyv1299) {
			yyv1299 = yyv1299[:yyl1299]
			yyc1299 = true
		}
		yyj1299 := 0
		for ; yyj1299 < yyrr1299; yyj1299++ {
			yyh1299.ElemContainerState(yyj1299)
			if r.TryDecodeAsNil() {
				yyv1299[yyj1299] = ThirdPartyResource{}
			} else {
				yyv1300 := &yyv1299[yyj1299]
				yyv1300.CodecDecodeSelf(d)
			}

		}
		if yyrt1299 {
			for ; yyj1299 < yyl1299; yyj1299++ {
				yyv1299 = append(yyv1299, ThirdPartyResource{})
				yyh1299.ElemContainerState(yyj1299)
				if r.TryDecodeAsNil() {
					yyv1299[yyj1299] = ThirdPartyResource{}
				} else {
					yyv1301 := &yyv1299[yyj1299]
					yyv1301.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1299 := 0
		for ; !r.CheckBreak(); yyj1299++ {

			if yyj1299 >= len(yyv1299) {
				yyv1299 = append(yyv1299, ThirdPartyResource{}) // var yyz1299 ThirdPartyResource
				yyc1299 = true
			}
			yyh1299.ElemContainerState(yyj1299)
			if yyj1299 < len(yyv1299) {
				if r.TryDecodeAsNil() {
					yyv1299[yyj1299] = ThirdPartyResource{}
				} else {
					yyv1302 := &yyv1299[yyj1299]
					yyv1302.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1299 < len(yyv1299) {
			yyv1299 = yyv1299[:yyj1299]
			yyc1299 = true
		} else if yyj1299 == 0 && yyv1299 == nil {
			yyv1299 = []ThirdPartyResource{}
			yyc1299 = true
		}
	}
	yyh1299.End()
	if yyc1299 {
		*v = yyv1299
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1303 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1304 := &yyv1303
		yy1304.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1305 := *v
	yyh1305, yyl1305 := z.DecSliceHelperStart()
	var yyc1305 bool
	if yyl1305 == 0 {
		if yyv1305 == nil {
			yyv1305 = []Deployment{}
			yyc1305 = true
		} else if len(yyv1305) != 0 {
			yyv1305 = yyv1305[:0]
			yyc1305 = true
		}
	} else if yyl1305 > 0 {
		var yyrr1305, yyrl1305 int
		var yyrt1305 bool
		if yyl1305 > cap(yyv1305) {

			yyrg1305 := len(yyv1305) > 0
			yyv21305 := yyv1305
			yyrl1305, yyrt1305 = z.DecInferLen(yyl1305, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt1305 {
				if yyrl1305 <= cap(yyv1305) {
					yyv1305 = yyv1305[:yyrl1305]
				} else {
					yyv1305 = make([]Deployment, yyrl1305)
				}
			} else {
				yyv1305 = make([]Deployment, yyrl1305)
			}
			yyc1305 = true
			yyrr1305 = len(yyv1305)
			if yyrg1305 {
				copy(yyv1305, yyv21305)
			}
		} else if yyl1305 != len(yyv1305) {
			yyv1305 = yyv1305[:yyl1305]
			yyc1305 = true
		}
		yyj1305 := 0
		for ; yyj1305 < yyrr1305; yyj1305++ {
			yyh1305.ElemContainerState(yyj1305)
			if r.TryDecodeAsNil() {
				yyv1305[yyj1305] = Deployment{}
			} else {
				yyv1306 := &yyv1305[yyj1305]
				yyv1306.CodecDecodeSelf(d)
			}

		}
		if yyrt1305 {
			for ; yyj1305 < yyl1305; yyj1305++ {
				yyv1305 = append(yyv1305, Deployment{})
				yyh1305.ElemContainerState(yyj1305)
				if r.TryDecodeAsNil() {
					yyv1305[yyj1305] = Deployment{}
				} else {
					yyv1307 := &yyv1305[yyj1305]
					yyv1307.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1305 := 0
		for ; !r.CheckBreak(); yyj1305++ {

			if yyj1305 >= len(yyv1305) {
				yyv1305 = append(yyv1305, Deployment{}) // var yyz1305 Deployment
				yyc1305 = true
			}
			yyh1305.ElemContainerState(yyj1305)
			if yyj1305 < len(yyv1305) {
				if r.TryDecodeAsNil() {
					yyv1305[yyj1305] = Deployment{}
				} else {
					yyv1308 := &yyv1305[yyj1305]
					yyv1308.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1305 < len(yyv1305) {
			yyv1305 = yyv1305[:yyj1305]
			yyc1305 = true
		} else if yyj1305 == 0 && yyv1305 == nil {
			yyv1305 = []Deployment{}
			yyc1305 = true
		}
	}
	yyh1305.End()
	if yyc1305 {
		*v = yyv1305
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1309 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1310 := &yyv1309
		yy1310.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1311 := *v
	yyh1311, yyl1311 := z.DecSliceHelperStart()
	var yyc1311 bool
	if yyl1311 == 0 {
		if yyv1311 == nil {
			yyv1311 = []DaemonSet{}
			yyc1311 = true
		} else if len(yyv1311) != 0 {
			yyv1311 = yyv1311[:0]
			yyc1311 = true
		}
	} else if yyl1311 > 0 {
		var yyrr1311, yyrl1311 int
		var yyrt1311 bool
		if yyl1311 > cap(yyv1311) {

			yyrg1311 := len(yyv1311) > 0
			yyv21311 := yyv1311
			yyrl1311, yyrt1311 = z.DecInferLen(yyl1311, z.DecBasicHandle().MaxInitLen, 592)
			if yyrt1311 {
				if yyrl1311 <= cap(yyv1311) {
					yyv1311 = yyv1311[:yyrl1311]
				} else {
					yyv1311 = make([]DaemonSet, yyrl1311)
				}
			} else {
				yyv1311 = make([]DaemonSet, yyrl1311)
			}
			yyc1311 = true
			yyrr1311 = len(yyv1311)
			if yyrg1311 {
				copy(yyv1311, yyv21311)
			}
		} else if yyl1311 != len(yyv1311) {
			yyv1311 = yyv1311[:yyl1311]
			yyc1311 = true
		}
		yyj1311 := 0
		for ; yyj1311 < yyrr1311; yyj1311++ {
			yyh1311.ElemContainerState(yyj1311)
			if r.TryDecodeAsNil() {
				yyv1311[yyj1311] = DaemonSet{}
			} else {
				yyv1312 := &yyv1311[yyj1311]
				yyv1312.CodecDecodeSelf(d)
			}

		}
		if yyrt1311 {
			for ; yyj1311 < yyl1311; yyj1311++ {
				yyv1311 = append(yyv1311, DaemonSet{})
				yyh1311.ElemContainerState(yyj1311)
				if r.TryDecodeAsNil() {
					yyv1311[yyj1311] = DaemonSet{}
				} else {
					yyv1313 := &yyv1311[yyj1311]
					yyv1313.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1311 := 0
		for ; !r.CheckBreak(); yyj1311++ {

			if yyj1311 >= len(yyv1311) {
				yyv1311 = append(yyv1311, DaemonSet{}) // var yyz1311 DaemonSet
				yyc1311 = true
			}
			yyh1311.ElemContainerState(yyj1311)
			if yyj1311 < len(yyv1311) {
				if r.TryDecodeAsNil() {
					yyv1311[yyj1311] = DaemonSet{}
				} else {
					yyv1314 := &yyv1311[yyj1311]
					yyv1314.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1311 < len(yyv1311) {
			yyv1311 = yyv1311[:yyj1311]
			yyc1311 = true
		} else if yyj1311 == 0 && yyv1311 == nil {
			yyv1311 = []DaemonSet{}
			yyc1311 = true
		}
	}
	yyh1311.End()
	if yyc1311 {
		*v = yyv1311
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1315 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1316 := &yyv1315
		yy1316.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1317 := *v
	yyh1317, yyl1317 := z.DecSliceHelperStart()
	var yyc1317 bool
	if yyl1317 == 0 {
		if yyv1317 == nil {
			yyv1317 = []ThirdPartyResourceData{}
			yyc1317 = true
		} else if len(yyv1317) != 0 {
			yyv1317 = yyv1317[:0]
			yyc1317 = true
		}
	} else if yyl1317 > 0 {
		var yyrr1317, yyrl1317 int
		var yyrt1317 bool
		if yyl1317 > cap(yyv1317) {

			yyrg1317 := len(yyv1317) > 0
			yyv21317 := yyv1317
			yyrl1317, yyrt1317 = z.DecInferLen(yyl1317, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1317 {
				if yyrl1317 <= cap(yyv1317) {
					yyv1317 = yyv1317[:yyrl1317]
				} else {
					yyv1317 = make([]ThirdPartyResourceData, yyrl1317)
				}
			} else {
				yyv1317 = make([]ThirdPartyResourceData, yyrl1317)
			}
			yyc1317 = true
			yyrr1317 = len(yyv1317)
			if yyrg1317 {
				copy(yyv1317, yyv21317)
			}
		} else if yyl1317 != len(yyv1317) {
			yyv1317 = yyv1317[:yyl1317]
			yyc1317 = true
		}
		yyj1317 := 0
		for ; yyj1317 < yyrr1317; yyj1317++ {
			yyh1317.ElemContainerState(yyj1317)
			if r.TryDecodeAsNil() {
				yyv1317[yyj1317] = ThirdPartyResourceData{}
			} else {
				yyv1318 := &yyv1317[yyj1317]
				yyv1318.CodecDecodeSelf(d)
			}

		}
		if yyrt1317 {
			for ; yyj1317 < yyl1317; yyj1317++ {
				yyv1317 = append(yyv1317, ThirdPartyResourceData{})
				yyh1317.ElemContainerState(yyj1317)
				if r.TryDecodeAsNil() {
					yyv1317[yyj1317] = ThirdPartyResourceData{}
				} else {
					yyv1319 := &yyv1317[yyj1317]
					yyv1319.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1317 := 0
		for ; !r.CheckBreak(); yyj1317++ {

			if yyj1317 >= len(yyv1317) {
				yyv1317 = append(yyv1317, ThirdPartyResourceData{}) // var yyz1317 ThirdPartyResourceData
				yyc1317 = true
			}
			yyh1317.ElemContainerState(yyj1317)
			if yyj1317 < len(yyv1317) {
				if r.TryDecodeAsNil() {
					yyv1317[yyj1317] = ThirdPartyResourceData{}
				} else {
					yyv1320 := &yyv1317[yyj1317]
					yyv1320.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1317 < len(yyv1317) {
			yyv1317 = yyv1317[:yyj1317]
			yyc1317 = true
		} else if yyj1317 == 0 && yyv1317 == nil {
			yyv1317 = []ThirdPartyResourceData{}
			yyc1317 = true
		}
	}
	yyh1317.End()
	if yyc1317 {
		*v = yyv1317
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1321 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1322 := &yyv1321
		yy1322.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1323 := *v
	yyh1323, yyl1323 := z.DecSliceHelperStart()
	var yyc1323 bool
	if yyl1323 == 0 {
		if yyv1323 == nil {
			yyv1323 = []Job{}
			yyc1323 = true
		} else if len(yyv1323) != 0 {
			yyv1323 = yyv1323[:0]
			yyc1323 = true
		}
	} else if yyl1323 > 0 {
		var yyrr1323, yyrl1323 int
		var yyrt1323 bool
		if yyl1323 > cap(yyv1323) {

			yyrg1323 := len(yyv1323) > 0
			yyv21323 := yyv1323
			yyrl1323, yyrt1323 = z.DecInferLen(yyl1323, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt1323 {
				if yyrl1323 <= cap(yyv1323) {
					yyv1323 = yyv1323[:yyrl1323]
				} else {
					yyv1323 = make([]Job, yyrl1323)
				}
			} else {
				yyv1323 = make([]Job, yyrl1323)
			}
			yyc1323 = true
			yyrr1323 = len(yyv1323)
			if yyrg1323 {
				copy(yyv1323, yyv21323)
			}
		} else if yyl1323 != len(yyv1323) {
			yyv1323 = yyv1323[:yyl1323]
			yyc1323 = true
		}
		yyj1323 := 0
		for ; yyj1323 < yyrr1323; yyj1323++ {
			yyh1323.ElemContainerState(yyj1323)
			if r.TryDecodeAsNil() {
				yyv1323[yyj1323] = Job{}
			} else {
				yyv1324 := &yyv1323[yyj1323]
				yyv1324.CodecDecodeSelf(d)
			}

		}
		if yyrt1323 {
			for ; yyj1323 < yyl1323; yyj1323++ {
				yyv1323 = append(yyv1323, Job{})
				yyh1323.ElemContainerState(yyj1323)
				if r.TryDecodeAsNil() {
					yyv1323[yyj1323] = Job{}
				} else {
					yyv1325 := &yyv1323[yyj1323]
					yyv1325.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1323 := 0
		for ; !r.CheckBreak(); yyj1323++ {

			if yyj1323 >= len(yyv1323) {
				yyv1323 = append(yyv1323, Job{}) // var yyz1323 Job
				yyc1323 = true
			}
			yyh1323.ElemContainerState(yyj1323)
			if yyj1323 < len(yyv1323) {
				if r.TryDecodeAsNil() {
					yyv1323[yyj1323] = Job{}
				} else {
					yyv1326 := &yyv1323[yyj1323]
					yyv1326.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1323 < len(yyv1323) {
			yyv1323 = yyv1323[:yyj1323]
			yyc1323 = true
		} else if yyj1323 == 0 && yyv1323 == nil {
			yyv1323 = []Job{}
			yyc1323 = true
		}
	}
	yyh1323.End()
	if yyc1323 {
		*v = yyv1323
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1327 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1328 := &yyv1327
		yy1328.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1329 := *v
	yyh1329, yyl1329 := z.DecSliceHelperStart()
	var yyc1329 bool
	if yyl1329 == 0 {
		if yyv1329 == nil {
			yyv1329 = []JobCondition{}
			yyc1329 = true
		} else if len(yyv1329) != 0 {
			yyv1329 = yyv1329[:0]
			yyc1329 = true
		}
	} else if yyl1329 > 0 {
		var yyrr1329, yyrl1329 int
		var yyrt1329 bool
		if yyl1329 > cap(yyv1329) {

			yyrg1329 := len(yyv1329) > 0
			yyv21329 := yyv1329
			yyrl1329, yyrt1329 = z.DecInferLen(yyl1329, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1329 {
				if yyrl1329 <= cap(yyv1329) {
					yyv1329 = yyv1329[:yyrl1329]
				} else {
					yyv1329 = make([]JobCondition, yyrl1329)
				}
			} else {
				yyv1329 = make([]JobCondition, yyrl1329)
			}
			yyc1329 = true
			yyrr1329 = len(yyv1329)
			if yyrg1329 {
				copy(yyv1329, yyv21329)
			}
		} else if yyl1329 != len(yyv1329) {
			yyv1329 = yyv1329[:yyl1329]
			yyc1329 = true
		}
		yyj1329 := 0
		for ; yyj1329 < yyrr1329; yyj1329++ {
			yyh1329.ElemContainerState(yyj1329)
			if r.TryDecodeAsNil() {
				yyv1329[yyj1329] = JobCondition{}
			} else {
				yyv1330 := &yyv1329[yyj1329]
				yyv1330.CodecDecodeSelf(d)
			}

		}
		if yyrt1329 {
			for ; yyj1329 < yyl1329; yyj1329++ {
				yyv1329 = append(yyv1329, JobCondition{})
				yyh1329.ElemContainerState(yyj1329)
				if r.TryDecodeAsNil() {
					yyv1329[yyj1329] = JobCondition{}
				} else {
					yyv1331 := &yyv1329[yyj1329]
					yyv1331.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1329 := 0
		for ; !r.CheckBreak(); yyj1329++ {

			if yyj1329 >= len(yyv1329) {
				yyv1329 = append(yyv1329, JobCondition{}) // var yyz1329 JobCondition
				yyc1329 = true
			}
			yyh1329.ElemContainerState(yyj1329)
			if yyj1329 < len(yyv1329) {
				if r.TryDecodeAsNil() {
					yyv1329[yyj1329] = JobCondition{}
				} else {
					yyv1332 := &yyv1329[yyj1329]
					yyv1332.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1329 < len(yyv1329) {
			yyv1329 = yyv1329[:yyj1329]
			yyc1329 = true
		} else if yyj1329 == 0 && yyv1329 == nil {
			yyv1329 = []JobCondition{}
			yyc1329 = true
		}
	}
	yyh1329.End()
	if yyc1329 {
		*v = yyv1329
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1333 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1334 := &yyv1333
		yy1334.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1335 := *v
	yyh1335, yyl1335 := z.DecSliceHelperStart()
	var yyc1335 bool
	if yyl1335 == 0 {
		if yyv1335 == nil {
			yyv1335 = []Ingress{}
			yyc1335 = true
		} else if len(yyv1335) != 0 {
			yyv1335 = yyv1335[:0]
			yyc1335 = true
		}
	} else if yyl1335 > 0 {
		var yyrr1335, yyrl1335 int
		var yyrt1335 bool
		if yyl1335 > cap(yyv1335) {

			yyrg1335 := len(yyv1335) > 0
			yyv21335 := yyv1335
			yyrl1335, yyrt1335 = z.DecInferLen(yyl1335, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt1335 {
				if yyrl1335 <= cap(yyv1335) {
					yyv1335 = yyv1335[:yyrl1335]
				} else {
					yyv1335 = make([]Ingress, yyrl1335)
				}
			} else {
				yyv1335 = make([]Ingress, yyrl1335)
			}
			yyc1335 = true
			yyrr1335 = len(yyv1335)
			if yyrg1335 {
				copy(yyv1335, yyv21335)
			}
		} else if yyl1335 != len(yyv1335) {
			yyv1335 = yyv1335[:yyl1335]
			yyc1335 = true
		}
		yyj1335 := 0
		for ; yyj1335 < yyrr1335; yyj1335++ {
			yyh1335.ElemContainerState(yyj1335)
			if r.TryDecodeAsNil() {
				yyv1335[yyj1335] = Ingress{}
			} else {
				yyv1336 := &yyv1335[yyj1335]
				yyv1336.CodecDecodeSelf(d)
			}

		}
		if yyrt1335 {
			for ; yyj1335 < yyl1335; yyj1335++ {
				yyv1335 = append(yyv1335, Ingress{})
				yyh1335.ElemContainerState(yyj1335)
				if r.TryDecodeAsNil() {
					yyv1335[yyj1335] = Ingress{}
				} else {
					yyv1337 := &yyv1335[yyj1335]
					yyv1337.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1335 := 0
		for ; !r.CheckBreak(); yyj1335++ {

			if yyj1335 >= len(yyv1335) {
				yyv1335 = append(yyv1335, Ingress{}) // var yyz1335 Ingress
				yyc1335 = true
			}
			yyh1335.ElemContainerState(yyj1335)
			if yyj1335 < len(yyv1335) {
				if r.TryDecodeAsNil() {
					yyv1335[yyj1335] = Ingress{}
				} else {
					yyv1338 := &yyv1335[yyj1335]
					yyv1338.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1335 < len(yyv1335) {
			yyv1335 = yyv1335[:yyj1335]
			yyc1335 = true
		} else if yyj1335 == 0 && yyv1335 == nil {
			yyv1335 = []Ingress{}
			yyc1335 = true
		}
	}
	yyh1335.End()
	if yyc1335 {
		*v = yyv1335
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1339 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1340 := &yyv1339
		yy1340.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1341 := *v
	yyh1341, yyl1341 := z.DecSliceHelperStart()
	var yyc1341 bool
	if yyl1341 == 0 {
		if yyv1341 == nil {
			yyv1341 = []IngressRule{}
			yyc1341 = true
		} else if len(yyv1341) != 0 {
			yyv1341 = yyv1341[:0]
			yyc1341 = true
		}
	} else if yyl1341 > 0 {
		var yyrr1341, yyrl1341 int
		var yyrt1341 bool
		if yyl1341 > cap(yyv1341) {

			yyrg1341 := len(yyv1341) > 0
			yyv21341 := yyv1341
			yyrl1341, yyrt1341 = z.DecInferLen(yyl1341, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1341 {
				if yyrl1341 <= cap(yyv1341) {
					yyv1341 = yyv1341[:yyrl1341]
				} else {
					yyv1341 = make([]IngressRule, yyrl1341)
				}
			} else {
				yyv1341 = make([]IngressRule, yyrl1341)
			}
			yyc1341 = true
			yyrr1341 = len(yyv1341)
			if yyrg1341 {
				copy(yyv1341, yyv21341)
			}
		} else if yyl1341 != len(yyv1341) {
			yyv1341 = yyv1341[:yyl1341]
			yyc1341 = true
		}
		yyj1341 := 0
		for ; yyj1341 < yyrr1341; yyj1341++ {
			yyh1341.ElemContainerState(yyj1341)
			if r.TryDecodeAsNil() {
				yyv1341[yyj1341] = IngressRule{}
			} else {
				yyv1342 := &yyv1341[yyj1341]
				yyv1342.CodecDecodeSelf(d)
			}

		}
		if yyrt1341 {
			for ; yyj1341 < yyl1341; yyj1341++ {
				yyv1341 = append(yyv1341, IngressRule{})
				yyh1341.ElemContainerState(yyj1341)
				if r.TryDecodeAsNil() {
					yyv1341[yyj1341] = IngressRule{}
				} else {
					yyv1343 := &yyv1341[yyj1341]
					yyv1343.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1341 := 0
		for ; !r.CheckBreak(); yyj1341++ {

			if yyj1341 >= len(yyv1341) {
				yyv1341 = append(yyv1341, IngressRule{}) // var yyz1341 IngressRule
				yyc1341 = true
			}
			yyh1341.ElemContainerState(yyj1341)
			if yyj1341 < len(yyv1341) {
				if r.TryDecodeAsNil() {
					yyv1341[yyj1341] = IngressRule{}
				} else {
					yyv1344 := &yyv1341[yyj1341]
					yyv1344.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1341 < len(yyv1341) {
			yyv1341 = yyv1341[:yyj1341]
			yyc1341 = true
		} else if yyj1341 == 0 && yyv1341 == nil {
			yyv1341 = []IngressRule{}
			yyc1341 = true
		}
	}
	yyh1341.End()
	if yyc1341 {
		*v = yyv1341
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1345 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1346 := &yyv1345
		yy1346.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1347 := *v
	yyh1347, yyl1347 := z.DecSliceHelperStart()
	var yyc1347 bool
	if yyl1347 == 0 {
		if yyv1347 == nil {
			yyv1347 = []HTTPIngressPath{}
			yyc1347 = true
		} else if len(yyv1347) != 0 {
			yyv1347 = yyv1347[:0]
			yyc1347 = true
		}
	} else if yyl1347 > 0 {
		var yyrr1347, yyrl1347 int
		var yyrt1347 bool
		if yyl1347 > cap(yyv1347) {

			yyrg1347 := len(yyv1347) > 0
			yyv21347 := yyv1347
			yyrl1347, yyrt1347 = z.DecInferLen(yyl1347, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1347 {
				if yyrl1347 <= cap(yyv1347) {
					yyv1347 = yyv1347[:yyrl1347]
				} else {
					yyv1347 = make([]HTTPIngressPath, yyrl1347)
				}
			} else {
				yyv1347 = make([]HTTPIngressPath, yyrl1347)
			}
			yyc1347 = true
			yyrr1347 = len(yyv1347)
			if yyrg1347 {
				copy(yyv1347, yyv21347)
			}
		} else if yyl1347 != len(yyv1347) {
			yyv1347 = yyv1347[:yyl1347]
			yyc1347 = true
		}
		yyj1347 := 0
		for ; yyj1347 < yyrr1347; yyj1347++ {
			yyh1347.ElemContainerState(yyj1347)
			if r.TryDecodeAsNil() {
				yyv1347[yyj1347] = HTTPIngressPath{}
			} else {
				yyv1348 := &yyv1347[yyj1347]
				yyv1348.CodecDecodeSelf(d)
			}

		}
		if yyrt1347 {
			for ; yyj1347 < yyl1347; yyj1347++ {
				yyv1347 = append(yyv1347, HTTPIngressPath{})
				yyh1347.ElemContainerState(yyj1347)
				if r.TryDecodeAsNil() {
					yyv1347[yyj1347] = HTTPIngressPath{}
				} else {
					yyv1349 := &yyv1347[yyj1347]
					yyv1349.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1347 := 0
		for ; !r.CheckBreak(); yyj1347++ {

			if yyj1347 >= len(yyv1347) {
				yyv1347 = append(yyv1347, HTTPIngressPath{}) // var yyz1347 HTTPIngressPath
				yyc1347 = true
			}
			yyh1347.ElemContainerState(yyj1347)
			if yyj1347 < len(yyv1347) {
				if r.TryDecodeAsNil() {
					yyv1347[yyj1347] = HTTPIngressPath{}
				} else {
					yyv1350 := &yyv1347[yyj1347]
					yyv1350.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1347 < len(yyv1347) {
			yyv1347 = yyv1347[:yyj1347]
			yyc1347 = true
		} else if yyj1347 == 0 && yyv1347 == nil {
			yyv1347 = []HTTPIngressPath{}
			yyc1347 = true
		}
	}
	yyh1347.End()
	if yyc1347 {
		*v = yyv1347
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1351 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1352 := &yyv1351
		yy1352.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1353 := *v
	yyh1353, yyl1353 := z.DecSliceHelperStart()
	var yyc1353 bool
	if yyl1353 == 0 {
		if yyv1353 == nil {
			yyv1353 = []NodeUtilization{}
			yyc1353 = true
		} else if len(yyv1353) != 0 {
			yyv1353 = yyv1353[:0]
			yyc1353 = true
		}
	} else if yyl1353 > 0 {
		var yyrr1353, yyrl1353 int
		var yyrt1353 bool
		if yyl1353 > cap(yyv1353) {

			yyrg1353 := len(yyv1353) > 0
			yyv21353 := yyv1353
			yyrl1353, yyrt1353 = z.DecInferLen(yyl1353, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1353 {
				if yyrl1353 <= cap(yyv1353) {
					yyv1353 = yyv1353[:yyrl1353]
				} else {
					yyv1353 = make([]NodeUtilization, yyrl1353)
				}
			} else {
				yyv1353 = make([]NodeUtilization, yyrl1353)
			}
			yyc1353 = true
			yyrr1353 = len(yyv1353)
			if yyrg1353 {
				copy(yyv1353, yyv21353)
			}
		} else if yyl1353 != len(yyv1353) {
			yyv1353 = yyv1353[:yyl1353]
			yyc1353 = true
		}
		yyj1353 := 0
		for ; yyj1353 < yyrr1353; yyj1353++ {
			yyh1353.ElemContainerState(yyj1353)
			if r.TryDecodeAsNil() {
				yyv1353[yyj1353] = NodeUtilization{}
			} else {
				yyv1354 := &yyv1353[yyj1353]
				yyv1354.CodecDecodeSelf(d)
			}

		}
		if yyrt1353 {
			for ; yyj1353 < yyl1353; yyj1353++ {
				yyv1353 = append(yyv1353, NodeUtilization{})
				yyh1353.ElemContainerState(yyj1353)
				if r.TryDecodeAsNil() {
					yyv1353[yyj1353] = NodeUtilization{}
				} else {
					yyv1355 := &yyv1353[yyj1353]
					yyv1355.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1353 := 0
		for ; !r.CheckBreak(); yyj1353++ {

			if yyj1353 >= len(yyv1353) {
				yyv1353 = append(yyv1353, NodeUtilization{}) // var yyz1353 NodeUtilization
				yyc1353 = true
			}
			yyh1353.ElemContainerState(yyj1353)
			if yyj1353 < len(yyv1353) {
				if r.TryDecodeAsNil() {
					yyv1353[yyj1353] = NodeUtilization{}
				} else {
					yyv1356 := &yyv1353[yyj1353]
					yyv1356.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1353 < len(yyv1353) {
			yyv1353 = yyv1353[:yyj1353]
			yyc1353 = true
		} else if yyj1353 == 0 && yyv1353 == nil {
			yyv1353 = []NodeUtilization{}
			yyc1353 = true
		}
	}
	yyh1353.End()
	if yyc1353 {
		*v = yyv1353
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1357 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1358 := &yyv1357
		yy1358.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1359 := *v
	yyh1359, yyl1359 := z.DecSliceHelperStart()
	var yyc1359 bool
	if yyl1359 == 0 {
		if yyv1359 == nil {
			yyv1359 = []ClusterAutoscaler{}
			yyc1359 = true
		} else if len(yyv1359) != 0 {
			yyv1359 = yyv1359[:0]
			yyc1359 = true
		}
	} else if yyl1359 > 0 {
		var yyrr1359, yyrl1359 int
		var yyrt1359 bool
		if yyl1359 > cap(yyv1359) {

			yyrg1359 := len(yyv1359) > 0
			yyv21359 := yyv1359
			yyrl1359, yyrt1359 = z.DecInferLen(yyl1359, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1359 {
				if yyrl1359 <= cap(yyv1359) {
					yyv1359 = yyv1359[:yyrl1359]
				} else {
					yyv1359 = make([]ClusterAutoscaler, yyrl1359)
				}
			} else {
				yyv1359 = make([]ClusterAutoscaler, yyrl1359)
			}
			yyc1359 = true
			yyrr1359 = len(yyv1359)
			if yyrg1359 {
				copy(yyv1359, yyv21359)
			}
		} else if yyl1359 != len(yyv1359) {
			yyv1359 = yyv1359[:yyl1359]
			yyc1359 = true
		}
		yyj1359 := 0
		for ; yyj1359 < yyrr1359; yyj1359++ {
			yyh1359.ElemContainerState(yyj1359)
			if r.TryDecodeAsNil() {
				yyv1359[yyj1359] = ClusterAutoscaler{}
			} else {
				yyv1360 := &yyv1359[yyj1359]
				yyv1360.CodecDecodeSelf(d)
			}

		}
		if yyrt1359 {
			for ; yyj1359 < yyl1359; yyj1359++ {
				yyv1359 = append(yyv1359, ClusterAutoscaler{})
				yyh1359.ElemContainerState(yyj1359)
				if r.TryDecodeAsNil() {
					yyv1359[yyj1359] = ClusterAutoscaler{}
				} else {
					yyv1361 := &yyv1359[yyj1359]
					yyv1361.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1359 := 0
		for ; !r.CheckBreak(); yyj1359++ {

			if yyj1359 >= len(yyv1359) {
				yyv1359 = append(yyv1359, ClusterAutoscaler{}) // var yyz1359 ClusterAutoscaler
				yyc1359 = true
			}
			yyh1359.ElemContainerState(yyj1359)
			if yyj1359 < len(yyv1359) {
				if r.TryDecodeAsNil() {
					yyv1359[yyj1359] = ClusterAutoscaler{}
				} else {
					yyv1362 := &yyv1359[yyj1359]
					yyv1362.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1359 < len(yyv1359) {
			yyv1359 = yyv1359[:yyj1359]
			yyc1359 = true
		} else if yyj1359 == 0 && yyv1359 == nil {
			yyv1359 = []ClusterAutoscaler{}
			yyc1359 = true
		}
	}
	yyh1359.End()
	if yyc1359 {
		*v = yyv1359
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1363 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1364 := &yyv1363
		yy1364.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1365 := *v
	yyh1365, yyl1365 := z.DecSliceHelperStart()
	var yyc1365 bool
	if yyl1365 == 0 {
		if yyv1365 == nil {
			yyv1365 = []LabelSelectorRequirement{}
			yyc1365 = true
		} else if len(yyv1365) != 0 {
			yyv1365 = yyv1365[:0]
			yyc1365 = true
		}
	} else if yyl1365 > 0 {
		var yyrr1365, yyrl1365 int
		var yyrt1365 bool
		if yyl1365 > cap(yyv1365) {

			yyrg1365 := len(yyv1365) > 0
			yyv21365 := yyv1365
			yyrl1365, yyrt1365 = z.DecInferLen(yyl1365, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1365 {
				if yyrl1365 <= cap(yyv1365) {
					yyv1365 = yyv1365[:yyrl1365]
				} else {
					yyv1365 = make([]LabelSelectorRequirement, yyrl1365)
				}
			} else {
				yyv1365 = make([]LabelSelectorRequirement, yyrl1365)
			}
			yyc1365 = true
			yyrr1365 = len(yyv1365)
			if yyrg1365 {
				copy(yyv1365, yyv21365)
			}
		} else if yyl1365 != len(yyv1365) {
			yyv1365 = yyv1365[:yyl1365]
			yyc1365 = true
		}
		yyj1365 := 0
		for ; yyj1365 < yyrr1365; yyj1365++ {
			yyh1365.ElemContainerState(yyj1365)
			if r.TryDecodeAsNil() {
				yyv1365[yyj1365] = LabelSelectorRequirement{}
			} else {
				yyv1366 := &yyv1365[yyj1365]
				yyv1366.CodecDecodeSelf(d)
			}

		}
		if yyrt1365 {
			for ; yyj1365 < yyl1365; yyj1365++ {
				yyv1365 = append(yyv1365, LabelSelectorRequirement{})
				yyh1365.ElemContainerState(yyj1365)
				if r.TryDecodeAsNil() {
					yyv1365[yyj1365] = LabelSelectorRequirement{}
				} else {
					yyv1367 := &yyv1365[yyj1365]
					yyv1367.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1365 := 0
		for ; !r.CheckBreak(); yyj1365++ {

			if yyj1365 >= len(yyv1365) {
				yyv1365 = append(yyv1365, LabelSelectorRequirement{}) // var yyz1365 LabelSelectorRequirement
				yyc1365 = true
			}
			yyh1365.ElemContainerState(yyj1365)
			if yyj1365 < len(yyv1365) {
				if r.TryDecodeAsNil() {
					yyv1365[yyj1365] = LabelSelectorRequirement{}
				} else {
					yyv1368 := &yyv1365[yyj1365]
					yyv1368.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1365 < len(yyv1365) {
			yyv1365 = yyv1365[:yyj1365]
			yyc1365 = true
		} else if yyj1365 == 0 && yyv1365 == nil {
			yyv1365 = []LabelSelectorRequirement{}
			yyc1365 = true
		}
	}
	yyh1365.End()
	if yyc1365 {
		*v = yyv1365
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1369 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1370 := &yyv1369
		yy1370.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1371 := *v
	yyh1371, yyl1371 := z.DecSliceHelperStart()
	var yyc1371 bool
	if yyl1371 == 0 {
		if yyv1371 == nil {
			yyv1371 = []ReplicaSet{}
			yyc1371 = true
		} else if len(yyv1371) != 0 {
			yyv1371 = yyv1371[:0]
			yyc1371 = true
		}
	} else if yyl1371 > 0 {
		var yyrr1371, yyrl1371 int
		var yyrt1371 bool
		if yyl1371 > cap(yyv1371) {

			yyrg1371 := len(yyv1371) > 0
			yyv21371 := yyv1371
			yyrl1371, yyrt1371 = z.DecInferLen(yyl1371, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1371 {
				if yyrl1371 <= cap(yyv1371) {
					yyv1371 = yyv1371[:yyrl1371]
				} else {
					yyv1371 = make([]ReplicaSet, yyrl1371)
				}
			} else {
				yyv1371 = make([]ReplicaSet, yyrl1371)
			}
			yyc1371 = true
			yyrr1371 = len(yyv1371)
			if yyrg1371 {
				copy(yyv1371, yyv21371)
			}
		} else if yyl1371 != len(yyv1371) {
			yyv1371 = yyv1371[:yyl1371]
			yyc1371 = true
		}
		yyj1371 := 0
		for ; yyj1371 < yyrr1371; yyj1371++ {
			yyh1371.ElemContainerState(yyj1371)
			if r.TryDecodeAsNil() {
				yyv1371[yyj1371] = ReplicaSet{}
			} else {
				yyv1372 := &yyv1371[yyj1371]
				yyv1372.CodecDecodeSelf(d)
			}

		}
		if yyrt1371 {
			for ; yyj1371 < yyl1371; yyj1371++ {
				yyv1371 = append(yyv1371, ReplicaSet{})
				yyh1371.ElemContainerState(yyj1371)
				if r.TryDecodeAsNil() {
					yyv1371[yyj1371] = ReplicaSet{}
				} else {
					yyv1373 := &yyv1371[yyj1371]
					yyv1373.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1371 := 0
		for ; !r.CheckBreak(); yyj1371++ {

			if yyj1371 >= len(yyv1371) {
				yyv1371 = append(yyv1371, ReplicaSet{}) // var yyz1371 ReplicaSet
				yyc1371 = true
			}
			yyh1371.ElemContainerState(yyj1371)
			if yyj1371 < len(yyv1371) {
				if r.TryDecodeAsNil() {
					yyv1371[yyj1371] = ReplicaSet{}
				} else {
					yyv1374 := &yyv1371[yyj1371]
					yyv1374.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1371 < len(yyv1371) {
			yyv1371 = yyv1371[:yyj1371]
			yyc1371 = true
		} else if yyj1371 == 0 && yyv1371 == nil {
			yyv1371 = []ReplicaSet{}
			yyc1371 = true
		}
	}
	yyh1371.End()
	if yyc1371 {
		*v = yyv1371
	}
}
