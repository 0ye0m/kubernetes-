// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package extensions

import (
	api "k8s.io/kubernetes/pkg/api"
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	intstr "k8s.io/kubernetes/pkg/util/intstr"
)

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *APIVersion) DeepCopyInto(out *APIVersion) {
	out.Name = in.Name
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new APIVersion.
func (x *APIVersion) DeepCopy() *APIVersion {
	if x == nil {
		return nil
	}
	out := new(APIVersion)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *CustomMetricCurrentStatus) DeepCopyInto(out *CustomMetricCurrentStatus) {
	out.Name = in.Name
	out.CurrentValue = in.CurrentValue.DeepCopy()
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new CustomMetricCurrentStatus.
func (x *CustomMetricCurrentStatus) DeepCopy() *CustomMetricCurrentStatus {
	if x == nil {
		return nil
	}
	out := new(CustomMetricCurrentStatus)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *CustomMetricCurrentStatusList) DeepCopyInto(out *CustomMetricCurrentStatusList) {
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CustomMetricCurrentStatus, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new CustomMetricCurrentStatusList.
func (x *CustomMetricCurrentStatusList) DeepCopy() *CustomMetricCurrentStatusList {
	if x == nil {
		return nil
	}
	out := new(CustomMetricCurrentStatusList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *CustomMetricTarget) DeepCopyInto(out *CustomMetricTarget) {
	out.Name = in.Name
	out.TargetValue = in.TargetValue.DeepCopy()
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new CustomMetricTarget.
func (x *CustomMetricTarget) DeepCopy() *CustomMetricTarget {
	if x == nil {
		return nil
	}
	out := new(CustomMetricTarget)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *CustomMetricTargetList) DeepCopyInto(out *CustomMetricTargetList) {
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CustomMetricTarget, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new CustomMetricTargetList.
func (x *CustomMetricTargetList) DeepCopy() *CustomMetricTargetList {
	if x == nil {
		return nil
	}
	out := new(CustomMetricTargetList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *DaemonSet) DeepCopyInto(out *DaemonSet) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	out.Status = in.Status
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new DaemonSet.
func (x *DaemonSet) DeepCopy() *DaemonSet {
	if x == nil {
		return nil
	}
	out := new(DaemonSet)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *DaemonSet) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *DaemonSetList) DeepCopyInto(out *DaemonSetList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DaemonSet, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new DaemonSetList.
func (x *DaemonSetList) DeepCopy() *DaemonSetList {
	if x == nil {
		return nil
	}
	out := new(DaemonSetList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *DaemonSetList) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *DaemonSetSpec) DeepCopyInto(out *DaemonSetSpec) {
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = (*in).DeepCopy()
	} else {
		out.Selector = nil
	}
	in.Template.DeepCopyInto(&out.Template)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new DaemonSetSpec.
func (x *DaemonSetSpec) DeepCopy() *DaemonSetSpec {
	if x == nil {
		return nil
	}
	out := new(DaemonSetSpec)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *DaemonSetStatus) DeepCopyInto(out *DaemonSetStatus) {
	out.CurrentNumberScheduled = in.CurrentNumberScheduled
	out.NumberMisscheduled = in.NumberMisscheduled
	out.DesiredNumberScheduled = in.DesiredNumberScheduled
	out.NumberReady = in.NumberReady
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new DaemonSetStatus.
func (x *DaemonSetStatus) DeepCopy() *DaemonSetStatus {
	if x == nil {
		return nil
	}
	out := new(DaemonSetStatus)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *Deployment) DeepCopyInto(out *Deployment) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new Deployment.
func (x *Deployment) DeepCopy() *Deployment {
	if x == nil {
		return nil
	}
	out := new(Deployment)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *Deployment) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *DeploymentCondition) DeepCopyInto(out *DeploymentCondition) {
	out.Type = in.Type
	out.Status = in.Status
	in.LastUpdateTime.DeepCopyInto(&out.LastUpdateTime)
	in.LastTransitionTime.DeepCopyInto(&out.LastTransitionTime)
	out.Reason = in.Reason
	out.Message = in.Message
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new DeploymentCondition.
func (x *DeploymentCondition) DeepCopy() *DeploymentCondition {
	if x == nil {
		return nil
	}
	out := new(DeploymentCondition)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *DeploymentList) DeepCopyInto(out *DeploymentList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Deployment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new DeploymentList.
func (x *DeploymentList) DeepCopy() *DeploymentList {
	if x == nil {
		return nil
	}
	out := new(DeploymentList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *DeploymentList) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *DeploymentRollback) DeepCopyInto(out *DeploymentRollback) {
	out.TypeMeta = in.TypeMeta
	out.Name = in.Name
	if in.UpdatedAnnotations != nil {
		in, out := &in.UpdatedAnnotations, &out.UpdatedAnnotations
		*out = make(map[string]string)
		for key, val := range *in {
			(*out)[key] = val
		}
	} else {
		out.UpdatedAnnotations = nil
	}
	out.RollbackTo = in.RollbackTo
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new DeploymentRollback.
func (x *DeploymentRollback) DeepCopy() *DeploymentRollback {
	if x == nil {
		return nil
	}
	out := new(DeploymentRollback)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *DeploymentRollback) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *DeploymentSpec) DeepCopyInto(out *DeploymentSpec) {
	out.Replicas = in.Replicas
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = (*in).DeepCopy()
	} else {
		out.Selector = nil
	}
	in.Template.DeepCopyInto(&out.Template)
	in.Strategy.DeepCopyInto(&out.Strategy)
	out.MinReadySeconds = in.MinReadySeconds
	if in.RevisionHistoryLimit != nil {
		in, out := &in.RevisionHistoryLimit, &out.RevisionHistoryLimit
		*out = new(int32)
		**out = **in
	} else {
		out.RevisionHistoryLimit = nil
	}
	out.Paused = in.Paused
	if in.RollbackTo != nil {
		in, out := &in.RollbackTo, &out.RollbackTo
		*out = new(RollbackConfig)
		**out = **in
	} else {
		out.RollbackTo = nil
	}
	if in.ProgressDeadlineSeconds != nil {
		in, out := &in.ProgressDeadlineSeconds, &out.ProgressDeadlineSeconds
		*out = new(int32)
		**out = **in
	} else {
		out.ProgressDeadlineSeconds = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new DeploymentSpec.
func (x *DeploymentSpec) DeepCopy() *DeploymentSpec {
	if x == nil {
		return nil
	}
	out := new(DeploymentSpec)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *DeploymentStatus) DeepCopyInto(out *DeploymentStatus) {
	out.ObservedGeneration = in.ObservedGeneration
	out.Replicas = in.Replicas
	out.UpdatedReplicas = in.UpdatedReplicas
	out.AvailableReplicas = in.AvailableReplicas
	out.UnavailableReplicas = in.UnavailableReplicas
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]DeploymentCondition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Conditions = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new DeploymentStatus.
func (x *DeploymentStatus) DeepCopy() *DeploymentStatus {
	if x == nil {
		return nil
	}
	out := new(DeploymentStatus)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *DeploymentStrategy) DeepCopyInto(out *DeploymentStrategy) {
	out.Type = in.Type
	if in.RollingUpdate != nil {
		in, out := &in.RollingUpdate, &out.RollingUpdate
		*out = new(RollingUpdateDeployment)
		**out = **in
	} else {
		out.RollingUpdate = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new DeploymentStrategy.
func (x *DeploymentStrategy) DeepCopy() *DeploymentStrategy {
	if x == nil {
		return nil
	}
	out := new(DeploymentStrategy)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *FSGroupStrategyOptions) DeepCopyInto(out *FSGroupStrategyOptions) {
	out.Rule = in.Rule
	if in.Ranges != nil {
		in, out := &in.Ranges, &out.Ranges
		*out = make([]IDRange, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.Ranges = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new FSGroupStrategyOptions.
func (x *FSGroupStrategyOptions) DeepCopy() *FSGroupStrategyOptions {
	if x == nil {
		return nil
	}
	out := new(FSGroupStrategyOptions)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *HTTPIngressPath) DeepCopyInto(out *HTTPIngressPath) {
	out.Path = in.Path
	out.Backend = in.Backend
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new HTTPIngressPath.
func (x *HTTPIngressPath) DeepCopy() *HTTPIngressPath {
	if x == nil {
		return nil
	}
	out := new(HTTPIngressPath)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *HTTPIngressRuleValue) DeepCopyInto(out *HTTPIngressRuleValue) {
	if in.Paths != nil {
		in, out := &in.Paths, &out.Paths
		*out = make([]HTTPIngressPath, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.Paths = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new HTTPIngressRuleValue.
func (x *HTTPIngressRuleValue) DeepCopy() *HTTPIngressRuleValue {
	if x == nil {
		return nil
	}
	out := new(HTTPIngressRuleValue)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *HostPortRange) DeepCopyInto(out *HostPortRange) {
	out.Min = in.Min
	out.Max = in.Max
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new HostPortRange.
func (x *HostPortRange) DeepCopy() *HostPortRange {
	if x == nil {
		return nil
	}
	out := new(HostPortRange)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *IDRange) DeepCopyInto(out *IDRange) {
	out.Min = in.Min
	out.Max = in.Max
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new IDRange.
func (x *IDRange) DeepCopy() *IDRange {
	if x == nil {
		return nil
	}
	out := new(IDRange)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *Ingress) DeepCopyInto(out *Ingress) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new Ingress.
func (x *Ingress) DeepCopy() *Ingress {
	if x == nil {
		return nil
	}
	out := new(Ingress)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *Ingress) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *IngressBackend) DeepCopyInto(out *IngressBackend) {
	out.ServiceName = in.ServiceName
	out.ServicePort = in.ServicePort
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new IngressBackend.
func (x *IngressBackend) DeepCopy() *IngressBackend {
	if x == nil {
		return nil
	}
	out := new(IngressBackend)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *IngressList) DeepCopyInto(out *IngressList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Ingress, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new IngressList.
func (x *IngressList) DeepCopy() *IngressList {
	if x == nil {
		return nil
	}
	out := new(IngressList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *IngressList) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *IngressRule) DeepCopyInto(out *IngressRule) {
	out.Host = in.Host
	in.IngressRuleValue.DeepCopyInto(&out.IngressRuleValue)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new IngressRule.
func (x *IngressRule) DeepCopy() *IngressRule {
	if x == nil {
		return nil
	}
	out := new(IngressRule)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *IngressRuleValue) DeepCopyInto(out *IngressRuleValue) {
	if in.HTTP != nil {
		in, out := &in.HTTP, &out.HTTP
		*out = (*in).DeepCopy()
	} else {
		out.HTTP = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new IngressRuleValue.
func (x *IngressRuleValue) DeepCopy() *IngressRuleValue {
	if x == nil {
		return nil
	}
	out := new(IngressRuleValue)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *IngressSpec) DeepCopyInto(out *IngressSpec) {
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(IngressBackend)
		**out = **in
	} else {
		out.Backend = nil
	}
	if in.TLS != nil {
		in, out := &in.TLS, &out.TLS
		*out = make([]IngressTLS, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.TLS = nil
	}
	if in.Rules != nil {
		in, out := &in.Rules, &out.Rules
		*out = make([]IngressRule, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Rules = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new IngressSpec.
func (x *IngressSpec) DeepCopy() *IngressSpec {
	if x == nil {
		return nil
	}
	out := new(IngressSpec)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *IngressStatus) DeepCopyInto(out *IngressStatus) {
	in.LoadBalancer.DeepCopyInto(&out.LoadBalancer)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new IngressStatus.
func (x *IngressStatus) DeepCopy() *IngressStatus {
	if x == nil {
		return nil
	}
	out := new(IngressStatus)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *IngressTLS) DeepCopyInto(out *IngressTLS) {
	if in.Hosts != nil {
		in, out := &in.Hosts, &out.Hosts
		*out = make([]string, len(*in))
		copy(*out, *in)
	} else {
		out.Hosts = nil
	}
	out.SecretName = in.SecretName
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new IngressTLS.
func (x *IngressTLS) DeepCopy() *IngressTLS {
	if x == nil {
		return nil
	}
	out := new(IngressTLS)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *NetworkPolicy) DeepCopyInto(out *NetworkPolicy) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new NetworkPolicy.
func (x *NetworkPolicy) DeepCopy() *NetworkPolicy {
	if x == nil {
		return nil
	}
	out := new(NetworkPolicy)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *NetworkPolicy) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *NetworkPolicyIngressRule) DeepCopyInto(out *NetworkPolicyIngressRule) {
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]NetworkPolicyPort, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Ports = nil
	}
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = make([]NetworkPolicyPeer, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.From = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new NetworkPolicyIngressRule.
func (x *NetworkPolicyIngressRule) DeepCopy() *NetworkPolicyIngressRule {
	if x == nil {
		return nil
	}
	out := new(NetworkPolicyIngressRule)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *NetworkPolicyList) DeepCopyInto(out *NetworkPolicyList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NetworkPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new NetworkPolicyList.
func (x *NetworkPolicyList) DeepCopy() *NetworkPolicyList {
	if x == nil {
		return nil
	}
	out := new(NetworkPolicyList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *NetworkPolicyList) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *NetworkPolicyPeer) DeepCopyInto(out *NetworkPolicyPeer) {
	if in.PodSelector != nil {
		in, out := &in.PodSelector, &out.PodSelector
		*out = (*in).DeepCopy()
	} else {
		out.PodSelector = nil
	}
	if in.NamespaceSelector != nil {
		in, out := &in.NamespaceSelector, &out.NamespaceSelector
		*out = (*in).DeepCopy()
	} else {
		out.NamespaceSelector = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new NetworkPolicyPeer.
func (x *NetworkPolicyPeer) DeepCopy() *NetworkPolicyPeer {
	if x == nil {
		return nil
	}
	out := new(NetworkPolicyPeer)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *NetworkPolicyPort) DeepCopyInto(out *NetworkPolicyPort) {
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(api.Protocol)
		**out = **in
	} else {
		out.Protocol = nil
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(intstr.IntOrString)
		**out = **in
	} else {
		out.Port = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new NetworkPolicyPort.
func (x *NetworkPolicyPort) DeepCopy() *NetworkPolicyPort {
	if x == nil {
		return nil
	}
	out := new(NetworkPolicyPort)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *NetworkPolicySpec) DeepCopyInto(out *NetworkPolicySpec) {
	in.PodSelector.DeepCopyInto(&out.PodSelector)
	if in.Ingress != nil {
		in, out := &in.Ingress, &out.Ingress
		*out = make([]NetworkPolicyIngressRule, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Ingress = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new NetworkPolicySpec.
func (x *NetworkPolicySpec) DeepCopy() *NetworkPolicySpec {
	if x == nil {
		return nil
	}
	out := new(NetworkPolicySpec)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *PodSecurityPolicy) DeepCopyInto(out *PodSecurityPolicy) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new PodSecurityPolicy.
func (x *PodSecurityPolicy) DeepCopy() *PodSecurityPolicy {
	if x == nil {
		return nil
	}
	out := new(PodSecurityPolicy)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *PodSecurityPolicy) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *PodSecurityPolicyList) DeepCopyInto(out *PodSecurityPolicyList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PodSecurityPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new PodSecurityPolicyList.
func (x *PodSecurityPolicyList) DeepCopy() *PodSecurityPolicyList {
	if x == nil {
		return nil
	}
	out := new(PodSecurityPolicyList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *PodSecurityPolicyList) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *PodSecurityPolicySpec) DeepCopyInto(out *PodSecurityPolicySpec) {
	out.Privileged = in.Privileged
	if in.DefaultAddCapabilities != nil {
		in, out := &in.DefaultAddCapabilities, &out.DefaultAddCapabilities
		*out = make([]api.Capability, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.DefaultAddCapabilities = nil
	}
	if in.RequiredDropCapabilities != nil {
		in, out := &in.RequiredDropCapabilities, &out.RequiredDropCapabilities
		*out = make([]api.Capability, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.RequiredDropCapabilities = nil
	}
	if in.AllowedCapabilities != nil {
		in, out := &in.AllowedCapabilities, &out.AllowedCapabilities
		*out = make([]api.Capability, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.AllowedCapabilities = nil
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]FSType, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.Volumes = nil
	}
	out.HostNetwork = in.HostNetwork
	if in.HostPorts != nil {
		in, out := &in.HostPorts, &out.HostPorts
		*out = make([]HostPortRange, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.HostPorts = nil
	}
	out.HostPID = in.HostPID
	out.HostIPC = in.HostIPC
	in.SELinux.DeepCopyInto(&out.SELinux)
	in.RunAsUser.DeepCopyInto(&out.RunAsUser)
	in.SupplementalGroups.DeepCopyInto(&out.SupplementalGroups)
	in.FSGroup.DeepCopyInto(&out.FSGroup)
	out.ReadOnlyRootFilesystem = in.ReadOnlyRootFilesystem
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new PodSecurityPolicySpec.
func (x *PodSecurityPolicySpec) DeepCopy() *PodSecurityPolicySpec {
	if x == nil {
		return nil
	}
	out := new(PodSecurityPolicySpec)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ReplicaSet) DeepCopyInto(out *ReplicaSet) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ReplicaSet.
func (x *ReplicaSet) DeepCopy() *ReplicaSet {
	if x == nil {
		return nil
	}
	out := new(ReplicaSet)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *ReplicaSet) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ReplicaSetCondition) DeepCopyInto(out *ReplicaSetCondition) {
	out.Type = in.Type
	out.Status = in.Status
	in.LastTransitionTime.DeepCopyInto(&out.LastTransitionTime)
	out.Reason = in.Reason
	out.Message = in.Message
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ReplicaSetCondition.
func (x *ReplicaSetCondition) DeepCopy() *ReplicaSetCondition {
	if x == nil {
		return nil
	}
	out := new(ReplicaSetCondition)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ReplicaSetList) DeepCopyInto(out *ReplicaSetList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ReplicaSet, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ReplicaSetList.
func (x *ReplicaSetList) DeepCopy() *ReplicaSetList {
	if x == nil {
		return nil
	}
	out := new(ReplicaSetList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *ReplicaSetList) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ReplicaSetSpec) DeepCopyInto(out *ReplicaSetSpec) {
	out.Replicas = in.Replicas
	out.MinReadySeconds = in.MinReadySeconds
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = (*in).DeepCopy()
	} else {
		out.Selector = nil
	}
	in.Template.DeepCopyInto(&out.Template)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ReplicaSetSpec.
func (x *ReplicaSetSpec) DeepCopy() *ReplicaSetSpec {
	if x == nil {
		return nil
	}
	out := new(ReplicaSetSpec)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ReplicaSetStatus) DeepCopyInto(out *ReplicaSetStatus) {
	out.Replicas = in.Replicas
	out.FullyLabeledReplicas = in.FullyLabeledReplicas
	out.ReadyReplicas = in.ReadyReplicas
	out.AvailableReplicas = in.AvailableReplicas
	out.ObservedGeneration = in.ObservedGeneration
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]ReplicaSetCondition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Conditions = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ReplicaSetStatus.
func (x *ReplicaSetStatus) DeepCopy() *ReplicaSetStatus {
	if x == nil {
		return nil
	}
	out := new(ReplicaSetStatus)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ReplicationControllerDummy) DeepCopyInto(out *ReplicationControllerDummy) {
	out.TypeMeta = in.TypeMeta
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ReplicationControllerDummy.
func (x *ReplicationControllerDummy) DeepCopy() *ReplicationControllerDummy {
	if x == nil {
		return nil
	}
	out := new(ReplicationControllerDummy)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *ReplicationControllerDummy) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *RollbackConfig) DeepCopyInto(out *RollbackConfig) {
	out.Revision = in.Revision
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new RollbackConfig.
func (x *RollbackConfig) DeepCopy() *RollbackConfig {
	if x == nil {
		return nil
	}
	out := new(RollbackConfig)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *RollingUpdateDeployment) DeepCopyInto(out *RollingUpdateDeployment) {
	out.MaxUnavailable = in.MaxUnavailable
	out.MaxSurge = in.MaxSurge
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new RollingUpdateDeployment.
func (x *RollingUpdateDeployment) DeepCopy() *RollingUpdateDeployment {
	if x == nil {
		return nil
	}
	out := new(RollingUpdateDeployment)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *RunAsUserStrategyOptions) DeepCopyInto(out *RunAsUserStrategyOptions) {
	out.Rule = in.Rule
	if in.Ranges != nil {
		in, out := &in.Ranges, &out.Ranges
		*out = make([]IDRange, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.Ranges = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new RunAsUserStrategyOptions.
func (x *RunAsUserStrategyOptions) DeepCopy() *RunAsUserStrategyOptions {
	if x == nil {
		return nil
	}
	out := new(RunAsUserStrategyOptions)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *SELinuxStrategyOptions) DeepCopyInto(out *SELinuxStrategyOptions) {
	out.Rule = in.Rule
	if in.SELinuxOptions != nil {
		in, out := &in.SELinuxOptions, &out.SELinuxOptions
		*out = new(api.SELinuxOptions)
		**out = **in
	} else {
		out.SELinuxOptions = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new SELinuxStrategyOptions.
func (x *SELinuxStrategyOptions) DeepCopy() *SELinuxStrategyOptions {
	if x == nil {
		return nil
	}
	out := new(SELinuxStrategyOptions)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *Scale) DeepCopyInto(out *Scale) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new Scale.
func (x *Scale) DeepCopy() *Scale {
	if x == nil {
		return nil
	}
	out := new(Scale)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *Scale) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ScaleSpec) DeepCopyInto(out *ScaleSpec) {
	out.Replicas = in.Replicas
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ScaleSpec.
func (x *ScaleSpec) DeepCopy() *ScaleSpec {
	if x == nil {
		return nil
	}
	out := new(ScaleSpec)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ScaleStatus) DeepCopyInto(out *ScaleStatus) {
	out.Replicas = in.Replicas
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = (*in).DeepCopy()
	} else {
		out.Selector = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ScaleStatus.
func (x *ScaleStatus) DeepCopy() *ScaleStatus {
	if x == nil {
		return nil
	}
	out := new(ScaleStatus)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *SupplementalGroupsStrategyOptions) DeepCopyInto(out *SupplementalGroupsStrategyOptions) {
	out.Rule = in.Rule
	if in.Ranges != nil {
		in, out := &in.Ranges, &out.Ranges
		*out = make([]IDRange, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.Ranges = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new SupplementalGroupsStrategyOptions.
func (x *SupplementalGroupsStrategyOptions) DeepCopy() *SupplementalGroupsStrategyOptions {
	if x == nil {
		return nil
	}
	out := new(SupplementalGroupsStrategyOptions)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ThirdPartyResource) DeepCopyInto(out *ThirdPartyResource) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Description = in.Description
	if in.Versions != nil {
		in, out := &in.Versions, &out.Versions
		*out = make([]APIVersion, len(*in))
		for i := range *in {
			(*out)[i] = (*in)[i]
		}
	} else {
		out.Versions = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ThirdPartyResource.
func (x *ThirdPartyResource) DeepCopy() *ThirdPartyResource {
	if x == nil {
		return nil
	}
	out := new(ThirdPartyResource)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *ThirdPartyResource) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ThirdPartyResourceData) DeepCopyInto(out *ThirdPartyResourceData) {
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	if in.Data != nil {
		in, out := &in.Data, &out.Data
		*out = make([]byte, len(*in))
		copy(*out, *in)
	} else {
		out.Data = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ThirdPartyResourceData.
func (x *ThirdPartyResourceData) DeepCopy() *ThirdPartyResourceData {
	if x == nil {
		return nil
	}
	out := new(ThirdPartyResourceData)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *ThirdPartyResourceData) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ThirdPartyResourceDataList) DeepCopyInto(out *ThirdPartyResourceDataList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ThirdPartyResourceData, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ThirdPartyResourceDataList.
func (x *ThirdPartyResourceDataList) DeepCopy() *ThirdPartyResourceDataList {
	if x == nil {
		return nil
	}
	out := new(ThirdPartyResourceDataList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *ThirdPartyResourceDataList) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *ThirdPartyResourceList) DeepCopyInto(out *ThirdPartyResourceList) {
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ThirdPartyResource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	} else {
		out.Items = nil
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new ThirdPartyResourceList.
func (x *ThirdPartyResourceList) DeepCopy() *ThirdPartyResourceList {
	if x == nil {
		return nil
	}
	out := new(ThirdPartyResourceList)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *ThirdPartyResourceList) DeepCopyObject() unversioned.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}
