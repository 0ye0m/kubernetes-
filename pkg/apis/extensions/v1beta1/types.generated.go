/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg1_v1 "k8s.io/kubernetes/pkg/apis/meta/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg2_v1.ObjectMeta
		var v2 pkg1_v1.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [3]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			yyq13[2] = x.TargetSelector != ""
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(3)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[2] {
					yym21 := z.EncBinary()
					_ = yym21
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq13[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetSelector))
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym23 := z.DecBinary()
	_ = yym23
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct24 := r.ContainerType()
		if yyct24 == codecSelferValueTypeMap1234 {
			yyl24 := r.ReadMapStart()
			if yyl24 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl24, d)
			}
		} else if yyct24 == codecSelferValueTypeArray1234 {
			yyl24 := r.ReadArrayStart()
			if yyl24 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl24, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys25Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys25Slc
	var yyhl25 bool = l >= 0
	for yyj25 := 0; ; yyj25++ {
		if yyhl25 {
			if yyj25 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys25Slc = r.DecodeBytes(yys25Slc, true, true)
		yys25 := string(yys25Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys25 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv27 := &x.Selector
				yym28 := z.DecBinary()
				_ = yym28
				if false {
				} else {
					z.F.DecMapStringStringX(yyv27, false, d)
				}
			}
		case "targetSelector":
			if r.TryDecodeAsNil() {
				x.TargetSelector = ""
			} else {
				x.TargetSelector = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys25)
		} // end switch yys25
	} // end for yyj25
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv32 := &x.Selector
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			z.F.DecMapStringStringX(yyv32, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetSelector = ""
	} else {
		x.TargetSelector = string(r.DecodeString())
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym35 := z.EncBinary()
		_ = yym35
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep36 := !z.EncBinary()
			yy2arr36 := z.EncBasicHandle().StructToArray
			var yyq36 [5]bool
			_, _, _ = yysep36, yyq36, yy2arr36
			const yyr36 bool = false
			yyq36[0] = x.Kind != ""
			yyq36[1] = x.APIVersion != ""
			yyq36[2] = true
			yyq36[3] = true
			yyq36[4] = true
			var yynn36 int
			if yyr36 || yy2arr36 {
				r.EncodeArrayStart(5)
			} else {
				yynn36 = 0
				for _, b := range yyq36 {
					if b {
						yynn36++
					}
				}
				r.EncodeMapStart(yynn36)
				yynn36 = 0
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[0] {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq36[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[1] {
					yym41 := z.EncBinary()
					_ = yym41
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq36[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[2] {
					yy44 := &x.ObjectMeta
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy45 := &x.ObjectMeta
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[3] {
					yy47 := &x.Spec
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy48 := &x.Spec
					yy48.CodecEncodeSelf(e)
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[4] {
					yy50 := &x.Status
					yy50.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy51 := &x.Status
					yy51.CodecEncodeSelf(e)
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv57 := &x.ObjectMeta
				yyv57.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv58 := &x.Spec
				yyv58.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv59 := &x.Status
				yyv59.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj60 int
	var yyb60 bool
	var yyhl60 bool = l >= 0
	yyj60++
	if yyhl60 {
		yyb60 = yyj60 > l
	} else {
		yyb60 = r.CheckBreak()
	}
	if yyb60 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj60++
	if yyhl60 {
		yyb60 = yyj60 > l
	} else {
		yyb60 = r.CheckBreak()
	}
	if yyb60 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj60++
	if yyhl60 {
		yyb60 = yyj60 > l
	} else {
		yyb60 = r.CheckBreak()
	}
	if yyb60 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv63 := &x.ObjectMeta
		yyv63.CodecDecodeSelf(d)
	}
	yyj60++
	if yyhl60 {
		yyb60 = yyj60 > l
	} else {
		yyb60 = r.CheckBreak()
	}
	if yyb60 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv64 := &x.Spec
		yyv64.CodecDecodeSelf(d)
	}
	yyj60++
	if yyhl60 {
		yyb60 = yyj60 > l
	} else {
		yyb60 = r.CheckBreak()
	}
	if yyb60 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv65 := &x.Status
		yyv65.CodecDecodeSelf(d)
	}
	for {
		yyj60++
		if yyhl60 {
			yyb60 = yyj60 > l
		} else {
			yyb60 = r.CheckBreak()
		}
		if yyb60 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj60-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym66 := z.EncBinary()
		_ = yym66
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep67 := !z.EncBinary()
			yy2arr67 := z.EncBasicHandle().StructToArray
			var yyq67 [2]bool
			_, _, _ = yysep67, yyq67, yy2arr67
			const yyr67 bool = false
			yyq67[0] = x.Kind != ""
			yyq67[1] = x.APIVersion != ""
			var yynn67 int
			if yyr67 || yy2arr67 {
				r.EncodeArrayStart(2)
			} else {
				yynn67 = 0
				for _, b := range yyq67 {
					if b {
						yynn67++
					}
				}
				r.EncodeMapStart(yynn67)
				yynn67 = 0
			}
			if yyr67 || yy2arr67 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq67[0] {
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq67[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym70 := z.EncBinary()
					_ = yym70
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr67 || yy2arr67 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq67[1] {
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq67[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym73 := z.EncBinary()
					_ = yym73
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr67 || yy2arr67 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym74 := z.DecBinary()
	_ = yym74
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct75 := r.ContainerType()
		if yyct75 == codecSelferValueTypeMap1234 {
			yyl75 := r.ReadMapStart()
			if yyl75 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl75, d)
			}
		} else if yyct75 == codecSelferValueTypeArray1234 {
			yyl75 := r.ReadArrayStart()
			if yyl75 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl75, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys76Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys76Slc
	var yyhl76 bool = l >= 0
	for yyj76 := 0; ; yyj76++ {
		if yyhl76 {
			if yyj76 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys76Slc = r.DecodeBytes(yys76Slc, true, true)
		yys76 := string(yys76Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys76 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys76)
		} // end switch yys76
	} // end for yyj76
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj79 int
	var yyb79 bool
	var yyhl79 bool = l >= 0
	yyj79++
	if yyhl79 {
		yyb79 = yyj79 > l
	} else {
		yyb79 = r.CheckBreak()
	}
	if yyb79 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj79++
	if yyhl79 {
		yyb79 = yyj79 > l
	} else {
		yyb79 = r.CheckBreak()
	}
	if yyb79 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj79++
		if yyhl79 {
			yyb79 = yyj79 > l
		} else {
			yyb79 = r.CheckBreak()
		}
		if yyb79 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj79-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym82 := z.EncBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep83 := !z.EncBinary()
			yy2arr83 := z.EncBasicHandle().StructToArray
			var yyq83 [4]bool
			_, _, _ = yysep83, yyq83, yy2arr83
			const yyr83 bool = false
			yyq83[0] = x.Kind != ""
			yyq83[1] = x.Name != ""
			yyq83[2] = x.APIVersion != ""
			yyq83[3] = x.Subresource != ""
			var yynn83 int
			if yyr83 || yy2arr83 {
				r.EncodeArrayStart(4)
			} else {
				yynn83 = 0
				for _, b := range yyq83 {
					if b {
						yynn83++
					}
				}
				r.EncodeMapStart(yynn83)
				yynn83 = 0
			}
			if yyr83 || yy2arr83 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq83[0] {
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq83[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym86 := z.EncBinary()
					_ = yym86
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr83 || yy2arr83 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq83[1] {
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq83[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym89 := z.EncBinary()
					_ = yym89
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr83 || yy2arr83 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq83[2] {
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq83[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr83 || yy2arr83 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq83[3] {
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq83[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym95 := z.EncBinary()
					_ = yym95
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr83 || yy2arr83 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym96 := z.DecBinary()
	_ = yym96
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct97 := r.ContainerType()
		if yyct97 == codecSelferValueTypeMap1234 {
			yyl97 := r.ReadMapStart()
			if yyl97 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl97, d)
			}
		} else if yyct97 == codecSelferValueTypeArray1234 {
			yyl97 := r.ReadArrayStart()
			if yyl97 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl97, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys98Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys98Slc
	var yyhl98 bool = l >= 0
	for yyj98 := 0; ; yyj98++ {
		if yyhl98 {
			if yyj98 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys98Slc = r.DecodeBytes(yys98Slc, true, true)
		yys98 := string(yys98Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys98 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys98)
		} // end switch yys98
	} // end for yyj98
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj103 int
	var yyb103 bool
	var yyhl103 bool = l >= 0
	yyj103++
	if yyhl103 {
		yyb103 = yyj103 > l
	} else {
		yyb103 = r.CheckBreak()
	}
	if yyb103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj103++
	if yyhl103 {
		yyb103 = yyj103 > l
	} else {
		yyb103 = r.CheckBreak()
	}
	if yyb103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj103++
	if yyhl103 {
		yyb103 = yyj103 > l
	} else {
		yyb103 = r.CheckBreak()
	}
	if yyb103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj103++
	if yyhl103 {
		yyb103 = yyj103 > l
	} else {
		yyb103 = r.CheckBreak()
	}
	if yyb103 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj103++
		if yyhl103 {
			yyb103 = yyj103 > l
		} else {
			yyb103 = r.CheckBreak()
		}
		if yyb103 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj103-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym108 := z.EncBinary()
		_ = yym108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep109 := !z.EncBinary()
			yy2arr109 := z.EncBasicHandle().StructToArray
			var yyq109 [1]bool
			_, _, _ = yysep109, yyq109, yy2arr109
			const yyr109 bool = false
			var yynn109 int
			if yyr109 || yy2arr109 {
				r.EncodeArrayStart(1)
			} else {
				yynn109 = 1
				for _, b := range yyq109 {
					if b {
						yynn109++
					}
				}
				r.EncodeMapStart(yynn109)
				yynn109 = 0
			}
			if yyr109 || yy2arr109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym111 := z.EncBinary()
				_ = yym111
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym112 := z.EncBinary()
				_ = yym112
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr109 || yy2arr109 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym113 := z.DecBinary()
	_ = yym113
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct114 := r.ContainerType()
		if yyct114 == codecSelferValueTypeMap1234 {
			yyl114 := r.ReadMapStart()
			if yyl114 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl114, d)
			}
		} else if yyct114 == codecSelferValueTypeArray1234 {
			yyl114 := r.ReadArrayStart()
			if yyl114 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl114, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys115Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys115Slc
	var yyhl115 bool = l >= 0
	for yyj115 := 0; ; yyj115++ {
		if yyhl115 {
			if yyj115 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys115Slc = r.DecodeBytes(yys115Slc, true, true)
		yys115 := string(yys115Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys115 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys115)
		} // end switch yys115
	} // end for yyj115
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj117 int
	var yyb117 bool
	var yyhl117 bool = l >= 0
	yyj117++
	if yyhl117 {
		yyb117 = yyj117 > l
	} else {
		yyb117 = r.CheckBreak()
	}
	if yyb117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int32(r.DecodeInt(32))
	}
	for {
		yyj117++
		if yyhl117 {
			yyb117 = yyj117 > l
		} else {
			yyb117 = r.CheckBreak()
		}
		if yyb117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym119 := z.EncBinary()
		_ = yym119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep120 := !z.EncBinary()
			yy2arr120 := z.EncBasicHandle().StructToArray
			var yyq120 [2]bool
			_, _, _ = yysep120, yyq120, yy2arr120
			const yyr120 bool = false
			var yynn120 int
			if yyr120 || yy2arr120 {
				r.EncodeArrayStart(2)
			} else {
				yynn120 = 2
				for _, b := range yyq120 {
					if b {
						yynn120++
					}
				}
				r.EncodeMapStart(yynn120)
				yynn120 = 0
			}
			if yyr120 || yy2arr120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym122 := z.EncBinary()
				_ = yym122
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym123 := z.EncBinary()
				_ = yym123
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr120 || yy2arr120 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy125 := &x.TargetValue
				yym126 := z.EncBinary()
				_ = yym126
				if false {
				} else if z.HasExtensions() && z.EncExt(yy125) {
				} else if !yym126 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy125)
				} else {
					z.EncFallback(yy125)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy127 := &x.TargetValue
				yym128 := z.EncBinary()
				_ = yym128
				if false {
				} else if z.HasExtensions() && z.EncExt(yy127) {
				} else if !yym128 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy127)
				} else {
					z.EncFallback(yy127)
				}
			}
			if yyr120 || yy2arr120 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym129 := z.DecBinary()
	_ = yym129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct130 := r.ContainerType()
		if yyct130 == codecSelferValueTypeMap1234 {
			yyl130 := r.ReadMapStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl130, d)
			}
		} else if yyct130 == codecSelferValueTypeArray1234 {
			yyl130 := r.ReadArrayStart()
			if yyl130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys131Slc
	var yyhl131 bool = l >= 0
	for yyj131 := 0; ; yyj131++ {
		if yyhl131 {
			if yyj131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys131Slc = r.DecodeBytes(yys131Slc, true, true)
		yys131 := string(yys131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys131 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv133 := &x.TargetValue
				yym134 := z.DecBinary()
				_ = yym134
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv133) {
				} else if !yym134 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv133)
				} else {
					z.DecFallback(yyv133, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys131)
		} // end switch yys131
	} // end for yyj131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj135 int
	var yyb135 bool
	var yyhl135 bool = l >= 0
	yyj135++
	if yyhl135 {
		yyb135 = yyj135 > l
	} else {
		yyb135 = r.CheckBreak()
	}
	if yyb135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj135++
	if yyhl135 {
		yyb135 = yyj135 > l
	} else {
		yyb135 = r.CheckBreak()
	}
	if yyb135 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv137 := &x.TargetValue
		yym138 := z.DecBinary()
		_ = yym138
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv137) {
		} else if !yym138 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv137)
		} else {
			z.DecFallback(yyv137, false)
		}
	}
	for {
		yyj135++
		if yyhl135 {
			yyb135 = yyj135 > l
		} else {
			yyb135 = r.CheckBreak()
		}
		if yyb135 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj135-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym139 := z.EncBinary()
		_ = yym139
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep140 := !z.EncBinary()
			yy2arr140 := z.EncBasicHandle().StructToArray
			var yyq140 [4]bool
			_, _, _ = yysep140, yyq140, yy2arr140
			const yyr140 bool = false
			yyq140[0] = x.Kind != ""
			yyq140[1] = x.APIVersion != ""
			yyq140[2] = true
			var yynn140 int
			if yyr140 || yy2arr140 {
				r.EncodeArrayStart(4)
			} else {
				yynn140 = 1
				for _, b := range yyq140 {
					if b {
						yynn140++
					}
				}
				r.EncodeMapStart(yynn140)
				yynn140 = 0
			}
			if yyr140 || yy2arr140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq140[0] {
					yym142 := z.EncBinary()
					_ = yym142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq140[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym143 := z.EncBinary()
					_ = yym143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr140 || yy2arr140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq140[1] {
					yym145 := z.EncBinary()
					_ = yym145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq140[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr140 || yy2arr140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq140[2] {
					yy148 := &x.ListMeta
					yym149 := z.EncBinary()
					_ = yym149
					if false {
					} else if z.HasExtensions() && z.EncExt(yy148) {
					} else {
						z.EncFallback(yy148)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq140[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy150 := &x.ListMeta
					yym151 := z.EncBinary()
					_ = yym151
					if false {
					} else if z.HasExtensions() && z.EncExt(yy150) {
					} else {
						z.EncFallback(yy150)
					}
				}
			}
			if yyr140 || yy2arr140 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym153 := z.EncBinary()
					_ = yym153
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym154 := z.EncBinary()
					_ = yym154
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr140 || yy2arr140 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym155 := z.DecBinary()
	_ = yym155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct156 := r.ContainerType()
		if yyct156 == codecSelferValueTypeMap1234 {
			yyl156 := r.ReadMapStart()
			if yyl156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl156, d)
			}
		} else if yyct156 == codecSelferValueTypeArray1234 {
			yyl156 := r.ReadArrayStart()
			if yyl156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys157Slc
	var yyhl157 bool = l >= 0
	for yyj157 := 0; ; yyj157++ {
		if yyhl157 {
			if yyj157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys157Slc = r.DecodeBytes(yys157Slc, true, true)
		yys157 := string(yys157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys157 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv160 := &x.ListMeta
				yym161 := z.DecBinary()
				_ = yym161
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv160) {
				} else {
					z.DecFallback(yyv160, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv162 := &x.Items
				yym163 := z.DecBinary()
				_ = yym163
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv162), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys157)
		} // end switch yys157
	} // end for yyj157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj164 int
	var yyb164 bool
	var yyhl164 bool = l >= 0
	yyj164++
	if yyhl164 {
		yyb164 = yyj164 > l
	} else {
		yyb164 = r.CheckBreak()
	}
	if yyb164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj164++
	if yyhl164 {
		yyb164 = yyj164 > l
	} else {
		yyb164 = r.CheckBreak()
	}
	if yyb164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj164++
	if yyhl164 {
		yyb164 = yyj164 > l
	} else {
		yyb164 = r.CheckBreak()
	}
	if yyb164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv167 := &x.ListMeta
		yym168 := z.DecBinary()
		_ = yym168
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv167) {
		} else {
			z.DecFallback(yyv167, false)
		}
	}
	yyj164++
	if yyhl164 {
		yyb164 = yyj164 > l
	} else {
		yyb164 = r.CheckBreak()
	}
	if yyb164 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv169 := &x.Items
		yym170 := z.DecBinary()
		_ = yym170
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv169), d)
		}
	}
	for {
		yyj164++
		if yyhl164 {
			yyb164 = yyj164 > l
		} else {
			yyb164 = r.CheckBreak()
		}
		if yyb164 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj164-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym171 := z.EncBinary()
		_ = yym171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep172 := !z.EncBinary()
			yy2arr172 := z.EncBasicHandle().StructToArray
			var yyq172 [2]bool
			_, _, _ = yysep172, yyq172, yy2arr172
			const yyr172 bool = false
			var yynn172 int
			if yyr172 || yy2arr172 {
				r.EncodeArrayStart(2)
			} else {
				yynn172 = 2
				for _, b := range yyq172 {
					if b {
						yynn172++
					}
				}
				r.EncodeMapStart(yynn172)
				yynn172 = 0
			}
			if yyr172 || yy2arr172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym174 := z.EncBinary()
				_ = yym174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym175 := z.EncBinary()
				_ = yym175
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr172 || yy2arr172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy177 := &x.CurrentValue
				yym178 := z.EncBinary()
				_ = yym178
				if false {
				} else if z.HasExtensions() && z.EncExt(yy177) {
				} else if !yym178 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy177)
				} else {
					z.EncFallback(yy177)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy179 := &x.CurrentValue
				yym180 := z.EncBinary()
				_ = yym180
				if false {
				} else if z.HasExtensions() && z.EncExt(yy179) {
				} else if !yym180 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy179)
				} else {
					z.EncFallback(yy179)
				}
			}
			if yyr172 || yy2arr172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym181 := z.DecBinary()
	_ = yym181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct182 := r.ContainerType()
		if yyct182 == codecSelferValueTypeMap1234 {
			yyl182 := r.ReadMapStart()
			if yyl182 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl182, d)
			}
		} else if yyct182 == codecSelferValueTypeArray1234 {
			yyl182 := r.ReadArrayStart()
			if yyl182 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl182, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys183Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys183Slc
	var yyhl183 bool = l >= 0
	for yyj183 := 0; ; yyj183++ {
		if yyhl183 {
			if yyj183 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys183Slc = r.DecodeBytes(yys183Slc, true, true)
		yys183 := string(yys183Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys183 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv185 := &x.CurrentValue
				yym186 := z.DecBinary()
				_ = yym186
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv185) {
				} else if !yym186 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv185)
				} else {
					z.DecFallback(yyv185, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys183)
		} // end switch yys183
	} // end for yyj183
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj187 int
	var yyb187 bool
	var yyhl187 bool = l >= 0
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv189 := &x.CurrentValue
		yym190 := z.DecBinary()
		_ = yym190
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv189) {
		} else if !yym190 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv189)
		} else {
			z.DecFallback(yyv189, false)
		}
	}
	for {
		yyj187++
		if yyhl187 {
			yyb187 = yyj187 > l
		} else {
			yyb187 = r.CheckBreak()
		}
		if yyb187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym191 := z.EncBinary()
		_ = yym191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep192 := !z.EncBinary()
			yy2arr192 := z.EncBasicHandle().StructToArray
			var yyq192 [4]bool
			_, _, _ = yysep192, yyq192, yy2arr192
			const yyr192 bool = false
			yyq192[0] = x.Kind != ""
			yyq192[1] = x.APIVersion != ""
			yyq192[2] = true
			var yynn192 int
			if yyr192 || yy2arr192 {
				r.EncodeArrayStart(4)
			} else {
				yynn192 = 1
				for _, b := range yyq192 {
					if b {
						yynn192++
					}
				}
				r.EncodeMapStart(yynn192)
				yynn192 = 0
			}
			if yyr192 || yy2arr192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq192[0] {
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq192[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym195 := z.EncBinary()
					_ = yym195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr192 || yy2arr192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq192[1] {
					yym197 := z.EncBinary()
					_ = yym197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq192[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym198 := z.EncBinary()
					_ = yym198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr192 || yy2arr192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq192[2] {
					yy200 := &x.ListMeta
					yym201 := z.EncBinary()
					_ = yym201
					if false {
					} else if z.HasExtensions() && z.EncExt(yy200) {
					} else {
						z.EncFallback(yy200)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq192[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy202 := &x.ListMeta
					yym203 := z.EncBinary()
					_ = yym203
					if false {
					} else if z.HasExtensions() && z.EncExt(yy202) {
					} else {
						z.EncFallback(yy202)
					}
				}
			}
			if yyr192 || yy2arr192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym205 := z.EncBinary()
					_ = yym205
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym206 := z.EncBinary()
					_ = yym206
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr192 || yy2arr192 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct208 := r.ContainerType()
		if yyct208 == codecSelferValueTypeMap1234 {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if yyct208 == codecSelferValueTypeArray1234 {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys209 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv212 := &x.ListMeta
				yym213 := z.DecBinary()
				_ = yym213
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv212) {
				} else {
					z.DecFallback(yyv212, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv214 := &x.Items
				yym215 := z.DecBinary()
				_ = yym215
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv214), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj216 int
	var yyb216 bool
	var yyhl216 bool = l >= 0
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv219 := &x.ListMeta
		yym220 := z.DecBinary()
		_ = yym220
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv219) {
		} else {
			z.DecFallback(yyv219, false)
		}
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv221 := &x.Items
		yym222 := z.DecBinary()
		_ = yym222
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv221), d)
		}
	}
	for {
		yyj216++
		if yyhl216 {
			yyb216 = yyj216 > l
		} else {
			yyb216 = r.CheckBreak()
		}
		if yyb216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym223 := z.EncBinary()
		_ = yym223
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep224 := !z.EncBinary()
			yy2arr224 := z.EncBasicHandle().StructToArray
			var yyq224 [4]bool
			_, _, _ = yysep224, yyq224, yy2arr224
			const yyr224 bool = false
			yyq224[1] = x.MinReplicas != nil
			yyq224[3] = x.CPUUtilization != nil
			var yynn224 int
			if yyr224 || yy2arr224 {
				r.EncodeArrayStart(4)
			} else {
				yynn224 = 2
				for _, b := range yyq224 {
					if b {
						yynn224++
					}
				}
				r.EncodeMapStart(yynn224)
				yynn224 = 0
			}
			if yyr224 || yy2arr224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy226 := &x.ScaleRef
				yy226.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy227 := &x.ScaleRef
				yy227.CodecEncodeSelf(e)
			}
			if yyr224 || yy2arr224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq224[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy229 := *x.MinReplicas
						yym230 := z.EncBinary()
						_ = yym230
						if false {
						} else {
							r.EncodeInt(int64(yy229))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq224[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy231 := *x.MinReplicas
						yym232 := z.EncBinary()
						_ = yym232
						if false {
						} else {
							r.EncodeInt(int64(yy231))
						}
					}
				}
			}
			if yyr224 || yy2arr224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym234 := z.EncBinary()
				_ = yym234
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym235 := z.EncBinary()
				_ = yym235
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr224 || yy2arr224 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq224[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq224[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr224 || yy2arr224 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym237 := z.DecBinary()
	_ = yym237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct238 := r.ContainerType()
		if yyct238 == codecSelferValueTypeMap1234 {
			yyl238 := r.ReadMapStart()
			if yyl238 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl238, d)
			}
		} else if yyct238 == codecSelferValueTypeArray1234 {
			yyl238 := r.ReadArrayStart()
			if yyl238 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys239Slc
	var yyhl239 bool = l >= 0
	for yyj239 := 0; ; yyj239++ {
		if yyhl239 {
			if yyj239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys239Slc = r.DecodeBytes(yys239Slc, true, true)
		yys239 := string(yys239Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys239 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv240 := &x.ScaleRef
				yyv240.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int32)
				}
				yym242 := z.DecBinary()
				_ = yym242
				if false {
				} else {
					*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int32(r.DecodeInt(32))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys239)
		} // end switch yys239
	} // end for yyj239
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj245 int
	var yyb245 bool
	var yyhl245 bool = l >= 0
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv246 := &x.ScaleRef
		yyv246.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int32)
		}
		yym248 := z.DecBinary()
		_ = yym248
		if false {
		} else {
			*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int32(r.DecodeInt(32))
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj245++
		if yyhl245 {
			yyb245 = yyj245 > l
		} else {
			yyb245 = r.CheckBreak()
		}
		if yyb245 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj245-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym251 := z.EncBinary()
		_ = yym251
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep252 := !z.EncBinary()
			yy2arr252 := z.EncBasicHandle().StructToArray
			var yyq252 [5]bool
			_, _, _ = yysep252, yyq252, yy2arr252
			const yyr252 bool = false
			yyq252[0] = x.ObservedGeneration != nil
			yyq252[1] = x.LastScaleTime != nil
			yyq252[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn252 int
			if yyr252 || yy2arr252 {
				r.EncodeArrayStart(5)
			} else {
				yynn252 = 2
				for _, b := range yyq252 {
					if b {
						yynn252++
					}
				}
				r.EncodeMapStart(yynn252)
				yynn252 = 0
			}
			if yyr252 || yy2arr252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq252[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy254 := *x.ObservedGeneration
						yym255 := z.EncBinary()
						_ = yym255
						if false {
						} else {
							r.EncodeInt(int64(yy254))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq252[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy256 := *x.ObservedGeneration
						yym257 := z.EncBinary()
						_ = yym257
						if false {
						} else {
							r.EncodeInt(int64(yy256))
						}
					}
				}
			}
			if yyr252 || yy2arr252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq252[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym259 := z.EncBinary()
						_ = yym259
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym259 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym259 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq252[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym260 := z.EncBinary()
						_ = yym260
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym260 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym260 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr252 || yy2arr252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym262 := z.EncBinary()
				_ = yym262
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym263 := z.EncBinary()
				_ = yym263
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr252 || yy2arr252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym265 := z.EncBinary()
				_ = yym265
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym266 := z.EncBinary()
				_ = yym266
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr252 || yy2arr252 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq252[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy268 := *x.CurrentCPUUtilizationPercentage
						yym269 := z.EncBinary()
						_ = yym269
						if false {
						} else {
							r.EncodeInt(int64(yy268))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq252[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy270 := *x.CurrentCPUUtilizationPercentage
						yym271 := z.EncBinary()
						_ = yym271
						if false {
						} else {
							r.EncodeInt(int64(yy270))
						}
					}
				}
			}
			if yyr252 || yy2arr252 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym272 := z.DecBinary()
	_ = yym272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct273 := r.ContainerType()
		if yyct273 == codecSelferValueTypeMap1234 {
			yyl273 := r.ReadMapStart()
			if yyl273 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl273, d)
			}
		} else if yyct273 == codecSelferValueTypeArray1234 {
			yyl273 := r.ReadArrayStart()
			if yyl273 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys274Slc
	var yyhl274 bool = l >= 0
	for yyj274 := 0; ; yyj274++ {
		if yyhl274 {
			if yyj274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys274Slc = r.DecodeBytes(yys274Slc, true, true)
		yys274 := string(yys274Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys274 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym276 := z.DecBinary()
				_ = yym276
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_v1.Time)
				}
				yym278 := z.DecBinary()
				_ = yym278
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym278 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym278 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int32(r.DecodeInt(32))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int32(r.DecodeInt(32))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int32)
				}
				yym282 := z.DecBinary()
				_ = yym282
				if false {
				} else {
					*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys274)
		} // end switch yys274
	} // end for yyj274
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj283 int
	var yyb283 bool
	var yyhl283 bool = l >= 0
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym285 := z.DecBinary()
		_ = yym285
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_v1.Time)
		}
		yym287 := z.DecBinary()
		_ = yym287
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym287 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym287 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int32(r.DecodeInt(32))
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int32(r.DecodeInt(32))
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int32)
		}
		yym291 := z.DecBinary()
		_ = yym291
		if false {
		} else {
			*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj283++
		if yyhl283 {
			yyb283 = yyj283 > l
		} else {
			yyb283 = r.CheckBreak()
		}
		if yyb283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym292 := z.EncBinary()
		_ = yym292
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep293 := !z.EncBinary()
			yy2arr293 := z.EncBasicHandle().StructToArray
			var yyq293 [5]bool
			_, _, _ = yysep293, yyq293, yy2arr293
			const yyr293 bool = false
			yyq293[0] = x.Kind != ""
			yyq293[1] = x.APIVersion != ""
			yyq293[2] = true
			yyq293[3] = true
			yyq293[4] = true
			var yynn293 int
			if yyr293 || yy2arr293 {
				r.EncodeArrayStart(5)
			} else {
				yynn293 = 0
				for _, b := range yyq293 {
					if b {
						yynn293++
					}
				}
				r.EncodeMapStart(yynn293)
				yynn293 = 0
			}
			if yyr293 || yy2arr293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq293[0] {
					yym295 := z.EncBinary()
					_ = yym295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq293[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym296 := z.EncBinary()
					_ = yym296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr293 || yy2arr293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq293[1] {
					yym298 := z.EncBinary()
					_ = yym298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq293[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr293 || yy2arr293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq293[2] {
					yy301 := &x.ObjectMeta
					yy301.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq293[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy302 := &x.ObjectMeta
					yy302.CodecEncodeSelf(e)
				}
			}
			if yyr293 || yy2arr293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq293[3] {
					yy304 := &x.Spec
					yy304.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq293[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy305 := &x.Spec
					yy305.CodecEncodeSelf(e)
				}
			}
			if yyr293 || yy2arr293 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq293[4] {
					yy307 := &x.Status
					yy307.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq293[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy308 := &x.Status
					yy308.CodecEncodeSelf(e)
				}
			}
			if yyr293 || yy2arr293 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv314 := &x.ObjectMeta
				yyv314.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv315 := &x.Spec
				yyv315.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv316 := &x.Status
				yyv316.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj317 int
	var yyb317 bool
	var yyhl317 bool = l >= 0
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv320 := &x.ObjectMeta
		yyv320.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv321 := &x.Spec
		yyv321.CodecDecodeSelf(d)
	}
	yyj317++
	if yyhl317 {
		yyb317 = yyj317 > l
	} else {
		yyb317 = r.CheckBreak()
	}
	if yyb317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv322 := &x.Status
		yyv322.CodecDecodeSelf(d)
	}
	for {
		yyj317++
		if yyhl317 {
			yyb317 = yyj317 > l
		} else {
			yyb317 = r.CheckBreak()
		}
		if yyb317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym323 := z.EncBinary()
		_ = yym323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep324 := !z.EncBinary()
			yy2arr324 := z.EncBasicHandle().StructToArray
			var yyq324 [4]bool
			_, _, _ = yysep324, yyq324, yy2arr324
			const yyr324 bool = false
			yyq324[0] = x.Kind != ""
			yyq324[1] = x.APIVersion != ""
			yyq324[2] = true
			var yynn324 int
			if yyr324 || yy2arr324 {
				r.EncodeArrayStart(4)
			} else {
				yynn324 = 1
				for _, b := range yyq324 {
					if b {
						yynn324++
					}
				}
				r.EncodeMapStart(yynn324)
				yynn324 = 0
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq324[0] {
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq324[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym327 := z.EncBinary()
					_ = yym327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq324[1] {
					yym329 := z.EncBinary()
					_ = yym329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq324[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym330 := z.EncBinary()
					_ = yym330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq324[2] {
					yy332 := &x.ListMeta
					yym333 := z.EncBinary()
					_ = yym333
					if false {
					} else if z.HasExtensions() && z.EncExt(yy332) {
					} else {
						z.EncFallback(yy332)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq324[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy334 := &x.ListMeta
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else if z.HasExtensions() && z.EncExt(yy334) {
					} else {
						z.EncFallback(yy334)
					}
				}
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym337 := z.EncBinary()
					_ = yym337
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym338 := z.EncBinary()
					_ = yym338
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr324 || yy2arr324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym339 := z.DecBinary()
	_ = yym339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct340 := r.ContainerType()
		if yyct340 == codecSelferValueTypeMap1234 {
			yyl340 := r.ReadMapStart()
			if yyl340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl340, d)
			}
		} else if yyct340 == codecSelferValueTypeArray1234 {
			yyl340 := r.ReadArrayStart()
			if yyl340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys341Slc
	var yyhl341 bool = l >= 0
	for yyj341 := 0; ; yyj341++ {
		if yyhl341 {
			if yyj341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys341Slc = r.DecodeBytes(yys341Slc, true, true)
		yys341 := string(yys341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys341 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv344 := &x.ListMeta
				yym345 := z.DecBinary()
				_ = yym345
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv344) {
				} else {
					z.DecFallback(yyv344, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv346 := &x.Items
				yym347 := z.DecBinary()
				_ = yym347
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv346), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys341)
		} // end switch yys341
	} // end for yyj341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj348 int
	var yyb348 bool
	var yyhl348 bool = l >= 0
	yyj348++
	if yyhl348 {
		yyb348 = yyj348 > l
	} else {
		yyb348 = r.CheckBreak()
	}
	if yyb348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj348++
	if yyhl348 {
		yyb348 = yyj348 > l
	} else {
		yyb348 = r.CheckBreak()
	}
	if yyb348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj348++
	if yyhl348 {
		yyb348 = yyj348 > l
	} else {
		yyb348 = r.CheckBreak()
	}
	if yyb348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv351 := &x.ListMeta
		yym352 := z.DecBinary()
		_ = yym352
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv351) {
		} else {
			z.DecFallback(yyv351, false)
		}
	}
	yyj348++
	if yyhl348 {
		yyb348 = yyj348 > l
	} else {
		yyb348 = r.CheckBreak()
	}
	if yyb348 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv353 := &x.Items
		yym354 := z.DecBinary()
		_ = yym354
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv353), d)
		}
	}
	for {
		yyj348++
		if yyhl348 {
			yyb348 = yyj348 > l
		} else {
			yyb348 = r.CheckBreak()
		}
		if yyb348 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj348-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym355 := z.EncBinary()
		_ = yym355
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep356 := !z.EncBinary()
			yy2arr356 := z.EncBasicHandle().StructToArray
			var yyq356 [5]bool
			_, _, _ = yysep356, yyq356, yy2arr356
			const yyr356 bool = false
			yyq356[0] = x.Kind != ""
			yyq356[1] = x.APIVersion != ""
			yyq356[2] = true
			yyq356[3] = x.Description != ""
			yyq356[4] = len(x.Versions) != 0
			var yynn356 int
			if yyr356 || yy2arr356 {
				r.EncodeArrayStart(5)
			} else {
				yynn356 = 0
				for _, b := range yyq356 {
					if b {
						yynn356++
					}
				}
				r.EncodeMapStart(yynn356)
				yynn356 = 0
			}
			if yyr356 || yy2arr356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq356[0] {
					yym358 := z.EncBinary()
					_ = yym358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq356[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr356 || yy2arr356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq356[1] {
					yym361 := z.EncBinary()
					_ = yym361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq356[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr356 || yy2arr356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq356[2] {
					yy364 := &x.ObjectMeta
					yy364.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq356[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy365 := &x.ObjectMeta
					yy365.CodecEncodeSelf(e)
				}
			}
			if yyr356 || yy2arr356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq356[3] {
					yym367 := z.EncBinary()
					_ = yym367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq356[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr356 || yy2arr356 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq356[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym370 := z.EncBinary()
						_ = yym370
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq356[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym371 := z.EncBinary()
						_ = yym371
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr356 || yy2arr356 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct373 := r.ContainerType()
		if yyct373 == codecSelferValueTypeMap1234 {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if yyct373 == codecSelferValueTypeArray1234 {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv377 := &x.ObjectMeta
				yyv377.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv379 := &x.Versions
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv384 := &x.ObjectMeta
		yyv384.CodecDecodeSelf(d)
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv386 := &x.Versions
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [4]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			var yynn389 int
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(4)
			} else {
				yynn389 = 1
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
				yynn389 = 0
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[2] {
					yy397 := &x.ListMeta
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else if z.HasExtensions() && z.EncExt(yy397) {
					} else {
						z.EncFallback(yy397)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy399 := &x.ListMeta
					yym400 := z.EncBinary()
					_ = yym400
					if false {
					} else if z.HasExtensions() && z.EncExt(yy399) {
					} else {
						z.EncFallback(yy399)
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym402 := z.EncBinary()
					_ = yym402
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym403 := z.EncBinary()
					_ = yym403
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym404 := z.DecBinary()
	_ = yym404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct405 := r.ContainerType()
		if yyct405 == codecSelferValueTypeMap1234 {
			yyl405 := r.ReadMapStart()
			if yyl405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl405, d)
			}
		} else if yyct405 == codecSelferValueTypeArray1234 {
			yyl405 := r.ReadArrayStart()
			if yyl405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys406Slc
	var yyhl406 bool = l >= 0
	for yyj406 := 0; ; yyj406++ {
		if yyhl406 {
			if yyj406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys406Slc = r.DecodeBytes(yys406Slc, true, true)
		yys406 := string(yys406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys406 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv409 := &x.ListMeta
				yym410 := z.DecBinary()
				_ = yym410
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv409) {
				} else {
					z.DecFallback(yyv409, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv411 := &x.Items
				yym412 := z.DecBinary()
				_ = yym412
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv411), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys406)
		} // end switch yys406
	} // end for yyj406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv416 := &x.ListMeta
		yym417 := z.DecBinary()
		_ = yym417
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv416) {
		} else {
			z.DecFallback(yyv416, false)
		}
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv418 := &x.Items
		yym419 := z.DecBinary()
		_ = yym419
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv418), d)
		}
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym420 := z.EncBinary()
		_ = yym420
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep421 := !z.EncBinary()
			yy2arr421 := z.EncBasicHandle().StructToArray
			var yyq421 [1]bool
			_, _, _ = yysep421, yyq421, yy2arr421
			const yyr421 bool = false
			yyq421[0] = x.Name != ""
			var yynn421 int
			if yyr421 || yy2arr421 {
				r.EncodeArrayStart(1)
			} else {
				yynn421 = 0
				for _, b := range yyq421 {
					if b {
						yynn421++
					}
				}
				r.EncodeMapStart(yynn421)
				yynn421 = 0
			}
			if yyr421 || yy2arr421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq421[0] {
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq421[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym424 := z.EncBinary()
					_ = yym424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr421 || yy2arr421 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym425 := z.DecBinary()
	_ = yym425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct426 := r.ContainerType()
		if yyct426 == codecSelferValueTypeMap1234 {
			yyl426 := r.ReadMapStart()
			if yyl426 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl426, d)
			}
		} else if yyct426 == codecSelferValueTypeArray1234 {
			yyl426 := r.ReadArrayStart()
			if yyl426 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl426, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys427Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys427Slc
	var yyhl427 bool = l >= 0
	for yyj427 := 0; ; yyj427++ {
		if yyhl427 {
			if yyj427 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys427Slc = r.DecodeBytes(yys427Slc, true, true)
		yys427 := string(yys427Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys427 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys427)
		} // end switch yys427
	} // end for yyj427
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj429 int
	var yyb429 bool
	var yyhl429 bool = l >= 0
	yyj429++
	if yyhl429 {
		yyb429 = yyj429 > l
	} else {
		yyb429 = r.CheckBreak()
	}
	if yyb429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj429++
		if yyhl429 {
			yyb429 = yyj429 > l
		} else {
			yyb429 = r.CheckBreak()
		}
		if yyb429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym431 := z.EncBinary()
		_ = yym431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep432 := !z.EncBinary()
			yy2arr432 := z.EncBasicHandle().StructToArray
			var yyq432 [4]bool
			_, _, _ = yysep432, yyq432, yy2arr432
			const yyr432 bool = false
			yyq432[0] = x.Kind != ""
			yyq432[1] = x.APIVersion != ""
			yyq432[2] = true
			yyq432[3] = len(x.Data) != 0
			var yynn432 int
			if yyr432 || yy2arr432 {
				r.EncodeArrayStart(4)
			} else {
				yynn432 = 0
				for _, b := range yyq432 {
					if b {
						yynn432++
					}
				}
				r.EncodeMapStart(yynn432)
				yynn432 = 0
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[0] {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[1] {
					yym437 := z.EncBinary()
					_ = yym437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq432[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[2] {
					yy440 := &x.ObjectMeta
					yy440.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy441 := &x.ObjectMeta
					yy441.CodecEncodeSelf(e)
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq432[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym443 := z.EncBinary()
						_ = yym443
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq432[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym444 := z.EncBinary()
						_ = yym444
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr432 || yy2arr432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym445 := z.DecBinary()
	_ = yym445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct446 := r.ContainerType()
		if yyct446 == codecSelferValueTypeMap1234 {
			yyl446 := r.ReadMapStart()
			if yyl446 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl446, d)
			}
		} else if yyct446 == codecSelferValueTypeArray1234 {
			yyl446 := r.ReadArrayStart()
			if yyl446 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl446, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys447Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys447Slc
	var yyhl447 bool = l >= 0
	for yyj447 := 0; ; yyj447++ {
		if yyhl447 {
			if yyj447 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys447Slc = r.DecodeBytes(yys447Slc, true, true)
		yys447 := string(yys447Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys447 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv450 := &x.ObjectMeta
				yyv450.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv451 := &x.Data
				yym452 := z.DecBinary()
				_ = yym452
				if false {
				} else {
					*yyv451 = r.DecodeBytes(*(*[]byte)(yyv451), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys447)
		} // end switch yys447
	} // end for yyj447
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj453 int
	var yyb453 bool
	var yyhl453 bool = l >= 0
	yyj453++
	if yyhl453 {
		yyb453 = yyj453 > l
	} else {
		yyb453 = r.CheckBreak()
	}
	if yyb453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj453++
	if yyhl453 {
		yyb453 = yyj453 > l
	} else {
		yyb453 = r.CheckBreak()
	}
	if yyb453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj453++
	if yyhl453 {
		yyb453 = yyj453 > l
	} else {
		yyb453 = r.CheckBreak()
	}
	if yyb453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv456 := &x.ObjectMeta
		yyv456.CodecDecodeSelf(d)
	}
	yyj453++
	if yyhl453 {
		yyb453 = yyj453 > l
	} else {
		yyb453 = r.CheckBreak()
	}
	if yyb453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv457 := &x.Data
		yym458 := z.DecBinary()
		_ = yym458
		if false {
		} else {
			*yyv457 = r.DecodeBytes(*(*[]byte)(yyv457), false, false)
		}
	}
	for {
		yyj453++
		if yyhl453 {
			yyb453 = yyj453 > l
		} else {
			yyb453 = r.CheckBreak()
		}
		if yyb453 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj453-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym459 := z.EncBinary()
		_ = yym459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep460 := !z.EncBinary()
			yy2arr460 := z.EncBasicHandle().StructToArray
			var yyq460 [5]bool
			_, _, _ = yysep460, yyq460, yy2arr460
			const yyr460 bool = false
			yyq460[0] = x.Kind != ""
			yyq460[1] = x.APIVersion != ""
			yyq460[2] = true
			yyq460[3] = true
			yyq460[4] = true
			var yynn460 int
			if yyr460 || yy2arr460 {
				r.EncodeArrayStart(5)
			} else {
				yynn460 = 0
				for _, b := range yyq460 {
					if b {
						yynn460++
					}
				}
				r.EncodeMapStart(yynn460)
				yynn460 = 0
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[0] {
					yym462 := z.EncBinary()
					_ = yym462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq460[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[1] {
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq460[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym466 := z.EncBinary()
					_ = yym466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[2] {
					yy468 := &x.ObjectMeta
					yy468.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq460[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy469 := &x.ObjectMeta
					yy469.CodecEncodeSelf(e)
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[3] {
					yy471 := &x.Spec
					yy471.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq460[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy472 := &x.Spec
					yy472.CodecEncodeSelf(e)
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq460[4] {
					yy474 := &x.Status
					yy474.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq460[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy475 := &x.Status
					yy475.CodecEncodeSelf(e)
				}
			}
			if yyr460 || yy2arr460 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym476 := z.DecBinary()
	_ = yym476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct477 := r.ContainerType()
		if yyct477 == codecSelferValueTypeMap1234 {
			yyl477 := r.ReadMapStart()
			if yyl477 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl477, d)
			}
		} else if yyct477 == codecSelferValueTypeArray1234 {
			yyl477 := r.ReadArrayStart()
			if yyl477 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl477, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys478Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys478Slc
	var yyhl478 bool = l >= 0
	for yyj478 := 0; ; yyj478++ {
		if yyhl478 {
			if yyj478 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys478Slc = r.DecodeBytes(yys478Slc, true, true)
		yys478 := string(yys478Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys478 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv481 := &x.ObjectMeta
				yyv481.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv482 := &x.Spec
				yyv482.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv483 := &x.Status
				yyv483.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys478)
		} // end switch yys478
	} // end for yyj478
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj484 int
	var yyb484 bool
	var yyhl484 bool = l >= 0
	yyj484++
	if yyhl484 {
		yyb484 = yyj484 > l
	} else {
		yyb484 = r.CheckBreak()
	}
	if yyb484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj484++
	if yyhl484 {
		yyb484 = yyj484 > l
	} else {
		yyb484 = r.CheckBreak()
	}
	if yyb484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj484++
	if yyhl484 {
		yyb484 = yyj484 > l
	} else {
		yyb484 = r.CheckBreak()
	}
	if yyb484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv487 := &x.ObjectMeta
		yyv487.CodecDecodeSelf(d)
	}
	yyj484++
	if yyhl484 {
		yyb484 = yyj484 > l
	} else {
		yyb484 = r.CheckBreak()
	}
	if yyb484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv488 := &x.Spec
		yyv488.CodecDecodeSelf(d)
	}
	yyj484++
	if yyhl484 {
		yyb484 = yyj484 > l
	} else {
		yyb484 = r.CheckBreak()
	}
	if yyb484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv489 := &x.Status
		yyv489.CodecDecodeSelf(d)
	}
	for {
		yyj484++
		if yyhl484 {
			yyb484 = yyj484 > l
		} else {
			yyb484 = r.CheckBreak()
		}
		if yyb484 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj484-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym490 := z.EncBinary()
		_ = yym490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep491 := !z.EncBinary()
			yy2arr491 := z.EncBasicHandle().StructToArray
			var yyq491 [9]bool
			_, _, _ = yysep491, yyq491, yy2arr491
			const yyr491 bool = false
			yyq491[0] = x.Replicas != nil
			yyq491[1] = x.Selector != nil
			yyq491[3] = true
			yyq491[4] = x.MinReadySeconds != 0
			yyq491[5] = x.RevisionHistoryLimit != nil
			yyq491[6] = x.Paused != false
			yyq491[7] = x.RollbackTo != nil
			yyq491[8] = x.ProgressDeadlineSeconds != nil
			var yynn491 int
			if yyr491 || yy2arr491 {
				r.EncodeArrayStart(9)
			} else {
				yynn491 = 1
				for _, b := range yyq491 {
					if b {
						yynn491++
					}
				}
				r.EncodeMapStart(yynn491)
				yynn491 = 0
			}
			if yyr491 || yy2arr491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq491[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy493 := *x.Replicas
						yym494 := z.EncBinary()
						_ = yym494
						if false {
						} else {
							r.EncodeInt(int64(yy493))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq491[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy495 := *x.Replicas
						yym496 := z.EncBinary()
						_ = yym496
						if false {
						} else {
							r.EncodeInt(int64(yy495))
						}
					}
				}
			}
			if yyr491 || yy2arr491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq491[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym498 := z.EncBinary()
						_ = yym498
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq491[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym499 := z.EncBinary()
						_ = yym499
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr491 || yy2arr491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy501 := &x.Template
				yy501.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy502 := &x.Template
				yy502.CodecEncodeSelf(e)
			}
			if yyr491 || yy2arr491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq491[3] {
					yy504 := &x.Strategy
					yy504.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq491[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy505 := &x.Strategy
					yy505.CodecEncodeSelf(e)
				}
			}
			if yyr491 || yy2arr491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq491[4] {
					yym507 := z.EncBinary()
					_ = yym507
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq491[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym508 := z.EncBinary()
					_ = yym508
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr491 || yy2arr491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq491[5] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy510 := *x.RevisionHistoryLimit
						yym511 := z.EncBinary()
						_ = yym511
						if false {
						} else {
							r.EncodeInt(int64(yy510))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq491[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy512 := *x.RevisionHistoryLimit
						yym513 := z.EncBinary()
						_ = yym513
						if false {
						} else {
							r.EncodeInt(int64(yy512))
						}
					}
				}
			}
			if yyr491 || yy2arr491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq491[6] {
					yym515 := z.EncBinary()
					_ = yym515
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq491[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr491 || yy2arr491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq491[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq491[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr491 || yy2arr491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq491[8] {
					if x.ProgressDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy519 := *x.ProgressDeadlineSeconds
						yym520 := z.EncBinary()
						_ = yym520
						if false {
						} else {
							r.EncodeInt(int64(yy519))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq491[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("progressDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ProgressDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy521 := *x.ProgressDeadlineSeconds
						yym522 := z.EncBinary()
						_ = yym522
						if false {
						} else {
							r.EncodeInt(int64(yy521))
						}
					}
				}
			}
			if yyr491 || yy2arr491 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym523 := z.DecBinary()
	_ = yym523
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct524 := r.ContainerType()
		if yyct524 == codecSelferValueTypeMap1234 {
			yyl524 := r.ReadMapStart()
			if yyl524 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl524, d)
			}
		} else if yyct524 == codecSelferValueTypeArray1234 {
			yyl524 := r.ReadArrayStart()
			if yyl524 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl524, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys525Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys525Slc
	var yyhl525 bool = l >= 0
	for yyj525 := 0; ; yyj525++ {
		if yyhl525 {
			if yyj525 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys525Slc = r.DecodeBytes(yys525Slc, true, true)
		yys525 := string(yys525Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys525 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym527 := z.DecBinary()
				_ = yym527
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_v1.LabelSelector)
				}
				yym529 := z.DecBinary()
				_ = yym529
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv530 := &x.Template
				yyv530.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv531 := &x.Strategy
				yyv531.CodecDecodeSelf(d)
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int32)
				}
				yym534 := z.DecBinary()
				_ = yym534
				if false {
				} else {
					*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		case "progressDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ProgressDeadlineSeconds != nil {
					x.ProgressDeadlineSeconds = nil
				}
			} else {
				if x.ProgressDeadlineSeconds == nil {
					x.ProgressDeadlineSeconds = new(int32)
				}
				yym538 := z.DecBinary()
				_ = yym538
				if false {
				} else {
					*((*int32)(x.ProgressDeadlineSeconds)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys525)
		} // end switch yys525
	} // end for yyj525
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj539 int
	var yyb539 bool
	var yyhl539 bool = l >= 0
	yyj539++
	if yyhl539 {
		yyb539 = yyj539 > l
	} else {
		yyb539 = r.CheckBreak()
	}
	if yyb539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym541 := z.DecBinary()
		_ = yym541
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj539++
	if yyhl539 {
		yyb539 = yyj539 > l
	} else {
		yyb539 = r.CheckBreak()
	}
	if yyb539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_v1.LabelSelector)
		}
		yym543 := z.DecBinary()
		_ = yym543
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj539++
	if yyhl539 {
		yyb539 = yyj539 > l
	} else {
		yyb539 = r.CheckBreak()
	}
	if yyb539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv544 := &x.Template
		yyv544.CodecDecodeSelf(d)
	}
	yyj539++
	if yyhl539 {
		yyb539 = yyj539 > l
	} else {
		yyb539 = r.CheckBreak()
	}
	if yyb539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv545 := &x.Strategy
		yyv545.CodecDecodeSelf(d)
	}
	yyj539++
	if yyhl539 {
		yyb539 = yyj539 > l
	} else {
		yyb539 = r.CheckBreak()
	}
	if yyb539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj539++
	if yyhl539 {
		yyb539 = yyj539 > l
	} else {
		yyb539 = r.CheckBreak()
	}
	if yyb539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int32)
		}
		yym548 := z.DecBinary()
		_ = yym548
		if false {
		} else {
			*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
		}
	}
	yyj539++
	if yyhl539 {
		yyb539 = yyj539 > l
	} else {
		yyb539 = r.CheckBreak()
	}
	if yyb539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj539++
	if yyhl539 {
		yyb539 = yyj539 > l
	} else {
		yyb539 = r.CheckBreak()
	}
	if yyb539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	yyj539++
	if yyhl539 {
		yyb539 = yyj539 > l
	} else {
		yyb539 = r.CheckBreak()
	}
	if yyb539 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ProgressDeadlineSeconds != nil {
			x.ProgressDeadlineSeconds = nil
		}
	} else {
		if x.ProgressDeadlineSeconds == nil {
			x.ProgressDeadlineSeconds = new(int32)
		}
		yym552 := z.DecBinary()
		_ = yym552
		if false {
		} else {
			*((*int32)(x.ProgressDeadlineSeconds)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj539++
		if yyhl539 {
			yyb539 = yyj539 > l
		} else {
			yyb539 = r.CheckBreak()
		}
		if yyb539 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj539-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym553 := z.EncBinary()
		_ = yym553
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep554 := !z.EncBinary()
			yy2arr554 := z.EncBasicHandle().StructToArray
			var yyq554 [5]bool
			_, _, _ = yysep554, yyq554, yy2arr554
			const yyr554 bool = false
			yyq554[0] = x.Kind != ""
			yyq554[1] = x.APIVersion != ""
			yyq554[3] = len(x.UpdatedAnnotations) != 0
			var yynn554 int
			if yyr554 || yy2arr554 {
				r.EncodeArrayStart(5)
			} else {
				yynn554 = 2
				for _, b := range yyq554 {
					if b {
						yynn554++
					}
				}
				r.EncodeMapStart(yynn554)
				yynn554 = 0
			}
			if yyr554 || yy2arr554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq554[0] {
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq554[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym557 := z.EncBinary()
					_ = yym557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr554 || yy2arr554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq554[1] {
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq554[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr554 || yy2arr554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym562 := z.EncBinary()
				_ = yym562
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym563 := z.EncBinary()
				_ = yym563
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr554 || yy2arr554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq554[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym565 := z.EncBinary()
						_ = yym565
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq554[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym566 := z.EncBinary()
						_ = yym566
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr554 || yy2arr554 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy568 := &x.RollbackTo
				yy568.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy569 := &x.RollbackTo
				yy569.CodecEncodeSelf(e)
			}
			if yyr554 || yy2arr554 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym570 := z.DecBinary()
	_ = yym570
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct571 := r.ContainerType()
		if yyct571 == codecSelferValueTypeMap1234 {
			yyl571 := r.ReadMapStart()
			if yyl571 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl571, d)
			}
		} else if yyct571 == codecSelferValueTypeArray1234 {
			yyl571 := r.ReadArrayStart()
			if yyl571 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl571, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys572Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys572Slc
	var yyhl572 bool = l >= 0
	for yyj572 := 0; ; yyj572++ {
		if yyhl572 {
			if yyj572 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys572Slc = r.DecodeBytes(yys572Slc, true, true)
		yys572 := string(yys572Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys572 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv576 := &x.UpdatedAnnotations
				yym577 := z.DecBinary()
				_ = yym577
				if false {
				} else {
					z.F.DecMapStringStringX(yyv576, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv578 := &x.RollbackTo
				yyv578.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys572)
		} // end switch yys572
	} // end for yyj572
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj579 int
	var yyb579 bool
	var yyhl579 bool = l >= 0
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv583 := &x.UpdatedAnnotations
		yym584 := z.DecBinary()
		_ = yym584
		if false {
		} else {
			z.F.DecMapStringStringX(yyv583, false, d)
		}
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv585 := &x.RollbackTo
		yyv585.CodecDecodeSelf(d)
	}
	for {
		yyj579++
		if yyhl579 {
			yyb579 = yyj579 > l
		} else {
			yyb579 = r.CheckBreak()
		}
		if yyb579 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj579-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym586 := z.EncBinary()
		_ = yym586
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep587 := !z.EncBinary()
			yy2arr587 := z.EncBasicHandle().StructToArray
			var yyq587 [1]bool
			_, _, _ = yysep587, yyq587, yy2arr587
			const yyr587 bool = false
			yyq587[0] = x.Revision != 0
			var yynn587 int
			if yyr587 || yy2arr587 {
				r.EncodeArrayStart(1)
			} else {
				yynn587 = 0
				for _, b := range yyq587 {
					if b {
						yynn587++
					}
				}
				r.EncodeMapStart(yynn587)
				yynn587 = 0
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq587[0] {
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq587[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym590 := z.EncBinary()
					_ = yym590
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr587 || yy2arr587 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym591 := z.DecBinary()
	_ = yym591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct592 := r.ContainerType()
		if yyct592 == codecSelferValueTypeMap1234 {
			yyl592 := r.ReadMapStart()
			if yyl592 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl592, d)
			}
		} else if yyct592 == codecSelferValueTypeArray1234 {
			yyl592 := r.ReadArrayStart()
			if yyl592 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys593Slc
	var yyhl593 bool = l >= 0
	for yyj593 := 0; ; yyj593++ {
		if yyhl593 {
			if yyj593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys593Slc = r.DecodeBytes(yys593Slc, true, true)
		yys593 := string(yys593Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys593 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys593)
		} // end switch yys593
	} // end for yyj593
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj595 int
	var yyb595 bool
	var yyhl595 bool = l >= 0
	yyj595++
	if yyhl595 {
		yyb595 = yyj595 > l
	} else {
		yyb595 = r.CheckBreak()
	}
	if yyb595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj595++
		if yyhl595 {
			yyb595 = yyj595 > l
		} else {
			yyb595 = r.CheckBreak()
		}
		if yyb595 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj595-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym597 := z.EncBinary()
		_ = yym597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep598 := !z.EncBinary()
			yy2arr598 := z.EncBasicHandle().StructToArray
			var yyq598 [2]bool
			_, _, _ = yysep598, yyq598, yy2arr598
			const yyr598 bool = false
			yyq598[0] = x.Type != ""
			yyq598[1] = x.RollingUpdate != nil
			var yynn598 int
			if yyr598 || yy2arr598 {
				r.EncodeArrayStart(2)
			} else {
				yynn598 = 0
				for _, b := range yyq598 {
					if b {
						yynn598++
					}
				}
				r.EncodeMapStart(yynn598)
				yynn598 = 0
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq598[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym601 := z.DecBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct602 := r.ContainerType()
		if yyct602 == codecSelferValueTypeMap1234 {
			yyl602 := r.ReadMapStart()
			if yyl602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl602, d)
			}
		} else if yyct602 == codecSelferValueTypeArray1234 {
			yyl602 := r.ReadArrayStart()
			if yyl602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys603Slc
	var yyhl603 bool = l >= 0
	for yyj603 := 0; ; yyj603++ {
		if yyhl603 {
			if yyj603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys603Slc = r.DecodeBytes(yys603Slc, true, true)
		yys603 := string(yys603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys603 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys603)
		} // end switch yys603
	} // end for yyj603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj606 int
	var yyb606 bool
	var yyhl606 bool = l >= 0
	yyj606++
	if yyhl606 {
		yyb606 = yyj606 > l
	} else {
		yyb606 = r.CheckBreak()
	}
	if yyb606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj606++
	if yyhl606 {
		yyb606 = yyj606 > l
	} else {
		yyb606 = r.CheckBreak()
	}
	if yyb606 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj606++
		if yyhl606 {
			yyb606 = yyj606 > l
		} else {
			yyb606 = r.CheckBreak()
		}
		if yyb606 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj606-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym609 := z.EncBinary()
	_ = yym609
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym610 := z.DecBinary()
	_ = yym610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym611 := z.EncBinary()
		_ = yym611
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep612 := !z.EncBinary()
			yy2arr612 := z.EncBasicHandle().StructToArray
			var yyq612 [2]bool
			_, _, _ = yysep612, yyq612, yy2arr612
			const yyr612 bool = false
			yyq612[0] = x.MaxUnavailable != nil
			yyq612[1] = x.MaxSurge != nil
			var yynn612 int
			if yyr612 || yy2arr612 {
				r.EncodeArrayStart(2)
			} else {
				yynn612 = 0
				for _, b := range yyq612 {
					if b {
						yynn612++
					}
				}
				r.EncodeMapStart(yynn612)
				yynn612 = 0
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq612[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym614 := z.EncBinary()
						_ = yym614
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym614 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq612[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym615 := z.EncBinary()
						_ = yym615
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym615 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq612[1] {
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym617 := z.EncBinary()
						_ = yym617
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym617 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq612[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym618 := z.EncBinary()
						_ = yym618
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym618 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				}
			}
			if yyr612 || yy2arr612 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym619 := z.DecBinary()
	_ = yym619
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct620 := r.ContainerType()
		if yyct620 == codecSelferValueTypeMap1234 {
			yyl620 := r.ReadMapStart()
			if yyl620 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl620, d)
			}
		} else if yyct620 == codecSelferValueTypeArray1234 {
			yyl620 := r.ReadArrayStart()
			if yyl620 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl620, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys621Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys621Slc
	var yyhl621 bool = l >= 0
	for yyj621 := 0; ; yyj621++ {
		if yyhl621 {
			if yyj621 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys621Slc = r.DecodeBytes(yys621Slc, true, true)
		yys621 := string(yys621Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys621 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg5_intstr.IntOrString)
				}
				yym623 := z.DecBinary()
				_ = yym623
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym623 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				if x.MaxSurge != nil {
					x.MaxSurge = nil
				}
			} else {
				if x.MaxSurge == nil {
					x.MaxSurge = new(pkg5_intstr.IntOrString)
				}
				yym625 := z.DecBinary()
				_ = yym625
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
				} else if !yym625 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxSurge)
				} else {
					z.DecFallback(x.MaxSurge, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys621)
		} // end switch yys621
	} // end for yyj621
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj626 int
	var yyb626 bool
	var yyhl626 bool = l >= 0
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg5_intstr.IntOrString)
		}
		yym628 := z.DecBinary()
		_ = yym628
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym628 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj626++
	if yyhl626 {
		yyb626 = yyj626 > l
	} else {
		yyb626 = r.CheckBreak()
	}
	if yyb626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxSurge != nil {
			x.MaxSurge = nil
		}
	} else {
		if x.MaxSurge == nil {
			x.MaxSurge = new(pkg5_intstr.IntOrString)
		}
		yym630 := z.DecBinary()
		_ = yym630
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
		} else if !yym630 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxSurge)
		} else {
			z.DecFallback(x.MaxSurge, false)
		}
	}
	for {
		yyj626++
		if yyhl626 {
			yyb626 = yyj626 > l
		} else {
			yyb626 = r.CheckBreak()
		}
		if yyb626 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj626-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym631 := z.EncBinary()
		_ = yym631
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep632 := !z.EncBinary()
			yy2arr632 := z.EncBasicHandle().StructToArray
			var yyq632 [7]bool
			_, _, _ = yysep632, yyq632, yy2arr632
			const yyr632 bool = false
			yyq632[0] = x.ObservedGeneration != 0
			yyq632[1] = x.Replicas != 0
			yyq632[2] = x.UpdatedReplicas != 0
			yyq632[3] = x.ReadyReplicas != 0
			yyq632[4] = x.AvailableReplicas != 0
			yyq632[5] = x.UnavailableReplicas != 0
			yyq632[6] = len(x.Conditions) != 0
			var yynn632 int
			if yyr632 || yy2arr632 {
				r.EncodeArrayStart(7)
			} else {
				yynn632 = 0
				for _, b := range yyq632 {
					if b {
						yynn632++
					}
				}
				r.EncodeMapStart(yynn632)
				yynn632 = 0
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[0] {
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq632[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym635 := z.EncBinary()
					_ = yym635
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[1] {
					yym637 := z.EncBinary()
					_ = yym637
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq632[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[2] {
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq632[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[3] {
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq632[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[4] {
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq632[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[5] {
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq632[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq632[6] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym652 := z.EncBinary()
						_ = yym652
						if false {
						} else {
							h.encSliceDeploymentCondition(([]DeploymentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq632[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym653 := z.EncBinary()
						_ = yym653
						if false {
						} else {
							h.encSliceDeploymentCondition(([]DeploymentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr632 || yy2arr632 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym654 := z.DecBinary()
	_ = yym654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct655 := r.ContainerType()
		if yyct655 == codecSelferValueTypeMap1234 {
			yyl655 := r.ReadMapStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl655, d)
			}
		} else if yyct655 == codecSelferValueTypeArray1234 {
			yyl655 := r.ReadArrayStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys656Slc
	var yyhl656 bool = l >= 0
	for yyj656 := 0; ; yyj656++ {
		if yyhl656 {
			if yyj656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys656Slc = r.DecodeBytes(yys656Slc, true, true)
		yys656 := string(yys656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys656 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv663 := &x.Conditions
				yym664 := z.DecBinary()
				_ = yym664
				if false {
				} else {
					h.decSliceDeploymentCondition((*[]DeploymentCondition)(yyv663), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys656)
		} // end switch yys656
	} // end for yyj656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj665 int
	var yyb665 bool
	var yyhl665 bool = l >= 0
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	yyj665++
	if yyhl665 {
		yyb665 = yyj665 > l
	} else {
		yyb665 = r.CheckBreak()
	}
	if yyb665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv672 := &x.Conditions
		yym673 := z.DecBinary()
		_ = yym673
		if false {
		} else {
			h.decSliceDeploymentCondition((*[]DeploymentCondition)(yyv672), d)
		}
	}
	for {
		yyj665++
		if yyhl665 {
			yyb665 = yyj665 > l
		} else {
			yyb665 = r.CheckBreak()
		}
		if yyb665 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj665-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym674 := z.EncBinary()
	_ = yym674
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym675 := z.DecBinary()
	_ = yym675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *DeploymentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym676 := z.EncBinary()
		_ = yym676
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep677 := !z.EncBinary()
			yy2arr677 := z.EncBasicHandle().StructToArray
			var yyq677 [6]bool
			_, _, _ = yysep677, yyq677, yy2arr677
			const yyr677 bool = false
			yyq677[2] = true
			yyq677[3] = true
			yyq677[4] = x.Reason != ""
			yyq677[5] = x.Message != ""
			var yynn677 int
			if yyr677 || yy2arr677 {
				r.EncodeArrayStart(6)
			} else {
				yynn677 = 2
				for _, b := range yyq677 {
					if b {
						yynn677++
					}
				}
				r.EncodeMapStart(yynn677)
				yynn677 = 0
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym680 := z.EncBinary()
				_ = yym680
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym681 := z.EncBinary()
				_ = yym681
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq677[2] {
					yy683 := &x.LastUpdateTime
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else if z.HasExtensions() && z.EncExt(yy683) {
					} else if yym684 {
						z.EncBinaryMarshal(yy683)
					} else if !yym684 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy683)
					} else {
						z.EncFallback(yy683)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq677[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastUpdateTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy685 := &x.LastUpdateTime
					yym686 := z.EncBinary()
					_ = yym686
					if false {
					} else if z.HasExtensions() && z.EncExt(yy685) {
					} else if yym686 {
						z.EncBinaryMarshal(yy685)
					} else if !yym686 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy685)
					} else {
						z.EncFallback(yy685)
					}
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq677[3] {
					yy688 := &x.LastTransitionTime
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else if z.HasExtensions() && z.EncExt(yy688) {
					} else if yym689 {
						z.EncBinaryMarshal(yy688)
					} else if !yym689 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy688)
					} else {
						z.EncFallback(yy688)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq677[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy690 := &x.LastTransitionTime
					yym691 := z.EncBinary()
					_ = yym691
					if false {
					} else if z.HasExtensions() && z.EncExt(yy690) {
					} else if yym691 {
						z.EncBinaryMarshal(yy690)
					} else if !yym691 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy690)
					} else {
						z.EncFallback(yy690)
					}
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq677[4] {
					yym693 := z.EncBinary()
					_ = yym693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq677[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym694 := z.EncBinary()
					_ = yym694
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq677[5] {
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq677[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr677 || yy2arr677 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym698 := z.DecBinary()
	_ = yym698
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct699 := r.ContainerType()
		if yyct699 == codecSelferValueTypeMap1234 {
			yyl699 := r.ReadMapStart()
			if yyl699 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl699, d)
			}
		} else if yyct699 == codecSelferValueTypeArray1234 {
			yyl699 := r.ReadArrayStart()
			if yyl699 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl699, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys700Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys700Slc
	var yyhl700 bool = l >= 0
	for yyj700 := 0; ; yyj700++ {
		if yyhl700 {
			if yyj700 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys700Slc = r.DecodeBytes(yys700Slc, true, true)
		yys700 := string(yys700Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys700 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastUpdateTime":
			if r.TryDecodeAsNil() {
				x.LastUpdateTime = pkg1_v1.Time{}
			} else {
				yyv703 := &x.LastUpdateTime
				yym704 := z.DecBinary()
				_ = yym704
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv703) {
				} else if yym704 {
					z.DecBinaryUnmarshal(yyv703)
				} else if !yym704 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv703)
				} else {
					z.DecFallback(yyv703, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_v1.Time{}
			} else {
				yyv705 := &x.LastTransitionTime
				yym706 := z.DecBinary()
				_ = yym706
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv705) {
				} else if yym706 {
					z.DecBinaryUnmarshal(yyv705)
				} else if !yym706 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv705)
				} else {
					z.DecFallback(yyv705, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys700)
		} // end switch yys700
	} // end for yyj700
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj709 int
	var yyb709 bool
	var yyhl709 bool = l >= 0
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentConditionType(r.DecodeString())
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastUpdateTime = pkg1_v1.Time{}
	} else {
		yyv712 := &x.LastUpdateTime
		yym713 := z.DecBinary()
		_ = yym713
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv712) {
		} else if yym713 {
			z.DecBinaryUnmarshal(yyv712)
		} else if !yym713 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv712)
		} else {
			z.DecFallback(yyv712, false)
		}
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_v1.Time{}
	} else {
		yyv714 := &x.LastTransitionTime
		yym715 := z.DecBinary()
		_ = yym715
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv714) {
		} else if yym715 {
			z.DecBinaryUnmarshal(yyv714)
		} else if !yym715 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv714)
		} else {
			z.DecFallback(yyv714, false)
		}
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj709++
	if yyhl709 {
		yyb709 = yyj709 > l
	} else {
		yyb709 = r.CheckBreak()
	}
	if yyb709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj709++
		if yyhl709 {
			yyb709 = yyj709 > l
		} else {
			yyb709 = r.CheckBreak()
		}
		if yyb709 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj709-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym718 := z.EncBinary()
		_ = yym718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep719 := !z.EncBinary()
			yy2arr719 := z.EncBasicHandle().StructToArray
			var yyq719 [4]bool
			_, _, _ = yysep719, yyq719, yy2arr719
			const yyr719 bool = false
			yyq719[0] = x.Kind != ""
			yyq719[1] = x.APIVersion != ""
			yyq719[2] = true
			var yynn719 int
			if yyr719 || yy2arr719 {
				r.EncodeArrayStart(4)
			} else {
				yynn719 = 1
				for _, b := range yyq719 {
					if b {
						yynn719++
					}
				}
				r.EncodeMapStart(yynn719)
				yynn719 = 0
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[0] {
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq719[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym722 := z.EncBinary()
					_ = yym722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[1] {
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq719[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym725 := z.EncBinary()
					_ = yym725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq719[2] {
					yy727 := &x.ListMeta
					yym728 := z.EncBinary()
					_ = yym728
					if false {
					} else if z.HasExtensions() && z.EncExt(yy727) {
					} else {
						z.EncFallback(yy727)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy729 := &x.ListMeta
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else if z.HasExtensions() && z.EncExt(yy729) {
					} else {
						z.EncFallback(yy729)
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr719 || yy2arr719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym734 := z.DecBinary()
	_ = yym734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct735 := r.ContainerType()
		if yyct735 == codecSelferValueTypeMap1234 {
			yyl735 := r.ReadMapStart()
			if yyl735 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl735, d)
			}
		} else if yyct735 == codecSelferValueTypeArray1234 {
			yyl735 := r.ReadArrayStart()
			if yyl735 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl735, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys736Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys736Slc
	var yyhl736 bool = l >= 0
	for yyj736 := 0; ; yyj736++ {
		if yyhl736 {
			if yyj736 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys736Slc = r.DecodeBytes(yys736Slc, true, true)
		yys736 := string(yys736Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys736 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv739 := &x.ListMeta
				yym740 := z.DecBinary()
				_ = yym740
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv739) {
				} else {
					z.DecFallback(yyv739, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv741 := &x.Items
				yym742 := z.DecBinary()
				_ = yym742
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv741), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys736)
		} // end switch yys736
	} // end for yyj736
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj743 int
	var yyb743 bool
	var yyhl743 bool = l >= 0
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv746 := &x.ListMeta
		yym747 := z.DecBinary()
		_ = yym747
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv746) {
		} else {
			z.DecFallback(yyv746, false)
		}
	}
	yyj743++
	if yyhl743 {
		yyb743 = yyj743 > l
	} else {
		yyb743 = r.CheckBreak()
	}
	if yyb743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv748 := &x.Items
		yym749 := z.DecBinary()
		_ = yym749
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv748), d)
		}
	}
	for {
		yyj743++
		if yyhl743 {
			yyb743 = yyj743 > l
		} else {
			yyb743 = r.CheckBreak()
		}
		if yyb743 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj743-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym750 := z.EncBinary()
		_ = yym750
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep751 := !z.EncBinary()
			yy2arr751 := z.EncBasicHandle().StructToArray
			var yyq751 [2]bool
			_, _, _ = yysep751, yyq751, yy2arr751
			const yyr751 bool = false
			yyq751[0] = x.Selector != nil
			var yynn751 int
			if yyr751 || yy2arr751 {
				r.EncodeArrayStart(2)
			} else {
				yynn751 = 1
				for _, b := range yyq751 {
					if b {
						yynn751++
					}
				}
				r.EncodeMapStart(yynn751)
				yynn751 = 0
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq751[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym753 := z.EncBinary()
						_ = yym753
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq751[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym754 := z.EncBinary()
						_ = yym754
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy756 := &x.Template
				yy756.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy757 := &x.Template
				yy757.CodecEncodeSelf(e)
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym758 := z.DecBinary()
	_ = yym758
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct759 := r.ContainerType()
		if yyct759 == codecSelferValueTypeMap1234 {
			yyl759 := r.ReadMapStart()
			if yyl759 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl759, d)
			}
		} else if yyct759 == codecSelferValueTypeArray1234 {
			yyl759 := r.ReadArrayStart()
			if yyl759 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl759, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys760Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys760Slc
	var yyhl760 bool = l >= 0
	for yyj760 := 0; ; yyj760++ {
		if yyhl760 {
			if yyj760 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys760Slc = r.DecodeBytes(yys760Slc, true, true)
		yys760 := string(yys760Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys760 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_v1.LabelSelector)
				}
				yym762 := z.DecBinary()
				_ = yym762
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv763 := &x.Template
				yyv763.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys760)
		} // end switch yys760
	} // end for yyj760
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj764 int
	var yyb764 bool
	var yyhl764 bool = l >= 0
	yyj764++
	if yyhl764 {
		yyb764 = yyj764 > l
	} else {
		yyb764 = r.CheckBreak()
	}
	if yyb764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_v1.LabelSelector)
		}
		yym766 := z.DecBinary()
		_ = yym766
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj764++
	if yyhl764 {
		yyb764 = yyj764 > l
	} else {
		yyb764 = r.CheckBreak()
	}
	if yyb764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv767 := &x.Template
		yyv767.CodecDecodeSelf(d)
	}
	for {
		yyj764++
		if yyhl764 {
			yyb764 = yyj764 > l
		} else {
			yyb764 = r.CheckBreak()
		}
		if yyb764 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj764-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym768 := z.EncBinary()
		_ = yym768
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep769 := !z.EncBinary()
			yy2arr769 := z.EncBasicHandle().StructToArray
			var yyq769 [5]bool
			_, _, _ = yysep769, yyq769, yy2arr769
			const yyr769 bool = false
			yyq769[4] = x.ObservedGeneration != 0
			var yynn769 int
			if yyr769 || yy2arr769 {
				r.EncodeArrayStart(5)
			} else {
				yynn769 = 4
				for _, b := range yyq769 {
					if b {
						yynn769++
					}
				}
				r.EncodeMapStart(yynn769)
				yynn769 = 0
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym771 := z.EncBinary()
				_ = yym771
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym772 := z.EncBinary()
				_ = yym772
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym774 := z.EncBinary()
				_ = yym774
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym775 := z.EncBinary()
				_ = yym775
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym777 := z.EncBinary()
				_ = yym777
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym778 := z.EncBinary()
				_ = yym778
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym780 := z.EncBinary()
				_ = yym780
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberReady"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym781 := z.EncBinary()
				_ = yym781
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq769[4] {
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq769[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym785 := z.DecBinary()
	_ = yym785
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct786 := r.ContainerType()
		if yyct786 == codecSelferValueTypeMap1234 {
			yyl786 := r.ReadMapStart()
			if yyl786 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl786, d)
			}
		} else if yyct786 == codecSelferValueTypeArray1234 {
			yyl786 := r.ReadArrayStart()
			if yyl786 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl786, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys787Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys787Slc
	var yyhl787 bool = l >= 0
	for yyj787 := 0; ; yyj787++ {
		if yyhl787 {
			if yyj787 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys787Slc = r.DecodeBytes(yys787Slc, true, true)
		yys787 := string(yys787Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys787 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberReady":
			if r.TryDecodeAsNil() {
				x.NumberReady = 0
			} else {
				x.NumberReady = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys787)
		} // end switch yys787
	} // end for yyj787
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj793 int
	var yyb793 bool
	var yyhl793 bool = l >= 0
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberReady = 0
	} else {
		x.NumberReady = int32(r.DecodeInt(32))
	}
	yyj793++
	if yyhl793 {
		yyb793 = yyj793 > l
	} else {
		yyb793 = r.CheckBreak()
	}
	if yyb793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj793++
		if yyhl793 {
			yyb793 = yyj793 > l
		} else {
			yyb793 = r.CheckBreak()
		}
		if yyb793 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj793-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym799 := z.EncBinary()
		_ = yym799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep800 := !z.EncBinary()
			yy2arr800 := z.EncBasicHandle().StructToArray
			var yyq800 [5]bool
			_, _, _ = yysep800, yyq800, yy2arr800
			const yyr800 bool = false
			yyq800[0] = x.Kind != ""
			yyq800[1] = x.APIVersion != ""
			yyq800[2] = true
			yyq800[3] = true
			yyq800[4] = true
			var yynn800 int
			if yyr800 || yy2arr800 {
				r.EncodeArrayStart(5)
			} else {
				yynn800 = 0
				for _, b := range yyq800 {
					if b {
						yynn800++
					}
				}
				r.EncodeMapStart(yynn800)
				yynn800 = 0
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[0] {
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq800[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[1] {
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq800[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[2] {
					yy808 := &x.ObjectMeta
					yy808.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq800[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy809 := &x.ObjectMeta
					yy809.CodecEncodeSelf(e)
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[3] {
					yy811 := &x.Spec
					yy811.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq800[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy812 := &x.Spec
					yy812.CodecEncodeSelf(e)
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[4] {
					yy814 := &x.Status
					yy814.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq800[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy815 := &x.Status
					yy815.CodecEncodeSelf(e)
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym816 := z.DecBinary()
	_ = yym816
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct817 := r.ContainerType()
		if yyct817 == codecSelferValueTypeMap1234 {
			yyl817 := r.ReadMapStart()
			if yyl817 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl817, d)
			}
		} else if yyct817 == codecSelferValueTypeArray1234 {
			yyl817 := r.ReadArrayStart()
			if yyl817 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl817, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys818Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys818Slc
	var yyhl818 bool = l >= 0
	for yyj818 := 0; ; yyj818++ {
		if yyhl818 {
			if yyj818 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys818Slc = r.DecodeBytes(yys818Slc, true, true)
		yys818 := string(yys818Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys818 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv821 := &x.ObjectMeta
				yyv821.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv822 := &x.Spec
				yyv822.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv823 := &x.Status
				yyv823.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys818)
		} // end switch yys818
	} // end for yyj818
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj824 int
	var yyb824 bool
	var yyhl824 bool = l >= 0
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv827 := &x.ObjectMeta
		yyv827.CodecDecodeSelf(d)
	}
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv828 := &x.Spec
		yyv828.CodecDecodeSelf(d)
	}
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv829 := &x.Status
		yyv829.CodecDecodeSelf(d)
	}
	for {
		yyj824++
		if yyhl824 {
			yyb824 = yyj824 > l
		} else {
			yyb824 = r.CheckBreak()
		}
		if yyb824 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj824-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym830 := z.EncBinary()
		_ = yym830
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep831 := !z.EncBinary()
			yy2arr831 := z.EncBasicHandle().StructToArray
			var yyq831 [4]bool
			_, _, _ = yysep831, yyq831, yy2arr831
			const yyr831 bool = false
			yyq831[0] = x.Kind != ""
			yyq831[1] = x.APIVersion != ""
			yyq831[2] = true
			var yynn831 int
			if yyr831 || yy2arr831 {
				r.EncodeArrayStart(4)
			} else {
				yynn831 = 1
				for _, b := range yyq831 {
					if b {
						yynn831++
					}
				}
				r.EncodeMapStart(yynn831)
				yynn831 = 0
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq831[0] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq831[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq831[1] {
					yym836 := z.EncBinary()
					_ = yym836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq831[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq831[2] {
					yy839 := &x.ListMeta
					yym840 := z.EncBinary()
					_ = yym840
					if false {
					} else if z.HasExtensions() && z.EncExt(yy839) {
					} else {
						z.EncFallback(yy839)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq831[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy841 := &x.ListMeta
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else if z.HasExtensions() && z.EncExt(yy841) {
					} else {
						z.EncFallback(yy841)
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym844 := z.EncBinary()
					_ = yym844
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr831 || yy2arr831 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym846 := z.DecBinary()
	_ = yym846
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct847 := r.ContainerType()
		if yyct847 == codecSelferValueTypeMap1234 {
			yyl847 := r.ReadMapStart()
			if yyl847 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl847, d)
			}
		} else if yyct847 == codecSelferValueTypeArray1234 {
			yyl847 := r.ReadArrayStart()
			if yyl847 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl847, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys848Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys848Slc
	var yyhl848 bool = l >= 0
	for yyj848 := 0; ; yyj848++ {
		if yyhl848 {
			if yyj848 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys848Slc = r.DecodeBytes(yys848Slc, true, true)
		yys848 := string(yys848Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys848 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv851 := &x.ListMeta
				yym852 := z.DecBinary()
				_ = yym852
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv851) {
				} else {
					z.DecFallback(yyv851, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv853 := &x.Items
				yym854 := z.DecBinary()
				_ = yym854
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv853), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys848)
		} // end switch yys848
	} // end for yyj848
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj855 int
	var yyb855 bool
	var yyhl855 bool = l >= 0
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv858 := &x.ListMeta
		yym859 := z.DecBinary()
		_ = yym859
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv858) {
		} else {
			z.DecFallback(yyv858, false)
		}
	}
	yyj855++
	if yyhl855 {
		yyb855 = yyj855 > l
	} else {
		yyb855 = r.CheckBreak()
	}
	if yyb855 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv860 := &x.Items
		yym861 := z.DecBinary()
		_ = yym861
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv860), d)
		}
	}
	for {
		yyj855++
		if yyhl855 {
			yyb855 = yyj855 > l
		} else {
			yyb855 = r.CheckBreak()
		}
		if yyb855 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj855-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym862 := z.EncBinary()
		_ = yym862
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep863 := !z.EncBinary()
			yy2arr863 := z.EncBasicHandle().StructToArray
			var yyq863 [4]bool
			_, _, _ = yysep863, yyq863, yy2arr863
			const yyr863 bool = false
			yyq863[0] = x.Kind != ""
			yyq863[1] = x.APIVersion != ""
			yyq863[2] = true
			var yynn863 int
			if yyr863 || yy2arr863 {
				r.EncodeArrayStart(4)
			} else {
				yynn863 = 1
				for _, b := range yyq863 {
					if b {
						yynn863++
					}
				}
				r.EncodeMapStart(yynn863)
				yynn863 = 0
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq863[0] {
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq863[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym866 := z.EncBinary()
					_ = yym866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq863[1] {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq863[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq863[2] {
					yy871 := &x.ListMeta
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else if z.HasExtensions() && z.EncExt(yy871) {
					} else {
						z.EncFallback(yy871)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq863[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy873 := &x.ListMeta
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else if z.HasExtensions() && z.EncExt(yy873) {
					} else {
						z.EncFallback(yy873)
					}
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr863 || yy2arr863 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym878 := z.DecBinary()
	_ = yym878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct879 := r.ContainerType()
		if yyct879 == codecSelferValueTypeMap1234 {
			yyl879 := r.ReadMapStart()
			if yyl879 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl879, d)
			}
		} else if yyct879 == codecSelferValueTypeArray1234 {
			yyl879 := r.ReadArrayStart()
			if yyl879 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys880Slc
	var yyhl880 bool = l >= 0
	for yyj880 := 0; ; yyj880++ {
		if yyhl880 {
			if yyj880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys880Slc = r.DecodeBytes(yys880Slc, true, true)
		yys880 := string(yys880Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys880 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv883 := &x.ListMeta
				yym884 := z.DecBinary()
				_ = yym884
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv883) {
				} else {
					z.DecFallback(yyv883, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv885 := &x.Items
				yym886 := z.DecBinary()
				_ = yym886
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv885), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys880)
		} // end switch yys880
	} // end for yyj880
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj887 int
	var yyb887 bool
	var yyhl887 bool = l >= 0
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv890 := &x.ListMeta
		yym891 := z.DecBinary()
		_ = yym891
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv890) {
		} else {
			z.DecFallback(yyv890, false)
		}
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv892 := &x.Items
		yym893 := z.DecBinary()
		_ = yym893
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv892), d)
		}
	}
	for {
		yyj887++
		if yyhl887 {
			yyb887 = yyj887 > l
		} else {
			yyb887 = r.CheckBreak()
		}
		if yyb887 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj887-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [5]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[0] = x.Kind != ""
			yyq895[1] = x.APIVersion != ""
			yyq895[2] = true
			yyq895[3] = true
			yyq895[4] = true
			var yynn895 int
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(5)
			} else {
				yynn895 = 0
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
				yynn895 = 0
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[0] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[1] {
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[2] {
					yy903 := &x.ObjectMeta
					yy903.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq895[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy904 := &x.ObjectMeta
					yy904.CodecEncodeSelf(e)
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[3] {
					yy906 := &x.Spec
					yy906.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq895[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy907 := &x.Spec
					yy907.CodecEncodeSelf(e)
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[4] {
					yy909 := &x.Status
					yy909.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq895[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy910 := &x.Status
					yy910.CodecEncodeSelf(e)
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym911 := z.DecBinary()
	_ = yym911
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct912 := r.ContainerType()
		if yyct912 == codecSelferValueTypeMap1234 {
			yyl912 := r.ReadMapStart()
			if yyl912 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl912, d)
			}
		} else if yyct912 == codecSelferValueTypeArray1234 {
			yyl912 := r.ReadArrayStart()
			if yyl912 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl912, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys913Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys913Slc
	var yyhl913 bool = l >= 0
	for yyj913 := 0; ; yyj913++ {
		if yyhl913 {
			if yyj913 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys913Slc = r.DecodeBytes(yys913Slc, true, true)
		yys913 := string(yys913Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys913 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv916 := &x.ObjectMeta
				yyv916.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv917 := &x.Spec
				yyv917.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv918 := &x.Status
				yyv918.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys913)
		} // end switch yys913
	} // end for yyj913
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj919 int
	var yyb919 bool
	var yyhl919 bool = l >= 0
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv922 := &x.ObjectMeta
		yyv922.CodecDecodeSelf(d)
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv923 := &x.Spec
		yyv923.CodecDecodeSelf(d)
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv924 := &x.Status
		yyv924.CodecDecodeSelf(d)
	}
	for {
		yyj919++
		if yyhl919 {
			yyb919 = yyj919 > l
		} else {
			yyb919 = r.CheckBreak()
		}
		if yyb919 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj919-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym925 := z.EncBinary()
		_ = yym925
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep926 := !z.EncBinary()
			yy2arr926 := z.EncBasicHandle().StructToArray
			var yyq926 [4]bool
			_, _, _ = yysep926, yyq926, yy2arr926
			const yyr926 bool = false
			yyq926[0] = x.Kind != ""
			yyq926[1] = x.APIVersion != ""
			yyq926[2] = true
			var yynn926 int
			if yyr926 || yy2arr926 {
				r.EncodeArrayStart(4)
			} else {
				yynn926 = 1
				for _, b := range yyq926 {
					if b {
						yynn926++
					}
				}
				r.EncodeMapStart(yynn926)
				yynn926 = 0
			}
			if yyr926 || yy2arr926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq926[0] {
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq926[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym929 := z.EncBinary()
					_ = yym929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr926 || yy2arr926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq926[1] {
					yym931 := z.EncBinary()
					_ = yym931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq926[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym932 := z.EncBinary()
					_ = yym932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr926 || yy2arr926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq926[2] {
					yy934 := &x.ListMeta
					yym935 := z.EncBinary()
					_ = yym935
					if false {
					} else if z.HasExtensions() && z.EncExt(yy934) {
					} else {
						z.EncFallback(yy934)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq926[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy936 := &x.ListMeta
					yym937 := z.EncBinary()
					_ = yym937
					if false {
					} else if z.HasExtensions() && z.EncExt(yy936) {
					} else {
						z.EncFallback(yy936)
					}
				}
			}
			if yyr926 || yy2arr926 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym939 := z.EncBinary()
					_ = yym939
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym940 := z.EncBinary()
					_ = yym940
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr926 || yy2arr926 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym941 := z.DecBinary()
	_ = yym941
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct942 := r.ContainerType()
		if yyct942 == codecSelferValueTypeMap1234 {
			yyl942 := r.ReadMapStart()
			if yyl942 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl942, d)
			}
		} else if yyct942 == codecSelferValueTypeArray1234 {
			yyl942 := r.ReadArrayStart()
			if yyl942 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl942, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys943Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys943Slc
	var yyhl943 bool = l >= 0
	for yyj943 := 0; ; yyj943++ {
		if yyhl943 {
			if yyj943 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys943Slc = r.DecodeBytes(yys943Slc, true, true)
		yys943 := string(yys943Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys943 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv946 := &x.ListMeta
				yym947 := z.DecBinary()
				_ = yym947
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv946) {
				} else {
					z.DecFallback(yyv946, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv948 := &x.Items
				yym949 := z.DecBinary()
				_ = yym949
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv948), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys943)
		} // end switch yys943
	} // end for yyj943
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj950 int
	var yyb950 bool
	var yyhl950 bool = l >= 0
	yyj950++
	if yyhl950 {
		yyb950 = yyj950 > l
	} else {
		yyb950 = r.CheckBreak()
	}
	if yyb950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj950++
	if yyhl950 {
		yyb950 = yyj950 > l
	} else {
		yyb950 = r.CheckBreak()
	}
	if yyb950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj950++
	if yyhl950 {
		yyb950 = yyj950 > l
	} else {
		yyb950 = r.CheckBreak()
	}
	if yyb950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv953 := &x.ListMeta
		yym954 := z.DecBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv953) {
		} else {
			z.DecFallback(yyv953, false)
		}
	}
	yyj950++
	if yyhl950 {
		yyb950 = yyj950 > l
	} else {
		yyb950 = r.CheckBreak()
	}
	if yyb950 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv955 := &x.Items
		yym956 := z.DecBinary()
		_ = yym956
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv955), d)
		}
	}
	for {
		yyj950++
		if yyhl950 {
			yyb950 = yyj950 > l
		} else {
			yyb950 = r.CheckBreak()
		}
		if yyb950 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj950-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym957 := z.EncBinary()
		_ = yym957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep958 := !z.EncBinary()
			yy2arr958 := z.EncBasicHandle().StructToArray
			var yyq958 [3]bool
			_, _, _ = yysep958, yyq958, yy2arr958
			const yyr958 bool = false
			yyq958[0] = x.Backend != nil
			yyq958[1] = len(x.TLS) != 0
			yyq958[2] = len(x.Rules) != 0
			var yynn958 int
			if yyr958 || yy2arr958 {
				r.EncodeArrayStart(3)
			} else {
				yynn958 = 0
				for _, b := range yyq958 {
					if b {
						yynn958++
					}
				}
				r.EncodeMapStart(yynn958)
				yynn958 = 0
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq958[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[1] {
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym961 := z.EncBinary()
						_ = yym961
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq958[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tls"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym962 := z.EncBinary()
						_ = yym962
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq958[2] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym964 := z.EncBinary()
						_ = yym964
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq958[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym965 := z.EncBinary()
						_ = yym965
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr958 || yy2arr958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym966 := z.DecBinary()
	_ = yym966
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct967 := r.ContainerType()
		if yyct967 == codecSelferValueTypeMap1234 {
			yyl967 := r.ReadMapStart()
			if yyl967 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl967, d)
			}
		} else if yyct967 == codecSelferValueTypeArray1234 {
			yyl967 := r.ReadArrayStart()
			if yyl967 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl967, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys968Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys968Slc
	var yyhl968 bool = l >= 0
	for yyj968 := 0; ; yyj968++ {
		if yyhl968 {
			if yyj968 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys968Slc = r.DecodeBytes(yys968Slc, true, true)
		yys968 := string(yys968Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys968 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "tls":
			if r.TryDecodeAsNil() {
				x.TLS = nil
			} else {
				yyv970 := &x.TLS
				yym971 := z.DecBinary()
				_ = yym971
				if false {
				} else {
					h.decSliceIngressTLS((*[]IngressTLS)(yyv970), d)
				}
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv972 := &x.Rules
				yym973 := z.DecBinary()
				_ = yym973
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv972), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys968)
		} // end switch yys968
	} // end for yyj968
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj974 int
	var yyb974 bool
	var yyhl974 bool = l >= 0
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TLS = nil
	} else {
		yyv976 := &x.TLS
		yym977 := z.DecBinary()
		_ = yym977
		if false {
		} else {
			h.decSliceIngressTLS((*[]IngressTLS)(yyv976), d)
		}
	}
	yyj974++
	if yyhl974 {
		yyb974 = yyj974 > l
	} else {
		yyb974 = r.CheckBreak()
	}
	if yyb974 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv978 := &x.Rules
		yym979 := z.DecBinary()
		_ = yym979
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv978), d)
		}
	}
	for {
		yyj974++
		if yyhl974 {
			yyb974 = yyj974 > l
		} else {
			yyb974 = r.CheckBreak()
		}
		if yyb974 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj974-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressTLS) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym980 := z.EncBinary()
		_ = yym980
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep981 := !z.EncBinary()
			yy2arr981 := z.EncBasicHandle().StructToArray
			var yyq981 [2]bool
			_, _, _ = yysep981, yyq981, yy2arr981
			const yyr981 bool = false
			yyq981[0] = len(x.Hosts) != 0
			yyq981[1] = x.SecretName != ""
			var yynn981 int
			if yyr981 || yy2arr981 {
				r.EncodeArrayStart(2)
			} else {
				yynn981 = 0
				for _, b := range yyq981 {
					if b {
						yynn981++
					}
				}
				r.EncodeMapStart(yynn981)
				yynn981 = 0
			}
			if yyr981 || yy2arr981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq981[0] {
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym983 := z.EncBinary()
						_ = yym983
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq981[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hosts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym984 := z.EncBinary()
						_ = yym984
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				}
			}
			if yyr981 || yy2arr981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq981[1] {
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq981[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr981 || yy2arr981 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressTLS) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym988 := z.DecBinary()
	_ = yym988
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct989 := r.ContainerType()
		if yyct989 == codecSelferValueTypeMap1234 {
			yyl989 := r.ReadMapStart()
			if yyl989 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl989, d)
			}
		} else if yyct989 == codecSelferValueTypeArray1234 {
			yyl989 := r.ReadArrayStart()
			if yyl989 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl989, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressTLS) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys990Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys990Slc
	var yyhl990 bool = l >= 0
	for yyj990 := 0; ; yyj990++ {
		if yyhl990 {
			if yyj990 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys990Slc = r.DecodeBytes(yys990Slc, true, true)
		yys990 := string(yys990Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys990 {
		case "hosts":
			if r.TryDecodeAsNil() {
				x.Hosts = nil
			} else {
				yyv991 := &x.Hosts
				yym992 := z.DecBinary()
				_ = yym992
				if false {
				} else {
					z.F.DecSliceStringX(yyv991, false, d)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys990)
		} // end switch yys990
	} // end for yyj990
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressTLS) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj994 int
	var yyb994 bool
	var yyhl994 bool = l >= 0
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hosts = nil
	} else {
		yyv995 := &x.Hosts
		yym996 := z.DecBinary()
		_ = yym996
		if false {
		} else {
			z.F.DecSliceStringX(yyv995, false, d)
		}
	}
	yyj994++
	if yyhl994 {
		yyb994 = yyj994 > l
	} else {
		yyb994 = r.CheckBreak()
	}
	if yyb994 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj994++
		if yyhl994 {
			yyb994 = yyj994 > l
		} else {
			yyb994 = r.CheckBreak()
		}
		if yyb994 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj994-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym998 := z.EncBinary()
		_ = yym998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep999 := !z.EncBinary()
			yy2arr999 := z.EncBasicHandle().StructToArray
			var yyq999 [1]bool
			_, _, _ = yysep999, yyq999, yy2arr999
			const yyr999 bool = false
			yyq999[0] = true
			var yynn999 int
			if yyr999 || yy2arr999 {
				r.EncodeArrayStart(1)
			} else {
				yynn999 = 0
				for _, b := range yyq999 {
					if b {
						yynn999++
					}
				}
				r.EncodeMapStart(yynn999)
				yynn999 = 0
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq999[0] {
					yy1001 := &x.LoadBalancer
					yy1001.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq999[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1002 := &x.LoadBalancer
					yy1002.CodecEncodeSelf(e)
				}
			}
			if yyr999 || yy2arr999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1003 := z.DecBinary()
	_ = yym1003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1004 := r.ContainerType()
		if yyct1004 == codecSelferValueTypeMap1234 {
			yyl1004 := r.ReadMapStart()
			if yyl1004 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1004, d)
			}
		} else if yyct1004 == codecSelferValueTypeArray1234 {
			yyl1004 := r.ReadArrayStart()
			if yyl1004 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1004, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1005Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1005Slc
	var yyhl1005 bool = l >= 0
	for yyj1005 := 0; ; yyj1005++ {
		if yyhl1005 {
			if yyj1005 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1005Slc = r.DecodeBytes(yys1005Slc, true, true)
		yys1005 := string(yys1005Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1005 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
			} else {
				yyv1006 := &x.LoadBalancer
				yyv1006.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1005)
		} // end switch yys1005
	} // end for yyj1005
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1007 int
	var yyb1007 bool
	var yyhl1007 bool = l >= 0
	yyj1007++
	if yyhl1007 {
		yyb1007 = yyj1007 > l
	} else {
		yyb1007 = r.CheckBreak()
	}
	if yyb1007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
	} else {
		yyv1008 := &x.LoadBalancer
		yyv1008.CodecDecodeSelf(d)
	}
	for {
		yyj1007++
		if yyhl1007 {
			yyb1007 = yyj1007 > l
		} else {
			yyb1007 = r.CheckBreak()
		}
		if yyb1007 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1007-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1009 := z.EncBinary()
		_ = yym1009
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1010 := !z.EncBinary()
			yy2arr1010 := z.EncBasicHandle().StructToArray
			var yyq1010 [2]bool
			_, _, _ = yysep1010, yyq1010, yy2arr1010
			const yyr1010 bool = false
			yyq1010[0] = x.Host != ""
			yyq1010[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1010 int
			if yyr1010 || yy2arr1010 {
				r.EncodeArrayStart(2)
			} else {
				yynn1010 = 0
				for _, b := range yyq1010 {
					if b {
						yynn1010++
					}
				}
				r.EncodeMapStart(yynn1010)
				yynn1010 = 0
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1010[0] {
					yym1012 := z.EncBinary()
					_ = yym1012
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1010[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1013 := z.EncBinary()
					_ = yym1013
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1014 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1014 = true
				goto LABEL1014
			}
		LABEL1014:
			if yyr1010 || yy2arr1010 {
				if yyn1014 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1010[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1010[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1014 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1010 || yy2arr1010 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1015 := z.DecBinary()
	_ = yym1015
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1016 := r.ContainerType()
		if yyct1016 == codecSelferValueTypeMap1234 {
			yyl1016 := r.ReadMapStart()
			if yyl1016 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1016, d)
			}
		} else if yyct1016 == codecSelferValueTypeArray1234 {
			yyl1016 := r.ReadArrayStart()
			if yyl1016 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1016, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1017Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1017Slc
	var yyhl1017 bool = l >= 0
	for yyj1017 := 0; ; yyj1017++ {
		if yyhl1017 {
			if yyj1017 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1017Slc = r.DecodeBytes(yys1017Slc, true, true)
		yys1017 := string(yys1017Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1017 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1017)
		} // end switch yys1017
	} // end for yyj1017
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1020 int
	var yyb1020 bool
	var yyhl1020 bool = l >= 0
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1020++
		if yyhl1020 {
			yyb1020 = yyj1020 > l
		} else {
			yyb1020 = r.CheckBreak()
		}
		if yyb1020 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1020-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1023 := z.EncBinary()
		_ = yym1023
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1024 := !z.EncBinary()
			yy2arr1024 := z.EncBasicHandle().StructToArray
			var yyq1024 [1]bool
			_, _, _ = yysep1024, yyq1024, yy2arr1024
			const yyr1024 bool = false
			yyq1024[0] = x.HTTP != nil
			var yynn1024 int
			if yyr1024 || yy2arr1024 {
				r.EncodeArrayStart(1)
			} else {
				yynn1024 = 0
				for _, b := range yyq1024 {
					if b {
						yynn1024++
					}
				}
				r.EncodeMapStart(yynn1024)
				yynn1024 = 0
			}
			if yyr1024 || yy2arr1024 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1024[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1024[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1024 || yy2arr1024 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1026 := z.DecBinary()
	_ = yym1026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1027 := r.ContainerType()
		if yyct1027 == codecSelferValueTypeMap1234 {
			yyl1027 := r.ReadMapStart()
			if yyl1027 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1027, d)
			}
		} else if yyct1027 == codecSelferValueTypeArray1234 {
			yyl1027 := r.ReadArrayStart()
			if yyl1027 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1027, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1028Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1028Slc
	var yyhl1028 bool = l >= 0
	for yyj1028 := 0; ; yyj1028++ {
		if yyhl1028 {
			if yyj1028 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1028Slc = r.DecodeBytes(yys1028Slc, true, true)
		yys1028 := string(yys1028Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1028 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1028)
		} // end switch yys1028
	} // end for yyj1028
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1030 int
	var yyb1030 bool
	var yyhl1030 bool = l >= 0
	yyj1030++
	if yyhl1030 {
		yyb1030 = yyj1030 > l
	} else {
		yyb1030 = r.CheckBreak()
	}
	if yyb1030 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1030++
		if yyhl1030 {
			yyb1030 = yyj1030 > l
		} else {
			yyb1030 = r.CheckBreak()
		}
		if yyb1030 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1030-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1032 := z.EncBinary()
		_ = yym1032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1033 := !z.EncBinary()
			yy2arr1033 := z.EncBasicHandle().StructToArray
			var yyq1033 [1]bool
			_, _, _ = yysep1033, yyq1033, yy2arr1033
			const yyr1033 bool = false
			var yynn1033 int
			if yyr1033 || yy2arr1033 {
				r.EncodeArrayStart(1)
			} else {
				yynn1033 = 1
				for _, b := range yyq1033 {
					if b {
						yynn1033++
					}
				}
				r.EncodeMapStart(yynn1033)
				yynn1033 = 0
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1037 := z.DecBinary()
	_ = yym1037
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1038 := r.ContainerType()
		if yyct1038 == codecSelferValueTypeMap1234 {
			yyl1038 := r.ReadMapStart()
			if yyl1038 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1038, d)
			}
		} else if yyct1038 == codecSelferValueTypeArray1234 {
			yyl1038 := r.ReadArrayStart()
			if yyl1038 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1038, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1039Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1039Slc
	var yyhl1039 bool = l >= 0
	for yyj1039 := 0; ; yyj1039++ {
		if yyhl1039 {
			if yyj1039 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1039Slc = r.DecodeBytes(yys1039Slc, true, true)
		yys1039 := string(yys1039Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1039 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1040 := &x.Paths
				yym1041 := z.DecBinary()
				_ = yym1041
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1040), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1039)
		} // end switch yys1039
	} // end for yyj1039
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1042 int
	var yyb1042 bool
	var yyhl1042 bool = l >= 0
	yyj1042++
	if yyhl1042 {
		yyb1042 = yyj1042 > l
	} else {
		yyb1042 = r.CheckBreak()
	}
	if yyb1042 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1043 := &x.Paths
		yym1044 := z.DecBinary()
		_ = yym1044
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1043), d)
		}
	}
	for {
		yyj1042++
		if yyhl1042 {
			yyb1042 = yyj1042 > l
		} else {
			yyb1042 = r.CheckBreak()
		}
		if yyb1042 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1042-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1045 := z.EncBinary()
		_ = yym1045
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1046 := !z.EncBinary()
			yy2arr1046 := z.EncBasicHandle().StructToArray
			var yyq1046 [2]bool
			_, _, _ = yysep1046, yyq1046, yy2arr1046
			const yyr1046 bool = false
			yyq1046[0] = x.Path != ""
			var yynn1046 int
			if yyr1046 || yy2arr1046 {
				r.EncodeArrayStart(2)
			} else {
				yynn1046 = 1
				for _, b := range yyq1046 {
					if b {
						yynn1046++
					}
				}
				r.EncodeMapStart(yynn1046)
				yynn1046 = 0
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1046[0] {
					yym1048 := z.EncBinary()
					_ = yym1048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1046[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1049 := z.EncBinary()
					_ = yym1049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1051 := &x.Backend
				yy1051.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1052 := &x.Backend
				yy1052.CodecEncodeSelf(e)
			}
			if yyr1046 || yy2arr1046 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1053 := z.DecBinary()
	_ = yym1053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1054 := r.ContainerType()
		if yyct1054 == codecSelferValueTypeMap1234 {
			yyl1054 := r.ReadMapStart()
			if yyl1054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1054, d)
			}
		} else if yyct1054 == codecSelferValueTypeArray1234 {
			yyl1054 := r.ReadArrayStart()
			if yyl1054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1055Slc
	var yyhl1055 bool = l >= 0
	for yyj1055 := 0; ; yyj1055++ {
		if yyhl1055 {
			if yyj1055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1055Slc = r.DecodeBytes(yys1055Slc, true, true)
		yys1055 := string(yys1055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1055 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1057 := &x.Backend
				yyv1057.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1055)
		} // end switch yys1055
	} // end for yyj1055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1058 int
	var yyb1058 bool
	var yyhl1058 bool = l >= 0
	yyj1058++
	if yyhl1058 {
		yyb1058 = yyj1058 > l
	} else {
		yyb1058 = r.CheckBreak()
	}
	if yyb1058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1058++
	if yyhl1058 {
		yyb1058 = yyj1058 > l
	} else {
		yyb1058 = r.CheckBreak()
	}
	if yyb1058 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1060 := &x.Backend
		yyv1060.CodecDecodeSelf(d)
	}
	for {
		yyj1058++
		if yyhl1058 {
			yyb1058 = yyj1058 > l
		} else {
			yyb1058 = r.CheckBreak()
		}
		if yyb1058 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1058-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1061 := z.EncBinary()
		_ = yym1061
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1062 := !z.EncBinary()
			yy2arr1062 := z.EncBasicHandle().StructToArray
			var yyq1062 [2]bool
			_, _, _ = yysep1062, yyq1062, yy2arr1062
			const yyr1062 bool = false
			var yynn1062 int
			if yyr1062 || yy2arr1062 {
				r.EncodeArrayStart(2)
			} else {
				yynn1062 = 2
				for _, b := range yyq1062 {
					if b {
						yynn1062++
					}
				}
				r.EncodeMapStart(yynn1062)
				yynn1062 = 0
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1064 := z.EncBinary()
				_ = yym1064
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1065 := z.EncBinary()
				_ = yym1065
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1067 := &x.ServicePort
				yym1068 := z.EncBinary()
				_ = yym1068
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1067) {
				} else if !yym1068 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1067)
				} else {
					z.EncFallback(yy1067)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1069 := &x.ServicePort
				yym1070 := z.EncBinary()
				_ = yym1070
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1069) {
				} else if !yym1070 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1069)
				} else {
					z.EncFallback(yy1069)
				}
			}
			if yyr1062 || yy2arr1062 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1071 := z.DecBinary()
	_ = yym1071
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1072 := r.ContainerType()
		if yyct1072 == codecSelferValueTypeMap1234 {
			yyl1072 := r.ReadMapStart()
			if yyl1072 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1072, d)
			}
		} else if yyct1072 == codecSelferValueTypeArray1234 {
			yyl1072 := r.ReadArrayStart()
			if yyl1072 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1072, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1073Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1073Slc
	var yyhl1073 bool = l >= 0
	for yyj1073 := 0; ; yyj1073++ {
		if yyhl1073 {
			if yyj1073 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1073Slc = r.DecodeBytes(yys1073Slc, true, true)
		yys1073 := string(yys1073Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1073 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg5_intstr.IntOrString{}
			} else {
				yyv1075 := &x.ServicePort
				yym1076 := z.DecBinary()
				_ = yym1076
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1075) {
				} else if !yym1076 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1075)
				} else {
					z.DecFallback(yyv1075, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1073)
		} // end switch yys1073
	} // end for yyj1073
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1077 int
	var yyb1077 bool
	var yyhl1077 bool = l >= 0
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg5_intstr.IntOrString{}
	} else {
		yyv1079 := &x.ServicePort
		yym1080 := z.DecBinary()
		_ = yym1080
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1079) {
		} else if !yym1080 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1079)
		} else {
			z.DecFallback(yyv1079, false)
		}
	}
	for {
		yyj1077++
		if yyhl1077 {
			yyb1077 = yyj1077 > l
		} else {
			yyb1077 = r.CheckBreak()
		}
		if yyb1077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1081 := z.EncBinary()
		_ = yym1081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1082 := !z.EncBinary()
			yy2arr1082 := z.EncBasicHandle().StructToArray
			var yyq1082 [5]bool
			_, _, _ = yysep1082, yyq1082, yy2arr1082
			const yyr1082 bool = false
			yyq1082[0] = x.Kind != ""
			yyq1082[1] = x.APIVersion != ""
			yyq1082[2] = true
			yyq1082[3] = true
			yyq1082[4] = true
			var yynn1082 int
			if yyr1082 || yy2arr1082 {
				r.EncodeArrayStart(5)
			} else {
				yynn1082 = 0
				for _, b := range yyq1082 {
					if b {
						yynn1082++
					}
				}
				r.EncodeMapStart(yynn1082)
				yynn1082 = 0
			}
			if yyr1082 || yy2arr1082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1082[0] {
					yym1084 := z.EncBinary()
					_ = yym1084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1082[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1085 := z.EncBinary()
					_ = yym1085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1082 || yy2arr1082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1082[1] {
					yym1087 := z.EncBinary()
					_ = yym1087
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1082[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1082 || yy2arr1082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1082[2] {
					yy1090 := &x.ObjectMeta
					yy1090.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1082[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1091 := &x.ObjectMeta
					yy1091.CodecEncodeSelf(e)
				}
			}
			if yyr1082 || yy2arr1082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1082[3] {
					yy1093 := &x.Spec
					yy1093.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1082[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1094 := &x.Spec
					yy1094.CodecEncodeSelf(e)
				}
			}
			if yyr1082 || yy2arr1082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1082[4] {
					yy1096 := &x.Status
					yy1096.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1082[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1097 := &x.Status
					yy1097.CodecEncodeSelf(e)
				}
			}
			if yyr1082 || yy2arr1082 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1098 := z.DecBinary()
	_ = yym1098
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1099 := r.ContainerType()
		if yyct1099 == codecSelferValueTypeMap1234 {
			yyl1099 := r.ReadMapStart()
			if yyl1099 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1099, d)
			}
		} else if yyct1099 == codecSelferValueTypeArray1234 {
			yyl1099 := r.ReadArrayStart()
			if yyl1099 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1099, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1100Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1100Slc
	var yyhl1100 bool = l >= 0
	for yyj1100 := 0; ; yyj1100++ {
		if yyhl1100 {
			if yyj1100 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1100Slc = r.DecodeBytes(yys1100Slc, true, true)
		yys1100 := string(yys1100Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1100 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1103 := &x.ObjectMeta
				yyv1103.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1104 := &x.Spec
				yyv1104.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1105 := &x.Status
				yyv1105.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1100)
		} // end switch yys1100
	} // end for yyj1100
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1106 int
	var yyb1106 bool
	var yyhl1106 bool = l >= 0
	yyj1106++
	if yyhl1106 {
		yyb1106 = yyj1106 > l
	} else {
		yyb1106 = r.CheckBreak()
	}
	if yyb1106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1106++
	if yyhl1106 {
		yyb1106 = yyj1106 > l
	} else {
		yyb1106 = r.CheckBreak()
	}
	if yyb1106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1106++
	if yyhl1106 {
		yyb1106 = yyj1106 > l
	} else {
		yyb1106 = r.CheckBreak()
	}
	if yyb1106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1109 := &x.ObjectMeta
		yyv1109.CodecDecodeSelf(d)
	}
	yyj1106++
	if yyhl1106 {
		yyb1106 = yyj1106 > l
	} else {
		yyb1106 = r.CheckBreak()
	}
	if yyb1106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1110 := &x.Spec
		yyv1110.CodecDecodeSelf(d)
	}
	yyj1106++
	if yyhl1106 {
		yyb1106 = yyj1106 > l
	} else {
		yyb1106 = r.CheckBreak()
	}
	if yyb1106 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1111 := &x.Status
		yyv1111.CodecDecodeSelf(d)
	}
	for {
		yyj1106++
		if yyhl1106 {
			yyb1106 = yyj1106 > l
		} else {
			yyb1106 = r.CheckBreak()
		}
		if yyb1106 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1106-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1112 := z.EncBinary()
		_ = yym1112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1113 := !z.EncBinary()
			yy2arr1113 := z.EncBasicHandle().StructToArray
			var yyq1113 [4]bool
			_, _, _ = yysep1113, yyq1113, yy2arr1113
			const yyr1113 bool = false
			yyq1113[0] = x.Kind != ""
			yyq1113[1] = x.APIVersion != ""
			yyq1113[2] = true
			var yynn1113 int
			if yyr1113 || yy2arr1113 {
				r.EncodeArrayStart(4)
			} else {
				yynn1113 = 1
				for _, b := range yyq1113 {
					if b {
						yynn1113++
					}
				}
				r.EncodeMapStart(yynn1113)
				yynn1113 = 0
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[0] {
					yym1115 := z.EncBinary()
					_ = yym1115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1113[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[1] {
					yym1118 := z.EncBinary()
					_ = yym1118
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1113[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1119 := z.EncBinary()
					_ = yym1119
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1113[2] {
					yy1121 := &x.ListMeta
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1121) {
					} else {
						z.EncFallback(yy1121)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1113[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1123 := &x.ListMeta
					yym1124 := z.EncBinary()
					_ = yym1124
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1123) {
					} else {
						z.EncFallback(yy1123)
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1126 := z.EncBinary()
					_ = yym1126
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1113 || yy2arr1113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1128 := z.DecBinary()
	_ = yym1128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1129 := r.ContainerType()
		if yyct1129 == codecSelferValueTypeMap1234 {
			yyl1129 := r.ReadMapStart()
			if yyl1129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1129, d)
			}
		} else if yyct1129 == codecSelferValueTypeArray1234 {
			yyl1129 := r.ReadArrayStart()
			if yyl1129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1130Slc
	var yyhl1130 bool = l >= 0
	for yyj1130 := 0; ; yyj1130++ {
		if yyhl1130 {
			if yyj1130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1130Slc = r.DecodeBytes(yys1130Slc, true, true)
		yys1130 := string(yys1130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1130 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv1133 := &x.ListMeta
				yym1134 := z.DecBinary()
				_ = yym1134
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1133) {
				} else {
					z.DecFallback(yyv1133, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1135 := &x.Items
				yym1136 := z.DecBinary()
				_ = yym1136
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1135), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1130)
		} // end switch yys1130
	} // end for yyj1130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1137 int
	var yyb1137 bool
	var yyhl1137 bool = l >= 0
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv1140 := &x.ListMeta
		yym1141 := z.DecBinary()
		_ = yym1141
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1140) {
		} else {
			z.DecFallback(yyv1140, false)
		}
	}
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1142 := &x.Items
		yym1143 := z.DecBinary()
		_ = yym1143
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1142), d)
		}
	}
	for {
		yyj1137++
		if yyhl1137 {
			yyb1137 = yyj1137 > l
		} else {
			yyb1137 = r.CheckBreak()
		}
		if yyb1137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1144 := z.EncBinary()
		_ = yym1144
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1145 := !z.EncBinary()
			yy2arr1145 := z.EncBasicHandle().StructToArray
			var yyq1145 [4]bool
			_, _, _ = yysep1145, yyq1145, yy2arr1145
			const yyr1145 bool = false
			yyq1145[0] = x.Replicas != nil
			yyq1145[1] = x.MinReadySeconds != 0
			yyq1145[2] = x.Selector != nil
			yyq1145[3] = true
			var yynn1145 int
			if yyr1145 || yy2arr1145 {
				r.EncodeArrayStart(4)
			} else {
				yynn1145 = 0
				for _, b := range yyq1145 {
					if b {
						yynn1145++
					}
				}
				r.EncodeMapStart(yynn1145)
				yynn1145 = 0
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1145[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1147 := *x.Replicas
						yym1148 := z.EncBinary()
						_ = yym1148
						if false {
						} else {
							r.EncodeInt(int64(yy1147))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1145[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1149 := *x.Replicas
						yym1150 := z.EncBinary()
						_ = yym1150
						if false {
						} else {
							r.EncodeInt(int64(yy1149))
						}
					}
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1145[1] {
					yym1152 := z.EncBinary()
					_ = yym1152
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1145[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1153 := z.EncBinary()
					_ = yym1153
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1145[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1155 := z.EncBinary()
						_ = yym1155
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1145[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1156 := z.EncBinary()
						_ = yym1156
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1145[3] {
					yy1158 := &x.Template
					yy1158.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1145[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1159 := &x.Template
					yy1159.CodecEncodeSelf(e)
				}
			}
			if yyr1145 || yy2arr1145 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1160 := z.DecBinary()
	_ = yym1160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1161 := r.ContainerType()
		if yyct1161 == codecSelferValueTypeMap1234 {
			yyl1161 := r.ReadMapStart()
			if yyl1161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1161, d)
			}
		} else if yyct1161 == codecSelferValueTypeArray1234 {
			yyl1161 := r.ReadArrayStart()
			if yyl1161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1162Slc
	var yyhl1162 bool = l >= 0
	for yyj1162 := 0; ; yyj1162++ {
		if yyhl1162 {
			if yyj1162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1162Slc = r.DecodeBytes(yys1162Slc, true, true)
		yys1162 := string(yys1162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1162 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym1164 := z.DecBinary()
				_ = yym1164
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_v1.LabelSelector)
				}
				yym1167 := z.DecBinary()
				_ = yym1167
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv1168 := &x.Template
				yyv1168.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1162)
		} // end switch yys1162
	} // end for yyj1162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1169 int
	var yyb1169 bool
	var yyhl1169 bool = l >= 0
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym1171 := z.DecBinary()
		_ = yym1171
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_v1.LabelSelector)
		}
		yym1174 := z.DecBinary()
		_ = yym1174
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv1175 := &x.Template
		yyv1175.CodecDecodeSelf(d)
	}
	for {
		yyj1169++
		if yyhl1169 {
			yyb1169 = yyj1169 > l
		} else {
			yyb1169 = r.CheckBreak()
		}
		if yyb1169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1176 := z.EncBinary()
		_ = yym1176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1177 := !z.EncBinary()
			yy2arr1177 := z.EncBasicHandle().StructToArray
			var yyq1177 [6]bool
			_, _, _ = yysep1177, yyq1177, yy2arr1177
			const yyr1177 bool = false
			yyq1177[1] = x.FullyLabeledReplicas != 0
			yyq1177[2] = x.ReadyReplicas != 0
			yyq1177[3] = x.AvailableReplicas != 0
			yyq1177[4] = x.ObservedGeneration != 0
			yyq1177[5] = len(x.Conditions) != 0
			var yynn1177 int
			if yyr1177 || yy2arr1177 {
				r.EncodeArrayStart(6)
			} else {
				yynn1177 = 1
				for _, b := range yyq1177 {
					if b {
						yynn1177++
					}
				}
				r.EncodeMapStart(yynn1177)
				yynn1177 = 0
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1179 := z.EncBinary()
				_ = yym1179
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1180 := z.EncBinary()
				_ = yym1180
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1177[1] {
					yym1182 := z.EncBinary()
					_ = yym1182
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1177[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1183 := z.EncBinary()
					_ = yym1183
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1177[2] {
					yym1185 := z.EncBinary()
					_ = yym1185
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1177[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1177[3] {
					yym1188 := z.EncBinary()
					_ = yym1188
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1177[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1189 := z.EncBinary()
					_ = yym1189
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1177[4] {
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1177[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1177[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1194 := z.EncBinary()
						_ = yym1194
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1177[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1195 := z.EncBinary()
						_ = yym1195
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1196 := z.DecBinary()
	_ = yym1196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1197 := r.ContainerType()
		if yyct1197 == codecSelferValueTypeMap1234 {
			yyl1197 := r.ReadMapStart()
			if yyl1197 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1197, d)
			}
		} else if yyct1197 == codecSelferValueTypeArray1234 {
			yyl1197 := r.ReadArrayStart()
			if yyl1197 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1197, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1198Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1198Slc
	var yyhl1198 bool = l >= 0
	for yyj1198 := 0; ; yyj1198++ {
		if yyhl1198 {
			if yyj1198 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1198Slc = r.DecodeBytes(yys1198Slc, true, true)
		yys1198 := string(yys1198Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1198 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1204 := &x.Conditions
				yym1205 := z.DecBinary()
				_ = yym1205
				if false {
				} else {
					h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv1204), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1198)
		} // end switch yys1198
	} // end for yyj1198
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1206 int
	var yyb1206 bool
	var yyhl1206 bool = l >= 0
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj1206++
	if yyhl1206 {
		yyb1206 = yyj1206 > l
	} else {
		yyb1206 = r.CheckBreak()
	}
	if yyb1206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1212 := &x.Conditions
		yym1213 := z.DecBinary()
		_ = yym1213
		if false {
		} else {
			h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv1212), d)
		}
	}
	for {
		yyj1206++
		if yyhl1206 {
			yyb1206 = yyj1206 > l
		} else {
			yyb1206 = r.CheckBreak()
		}
		if yyb1206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicaSetConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1214 := z.EncBinary()
	_ = yym1214
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicaSetConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1215 := z.DecBinary()
	_ = yym1215
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSetCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1216 := z.EncBinary()
		_ = yym1216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1217 := !z.EncBinary()
			yy2arr1217 := z.EncBasicHandle().StructToArray
			var yyq1217 [5]bool
			_, _, _ = yysep1217, yyq1217, yy2arr1217
			const yyr1217 bool = false
			yyq1217[2] = true
			yyq1217[3] = x.Reason != ""
			yyq1217[4] = x.Message != ""
			var yynn1217 int
			if yyr1217 || yy2arr1217 {
				r.EncodeArrayStart(5)
			} else {
				yynn1217 = 2
				for _, b := range yyq1217 {
					if b {
						yynn1217++
					}
				}
				r.EncodeMapStart(yynn1217)
				yynn1217 = 0
			}
			if yyr1217 || yy2arr1217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1217 || yy2arr1217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1220 := z.EncBinary()
				_ = yym1220
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1221 := z.EncBinary()
				_ = yym1221
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1217 || yy2arr1217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1217[2] {
					yy1223 := &x.LastTransitionTime
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1223) {
					} else if yym1224 {
						z.EncBinaryMarshal(yy1223)
					} else if !yym1224 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1223)
					} else {
						z.EncFallback(yy1223)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1217[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1225 := &x.LastTransitionTime
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1225) {
					} else if yym1226 {
						z.EncBinaryMarshal(yy1225)
					} else if !yym1226 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1225)
					} else {
						z.EncFallback(yy1225)
					}
				}
			}
			if yyr1217 || yy2arr1217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1217[3] {
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1217[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1229 := z.EncBinary()
					_ = yym1229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1217 || yy2arr1217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1217[4] {
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1217[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1217 || yy2arr1217 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1233 := z.DecBinary()
	_ = yym1233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1234 := r.ContainerType()
		if yyct1234 == codecSelferValueTypeMap1234 {
			yyl1234 := r.ReadMapStart()
			if yyl1234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1234, d)
			}
		} else if yyct1234 == codecSelferValueTypeArray1234 {
			yyl1234 := r.ReadArrayStart()
			if yyl1234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1235Slc
	var yyhl1235 bool = l >= 0
	for yyj1235 := 0; ; yyj1235++ {
		if yyhl1235 {
			if yyj1235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1235Slc = r.DecodeBytes(yys1235Slc, true, true)
		yys1235 := string(yys1235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1235 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicaSetConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_v1.Time{}
			} else {
				yyv1238 := &x.LastTransitionTime
				yym1239 := z.DecBinary()
				_ = yym1239
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1238) {
				} else if yym1239 {
					z.DecBinaryUnmarshal(yyv1238)
				} else if !yym1239 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1238)
				} else {
					z.DecFallback(yyv1238, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1235)
		} // end switch yys1235
	} // end for yyj1235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1242 int
	var yyb1242 bool
	var yyhl1242 bool = l >= 0
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicaSetConditionType(r.DecodeString())
	}
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_v1.Time{}
	} else {
		yyv1245 := &x.LastTransitionTime
		yym1246 := z.DecBinary()
		_ = yym1246
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1245) {
		} else if yym1246 {
			z.DecBinaryUnmarshal(yyv1245)
		} else if !yym1246 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1245)
		} else {
			z.DecFallback(yyv1245, false)
		}
	}
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1242++
	if yyhl1242 {
		yyb1242 = yyj1242 > l
	} else {
		yyb1242 = r.CheckBreak()
	}
	if yyb1242 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1242++
		if yyhl1242 {
			yyb1242 = yyj1242 > l
		} else {
			yyb1242 = r.CheckBreak()
		}
		if yyb1242 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1242-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1249 := z.EncBinary()
		_ = yym1249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1250 := !z.EncBinary()
			yy2arr1250 := z.EncBasicHandle().StructToArray
			var yyq1250 [4]bool
			_, _, _ = yysep1250, yyq1250, yy2arr1250
			const yyr1250 bool = false
			yyq1250[0] = x.Kind != ""
			yyq1250[1] = x.APIVersion != ""
			yyq1250[2] = true
			yyq1250[3] = true
			var yynn1250 int
			if yyr1250 || yy2arr1250 {
				r.EncodeArrayStart(4)
			} else {
				yynn1250 = 0
				for _, b := range yyq1250 {
					if b {
						yynn1250++
					}
				}
				r.EncodeMapStart(yynn1250)
				yynn1250 = 0
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[0] {
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1253 := z.EncBinary()
					_ = yym1253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[1] {
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1256 := z.EncBinary()
					_ = yym1256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[2] {
					yy1258 := &x.ObjectMeta
					yy1258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1259 := &x.ObjectMeta
					yy1259.CodecEncodeSelf(e)
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[3] {
					yy1261 := &x.Spec
					yy1261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1262 := &x.Spec
					yy1262.CodecEncodeSelf(e)
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1263 := z.DecBinary()
	_ = yym1263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1264 := r.ContainerType()
		if yyct1264 == codecSelferValueTypeMap1234 {
			yyl1264 := r.ReadMapStart()
			if yyl1264 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1264, d)
			}
		} else if yyct1264 == codecSelferValueTypeArray1234 {
			yyl1264 := r.ReadArrayStart()
			if yyl1264 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1265Slc
	var yyhl1265 bool = l >= 0
	for yyj1265 := 0; ; yyj1265++ {
		if yyhl1265 {
			if yyj1265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1265Slc = r.DecodeBytes(yys1265Slc, true, true)
		yys1265 := string(yys1265Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1265 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1268 := &x.ObjectMeta
				yyv1268.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSecurityPolicySpec{}
			} else {
				yyv1269 := &x.Spec
				yyv1269.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1265)
		} // end switch yys1265
	} // end for yyj1265
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1270 int
	var yyb1270 bool
	var yyhl1270 bool = l >= 0
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1273 := &x.ObjectMeta
		yyv1273.CodecDecodeSelf(d)
	}
	yyj1270++
	if yyhl1270 {
		yyb1270 = yyj1270 > l
	} else {
		yyb1270 = r.CheckBreak()
	}
	if yyb1270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSecurityPolicySpec{}
	} else {
		yyv1274 := &x.Spec
		yyv1274.CodecDecodeSelf(d)
	}
	for {
		yyj1270++
		if yyhl1270 {
			yyb1270 = yyj1270 > l
		} else {
			yyb1270 = r.CheckBreak()
		}
		if yyb1270 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1270-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1275 := z.EncBinary()
		_ = yym1275
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1276 := !z.EncBinary()
			yy2arr1276 := z.EncBasicHandle().StructToArray
			var yyq1276 [14]bool
			_, _, _ = yysep1276, yyq1276, yy2arr1276
			const yyr1276 bool = false
			yyq1276[0] = x.Privileged != false
			yyq1276[1] = len(x.DefaultAddCapabilities) != 0
			yyq1276[2] = len(x.RequiredDropCapabilities) != 0
			yyq1276[3] = len(x.AllowedCapabilities) != 0
			yyq1276[4] = len(x.Volumes) != 0
			yyq1276[5] = x.HostNetwork != false
			yyq1276[6] = len(x.HostPorts) != 0
			yyq1276[7] = x.HostPID != false
			yyq1276[8] = x.HostIPC != false
			yyq1276[13] = x.ReadOnlyRootFilesystem != false
			var yynn1276 int
			if yyr1276 || yy2arr1276 {
				r.EncodeArrayStart(14)
			} else {
				yynn1276 = 4
				for _, b := range yyq1276 {
					if b {
						yynn1276++
					}
				}
				r.EncodeMapStart(yynn1276)
				yynn1276 = 0
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[0] {
					yym1278 := z.EncBinary()
					_ = yym1278
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1276[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1279 := z.EncBinary()
					_ = yym1279
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[1] {
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1281 := z.EncBinary()
						_ = yym1281
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1276[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultAddCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1282 := z.EncBinary()
						_ = yym1282
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[2] {
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1284 := z.EncBinary()
						_ = yym1284
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1276[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDropCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1285 := z.EncBinary()
						_ = yym1285
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[3] {
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1287 := z.EncBinary()
						_ = yym1287
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.AllowedCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1276[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allowedCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1288 := z.EncBinary()
						_ = yym1288
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.AllowedCapabilities), e)
						}
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[4] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1290 := z.EncBinary()
						_ = yym1290
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1276[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1291 := z.EncBinary()
						_ = yym1291
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[5] {
					yym1293 := z.EncBinary()
					_ = yym1293
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1276[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[6] {
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1296 := z.EncBinary()
						_ = yym1296
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1276[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPorts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1297 := z.EncBinary()
						_ = yym1297
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[7] {
					yym1299 := z.EncBinary()
					_ = yym1299
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1276[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[8] {
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1276[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1305 := &x.SELinux
				yy1305.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("seLinux"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1306 := &x.SELinux
				yy1306.CodecEncodeSelf(e)
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1308 := &x.RunAsUser
				yy1308.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1309 := &x.RunAsUser
				yy1309.CodecEncodeSelf(e)
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1311 := &x.SupplementalGroups
				yy1311.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1312 := &x.SupplementalGroups
				yy1312.CodecEncodeSelf(e)
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1314 := &x.FSGroup
				yy1314.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1315 := &x.FSGroup
				yy1315.CodecEncodeSelf(e)
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1276[13] {
					yym1317 := z.EncBinary()
					_ = yym1317
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1276[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1318 := z.EncBinary()
					_ = yym1318
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				}
			}
			if yyr1276 || yy2arr1276 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1319 := z.DecBinary()
	_ = yym1319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1320 := r.ContainerType()
		if yyct1320 == codecSelferValueTypeMap1234 {
			yyl1320 := r.ReadMapStart()
			if yyl1320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1320, d)
			}
		} else if yyct1320 == codecSelferValueTypeArray1234 {
			yyl1320 := r.ReadArrayStart()
			if yyl1320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1321Slc
	var yyhl1321 bool = l >= 0
	for yyj1321 := 0; ; yyj1321++ {
		if yyhl1321 {
			if yyj1321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1321Slc = r.DecodeBytes(yys1321Slc, true, true)
		yys1321 := string(yys1321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1321 {
		case "privileged":
			if r.TryDecodeAsNil() {
				x.Privileged = false
			} else {
				x.Privileged = bool(r.DecodeBool())
			}
		case "defaultAddCapabilities":
			if r.TryDecodeAsNil() {
				x.DefaultAddCapabilities = nil
			} else {
				yyv1323 := &x.DefaultAddCapabilities
				yym1324 := z.DecBinary()
				_ = yym1324
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1323), d)
				}
			}
		case "requiredDropCapabilities":
			if r.TryDecodeAsNil() {
				x.RequiredDropCapabilities = nil
			} else {
				yyv1325 := &x.RequiredDropCapabilities
				yym1326 := z.DecBinary()
				_ = yym1326
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1325), d)
				}
			}
		case "allowedCapabilities":
			if r.TryDecodeAsNil() {
				x.AllowedCapabilities = nil
			} else {
				yyv1327 := &x.AllowedCapabilities
				yym1328 := z.DecBinary()
				_ = yym1328
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1327), d)
				}
			}
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1329 := &x.Volumes
				yym1330 := z.DecBinary()
				_ = yym1330
				if false {
				} else {
					h.decSliceFSType((*[]FSType)(yyv1329), d)
				}
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPorts":
			if r.TryDecodeAsNil() {
				x.HostPorts = nil
			} else {
				yyv1332 := &x.HostPorts
				yym1333 := z.DecBinary()
				_ = yym1333
				if false {
				} else {
					h.decSliceHostPortRange((*[]HostPortRange)(yyv1332), d)
				}
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinux":
			if r.TryDecodeAsNil() {
				x.SELinux = SELinuxStrategyOptions{}
			} else {
				yyv1336 := &x.SELinux
				yyv1336.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				x.RunAsUser = RunAsUserStrategyOptions{}
			} else {
				yyv1337 := &x.RunAsUser
				yyv1337.CodecDecodeSelf(d)
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
			} else {
				yyv1338 := &x.SupplementalGroups
				yyv1338.CodecDecodeSelf(d)
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				x.FSGroup = FSGroupStrategyOptions{}
			} else {
				yyv1339 := &x.FSGroup
				yyv1339.CodecDecodeSelf(d)
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				x.ReadOnlyRootFilesystem = false
			} else {
				x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1321)
		} // end switch yys1321
	} // end for yyj1321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1341 int
	var yyb1341 bool
	var yyhl1341 bool = l >= 0
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Privileged = false
	} else {
		x.Privileged = bool(r.DecodeBool())
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultAddCapabilities = nil
	} else {
		yyv1343 := &x.DefaultAddCapabilities
		yym1344 := z.DecBinary()
		_ = yym1344
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1343), d)
		}
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDropCapabilities = nil
	} else {
		yyv1345 := &x.RequiredDropCapabilities
		yym1346 := z.DecBinary()
		_ = yym1346
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1345), d)
		}
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AllowedCapabilities = nil
	} else {
		yyv1347 := &x.AllowedCapabilities
		yym1348 := z.DecBinary()
		_ = yym1348
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1347), d)
		}
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1349 := &x.Volumes
		yym1350 := z.DecBinary()
		_ = yym1350
		if false {
		} else {
			h.decSliceFSType((*[]FSType)(yyv1349), d)
		}
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPorts = nil
	} else {
		yyv1352 := &x.HostPorts
		yym1353 := z.DecBinary()
		_ = yym1353
		if false {
		} else {
			h.decSliceHostPortRange((*[]HostPortRange)(yyv1352), d)
		}
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SELinux = SELinuxStrategyOptions{}
	} else {
		yyv1356 := &x.SELinux
		yyv1356.CodecDecodeSelf(d)
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RunAsUser = RunAsUserStrategyOptions{}
	} else {
		yyv1357 := &x.RunAsUser
		yyv1357.CodecDecodeSelf(d)
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
	} else {
		yyv1358 := &x.SupplementalGroups
		yyv1358.CodecDecodeSelf(d)
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSGroup = FSGroupStrategyOptions{}
	} else {
		yyv1359 := &x.FSGroup
		yyv1359.CodecDecodeSelf(d)
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnlyRootFilesystem = false
	} else {
		x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
	}
	for {
		yyj1341++
		if yyhl1341 {
			yyb1341 = yyj1341 > l
		} else {
			yyb1341 = r.CheckBreak()
		}
		if yyb1341 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1341-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1361 := z.EncBinary()
	_ = yym1361
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1362 := z.DecBinary()
	_ = yym1362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPortRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1363 := z.EncBinary()
		_ = yym1363
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1364 := !z.EncBinary()
			yy2arr1364 := z.EncBasicHandle().StructToArray
			var yyq1364 [2]bool
			_, _, _ = yysep1364, yyq1364, yy2arr1364
			const yyr1364 bool = false
			var yynn1364 int
			if yyr1364 || yy2arr1364 {
				r.EncodeArrayStart(2)
			} else {
				yynn1364 = 2
				for _, b := range yyq1364 {
					if b {
						yynn1364++
					}
				}
				r.EncodeMapStart(yynn1364)
				yynn1364 = 0
			}
			if yyr1364 || yy2arr1364 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1366 := z.EncBinary()
				_ = yym1366
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1367 := z.EncBinary()
				_ = yym1367
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1364 || yy2arr1364 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1369 := z.EncBinary()
				_ = yym1369
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1370 := z.EncBinary()
				_ = yym1370
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1364 || yy2arr1364 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPortRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1371 := z.DecBinary()
	_ = yym1371
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1372 := r.ContainerType()
		if yyct1372 == codecSelferValueTypeMap1234 {
			yyl1372 := r.ReadMapStart()
			if yyl1372 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1372, d)
			}
		} else if yyct1372 == codecSelferValueTypeArray1234 {
			yyl1372 := r.ReadArrayStart()
			if yyl1372 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1372, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPortRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1373Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1373Slc
	var yyhl1373 bool = l >= 0
	for yyj1373 := 0; ; yyj1373++ {
		if yyhl1373 {
			if yyj1373 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1373Slc = r.DecodeBytes(yys1373Slc, true, true)
		yys1373 := string(yys1373Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1373 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int32(r.DecodeInt(32))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1373)
		} // end switch yys1373
	} // end for yyj1373
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPortRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1376 int
	var yyb1376 bool
	var yyhl1376 bool = l >= 0
	yyj1376++
	if yyhl1376 {
		yyb1376 = yyj1376 > l
	} else {
		yyb1376 = r.CheckBreak()
	}
	if yyb1376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int32(r.DecodeInt(32))
	}
	yyj1376++
	if yyhl1376 {
		yyb1376 = yyj1376 > l
	} else {
		yyb1376 = r.CheckBreak()
	}
	if yyb1376 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int32(r.DecodeInt(32))
	}
	for {
		yyj1376++
		if yyhl1376 {
			yyb1376 = yyj1376 > l
		} else {
			yyb1376 = r.CheckBreak()
		}
		if yyb1376 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1376-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1379 := z.EncBinary()
		_ = yym1379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1380 := !z.EncBinary()
			yy2arr1380 := z.EncBasicHandle().StructToArray
			var yyq1380 [2]bool
			_, _, _ = yysep1380, yyq1380, yy2arr1380
			const yyr1380 bool = false
			yyq1380[1] = x.SELinuxOptions != nil
			var yynn1380 int
			if yyr1380 || yy2arr1380 {
				r.EncodeArrayStart(2)
			} else {
				yynn1380 = 1
				for _, b := range yyq1380 {
					if b {
						yynn1380++
					}
				}
				r.EncodeMapStart(yynn1380)
				yynn1380 = 0
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[1] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1383 := z.DecBinary()
	_ = yym1383
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1384 := r.ContainerType()
		if yyct1384 == codecSelferValueTypeMap1234 {
			yyl1384 := r.ReadMapStart()
			if yyl1384 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1384, d)
			}
		} else if yyct1384 == codecSelferValueTypeArray1234 {
			yyl1384 := r.ReadArrayStart()
			if yyl1384 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1384, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1385Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1385Slc
	var yyhl1385 bool = l >= 0
	for yyj1385 := 0; ; yyj1385++ {
		if yyhl1385 {
			if yyj1385 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1385Slc = r.DecodeBytes(yys1385Slc, true, true)
		yys1385 := string(yys1385Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1385 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SELinuxStrategy(r.DecodeString())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(pkg2_v1.SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1385)
		} // end switch yys1385
	} // end for yyj1385
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1388 int
	var yyb1388 bool
	var yyhl1388 bool = l >= 0
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SELinuxStrategy(r.DecodeString())
	}
	yyj1388++
	if yyhl1388 {
		yyb1388 = yyj1388 > l
	} else {
		yyb1388 = r.CheckBreak()
	}
	if yyb1388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(pkg2_v1.SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	for {
		yyj1388++
		if yyhl1388 {
			yyb1388 = yyj1388 > l
		} else {
			yyb1388 = r.CheckBreak()
		}
		if yyb1388 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1388-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SELinuxStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1391 := z.EncBinary()
	_ = yym1391
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SELinuxStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1392 := z.DecBinary()
	_ = yym1392
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RunAsUserStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1393 := z.EncBinary()
		_ = yym1393
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1394 := !z.EncBinary()
			yy2arr1394 := z.EncBasicHandle().StructToArray
			var yyq1394 [2]bool
			_, _, _ = yysep1394, yyq1394, yy2arr1394
			const yyr1394 bool = false
			yyq1394[1] = len(x.Ranges) != 0
			var yynn1394 int
			if yyr1394 || yy2arr1394 {
				r.EncodeArrayStart(2)
			} else {
				yynn1394 = 1
				for _, b := range yyq1394 {
					if b {
						yynn1394++
					}
				}
				r.EncodeMapStart(yynn1394)
				yynn1394 = 0
			}
			if yyr1394 || yy2arr1394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1394 || yy2arr1394 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1394[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1397 := z.EncBinary()
						_ = yym1397
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1394[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1398 := z.EncBinary()
						_ = yym1398
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1394 || yy2arr1394 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RunAsUserStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1399 := z.DecBinary()
	_ = yym1399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1400 := r.ContainerType()
		if yyct1400 == codecSelferValueTypeMap1234 {
			yyl1400 := r.ReadMapStart()
			if yyl1400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1400, d)
			}
		} else if yyct1400 == codecSelferValueTypeArray1234 {
			yyl1400 := r.ReadArrayStart()
			if yyl1400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1401Slc
	var yyhl1401 bool = l >= 0
	for yyj1401 := 0; ; yyj1401++ {
		if yyhl1401 {
			if yyj1401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1401Slc = r.DecodeBytes(yys1401Slc, true, true)
		yys1401 := string(yys1401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1401 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = RunAsUserStrategy(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1403 := &x.Ranges
				yym1404 := z.DecBinary()
				_ = yym1404
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1403), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1401)
		} // end switch yys1401
	} // end for yyj1401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1405 int
	var yyb1405 bool
	var yyhl1405 bool = l >= 0
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = RunAsUserStrategy(r.DecodeString())
	}
	yyj1405++
	if yyhl1405 {
		yyb1405 = yyj1405 > l
	} else {
		yyb1405 = r.CheckBreak()
	}
	if yyb1405 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1407 := &x.Ranges
		yym1408 := z.DecBinary()
		_ = yym1408
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1407), d)
		}
	}
	for {
		yyj1405++
		if yyhl1405 {
			yyb1405 = yyj1405 > l
		} else {
			yyb1405 = r.CheckBreak()
		}
		if yyb1405 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1405-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IDRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1409 := z.EncBinary()
		_ = yym1409
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1410 := !z.EncBinary()
			yy2arr1410 := z.EncBasicHandle().StructToArray
			var yyq1410 [2]bool
			_, _, _ = yysep1410, yyq1410, yy2arr1410
			const yyr1410 bool = false
			var yynn1410 int
			if yyr1410 || yy2arr1410 {
				r.EncodeArrayStart(2)
			} else {
				yynn1410 = 2
				for _, b := range yyq1410 {
					if b {
						yynn1410++
					}
				}
				r.EncodeMapStart(yynn1410)
				yynn1410 = 0
			}
			if yyr1410 || yy2arr1410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1412 := z.EncBinary()
				_ = yym1412
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1413 := z.EncBinary()
				_ = yym1413
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1410 || yy2arr1410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1415 := z.EncBinary()
				_ = yym1415
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1416 := z.EncBinary()
				_ = yym1416
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1410 || yy2arr1410 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IDRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1417 := z.DecBinary()
	_ = yym1417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1418 := r.ContainerType()
		if yyct1418 == codecSelferValueTypeMap1234 {
			yyl1418 := r.ReadMapStart()
			if yyl1418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1418, d)
			}
		} else if yyct1418 == codecSelferValueTypeArray1234 {
			yyl1418 := r.ReadArrayStart()
			if yyl1418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IDRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1419Slc
	var yyhl1419 bool = l >= 0
	for yyj1419 := 0; ; yyj1419++ {
		if yyhl1419 {
			if yyj1419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1419Slc = r.DecodeBytes(yys1419Slc, true, true)
		yys1419 := string(yys1419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1419 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int64(r.DecodeInt(64))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1419)
		} // end switch yys1419
	} // end for yyj1419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IDRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1422 int
	var yyb1422 bool
	var yyhl1422 bool = l >= 0
	yyj1422++
	if yyhl1422 {
		yyb1422 = yyj1422 > l
	} else {
		yyb1422 = r.CheckBreak()
	}
	if yyb1422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int64(r.DecodeInt(64))
	}
	yyj1422++
	if yyhl1422 {
		yyb1422 = yyj1422 > l
	} else {
		yyb1422 = r.CheckBreak()
	}
	if yyb1422 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int64(r.DecodeInt(64))
	}
	for {
		yyj1422++
		if yyhl1422 {
			yyb1422 = yyj1422 > l
		} else {
			yyb1422 = r.CheckBreak()
		}
		if yyb1422 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1422-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RunAsUserStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1425 := z.EncBinary()
	_ = yym1425
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RunAsUserStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1426 := z.DecBinary()
	_ = yym1426
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *FSGroupStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1427 := z.EncBinary()
		_ = yym1427
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1428 := !z.EncBinary()
			yy2arr1428 := z.EncBasicHandle().StructToArray
			var yyq1428 [2]bool
			_, _, _ = yysep1428, yyq1428, yy2arr1428
			const yyr1428 bool = false
			yyq1428[0] = x.Rule != ""
			yyq1428[1] = len(x.Ranges) != 0
			var yynn1428 int
			if yyr1428 || yy2arr1428 {
				r.EncodeArrayStart(2)
			} else {
				yynn1428 = 0
				for _, b := range yyq1428 {
					if b {
						yynn1428++
					}
				}
				r.EncodeMapStart(yynn1428)
				yynn1428 = 0
			}
			if yyr1428 || yy2arr1428 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1428[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1428[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1428 || yy2arr1428 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1428[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1431 := z.EncBinary()
						_ = yym1431
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1428[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1432 := z.EncBinary()
						_ = yym1432
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1428 || yy2arr1428 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FSGroupStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1433 := z.DecBinary()
	_ = yym1433
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1434 := r.ContainerType()
		if yyct1434 == codecSelferValueTypeMap1234 {
			yyl1434 := r.ReadMapStart()
			if yyl1434 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1434, d)
			}
		} else if yyct1434 == codecSelferValueTypeArray1234 {
			yyl1434 := r.ReadArrayStart()
			if yyl1434 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1434, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1435Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1435Slc
	var yyhl1435 bool = l >= 0
	for yyj1435 := 0; ; yyj1435++ {
		if yyhl1435 {
			if yyj1435 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1435Slc = r.DecodeBytes(yys1435Slc, true, true)
		yys1435 := string(yys1435Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1435 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = FSGroupStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1437 := &x.Ranges
				yym1438 := z.DecBinary()
				_ = yym1438
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1437), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1435)
		} // end switch yys1435
	} // end for yyj1435
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1439 int
	var yyb1439 bool
	var yyhl1439 bool = l >= 0
	yyj1439++
	if yyhl1439 {
		yyb1439 = yyj1439 > l
	} else {
		yyb1439 = r.CheckBreak()
	}
	if yyb1439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = FSGroupStrategyType(r.DecodeString())
	}
	yyj1439++
	if yyhl1439 {
		yyb1439 = yyj1439 > l
	} else {
		yyb1439 = r.CheckBreak()
	}
	if yyb1439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1441 := &x.Ranges
		yym1442 := z.DecBinary()
		_ = yym1442
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1441), d)
		}
	}
	for {
		yyj1439++
		if yyhl1439 {
			yyb1439 = yyj1439 > l
		} else {
			yyb1439 = r.CheckBreak()
		}
		if yyb1439 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1439-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSGroupStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1443 := z.EncBinary()
	_ = yym1443
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSGroupStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1444 := z.DecBinary()
	_ = yym1444
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1445 := z.EncBinary()
		_ = yym1445
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1446 := !z.EncBinary()
			yy2arr1446 := z.EncBasicHandle().StructToArray
			var yyq1446 [2]bool
			_, _, _ = yysep1446, yyq1446, yy2arr1446
			const yyr1446 bool = false
			yyq1446[0] = x.Rule != ""
			yyq1446[1] = len(x.Ranges) != 0
			var yynn1446 int
			if yyr1446 || yy2arr1446 {
				r.EncodeArrayStart(2)
			} else {
				yynn1446 = 0
				for _, b := range yyq1446 {
					if b {
						yynn1446++
					}
				}
				r.EncodeMapStart(yynn1446)
				yynn1446 = 0
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1446[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1446[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1446[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1449 := z.EncBinary()
						_ = yym1449
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1446[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1450 := z.EncBinary()
						_ = yym1450
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1446 || yy2arr1446 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1451 := z.DecBinary()
	_ = yym1451
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1452 := r.ContainerType()
		if yyct1452 == codecSelferValueTypeMap1234 {
			yyl1452 := r.ReadMapStart()
			if yyl1452 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1452, d)
			}
		} else if yyct1452 == codecSelferValueTypeArray1234 {
			yyl1452 := r.ReadArrayStart()
			if yyl1452 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1452, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1453Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1453Slc
	var yyhl1453 bool = l >= 0
	for yyj1453 := 0; ; yyj1453++ {
		if yyhl1453 {
			if yyj1453 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1453Slc = r.DecodeBytes(yys1453Slc, true, true)
		yys1453 := string(yys1453Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1453 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1455 := &x.Ranges
				yym1456 := z.DecBinary()
				_ = yym1456
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1455), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1453)
		} // end switch yys1453
	} // end for yyj1453
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1457 int
	var yyb1457 bool
	var yyhl1457 bool = l >= 0
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
	}
	yyj1457++
	if yyhl1457 {
		yyb1457 = yyj1457 > l
	} else {
		yyb1457 = r.CheckBreak()
	}
	if yyb1457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1459 := &x.Ranges
		yym1460 := z.DecBinary()
		_ = yym1460
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1459), d)
		}
	}
	for {
		yyj1457++
		if yyhl1457 {
			yyb1457 = yyj1457 > l
		} else {
			yyb1457 = r.CheckBreak()
		}
		if yyb1457 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1457-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SupplementalGroupsStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1461 := z.EncBinary()
	_ = yym1461
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SupplementalGroupsStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1462 := z.DecBinary()
	_ = yym1462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSecurityPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1463 := z.EncBinary()
		_ = yym1463
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1464 := !z.EncBinary()
			yy2arr1464 := z.EncBasicHandle().StructToArray
			var yyq1464 [4]bool
			_, _, _ = yysep1464, yyq1464, yy2arr1464
			const yyr1464 bool = false
			yyq1464[0] = x.Kind != ""
			yyq1464[1] = x.APIVersion != ""
			yyq1464[2] = true
			var yynn1464 int
			if yyr1464 || yy2arr1464 {
				r.EncodeArrayStart(4)
			} else {
				yynn1464 = 1
				for _, b := range yyq1464 {
					if b {
						yynn1464++
					}
				}
				r.EncodeMapStart(yynn1464)
				yynn1464 = 0
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1464[0] {
					yym1466 := z.EncBinary()
					_ = yym1466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1464[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1467 := z.EncBinary()
					_ = yym1467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1464[1] {
					yym1469 := z.EncBinary()
					_ = yym1469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1464[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1470 := z.EncBinary()
					_ = yym1470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1464[2] {
					yy1472 := &x.ListMeta
					yym1473 := z.EncBinary()
					_ = yym1473
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1472) {
					} else {
						z.EncFallback(yy1472)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1464[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1474 := &x.ListMeta
					yym1475 := z.EncBinary()
					_ = yym1475
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1474) {
					} else {
						z.EncFallback(yy1474)
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1477 := z.EncBinary()
					_ = yym1477
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1478 := z.EncBinary()
					_ = yym1478
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			}
			if yyr1464 || yy2arr1464 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1479 := z.DecBinary()
	_ = yym1479
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1480 := r.ContainerType()
		if yyct1480 == codecSelferValueTypeMap1234 {
			yyl1480 := r.ReadMapStart()
			if yyl1480 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1480, d)
			}
		} else if yyct1480 == codecSelferValueTypeArray1234 {
			yyl1480 := r.ReadArrayStart()
			if yyl1480 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1480, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1481Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1481Slc
	var yyhl1481 bool = l >= 0
	for yyj1481 := 0; ; yyj1481++ {
		if yyhl1481 {
			if yyj1481 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1481Slc = r.DecodeBytes(yys1481Slc, true, true)
		yys1481 := string(yys1481Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1481 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv1484 := &x.ListMeta
				yym1485 := z.DecBinary()
				_ = yym1485
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1484) {
				} else {
					z.DecFallback(yyv1484, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1486 := &x.Items
				yym1487 := z.DecBinary()
				_ = yym1487
				if false {
				} else {
					h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1486), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1481)
		} // end switch yys1481
	} // end for yyj1481
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1488 int
	var yyb1488 bool
	var yyhl1488 bool = l >= 0
	yyj1488++
	if yyhl1488 {
		yyb1488 = yyj1488 > l
	} else {
		yyb1488 = r.CheckBreak()
	}
	if yyb1488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1488++
	if yyhl1488 {
		yyb1488 = yyj1488 > l
	} else {
		yyb1488 = r.CheckBreak()
	}
	if yyb1488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1488++
	if yyhl1488 {
		yyb1488 = yyj1488 > l
	} else {
		yyb1488 = r.CheckBreak()
	}
	if yyb1488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv1491 := &x.ListMeta
		yym1492 := z.DecBinary()
		_ = yym1492
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1491) {
		} else {
			z.DecFallback(yyv1491, false)
		}
	}
	yyj1488++
	if yyhl1488 {
		yyb1488 = yyj1488 > l
	} else {
		yyb1488 = r.CheckBreak()
	}
	if yyb1488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1493 := &x.Items
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else {
			h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1493), d)
		}
	}
	for {
		yyj1488++
		if yyhl1488 {
			yyb1488 = yyj1488 > l
		} else {
			yyb1488 = r.CheckBreak()
		}
		if yyb1488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1495 := z.EncBinary()
		_ = yym1495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1496 := !z.EncBinary()
			yy2arr1496 := z.EncBasicHandle().StructToArray
			var yyq1496 [4]bool
			_, _, _ = yysep1496, yyq1496, yy2arr1496
			const yyr1496 bool = false
			yyq1496[0] = x.Kind != ""
			yyq1496[1] = x.APIVersion != ""
			yyq1496[2] = true
			yyq1496[3] = true
			var yynn1496 int
			if yyr1496 || yy2arr1496 {
				r.EncodeArrayStart(4)
			} else {
				yynn1496 = 0
				for _, b := range yyq1496 {
					if b {
						yynn1496++
					}
				}
				r.EncodeMapStart(yynn1496)
				yynn1496 = 0
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[0] {
					yym1498 := z.EncBinary()
					_ = yym1498
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1499 := z.EncBinary()
					_ = yym1499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[1] {
					yym1501 := z.EncBinary()
					_ = yym1501
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1496[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1502 := z.EncBinary()
					_ = yym1502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[2] {
					yy1504 := &x.ObjectMeta
					yy1504.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1505 := &x.ObjectMeta
					yy1505.CodecEncodeSelf(e)
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1496[3] {
					yy1507 := &x.Spec
					yy1507.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1496[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1508 := &x.Spec
					yy1508.CodecEncodeSelf(e)
				}
			}
			if yyr1496 || yy2arr1496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1509 := z.DecBinary()
	_ = yym1509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1510 := r.ContainerType()
		if yyct1510 == codecSelferValueTypeMap1234 {
			yyl1510 := r.ReadMapStart()
			if yyl1510 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1510, d)
			}
		} else if yyct1510 == codecSelferValueTypeArray1234 {
			yyl1510 := r.ReadArrayStart()
			if yyl1510 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1510, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1511Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1511Slc
	var yyhl1511 bool = l >= 0
	for yyj1511 := 0; ; yyj1511++ {
		if yyhl1511 {
			if yyj1511 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1511Slc = r.DecodeBytes(yys1511Slc, true, true)
		yys1511 := string(yys1511Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1511 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1514 := &x.ObjectMeta
				yyv1514.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkPolicySpec{}
			} else {
				yyv1515 := &x.Spec
				yyv1515.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1511)
		} // end switch yys1511
	} // end for yyj1511
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1516 int
	var yyb1516 bool
	var yyhl1516 bool = l >= 0
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1519 := &x.ObjectMeta
		yyv1519.CodecDecodeSelf(d)
	}
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NetworkPolicySpec{}
	} else {
		yyv1520 := &x.Spec
		yyv1520.CodecDecodeSelf(d)
	}
	for {
		yyj1516++
		if yyhl1516 {
			yyb1516 = yyj1516 > l
		} else {
			yyb1516 = r.CheckBreak()
		}
		if yyb1516 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1516-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1521 := z.EncBinary()
		_ = yym1521
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1522 := !z.EncBinary()
			yy2arr1522 := z.EncBasicHandle().StructToArray
			var yyq1522 [2]bool
			_, _, _ = yysep1522, yyq1522, yy2arr1522
			const yyr1522 bool = false
			yyq1522[1] = len(x.Ingress) != 0
			var yynn1522 int
			if yyr1522 || yy2arr1522 {
				r.EncodeArrayStart(2)
			} else {
				yynn1522 = 1
				for _, b := range yyq1522 {
					if b {
						yynn1522++
					}
				}
				r.EncodeMapStart(yynn1522)
				yynn1522 = 0
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1524 := &x.PodSelector
				yym1525 := z.EncBinary()
				_ = yym1525
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1524) {
				} else {
					z.EncFallback(yy1524)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1526 := &x.PodSelector
				yym1527 := z.EncBinary()
				_ = yym1527
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1526) {
				} else {
					z.EncFallback(yy1526)
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1522[1] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1522[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1530 := z.EncBinary()
						_ = yym1530
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1531 := z.DecBinary()
	_ = yym1531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1532 := r.ContainerType()
		if yyct1532 == codecSelferValueTypeMap1234 {
			yyl1532 := r.ReadMapStart()
			if yyl1532 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1532, d)
			}
		} else if yyct1532 == codecSelferValueTypeArray1234 {
			yyl1532 := r.ReadArrayStart()
			if yyl1532 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1532, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1533Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1533Slc
	var yyhl1533 bool = l >= 0
	for yyj1533 := 0; ; yyj1533++ {
		if yyhl1533 {
			if yyj1533 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1533Slc = r.DecodeBytes(yys1533Slc, true, true)
		yys1533 := string(yys1533Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1533 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				x.PodSelector = pkg1_v1.LabelSelector{}
			} else {
				yyv1534 := &x.PodSelector
				yym1535 := z.DecBinary()
				_ = yym1535
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1534) {
				} else {
					z.DecFallback(yyv1534, false)
				}
			}
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1536 := &x.Ingress
				yym1537 := z.DecBinary()
				_ = yym1537
				if false {
				} else {
					h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1536), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1533)
		} // end switch yys1533
	} // end for yyj1533
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1538 int
	var yyb1538 bool
	var yyhl1538 bool = l >= 0
	yyj1538++
	if yyhl1538 {
		yyb1538 = yyj1538 > l
	} else {
		yyb1538 = r.CheckBreak()
	}
	if yyb1538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSelector = pkg1_v1.LabelSelector{}
	} else {
		yyv1539 := &x.PodSelector
		yym1540 := z.DecBinary()
		_ = yym1540
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1539) {
		} else {
			z.DecFallback(yyv1539, false)
		}
	}
	yyj1538++
	if yyhl1538 {
		yyb1538 = yyj1538 > l
	} else {
		yyb1538 = r.CheckBreak()
	}
	if yyb1538 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1541 := &x.Ingress
		yym1542 := z.DecBinary()
		_ = yym1542
		if false {
		} else {
			h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1541), d)
		}
	}
	for {
		yyj1538++
		if yyhl1538 {
			yyb1538 = yyj1538 > l
		} else {
			yyb1538 = r.CheckBreak()
		}
		if yyb1538 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1538-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyIngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1543 := z.EncBinary()
		_ = yym1543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1544 := !z.EncBinary()
			yy2arr1544 := z.EncBasicHandle().StructToArray
			var yyq1544 [2]bool
			_, _, _ = yysep1544, yyq1544, yy2arr1544
			const yyr1544 bool = false
			yyq1544[0] = len(x.Ports) != 0
			yyq1544[1] = len(x.From) != 0
			var yynn1544 int
			if yyr1544 || yy2arr1544 {
				r.EncodeArrayStart(2)
			} else {
				yynn1544 = 0
				for _, b := range yyq1544 {
					if b {
						yynn1544++
					}
				}
				r.EncodeMapStart(yynn1544)
				yynn1544 = 0
			}
			if yyr1544 || yy2arr1544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1544[0] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1546 := z.EncBinary()
						_ = yym1546
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1544[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1547 := z.EncBinary()
						_ = yym1547
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1544 || yy2arr1544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1544[1] {
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1549 := z.EncBinary()
						_ = yym1549
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1544[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("from"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1550 := z.EncBinary()
						_ = yym1550
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				}
			}
			if yyr1544 || yy2arr1544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyIngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1551 := z.DecBinary()
	_ = yym1551
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1552 := r.ContainerType()
		if yyct1552 == codecSelferValueTypeMap1234 {
			yyl1552 := r.ReadMapStart()
			if yyl1552 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1552, d)
			}
		} else if yyct1552 == codecSelferValueTypeArray1234 {
			yyl1552 := r.ReadArrayStart()
			if yyl1552 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1552, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1553Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1553Slc
	var yyhl1553 bool = l >= 0
	for yyj1553 := 0; ; yyj1553++ {
		if yyhl1553 {
			if yyj1553 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1553Slc = r.DecodeBytes(yys1553Slc, true, true)
		yys1553 := string(yys1553Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1553 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1554 := &x.Ports
				yym1555 := z.DecBinary()
				_ = yym1555
				if false {
				} else {
					h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1554), d)
				}
			}
		case "from":
			if r.TryDecodeAsNil() {
				x.From = nil
			} else {
				yyv1556 := &x.From
				yym1557 := z.DecBinary()
				_ = yym1557
				if false {
				} else {
					h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1556), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1553)
		} // end switch yys1553
	} // end for yyj1553
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1558 int
	var yyb1558 bool
	var yyhl1558 bool = l >= 0
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1559 := &x.Ports
		yym1560 := z.DecBinary()
		_ = yym1560
		if false {
		} else {
			h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1559), d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.From = nil
	} else {
		yyv1561 := &x.From
		yym1562 := z.DecBinary()
		_ = yym1562
		if false {
		} else {
			h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1561), d)
		}
	}
	for {
		yyj1558++
		if yyhl1558 {
			yyb1558 = yyj1558 > l
		} else {
			yyb1558 = r.CheckBreak()
		}
		if yyb1558 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1558-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1563 := z.EncBinary()
		_ = yym1563
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1564 := !z.EncBinary()
			yy2arr1564 := z.EncBasicHandle().StructToArray
			var yyq1564 [2]bool
			_, _, _ = yysep1564, yyq1564, yy2arr1564
			const yyr1564 bool = false
			yyq1564[0] = x.Protocol != nil
			yyq1564[1] = x.Port != nil
			var yynn1564 int
			if yyr1564 || yy2arr1564 {
				r.EncodeArrayStart(2)
			} else {
				yynn1564 = 0
				for _, b := range yyq1564 {
					if b {
						yynn1564++
					}
				}
				r.EncodeMapStart(yynn1564)
				yynn1564 = 0
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[0] {
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1566 := *x.Protocol
						yym1567 := z.EncBinary()
						_ = yym1567
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1566) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1566))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1564[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1568 := *x.Protocol
						yym1569 := z.EncBinary()
						_ = yym1569
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1568) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1568))
						}
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1564[1] {
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1571 := z.EncBinary()
						_ = yym1571
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1571 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1564[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1572 := z.EncBinary()
						_ = yym1572
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1572 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				}
			}
			if yyr1564 || yy2arr1564 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1573 := z.DecBinary()
	_ = yym1573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1574 := r.ContainerType()
		if yyct1574 == codecSelferValueTypeMap1234 {
			yyl1574 := r.ReadMapStart()
			if yyl1574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1574, d)
			}
		} else if yyct1574 == codecSelferValueTypeArray1234 {
			yyl1574 := r.ReadArrayStart()
			if yyl1574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1575Slc
	var yyhl1575 bool = l >= 0
	for yyj1575 := 0; ; yyj1575++ {
		if yyhl1575 {
			if yyj1575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1575Slc = r.DecodeBytes(yys1575Slc, true, true)
		yys1575 := string(yys1575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1575 {
		case "protocol":
			if r.TryDecodeAsNil() {
				if x.Protocol != nil {
					x.Protocol = nil
				}
			} else {
				if x.Protocol == nil {
					x.Protocol = new(pkg2_v1.Protocol)
				}
				x.Protocol.CodecDecodeSelf(d)
			}
		case "port":
			if r.TryDecodeAsNil() {
				if x.Port != nil {
					x.Port = nil
				}
			} else {
				if x.Port == nil {
					x.Port = new(pkg5_intstr.IntOrString)
				}
				yym1578 := z.DecBinary()
				_ = yym1578
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Port) {
				} else if !yym1578 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Port)
				} else {
					z.DecFallback(x.Port, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1575)
		} // end switch yys1575
	} // end for yyj1575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1579 int
	var yyb1579 bool
	var yyhl1579 bool = l >= 0
	yyj1579++
	if yyhl1579 {
		yyb1579 = yyj1579 > l
	} else {
		yyb1579 = r.CheckBreak()
	}
	if yyb1579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Protocol != nil {
			x.Protocol = nil
		}
	} else {
		if x.Protocol == nil {
			x.Protocol = new(pkg2_v1.Protocol)
		}
		x.Protocol.CodecDecodeSelf(d)
	}
	yyj1579++
	if yyhl1579 {
		yyb1579 = yyj1579 > l
	} else {
		yyb1579 = r.CheckBreak()
	}
	if yyb1579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Port != nil {
			x.Port = nil
		}
	} else {
		if x.Port == nil {
			x.Port = new(pkg5_intstr.IntOrString)
		}
		yym1582 := z.DecBinary()
		_ = yym1582
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Port) {
		} else if !yym1582 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Port)
		} else {
			z.DecFallback(x.Port, false)
		}
	}
	for {
		yyj1579++
		if yyhl1579 {
			yyb1579 = yyj1579 > l
		} else {
			yyb1579 = r.CheckBreak()
		}
		if yyb1579 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1579-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPeer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1583 := z.EncBinary()
		_ = yym1583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1584 := !z.EncBinary()
			yy2arr1584 := z.EncBasicHandle().StructToArray
			var yyq1584 [2]bool
			_, _, _ = yysep1584, yyq1584, yy2arr1584
			const yyr1584 bool = false
			yyq1584[0] = x.PodSelector != nil
			yyq1584[1] = x.NamespaceSelector != nil
			var yynn1584 int
			if yyr1584 || yy2arr1584 {
				r.EncodeArrayStart(2)
			} else {
				yynn1584 = 0
				for _, b := range yyq1584 {
					if b {
						yynn1584++
					}
				}
				r.EncodeMapStart(yynn1584)
				yynn1584 = 0
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1584[0] {
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1586 := z.EncBinary()
						_ = yym1586
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1584[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1587 := z.EncBinary()
						_ = yym1587
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1584[1] {
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1589 := z.EncBinary()
						_ = yym1589
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1584[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespaceSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1590 := z.EncBinary()
						_ = yym1590
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				}
			}
			if yyr1584 || yy2arr1584 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPeer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1591 := z.DecBinary()
	_ = yym1591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1592 := r.ContainerType()
		if yyct1592 == codecSelferValueTypeMap1234 {
			yyl1592 := r.ReadMapStart()
			if yyl1592 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1592, d)
			}
		} else if yyct1592 == codecSelferValueTypeArray1234 {
			yyl1592 := r.ReadArrayStart()
			if yyl1592 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1593Slc
	var yyhl1593 bool = l >= 0
	for yyj1593 := 0; ; yyj1593++ {
		if yyhl1593 {
			if yyj1593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1593Slc = r.DecodeBytes(yys1593Slc, true, true)
		yys1593 := string(yys1593Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1593 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				if x.PodSelector != nil {
					x.PodSelector = nil
				}
			} else {
				if x.PodSelector == nil {
					x.PodSelector = new(pkg1_v1.LabelSelector)
				}
				yym1595 := z.DecBinary()
				_ = yym1595
				if false {
				} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
				} else {
					z.DecFallback(x.PodSelector, false)
				}
			}
		case "namespaceSelector":
			if r.TryDecodeAsNil() {
				if x.NamespaceSelector != nil {
					x.NamespaceSelector = nil
				}
			} else {
				if x.NamespaceSelector == nil {
					x.NamespaceSelector = new(pkg1_v1.LabelSelector)
				}
				yym1597 := z.DecBinary()
				_ = yym1597
				if false {
				} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
				} else {
					z.DecFallback(x.NamespaceSelector, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1593)
		} // end switch yys1593
	} // end for yyj1593
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1598 int
	var yyb1598 bool
	var yyhl1598 bool = l >= 0
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodSelector != nil {
			x.PodSelector = nil
		}
	} else {
		if x.PodSelector == nil {
			x.PodSelector = new(pkg1_v1.LabelSelector)
		}
		yym1600 := z.DecBinary()
		_ = yym1600
		if false {
		} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
		} else {
			z.DecFallback(x.PodSelector, false)
		}
	}
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NamespaceSelector != nil {
			x.NamespaceSelector = nil
		}
	} else {
		if x.NamespaceSelector == nil {
			x.NamespaceSelector = new(pkg1_v1.LabelSelector)
		}
		yym1602 := z.DecBinary()
		_ = yym1602
		if false {
		} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
		} else {
			z.DecFallback(x.NamespaceSelector, false)
		}
	}
	for {
		yyj1598++
		if yyhl1598 {
			yyb1598 = yyj1598 > l
		} else {
			yyb1598 = r.CheckBreak()
		}
		if yyb1598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1603 := z.EncBinary()
		_ = yym1603
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1604 := !z.EncBinary()
			yy2arr1604 := z.EncBasicHandle().StructToArray
			var yyq1604 [4]bool
			_, _, _ = yysep1604, yyq1604, yy2arr1604
			const yyr1604 bool = false
			yyq1604[0] = x.Kind != ""
			yyq1604[1] = x.APIVersion != ""
			yyq1604[2] = true
			var yynn1604 int
			if yyr1604 || yy2arr1604 {
				r.EncodeArrayStart(4)
			} else {
				yynn1604 = 1
				for _, b := range yyq1604 {
					if b {
						yynn1604++
					}
				}
				r.EncodeMapStart(yynn1604)
				yynn1604 = 0
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[0] {
					yym1606 := z.EncBinary()
					_ = yym1606
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1604[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1607 := z.EncBinary()
					_ = yym1607
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[1] {
					yym1609 := z.EncBinary()
					_ = yym1609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1604[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1610 := z.EncBinary()
					_ = yym1610
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1604[2] {
					yy1612 := &x.ListMeta
					yym1613 := z.EncBinary()
					_ = yym1613
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1612) {
					} else {
						z.EncFallback(yy1612)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1604[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1614 := &x.ListMeta
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1614) {
					} else {
						z.EncFallback(yy1614)
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1618 := z.EncBinary()
					_ = yym1618
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			}
			if yyr1604 || yy2arr1604 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1619 := z.DecBinary()
	_ = yym1619
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1620 := r.ContainerType()
		if yyct1620 == codecSelferValueTypeMap1234 {
			yyl1620 := r.ReadMapStart()
			if yyl1620 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1620, d)
			}
		} else if yyct1620 == codecSelferValueTypeArray1234 {
			yyl1620 := r.ReadArrayStart()
			if yyl1620 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1620, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1621Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1621Slc
	var yyhl1621 bool = l >= 0
	for yyj1621 := 0; ; yyj1621++ {
		if yyhl1621 {
			if yyj1621 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1621Slc = r.DecodeBytes(yys1621Slc, true, true)
		yys1621 := string(yys1621Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1621 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv1624 := &x.ListMeta
				yym1625 := z.DecBinary()
				_ = yym1625
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1624) {
				} else {
					z.DecFallback(yyv1624, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1626 := &x.Items
				yym1627 := z.DecBinary()
				_ = yym1627
				if false {
				} else {
					h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1626), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1621)
		} // end switch yys1621
	} // end for yyj1621
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1628 int
	var yyb1628 bool
	var yyhl1628 bool = l >= 0
	yyj1628++
	if yyhl1628 {
		yyb1628 = yyj1628 > l
	} else {
		yyb1628 = r.CheckBreak()
	}
	if yyb1628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1628++
	if yyhl1628 {
		yyb1628 = yyj1628 > l
	} else {
		yyb1628 = r.CheckBreak()
	}
	if yyb1628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1628++
	if yyhl1628 {
		yyb1628 = yyj1628 > l
	} else {
		yyb1628 = r.CheckBreak()
	}
	if yyb1628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv1631 := &x.ListMeta
		yym1632 := z.DecBinary()
		_ = yym1632
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1631) {
		} else {
			z.DecFallback(yyv1631, false)
		}
	}
	yyj1628++
	if yyhl1628 {
		yyb1628 = yyj1628 > l
	} else {
		yyb1628 = r.CheckBreak()
	}
	if yyb1628 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1633 := &x.Items
		yym1634 := z.DecBinary()
		_ = yym1634
		if false {
		} else {
			h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1633), d)
		}
	}
	for {
		yyj1628++
		if yyhl1628 {
			yyb1628 = yyj1628 > l
		} else {
			yyb1628 = r.CheckBreak()
		}
		if yyb1628 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1628-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1635 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1636 := &yyv1635
		yy1636.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1637 := *v
	yyh1637, yyl1637 := z.DecSliceHelperStart()
	var yyc1637 bool
	if yyl1637 == 0 {
		if yyv1637 == nil {
			yyv1637 = []CustomMetricTarget{}
			yyc1637 = true
		} else if len(yyv1637) != 0 {
			yyv1637 = yyv1637[:0]
			yyc1637 = true
		}
	} else if yyl1637 > 0 {
		var yyrr1637, yyrl1637 int
		var yyrt1637 bool
		if yyl1637 > cap(yyv1637) {

			yyrg1637 := len(yyv1637) > 0
			yyv21637 := yyv1637
			yyrl1637, yyrt1637 = z.DecInferLen(yyl1637, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1637 {
				if yyrl1637 <= cap(yyv1637) {
					yyv1637 = yyv1637[:yyrl1637]
				} else {
					yyv1637 = make([]CustomMetricTarget, yyrl1637)
				}
			} else {
				yyv1637 = make([]CustomMetricTarget, yyrl1637)
			}
			yyc1637 = true
			yyrr1637 = len(yyv1637)
			if yyrg1637 {
				copy(yyv1637, yyv21637)
			}
		} else if yyl1637 != len(yyv1637) {
			yyv1637 = yyv1637[:yyl1637]
			yyc1637 = true
		}
		yyj1637 := 0
		for ; yyj1637 < yyrr1637; yyj1637++ {
			yyh1637.ElemContainerState(yyj1637)
			if r.TryDecodeAsNil() {
				yyv1637[yyj1637] = CustomMetricTarget{}
			} else {
				yyv1638 := &yyv1637[yyj1637]
				yyv1638.CodecDecodeSelf(d)
			}

		}
		if yyrt1637 {
			for ; yyj1637 < yyl1637; yyj1637++ {
				yyv1637 = append(yyv1637, CustomMetricTarget{})
				yyh1637.ElemContainerState(yyj1637)
				if r.TryDecodeAsNil() {
					yyv1637[yyj1637] = CustomMetricTarget{}
				} else {
					yyv1639 := &yyv1637[yyj1637]
					yyv1639.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1637 := 0
		for ; !r.CheckBreak(); yyj1637++ {

			if yyj1637 >= len(yyv1637) {
				yyv1637 = append(yyv1637, CustomMetricTarget{}) // var yyz1637 CustomMetricTarget
				yyc1637 = true
			}
			yyh1637.ElemContainerState(yyj1637)
			if yyj1637 < len(yyv1637) {
				if r.TryDecodeAsNil() {
					yyv1637[yyj1637] = CustomMetricTarget{}
				} else {
					yyv1640 := &yyv1637[yyj1637]
					yyv1640.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1637 < len(yyv1637) {
			yyv1637 = yyv1637[:yyj1637]
			yyc1637 = true
		} else if yyj1637 == 0 && yyv1637 == nil {
			yyv1637 = []CustomMetricTarget{}
			yyc1637 = true
		}
	}
	yyh1637.End()
	if yyc1637 {
		*v = yyv1637
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1641 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1642 := &yyv1641
		yy1642.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1643 := *v
	yyh1643, yyl1643 := z.DecSliceHelperStart()
	var yyc1643 bool
	if yyl1643 == 0 {
		if yyv1643 == nil {
			yyv1643 = []CustomMetricCurrentStatus{}
			yyc1643 = true
		} else if len(yyv1643) != 0 {
			yyv1643 = yyv1643[:0]
			yyc1643 = true
		}
	} else if yyl1643 > 0 {
		var yyrr1643, yyrl1643 int
		var yyrt1643 bool
		if yyl1643 > cap(yyv1643) {

			yyrg1643 := len(yyv1643) > 0
			yyv21643 := yyv1643
			yyrl1643, yyrt1643 = z.DecInferLen(yyl1643, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1643 {
				if yyrl1643 <= cap(yyv1643) {
					yyv1643 = yyv1643[:yyrl1643]
				} else {
					yyv1643 = make([]CustomMetricCurrentStatus, yyrl1643)
				}
			} else {
				yyv1643 = make([]CustomMetricCurrentStatus, yyrl1643)
			}
			yyc1643 = true
			yyrr1643 = len(yyv1643)
			if yyrg1643 {
				copy(yyv1643, yyv21643)
			}
		} else if yyl1643 != len(yyv1643) {
			yyv1643 = yyv1643[:yyl1643]
			yyc1643 = true
		}
		yyj1643 := 0
		for ; yyj1643 < yyrr1643; yyj1643++ {
			yyh1643.ElemContainerState(yyj1643)
			if r.TryDecodeAsNil() {
				yyv1643[yyj1643] = CustomMetricCurrentStatus{}
			} else {
				yyv1644 := &yyv1643[yyj1643]
				yyv1644.CodecDecodeSelf(d)
			}

		}
		if yyrt1643 {
			for ; yyj1643 < yyl1643; yyj1643++ {
				yyv1643 = append(yyv1643, CustomMetricCurrentStatus{})
				yyh1643.ElemContainerState(yyj1643)
				if r.TryDecodeAsNil() {
					yyv1643[yyj1643] = CustomMetricCurrentStatus{}
				} else {
					yyv1645 := &yyv1643[yyj1643]
					yyv1645.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1643 := 0
		for ; !r.CheckBreak(); yyj1643++ {

			if yyj1643 >= len(yyv1643) {
				yyv1643 = append(yyv1643, CustomMetricCurrentStatus{}) // var yyz1643 CustomMetricCurrentStatus
				yyc1643 = true
			}
			yyh1643.ElemContainerState(yyj1643)
			if yyj1643 < len(yyv1643) {
				if r.TryDecodeAsNil() {
					yyv1643[yyj1643] = CustomMetricCurrentStatus{}
				} else {
					yyv1646 := &yyv1643[yyj1643]
					yyv1646.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1643 < len(yyv1643) {
			yyv1643 = yyv1643[:yyj1643]
			yyc1643 = true
		} else if yyj1643 == 0 && yyv1643 == nil {
			yyv1643 = []CustomMetricCurrentStatus{}
			yyc1643 = true
		}
	}
	yyh1643.End()
	if yyc1643 {
		*v = yyv1643
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1647 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1648 := &yyv1647
		yy1648.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1649 := *v
	yyh1649, yyl1649 := z.DecSliceHelperStart()
	var yyc1649 bool
	if yyl1649 == 0 {
		if yyv1649 == nil {
			yyv1649 = []HorizontalPodAutoscaler{}
			yyc1649 = true
		} else if len(yyv1649) != 0 {
			yyv1649 = yyv1649[:0]
			yyc1649 = true
		}
	} else if yyl1649 > 0 {
		var yyrr1649, yyrl1649 int
		var yyrt1649 bool
		if yyl1649 > cap(yyv1649) {

			yyrg1649 := len(yyv1649) > 0
			yyv21649 := yyv1649
			yyrl1649, yyrt1649 = z.DecInferLen(yyl1649, z.DecBasicHandle().MaxInitLen, 376)
			if yyrt1649 {
				if yyrl1649 <= cap(yyv1649) {
					yyv1649 = yyv1649[:yyrl1649]
				} else {
					yyv1649 = make([]HorizontalPodAutoscaler, yyrl1649)
				}
			} else {
				yyv1649 = make([]HorizontalPodAutoscaler, yyrl1649)
			}
			yyc1649 = true
			yyrr1649 = len(yyv1649)
			if yyrg1649 {
				copy(yyv1649, yyv21649)
			}
		} else if yyl1649 != len(yyv1649) {
			yyv1649 = yyv1649[:yyl1649]
			yyc1649 = true
		}
		yyj1649 := 0
		for ; yyj1649 < yyrr1649; yyj1649++ {
			yyh1649.ElemContainerState(yyj1649)
			if r.TryDecodeAsNil() {
				yyv1649[yyj1649] = HorizontalPodAutoscaler{}
			} else {
				yyv1650 := &yyv1649[yyj1649]
				yyv1650.CodecDecodeSelf(d)
			}

		}
		if yyrt1649 {
			for ; yyj1649 < yyl1649; yyj1649++ {
				yyv1649 = append(yyv1649, HorizontalPodAutoscaler{})
				yyh1649.ElemContainerState(yyj1649)
				if r.TryDecodeAsNil() {
					yyv1649[yyj1649] = HorizontalPodAutoscaler{}
				} else {
					yyv1651 := &yyv1649[yyj1649]
					yyv1651.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1649 := 0
		for ; !r.CheckBreak(); yyj1649++ {

			if yyj1649 >= len(yyv1649) {
				yyv1649 = append(yyv1649, HorizontalPodAutoscaler{}) // var yyz1649 HorizontalPodAutoscaler
				yyc1649 = true
			}
			yyh1649.ElemContainerState(yyj1649)
			if yyj1649 < len(yyv1649) {
				if r.TryDecodeAsNil() {
					yyv1649[yyj1649] = HorizontalPodAutoscaler{}
				} else {
					yyv1652 := &yyv1649[yyj1649]
					yyv1652.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1649 < len(yyv1649) {
			yyv1649 = yyv1649[:yyj1649]
			yyc1649 = true
		} else if yyj1649 == 0 && yyv1649 == nil {
			yyv1649 = []HorizontalPodAutoscaler{}
			yyc1649 = true
		}
	}
	yyh1649.End()
	if yyc1649 {
		*v = yyv1649
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1653 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1654 := &yyv1653
		yy1654.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1655 := *v
	yyh1655, yyl1655 := z.DecSliceHelperStart()
	var yyc1655 bool
	if yyl1655 == 0 {
		if yyv1655 == nil {
			yyv1655 = []APIVersion{}
			yyc1655 = true
		} else if len(yyv1655) != 0 {
			yyv1655 = yyv1655[:0]
			yyc1655 = true
		}
	} else if yyl1655 > 0 {
		var yyrr1655, yyrl1655 int
		var yyrt1655 bool
		if yyl1655 > cap(yyv1655) {

			yyrg1655 := len(yyv1655) > 0
			yyv21655 := yyv1655
			yyrl1655, yyrt1655 = z.DecInferLen(yyl1655, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1655 {
				if yyrl1655 <= cap(yyv1655) {
					yyv1655 = yyv1655[:yyrl1655]
				} else {
					yyv1655 = make([]APIVersion, yyrl1655)
				}
			} else {
				yyv1655 = make([]APIVersion, yyrl1655)
			}
			yyc1655 = true
			yyrr1655 = len(yyv1655)
			if yyrg1655 {
				copy(yyv1655, yyv21655)
			}
		} else if yyl1655 != len(yyv1655) {
			yyv1655 = yyv1655[:yyl1655]
			yyc1655 = true
		}
		yyj1655 := 0
		for ; yyj1655 < yyrr1655; yyj1655++ {
			yyh1655.ElemContainerState(yyj1655)
			if r.TryDecodeAsNil() {
				yyv1655[yyj1655] = APIVersion{}
			} else {
				yyv1656 := &yyv1655[yyj1655]
				yyv1656.CodecDecodeSelf(d)
			}

		}
		if yyrt1655 {
			for ; yyj1655 < yyl1655; yyj1655++ {
				yyv1655 = append(yyv1655, APIVersion{})
				yyh1655.ElemContainerState(yyj1655)
				if r.TryDecodeAsNil() {
					yyv1655[yyj1655] = APIVersion{}
				} else {
					yyv1657 := &yyv1655[yyj1655]
					yyv1657.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1655 := 0
		for ; !r.CheckBreak(); yyj1655++ {

			if yyj1655 >= len(yyv1655) {
				yyv1655 = append(yyv1655, APIVersion{}) // var yyz1655 APIVersion
				yyc1655 = true
			}
			yyh1655.ElemContainerState(yyj1655)
			if yyj1655 < len(yyv1655) {
				if r.TryDecodeAsNil() {
					yyv1655[yyj1655] = APIVersion{}
				} else {
					yyv1658 := &yyv1655[yyj1655]
					yyv1658.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1655 < len(yyv1655) {
			yyv1655 = yyv1655[:yyj1655]
			yyc1655 = true
		} else if yyj1655 == 0 && yyv1655 == nil {
			yyv1655 = []APIVersion{}
			yyc1655 = true
		}
	}
	yyh1655.End()
	if yyc1655 {
		*v = yyv1655
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1659 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1660 := &yyv1659
		yy1660.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1661 := *v
	yyh1661, yyl1661 := z.DecSliceHelperStart()
	var yyc1661 bool
	if yyl1661 == 0 {
		if yyv1661 == nil {
			yyv1661 = []ThirdPartyResource{}
			yyc1661 = true
		} else if len(yyv1661) != 0 {
			yyv1661 = yyv1661[:0]
			yyc1661 = true
		}
	} else if yyl1661 > 0 {
		var yyrr1661, yyrl1661 int
		var yyrt1661 bool
		if yyl1661 > cap(yyv1661) {

			yyrg1661 := len(yyv1661) > 0
			yyv21661 := yyv1661
			yyrl1661, yyrt1661 = z.DecInferLen(yyl1661, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt1661 {
				if yyrl1661 <= cap(yyv1661) {
					yyv1661 = yyv1661[:yyrl1661]
				} else {
					yyv1661 = make([]ThirdPartyResource, yyrl1661)
				}
			} else {
				yyv1661 = make([]ThirdPartyResource, yyrl1661)
			}
			yyc1661 = true
			yyrr1661 = len(yyv1661)
			if yyrg1661 {
				copy(yyv1661, yyv21661)
			}
		} else if yyl1661 != len(yyv1661) {
			yyv1661 = yyv1661[:yyl1661]
			yyc1661 = true
		}
		yyj1661 := 0
		for ; yyj1661 < yyrr1661; yyj1661++ {
			yyh1661.ElemContainerState(yyj1661)
			if r.TryDecodeAsNil() {
				yyv1661[yyj1661] = ThirdPartyResource{}
			} else {
				yyv1662 := &yyv1661[yyj1661]
				yyv1662.CodecDecodeSelf(d)
			}

		}
		if yyrt1661 {
			for ; yyj1661 < yyl1661; yyj1661++ {
				yyv1661 = append(yyv1661, ThirdPartyResource{})
				yyh1661.ElemContainerState(yyj1661)
				if r.TryDecodeAsNil() {
					yyv1661[yyj1661] = ThirdPartyResource{}
				} else {
					yyv1663 := &yyv1661[yyj1661]
					yyv1663.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1661 := 0
		for ; !r.CheckBreak(); yyj1661++ {

			if yyj1661 >= len(yyv1661) {
				yyv1661 = append(yyv1661, ThirdPartyResource{}) // var yyz1661 ThirdPartyResource
				yyc1661 = true
			}
			yyh1661.ElemContainerState(yyj1661)
			if yyj1661 < len(yyv1661) {
				if r.TryDecodeAsNil() {
					yyv1661[yyj1661] = ThirdPartyResource{}
				} else {
					yyv1664 := &yyv1661[yyj1661]
					yyv1664.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1661 < len(yyv1661) {
			yyv1661 = yyv1661[:yyj1661]
			yyc1661 = true
		} else if yyj1661 == 0 && yyv1661 == nil {
			yyv1661 = []ThirdPartyResource{}
			yyc1661 = true
		}
	}
	yyh1661.End()
	if yyc1661 {
		*v = yyv1661
	}
}

func (x codecSelfer1234) encSliceDeploymentCondition(v []DeploymentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1665 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1666 := &yyv1665
		yy1666.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeploymentCondition(v *[]DeploymentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1667 := *v
	yyh1667, yyl1667 := z.DecSliceHelperStart()
	var yyc1667 bool
	if yyl1667 == 0 {
		if yyv1667 == nil {
			yyv1667 = []DeploymentCondition{}
			yyc1667 = true
		} else if len(yyv1667) != 0 {
			yyv1667 = yyv1667[:0]
			yyc1667 = true
		}
	} else if yyl1667 > 0 {
		var yyrr1667, yyrl1667 int
		var yyrt1667 bool
		if yyl1667 > cap(yyv1667) {

			yyrg1667 := len(yyv1667) > 0
			yyv21667 := yyv1667
			yyrl1667, yyrt1667 = z.DecInferLen(yyl1667, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1667 {
				if yyrl1667 <= cap(yyv1667) {
					yyv1667 = yyv1667[:yyrl1667]
				} else {
					yyv1667 = make([]DeploymentCondition, yyrl1667)
				}
			} else {
				yyv1667 = make([]DeploymentCondition, yyrl1667)
			}
			yyc1667 = true
			yyrr1667 = len(yyv1667)
			if yyrg1667 {
				copy(yyv1667, yyv21667)
			}
		} else if yyl1667 != len(yyv1667) {
			yyv1667 = yyv1667[:yyl1667]
			yyc1667 = true
		}
		yyj1667 := 0
		for ; yyj1667 < yyrr1667; yyj1667++ {
			yyh1667.ElemContainerState(yyj1667)
			if r.TryDecodeAsNil() {
				yyv1667[yyj1667] = DeploymentCondition{}
			} else {
				yyv1668 := &yyv1667[yyj1667]
				yyv1668.CodecDecodeSelf(d)
			}

		}
		if yyrt1667 {
			for ; yyj1667 < yyl1667; yyj1667++ {
				yyv1667 = append(yyv1667, DeploymentCondition{})
				yyh1667.ElemContainerState(yyj1667)
				if r.TryDecodeAsNil() {
					yyv1667[yyj1667] = DeploymentCondition{}
				} else {
					yyv1669 := &yyv1667[yyj1667]
					yyv1669.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1667 := 0
		for ; !r.CheckBreak(); yyj1667++ {

			if yyj1667 >= len(yyv1667) {
				yyv1667 = append(yyv1667, DeploymentCondition{}) // var yyz1667 DeploymentCondition
				yyc1667 = true
			}
			yyh1667.ElemContainerState(yyj1667)
			if yyj1667 < len(yyv1667) {
				if r.TryDecodeAsNil() {
					yyv1667[yyj1667] = DeploymentCondition{}
				} else {
					yyv1670 := &yyv1667[yyj1667]
					yyv1670.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1667 < len(yyv1667) {
			yyv1667 = yyv1667[:yyj1667]
			yyc1667 = true
		} else if yyj1667 == 0 && yyv1667 == nil {
			yyv1667 = []DeploymentCondition{}
			yyc1667 = true
		}
	}
	yyh1667.End()
	if yyc1667 {
		*v = yyv1667
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1671 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1672 := &yyv1671
		yy1672.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1673 := *v
	yyh1673, yyl1673 := z.DecSliceHelperStart()
	var yyc1673 bool
	if yyl1673 == 0 {
		if yyv1673 == nil {
			yyv1673 = []Deployment{}
			yyc1673 = true
		} else if len(yyv1673) != 0 {
			yyv1673 = yyv1673[:0]
			yyc1673 = true
		}
	} else if yyl1673 > 0 {
		var yyrr1673, yyrl1673 int
		var yyrt1673 bool
		if yyl1673 > cap(yyv1673) {

			yyrg1673 := len(yyv1673) > 0
			yyv21673 := yyv1673
			yyrl1673, yyrt1673 = z.DecInferLen(yyl1673, z.DecBasicHandle().MaxInitLen, 872)
			if yyrt1673 {
				if yyrl1673 <= cap(yyv1673) {
					yyv1673 = yyv1673[:yyrl1673]
				} else {
					yyv1673 = make([]Deployment, yyrl1673)
				}
			} else {
				yyv1673 = make([]Deployment, yyrl1673)
			}
			yyc1673 = true
			yyrr1673 = len(yyv1673)
			if yyrg1673 {
				copy(yyv1673, yyv21673)
			}
		} else if yyl1673 != len(yyv1673) {
			yyv1673 = yyv1673[:yyl1673]
			yyc1673 = true
		}
		yyj1673 := 0
		for ; yyj1673 < yyrr1673; yyj1673++ {
			yyh1673.ElemContainerState(yyj1673)
			if r.TryDecodeAsNil() {
				yyv1673[yyj1673] = Deployment{}
			} else {
				yyv1674 := &yyv1673[yyj1673]
				yyv1674.CodecDecodeSelf(d)
			}

		}
		if yyrt1673 {
			for ; yyj1673 < yyl1673; yyj1673++ {
				yyv1673 = append(yyv1673, Deployment{})
				yyh1673.ElemContainerState(yyj1673)
				if r.TryDecodeAsNil() {
					yyv1673[yyj1673] = Deployment{}
				} else {
					yyv1675 := &yyv1673[yyj1673]
					yyv1675.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1673 := 0
		for ; !r.CheckBreak(); yyj1673++ {

			if yyj1673 >= len(yyv1673) {
				yyv1673 = append(yyv1673, Deployment{}) // var yyz1673 Deployment
				yyc1673 = true
			}
			yyh1673.ElemContainerState(yyj1673)
			if yyj1673 < len(yyv1673) {
				if r.TryDecodeAsNil() {
					yyv1673[yyj1673] = Deployment{}
				} else {
					yyv1676 := &yyv1673[yyj1673]
					yyv1676.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1673 < len(yyv1673) {
			yyv1673 = yyv1673[:yyj1673]
			yyc1673 = true
		} else if yyj1673 == 0 && yyv1673 == nil {
			yyv1673 = []Deployment{}
			yyc1673 = true
		}
	}
	yyh1673.End()
	if yyc1673 {
		*v = yyv1673
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1677 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1678 := &yyv1677
		yy1678.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1679 := *v
	yyh1679, yyl1679 := z.DecSliceHelperStart()
	var yyc1679 bool
	if yyl1679 == 0 {
		if yyv1679 == nil {
			yyv1679 = []DaemonSet{}
			yyc1679 = true
		} else if len(yyv1679) != 0 {
			yyv1679 = yyv1679[:0]
			yyc1679 = true
		}
	} else if yyl1679 > 0 {
		var yyrr1679, yyrl1679 int
		var yyrt1679 bool
		if yyl1679 > cap(yyv1679) {

			yyrg1679 := len(yyv1679) > 0
			yyv21679 := yyv1679
			yyrl1679, yyrt1679 = z.DecInferLen(yyl1679, z.DecBasicHandle().MaxInitLen, 768)
			if yyrt1679 {
				if yyrl1679 <= cap(yyv1679) {
					yyv1679 = yyv1679[:yyrl1679]
				} else {
					yyv1679 = make([]DaemonSet, yyrl1679)
				}
			} else {
				yyv1679 = make([]DaemonSet, yyrl1679)
			}
			yyc1679 = true
			yyrr1679 = len(yyv1679)
			if yyrg1679 {
				copy(yyv1679, yyv21679)
			}
		} else if yyl1679 != len(yyv1679) {
			yyv1679 = yyv1679[:yyl1679]
			yyc1679 = true
		}
		yyj1679 := 0
		for ; yyj1679 < yyrr1679; yyj1679++ {
			yyh1679.ElemContainerState(yyj1679)
			if r.TryDecodeAsNil() {
				yyv1679[yyj1679] = DaemonSet{}
			} else {
				yyv1680 := &yyv1679[yyj1679]
				yyv1680.CodecDecodeSelf(d)
			}

		}
		if yyrt1679 {
			for ; yyj1679 < yyl1679; yyj1679++ {
				yyv1679 = append(yyv1679, DaemonSet{})
				yyh1679.ElemContainerState(yyj1679)
				if r.TryDecodeAsNil() {
					yyv1679[yyj1679] = DaemonSet{}
				} else {
					yyv1681 := &yyv1679[yyj1679]
					yyv1681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1679 := 0
		for ; !r.CheckBreak(); yyj1679++ {

			if yyj1679 >= len(yyv1679) {
				yyv1679 = append(yyv1679, DaemonSet{}) // var yyz1679 DaemonSet
				yyc1679 = true
			}
			yyh1679.ElemContainerState(yyj1679)
			if yyj1679 < len(yyv1679) {
				if r.TryDecodeAsNil() {
					yyv1679[yyj1679] = DaemonSet{}
				} else {
					yyv1682 := &yyv1679[yyj1679]
					yyv1682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1679 < len(yyv1679) {
			yyv1679 = yyv1679[:yyj1679]
			yyc1679 = true
		} else if yyj1679 == 0 && yyv1679 == nil {
			yyv1679 = []DaemonSet{}
			yyc1679 = true
		}
	}
	yyh1679.End()
	if yyc1679 {
		*v = yyv1679
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1684 := &yyv1683
		yy1684.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1685 := *v
	yyh1685, yyl1685 := z.DecSliceHelperStart()
	var yyc1685 bool
	if yyl1685 == 0 {
		if yyv1685 == nil {
			yyv1685 = []ThirdPartyResourceData{}
			yyc1685 = true
		} else if len(yyv1685) != 0 {
			yyv1685 = yyv1685[:0]
			yyc1685 = true
		}
	} else if yyl1685 > 0 {
		var yyrr1685, yyrl1685 int
		var yyrt1685 bool
		if yyl1685 > cap(yyv1685) {

			yyrg1685 := len(yyv1685) > 0
			yyv21685 := yyv1685
			yyrl1685, yyrt1685 = z.DecInferLen(yyl1685, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt1685 {
				if yyrl1685 <= cap(yyv1685) {
					yyv1685 = yyv1685[:yyrl1685]
				} else {
					yyv1685 = make([]ThirdPartyResourceData, yyrl1685)
				}
			} else {
				yyv1685 = make([]ThirdPartyResourceData, yyrl1685)
			}
			yyc1685 = true
			yyrr1685 = len(yyv1685)
			if yyrg1685 {
				copy(yyv1685, yyv21685)
			}
		} else if yyl1685 != len(yyv1685) {
			yyv1685 = yyv1685[:yyl1685]
			yyc1685 = true
		}
		yyj1685 := 0
		for ; yyj1685 < yyrr1685; yyj1685++ {
			yyh1685.ElemContainerState(yyj1685)
			if r.TryDecodeAsNil() {
				yyv1685[yyj1685] = ThirdPartyResourceData{}
			} else {
				yyv1686 := &yyv1685[yyj1685]
				yyv1686.CodecDecodeSelf(d)
			}

		}
		if yyrt1685 {
			for ; yyj1685 < yyl1685; yyj1685++ {
				yyv1685 = append(yyv1685, ThirdPartyResourceData{})
				yyh1685.ElemContainerState(yyj1685)
				if r.TryDecodeAsNil() {
					yyv1685[yyj1685] = ThirdPartyResourceData{}
				} else {
					yyv1687 := &yyv1685[yyj1685]
					yyv1687.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1685 := 0
		for ; !r.CheckBreak(); yyj1685++ {

			if yyj1685 >= len(yyv1685) {
				yyv1685 = append(yyv1685, ThirdPartyResourceData{}) // var yyz1685 ThirdPartyResourceData
				yyc1685 = true
			}
			yyh1685.ElemContainerState(yyj1685)
			if yyj1685 < len(yyv1685) {
				if r.TryDecodeAsNil() {
					yyv1685[yyj1685] = ThirdPartyResourceData{}
				} else {
					yyv1688 := &yyv1685[yyj1685]
					yyv1688.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1685 < len(yyv1685) {
			yyv1685 = yyv1685[:yyj1685]
			yyc1685 = true
		} else if yyj1685 == 0 && yyv1685 == nil {
			yyv1685 = []ThirdPartyResourceData{}
			yyc1685 = true
		}
	}
	yyh1685.End()
	if yyc1685 {
		*v = yyv1685
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1689 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1690 := &yyv1689
		yy1690.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1691 := *v
	yyh1691, yyl1691 := z.DecSliceHelperStart()
	var yyc1691 bool
	if yyl1691 == 0 {
		if yyv1691 == nil {
			yyv1691 = []Ingress{}
			yyc1691 = true
		} else if len(yyv1691) != 0 {
			yyv1691 = yyv1691[:0]
			yyc1691 = true
		}
	} else if yyl1691 > 0 {
		var yyrr1691, yyrl1691 int
		var yyrt1691 bool
		if yyl1691 > cap(yyv1691) {

			yyrg1691 := len(yyv1691) > 0
			yyv21691 := yyv1691
			yyrl1691, yyrt1691 = z.DecInferLen(yyl1691, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt1691 {
				if yyrl1691 <= cap(yyv1691) {
					yyv1691 = yyv1691[:yyrl1691]
				} else {
					yyv1691 = make([]Ingress, yyrl1691)
				}
			} else {
				yyv1691 = make([]Ingress, yyrl1691)
			}
			yyc1691 = true
			yyrr1691 = len(yyv1691)
			if yyrg1691 {
				copy(yyv1691, yyv21691)
			}
		} else if yyl1691 != len(yyv1691) {
			yyv1691 = yyv1691[:yyl1691]
			yyc1691 = true
		}
		yyj1691 := 0
		for ; yyj1691 < yyrr1691; yyj1691++ {
			yyh1691.ElemContainerState(yyj1691)
			if r.TryDecodeAsNil() {
				yyv1691[yyj1691] = Ingress{}
			} else {
				yyv1692 := &yyv1691[yyj1691]
				yyv1692.CodecDecodeSelf(d)
			}

		}
		if yyrt1691 {
			for ; yyj1691 < yyl1691; yyj1691++ {
				yyv1691 = append(yyv1691, Ingress{})
				yyh1691.ElemContainerState(yyj1691)
				if r.TryDecodeAsNil() {
					yyv1691[yyj1691] = Ingress{}
				} else {
					yyv1693 := &yyv1691[yyj1691]
					yyv1693.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1691 := 0
		for ; !r.CheckBreak(); yyj1691++ {

			if yyj1691 >= len(yyv1691) {
				yyv1691 = append(yyv1691, Ingress{}) // var yyz1691 Ingress
				yyc1691 = true
			}
			yyh1691.ElemContainerState(yyj1691)
			if yyj1691 < len(yyv1691) {
				if r.TryDecodeAsNil() {
					yyv1691[yyj1691] = Ingress{}
				} else {
					yyv1694 := &yyv1691[yyj1691]
					yyv1694.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1691 < len(yyv1691) {
			yyv1691 = yyv1691[:yyj1691]
			yyc1691 = true
		} else if yyj1691 == 0 && yyv1691 == nil {
			yyv1691 = []Ingress{}
			yyc1691 = true
		}
	}
	yyh1691.End()
	if yyc1691 {
		*v = yyv1691
	}
}

func (x codecSelfer1234) encSliceIngressTLS(v []IngressTLS, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1695 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1696 := &yyv1695
		yy1696.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressTLS(v *[]IngressTLS, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1697 := *v
	yyh1697, yyl1697 := z.DecSliceHelperStart()
	var yyc1697 bool
	if yyl1697 == 0 {
		if yyv1697 == nil {
			yyv1697 = []IngressTLS{}
			yyc1697 = true
		} else if len(yyv1697) != 0 {
			yyv1697 = yyv1697[:0]
			yyc1697 = true
		}
	} else if yyl1697 > 0 {
		var yyrr1697, yyrl1697 int
		var yyrt1697 bool
		if yyl1697 > cap(yyv1697) {

			yyrg1697 := len(yyv1697) > 0
			yyv21697 := yyv1697
			yyrl1697, yyrt1697 = z.DecInferLen(yyl1697, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1697 {
				if yyrl1697 <= cap(yyv1697) {
					yyv1697 = yyv1697[:yyrl1697]
				} else {
					yyv1697 = make([]IngressTLS, yyrl1697)
				}
			} else {
				yyv1697 = make([]IngressTLS, yyrl1697)
			}
			yyc1697 = true
			yyrr1697 = len(yyv1697)
			if yyrg1697 {
				copy(yyv1697, yyv21697)
			}
		} else if yyl1697 != len(yyv1697) {
			yyv1697 = yyv1697[:yyl1697]
			yyc1697 = true
		}
		yyj1697 := 0
		for ; yyj1697 < yyrr1697; yyj1697++ {
			yyh1697.ElemContainerState(yyj1697)
			if r.TryDecodeAsNil() {
				yyv1697[yyj1697] = IngressTLS{}
			} else {
				yyv1698 := &yyv1697[yyj1697]
				yyv1698.CodecDecodeSelf(d)
			}

		}
		if yyrt1697 {
			for ; yyj1697 < yyl1697; yyj1697++ {
				yyv1697 = append(yyv1697, IngressTLS{})
				yyh1697.ElemContainerState(yyj1697)
				if r.TryDecodeAsNil() {
					yyv1697[yyj1697] = IngressTLS{}
				} else {
					yyv1699 := &yyv1697[yyj1697]
					yyv1699.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1697 := 0
		for ; !r.CheckBreak(); yyj1697++ {

			if yyj1697 >= len(yyv1697) {
				yyv1697 = append(yyv1697, IngressTLS{}) // var yyz1697 IngressTLS
				yyc1697 = true
			}
			yyh1697.ElemContainerState(yyj1697)
			if yyj1697 < len(yyv1697) {
				if r.TryDecodeAsNil() {
					yyv1697[yyj1697] = IngressTLS{}
				} else {
					yyv1700 := &yyv1697[yyj1697]
					yyv1700.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1697 < len(yyv1697) {
			yyv1697 = yyv1697[:yyj1697]
			yyc1697 = true
		} else if yyj1697 == 0 && yyv1697 == nil {
			yyv1697 = []IngressTLS{}
			yyc1697 = true
		}
	}
	yyh1697.End()
	if yyc1697 {
		*v = yyv1697
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1701 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1702 := &yyv1701
		yy1702.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1703 := *v
	yyh1703, yyl1703 := z.DecSliceHelperStart()
	var yyc1703 bool
	if yyl1703 == 0 {
		if yyv1703 == nil {
			yyv1703 = []IngressRule{}
			yyc1703 = true
		} else if len(yyv1703) != 0 {
			yyv1703 = yyv1703[:0]
			yyc1703 = true
		}
	} else if yyl1703 > 0 {
		var yyrr1703, yyrl1703 int
		var yyrt1703 bool
		if yyl1703 > cap(yyv1703) {

			yyrg1703 := len(yyv1703) > 0
			yyv21703 := yyv1703
			yyrl1703, yyrt1703 = z.DecInferLen(yyl1703, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1703 {
				if yyrl1703 <= cap(yyv1703) {
					yyv1703 = yyv1703[:yyrl1703]
				} else {
					yyv1703 = make([]IngressRule, yyrl1703)
				}
			} else {
				yyv1703 = make([]IngressRule, yyrl1703)
			}
			yyc1703 = true
			yyrr1703 = len(yyv1703)
			if yyrg1703 {
				copy(yyv1703, yyv21703)
			}
		} else if yyl1703 != len(yyv1703) {
			yyv1703 = yyv1703[:yyl1703]
			yyc1703 = true
		}
		yyj1703 := 0
		for ; yyj1703 < yyrr1703; yyj1703++ {
			yyh1703.ElemContainerState(yyj1703)
			if r.TryDecodeAsNil() {
				yyv1703[yyj1703] = IngressRule{}
			} else {
				yyv1704 := &yyv1703[yyj1703]
				yyv1704.CodecDecodeSelf(d)
			}

		}
		if yyrt1703 {
			for ; yyj1703 < yyl1703; yyj1703++ {
				yyv1703 = append(yyv1703, IngressRule{})
				yyh1703.ElemContainerState(yyj1703)
				if r.TryDecodeAsNil() {
					yyv1703[yyj1703] = IngressRule{}
				} else {
					yyv1705 := &yyv1703[yyj1703]
					yyv1705.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1703 := 0
		for ; !r.CheckBreak(); yyj1703++ {

			if yyj1703 >= len(yyv1703) {
				yyv1703 = append(yyv1703, IngressRule{}) // var yyz1703 IngressRule
				yyc1703 = true
			}
			yyh1703.ElemContainerState(yyj1703)
			if yyj1703 < len(yyv1703) {
				if r.TryDecodeAsNil() {
					yyv1703[yyj1703] = IngressRule{}
				} else {
					yyv1706 := &yyv1703[yyj1703]
					yyv1706.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1703 < len(yyv1703) {
			yyv1703 = yyv1703[:yyj1703]
			yyc1703 = true
		} else if yyj1703 == 0 && yyv1703 == nil {
			yyv1703 = []IngressRule{}
			yyc1703 = true
		}
	}
	yyh1703.End()
	if yyc1703 {
		*v = yyv1703
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1707 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1708 := &yyv1707
		yy1708.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1709 := *v
	yyh1709, yyl1709 := z.DecSliceHelperStart()
	var yyc1709 bool
	if yyl1709 == 0 {
		if yyv1709 == nil {
			yyv1709 = []HTTPIngressPath{}
			yyc1709 = true
		} else if len(yyv1709) != 0 {
			yyv1709 = yyv1709[:0]
			yyc1709 = true
		}
	} else if yyl1709 > 0 {
		var yyrr1709, yyrl1709 int
		var yyrt1709 bool
		if yyl1709 > cap(yyv1709) {

			yyrg1709 := len(yyv1709) > 0
			yyv21709 := yyv1709
			yyrl1709, yyrt1709 = z.DecInferLen(yyl1709, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1709 {
				if yyrl1709 <= cap(yyv1709) {
					yyv1709 = yyv1709[:yyrl1709]
				} else {
					yyv1709 = make([]HTTPIngressPath, yyrl1709)
				}
			} else {
				yyv1709 = make([]HTTPIngressPath, yyrl1709)
			}
			yyc1709 = true
			yyrr1709 = len(yyv1709)
			if yyrg1709 {
				copy(yyv1709, yyv21709)
			}
		} else if yyl1709 != len(yyv1709) {
			yyv1709 = yyv1709[:yyl1709]
			yyc1709 = true
		}
		yyj1709 := 0
		for ; yyj1709 < yyrr1709; yyj1709++ {
			yyh1709.ElemContainerState(yyj1709)
			if r.TryDecodeAsNil() {
				yyv1709[yyj1709] = HTTPIngressPath{}
			} else {
				yyv1710 := &yyv1709[yyj1709]
				yyv1710.CodecDecodeSelf(d)
			}

		}
		if yyrt1709 {
			for ; yyj1709 < yyl1709; yyj1709++ {
				yyv1709 = append(yyv1709, HTTPIngressPath{})
				yyh1709.ElemContainerState(yyj1709)
				if r.TryDecodeAsNil() {
					yyv1709[yyj1709] = HTTPIngressPath{}
				} else {
					yyv1711 := &yyv1709[yyj1709]
					yyv1711.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1709 := 0
		for ; !r.CheckBreak(); yyj1709++ {

			if yyj1709 >= len(yyv1709) {
				yyv1709 = append(yyv1709, HTTPIngressPath{}) // var yyz1709 HTTPIngressPath
				yyc1709 = true
			}
			yyh1709.ElemContainerState(yyj1709)
			if yyj1709 < len(yyv1709) {
				if r.TryDecodeAsNil() {
					yyv1709[yyj1709] = HTTPIngressPath{}
				} else {
					yyv1712 := &yyv1709[yyj1709]
					yyv1712.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1709 < len(yyv1709) {
			yyv1709 = yyv1709[:yyj1709]
			yyc1709 = true
		} else if yyj1709 == 0 && yyv1709 == nil {
			yyv1709 = []HTTPIngressPath{}
			yyc1709 = true
		}
	}
	yyh1709.End()
	if yyc1709 {
		*v = yyv1709
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1713 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1714 := &yyv1713
		yy1714.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1715 := *v
	yyh1715, yyl1715 := z.DecSliceHelperStart()
	var yyc1715 bool
	if yyl1715 == 0 {
		if yyv1715 == nil {
			yyv1715 = []ReplicaSet{}
			yyc1715 = true
		} else if len(yyv1715) != 0 {
			yyv1715 = yyv1715[:0]
			yyc1715 = true
		}
	} else if yyl1715 > 0 {
		var yyrr1715, yyrl1715 int
		var yyrt1715 bool
		if yyl1715 > cap(yyv1715) {

			yyrg1715 := len(yyv1715) > 0
			yyv21715 := yyv1715
			yyrl1715, yyrt1715 = z.DecInferLen(yyl1715, z.DecBasicHandle().MaxInitLen, 808)
			if yyrt1715 {
				if yyrl1715 <= cap(yyv1715) {
					yyv1715 = yyv1715[:yyrl1715]
				} else {
					yyv1715 = make([]ReplicaSet, yyrl1715)
				}
			} else {
				yyv1715 = make([]ReplicaSet, yyrl1715)
			}
			yyc1715 = true
			yyrr1715 = len(yyv1715)
			if yyrg1715 {
				copy(yyv1715, yyv21715)
			}
		} else if yyl1715 != len(yyv1715) {
			yyv1715 = yyv1715[:yyl1715]
			yyc1715 = true
		}
		yyj1715 := 0
		for ; yyj1715 < yyrr1715; yyj1715++ {
			yyh1715.ElemContainerState(yyj1715)
			if r.TryDecodeAsNil() {
				yyv1715[yyj1715] = ReplicaSet{}
			} else {
				yyv1716 := &yyv1715[yyj1715]
				yyv1716.CodecDecodeSelf(d)
			}

		}
		if yyrt1715 {
			for ; yyj1715 < yyl1715; yyj1715++ {
				yyv1715 = append(yyv1715, ReplicaSet{})
				yyh1715.ElemContainerState(yyj1715)
				if r.TryDecodeAsNil() {
					yyv1715[yyj1715] = ReplicaSet{}
				} else {
					yyv1717 := &yyv1715[yyj1715]
					yyv1717.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1715 := 0
		for ; !r.CheckBreak(); yyj1715++ {

			if yyj1715 >= len(yyv1715) {
				yyv1715 = append(yyv1715, ReplicaSet{}) // var yyz1715 ReplicaSet
				yyc1715 = true
			}
			yyh1715.ElemContainerState(yyj1715)
			if yyj1715 < len(yyv1715) {
				if r.TryDecodeAsNil() {
					yyv1715[yyj1715] = ReplicaSet{}
				} else {
					yyv1718 := &yyv1715[yyj1715]
					yyv1718.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1715 < len(yyv1715) {
			yyv1715 = yyv1715[:yyj1715]
			yyc1715 = true
		} else if yyj1715 == 0 && yyv1715 == nil {
			yyv1715 = []ReplicaSet{}
			yyc1715 = true
		}
	}
	yyh1715.End()
	if yyc1715 {
		*v = yyv1715
	}
}

func (x codecSelfer1234) encSliceReplicaSetCondition(v []ReplicaSetCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1719 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1720 := &yyv1719
		yy1720.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSetCondition(v *[]ReplicaSetCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1721 := *v
	yyh1721, yyl1721 := z.DecSliceHelperStart()
	var yyc1721 bool
	if yyl1721 == 0 {
		if yyv1721 == nil {
			yyv1721 = []ReplicaSetCondition{}
			yyc1721 = true
		} else if len(yyv1721) != 0 {
			yyv1721 = yyv1721[:0]
			yyc1721 = true
		}
	} else if yyl1721 > 0 {
		var yyrr1721, yyrl1721 int
		var yyrt1721 bool
		if yyl1721 > cap(yyv1721) {

			yyrg1721 := len(yyv1721) > 0
			yyv21721 := yyv1721
			yyrl1721, yyrt1721 = z.DecInferLen(yyl1721, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt1721 {
				if yyrl1721 <= cap(yyv1721) {
					yyv1721 = yyv1721[:yyrl1721]
				} else {
					yyv1721 = make([]ReplicaSetCondition, yyrl1721)
				}
			} else {
				yyv1721 = make([]ReplicaSetCondition, yyrl1721)
			}
			yyc1721 = true
			yyrr1721 = len(yyv1721)
			if yyrg1721 {
				copy(yyv1721, yyv21721)
			}
		} else if yyl1721 != len(yyv1721) {
			yyv1721 = yyv1721[:yyl1721]
			yyc1721 = true
		}
		yyj1721 := 0
		for ; yyj1721 < yyrr1721; yyj1721++ {
			yyh1721.ElemContainerState(yyj1721)
			if r.TryDecodeAsNil() {
				yyv1721[yyj1721] = ReplicaSetCondition{}
			} else {
				yyv1722 := &yyv1721[yyj1721]
				yyv1722.CodecDecodeSelf(d)
			}

		}
		if yyrt1721 {
			for ; yyj1721 < yyl1721; yyj1721++ {
				yyv1721 = append(yyv1721, ReplicaSetCondition{})
				yyh1721.ElemContainerState(yyj1721)
				if r.TryDecodeAsNil() {
					yyv1721[yyj1721] = ReplicaSetCondition{}
				} else {
					yyv1723 := &yyv1721[yyj1721]
					yyv1723.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1721 := 0
		for ; !r.CheckBreak(); yyj1721++ {

			if yyj1721 >= len(yyv1721) {
				yyv1721 = append(yyv1721, ReplicaSetCondition{}) // var yyz1721 ReplicaSetCondition
				yyc1721 = true
			}
			yyh1721.ElemContainerState(yyj1721)
			if yyj1721 < len(yyv1721) {
				if r.TryDecodeAsNil() {
					yyv1721[yyj1721] = ReplicaSetCondition{}
				} else {
					yyv1724 := &yyv1721[yyj1721]
					yyv1724.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1721 < len(yyv1721) {
			yyv1721 = yyv1721[:yyj1721]
			yyc1721 = true
		} else if yyj1721 == 0 && yyv1721 == nil {
			yyv1721 = []ReplicaSetCondition{}
			yyc1721 = true
		}
	}
	yyh1721.End()
	if yyc1721 {
		*v = yyv1721
	}
}

func (x codecSelfer1234) encSlicev1_Capability(v []pkg2_v1.Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1725 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yym1726 := z.EncBinary()
		_ = yym1726
		if false {
		} else if z.HasExtensions() && z.EncExt(yyv1725) {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyv1725))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicev1_Capability(v *[]pkg2_v1.Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1727 := *v
	yyh1727, yyl1727 := z.DecSliceHelperStart()
	var yyc1727 bool
	if yyl1727 == 0 {
		if yyv1727 == nil {
			yyv1727 = []pkg2_v1.Capability{}
			yyc1727 = true
		} else if len(yyv1727) != 0 {
			yyv1727 = yyv1727[:0]
			yyc1727 = true
		}
	} else if yyl1727 > 0 {
		var yyrr1727, yyrl1727 int
		var yyrt1727 bool
		if yyl1727 > cap(yyv1727) {

			yyrl1727, yyrt1727 = z.DecInferLen(yyl1727, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1727 {
				if yyrl1727 <= cap(yyv1727) {
					yyv1727 = yyv1727[:yyrl1727]
				} else {
					yyv1727 = make([]pkg2_v1.Capability, yyrl1727)
				}
			} else {
				yyv1727 = make([]pkg2_v1.Capability, yyrl1727)
			}
			yyc1727 = true
			yyrr1727 = len(yyv1727)
		} else if yyl1727 != len(yyv1727) {
			yyv1727 = yyv1727[:yyl1727]
			yyc1727 = true
		}
		yyj1727 := 0
		for ; yyj1727 < yyrr1727; yyj1727++ {
			yyh1727.ElemContainerState(yyj1727)
			if r.TryDecodeAsNil() {
				yyv1727[yyj1727] = ""
			} else {
				yyv1727[yyj1727] = pkg2_v1.Capability(r.DecodeString())
			}

		}
		if yyrt1727 {
			for ; yyj1727 < yyl1727; yyj1727++ {
				yyv1727 = append(yyv1727, "")
				yyh1727.ElemContainerState(yyj1727)
				if r.TryDecodeAsNil() {
					yyv1727[yyj1727] = ""
				} else {
					yyv1727[yyj1727] = pkg2_v1.Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj1727 := 0
		for ; !r.CheckBreak(); yyj1727++ {

			if yyj1727 >= len(yyv1727) {
				yyv1727 = append(yyv1727, "") // var yyz1727 pkg2_v1.Capability
				yyc1727 = true
			}
			yyh1727.ElemContainerState(yyj1727)
			if yyj1727 < len(yyv1727) {
				if r.TryDecodeAsNil() {
					yyv1727[yyj1727] = ""
				} else {
					yyv1727[yyj1727] = pkg2_v1.Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1727 < len(yyv1727) {
			yyv1727 = yyv1727[:yyj1727]
			yyc1727 = true
		} else if yyj1727 == 0 && yyv1727 == nil {
			yyv1727 = []pkg2_v1.Capability{}
			yyc1727 = true
		}
	}
	yyh1727.End()
	if yyc1727 {
		*v = yyv1727
	}
}

func (x codecSelfer1234) encSliceFSType(v []FSType, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1731 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv1731.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFSType(v *[]FSType, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1732 := *v
	yyh1732, yyl1732 := z.DecSliceHelperStart()
	var yyc1732 bool
	if yyl1732 == 0 {
		if yyv1732 == nil {
			yyv1732 = []FSType{}
			yyc1732 = true
		} else if len(yyv1732) != 0 {
			yyv1732 = yyv1732[:0]
			yyc1732 = true
		}
	} else if yyl1732 > 0 {
		var yyrr1732, yyrl1732 int
		var yyrt1732 bool
		if yyl1732 > cap(yyv1732) {

			yyrl1732, yyrt1732 = z.DecInferLen(yyl1732, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1732 {
				if yyrl1732 <= cap(yyv1732) {
					yyv1732 = yyv1732[:yyrl1732]
				} else {
					yyv1732 = make([]FSType, yyrl1732)
				}
			} else {
				yyv1732 = make([]FSType, yyrl1732)
			}
			yyc1732 = true
			yyrr1732 = len(yyv1732)
		} else if yyl1732 != len(yyv1732) {
			yyv1732 = yyv1732[:yyl1732]
			yyc1732 = true
		}
		yyj1732 := 0
		for ; yyj1732 < yyrr1732; yyj1732++ {
			yyh1732.ElemContainerState(yyj1732)
			if r.TryDecodeAsNil() {
				yyv1732[yyj1732] = ""
			} else {
				yyv1732[yyj1732] = FSType(r.DecodeString())
			}

		}
		if yyrt1732 {
			for ; yyj1732 < yyl1732; yyj1732++ {
				yyv1732 = append(yyv1732, "")
				yyh1732.ElemContainerState(yyj1732)
				if r.TryDecodeAsNil() {
					yyv1732[yyj1732] = ""
				} else {
					yyv1732[yyj1732] = FSType(r.DecodeString())
				}

			}
		}

	} else {
		yyj1732 := 0
		for ; !r.CheckBreak(); yyj1732++ {

			if yyj1732 >= len(yyv1732) {
				yyv1732 = append(yyv1732, "") // var yyz1732 FSType
				yyc1732 = true
			}
			yyh1732.ElemContainerState(yyj1732)
			if yyj1732 < len(yyv1732) {
				if r.TryDecodeAsNil() {
					yyv1732[yyj1732] = ""
				} else {
					yyv1732[yyj1732] = FSType(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1732 < len(yyv1732) {
			yyv1732 = yyv1732[:yyj1732]
			yyc1732 = true
		} else if yyj1732 == 0 && yyv1732 == nil {
			yyv1732 = []FSType{}
			yyc1732 = true
		}
	}
	yyh1732.End()
	if yyc1732 {
		*v = yyv1732
	}
}

func (x codecSelfer1234) encSliceHostPortRange(v []HostPortRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1736 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1737 := &yyv1736
		yy1737.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHostPortRange(v *[]HostPortRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1738 := *v
	yyh1738, yyl1738 := z.DecSliceHelperStart()
	var yyc1738 bool
	if yyl1738 == 0 {
		if yyv1738 == nil {
			yyv1738 = []HostPortRange{}
			yyc1738 = true
		} else if len(yyv1738) != 0 {
			yyv1738 = yyv1738[:0]
			yyc1738 = true
		}
	} else if yyl1738 > 0 {
		var yyrr1738, yyrl1738 int
		var yyrt1738 bool
		if yyl1738 > cap(yyv1738) {

			yyrg1738 := len(yyv1738) > 0
			yyv21738 := yyv1738
			yyrl1738, yyrt1738 = z.DecInferLen(yyl1738, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1738 {
				if yyrl1738 <= cap(yyv1738) {
					yyv1738 = yyv1738[:yyrl1738]
				} else {
					yyv1738 = make([]HostPortRange, yyrl1738)
				}
			} else {
				yyv1738 = make([]HostPortRange, yyrl1738)
			}
			yyc1738 = true
			yyrr1738 = len(yyv1738)
			if yyrg1738 {
				copy(yyv1738, yyv21738)
			}
		} else if yyl1738 != len(yyv1738) {
			yyv1738 = yyv1738[:yyl1738]
			yyc1738 = true
		}
		yyj1738 := 0
		for ; yyj1738 < yyrr1738; yyj1738++ {
			yyh1738.ElemContainerState(yyj1738)
			if r.TryDecodeAsNil() {
				yyv1738[yyj1738] = HostPortRange{}
			} else {
				yyv1739 := &yyv1738[yyj1738]
				yyv1739.CodecDecodeSelf(d)
			}

		}
		if yyrt1738 {
			for ; yyj1738 < yyl1738; yyj1738++ {
				yyv1738 = append(yyv1738, HostPortRange{})
				yyh1738.ElemContainerState(yyj1738)
				if r.TryDecodeAsNil() {
					yyv1738[yyj1738] = HostPortRange{}
				} else {
					yyv1740 := &yyv1738[yyj1738]
					yyv1740.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1738 := 0
		for ; !r.CheckBreak(); yyj1738++ {

			if yyj1738 >= len(yyv1738) {
				yyv1738 = append(yyv1738, HostPortRange{}) // var yyz1738 HostPortRange
				yyc1738 = true
			}
			yyh1738.ElemContainerState(yyj1738)
			if yyj1738 < len(yyv1738) {
				if r.TryDecodeAsNil() {
					yyv1738[yyj1738] = HostPortRange{}
				} else {
					yyv1741 := &yyv1738[yyj1738]
					yyv1741.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1738 < len(yyv1738) {
			yyv1738 = yyv1738[:yyj1738]
			yyc1738 = true
		} else if yyj1738 == 0 && yyv1738 == nil {
			yyv1738 = []HostPortRange{}
			yyc1738 = true
		}
	}
	yyh1738.End()
	if yyc1738 {
		*v = yyv1738
	}
}

func (x codecSelfer1234) encSliceIDRange(v []IDRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1742 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1743 := &yyv1742
		yy1743.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIDRange(v *[]IDRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1744 := *v
	yyh1744, yyl1744 := z.DecSliceHelperStart()
	var yyc1744 bool
	if yyl1744 == 0 {
		if yyv1744 == nil {
			yyv1744 = []IDRange{}
			yyc1744 = true
		} else if len(yyv1744) != 0 {
			yyv1744 = yyv1744[:0]
			yyc1744 = true
		}
	} else if yyl1744 > 0 {
		var yyrr1744, yyrl1744 int
		var yyrt1744 bool
		if yyl1744 > cap(yyv1744) {

			yyrg1744 := len(yyv1744) > 0
			yyv21744 := yyv1744
			yyrl1744, yyrt1744 = z.DecInferLen(yyl1744, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1744 {
				if yyrl1744 <= cap(yyv1744) {
					yyv1744 = yyv1744[:yyrl1744]
				} else {
					yyv1744 = make([]IDRange, yyrl1744)
				}
			} else {
				yyv1744 = make([]IDRange, yyrl1744)
			}
			yyc1744 = true
			yyrr1744 = len(yyv1744)
			if yyrg1744 {
				copy(yyv1744, yyv21744)
			}
		} else if yyl1744 != len(yyv1744) {
			yyv1744 = yyv1744[:yyl1744]
			yyc1744 = true
		}
		yyj1744 := 0
		for ; yyj1744 < yyrr1744; yyj1744++ {
			yyh1744.ElemContainerState(yyj1744)
			if r.TryDecodeAsNil() {
				yyv1744[yyj1744] = IDRange{}
			} else {
				yyv1745 := &yyv1744[yyj1744]
				yyv1745.CodecDecodeSelf(d)
			}

		}
		if yyrt1744 {
			for ; yyj1744 < yyl1744; yyj1744++ {
				yyv1744 = append(yyv1744, IDRange{})
				yyh1744.ElemContainerState(yyj1744)
				if r.TryDecodeAsNil() {
					yyv1744[yyj1744] = IDRange{}
				} else {
					yyv1746 := &yyv1744[yyj1744]
					yyv1746.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1744 := 0
		for ; !r.CheckBreak(); yyj1744++ {

			if yyj1744 >= len(yyv1744) {
				yyv1744 = append(yyv1744, IDRange{}) // var yyz1744 IDRange
				yyc1744 = true
			}
			yyh1744.ElemContainerState(yyj1744)
			if yyj1744 < len(yyv1744) {
				if r.TryDecodeAsNil() {
					yyv1744[yyj1744] = IDRange{}
				} else {
					yyv1747 := &yyv1744[yyj1744]
					yyv1747.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1744 < len(yyv1744) {
			yyv1744 = yyv1744[:yyj1744]
			yyc1744 = true
		} else if yyj1744 == 0 && yyv1744 == nil {
			yyv1744 = []IDRange{}
			yyc1744 = true
		}
	}
	yyh1744.End()
	if yyc1744 {
		*v = yyv1744
	}
}

func (x codecSelfer1234) encSlicePodSecurityPolicy(v []PodSecurityPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1748 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1749 := &yyv1748
		yy1749.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodSecurityPolicy(v *[]PodSecurityPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1750 := *v
	yyh1750, yyl1750 := z.DecSliceHelperStart()
	var yyc1750 bool
	if yyl1750 == 0 {
		if yyv1750 == nil {
			yyv1750 = []PodSecurityPolicy{}
			yyc1750 = true
		} else if len(yyv1750) != 0 {
			yyv1750 = yyv1750[:0]
			yyc1750 = true
		}
	} else if yyl1750 > 0 {
		var yyrr1750, yyrl1750 int
		var yyrt1750 bool
		if yyl1750 > cap(yyv1750) {

			yyrg1750 := len(yyv1750) > 0
			yyv21750 := yyv1750
			yyrl1750, yyrt1750 = z.DecInferLen(yyl1750, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt1750 {
				if yyrl1750 <= cap(yyv1750) {
					yyv1750 = yyv1750[:yyrl1750]
				} else {
					yyv1750 = make([]PodSecurityPolicy, yyrl1750)
				}
			} else {
				yyv1750 = make([]PodSecurityPolicy, yyrl1750)
			}
			yyc1750 = true
			yyrr1750 = len(yyv1750)
			if yyrg1750 {
				copy(yyv1750, yyv21750)
			}
		} else if yyl1750 != len(yyv1750) {
			yyv1750 = yyv1750[:yyl1750]
			yyc1750 = true
		}
		yyj1750 := 0
		for ; yyj1750 < yyrr1750; yyj1750++ {
			yyh1750.ElemContainerState(yyj1750)
			if r.TryDecodeAsNil() {
				yyv1750[yyj1750] = PodSecurityPolicy{}
			} else {
				yyv1751 := &yyv1750[yyj1750]
				yyv1751.CodecDecodeSelf(d)
			}

		}
		if yyrt1750 {
			for ; yyj1750 < yyl1750; yyj1750++ {
				yyv1750 = append(yyv1750, PodSecurityPolicy{})
				yyh1750.ElemContainerState(yyj1750)
				if r.TryDecodeAsNil() {
					yyv1750[yyj1750] = PodSecurityPolicy{}
				} else {
					yyv1752 := &yyv1750[yyj1750]
					yyv1752.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1750 := 0
		for ; !r.CheckBreak(); yyj1750++ {

			if yyj1750 >= len(yyv1750) {
				yyv1750 = append(yyv1750, PodSecurityPolicy{}) // var yyz1750 PodSecurityPolicy
				yyc1750 = true
			}
			yyh1750.ElemContainerState(yyj1750)
			if yyj1750 < len(yyv1750) {
				if r.TryDecodeAsNil() {
					yyv1750[yyj1750] = PodSecurityPolicy{}
				} else {
					yyv1753 := &yyv1750[yyj1750]
					yyv1753.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1750 < len(yyv1750) {
			yyv1750 = yyv1750[:yyj1750]
			yyc1750 = true
		} else if yyj1750 == 0 && yyv1750 == nil {
			yyv1750 = []PodSecurityPolicy{}
			yyc1750 = true
		}
	}
	yyh1750.End()
	if yyc1750 {
		*v = yyv1750
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyIngressRule(v []NetworkPolicyIngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1754 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1755 := &yyv1754
		yy1755.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyIngressRule(v *[]NetworkPolicyIngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1756 := *v
	yyh1756, yyl1756 := z.DecSliceHelperStart()
	var yyc1756 bool
	if yyl1756 == 0 {
		if yyv1756 == nil {
			yyv1756 = []NetworkPolicyIngressRule{}
			yyc1756 = true
		} else if len(yyv1756) != 0 {
			yyv1756 = yyv1756[:0]
			yyc1756 = true
		}
	} else if yyl1756 > 0 {
		var yyrr1756, yyrl1756 int
		var yyrt1756 bool
		if yyl1756 > cap(yyv1756) {

			yyrg1756 := len(yyv1756) > 0
			yyv21756 := yyv1756
			yyrl1756, yyrt1756 = z.DecInferLen(yyl1756, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt1756 {
				if yyrl1756 <= cap(yyv1756) {
					yyv1756 = yyv1756[:yyrl1756]
				} else {
					yyv1756 = make([]NetworkPolicyIngressRule, yyrl1756)
				}
			} else {
				yyv1756 = make([]NetworkPolicyIngressRule, yyrl1756)
			}
			yyc1756 = true
			yyrr1756 = len(yyv1756)
			if yyrg1756 {
				copy(yyv1756, yyv21756)
			}
		} else if yyl1756 != len(yyv1756) {
			yyv1756 = yyv1756[:yyl1756]
			yyc1756 = true
		}
		yyj1756 := 0
		for ; yyj1756 < yyrr1756; yyj1756++ {
			yyh1756.ElemContainerState(yyj1756)
			if r.TryDecodeAsNil() {
				yyv1756[yyj1756] = NetworkPolicyIngressRule{}
			} else {
				yyv1757 := &yyv1756[yyj1756]
				yyv1757.CodecDecodeSelf(d)
			}

		}
		if yyrt1756 {
			for ; yyj1756 < yyl1756; yyj1756++ {
				yyv1756 = append(yyv1756, NetworkPolicyIngressRule{})
				yyh1756.ElemContainerState(yyj1756)
				if r.TryDecodeAsNil() {
					yyv1756[yyj1756] = NetworkPolicyIngressRule{}
				} else {
					yyv1758 := &yyv1756[yyj1756]
					yyv1758.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1756 := 0
		for ; !r.CheckBreak(); yyj1756++ {

			if yyj1756 >= len(yyv1756) {
				yyv1756 = append(yyv1756, NetworkPolicyIngressRule{}) // var yyz1756 NetworkPolicyIngressRule
				yyc1756 = true
			}
			yyh1756.ElemContainerState(yyj1756)
			if yyj1756 < len(yyv1756) {
				if r.TryDecodeAsNil() {
					yyv1756[yyj1756] = NetworkPolicyIngressRule{}
				} else {
					yyv1759 := &yyv1756[yyj1756]
					yyv1759.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1756 < len(yyv1756) {
			yyv1756 = yyv1756[:yyj1756]
			yyc1756 = true
		} else if yyj1756 == 0 && yyv1756 == nil {
			yyv1756 = []NetworkPolicyIngressRule{}
			yyc1756 = true
		}
	}
	yyh1756.End()
	if yyc1756 {
		*v = yyv1756
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPort(v []NetworkPolicyPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1760 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1761 := &yyv1760
		yy1761.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPort(v *[]NetworkPolicyPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1762 := *v
	yyh1762, yyl1762 := z.DecSliceHelperStart()
	var yyc1762 bool
	if yyl1762 == 0 {
		if yyv1762 == nil {
			yyv1762 = []NetworkPolicyPort{}
			yyc1762 = true
		} else if len(yyv1762) != 0 {
			yyv1762 = yyv1762[:0]
			yyc1762 = true
		}
	} else if yyl1762 > 0 {
		var yyrr1762, yyrl1762 int
		var yyrt1762 bool
		if yyl1762 > cap(yyv1762) {

			yyrg1762 := len(yyv1762) > 0
			yyv21762 := yyv1762
			yyrl1762, yyrt1762 = z.DecInferLen(yyl1762, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1762 {
				if yyrl1762 <= cap(yyv1762) {
					yyv1762 = yyv1762[:yyrl1762]
				} else {
					yyv1762 = make([]NetworkPolicyPort, yyrl1762)
				}
			} else {
				yyv1762 = make([]NetworkPolicyPort, yyrl1762)
			}
			yyc1762 = true
			yyrr1762 = len(yyv1762)
			if yyrg1762 {
				copy(yyv1762, yyv21762)
			}
		} else if yyl1762 != len(yyv1762) {
			yyv1762 = yyv1762[:yyl1762]
			yyc1762 = true
		}
		yyj1762 := 0
		for ; yyj1762 < yyrr1762; yyj1762++ {
			yyh1762.ElemContainerState(yyj1762)
			if r.TryDecodeAsNil() {
				yyv1762[yyj1762] = NetworkPolicyPort{}
			} else {
				yyv1763 := &yyv1762[yyj1762]
				yyv1763.CodecDecodeSelf(d)
			}

		}
		if yyrt1762 {
			for ; yyj1762 < yyl1762; yyj1762++ {
				yyv1762 = append(yyv1762, NetworkPolicyPort{})
				yyh1762.ElemContainerState(yyj1762)
				if r.TryDecodeAsNil() {
					yyv1762[yyj1762] = NetworkPolicyPort{}
				} else {
					yyv1764 := &yyv1762[yyj1762]
					yyv1764.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1762 := 0
		for ; !r.CheckBreak(); yyj1762++ {

			if yyj1762 >= len(yyv1762) {
				yyv1762 = append(yyv1762, NetworkPolicyPort{}) // var yyz1762 NetworkPolicyPort
				yyc1762 = true
			}
			yyh1762.ElemContainerState(yyj1762)
			if yyj1762 < len(yyv1762) {
				if r.TryDecodeAsNil() {
					yyv1762[yyj1762] = NetworkPolicyPort{}
				} else {
					yyv1765 := &yyv1762[yyj1762]
					yyv1765.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1762 < len(yyv1762) {
			yyv1762 = yyv1762[:yyj1762]
			yyc1762 = true
		} else if yyj1762 == 0 && yyv1762 == nil {
			yyv1762 = []NetworkPolicyPort{}
			yyc1762 = true
		}
	}
	yyh1762.End()
	if yyc1762 {
		*v = yyv1762
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPeer(v []NetworkPolicyPeer, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1766 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1767 := &yyv1766
		yy1767.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPeer(v *[]NetworkPolicyPeer, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1768 := *v
	yyh1768, yyl1768 := z.DecSliceHelperStart()
	var yyc1768 bool
	if yyl1768 == 0 {
		if yyv1768 == nil {
			yyv1768 = []NetworkPolicyPeer{}
			yyc1768 = true
		} else if len(yyv1768) != 0 {
			yyv1768 = yyv1768[:0]
			yyc1768 = true
		}
	} else if yyl1768 > 0 {
		var yyrr1768, yyrl1768 int
		var yyrt1768 bool
		if yyl1768 > cap(yyv1768) {

			yyrg1768 := len(yyv1768) > 0
			yyv21768 := yyv1768
			yyrl1768, yyrt1768 = z.DecInferLen(yyl1768, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1768 {
				if yyrl1768 <= cap(yyv1768) {
					yyv1768 = yyv1768[:yyrl1768]
				} else {
					yyv1768 = make([]NetworkPolicyPeer, yyrl1768)
				}
			} else {
				yyv1768 = make([]NetworkPolicyPeer, yyrl1768)
			}
			yyc1768 = true
			yyrr1768 = len(yyv1768)
			if yyrg1768 {
				copy(yyv1768, yyv21768)
			}
		} else if yyl1768 != len(yyv1768) {
			yyv1768 = yyv1768[:yyl1768]
			yyc1768 = true
		}
		yyj1768 := 0
		for ; yyj1768 < yyrr1768; yyj1768++ {
			yyh1768.ElemContainerState(yyj1768)
			if r.TryDecodeAsNil() {
				yyv1768[yyj1768] = NetworkPolicyPeer{}
			} else {
				yyv1769 := &yyv1768[yyj1768]
				yyv1769.CodecDecodeSelf(d)
			}

		}
		if yyrt1768 {
			for ; yyj1768 < yyl1768; yyj1768++ {
				yyv1768 = append(yyv1768, NetworkPolicyPeer{})
				yyh1768.ElemContainerState(yyj1768)
				if r.TryDecodeAsNil() {
					yyv1768[yyj1768] = NetworkPolicyPeer{}
				} else {
					yyv1770 := &yyv1768[yyj1768]
					yyv1770.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1768 := 0
		for ; !r.CheckBreak(); yyj1768++ {

			if yyj1768 >= len(yyv1768) {
				yyv1768 = append(yyv1768, NetworkPolicyPeer{}) // var yyz1768 NetworkPolicyPeer
				yyc1768 = true
			}
			yyh1768.ElemContainerState(yyj1768)
			if yyj1768 < len(yyv1768) {
				if r.TryDecodeAsNil() {
					yyv1768[yyj1768] = NetworkPolicyPeer{}
				} else {
					yyv1771 := &yyv1768[yyj1768]
					yyv1771.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1768 < len(yyv1768) {
			yyv1768 = yyv1768[:yyj1768]
			yyc1768 = true
		} else if yyj1768 == 0 && yyv1768 == nil {
			yyv1768 = []NetworkPolicyPeer{}
			yyc1768 = true
		}
	}
	yyh1768.End()
	if yyc1768 {
		*v = yyv1768
	}
}

func (x codecSelfer1234) encSliceNetworkPolicy(v []NetworkPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1772 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1773 := &yyv1772
		yy1773.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicy(v *[]NetworkPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1774 := *v
	yyh1774, yyl1774 := z.DecSliceHelperStart()
	var yyc1774 bool
	if yyl1774 == 0 {
		if yyv1774 == nil {
			yyv1774 = []NetworkPolicy{}
			yyc1774 = true
		} else if len(yyv1774) != 0 {
			yyv1774 = yyv1774[:0]
			yyc1774 = true
		}
	} else if yyl1774 > 0 {
		var yyrr1774, yyrl1774 int
		var yyrt1774 bool
		if yyl1774 > cap(yyv1774) {

			yyrg1774 := len(yyv1774) > 0
			yyv21774 := yyv1774
			yyrl1774, yyrt1774 = z.DecInferLen(yyl1774, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt1774 {
				if yyrl1774 <= cap(yyv1774) {
					yyv1774 = yyv1774[:yyrl1774]
				} else {
					yyv1774 = make([]NetworkPolicy, yyrl1774)
				}
			} else {
				yyv1774 = make([]NetworkPolicy, yyrl1774)
			}
			yyc1774 = true
			yyrr1774 = len(yyv1774)
			if yyrg1774 {
				copy(yyv1774, yyv21774)
			}
		} else if yyl1774 != len(yyv1774) {
			yyv1774 = yyv1774[:yyl1774]
			yyc1774 = true
		}
		yyj1774 := 0
		for ; yyj1774 < yyrr1774; yyj1774++ {
			yyh1774.ElemContainerState(yyj1774)
			if r.TryDecodeAsNil() {
				yyv1774[yyj1774] = NetworkPolicy{}
			} else {
				yyv1775 := &yyv1774[yyj1774]
				yyv1775.CodecDecodeSelf(d)
			}

		}
		if yyrt1774 {
			for ; yyj1774 < yyl1774; yyj1774++ {
				yyv1774 = append(yyv1774, NetworkPolicy{})
				yyh1774.ElemContainerState(yyj1774)
				if r.TryDecodeAsNil() {
					yyv1774[yyj1774] = NetworkPolicy{}
				} else {
					yyv1776 := &yyv1774[yyj1774]
					yyv1776.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1774 := 0
		for ; !r.CheckBreak(); yyj1774++ {

			if yyj1774 >= len(yyv1774) {
				yyv1774 = append(yyv1774, NetworkPolicy{}) // var yyz1774 NetworkPolicy
				yyc1774 = true
			}
			yyh1774.ElemContainerState(yyj1774)
			if yyj1774 < len(yyv1774) {
				if r.TryDecodeAsNil() {
					yyv1774[yyj1774] = NetworkPolicy{}
				} else {
					yyv1777 := &yyv1774[yyj1774]
					yyv1777.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1774 < len(yyv1774) {
			yyv1774 = yyv1774[:yyj1774]
			yyc1774 = true
		} else if yyj1774 == 0 && yyv1774 == nil {
			yyv1774 = []NetworkPolicy{}
			yyc1774 = true
		}
	}
	yyh1774.End()
	if yyc1774 {
		*v = yyv1774
	}
}
