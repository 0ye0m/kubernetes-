/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg2_v1.ObjectMeta
		var v3 pkg3_types.UID
		var v4 pkg6_intstr.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else if z.HasExtensions() && z.EncExt(yy39) {
					} else {
						z.EncFallback(yy39)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy41 := &x.ObjectMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy44 := &x.Spec
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy45 := &x.Spec
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy47 := &x.Status
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy48 := &x.Status
					yy48.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv54 := &x.ObjectMeta
				yym55 := z.DecBinary()
				_ = yym55
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv54) {
				} else {
					z.DecFallback(yyv54, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv56 := &x.Spec
				yyv56.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv57 := &x.Status
				yyv57.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj58 int
	var yyb58 bool
	var yyhl58 bool = l >= 0
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv61 := &x.ObjectMeta
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv61) {
		} else {
			z.DecFallback(yyv61, false)
		}
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv63 := &x.Spec
		yyv63.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv64 := &x.Status
		yyv64.CodecDecodeSelf(d)
	}
	for {
		yyj58++
		if yyhl58 {
			yyb58 = yyj58 > l
		} else {
			yyb58 = r.CheckBreak()
		}
		if yyb58 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj58-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym65 := z.EncBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep66 := !z.EncBinary()
			yy2arr66 := z.EncBasicHandle().StructToArray
			var yyq66 [2]bool
			_, _, _ = yysep66, yyq66, yy2arr66
			const yyr66 bool = false
			yyq66[0] = x.Kind != ""
			yyq66[1] = x.APIVersion != ""
			var yynn66 int
			if yyr66 || yy2arr66 {
				r.EncodeArrayStart(2)
			} else {
				yynn66 = 0
				for _, b := range yyq66 {
					if b {
						yynn66++
					}
				}
				r.EncodeMapStart(yynn66)
				yynn66 = 0
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq66[0] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq66[1] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym73 := z.DecBinary()
	_ = yym73
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct74 := r.ContainerType()
		if yyct74 == codecSelferValueTypeMap1234 {
			yyl74 := r.ReadMapStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl74, d)
			}
		} else if yyct74 == codecSelferValueTypeArray1234 {
			yyl74 := r.ReadArrayStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl74, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys75Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys75Slc
	var yyhl75 bool = l >= 0
	for yyj75 := 0; ; yyj75++ {
		if yyhl75 {
			if yyj75 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys75Slc = r.DecodeBytes(yys75Slc, true, true)
		yys75 := string(yys75Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys75 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys75)
		} // end switch yys75
	} // end for yyj75
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj78 int
	var yyb78 bool
	var yyhl78 bool = l >= 0
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj78++
		if yyhl78 {
			yyb78 = yyj78 > l
		} else {
			yyb78 = r.CheckBreak()
		}
		if yyb78 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj78-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [4]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[0] = x.Kind != ""
			yyq82[1] = x.Name != ""
			yyq82[2] = x.APIVersion != ""
			yyq82[3] = x.Subresource != ""
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(4)
			} else {
				yynn82 = 0
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[0] {
					yym84 := z.EncBinary()
					_ = yym84
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym85 := z.EncBinary()
					_ = yym85
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[1] {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[2] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[3] {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym95 := z.DecBinary()
	_ = yym95
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct96 := r.ContainerType()
		if yyct96 == codecSelferValueTypeMap1234 {
			yyl96 := r.ReadMapStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl96, d)
			}
		} else if yyct96 == codecSelferValueTypeArray1234 {
			yyl96 := r.ReadArrayStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl96, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys97Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys97Slc
	var yyhl97 bool = l >= 0
	for yyj97 := 0; ; yyj97++ {
		if yyhl97 {
			if yyj97 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys97Slc = r.DecodeBytes(yys97Slc, true, true)
		yys97 := string(yys97Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys97 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys97)
		} // end switch yys97
	} // end for yyj97
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj102 int
	var yyb102 bool
	var yyhl102 bool = l >= 0
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj102++
	if yyhl102 {
		yyb102 = yyj102 > l
	} else {
		yyb102 = r.CheckBreak()
	}
	if yyb102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj102++
		if yyhl102 {
			yyb102 = yyj102 > l
		} else {
			yyb102 = r.CheckBreak()
		}
		if yyb102 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj102-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym107 := z.EncBinary()
		_ = yym107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep108 := !z.EncBinary()
			yy2arr108 := z.EncBasicHandle().StructToArray
			var yyq108 [1]bool
			_, _, _ = yysep108, yyq108, yy2arr108
			const yyr108 bool = false
			var yynn108 int
			if yyr108 || yy2arr108 {
				r.EncodeArrayStart(1)
			} else {
				yynn108 = 1
				for _, b := range yyq108 {
					if b {
						yynn108++
					}
				}
				r.EncodeMapStart(yynn108)
				yynn108 = 0
			}
			if yyr108 || yy2arr108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym110 := z.EncBinary()
				_ = yym110
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym111 := z.EncBinary()
				_ = yym111
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr108 || yy2arr108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym112 := z.DecBinary()
	_ = yym112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct113 := r.ContainerType()
		if yyct113 == codecSelferValueTypeMap1234 {
			yyl113 := r.ReadMapStart()
			if yyl113 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl113, d)
			}
		} else if yyct113 == codecSelferValueTypeArray1234 {
			yyl113 := r.ReadArrayStart()
			if yyl113 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys114Slc
	var yyhl114 bool = l >= 0
	for yyj114 := 0; ; yyj114++ {
		if yyhl114 {
			if yyj114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys114Slc = r.DecodeBytes(yys114Slc, true, true)
		yys114 := string(yys114Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys114 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys114)
		} // end switch yys114
	} // end for yyj114
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj116 int
	var yyb116 bool
	var yyhl116 bool = l >= 0
	yyj116++
	if yyhl116 {
		yyb116 = yyj116 > l
	} else {
		yyb116 = r.CheckBreak()
	}
	if yyb116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int32(r.DecodeInt(32))
	}
	for {
		yyj116++
		if yyhl116 {
			yyb116 = yyj116 > l
		} else {
			yyb116 = r.CheckBreak()
		}
		if yyb116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym118 := z.EncBinary()
		_ = yym118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep119 := !z.EncBinary()
			yy2arr119 := z.EncBasicHandle().StructToArray
			var yyq119 [2]bool
			_, _, _ = yysep119, yyq119, yy2arr119
			const yyr119 bool = false
			var yynn119 int
			if yyr119 || yy2arr119 {
				r.EncodeArrayStart(2)
			} else {
				yynn119 = 2
				for _, b := range yyq119 {
					if b {
						yynn119++
					}
				}
				r.EncodeMapStart(yynn119)
				yynn119 = 0
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym121 := z.EncBinary()
				_ = yym121
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym122 := z.EncBinary()
				_ = yym122
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy124 := &x.TargetValue
				yym125 := z.EncBinary()
				_ = yym125
				if false {
				} else if z.HasExtensions() && z.EncExt(yy124) {
				} else if !yym125 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy124)
				} else {
					z.EncFallback(yy124)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy126 := &x.TargetValue
				yym127 := z.EncBinary()
				_ = yym127
				if false {
				} else if z.HasExtensions() && z.EncExt(yy126) {
				} else if !yym127 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy126)
				} else {
					z.EncFallback(yy126)
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct129 := r.ContainerType()
		if yyct129 == codecSelferValueTypeMap1234 {
			yyl129 := r.ReadMapStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl129, d)
			}
		} else if yyct129 == codecSelferValueTypeArray1234 {
			yyl129 := r.ReadArrayStart()
			if yyl129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys130Slc
	var yyhl130 bool = l >= 0
	for yyj130 := 0; ; yyj130++ {
		if yyhl130 {
			if yyj130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys130Slc = r.DecodeBytes(yys130Slc, true, true)
		yys130 := string(yys130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys130 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv132 := &x.TargetValue
				yym133 := z.DecBinary()
				_ = yym133
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv132) {
				} else if !yym133 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv132)
				} else {
					z.DecFallback(yyv132, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys130)
		} // end switch yys130
	} // end for yyj130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj134 int
	var yyb134 bool
	var yyhl134 bool = l >= 0
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv136 := &x.TargetValue
		yym137 := z.DecBinary()
		_ = yym137
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv136) {
		} else if !yym137 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv136)
		} else {
			z.DecFallback(yyv136, false)
		}
	}
	for {
		yyj134++
		if yyhl134 {
			yyb134 = yyj134 > l
		} else {
			yyb134 = r.CheckBreak()
		}
		if yyb134 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj134-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym138 := z.EncBinary()
		_ = yym138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep139 := !z.EncBinary()
			yy2arr139 := z.EncBasicHandle().StructToArray
			var yyq139 [1]bool
			_, _, _ = yysep139, yyq139, yy2arr139
			const yyr139 bool = false
			var yynn139 int
			if yyr139 || yy2arr139 {
				r.EncodeArrayStart(1)
			} else {
				yynn139 = 1
				for _, b := range yyq139 {
					if b {
						yynn139++
					}
				}
				r.EncodeMapStart(yynn139)
				yynn139 = 0
			}
			if yyr139 || yy2arr139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym141 := z.EncBinary()
					_ = yym141
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym142 := z.EncBinary()
					_ = yym142
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr139 || yy2arr139 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym143 := z.DecBinary()
	_ = yym143
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct144 := r.ContainerType()
		if yyct144 == codecSelferValueTypeMap1234 {
			yyl144 := r.ReadMapStart()
			if yyl144 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl144, d)
			}
		} else if yyct144 == codecSelferValueTypeArray1234 {
			yyl144 := r.ReadArrayStart()
			if yyl144 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl144, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys145Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys145Slc
	var yyhl145 bool = l >= 0
	for yyj145 := 0; ; yyj145++ {
		if yyhl145 {
			if yyj145 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys145Slc = r.DecodeBytes(yys145Slc, true, true)
		yys145 := string(yys145Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys145 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv146 := &x.Items
				yym147 := z.DecBinary()
				_ = yym147
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv146), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys145)
		} // end switch yys145
	} // end for yyj145
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj148 int
	var yyb148 bool
	var yyhl148 bool = l >= 0
	yyj148++
	if yyhl148 {
		yyb148 = yyj148 > l
	} else {
		yyb148 = r.CheckBreak()
	}
	if yyb148 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv149 := &x.Items
		yym150 := z.DecBinary()
		_ = yym150
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv149), d)
		}
	}
	for {
		yyj148++
		if yyhl148 {
			yyb148 = yyj148 > l
		} else {
			yyb148 = r.CheckBreak()
		}
		if yyb148 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj148-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym151 := z.EncBinary()
		_ = yym151
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep152 := !z.EncBinary()
			yy2arr152 := z.EncBasicHandle().StructToArray
			var yyq152 [2]bool
			_, _, _ = yysep152, yyq152, yy2arr152
			const yyr152 bool = false
			var yynn152 int
			if yyr152 || yy2arr152 {
				r.EncodeArrayStart(2)
			} else {
				yynn152 = 2
				for _, b := range yyq152 {
					if b {
						yynn152++
					}
				}
				r.EncodeMapStart(yynn152)
				yynn152 = 0
			}
			if yyr152 || yy2arr152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym154 := z.EncBinary()
				_ = yym154
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym155 := z.EncBinary()
				_ = yym155
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr152 || yy2arr152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy157 := &x.CurrentValue
				yym158 := z.EncBinary()
				_ = yym158
				if false {
				} else if z.HasExtensions() && z.EncExt(yy157) {
				} else if !yym158 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy157)
				} else {
					z.EncFallback(yy157)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy159 := &x.CurrentValue
				yym160 := z.EncBinary()
				_ = yym160
				if false {
				} else if z.HasExtensions() && z.EncExt(yy159) {
				} else if !yym160 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy159)
				} else {
					z.EncFallback(yy159)
				}
			}
			if yyr152 || yy2arr152 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym161 := z.DecBinary()
	_ = yym161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct162 := r.ContainerType()
		if yyct162 == codecSelferValueTypeMap1234 {
			yyl162 := r.ReadMapStart()
			if yyl162 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl162, d)
			}
		} else if yyct162 == codecSelferValueTypeArray1234 {
			yyl162 := r.ReadArrayStart()
			if yyl162 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys163Slc
	var yyhl163 bool = l >= 0
	for yyj163 := 0; ; yyj163++ {
		if yyhl163 {
			if yyj163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys163Slc = r.DecodeBytes(yys163Slc, true, true)
		yys163 := string(yys163Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys163 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv165 := &x.CurrentValue
				yym166 := z.DecBinary()
				_ = yym166
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv165) {
				} else if !yym166 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv165)
				} else {
					z.DecFallback(yyv165, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys163)
		} // end switch yys163
	} // end for yyj163
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj167 int
	var yyb167 bool
	var yyhl167 bool = l >= 0
	yyj167++
	if yyhl167 {
		yyb167 = yyj167 > l
	} else {
		yyb167 = r.CheckBreak()
	}
	if yyb167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj167++
	if yyhl167 {
		yyb167 = yyj167 > l
	} else {
		yyb167 = r.CheckBreak()
	}
	if yyb167 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv169 := &x.CurrentValue
		yym170 := z.DecBinary()
		_ = yym170
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv169) {
		} else if !yym170 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv169)
		} else {
			z.DecFallback(yyv169, false)
		}
	}
	for {
		yyj167++
		if yyhl167 {
			yyb167 = yyj167 > l
		} else {
			yyb167 = r.CheckBreak()
		}
		if yyb167 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj167-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym171 := z.EncBinary()
		_ = yym171
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep172 := !z.EncBinary()
			yy2arr172 := z.EncBasicHandle().StructToArray
			var yyq172 [1]bool
			_, _, _ = yysep172, yyq172, yy2arr172
			const yyr172 bool = false
			var yynn172 int
			if yyr172 || yy2arr172 {
				r.EncodeArrayStart(1)
			} else {
				yynn172 = 1
				for _, b := range yyq172 {
					if b {
						yynn172++
					}
				}
				r.EncodeMapStart(yynn172)
				yynn172 = 0
			}
			if yyr172 || yy2arr172 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym174 := z.EncBinary()
					_ = yym174
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym175 := z.EncBinary()
					_ = yym175
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr172 || yy2arr172 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym176 := z.DecBinary()
	_ = yym176
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct177 := r.ContainerType()
		if yyct177 == codecSelferValueTypeMap1234 {
			yyl177 := r.ReadMapStart()
			if yyl177 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl177, d)
			}
		} else if yyct177 == codecSelferValueTypeArray1234 {
			yyl177 := r.ReadArrayStart()
			if yyl177 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl177, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys178Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys178Slc
	var yyhl178 bool = l >= 0
	for yyj178 := 0; ; yyj178++ {
		if yyhl178 {
			if yyj178 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys178Slc = r.DecodeBytes(yys178Slc, true, true)
		yys178 := string(yys178Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys178 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv179 := &x.Items
				yym180 := z.DecBinary()
				_ = yym180
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv179), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys178)
		} // end switch yys178
	} // end for yyj178
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj181 int
	var yyb181 bool
	var yyhl181 bool = l >= 0
	yyj181++
	if yyhl181 {
		yyb181 = yyj181 > l
	} else {
		yyb181 = r.CheckBreak()
	}
	if yyb181 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv182 := &x.Items
		yym183 := z.DecBinary()
		_ = yym183
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv182), d)
		}
	}
	for {
		yyj181++
		if yyhl181 {
			yyb181 = yyj181 > l
		} else {
			yyb181 = r.CheckBreak()
		}
		if yyb181 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj181-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym184 := z.EncBinary()
		_ = yym184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep185 := !z.EncBinary()
			yy2arr185 := z.EncBasicHandle().StructToArray
			var yyq185 [4]bool
			_, _, _ = yysep185, yyq185, yy2arr185
			const yyr185 bool = false
			yyq185[1] = x.MinReplicas != nil
			yyq185[3] = x.CPUUtilization != nil
			var yynn185 int
			if yyr185 || yy2arr185 {
				r.EncodeArrayStart(4)
			} else {
				yynn185 = 2
				for _, b := range yyq185 {
					if b {
						yynn185++
					}
				}
				r.EncodeMapStart(yynn185)
				yynn185 = 0
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy187 := &x.ScaleRef
				yy187.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy188 := &x.ScaleRef
				yy188.CodecEncodeSelf(e)
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq185[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy190 := *x.MinReplicas
						yym191 := z.EncBinary()
						_ = yym191
						if false {
						} else {
							r.EncodeInt(int64(yy190))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq185[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy192 := *x.MinReplicas
						yym193 := z.EncBinary()
						_ = yym193
						if false {
						} else {
							r.EncodeInt(int64(yy192))
						}
					}
				}
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym195 := z.EncBinary()
				_ = yym195
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym196 := z.EncBinary()
				_ = yym196
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq185[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq185[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym198 := z.DecBinary()
	_ = yym198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct199 := r.ContainerType()
		if yyct199 == codecSelferValueTypeMap1234 {
			yyl199 := r.ReadMapStart()
			if yyl199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl199, d)
			}
		} else if yyct199 == codecSelferValueTypeArray1234 {
			yyl199 := r.ReadArrayStart()
			if yyl199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys200Slc
	var yyhl200 bool = l >= 0
	for yyj200 := 0; ; yyj200++ {
		if yyhl200 {
			if yyj200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys200Slc = r.DecodeBytes(yys200Slc, true, true)
		yys200 := string(yys200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys200 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv201 := &x.ScaleRef
				yyv201.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int32)
				}
				yym203 := z.DecBinary()
				_ = yym203
				if false {
				} else {
					*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int32(r.DecodeInt(32))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys200)
		} // end switch yys200
	} // end for yyj200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj206 int
	var yyb206 bool
	var yyhl206 bool = l >= 0
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv207 := &x.ScaleRef
		yyv207.CodecDecodeSelf(d)
	}
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int32)
		}
		yym209 := z.DecBinary()
		_ = yym209
		if false {
		} else {
			*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int32(r.DecodeInt(32))
	}
	yyj206++
	if yyhl206 {
		yyb206 = yyj206 > l
	} else {
		yyb206 = r.CheckBreak()
	}
	if yyb206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj206++
		if yyhl206 {
			yyb206 = yyj206 > l
		} else {
			yyb206 = r.CheckBreak()
		}
		if yyb206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym212 := z.EncBinary()
		_ = yym212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep213 := !z.EncBinary()
			yy2arr213 := z.EncBasicHandle().StructToArray
			var yyq213 [5]bool
			_, _, _ = yysep213, yyq213, yy2arr213
			const yyr213 bool = false
			yyq213[0] = x.ObservedGeneration != nil
			yyq213[1] = x.LastScaleTime != nil
			yyq213[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn213 int
			if yyr213 || yy2arr213 {
				r.EncodeArrayStart(5)
			} else {
				yynn213 = 2
				for _, b := range yyq213 {
					if b {
						yynn213++
					}
				}
				r.EncodeMapStart(yynn213)
				yynn213 = 0
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy215 := *x.ObservedGeneration
						yym216 := z.EncBinary()
						_ = yym216
						if false {
						} else {
							r.EncodeInt(int64(yy215))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq213[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy217 := *x.ObservedGeneration
						yym218 := z.EncBinary()
						_ = yym218
						if false {
						} else {
							r.EncodeInt(int64(yy217))
						}
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym220 := z.EncBinary()
						_ = yym220
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym220 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym220 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq213[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym221 := z.EncBinary()
						_ = yym221
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym221 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym221 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym223 := z.EncBinary()
				_ = yym223
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym224 := z.EncBinary()
				_ = yym224
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym226 := z.EncBinary()
				_ = yym226
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym227 := z.EncBinary()
				_ = yym227
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq213[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy229 := *x.CurrentCPUUtilizationPercentage
						yym230 := z.EncBinary()
						_ = yym230
						if false {
						} else {
							r.EncodeInt(int64(yy229))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq213[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy231 := *x.CurrentCPUUtilizationPercentage
						yym232 := z.EncBinary()
						_ = yym232
						if false {
						} else {
							r.EncodeInt(int64(yy231))
						}
					}
				}
			}
			if yyr213 || yy2arr213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym233 := z.DecBinary()
	_ = yym233
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct234 := r.ContainerType()
		if yyct234 == codecSelferValueTypeMap1234 {
			yyl234 := r.ReadMapStart()
			if yyl234 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl234, d)
			}
		} else if yyct234 == codecSelferValueTypeArray1234 {
			yyl234 := r.ReadArrayStart()
			if yyl234 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl234, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys235Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys235Slc
	var yyhl235 bool = l >= 0
	for yyj235 := 0; ; yyj235++ {
		if yyhl235 {
			if yyj235 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys235Slc = r.DecodeBytes(yys235Slc, true, true)
		yys235 := string(yys235Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys235 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym237 := z.DecBinary()
				_ = yym237
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym239 := z.DecBinary()
				_ = yym239
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym239 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym239 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int32(r.DecodeInt(32))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int32(r.DecodeInt(32))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int32)
				}
				yym243 := z.DecBinary()
				_ = yym243
				if false {
				} else {
					*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys235)
		} // end switch yys235
	} // end for yyj235
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj244 int
	var yyb244 bool
	var yyhl244 bool = l >= 0
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym246 := z.DecBinary()
		_ = yym246
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym248 := z.DecBinary()
		_ = yym248
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym248 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym248 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int32(r.DecodeInt(32))
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int32(r.DecodeInt(32))
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int32)
		}
		yym252 := z.DecBinary()
		_ = yym252
		if false {
		} else {
			*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj244++
		if yyhl244 {
			yyb244 = yyj244 > l
		} else {
			yyb244 = r.CheckBreak()
		}
		if yyb244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym253 := z.EncBinary()
		_ = yym253
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep254 := !z.EncBinary()
			yy2arr254 := z.EncBasicHandle().StructToArray
			var yyq254 [5]bool
			_, _, _ = yysep254, yyq254, yy2arr254
			const yyr254 bool = false
			yyq254[0] = x.Kind != ""
			yyq254[1] = x.APIVersion != ""
			yyq254[2] = true
			yyq254[3] = true
			yyq254[4] = true
			var yynn254 int
			if yyr254 || yy2arr254 {
				r.EncodeArrayStart(5)
			} else {
				yynn254 = 0
				for _, b := range yyq254 {
					if b {
						yynn254++
					}
				}
				r.EncodeMapStart(yynn254)
				yynn254 = 0
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq254[0] {
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq254[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym257 := z.EncBinary()
					_ = yym257
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq254[1] {
					yym259 := z.EncBinary()
					_ = yym259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq254[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym260 := z.EncBinary()
					_ = yym260
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq254[2] {
					yy262 := &x.ObjectMeta
					yym263 := z.EncBinary()
					_ = yym263
					if false {
					} else if z.HasExtensions() && z.EncExt(yy262) {
					} else {
						z.EncFallback(yy262)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq254[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy264 := &x.ObjectMeta
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else if z.HasExtensions() && z.EncExt(yy264) {
					} else {
						z.EncFallback(yy264)
					}
				}
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq254[3] {
					yy267 := &x.Spec
					yy267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq254[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy268 := &x.Spec
					yy268.CodecEncodeSelf(e)
				}
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq254[4] {
					yy270 := &x.Status
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq254[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.Status
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr254 || yy2arr254 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym272 := z.DecBinary()
	_ = yym272
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct273 := r.ContainerType()
		if yyct273 == codecSelferValueTypeMap1234 {
			yyl273 := r.ReadMapStart()
			if yyl273 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl273, d)
			}
		} else if yyct273 == codecSelferValueTypeArray1234 {
			yyl273 := r.ReadArrayStart()
			if yyl273 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl273, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys274Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys274Slc
	var yyhl274 bool = l >= 0
	for yyj274 := 0; ; yyj274++ {
		if yyhl274 {
			if yyj274 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys274Slc = r.DecodeBytes(yys274Slc, true, true)
		yys274 := string(yys274Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys274 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv277 := &x.ObjectMeta
				yym278 := z.DecBinary()
				_ = yym278
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv277) {
				} else {
					z.DecFallback(yyv277, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv279 := &x.Spec
				yyv279.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv280 := &x.Status
				yyv280.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys274)
		} // end switch yys274
	} // end for yyj274
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj281 int
	var yyb281 bool
	var yyhl281 bool = l >= 0
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv284 := &x.ObjectMeta
		yym285 := z.DecBinary()
		_ = yym285
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv284) {
		} else {
			z.DecFallback(yyv284, false)
		}
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv286 := &x.Spec
		yyv286.CodecDecodeSelf(d)
	}
	yyj281++
	if yyhl281 {
		yyb281 = yyj281 > l
	} else {
		yyb281 = r.CheckBreak()
	}
	if yyb281 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv287 := &x.Status
		yyv287.CodecDecodeSelf(d)
	}
	for {
		yyj281++
		if yyhl281 {
			yyb281 = yyj281 > l
		} else {
			yyb281 = r.CheckBreak()
		}
		if yyb281 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj281-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym288 := z.EncBinary()
		_ = yym288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep289 := !z.EncBinary()
			yy2arr289 := z.EncBasicHandle().StructToArray
			var yyq289 [4]bool
			_, _, _ = yysep289, yyq289, yy2arr289
			const yyr289 bool = false
			yyq289[0] = x.Kind != ""
			yyq289[1] = x.APIVersion != ""
			yyq289[2] = true
			var yynn289 int
			if yyr289 || yy2arr289 {
				r.EncodeArrayStart(4)
			} else {
				yynn289 = 1
				for _, b := range yyq289 {
					if b {
						yynn289++
					}
				}
				r.EncodeMapStart(yynn289)
				yynn289 = 0
			}
			if yyr289 || yy2arr289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq289[0] {
					yym291 := z.EncBinary()
					_ = yym291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq289[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym292 := z.EncBinary()
					_ = yym292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr289 || yy2arr289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq289[1] {
					yym294 := z.EncBinary()
					_ = yym294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq289[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym295 := z.EncBinary()
					_ = yym295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr289 || yy2arr289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq289[2] {
					yy297 := &x.ListMeta
					yym298 := z.EncBinary()
					_ = yym298
					if false {
					} else if z.HasExtensions() && z.EncExt(yy297) {
					} else {
						z.EncFallback(yy297)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq289[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy299 := &x.ListMeta
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else if z.HasExtensions() && z.EncExt(yy299) {
					} else {
						z.EncFallback(yy299)
					}
				}
			}
			if yyr289 || yy2arr289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr289 || yy2arr289 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym304 := z.DecBinary()
	_ = yym304
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct305 := r.ContainerType()
		if yyct305 == codecSelferValueTypeMap1234 {
			yyl305 := r.ReadMapStart()
			if yyl305 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl305, d)
			}
		} else if yyct305 == codecSelferValueTypeArray1234 {
			yyl305 := r.ReadArrayStart()
			if yyl305 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl305, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys306Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys306Slc
	var yyhl306 bool = l >= 0
	for yyj306 := 0; ; yyj306++ {
		if yyhl306 {
			if yyj306 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys306Slc = r.DecodeBytes(yys306Slc, true, true)
		yys306 := string(yys306Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys306 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv309 := &x.ListMeta
				yym310 := z.DecBinary()
				_ = yym310
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv309) {
				} else {
					z.DecFallback(yyv309, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv311 := &x.Items
				yym312 := z.DecBinary()
				_ = yym312
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv311), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys306)
		} // end switch yys306
	} // end for yyj306
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj313 int
	var yyb313 bool
	var yyhl313 bool = l >= 0
	yyj313++
	if yyhl313 {
		yyb313 = yyj313 > l
	} else {
		yyb313 = r.CheckBreak()
	}
	if yyb313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj313++
	if yyhl313 {
		yyb313 = yyj313 > l
	} else {
		yyb313 = r.CheckBreak()
	}
	if yyb313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj313++
	if yyhl313 {
		yyb313 = yyj313 > l
	} else {
		yyb313 = r.CheckBreak()
	}
	if yyb313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv316 := &x.ListMeta
		yym317 := z.DecBinary()
		_ = yym317
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv316) {
		} else {
			z.DecFallback(yyv316, false)
		}
	}
	yyj313++
	if yyhl313 {
		yyb313 = yyj313 > l
	} else {
		yyb313 = r.CheckBreak()
	}
	if yyb313 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv318 := &x.Items
		yym319 := z.DecBinary()
		_ = yym319
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv318), d)
		}
	}
	for {
		yyj313++
		if yyhl313 {
			yyb313 = yyj313 > l
		} else {
			yyb313 = r.CheckBreak()
		}
		if yyb313 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj313-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym320 := z.EncBinary()
		_ = yym320
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep321 := !z.EncBinary()
			yy2arr321 := z.EncBasicHandle().StructToArray
			var yyq321 [5]bool
			_, _, _ = yysep321, yyq321, yy2arr321
			const yyr321 bool = false
			yyq321[0] = x.Kind != ""
			yyq321[1] = x.APIVersion != ""
			yyq321[2] = true
			yyq321[3] = x.Description != ""
			yyq321[4] = len(x.Versions) != 0
			var yynn321 int
			if yyr321 || yy2arr321 {
				r.EncodeArrayStart(5)
			} else {
				yynn321 = 0
				for _, b := range yyq321 {
					if b {
						yynn321++
					}
				}
				r.EncodeMapStart(yynn321)
				yynn321 = 0
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq321[0] {
					yym323 := z.EncBinary()
					_ = yym323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq321[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym324 := z.EncBinary()
					_ = yym324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq321[1] {
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq321[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym327 := z.EncBinary()
					_ = yym327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq321[2] {
					yy329 := &x.ObjectMeta
					yym330 := z.EncBinary()
					_ = yym330
					if false {
					} else if z.HasExtensions() && z.EncExt(yy329) {
					} else {
						z.EncFallback(yy329)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq321[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy331 := &x.ObjectMeta
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else if z.HasExtensions() && z.EncExt(yy331) {
					} else {
						z.EncFallback(yy331)
					}
				}
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq321[3] {
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq321[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq321[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym337 := z.EncBinary()
						_ = yym337
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq321[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym338 := z.EncBinary()
						_ = yym338
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr321 || yy2arr321 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym339 := z.DecBinary()
	_ = yym339
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct340 := r.ContainerType()
		if yyct340 == codecSelferValueTypeMap1234 {
			yyl340 := r.ReadMapStart()
			if yyl340 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl340, d)
			}
		} else if yyct340 == codecSelferValueTypeArray1234 {
			yyl340 := r.ReadArrayStart()
			if yyl340 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl340, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys341Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys341Slc
	var yyhl341 bool = l >= 0
	for yyj341 := 0; ; yyj341++ {
		if yyhl341 {
			if yyj341 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys341Slc = r.DecodeBytes(yys341Slc, true, true)
		yys341 := string(yys341Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys341 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv344 := &x.ObjectMeta
				yym345 := z.DecBinary()
				_ = yym345
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv344) {
				} else {
					z.DecFallback(yyv344, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv347 := &x.Versions
				yym348 := z.DecBinary()
				_ = yym348
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv347), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys341)
		} // end switch yys341
	} // end for yyj341
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj349 int
	var yyb349 bool
	var yyhl349 bool = l >= 0
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv352 := &x.ObjectMeta
		yym353 := z.DecBinary()
		_ = yym353
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv352) {
		} else {
			z.DecFallback(yyv352, false)
		}
	}
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj349++
	if yyhl349 {
		yyb349 = yyj349 > l
	} else {
		yyb349 = r.CheckBreak()
	}
	if yyb349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv355 := &x.Versions
		yym356 := z.DecBinary()
		_ = yym356
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv355), d)
		}
	}
	for {
		yyj349++
		if yyhl349 {
			yyb349 = yyj349 > l
		} else {
			yyb349 = r.CheckBreak()
		}
		if yyb349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym357 := z.EncBinary()
		_ = yym357
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep358 := !z.EncBinary()
			yy2arr358 := z.EncBasicHandle().StructToArray
			var yyq358 [4]bool
			_, _, _ = yysep358, yyq358, yy2arr358
			const yyr358 bool = false
			yyq358[0] = x.Kind != ""
			yyq358[1] = x.APIVersion != ""
			yyq358[2] = true
			var yynn358 int
			if yyr358 || yy2arr358 {
				r.EncodeArrayStart(4)
			} else {
				yynn358 = 1
				for _, b := range yyq358 {
					if b {
						yynn358++
					}
				}
				r.EncodeMapStart(yynn358)
				yynn358 = 0
			}
			if yyr358 || yy2arr358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq358[0] {
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq358[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym361 := z.EncBinary()
					_ = yym361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr358 || yy2arr358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq358[1] {
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq358[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym364 := z.EncBinary()
					_ = yym364
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr358 || yy2arr358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq358[2] {
					yy366 := &x.ListMeta
					yym367 := z.EncBinary()
					_ = yym367
					if false {
					} else if z.HasExtensions() && z.EncExt(yy366) {
					} else {
						z.EncFallback(yy366)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq358[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy368 := &x.ListMeta
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy368) {
					} else {
						z.EncFallback(yy368)
					}
				}
			}
			if yyr358 || yy2arr358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr358 || yy2arr358 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym373 := z.DecBinary()
	_ = yym373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct374 := r.ContainerType()
		if yyct374 == codecSelferValueTypeMap1234 {
			yyl374 := r.ReadMapStart()
			if yyl374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl374, d)
			}
		} else if yyct374 == codecSelferValueTypeArray1234 {
			yyl374 := r.ReadArrayStart()
			if yyl374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys375Slc
	var yyhl375 bool = l >= 0
	for yyj375 := 0; ; yyj375++ {
		if yyhl375 {
			if yyj375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys375Slc = r.DecodeBytes(yys375Slc, true, true)
		yys375 := string(yys375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys375 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv378 := &x.ListMeta
				yym379 := z.DecBinary()
				_ = yym379
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv378) {
				} else {
					z.DecFallback(yyv378, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv380 := &x.Items
				yym381 := z.DecBinary()
				_ = yym381
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv380), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys375)
		} // end switch yys375
	} // end for yyj375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj382 int
	var yyb382 bool
	var yyhl382 bool = l >= 0
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv385 := &x.ListMeta
		yym386 := z.DecBinary()
		_ = yym386
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv385) {
		} else {
			z.DecFallback(yyv385, false)
		}
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv387 := &x.Items
		yym388 := z.DecBinary()
		_ = yym388
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv387), d)
		}
	}
	for {
		yyj382++
		if yyhl382 {
			yyb382 = yyj382 > l
		} else {
			yyb382 = r.CheckBreak()
		}
		if yyb382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym389 := z.EncBinary()
		_ = yym389
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep390 := !z.EncBinary()
			yy2arr390 := z.EncBasicHandle().StructToArray
			var yyq390 [2]bool
			_, _, _ = yysep390, yyq390, yy2arr390
			const yyr390 bool = false
			yyq390[0] = x.Name != ""
			yyq390[1] = x.APIGroup != ""
			var yynn390 int
			if yyr390 || yy2arr390 {
				r.EncodeArrayStart(2)
			} else {
				yynn390 = 0
				for _, b := range yyq390 {
					if b {
						yynn390++
					}
				}
				r.EncodeMapStart(yynn390)
				yynn390 = 0
			}
			if yyr390 || yy2arr390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq390[0] {
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq390[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym393 := z.EncBinary()
					_ = yym393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr390 || yy2arr390 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq390[1] {
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq390[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym396 := z.EncBinary()
					_ = yym396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr390 || yy2arr390 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym397 := z.DecBinary()
	_ = yym397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct398 := r.ContainerType()
		if yyct398 == codecSelferValueTypeMap1234 {
			yyl398 := r.ReadMapStart()
			if yyl398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl398, d)
			}
		} else if yyct398 == codecSelferValueTypeArray1234 {
			yyl398 := r.ReadArrayStart()
			if yyl398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys399Slc
	var yyhl399 bool = l >= 0
	for yyj399 := 0; ; yyj399++ {
		if yyhl399 {
			if yyj399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys399Slc = r.DecodeBytes(yys399Slc, true, true)
		yys399 := string(yys399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys399 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys399)
		} // end switch yys399
	} // end for yyj399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj402 int
	var yyb402 bool
	var yyhl402 bool = l >= 0
	yyj402++
	if yyhl402 {
		yyb402 = yyj402 > l
	} else {
		yyb402 = r.CheckBreak()
	}
	if yyb402 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj402++
	if yyhl402 {
		yyb402 = yyj402 > l
	} else {
		yyb402 = r.CheckBreak()
	}
	if yyb402 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj402++
		if yyhl402 {
			yyb402 = yyj402 > l
		} else {
			yyb402 = r.CheckBreak()
		}
		if yyb402 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj402-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym405 := z.EncBinary()
		_ = yym405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep406 := !z.EncBinary()
			yy2arr406 := z.EncBasicHandle().StructToArray
			var yyq406 [4]bool
			_, _, _ = yysep406, yyq406, yy2arr406
			const yyr406 bool = false
			yyq406[0] = x.Kind != ""
			yyq406[1] = x.APIVersion != ""
			yyq406[2] = true
			yyq406[3] = len(x.Data) != 0
			var yynn406 int
			if yyr406 || yy2arr406 {
				r.EncodeArrayStart(4)
			} else {
				yynn406 = 0
				for _, b := range yyq406 {
					if b {
						yynn406++
					}
				}
				r.EncodeMapStart(yynn406)
				yynn406 = 0
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[0] {
					yym408 := z.EncBinary()
					_ = yym408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym409 := z.EncBinary()
					_ = yym409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[1] {
					yym411 := z.EncBinary()
					_ = yym411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym412 := z.EncBinary()
					_ = yym412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[2] {
					yy414 := &x.ObjectMeta
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else if z.HasExtensions() && z.EncExt(yy414) {
					} else {
						z.EncFallback(yy414)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.ObjectMeta
					yym417 := z.EncBinary()
					_ = yym417
					if false {
					} else if z.HasExtensions() && z.EncExt(yy416) {
					} else {
						z.EncFallback(yy416)
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym419 := z.EncBinary()
						_ = yym419
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq406[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym420 := z.EncBinary()
						_ = yym420
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym421 := z.DecBinary()
	_ = yym421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct422 := r.ContainerType()
		if yyct422 == codecSelferValueTypeMap1234 {
			yyl422 := r.ReadMapStart()
			if yyl422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl422, d)
			}
		} else if yyct422 == codecSelferValueTypeArray1234 {
			yyl422 := r.ReadArrayStart()
			if yyl422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys423Slc
	var yyhl423 bool = l >= 0
	for yyj423 := 0; ; yyj423++ {
		if yyhl423 {
			if yyj423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys423Slc = r.DecodeBytes(yys423Slc, true, true)
		yys423 := string(yys423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys423 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv426 := &x.ObjectMeta
				yym427 := z.DecBinary()
				_ = yym427
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv426) {
				} else {
					z.DecFallback(yyv426, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv428 := &x.Data
				yym429 := z.DecBinary()
				_ = yym429
				if false {
				} else {
					*yyv428 = r.DecodeBytes(*(*[]byte)(yyv428), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys423)
		} // end switch yys423
	} // end for yyj423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj430 int
	var yyb430 bool
	var yyhl430 bool = l >= 0
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv433 := &x.ObjectMeta
		yym434 := z.DecBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv433) {
		} else {
			z.DecFallback(yyv433, false)
		}
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv435 := &x.Data
		yym436 := z.DecBinary()
		_ = yym436
		if false {
		} else {
			*yyv435 = r.DecodeBytes(*(*[]byte)(yyv435), false, false)
		}
	}
	for {
		yyj430++
		if yyhl430 {
			yyb430 = yyj430 > l
		} else {
			yyb430 = r.CheckBreak()
		}
		if yyb430 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj430-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym437 := z.EncBinary()
		_ = yym437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep438 := !z.EncBinary()
			yy2arr438 := z.EncBasicHandle().StructToArray
			var yyq438 [5]bool
			_, _, _ = yysep438, yyq438, yy2arr438
			const yyr438 bool = false
			yyq438[0] = x.Kind != ""
			yyq438[1] = x.APIVersion != ""
			yyq438[2] = true
			yyq438[3] = true
			yyq438[4] = true
			var yynn438 int
			if yyr438 || yy2arr438 {
				r.EncodeArrayStart(5)
			} else {
				yynn438 = 0
				for _, b := range yyq438 {
					if b {
						yynn438++
					}
				}
				r.EncodeMapStart(yynn438)
				yynn438 = 0
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[0] {
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[1] {
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[2] {
					yy446 := &x.ObjectMeta
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy446) {
					} else {
						z.EncFallback(yy446)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy448 := &x.ObjectMeta
					yym449 := z.EncBinary()
					_ = yym449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy448) {
					} else {
						z.EncFallback(yy448)
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[3] {
					yy451 := &x.Spec
					yy451.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy452 := &x.Spec
					yy452.CodecEncodeSelf(e)
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[4] {
					yy454 := &x.Status
					yy454.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy455 := &x.Status
					yy455.CodecEncodeSelf(e)
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym456 := z.DecBinary()
	_ = yym456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct457 := r.ContainerType()
		if yyct457 == codecSelferValueTypeMap1234 {
			yyl457 := r.ReadMapStart()
			if yyl457 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl457, d)
			}
		} else if yyct457 == codecSelferValueTypeArray1234 {
			yyl457 := r.ReadArrayStart()
			if yyl457 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl457, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys458Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys458Slc
	var yyhl458 bool = l >= 0
	for yyj458 := 0; ; yyj458++ {
		if yyhl458 {
			if yyj458 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys458Slc = r.DecodeBytes(yys458Slc, true, true)
		yys458 := string(yys458Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys458 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv461 := &x.ObjectMeta
				yym462 := z.DecBinary()
				_ = yym462
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv461) {
				} else {
					z.DecFallback(yyv461, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv463 := &x.Spec
				yyv463.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv464 := &x.Status
				yyv464.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys458)
		} // end switch yys458
	} // end for yyj458
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj465 int
	var yyb465 bool
	var yyhl465 bool = l >= 0
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv468 := &x.ObjectMeta
		yym469 := z.DecBinary()
		_ = yym469
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv468) {
		} else {
			z.DecFallback(yyv468, false)
		}
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv470 := &x.Spec
		yyv470.CodecDecodeSelf(d)
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv471 := &x.Status
		yyv471.CodecDecodeSelf(d)
	}
	for {
		yyj465++
		if yyhl465 {
			yyb465 = yyj465 > l
		} else {
			yyb465 = r.CheckBreak()
		}
		if yyb465 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj465-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym472 := z.EncBinary()
		_ = yym472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep473 := !z.EncBinary()
			yy2arr473 := z.EncBasicHandle().StructToArray
			var yyq473 [9]bool
			_, _, _ = yysep473, yyq473, yy2arr473
			const yyr473 bool = false
			yyq473[0] = x.Replicas != nil
			yyq473[1] = len(x.Selector) != 0
			yyq473[3] = true
			yyq473[4] = x.MinReadySeconds != 0
			yyq473[5] = x.RevisionHistoryLimit != nil
			yyq473[6] = x.UniqueLabelKey != nil
			yyq473[7] = x.Paused != false
			yyq473[8] = x.RollbackTo != nil
			var yynn473 int
			if yyr473 || yy2arr473 {
				r.EncodeArrayStart(9)
			} else {
				yynn473 = 1
				for _, b := range yyq473 {
					if b {
						yynn473++
					}
				}
				r.EncodeMapStart(yynn473)
				yynn473 = 0
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy475 := *x.Replicas
						yym476 := z.EncBinary()
						_ = yym476
						if false {
						} else {
							r.EncodeInt(int64(yy475))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy477 := *x.Replicas
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							r.EncodeInt(int64(yy477))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym480 := z.EncBinary()
						_ = yym480
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym481 := z.EncBinary()
						_ = yym481
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy483 := &x.Template
				yym484 := z.EncBinary()
				_ = yym484
				if false {
				} else if z.HasExtensions() && z.EncExt(yy483) {
				} else {
					z.EncFallback(yy483)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy485 := &x.Template
				yym486 := z.EncBinary()
				_ = yym486
				if false {
				} else if z.HasExtensions() && z.EncExt(yy485) {
				} else {
					z.EncFallback(yy485)
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[3] {
					yy488 := &x.Strategy
					yy488.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy489 := &x.Strategy
					yy489.CodecEncodeSelf(e)
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[4] {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq473[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[5] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy494 := *x.RevisionHistoryLimit
						yym495 := z.EncBinary()
						_ = yym495
						if false {
						} else {
							r.EncodeInt(int64(yy494))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy496 := *x.RevisionHistoryLimit
						yym497 := z.EncBinary()
						_ = yym497
						if false {
						} else {
							r.EncodeInt(int64(yy496))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[6] {
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy499 := *x.UniqueLabelKey
						yym500 := z.EncBinary()
						_ = yym500
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy499))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy501 := *x.UniqueLabelKey
						yym502 := z.EncBinary()
						_ = yym502
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy501))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[7] {
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq473[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym505 := z.EncBinary()
					_ = yym505
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[8] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym507 := z.DecBinary()
	_ = yym507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct508 := r.ContainerType()
		if yyct508 == codecSelferValueTypeMap1234 {
			yyl508 := r.ReadMapStart()
			if yyl508 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl508, d)
			}
		} else if yyct508 == codecSelferValueTypeArray1234 {
			yyl508 := r.ReadArrayStart()
			if yyl508 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl508, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys509Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys509Slc
	var yyhl509 bool = l >= 0
	for yyj509 := 0; ; yyj509++ {
		if yyhl509 {
			if yyj509 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys509Slc = r.DecodeBytes(yys509Slc, true, true)
		yys509 := string(yys509Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys509 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym511 := z.DecBinary()
				_ = yym511
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv512 := &x.Selector
				yym513 := z.DecBinary()
				_ = yym513
				if false {
				} else {
					z.F.DecMapStringStringX(yyv512, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv514 := &x.Template
				yym515 := z.DecBinary()
				_ = yym515
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv514) {
				} else {
					z.DecFallback(yyv514, false)
				}
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv516 := &x.Strategy
				yyv516.CodecDecodeSelf(d)
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int32)
				}
				yym519 := z.DecBinary()
				_ = yym519
				if false {
				} else {
					*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
				}
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				if x.UniqueLabelKey != nil {
					x.UniqueLabelKey = nil
				}
			} else {
				if x.UniqueLabelKey == nil {
					x.UniqueLabelKey = new(string)
				}
				yym521 := z.DecBinary()
				_ = yym521
				if false {
				} else {
					*((*string)(x.UniqueLabelKey)) = r.DecodeString()
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys509)
		} // end switch yys509
	} // end for yyj509
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj524 int
	var yyb524 bool
	var yyhl524 bool = l >= 0
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym526 := z.DecBinary()
		_ = yym526
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv527 := &x.Selector
		yym528 := z.DecBinary()
		_ = yym528
		if false {
		} else {
			z.F.DecMapStringStringX(yyv527, false, d)
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv529 := &x.Template
		yym530 := z.DecBinary()
		_ = yym530
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv529) {
		} else {
			z.DecFallback(yyv529, false)
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv531 := &x.Strategy
		yyv531.CodecDecodeSelf(d)
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int32)
		}
		yym534 := z.DecBinary()
		_ = yym534
		if false {
		} else {
			*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UniqueLabelKey != nil {
			x.UniqueLabelKey = nil
		}
	} else {
		if x.UniqueLabelKey == nil {
			x.UniqueLabelKey = new(string)
		}
		yym536 := z.DecBinary()
		_ = yym536
		if false {
		} else {
			*((*string)(x.UniqueLabelKey)) = r.DecodeString()
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj524++
		if yyhl524 {
			yyb524 = yyj524 > l
		} else {
			yyb524 = r.CheckBreak()
		}
		if yyb524 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj524-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym539 := z.EncBinary()
		_ = yym539
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep540 := !z.EncBinary()
			yy2arr540 := z.EncBasicHandle().StructToArray
			var yyq540 [5]bool
			_, _, _ = yysep540, yyq540, yy2arr540
			const yyr540 bool = false
			yyq540[0] = x.Kind != ""
			yyq540[1] = x.APIVersion != ""
			yyq540[3] = len(x.UpdatedAnnotations) != 0
			var yynn540 int
			if yyr540 || yy2arr540 {
				r.EncodeArrayStart(5)
			} else {
				yynn540 = 2
				for _, b := range yyq540 {
					if b {
						yynn540++
					}
				}
				r.EncodeMapStart(yynn540)
				yynn540 = 0
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq540[0] {
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq540[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq540[1] {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq540[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym548 := z.EncBinary()
				_ = yym548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq540[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym551 := z.EncBinary()
						_ = yym551
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq540[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym552 := z.EncBinary()
						_ = yym552
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy554 := &x.RollbackTo
				yy554.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy555 := &x.RollbackTo
				yy555.CodecEncodeSelf(e)
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym556 := z.DecBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct557 := r.ContainerType()
		if yyct557 == codecSelferValueTypeMap1234 {
			yyl557 := r.ReadMapStart()
			if yyl557 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl557, d)
			}
		} else if yyct557 == codecSelferValueTypeArray1234 {
			yyl557 := r.ReadArrayStart()
			if yyl557 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys558Slc
	var yyhl558 bool = l >= 0
	for yyj558 := 0; ; yyj558++ {
		if yyhl558 {
			if yyj558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys558Slc = r.DecodeBytes(yys558Slc, true, true)
		yys558 := string(yys558Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys558 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv562 := &x.UpdatedAnnotations
				yym563 := z.DecBinary()
				_ = yym563
				if false {
				} else {
					z.F.DecMapStringStringX(yyv562, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv564 := &x.RollbackTo
				yyv564.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys558)
		} // end switch yys558
	} // end for yyj558
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj565 int
	var yyb565 bool
	var yyhl565 bool = l >= 0
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv569 := &x.UpdatedAnnotations
		yym570 := z.DecBinary()
		_ = yym570
		if false {
		} else {
			z.F.DecMapStringStringX(yyv569, false, d)
		}
	}
	yyj565++
	if yyhl565 {
		yyb565 = yyj565 > l
	} else {
		yyb565 = r.CheckBreak()
	}
	if yyb565 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv571 := &x.RollbackTo
		yyv571.CodecDecodeSelf(d)
	}
	for {
		yyj565++
		if yyhl565 {
			yyb565 = yyj565 > l
		} else {
			yyb565 = r.CheckBreak()
		}
		if yyb565 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj565-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym572 := z.EncBinary()
		_ = yym572
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep573 := !z.EncBinary()
			yy2arr573 := z.EncBasicHandle().StructToArray
			var yyq573 [1]bool
			_, _, _ = yysep573, yyq573, yy2arr573
			const yyr573 bool = false
			yyq573[0] = x.Revision != 0
			var yynn573 int
			if yyr573 || yy2arr573 {
				r.EncodeArrayStart(1)
			} else {
				yynn573 = 0
				for _, b := range yyq573 {
					if b {
						yynn573++
					}
				}
				r.EncodeMapStart(yynn573)
				yynn573 = 0
			}
			if yyr573 || yy2arr573 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq573[0] {
					yym575 := z.EncBinary()
					_ = yym575
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq573[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym576 := z.EncBinary()
					_ = yym576
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr573 || yy2arr573 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym577 := z.DecBinary()
	_ = yym577
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct578 := r.ContainerType()
		if yyct578 == codecSelferValueTypeMap1234 {
			yyl578 := r.ReadMapStart()
			if yyl578 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl578, d)
			}
		} else if yyct578 == codecSelferValueTypeArray1234 {
			yyl578 := r.ReadArrayStart()
			if yyl578 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl578, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys579Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys579Slc
	var yyhl579 bool = l >= 0
	for yyj579 := 0; ; yyj579++ {
		if yyhl579 {
			if yyj579 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys579Slc = r.DecodeBytes(yys579Slc, true, true)
		yys579 := string(yys579Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys579 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys579)
		} // end switch yys579
	} // end for yyj579
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj581 int
	var yyb581 bool
	var yyhl581 bool = l >= 0
	yyj581++
	if yyhl581 {
		yyb581 = yyj581 > l
	} else {
		yyb581 = r.CheckBreak()
	}
	if yyb581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj581++
		if yyhl581 {
			yyb581 = yyj581 > l
		} else {
			yyb581 = r.CheckBreak()
		}
		if yyb581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym583 := z.EncBinary()
		_ = yym583
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep584 := !z.EncBinary()
			yy2arr584 := z.EncBasicHandle().StructToArray
			var yyq584 [2]bool
			_, _, _ = yysep584, yyq584, yy2arr584
			const yyr584 bool = false
			yyq584[0] = x.Type != ""
			yyq584[1] = x.RollingUpdate != nil
			var yynn584 int
			if yyr584 || yy2arr584 {
				r.EncodeArrayStart(2)
			} else {
				yynn584 = 0
				for _, b := range yyq584 {
					if b {
						yynn584++
					}
				}
				r.EncodeMapStart(yynn584)
				yynn584 = 0
			}
			if yyr584 || yy2arr584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq584[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq584[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr584 || yy2arr584 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq584[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq584[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr584 || yy2arr584 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym587 := z.DecBinary()
	_ = yym587
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct588 := r.ContainerType()
		if yyct588 == codecSelferValueTypeMap1234 {
			yyl588 := r.ReadMapStart()
			if yyl588 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl588, d)
			}
		} else if yyct588 == codecSelferValueTypeArray1234 {
			yyl588 := r.ReadArrayStart()
			if yyl588 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl588, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys589Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys589Slc
	var yyhl589 bool = l >= 0
	for yyj589 := 0; ; yyj589++ {
		if yyhl589 {
			if yyj589 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys589Slc = r.DecodeBytes(yys589Slc, true, true)
		yys589 := string(yys589Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys589 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys589)
		} // end switch yys589
	} // end for yyj589
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym595 := z.EncBinary()
	_ = yym595
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym596 := z.DecBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym597 := z.EncBinary()
		_ = yym597
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep598 := !z.EncBinary()
			yy2arr598 := z.EncBasicHandle().StructToArray
			var yyq598 [2]bool
			_, _, _ = yysep598, yyq598, yy2arr598
			const yyr598 bool = false
			yyq598[0] = x.MaxUnavailable != nil
			yyq598[1] = x.MaxSurge != nil
			var yynn598 int
			if yyr598 || yy2arr598 {
				r.EncodeArrayStart(2)
			} else {
				yynn598 = 0
				for _, b := range yyq598 {
					if b {
						yynn598++
					}
				}
				r.EncodeMapStart(yynn598)
				yynn598 = 0
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym600 := z.EncBinary()
						_ = yym600
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym600 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq598[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym601 := z.EncBinary()
						_ = yym601
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym601 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq598[1] {
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym603 := z.EncBinary()
						_ = yym603
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym603 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq598[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym604 := z.EncBinary()
						_ = yym604
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym604 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				}
			}
			if yyr598 || yy2arr598 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym605 := z.DecBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct606 := r.ContainerType()
		if yyct606 == codecSelferValueTypeMap1234 {
			yyl606 := r.ReadMapStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl606, d)
			}
		} else if yyct606 == codecSelferValueTypeArray1234 {
			yyl606 := r.ReadArrayStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys607Slc
	var yyhl607 bool = l >= 0
	for yyj607 := 0; ; yyj607++ {
		if yyhl607 {
			if yyj607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys607Slc = r.DecodeBytes(yys607Slc, true, true)
		yys607 := string(yys607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys607 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg6_intstr.IntOrString)
				}
				yym609 := z.DecBinary()
				_ = yym609
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym609 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				if x.MaxSurge != nil {
					x.MaxSurge = nil
				}
			} else {
				if x.MaxSurge == nil {
					x.MaxSurge = new(pkg6_intstr.IntOrString)
				}
				yym611 := z.DecBinary()
				_ = yym611
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
				} else if !yym611 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxSurge)
				} else {
					z.DecFallback(x.MaxSurge, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys607)
		} // end switch yys607
	} // end for yyj607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj612 int
	var yyb612 bool
	var yyhl612 bool = l >= 0
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg6_intstr.IntOrString)
		}
		yym614 := z.DecBinary()
		_ = yym614
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym614 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxSurge != nil {
			x.MaxSurge = nil
		}
	} else {
		if x.MaxSurge == nil {
			x.MaxSurge = new(pkg6_intstr.IntOrString)
		}
		yym616 := z.DecBinary()
		_ = yym616
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
		} else if !yym616 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxSurge)
		} else {
			z.DecFallback(x.MaxSurge, false)
		}
	}
	for {
		yyj612++
		if yyhl612 {
			yyb612 = yyj612 > l
		} else {
			yyb612 = r.CheckBreak()
		}
		if yyb612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym617 := z.EncBinary()
		_ = yym617
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep618 := !z.EncBinary()
			yy2arr618 := z.EncBasicHandle().StructToArray
			var yyq618 [4]bool
			_, _, _ = yysep618, yyq618, yy2arr618
			const yyr618 bool = false
			yyq618[0] = x.Replicas != 0
			yyq618[1] = x.UpdatedReplicas != 0
			yyq618[2] = x.AvailableReplicas != 0
			yyq618[3] = x.UnavailableReplicas != 0
			var yynn618 int
			if yyr618 || yy2arr618 {
				r.EncodeArrayStart(4)
			} else {
				yynn618 = 0
				for _, b := range yyq618 {
					if b {
						yynn618++
					}
				}
				r.EncodeMapStart(yynn618)
				yynn618 = 0
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[0] {
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym621 := z.EncBinary()
					_ = yym621
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[1] {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[2] {
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[3] {
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym631 := z.DecBinary()
	_ = yym631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct632 := r.ContainerType()
		if yyct632 == codecSelferValueTypeMap1234 {
			yyl632 := r.ReadMapStart()
			if yyl632 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl632, d)
			}
		} else if yyct632 == codecSelferValueTypeArray1234 {
			yyl632 := r.ReadArrayStart()
			if yyl632 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys633Slc
	var yyhl633 bool = l >= 0
	for yyj633 := 0; ; yyj633++ {
		if yyhl633 {
			if yyj633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys633Slc = r.DecodeBytes(yys633Slc, true, true)
		yys633 := string(yys633Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys633 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys633)
		} // end switch yys633
	} // end for yyj633
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj638 int
	var yyb638 bool
	var yyhl638 bool = l >= 0
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	for {
		yyj638++
		if yyhl638 {
			yyb638 = yyj638 > l
		} else {
			yyb638 = r.CheckBreak()
		}
		if yyb638 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj638-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym643 := z.EncBinary()
		_ = yym643
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep644 := !z.EncBinary()
			yy2arr644 := z.EncBasicHandle().StructToArray
			var yyq644 [4]bool
			_, _, _ = yysep644, yyq644, yy2arr644
			const yyr644 bool = false
			yyq644[0] = x.Kind != ""
			yyq644[1] = x.APIVersion != ""
			yyq644[2] = true
			var yynn644 int
			if yyr644 || yy2arr644 {
				r.EncodeArrayStart(4)
			} else {
				yynn644 = 1
				for _, b := range yyq644 {
					if b {
						yynn644++
					}
				}
				r.EncodeMapStart(yynn644)
				yynn644 = 0
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq644[0] {
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq644[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq644[1] {
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq644[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq644[2] {
					yy652 := &x.ListMeta
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else if z.HasExtensions() && z.EncExt(yy652) {
					} else {
						z.EncFallback(yy652)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq644[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy654 := &x.ListMeta
					yym655 := z.EncBinary()
					_ = yym655
					if false {
					} else if z.HasExtensions() && z.EncExt(yy654) {
					} else {
						z.EncFallback(yy654)
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym657 := z.EncBinary()
					_ = yym657
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym658 := z.EncBinary()
					_ = yym658
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym659 := z.DecBinary()
	_ = yym659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct660 := r.ContainerType()
		if yyct660 == codecSelferValueTypeMap1234 {
			yyl660 := r.ReadMapStart()
			if yyl660 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl660, d)
			}
		} else if yyct660 == codecSelferValueTypeArray1234 {
			yyl660 := r.ReadArrayStart()
			if yyl660 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys661Slc
	var yyhl661 bool = l >= 0
	for yyj661 := 0; ; yyj661++ {
		if yyhl661 {
			if yyj661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys661Slc = r.DecodeBytes(yys661Slc, true, true)
		yys661 := string(yys661Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys661 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv664 := &x.ListMeta
				yym665 := z.DecBinary()
				_ = yym665
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv664) {
				} else {
					z.DecFallback(yyv664, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv666 := &x.Items
				yym667 := z.DecBinary()
				_ = yym667
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv666), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys661)
		} // end switch yys661
	} // end for yyj661
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj668 int
	var yyb668 bool
	var yyhl668 bool = l >= 0
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv671 := &x.ListMeta
		yym672 := z.DecBinary()
		_ = yym672
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv671) {
		} else {
			z.DecFallback(yyv671, false)
		}
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv673 := &x.Items
		yym674 := z.DecBinary()
		_ = yym674
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv673), d)
		}
	}
	for {
		yyj668++
		if yyhl668 {
			yyb668 = yyj668 > l
		} else {
			yyb668 = r.CheckBreak()
		}
		if yyb668 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj668-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetUpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym675 := z.EncBinary()
		_ = yym675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep676 := !z.EncBinary()
			yy2arr676 := z.EncBasicHandle().StructToArray
			var yyq676 [2]bool
			_, _, _ = yysep676, yyq676, yy2arr676
			const yyr676 bool = false
			yyq676[0] = x.Type != ""
			yyq676[1] = x.RollingUpdate != nil
			var yynn676 int
			if yyr676 || yy2arr676 {
				r.EncodeArrayStart(2)
			} else {
				yynn676 = 0
				for _, b := range yyq676 {
					if b {
						yynn676++
					}
				}
				r.EncodeMapStart(yynn676)
				yynn676 = 0
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq676[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq676[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq676[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq676[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetUpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym679 := z.DecBinary()
	_ = yym679
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct680 := r.ContainerType()
		if yyct680 == codecSelferValueTypeMap1234 {
			yyl680 := r.ReadMapStart()
			if yyl680 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl680, d)
			}
		} else if yyct680 == codecSelferValueTypeArray1234 {
			yyl680 := r.ReadArrayStart()
			if yyl680 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl680, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys681Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys681Slc
	var yyhl681 bool = l >= 0
	for yyj681 := 0; ; yyj681++ {
		if yyhl681 {
			if yyj681 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys681Slc = r.DecodeBytes(yys681Slc, true, true)
		yys681 := string(yys681Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys681 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDaemonSet)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys681)
		} // end switch yys681
	} // end for yyj681
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj684 int
	var yyb684 bool
	var yyhl684 bool = l >= 0
	yyj684++
	if yyhl684 {
		yyb684 = yyj684 > l
	} else {
		yyb684 = r.CheckBreak()
	}
	if yyb684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
	}
	yyj684++
	if yyhl684 {
		yyb684 = yyj684 > l
	} else {
		yyb684 = r.CheckBreak()
	}
	if yyb684 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDaemonSet)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj684++
		if yyhl684 {
			yyb684 = yyj684 > l
		} else {
			yyb684 = r.CheckBreak()
		}
		if yyb684 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj684-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DaemonSetUpdateStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym687 := z.EncBinary()
	_ = yym687
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DaemonSetUpdateStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym688 := z.DecBinary()
	_ = yym688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym689 := z.EncBinary()
		_ = yym689
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep690 := !z.EncBinary()
			yy2arr690 := z.EncBasicHandle().StructToArray
			var yyq690 [2]bool
			_, _, _ = yysep690, yyq690, yy2arr690
			const yyr690 bool = false
			yyq690[0] = x.MaxUnavailable != nil
			yyq690[1] = x.MinReadySeconds != 0
			var yynn690 int
			if yyr690 || yy2arr690 {
				r.EncodeArrayStart(2)
			} else {
				yynn690 = 0
				for _, b := range yyq690 {
					if b {
						yynn690++
					}
				}
				r.EncodeMapStart(yynn690)
				yynn690 = 0
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq690[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym692 := z.EncBinary()
						_ = yym692
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym692 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq690[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym693 := z.EncBinary()
						_ = yym693
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym693 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq690[1] {
					yym695 := z.EncBinary()
					_ = yym695
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq690[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym696 := z.EncBinary()
					_ = yym696
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr690 || yy2arr690 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym697 := z.DecBinary()
	_ = yym697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct698 := r.ContainerType()
		if yyct698 == codecSelferValueTypeMap1234 {
			yyl698 := r.ReadMapStart()
			if yyl698 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl698, d)
			}
		} else if yyct698 == codecSelferValueTypeArray1234 {
			yyl698 := r.ReadArrayStart()
			if yyl698 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl698, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys699Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys699Slc
	var yyhl699 bool = l >= 0
	for yyj699 := 0; ; yyj699++ {
		if yyhl699 {
			if yyj699 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys699Slc = r.DecodeBytes(yys699Slc, true, true)
		yys699 := string(yys699Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys699 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg6_intstr.IntOrString)
				}
				yym701 := z.DecBinary()
				_ = yym701
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym701 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys699)
		} // end switch yys699
	} // end for yyj699
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj703 int
	var yyb703 bool
	var yyhl703 bool = l >= 0
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg6_intstr.IntOrString)
		}
		yym705 := z.DecBinary()
		_ = yym705
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym705 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj703++
	if yyhl703 {
		yyb703 = yyj703 > l
	} else {
		yyb703 = r.CheckBreak()
	}
	if yyb703 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	for {
		yyj703++
		if yyhl703 {
			yyb703 = yyj703 > l
		} else {
			yyb703 = r.CheckBreak()
		}
		if yyb703 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj703-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym707 := z.EncBinary()
		_ = yym707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep708 := !z.EncBinary()
			yy2arr708 := z.EncBasicHandle().StructToArray
			var yyq708 [4]bool
			_, _, _ = yysep708, yyq708, yy2arr708
			const yyr708 bool = false
			yyq708[0] = x.Selector != nil
			yyq708[2] = true
			yyq708[3] = x.UniqueLabelKey != nil
			var yynn708 int
			if yyr708 || yy2arr708 {
				r.EncodeArrayStart(4)
			} else {
				yynn708 = 1
				for _, b := range yyq708 {
					if b {
						yynn708++
					}
				}
				r.EncodeMapStart(yynn708)
				yynn708 = 0
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq708[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy711 := &x.Template
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else if z.HasExtensions() && z.EncExt(yy711) {
				} else {
					z.EncFallback(yy711)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy713 := &x.Template
				yym714 := z.EncBinary()
				_ = yym714
				if false {
				} else if z.HasExtensions() && z.EncExt(yy713) {
				} else {
					z.EncFallback(yy713)
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq708[2] {
					yy716 := &x.UpdateStrategy
					yy716.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq708[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updateStrategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy717 := &x.UpdateStrategy
					yy717.CodecEncodeSelf(e)
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq708[3] {
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy719 := *x.UniqueLabelKey
						yym720 := z.EncBinary()
						_ = yym720
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy719))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq708[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy721 := *x.UniqueLabelKey
						yym722 := z.EncBinary()
						_ = yym722
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy721))
						}
					}
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym723 := z.DecBinary()
	_ = yym723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct724 := r.ContainerType()
		if yyct724 == codecSelferValueTypeMap1234 {
			yyl724 := r.ReadMapStart()
			if yyl724 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl724, d)
			}
		} else if yyct724 == codecSelferValueTypeArray1234 {
			yyl724 := r.ReadArrayStart()
			if yyl724 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys725Slc
	var yyhl725 bool = l >= 0
	for yyj725 := 0; ; yyj725++ {
		if yyhl725 {
			if yyj725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys725Slc = r.DecodeBytes(yys725Slc, true, true)
		yys725 := string(yys725Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys725 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv727 := &x.Template
				yym728 := z.DecBinary()
				_ = yym728
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv727) {
				} else {
					z.DecFallback(yyv727, false)
				}
			}
		case "updateStrategy":
			if r.TryDecodeAsNil() {
				x.UpdateStrategy = DaemonSetUpdateStrategy{}
			} else {
				yyv729 := &x.UpdateStrategy
				yyv729.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				if x.UniqueLabelKey != nil {
					x.UniqueLabelKey = nil
				}
			} else {
				if x.UniqueLabelKey == nil {
					x.UniqueLabelKey = new(string)
				}
				yym731 := z.DecBinary()
				_ = yym731
				if false {
				} else {
					*((*string)(x.UniqueLabelKey)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys725)
		} // end switch yys725
	} // end for yyj725
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj732 int
	var yyb732 bool
	var yyhl732 bool = l >= 0
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv734 := &x.Template
		yym735 := z.DecBinary()
		_ = yym735
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv734) {
		} else {
			z.DecFallback(yyv734, false)
		}
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdateStrategy = DaemonSetUpdateStrategy{}
	} else {
		yyv736 := &x.UpdateStrategy
		yyv736.CodecDecodeSelf(d)
	}
	yyj732++
	if yyhl732 {
		yyb732 = yyj732 > l
	} else {
		yyb732 = r.CheckBreak()
	}
	if yyb732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UniqueLabelKey != nil {
			x.UniqueLabelKey = nil
		}
	} else {
		if x.UniqueLabelKey == nil {
			x.UniqueLabelKey = new(string)
		}
		yym738 := z.DecBinary()
		_ = yym738
		if false {
		} else {
			*((*string)(x.UniqueLabelKey)) = r.DecodeString()
		}
	}
	for {
		yyj732++
		if yyhl732 {
			yyb732 = yyj732 > l
		} else {
			yyb732 = r.CheckBreak()
		}
		if yyb732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym739 := z.EncBinary()
		_ = yym739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep740 := !z.EncBinary()
			yy2arr740 := z.EncBasicHandle().StructToArray
			var yyq740 [3]bool
			_, _, _ = yysep740, yyq740, yy2arr740
			const yyr740 bool = false
			var yynn740 int
			if yyr740 || yy2arr740 {
				r.EncodeArrayStart(3)
			} else {
				yynn740 = 3
				for _, b := range yyq740 {
					if b {
						yynn740++
					}
				}
				r.EncodeMapStart(yynn740)
				yynn740 = 0
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym742 := z.EncBinary()
				_ = yym742
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym743 := z.EncBinary()
				_ = yym743
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym745 := z.EncBinary()
				_ = yym745
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym746 := z.EncBinary()
				_ = yym746
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym748 := z.EncBinary()
				_ = yym748
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym749 := z.EncBinary()
				_ = yym749
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr740 || yy2arr740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym750 := z.DecBinary()
	_ = yym750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct751 := r.ContainerType()
		if yyct751 == codecSelferValueTypeMap1234 {
			yyl751 := r.ReadMapStart()
			if yyl751 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl751, d)
			}
		} else if yyct751 == codecSelferValueTypeArray1234 {
			yyl751 := r.ReadArrayStart()
			if yyl751 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl751, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys752Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys752Slc
	var yyhl752 bool = l >= 0
	for yyj752 := 0; ; yyj752++ {
		if yyhl752 {
			if yyj752 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys752Slc = r.DecodeBytes(yys752Slc, true, true)
		yys752 := string(yys752Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys752 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys752)
		} // end switch yys752
	} // end for yyj752
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj756 int
	var yyb756 bool
	var yyhl756 bool = l >= 0
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj756++
	if yyhl756 {
		yyb756 = yyj756 > l
	} else {
		yyb756 = r.CheckBreak()
	}
	if yyb756 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	for {
		yyj756++
		if yyhl756 {
			yyb756 = yyj756 > l
		} else {
			yyb756 = r.CheckBreak()
		}
		if yyb756 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj756-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym760 := z.EncBinary()
		_ = yym760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep761 := !z.EncBinary()
			yy2arr761 := z.EncBasicHandle().StructToArray
			var yyq761 [5]bool
			_, _, _ = yysep761, yyq761, yy2arr761
			const yyr761 bool = false
			yyq761[0] = x.Kind != ""
			yyq761[1] = x.APIVersion != ""
			yyq761[2] = true
			yyq761[3] = true
			yyq761[4] = true
			var yynn761 int
			if yyr761 || yy2arr761 {
				r.EncodeArrayStart(5)
			} else {
				yynn761 = 0
				for _, b := range yyq761 {
					if b {
						yynn761++
					}
				}
				r.EncodeMapStart(yynn761)
				yynn761 = 0
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[0] {
					yym763 := z.EncBinary()
					_ = yym763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq761[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym764 := z.EncBinary()
					_ = yym764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[1] {
					yym766 := z.EncBinary()
					_ = yym766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq761[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[2] {
					yy769 := &x.ObjectMeta
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else if z.HasExtensions() && z.EncExt(yy769) {
					} else {
						z.EncFallback(yy769)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq761[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy771 := &x.ObjectMeta
					yym772 := z.EncBinary()
					_ = yym772
					if false {
					} else if z.HasExtensions() && z.EncExt(yy771) {
					} else {
						z.EncFallback(yy771)
					}
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[3] {
					yy774 := &x.Spec
					yy774.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq761[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy775 := &x.Spec
					yy775.CodecEncodeSelf(e)
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq761[4] {
					yy777 := &x.Status
					yy777.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq761[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy778 := &x.Status
					yy778.CodecEncodeSelf(e)
				}
			}
			if yyr761 || yy2arr761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym779 := z.DecBinary()
	_ = yym779
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct780 := r.ContainerType()
		if yyct780 == codecSelferValueTypeMap1234 {
			yyl780 := r.ReadMapStart()
			if yyl780 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl780, d)
			}
		} else if yyct780 == codecSelferValueTypeArray1234 {
			yyl780 := r.ReadArrayStart()
			if yyl780 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl780, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys781Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys781Slc
	var yyhl781 bool = l >= 0
	for yyj781 := 0; ; yyj781++ {
		if yyhl781 {
			if yyj781 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys781Slc = r.DecodeBytes(yys781Slc, true, true)
		yys781 := string(yys781Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys781 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv784 := &x.ObjectMeta
				yym785 := z.DecBinary()
				_ = yym785
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv784) {
				} else {
					z.DecFallback(yyv784, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv786 := &x.Spec
				yyv786.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv787 := &x.Status
				yyv787.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys781)
		} // end switch yys781
	} // end for yyj781
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj788 int
	var yyb788 bool
	var yyhl788 bool = l >= 0
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv791 := &x.ObjectMeta
		yym792 := z.DecBinary()
		_ = yym792
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv791) {
		} else {
			z.DecFallback(yyv791, false)
		}
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv793 := &x.Spec
		yyv793.CodecDecodeSelf(d)
	}
	yyj788++
	if yyhl788 {
		yyb788 = yyj788 > l
	} else {
		yyb788 = r.CheckBreak()
	}
	if yyb788 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv794 := &x.Status
		yyv794.CodecDecodeSelf(d)
	}
	for {
		yyj788++
		if yyhl788 {
			yyb788 = yyj788 > l
		} else {
			yyb788 = r.CheckBreak()
		}
		if yyb788 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj788-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym795 := z.EncBinary()
		_ = yym795
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep796 := !z.EncBinary()
			yy2arr796 := z.EncBasicHandle().StructToArray
			var yyq796 [4]bool
			_, _, _ = yysep796, yyq796, yy2arr796
			const yyr796 bool = false
			yyq796[0] = x.Kind != ""
			yyq796[1] = x.APIVersion != ""
			yyq796[2] = true
			var yynn796 int
			if yyr796 || yy2arr796 {
				r.EncodeArrayStart(4)
			} else {
				yynn796 = 1
				for _, b := range yyq796 {
					if b {
						yynn796++
					}
				}
				r.EncodeMapStart(yynn796)
				yynn796 = 0
			}
			if yyr796 || yy2arr796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq796[0] {
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq796[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym799 := z.EncBinary()
					_ = yym799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr796 || yy2arr796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq796[1] {
					yym801 := z.EncBinary()
					_ = yym801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq796[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr796 || yy2arr796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq796[2] {
					yy804 := &x.ListMeta
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else if z.HasExtensions() && z.EncExt(yy804) {
					} else {
						z.EncFallback(yy804)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq796[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy806 := &x.ListMeta
					yym807 := z.EncBinary()
					_ = yym807
					if false {
					} else if z.HasExtensions() && z.EncExt(yy806) {
					} else {
						z.EncFallback(yy806)
					}
				}
			}
			if yyr796 || yy2arr796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym810 := z.EncBinary()
					_ = yym810
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr796 || yy2arr796 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym811 := z.DecBinary()
	_ = yym811
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct812 := r.ContainerType()
		if yyct812 == codecSelferValueTypeMap1234 {
			yyl812 := r.ReadMapStart()
			if yyl812 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl812, d)
			}
		} else if yyct812 == codecSelferValueTypeArray1234 {
			yyl812 := r.ReadArrayStart()
			if yyl812 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl812, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys813Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys813Slc
	var yyhl813 bool = l >= 0
	for yyj813 := 0; ; yyj813++ {
		if yyhl813 {
			if yyj813 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys813Slc = r.DecodeBytes(yys813Slc, true, true)
		yys813 := string(yys813Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys813 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv816 := &x.ListMeta
				yym817 := z.DecBinary()
				_ = yym817
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv816) {
				} else {
					z.DecFallback(yyv816, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv818 := &x.Items
				yym819 := z.DecBinary()
				_ = yym819
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv818), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys813)
		} // end switch yys813
	} // end for yyj813
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj820 int
	var yyb820 bool
	var yyhl820 bool = l >= 0
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv823 := &x.ListMeta
		yym824 := z.DecBinary()
		_ = yym824
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv823) {
		} else {
			z.DecFallback(yyv823, false)
		}
	}
	yyj820++
	if yyhl820 {
		yyb820 = yyj820 > l
	} else {
		yyb820 = r.CheckBreak()
	}
	if yyb820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv825 := &x.Items
		yym826 := z.DecBinary()
		_ = yym826
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv825), d)
		}
	}
	for {
		yyj820++
		if yyhl820 {
			yyb820 = yyj820 > l
		} else {
			yyb820 = r.CheckBreak()
		}
		if yyb820 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj820-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym827 := z.EncBinary()
		_ = yym827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep828 := !z.EncBinary()
			yy2arr828 := z.EncBasicHandle().StructToArray
			var yyq828 [4]bool
			_, _, _ = yysep828, yyq828, yy2arr828
			const yyr828 bool = false
			yyq828[0] = x.Kind != ""
			yyq828[1] = x.APIVersion != ""
			yyq828[2] = true
			var yynn828 int
			if yyr828 || yy2arr828 {
				r.EncodeArrayStart(4)
			} else {
				yynn828 = 1
				for _, b := range yyq828 {
					if b {
						yynn828++
					}
				}
				r.EncodeMapStart(yynn828)
				yynn828 = 0
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[0] {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq828[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[1] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq828[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq828[2] {
					yy836 := &x.ListMeta
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else if z.HasExtensions() && z.EncExt(yy836) {
					} else {
						z.EncFallback(yy836)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq828[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy838 := &x.ListMeta
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else if z.HasExtensions() && z.EncExt(yy838) {
					} else {
						z.EncFallback(yy838)
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr828 || yy2arr828 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym843 := z.DecBinary()
	_ = yym843
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct844 := r.ContainerType()
		if yyct844 == codecSelferValueTypeMap1234 {
			yyl844 := r.ReadMapStart()
			if yyl844 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl844, d)
			}
		} else if yyct844 == codecSelferValueTypeArray1234 {
			yyl844 := r.ReadArrayStart()
			if yyl844 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl844, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys845Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys845Slc
	var yyhl845 bool = l >= 0
	for yyj845 := 0; ; yyj845++ {
		if yyhl845 {
			if yyj845 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys845Slc = r.DecodeBytes(yys845Slc, true, true)
		yys845 := string(yys845Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys845 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv848 := &x.ListMeta
				yym849 := z.DecBinary()
				_ = yym849
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv848) {
				} else {
					z.DecFallback(yyv848, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv850 := &x.Items
				yym851 := z.DecBinary()
				_ = yym851
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv850), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys845)
		} // end switch yys845
	} // end for yyj845
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj852 int
	var yyb852 bool
	var yyhl852 bool = l >= 0
	yyj852++
	if yyhl852 {
		yyb852 = yyj852 > l
	} else {
		yyb852 = r.CheckBreak()
	}
	if yyb852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj852++
	if yyhl852 {
		yyb852 = yyj852 > l
	} else {
		yyb852 = r.CheckBreak()
	}
	if yyb852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj852++
	if yyhl852 {
		yyb852 = yyj852 > l
	} else {
		yyb852 = r.CheckBreak()
	}
	if yyb852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv855 := &x.ListMeta
		yym856 := z.DecBinary()
		_ = yym856
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv855) {
		} else {
			z.DecFallback(yyv855, false)
		}
	}
	yyj852++
	if yyhl852 {
		yyb852 = yyj852 > l
	} else {
		yyb852 = r.CheckBreak()
	}
	if yyb852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv857 := &x.Items
		yym858 := z.DecBinary()
		_ = yym858
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv857), d)
		}
	}
	for {
		yyj852++
		if yyhl852 {
			yyb852 = yyj852 > l
		} else {
			yyb852 = r.CheckBreak()
		}
		if yyb852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym859 := z.EncBinary()
		_ = yym859
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep860 := !z.EncBinary()
			yy2arr860 := z.EncBasicHandle().StructToArray
			var yyq860 [5]bool
			_, _, _ = yysep860, yyq860, yy2arr860
			const yyr860 bool = false
			yyq860[0] = x.Kind != ""
			yyq860[1] = x.APIVersion != ""
			yyq860[2] = true
			yyq860[3] = true
			yyq860[4] = true
			var yynn860 int
			if yyr860 || yy2arr860 {
				r.EncodeArrayStart(5)
			} else {
				yynn860 = 0
				for _, b := range yyq860 {
					if b {
						yynn860++
					}
				}
				r.EncodeMapStart(yynn860)
				yynn860 = 0
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[0] {
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq860[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[1] {
					yym865 := z.EncBinary()
					_ = yym865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq860[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym866 := z.EncBinary()
					_ = yym866
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[2] {
					yy868 := &x.ObjectMeta
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else if z.HasExtensions() && z.EncExt(yy868) {
					} else {
						z.EncFallback(yy868)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq860[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy870 := &x.ObjectMeta
					yym871 := z.EncBinary()
					_ = yym871
					if false {
					} else if z.HasExtensions() && z.EncExt(yy870) {
					} else {
						z.EncFallback(yy870)
					}
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[3] {
					yy873 := &x.Spec
					yy873.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq860[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy874 := &x.Spec
					yy874.CodecEncodeSelf(e)
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq860[4] {
					yy876 := &x.Status
					yy876.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq860[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy877 := &x.Status
					yy877.CodecEncodeSelf(e)
				}
			}
			if yyr860 || yy2arr860 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym878 := z.DecBinary()
	_ = yym878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct879 := r.ContainerType()
		if yyct879 == codecSelferValueTypeMap1234 {
			yyl879 := r.ReadMapStart()
			if yyl879 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl879, d)
			}
		} else if yyct879 == codecSelferValueTypeArray1234 {
			yyl879 := r.ReadArrayStart()
			if yyl879 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys880Slc
	var yyhl880 bool = l >= 0
	for yyj880 := 0; ; yyj880++ {
		if yyhl880 {
			if yyj880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys880Slc = r.DecodeBytes(yys880Slc, true, true)
		yys880 := string(yys880Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys880 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv883 := &x.ObjectMeta
				yym884 := z.DecBinary()
				_ = yym884
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv883) {
				} else {
					z.DecFallback(yyv883, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv885 := &x.Spec
				yyv885.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv886 := &x.Status
				yyv886.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys880)
		} // end switch yys880
	} // end for yyj880
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj887 int
	var yyb887 bool
	var yyhl887 bool = l >= 0
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv890 := &x.ObjectMeta
		yym891 := z.DecBinary()
		_ = yym891
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv890) {
		} else {
			z.DecFallback(yyv890, false)
		}
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv892 := &x.Spec
		yyv892.CodecDecodeSelf(d)
	}
	yyj887++
	if yyhl887 {
		yyb887 = yyj887 > l
	} else {
		yyb887 = r.CheckBreak()
	}
	if yyb887 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv893 := &x.Status
		yyv893.CodecDecodeSelf(d)
	}
	for {
		yyj887++
		if yyhl887 {
			yyb887 = yyj887 > l
		} else {
			yyb887 = r.CheckBreak()
		}
		if yyb887 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj887-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym894 := z.EncBinary()
		_ = yym894
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep895 := !z.EncBinary()
			yy2arr895 := z.EncBasicHandle().StructToArray
			var yyq895 [4]bool
			_, _, _ = yysep895, yyq895, yy2arr895
			const yyr895 bool = false
			yyq895[0] = x.Kind != ""
			yyq895[1] = x.APIVersion != ""
			yyq895[2] = true
			var yynn895 int
			if yyr895 || yy2arr895 {
				r.EncodeArrayStart(4)
			} else {
				yynn895 = 1
				for _, b := range yyq895 {
					if b {
						yynn895++
					}
				}
				r.EncodeMapStart(yynn895)
				yynn895 = 0
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[0] {
					yym897 := z.EncBinary()
					_ = yym897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym898 := z.EncBinary()
					_ = yym898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[1] {
					yym900 := z.EncBinary()
					_ = yym900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq895[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym901 := z.EncBinary()
					_ = yym901
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq895[2] {
					yy903 := &x.ListMeta
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else if z.HasExtensions() && z.EncExt(yy903) {
					} else {
						z.EncFallback(yy903)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq895[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy905 := &x.ListMeta
					yym906 := z.EncBinary()
					_ = yym906
					if false {
					} else if z.HasExtensions() && z.EncExt(yy905) {
					} else {
						z.EncFallback(yy905)
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr895 || yy2arr895 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym910 := z.DecBinary()
	_ = yym910
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct911 := r.ContainerType()
		if yyct911 == codecSelferValueTypeMap1234 {
			yyl911 := r.ReadMapStart()
			if yyl911 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl911, d)
			}
		} else if yyct911 == codecSelferValueTypeArray1234 {
			yyl911 := r.ReadArrayStart()
			if yyl911 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl911, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys912Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys912Slc
	var yyhl912 bool = l >= 0
	for yyj912 := 0; ; yyj912++ {
		if yyhl912 {
			if yyj912 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys912Slc = r.DecodeBytes(yys912Slc, true, true)
		yys912 := string(yys912Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys912 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv915 := &x.ListMeta
				yym916 := z.DecBinary()
				_ = yym916
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv915) {
				} else {
					z.DecFallback(yyv915, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv917 := &x.Items
				yym918 := z.DecBinary()
				_ = yym918
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv917), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys912)
		} // end switch yys912
	} // end for yyj912
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj919 int
	var yyb919 bool
	var yyhl919 bool = l >= 0
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv922 := &x.ListMeta
		yym923 := z.DecBinary()
		_ = yym923
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv922) {
		} else {
			z.DecFallback(yyv922, false)
		}
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv924 := &x.Items
		yym925 := z.DecBinary()
		_ = yym925
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv924), d)
		}
	}
	for {
		yyj919++
		if yyhl919 {
			yyb919 = yyj919 > l
		} else {
			yyb919 = r.CheckBreak()
		}
		if yyb919 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj919-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym926 := z.EncBinary()
		_ = yym926
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep927 := !z.EncBinary()
			yy2arr927 := z.EncBasicHandle().StructToArray
			var yyq927 [5]bool
			_, _, _ = yysep927, yyq927, yy2arr927
			const yyr927 bool = false
			yyq927[0] = x.Parallelism != nil
			yyq927[1] = x.Completions != nil
			yyq927[2] = x.ActiveDeadlineSeconds != nil
			yyq927[3] = x.Selector != nil
			var yynn927 int
			if yyr927 || yy2arr927 {
				r.EncodeArrayStart(5)
			} else {
				yynn927 = 1
				for _, b := range yyq927 {
					if b {
						yynn927++
					}
				}
				r.EncodeMapStart(yynn927)
				yynn927 = 0
			}
			if yyr927 || yy2arr927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq927[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy929 := *x.Parallelism
						yym930 := z.EncBinary()
						_ = yym930
						if false {
						} else {
							r.EncodeInt(int64(yy929))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq927[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy931 := *x.Parallelism
						yym932 := z.EncBinary()
						_ = yym932
						if false {
						} else {
							r.EncodeInt(int64(yy931))
						}
					}
				}
			}
			if yyr927 || yy2arr927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq927[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy934 := *x.Completions
						yym935 := z.EncBinary()
						_ = yym935
						if false {
						} else {
							r.EncodeInt(int64(yy934))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq927[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy936 := *x.Completions
						yym937 := z.EncBinary()
						_ = yym937
						if false {
						} else {
							r.EncodeInt(int64(yy936))
						}
					}
				}
			}
			if yyr927 || yy2arr927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq927[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy939 := *x.ActiveDeadlineSeconds
						yym940 := z.EncBinary()
						_ = yym940
						if false {
						} else {
							r.EncodeInt(int64(yy939))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq927[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy941 := *x.ActiveDeadlineSeconds
						yym942 := z.EncBinary()
						_ = yym942
						if false {
						} else {
							r.EncodeInt(int64(yy941))
						}
					}
				}
			}
			if yyr927 || yy2arr927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq927[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq927[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr927 || yy2arr927 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy945 := &x.Template
				yym946 := z.EncBinary()
				_ = yym946
				if false {
				} else if z.HasExtensions() && z.EncExt(yy945) {
				} else {
					z.EncFallback(yy945)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy947 := &x.Template
				yym948 := z.EncBinary()
				_ = yym948
				if false {
				} else if z.HasExtensions() && z.EncExt(yy947) {
				} else {
					z.EncFallback(yy947)
				}
			}
			if yyr927 || yy2arr927 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym949 := z.DecBinary()
	_ = yym949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct950 := r.ContainerType()
		if yyct950 == codecSelferValueTypeMap1234 {
			yyl950 := r.ReadMapStart()
			if yyl950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl950, d)
			}
		} else if yyct950 == codecSelferValueTypeArray1234 {
			yyl950 := r.ReadArrayStart()
			if yyl950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys951Slc
	var yyhl951 bool = l >= 0
	for yyj951 := 0; ; yyj951++ {
		if yyhl951 {
			if yyj951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys951Slc = r.DecodeBytes(yys951Slc, true, true)
		yys951 := string(yys951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys951 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int32)
				}
				yym953 := z.DecBinary()
				_ = yym953
				if false {
				} else {
					*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int32)
				}
				yym955 := z.DecBinary()
				_ = yym955
				if false {
				} else {
					*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym957 := z.DecBinary()
				_ = yym957
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv959 := &x.Template
				yym960 := z.DecBinary()
				_ = yym960
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv959) {
				} else {
					z.DecFallback(yyv959, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys951)
		} // end switch yys951
	} // end for yyj951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj961 int
	var yyb961 bool
	var yyhl961 bool = l >= 0
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int32)
		}
		yym963 := z.DecBinary()
		_ = yym963
		if false {
		} else {
			*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
		}
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int32)
		}
		yym965 := z.DecBinary()
		_ = yym965
		if false {
		} else {
			*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
		}
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj961++
	if yyhl961 {
		yyb961 = yyj961 > l
	} else {
		yyb961 = r.CheckBreak()
	}
	if yyb961 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv969 := &x.Template
		yym970 := z.DecBinary()
		_ = yym970
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv969) {
		} else {
			z.DecFallback(yyv969, false)
		}
	}
	for {
		yyj961++
		if yyhl961 {
			yyb961 = yyj961 > l
		} else {
			yyb961 = r.CheckBreak()
		}
		if yyb961 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj961-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym971 := z.EncBinary()
		_ = yym971
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep972 := !z.EncBinary()
			yy2arr972 := z.EncBasicHandle().StructToArray
			var yyq972 [6]bool
			_, _, _ = yysep972, yyq972, yy2arr972
			const yyr972 bool = false
			yyq972[0] = len(x.Conditions) != 0
			yyq972[1] = x.StartTime != nil
			yyq972[2] = x.CompletionTime != nil
			yyq972[3] = x.Active != 0
			yyq972[4] = x.Succeeded != 0
			yyq972[5] = x.Failed != 0
			var yynn972 int
			if yyr972 || yy2arr972 {
				r.EncodeArrayStart(6)
			} else {
				yynn972 = 0
				for _, b := range yyq972 {
					if b {
						yynn972++
					}
				}
				r.EncodeMapStart(yynn972)
				yynn972 = 0
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq972[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym974 := z.EncBinary()
						_ = yym974
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq972[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym975 := z.EncBinary()
						_ = yym975
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq972[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym977 := z.EncBinary()
						_ = yym977
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym977 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym977 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq972[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym978 := z.EncBinary()
						_ = yym978
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym978 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym978 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq972[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym980 := z.EncBinary()
						_ = yym980
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym980 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym980 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq972[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym981 := z.EncBinary()
						_ = yym981
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym981 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym981 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq972[3] {
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq972[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq972[4] {
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq972[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq972[5] {
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq972[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr972 || yy2arr972 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym991 := z.DecBinary()
	_ = yym991
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct992 := r.ContainerType()
		if yyct992 == codecSelferValueTypeMap1234 {
			yyl992 := r.ReadMapStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl992, d)
			}
		} else if yyct992 == codecSelferValueTypeArray1234 {
			yyl992 := r.ReadArrayStart()
			if yyl992 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl992, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys993Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys993Slc
	var yyhl993 bool = l >= 0
	for yyj993 := 0; ; yyj993++ {
		if yyhl993 {
			if yyj993 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys993Slc = r.DecodeBytes(yys993Slc, true, true)
		yys993 := string(yys993Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys993 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv994 := &x.Conditions
				yym995 := z.DecBinary()
				_ = yym995
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv994), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym997 := z.DecBinary()
				_ = yym997
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym997 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym997 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym999 := z.DecBinary()
				_ = yym999
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym999 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym999 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int32(r.DecodeInt(32))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int32(r.DecodeInt(32))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys993)
		} // end switch yys993
	} // end for yyj993
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1003 int
	var yyb1003 bool
	var yyhl1003 bool = l >= 0
	yyj1003++
	if yyhl1003 {
		yyb1003 = yyj1003 > l
	} else {
		yyb1003 = r.CheckBreak()
	}
	if yyb1003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1004 := &x.Conditions
		yym1005 := z.DecBinary()
		_ = yym1005
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv1004), d)
		}
	}
	yyj1003++
	if yyhl1003 {
		yyb1003 = yyj1003 > l
	} else {
		yyb1003 = r.CheckBreak()
	}
	if yyb1003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym1007 := z.DecBinary()
		_ = yym1007
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1007 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1007 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1003++
	if yyhl1003 {
		yyb1003 = yyj1003 > l
	} else {
		yyb1003 = r.CheckBreak()
	}
	if yyb1003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym1009 := z.DecBinary()
		_ = yym1009
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym1009 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym1009 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj1003++
	if yyhl1003 {
		yyb1003 = yyj1003 > l
	} else {
		yyb1003 = r.CheckBreak()
	}
	if yyb1003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int32(r.DecodeInt(32))
	}
	yyj1003++
	if yyhl1003 {
		yyb1003 = yyj1003 > l
	} else {
		yyb1003 = r.CheckBreak()
	}
	if yyb1003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int32(r.DecodeInt(32))
	}
	yyj1003++
	if yyhl1003 {
		yyb1003 = yyj1003 > l
	} else {
		yyb1003 = r.CheckBreak()
	}
	if yyb1003 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int32(r.DecodeInt(32))
	}
	for {
		yyj1003++
		if yyhl1003 {
			yyb1003 = yyj1003 > l
		} else {
			yyb1003 = r.CheckBreak()
		}
		if yyb1003 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1003-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1013 := z.EncBinary()
	_ = yym1013
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1014 := z.DecBinary()
	_ = yym1014
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1015 := z.EncBinary()
		_ = yym1015
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1016 := !z.EncBinary()
			yy2arr1016 := z.EncBasicHandle().StructToArray
			var yyq1016 [6]bool
			_, _, _ = yysep1016, yyq1016, yy2arr1016
			const yyr1016 bool = false
			yyq1016[2] = true
			yyq1016[3] = true
			yyq1016[4] = x.Reason != ""
			yyq1016[5] = x.Message != ""
			var yynn1016 int
			if yyr1016 || yy2arr1016 {
				r.EncodeArrayStart(6)
			} else {
				yynn1016 = 2
				for _, b := range yyq1016 {
					if b {
						yynn1016++
					}
				}
				r.EncodeMapStart(yynn1016)
				yynn1016 = 0
			}
			if yyr1016 || yy2arr1016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1016 || yy2arr1016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1019 := z.EncBinary()
				_ = yym1019
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1020 := z.EncBinary()
				_ = yym1020
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1016 || yy2arr1016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1016[2] {
					yy1022 := &x.LastProbeTime
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1022) {
					} else if yym1023 {
						z.EncBinaryMarshal(yy1022)
					} else if !yym1023 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1022)
					} else {
						z.EncFallback(yy1022)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1024 := &x.LastProbeTime
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1024) {
					} else if yym1025 {
						z.EncBinaryMarshal(yy1024)
					} else if !yym1025 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1024)
					} else {
						z.EncFallback(yy1024)
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1016[3] {
					yy1027 := &x.LastTransitionTime
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1027) {
					} else if yym1028 {
						z.EncBinaryMarshal(yy1027)
					} else if !yym1028 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1027)
					} else {
						z.EncFallback(yy1027)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1016[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1029 := &x.LastTransitionTime
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1029) {
					} else if yym1030 {
						z.EncBinaryMarshal(yy1029)
					} else if !yym1030 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1029)
					} else {
						z.EncFallback(yy1029)
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1016[4] {
					yym1032 := z.EncBinary()
					_ = yym1032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1016[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1033 := z.EncBinary()
					_ = yym1033
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1016[5] {
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1016[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1036 := z.EncBinary()
					_ = yym1036
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1016 || yy2arr1016 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1037 := z.DecBinary()
	_ = yym1037
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1038 := r.ContainerType()
		if yyct1038 == codecSelferValueTypeMap1234 {
			yyl1038 := r.ReadMapStart()
			if yyl1038 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1038, d)
			}
		} else if yyct1038 == codecSelferValueTypeArray1234 {
			yyl1038 := r.ReadArrayStart()
			if yyl1038 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1038, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1039Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1039Slc
	var yyhl1039 bool = l >= 0
	for yyj1039 := 0; ; yyj1039++ {
		if yyhl1039 {
			if yyj1039 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1039Slc = r.DecodeBytes(yys1039Slc, true, true)
		yys1039 := string(yys1039Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1039 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1042 := &x.LastProbeTime
				yym1043 := z.DecBinary()
				_ = yym1043
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1042) {
				} else if yym1043 {
					z.DecBinaryUnmarshal(yyv1042)
				} else if !yym1043 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1042)
				} else {
					z.DecFallback(yyv1042, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1044 := &x.LastTransitionTime
				yym1045 := z.DecBinary()
				_ = yym1045
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1044) {
				} else if yym1045 {
					z.DecBinaryUnmarshal(yyv1044)
				} else if !yym1045 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1044)
				} else {
					z.DecFallback(yyv1044, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1039)
		} // end switch yys1039
	} // end for yyj1039
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1048 int
	var yyb1048 bool
	var yyhl1048 bool = l >= 0
	yyj1048++
	if yyhl1048 {
		yyb1048 = yyj1048 > l
	} else {
		yyb1048 = r.CheckBreak()
	}
	if yyb1048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj1048++
	if yyhl1048 {
		yyb1048 = yyj1048 > l
	} else {
		yyb1048 = r.CheckBreak()
	}
	if yyb1048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj1048++
	if yyhl1048 {
		yyb1048 = yyj1048 > l
	} else {
		yyb1048 = r.CheckBreak()
	}
	if yyb1048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1051 := &x.LastProbeTime
		yym1052 := z.DecBinary()
		_ = yym1052
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1051) {
		} else if yym1052 {
			z.DecBinaryUnmarshal(yyv1051)
		} else if !yym1052 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1051)
		} else {
			z.DecFallback(yyv1051, false)
		}
	}
	yyj1048++
	if yyhl1048 {
		yyb1048 = yyj1048 > l
	} else {
		yyb1048 = r.CheckBreak()
	}
	if yyb1048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1053 := &x.LastTransitionTime
		yym1054 := z.DecBinary()
		_ = yym1054
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1053) {
		} else if yym1054 {
			z.DecBinaryUnmarshal(yyv1053)
		} else if !yym1054 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1053)
		} else {
			z.DecFallback(yyv1053, false)
		}
	}
	yyj1048++
	if yyhl1048 {
		yyb1048 = yyj1048 > l
	} else {
		yyb1048 = r.CheckBreak()
	}
	if yyb1048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1048++
	if yyhl1048 {
		yyb1048 = yyj1048 > l
	} else {
		yyb1048 = r.CheckBreak()
	}
	if yyb1048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1048++
		if yyhl1048 {
			yyb1048 = yyj1048 > l
		} else {
			yyb1048 = r.CheckBreak()
		}
		if yyb1048 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1048-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1057 := z.EncBinary()
		_ = yym1057
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1058 := !z.EncBinary()
			yy2arr1058 := z.EncBasicHandle().StructToArray
			var yyq1058 [5]bool
			_, _, _ = yysep1058, yyq1058, yy2arr1058
			const yyr1058 bool = false
			yyq1058[0] = x.Kind != ""
			yyq1058[1] = x.APIVersion != ""
			yyq1058[2] = true
			yyq1058[3] = true
			yyq1058[4] = true
			var yynn1058 int
			if yyr1058 || yy2arr1058 {
				r.EncodeArrayStart(5)
			} else {
				yynn1058 = 0
				for _, b := range yyq1058 {
					if b {
						yynn1058++
					}
				}
				r.EncodeMapStart(yynn1058)
				yynn1058 = 0
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1058[0] {
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1058[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1058[1] {
					yym1063 := z.EncBinary()
					_ = yym1063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1058[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1058[2] {
					yy1066 := &x.ObjectMeta
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1066) {
					} else {
						z.EncFallback(yy1066)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1058[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1068 := &x.ObjectMeta
					yym1069 := z.EncBinary()
					_ = yym1069
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1068) {
					} else {
						z.EncFallback(yy1068)
					}
				}
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1058[3] {
					yy1071 := &x.Spec
					yy1071.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1058[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1072 := &x.Spec
					yy1072.CodecEncodeSelf(e)
				}
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1058[4] {
					yy1074 := &x.Status
					yy1074.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1058[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1075 := &x.Status
					yy1075.CodecEncodeSelf(e)
				}
			}
			if yyr1058 || yy2arr1058 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1076 := z.DecBinary()
	_ = yym1076
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1077 := r.ContainerType()
		if yyct1077 == codecSelferValueTypeMap1234 {
			yyl1077 := r.ReadMapStart()
			if yyl1077 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1077, d)
			}
		} else if yyct1077 == codecSelferValueTypeArray1234 {
			yyl1077 := r.ReadArrayStart()
			if yyl1077 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1077, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1078Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1078Slc
	var yyhl1078 bool = l >= 0
	for yyj1078 := 0; ; yyj1078++ {
		if yyhl1078 {
			if yyj1078 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1078Slc = r.DecodeBytes(yys1078Slc, true, true)
		yys1078 := string(yys1078Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1078 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1081 := &x.ObjectMeta
				yym1082 := z.DecBinary()
				_ = yym1082
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1081) {
				} else {
					z.DecFallback(yyv1081, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv1083 := &x.Spec
				yyv1083.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv1084 := &x.Status
				yyv1084.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1078)
		} // end switch yys1078
	} // end for yyj1078
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1085 int
	var yyb1085 bool
	var yyhl1085 bool = l >= 0
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1088 := &x.ObjectMeta
		yym1089 := z.DecBinary()
		_ = yym1089
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1088) {
		} else {
			z.DecFallback(yyv1088, false)
		}
	}
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv1090 := &x.Spec
		yyv1090.CodecDecodeSelf(d)
	}
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv1091 := &x.Status
		yyv1091.CodecDecodeSelf(d)
	}
	for {
		yyj1085++
		if yyhl1085 {
			yyb1085 = yyj1085 > l
		} else {
			yyb1085 = r.CheckBreak()
		}
		if yyb1085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1092 := z.EncBinary()
		_ = yym1092
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1093 := !z.EncBinary()
			yy2arr1093 := z.EncBasicHandle().StructToArray
			var yyq1093 [4]bool
			_, _, _ = yysep1093, yyq1093, yy2arr1093
			const yyr1093 bool = false
			yyq1093[0] = x.Kind != ""
			yyq1093[1] = x.APIVersion != ""
			yyq1093[2] = true
			var yynn1093 int
			if yyr1093 || yy2arr1093 {
				r.EncodeArrayStart(4)
			} else {
				yynn1093 = 1
				for _, b := range yyq1093 {
					if b {
						yynn1093++
					}
				}
				r.EncodeMapStart(yynn1093)
				yynn1093 = 0
			}
			if yyr1093 || yy2arr1093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1093[0] {
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1093[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1093 || yy2arr1093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1093[1] {
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1093[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1093 || yy2arr1093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1093[2] {
					yy1101 := &x.ListMeta
					yym1102 := z.EncBinary()
					_ = yym1102
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1101) {
					} else {
						z.EncFallback(yy1101)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1093[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1103 := &x.ListMeta
					yym1104 := z.EncBinary()
					_ = yym1104
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1103) {
					} else {
						z.EncFallback(yy1103)
					}
				}
			}
			if yyr1093 || yy2arr1093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1106 := z.EncBinary()
					_ = yym1106
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1107 := z.EncBinary()
					_ = yym1107
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr1093 || yy2arr1093 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1108 := z.DecBinary()
	_ = yym1108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1109 := r.ContainerType()
		if yyct1109 == codecSelferValueTypeMap1234 {
			yyl1109 := r.ReadMapStart()
			if yyl1109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1109, d)
			}
		} else if yyct1109 == codecSelferValueTypeArray1234 {
			yyl1109 := r.ReadArrayStart()
			if yyl1109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1110Slc
	var yyhl1110 bool = l >= 0
	for yyj1110 := 0; ; yyj1110++ {
		if yyhl1110 {
			if yyj1110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1110Slc = r.DecodeBytes(yys1110Slc, true, true)
		yys1110 := string(yys1110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1110 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1113 := &x.ListMeta
				yym1114 := z.DecBinary()
				_ = yym1114
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1113) {
				} else {
					z.DecFallback(yyv1113, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1115 := &x.Items
				yym1116 := z.DecBinary()
				_ = yym1116
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv1115), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1110)
		} // end switch yys1110
	} // end for yyj1110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1117 int
	var yyb1117 bool
	var yyhl1117 bool = l >= 0
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1120 := &x.ListMeta
		yym1121 := z.DecBinary()
		_ = yym1121
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1120) {
		} else {
			z.DecFallback(yyv1120, false)
		}
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1122 := &x.Items
		yym1123 := z.DecBinary()
		_ = yym1123
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv1122), d)
		}
	}
	for {
		yyj1117++
		if yyhl1117 {
			yyb1117 = yyj1117 > l
		} else {
			yyb1117 = r.CheckBreak()
		}
		if yyb1117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1124 := z.EncBinary()
		_ = yym1124
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1125 := !z.EncBinary()
			yy2arr1125 := z.EncBasicHandle().StructToArray
			var yyq1125 [3]bool
			_, _, _ = yysep1125, yyq1125, yy2arr1125
			const yyr1125 bool = false
			yyq1125[0] = x.Backend != nil
			yyq1125[1] = len(x.TLS) != 0
			yyq1125[2] = len(x.Rules) != 0
			var yynn1125 int
			if yyr1125 || yy2arr1125 {
				r.EncodeArrayStart(3)
			} else {
				yynn1125 = 0
				for _, b := range yyq1125 {
					if b {
						yynn1125++
					}
				}
				r.EncodeMapStart(yynn1125)
				yynn1125 = 0
			}
			if yyr1125 || yy2arr1125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1125[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1125[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1125 || yy2arr1125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1125[1] {
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym1128 := z.EncBinary()
						_ = yym1128
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1125[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tls"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym1129 := z.EncBinary()
						_ = yym1129
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				}
			}
			if yyr1125 || yy2arr1125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1125[2] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1131 := z.EncBinary()
						_ = yym1131
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1125[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1132 := z.EncBinary()
						_ = yym1132
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr1125 || yy2arr1125 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1133 := z.DecBinary()
	_ = yym1133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1134 := r.ContainerType()
		if yyct1134 == codecSelferValueTypeMap1234 {
			yyl1134 := r.ReadMapStart()
			if yyl1134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1134, d)
			}
		} else if yyct1134 == codecSelferValueTypeArray1234 {
			yyl1134 := r.ReadArrayStart()
			if yyl1134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1135Slc
	var yyhl1135 bool = l >= 0
	for yyj1135 := 0; ; yyj1135++ {
		if yyhl1135 {
			if yyj1135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1135Slc = r.DecodeBytes(yys1135Slc, true, true)
		yys1135 := string(yys1135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1135 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "tls":
			if r.TryDecodeAsNil() {
				x.TLS = nil
			} else {
				yyv1137 := &x.TLS
				yym1138 := z.DecBinary()
				_ = yym1138
				if false {
				} else {
					h.decSliceIngressTLS((*[]IngressTLS)(yyv1137), d)
				}
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv1139 := &x.Rules
				yym1140 := z.DecBinary()
				_ = yym1140
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv1139), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1135)
		} // end switch yys1135
	} // end for yyj1135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1141 int
	var yyb1141 bool
	var yyhl1141 bool = l >= 0
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TLS = nil
	} else {
		yyv1143 := &x.TLS
		yym1144 := z.DecBinary()
		_ = yym1144
		if false {
		} else {
			h.decSliceIngressTLS((*[]IngressTLS)(yyv1143), d)
		}
	}
	yyj1141++
	if yyhl1141 {
		yyb1141 = yyj1141 > l
	} else {
		yyb1141 = r.CheckBreak()
	}
	if yyb1141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv1145 := &x.Rules
		yym1146 := z.DecBinary()
		_ = yym1146
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv1145), d)
		}
	}
	for {
		yyj1141++
		if yyhl1141 {
			yyb1141 = yyj1141 > l
		} else {
			yyb1141 = r.CheckBreak()
		}
		if yyb1141 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1141-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressTLS) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1147 := z.EncBinary()
		_ = yym1147
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1148 := !z.EncBinary()
			yy2arr1148 := z.EncBasicHandle().StructToArray
			var yyq1148 [2]bool
			_, _, _ = yysep1148, yyq1148, yy2arr1148
			const yyr1148 bool = false
			yyq1148[0] = len(x.Hosts) != 0
			yyq1148[1] = x.SecretName != ""
			var yynn1148 int
			if yyr1148 || yy2arr1148 {
				r.EncodeArrayStart(2)
			} else {
				yynn1148 = 0
				for _, b := range yyq1148 {
					if b {
						yynn1148++
					}
				}
				r.EncodeMapStart(yynn1148)
				yynn1148 = 0
			}
			if yyr1148 || yy2arr1148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1148[0] {
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym1150 := z.EncBinary()
						_ = yym1150
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1148[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hosts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym1151 := z.EncBinary()
						_ = yym1151
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				}
			}
			if yyr1148 || yy2arr1148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1148[1] {
					yym1153 := z.EncBinary()
					_ = yym1153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1148[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1154 := z.EncBinary()
					_ = yym1154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr1148 || yy2arr1148 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressTLS) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1155 := z.DecBinary()
	_ = yym1155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1156 := r.ContainerType()
		if yyct1156 == codecSelferValueTypeMap1234 {
			yyl1156 := r.ReadMapStart()
			if yyl1156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1156, d)
			}
		} else if yyct1156 == codecSelferValueTypeArray1234 {
			yyl1156 := r.ReadArrayStart()
			if yyl1156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressTLS) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1157Slc
	var yyhl1157 bool = l >= 0
	for yyj1157 := 0; ; yyj1157++ {
		if yyhl1157 {
			if yyj1157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1157Slc = r.DecodeBytes(yys1157Slc, true, true)
		yys1157 := string(yys1157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1157 {
		case "hosts":
			if r.TryDecodeAsNil() {
				x.Hosts = nil
			} else {
				yyv1158 := &x.Hosts
				yym1159 := z.DecBinary()
				_ = yym1159
				if false {
				} else {
					z.F.DecSliceStringX(yyv1158, false, d)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1157)
		} // end switch yys1157
	} // end for yyj1157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressTLS) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hosts = nil
	} else {
		yyv1162 := &x.Hosts
		yym1163 := z.DecBinary()
		_ = yym1163
		if false {
		} else {
			z.F.DecSliceStringX(yyv1162, false, d)
		}
	}
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1165 := z.EncBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1166 := !z.EncBinary()
			yy2arr1166 := z.EncBasicHandle().StructToArray
			var yyq1166 [1]bool
			_, _, _ = yysep1166, yyq1166, yy2arr1166
			const yyr1166 bool = false
			yyq1166[0] = true
			var yynn1166 int
			if yyr1166 || yy2arr1166 {
				r.EncodeArrayStart(1)
			} else {
				yynn1166 = 0
				for _, b := range yyq1166 {
					if b {
						yynn1166++
					}
				}
				r.EncodeMapStart(yynn1166)
				yynn1166 = 0
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1166[0] {
					yy1168 := &x.LoadBalancer
					yym1169 := z.EncBinary()
					_ = yym1169
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1168) {
					} else {
						z.EncFallback(yy1168)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1166[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1170 := &x.LoadBalancer
					yym1171 := z.EncBinary()
					_ = yym1171
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1170) {
					} else {
						z.EncFallback(yy1170)
					}
				}
			}
			if yyr1166 || yy2arr1166 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1172 := z.DecBinary()
	_ = yym1172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1173 := r.ContainerType()
		if yyct1173 == codecSelferValueTypeMap1234 {
			yyl1173 := r.ReadMapStart()
			if yyl1173 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1173, d)
			}
		} else if yyct1173 == codecSelferValueTypeArray1234 {
			yyl1173 := r.ReadArrayStart()
			if yyl1173 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1174Slc
	var yyhl1174 bool = l >= 0
	for yyj1174 := 0; ; yyj1174++ {
		if yyhl1174 {
			if yyj1174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1174Slc = r.DecodeBytes(yys1174Slc, true, true)
		yys1174 := string(yys1174Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1174 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
			} else {
				yyv1175 := &x.LoadBalancer
				yym1176 := z.DecBinary()
				_ = yym1176
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1175) {
				} else {
					z.DecFallback(yyv1175, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1174)
		} // end switch yys1174
	} // end for yyj1174
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1177 int
	var yyb1177 bool
	var yyhl1177 bool = l >= 0
	yyj1177++
	if yyhl1177 {
		yyb1177 = yyj1177 > l
	} else {
		yyb1177 = r.CheckBreak()
	}
	if yyb1177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
	} else {
		yyv1178 := &x.LoadBalancer
		yym1179 := z.DecBinary()
		_ = yym1179
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1178) {
		} else {
			z.DecFallback(yyv1178, false)
		}
	}
	for {
		yyj1177++
		if yyhl1177 {
			yyb1177 = yyj1177 > l
		} else {
			yyb1177 = r.CheckBreak()
		}
		if yyb1177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1180 := z.EncBinary()
		_ = yym1180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1181 := !z.EncBinary()
			yy2arr1181 := z.EncBasicHandle().StructToArray
			var yyq1181 [2]bool
			_, _, _ = yysep1181, yyq1181, yy2arr1181
			const yyr1181 bool = false
			yyq1181[0] = x.Host != ""
			yyq1181[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1181 int
			if yyr1181 || yy2arr1181 {
				r.EncodeArrayStart(2)
			} else {
				yynn1181 = 0
				for _, b := range yyq1181 {
					if b {
						yynn1181++
					}
				}
				r.EncodeMapStart(yynn1181)
				yynn1181 = 0
			}
			if yyr1181 || yy2arr1181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1181[0] {
					yym1183 := z.EncBinary()
					_ = yym1183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1181[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1184 := z.EncBinary()
					_ = yym1184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1185 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1185 = true
				goto LABEL1185
			}
		LABEL1185:
			if yyr1181 || yy2arr1181 {
				if yyn1185 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1181[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1185 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1181 || yy2arr1181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1186 := z.DecBinary()
	_ = yym1186
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1187 := r.ContainerType()
		if yyct1187 == codecSelferValueTypeMap1234 {
			yyl1187 := r.ReadMapStart()
			if yyl1187 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1187, d)
			}
		} else if yyct1187 == codecSelferValueTypeArray1234 {
			yyl1187 := r.ReadArrayStart()
			if yyl1187 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1187, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1188Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1188Slc
	var yyhl1188 bool = l >= 0
	for yyj1188 := 0; ; yyj1188++ {
		if yyhl1188 {
			if yyj1188 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1188Slc = r.DecodeBytes(yys1188Slc, true, true)
		yys1188 := string(yys1188Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1188 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1188)
		} // end switch yys1188
	} // end for yyj1188
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1191 int
	var yyb1191 bool
	var yyhl1191 bool = l >= 0
	yyj1191++
	if yyhl1191 {
		yyb1191 = yyj1191 > l
	} else {
		yyb1191 = r.CheckBreak()
	}
	if yyb1191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1191++
	if yyhl1191 {
		yyb1191 = yyj1191 > l
	} else {
		yyb1191 = r.CheckBreak()
	}
	if yyb1191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1191++
		if yyhl1191 {
			yyb1191 = yyj1191 > l
		} else {
			yyb1191 = r.CheckBreak()
		}
		if yyb1191 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1191-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1194 := z.EncBinary()
		_ = yym1194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1195 := !z.EncBinary()
			yy2arr1195 := z.EncBasicHandle().StructToArray
			var yyq1195 [1]bool
			_, _, _ = yysep1195, yyq1195, yy2arr1195
			const yyr1195 bool = false
			yyq1195[0] = x.HTTP != nil
			var yynn1195 int
			if yyr1195 || yy2arr1195 {
				r.EncodeArrayStart(1)
			} else {
				yynn1195 = 0
				for _, b := range yyq1195 {
					if b {
						yynn1195++
					}
				}
				r.EncodeMapStart(yynn1195)
				yynn1195 = 0
			}
			if yyr1195 || yy2arr1195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1195[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1195[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1195 || yy2arr1195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1197 := z.DecBinary()
	_ = yym1197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1198 := r.ContainerType()
		if yyct1198 == codecSelferValueTypeMap1234 {
			yyl1198 := r.ReadMapStart()
			if yyl1198 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1198, d)
			}
		} else if yyct1198 == codecSelferValueTypeArray1234 {
			yyl1198 := r.ReadArrayStart()
			if yyl1198 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1199Slc
	var yyhl1199 bool = l >= 0
	for yyj1199 := 0; ; yyj1199++ {
		if yyhl1199 {
			if yyj1199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1199Slc = r.DecodeBytes(yys1199Slc, true, true)
		yys1199 := string(yys1199Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1199 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1199)
		} // end switch yys1199
	} // end for yyj1199
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1201 int
	var yyb1201 bool
	var yyhl1201 bool = l >= 0
	yyj1201++
	if yyhl1201 {
		yyb1201 = yyj1201 > l
	} else {
		yyb1201 = r.CheckBreak()
	}
	if yyb1201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1201++
		if yyhl1201 {
			yyb1201 = yyj1201 > l
		} else {
			yyb1201 = r.CheckBreak()
		}
		if yyb1201 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1201-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1203 := z.EncBinary()
		_ = yym1203
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1204 := !z.EncBinary()
			yy2arr1204 := z.EncBasicHandle().StructToArray
			var yyq1204 [1]bool
			_, _, _ = yysep1204, yyq1204, yy2arr1204
			const yyr1204 bool = false
			var yynn1204 int
			if yyr1204 || yy2arr1204 {
				r.EncodeArrayStart(1)
			} else {
				yynn1204 = 1
				for _, b := range yyq1204 {
					if b {
						yynn1204++
					}
				}
				r.EncodeMapStart(yynn1204)
				yynn1204 = 0
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1206 := z.EncBinary()
					_ = yym1206
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1207 := z.EncBinary()
					_ = yym1207
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1204 || yy2arr1204 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1208 := z.DecBinary()
	_ = yym1208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1209 := r.ContainerType()
		if yyct1209 == codecSelferValueTypeMap1234 {
			yyl1209 := r.ReadMapStart()
			if yyl1209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1209, d)
			}
		} else if yyct1209 == codecSelferValueTypeArray1234 {
			yyl1209 := r.ReadArrayStart()
			if yyl1209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1210Slc
	var yyhl1210 bool = l >= 0
	for yyj1210 := 0; ; yyj1210++ {
		if yyhl1210 {
			if yyj1210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1210Slc = r.DecodeBytes(yys1210Slc, true, true)
		yys1210 := string(yys1210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1210 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1211 := &x.Paths
				yym1212 := z.DecBinary()
				_ = yym1212
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1211), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1210)
		} // end switch yys1210
	} // end for yyj1210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1213 int
	var yyb1213 bool
	var yyhl1213 bool = l >= 0
	yyj1213++
	if yyhl1213 {
		yyb1213 = yyj1213 > l
	} else {
		yyb1213 = r.CheckBreak()
	}
	if yyb1213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1214 := &x.Paths
		yym1215 := z.DecBinary()
		_ = yym1215
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1214), d)
		}
	}
	for {
		yyj1213++
		if yyhl1213 {
			yyb1213 = yyj1213 > l
		} else {
			yyb1213 = r.CheckBreak()
		}
		if yyb1213 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1213-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1216 := z.EncBinary()
		_ = yym1216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1217 := !z.EncBinary()
			yy2arr1217 := z.EncBasicHandle().StructToArray
			var yyq1217 [2]bool
			_, _, _ = yysep1217, yyq1217, yy2arr1217
			const yyr1217 bool = false
			yyq1217[0] = x.Path != ""
			var yynn1217 int
			if yyr1217 || yy2arr1217 {
				r.EncodeArrayStart(2)
			} else {
				yynn1217 = 1
				for _, b := range yyq1217 {
					if b {
						yynn1217++
					}
				}
				r.EncodeMapStart(yynn1217)
				yynn1217 = 0
			}
			if yyr1217 || yy2arr1217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1217[0] {
					yym1219 := z.EncBinary()
					_ = yym1219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1217[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1217 || yy2arr1217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1222 := &x.Backend
				yy1222.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1223 := &x.Backend
				yy1223.CodecEncodeSelf(e)
			}
			if yyr1217 || yy2arr1217 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1224 := z.DecBinary()
	_ = yym1224
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1225 := r.ContainerType()
		if yyct1225 == codecSelferValueTypeMap1234 {
			yyl1225 := r.ReadMapStart()
			if yyl1225 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1225, d)
			}
		} else if yyct1225 == codecSelferValueTypeArray1234 {
			yyl1225 := r.ReadArrayStart()
			if yyl1225 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1225, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1226Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1226Slc
	var yyhl1226 bool = l >= 0
	for yyj1226 := 0; ; yyj1226++ {
		if yyhl1226 {
			if yyj1226 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1226Slc = r.DecodeBytes(yys1226Slc, true, true)
		yys1226 := string(yys1226Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1226 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1228 := &x.Backend
				yyv1228.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1226)
		} // end switch yys1226
	} // end for yyj1226
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1229 int
	var yyb1229 bool
	var yyhl1229 bool = l >= 0
	yyj1229++
	if yyhl1229 {
		yyb1229 = yyj1229 > l
	} else {
		yyb1229 = r.CheckBreak()
	}
	if yyb1229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1229++
	if yyhl1229 {
		yyb1229 = yyj1229 > l
	} else {
		yyb1229 = r.CheckBreak()
	}
	if yyb1229 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1231 := &x.Backend
		yyv1231.CodecDecodeSelf(d)
	}
	for {
		yyj1229++
		if yyhl1229 {
			yyb1229 = yyj1229 > l
		} else {
			yyb1229 = r.CheckBreak()
		}
		if yyb1229 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1229-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1232 := z.EncBinary()
		_ = yym1232
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1233 := !z.EncBinary()
			yy2arr1233 := z.EncBasicHandle().StructToArray
			var yyq1233 [2]bool
			_, _, _ = yysep1233, yyq1233, yy2arr1233
			const yyr1233 bool = false
			var yynn1233 int
			if yyr1233 || yy2arr1233 {
				r.EncodeArrayStart(2)
			} else {
				yynn1233 = 2
				for _, b := range yyq1233 {
					if b {
						yynn1233++
					}
				}
				r.EncodeMapStart(yynn1233)
				yynn1233 = 0
			}
			if yyr1233 || yy2arr1233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1235 := z.EncBinary()
				_ = yym1235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1236 := z.EncBinary()
				_ = yym1236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1233 || yy2arr1233 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1238 := &x.ServicePort
				yym1239 := z.EncBinary()
				_ = yym1239
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1238) {
				} else if !yym1239 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1238)
				} else {
					z.EncFallback(yy1238)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1240 := &x.ServicePort
				yym1241 := z.EncBinary()
				_ = yym1241
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1240) {
				} else if !yym1241 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1240)
				} else {
					z.EncFallback(yy1240)
				}
			}
			if yyr1233 || yy2arr1233 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1242 := z.DecBinary()
	_ = yym1242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1243 := r.ContainerType()
		if yyct1243 == codecSelferValueTypeMap1234 {
			yyl1243 := r.ReadMapStart()
			if yyl1243 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1243, d)
			}
		} else if yyct1243 == codecSelferValueTypeArray1234 {
			yyl1243 := r.ReadArrayStart()
			if yyl1243 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1243, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1244Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1244Slc
	var yyhl1244 bool = l >= 0
	for yyj1244 := 0; ; yyj1244++ {
		if yyhl1244 {
			if yyj1244 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1244Slc = r.DecodeBytes(yys1244Slc, true, true)
		yys1244 := string(yys1244Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1244 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_intstr.IntOrString{}
			} else {
				yyv1246 := &x.ServicePort
				yym1247 := z.DecBinary()
				_ = yym1247
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1246) {
				} else if !yym1247 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1246)
				} else {
					z.DecFallback(yyv1246, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1244)
		} // end switch yys1244
	} // end for yyj1244
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1248 int
	var yyb1248 bool
	var yyhl1248 bool = l >= 0
	yyj1248++
	if yyhl1248 {
		yyb1248 = yyj1248 > l
	} else {
		yyb1248 = r.CheckBreak()
	}
	if yyb1248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1248++
	if yyhl1248 {
		yyb1248 = yyj1248 > l
	} else {
		yyb1248 = r.CheckBreak()
	}
	if yyb1248 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_intstr.IntOrString{}
	} else {
		yyv1250 := &x.ServicePort
		yym1251 := z.DecBinary()
		_ = yym1251
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1250) {
		} else if !yym1251 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1250)
		} else {
			z.DecFallback(yyv1250, false)
		}
	}
	for {
		yyj1248++
		if yyhl1248 {
			yyb1248 = yyj1248 > l
		} else {
			yyb1248 = r.CheckBreak()
		}
		if yyb1248 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1248-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1252 := z.EncBinary()
	_ = yym1252
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1253 := z.DecBinary()
	_ = yym1253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1254 := z.EncBinary()
		_ = yym1254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1255 := !z.EncBinary()
			yy2arr1255 := z.EncBasicHandle().StructToArray
			var yyq1255 [2]bool
			_, _, _ = yysep1255, yyq1255, yy2arr1255
			const yyr1255 bool = false
			var yynn1255 int
			if yyr1255 || yy2arr1255 {
				r.EncodeArrayStart(2)
			} else {
				yynn1255 = 2
				for _, b := range yyq1255 {
					if b {
						yynn1255++
					}
				}
				r.EncodeMapStart(yynn1255)
				yynn1255 = 0
			}
			if yyr1255 || yy2arr1255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1255 || yy2arr1255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1258 := z.EncBinary()
				_ = yym1258
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1259 := z.EncBinary()
				_ = yym1259
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1255 || yy2arr1255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1260 := z.DecBinary()
	_ = yym1260
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1261 := r.ContainerType()
		if yyct1261 == codecSelferValueTypeMap1234 {
			yyl1261 := r.ReadMapStart()
			if yyl1261 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1261, d)
			}
		} else if yyct1261 == codecSelferValueTypeArray1234 {
			yyl1261 := r.ReadArrayStart()
			if yyl1261 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1261, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1262Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1262Slc
	var yyhl1262 bool = l >= 0
	for yyj1262 := 0; ; yyj1262++ {
		if yyhl1262 {
			if yyj1262 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1262Slc = r.DecodeBytes(yys1262Slc, true, true)
		yys1262 := string(yys1262Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1262 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1262)
		} // end switch yys1262
	} // end for yyj1262
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1265 int
	var yyb1265 bool
	var yyhl1265 bool = l >= 0
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1265++
	if yyhl1265 {
		yyb1265 = yyj1265 > l
	} else {
		yyb1265 = r.CheckBreak()
	}
	if yyb1265 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1265++
		if yyhl1265 {
			yyb1265 = yyj1265 > l
		} else {
			yyb1265 = r.CheckBreak()
		}
		if yyb1265 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1265-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1268 := z.EncBinary()
		_ = yym1268
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1269 := !z.EncBinary()
			yy2arr1269 := z.EncBasicHandle().StructToArray
			var yyq1269 [3]bool
			_, _, _ = yysep1269, yyq1269, yy2arr1269
			const yyr1269 bool = false
			var yynn1269 int
			if yyr1269 || yy2arr1269 {
				r.EncodeArrayStart(3)
			} else {
				yynn1269 = 3
				for _, b := range yyq1269 {
					if b {
						yynn1269++
					}
				}
				r.EncodeMapStart(yynn1269)
				yynn1269 = 0
			}
			if yyr1269 || yy2arr1269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1271 := z.EncBinary()
				_ = yym1271
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1272 := z.EncBinary()
				_ = yym1272
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1269 || yy2arr1269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1274 := z.EncBinary()
				_ = yym1274
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1275 := z.EncBinary()
				_ = yym1275
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1269 || yy2arr1269 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1277 := z.EncBinary()
					_ = yym1277
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1278 := z.EncBinary()
					_ = yym1278
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1269 || yy2arr1269 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1279 := z.DecBinary()
	_ = yym1279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1280 := r.ContainerType()
		if yyct1280 == codecSelferValueTypeMap1234 {
			yyl1280 := r.ReadMapStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1280, d)
			}
		} else if yyct1280 == codecSelferValueTypeArray1234 {
			yyl1280 := r.ReadArrayStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1281Slc
	var yyhl1281 bool = l >= 0
	for yyj1281 := 0; ; yyj1281++ {
		if yyhl1281 {
			if yyj1281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1281Slc = r.DecodeBytes(yys1281Slc, true, true)
		yys1281 := string(yys1281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1281 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int32(r.DecodeInt(32))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int32(r.DecodeInt(32))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1284 := &x.TargetUtilization
				yym1285 := z.DecBinary()
				_ = yym1285
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1284), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1281)
		} // end switch yys1281
	} // end for yyj1281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1286 int
	var yyb1286 bool
	var yyhl1286 bool = l >= 0
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int32(r.DecodeInt(32))
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int32(r.DecodeInt(32))
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1289 := &x.TargetUtilization
		yym1290 := z.DecBinary()
		_ = yym1290
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1289), d)
		}
	}
	for {
		yyj1286++
		if yyhl1286 {
			yyb1286 = yyj1286 > l
		} else {
			yyb1286 = r.CheckBreak()
		}
		if yyb1286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1291 := z.EncBinary()
		_ = yym1291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1292 := !z.EncBinary()
			yy2arr1292 := z.EncBasicHandle().StructToArray
			var yyq1292 [4]bool
			_, _, _ = yysep1292, yyq1292, yy2arr1292
			const yyr1292 bool = false
			yyq1292[0] = x.Kind != ""
			yyq1292[1] = x.APIVersion != ""
			yyq1292[2] = true
			yyq1292[3] = true
			var yynn1292 int
			if yyr1292 || yy2arr1292 {
				r.EncodeArrayStart(4)
			} else {
				yynn1292 = 0
				for _, b := range yyq1292 {
					if b {
						yynn1292++
					}
				}
				r.EncodeMapStart(yynn1292)
				yynn1292 = 0
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[0] {
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1292[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[1] {
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1292[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[2] {
					yy1300 := &x.ObjectMeta
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1300) {
					} else {
						z.EncFallback(yy1300)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1292[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1302 := &x.ObjectMeta
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1302) {
					} else {
						z.EncFallback(yy1302)
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[3] {
					yy1305 := &x.Spec
					yy1305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1292[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1306 := &x.Spec
					yy1306.CodecEncodeSelf(e)
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1307 := z.DecBinary()
	_ = yym1307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1308 := r.ContainerType()
		if yyct1308 == codecSelferValueTypeMap1234 {
			yyl1308 := r.ReadMapStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1308, d)
			}
		} else if yyct1308 == codecSelferValueTypeArray1234 {
			yyl1308 := r.ReadArrayStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1309Slc
	var yyhl1309 bool = l >= 0
	for yyj1309 := 0; ; yyj1309++ {
		if yyhl1309 {
			if yyj1309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1309Slc = r.DecodeBytes(yys1309Slc, true, true)
		yys1309 := string(yys1309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1309 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1312 := &x.ObjectMeta
				yym1313 := z.DecBinary()
				_ = yym1313
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1312) {
				} else {
					z.DecFallback(yyv1312, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1314 := &x.Spec
				yyv1314.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1309)
		} // end switch yys1309
	} // end for yyj1309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1315 int
	var yyb1315 bool
	var yyhl1315 bool = l >= 0
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1318 := &x.ObjectMeta
		yym1319 := z.DecBinary()
		_ = yym1319
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1318) {
		} else {
			z.DecFallback(yyv1318, false)
		}
	}
	yyj1315++
	if yyhl1315 {
		yyb1315 = yyj1315 > l
	} else {
		yyb1315 = r.CheckBreak()
	}
	if yyb1315 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1320 := &x.Spec
		yyv1320.CodecDecodeSelf(d)
	}
	for {
		yyj1315++
		if yyhl1315 {
			yyb1315 = yyj1315 > l
		} else {
			yyb1315 = r.CheckBreak()
		}
		if yyb1315 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1315-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1321 := z.EncBinary()
		_ = yym1321
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1322 := !z.EncBinary()
			yy2arr1322 := z.EncBasicHandle().StructToArray
			var yyq1322 [4]bool
			_, _, _ = yysep1322, yyq1322, yy2arr1322
			const yyr1322 bool = false
			yyq1322[0] = x.Kind != ""
			yyq1322[1] = x.APIVersion != ""
			yyq1322[2] = true
			var yynn1322 int
			if yyr1322 || yy2arr1322 {
				r.EncodeArrayStart(4)
			} else {
				yynn1322 = 1
				for _, b := range yyq1322 {
					if b {
						yynn1322++
					}
				}
				r.EncodeMapStart(yynn1322)
				yynn1322 = 0
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1322[0] {
					yym1324 := z.EncBinary()
					_ = yym1324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1322[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1325 := z.EncBinary()
					_ = yym1325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1322[1] {
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1322[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1322[2] {
					yy1330 := &x.ListMeta
					yym1331 := z.EncBinary()
					_ = yym1331
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1330) {
					} else {
						z.EncFallback(yy1330)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1322[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1332 := &x.ListMeta
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1332) {
					} else {
						z.EncFallback(yy1332)
					}
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1335 := z.EncBinary()
					_ = yym1335
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1322 || yy2arr1322 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1337 := z.DecBinary()
	_ = yym1337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1338 := r.ContainerType()
		if yyct1338 == codecSelferValueTypeMap1234 {
			yyl1338 := r.ReadMapStart()
			if yyl1338 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1338, d)
			}
		} else if yyct1338 == codecSelferValueTypeArray1234 {
			yyl1338 := r.ReadArrayStart()
			if yyl1338 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1338, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1339Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1339Slc
	var yyhl1339 bool = l >= 0
	for yyj1339 := 0; ; yyj1339++ {
		if yyhl1339 {
			if yyj1339 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1339Slc = r.DecodeBytes(yys1339Slc, true, true)
		yys1339 := string(yys1339Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1339 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1342 := &x.ListMeta
				yym1343 := z.DecBinary()
				_ = yym1343
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1342) {
				} else {
					z.DecFallback(yyv1342, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1344 := &x.Items
				yym1345 := z.DecBinary()
				_ = yym1345
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1344), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1339)
		} // end switch yys1339
	} // end for yyj1339
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1346 int
	var yyb1346 bool
	var yyhl1346 bool = l >= 0
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1349 := &x.ListMeta
		yym1350 := z.DecBinary()
		_ = yym1350
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1349) {
		} else {
			z.DecFallback(yyv1349, false)
		}
	}
	yyj1346++
	if yyhl1346 {
		yyb1346 = yyj1346 > l
	} else {
		yyb1346 = r.CheckBreak()
	}
	if yyb1346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1351 := &x.Items
		yym1352 := z.DecBinary()
		_ = yym1352
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1351), d)
		}
	}
	for {
		yyj1346++
		if yyhl1346 {
			yyb1346 = yyj1346 > l
		} else {
			yyb1346 = r.CheckBreak()
		}
		if yyb1346 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1346-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1353 := z.EncBinary()
		_ = yym1353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1354 := !z.EncBinary()
			yy2arr1354 := z.EncBasicHandle().StructToArray
			var yyq1354 [4]bool
			_, _, _ = yysep1354, yyq1354, yy2arr1354
			const yyr1354 bool = false
			yyq1354[0] = x.Kind != ""
			yyq1354[1] = x.APIVersion != ""
			var yynn1354 int
			if yyr1354 || yy2arr1354 {
				r.EncodeArrayStart(4)
			} else {
				yynn1354 = 2
				for _, b := range yyq1354 {
					if b {
						yynn1354++
					}
				}
				r.EncodeMapStart(yynn1354)
				yynn1354 = 0
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[0] {
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1354[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1357 := z.EncBinary()
					_ = yym1357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[1] {
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1354[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1360 := z.EncBinary()
					_ = yym1360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1362 := z.EncBinary()
				_ = yym1362
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1363 := z.EncBinary()
				_ = yym1363
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1365 := z.EncBinary()
				_ = yym1365
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1366 := z.EncBinary()
				_ = yym1366
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1367 := z.DecBinary()
	_ = yym1367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1368 := r.ContainerType()
		if yyct1368 == codecSelferValueTypeMap1234 {
			yyl1368 := r.ReadMapStart()
			if yyl1368 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1368, d)
			}
		} else if yyct1368 == codecSelferValueTypeArray1234 {
			yyl1368 := r.ReadArrayStart()
			if yyl1368 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1369Slc
	var yyhl1369 bool = l >= 0
	for yyj1369 := 0; ; yyj1369++ {
		if yyhl1369 {
			if yyj1369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1369Slc = r.DecodeBytes(yys1369Slc, true, true)
		yys1369 := string(yys1369Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1369)
		} // end switch yys1369
	} // end for yyj1369
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1374 int
	var yyb1374 bool
	var yyhl1374 bool = l >= 0
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj1374++
		if yyhl1374 {
			yyb1374 = yyj1374 > l
		} else {
			yyb1374 = r.CheckBreak()
		}
		if yyb1374 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1374-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1379 := z.EncBinary()
		_ = yym1379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1380 := !z.EncBinary()
			yy2arr1380 := z.EncBasicHandle().StructToArray
			var yyq1380 [7]bool
			_, _, _ = yysep1380, yyq1380, yy2arr1380
			const yyr1380 bool = false
			yyq1380[0] = x.Kind != ""
			yyq1380[1] = x.APIVersion != ""
			yyq1380[2] = x.LabelSelector != ""
			yyq1380[3] = x.FieldSelector != ""
			yyq1380[4] = x.Watch != false
			yyq1380[5] = x.ResourceVersion != ""
			yyq1380[6] = x.TimeoutSeconds != nil
			var yynn1380 int
			if yyr1380 || yy2arr1380 {
				r.EncodeArrayStart(7)
			} else {
				yynn1380 = 0
				for _, b := range yyq1380 {
					if b {
						yynn1380++
					}
				}
				r.EncodeMapStart(yynn1380)
				yynn1380 = 0
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[0] {
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1380[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[1] {
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1380[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1386 := z.EncBinary()
					_ = yym1386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[2] {
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1380[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[3] {
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1380[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[4] {
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1380[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1395 := z.EncBinary()
					_ = yym1395
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[5] {
					yym1397 := z.EncBinary()
					_ = yym1397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1380[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1380[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy1400 := *x.TimeoutSeconds
						yym1401 := z.EncBinary()
						_ = yym1401
						if false {
						} else {
							r.EncodeInt(int64(yy1400))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1380[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy1402 := *x.TimeoutSeconds
						yym1403 := z.EncBinary()
						_ = yym1403
						if false {
						} else {
							r.EncodeInt(int64(yy1402))
						}
					}
				}
			}
			if yyr1380 || yy2arr1380 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1404 := z.DecBinary()
	_ = yym1404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1405 := r.ContainerType()
		if yyct1405 == codecSelferValueTypeMap1234 {
			yyl1405 := r.ReadMapStart()
			if yyl1405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1405, d)
			}
		} else if yyct1405 == codecSelferValueTypeArray1234 {
			yyl1405 := r.ReadArrayStart()
			if yyl1405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1406Slc
	var yyhl1406 bool = l >= 0
	for yyj1406 := 0; ; yyj1406++ {
		if yyhl1406 {
			if yyj1406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1406Slc = r.DecodeBytes(yys1406Slc, true, true)
		yys1406 := string(yys1406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1406 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym1414 := z.DecBinary()
				_ = yym1414
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1406)
		} // end switch yys1406
	} // end for yyj1406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1415 int
	var yyb1415 bool
	var yyhl1415 bool = l >= 0
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj1415++
	if yyhl1415 {
		yyb1415 = yyj1415 > l
	} else {
		yyb1415 = r.CheckBreak()
	}
	if yyb1415 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym1423 := z.DecBinary()
		_ = yym1423
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1415++
		if yyhl1415 {
			yyb1415 = yyj1415 > l
		} else {
			yyb1415 = r.CheckBreak()
		}
		if yyb1415 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1415-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1424 := z.EncBinary()
		_ = yym1424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1425 := !z.EncBinary()
			yy2arr1425 := z.EncBasicHandle().StructToArray
			var yyq1425 [2]bool
			_, _, _ = yysep1425, yyq1425, yy2arr1425
			const yyr1425 bool = false
			yyq1425[0] = len(x.MatchLabels) != 0
			yyq1425[1] = len(x.MatchExpressions) != 0
			var yynn1425 int
			if yyr1425 || yy2arr1425 {
				r.EncodeArrayStart(2)
			} else {
				yynn1425 = 0
				for _, b := range yyq1425 {
					if b {
						yynn1425++
					}
				}
				r.EncodeMapStart(yynn1425)
				yynn1425 = 0
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1427 := z.EncBinary()
						_ = yym1427
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1428 := z.EncBinary()
						_ = yym1428
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1425[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1430 := z.EncBinary()
						_ = yym1430
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1431 := z.EncBinary()
						_ = yym1431
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1425 || yy2arr1425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1432 := z.DecBinary()
	_ = yym1432
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1433 := r.ContainerType()
		if yyct1433 == codecSelferValueTypeMap1234 {
			yyl1433 := r.ReadMapStart()
			if yyl1433 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1433, d)
			}
		} else if yyct1433 == codecSelferValueTypeArray1234 {
			yyl1433 := r.ReadArrayStart()
			if yyl1433 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1433, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1434Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1434Slc
	var yyhl1434 bool = l >= 0
	for yyj1434 := 0; ; yyj1434++ {
		if yyhl1434 {
			if yyj1434 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1434Slc = r.DecodeBytes(yys1434Slc, true, true)
		yys1434 := string(yys1434Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1434 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1435 := &x.MatchLabels
				yym1436 := z.DecBinary()
				_ = yym1436
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1435, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1437 := &x.MatchExpressions
				yym1438 := z.DecBinary()
				_ = yym1438
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1437), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1434)
		} // end switch yys1434
	} // end for yyj1434
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1439 int
	var yyb1439 bool
	var yyhl1439 bool = l >= 0
	yyj1439++
	if yyhl1439 {
		yyb1439 = yyj1439 > l
	} else {
		yyb1439 = r.CheckBreak()
	}
	if yyb1439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1440 := &x.MatchLabels
		yym1441 := z.DecBinary()
		_ = yym1441
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1440, false, d)
		}
	}
	yyj1439++
	if yyhl1439 {
		yyb1439 = yyj1439 > l
	} else {
		yyb1439 = r.CheckBreak()
	}
	if yyb1439 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1442 := &x.MatchExpressions
		yym1443 := z.DecBinary()
		_ = yym1443
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1442), d)
		}
	}
	for {
		yyj1439++
		if yyhl1439 {
			yyb1439 = yyj1439 > l
		} else {
			yyb1439 = r.CheckBreak()
		}
		if yyb1439 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1439-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1444 := z.EncBinary()
		_ = yym1444
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1445 := !z.EncBinary()
			yy2arr1445 := z.EncBasicHandle().StructToArray
			var yyq1445 [3]bool
			_, _, _ = yysep1445, yyq1445, yy2arr1445
			const yyr1445 bool = false
			yyq1445[2] = len(x.Values) != 0
			var yynn1445 int
			if yyr1445 || yy2arr1445 {
				r.EncodeArrayStart(3)
			} else {
				yynn1445 = 2
				for _, b := range yyq1445 {
					if b {
						yynn1445++
					}
				}
				r.EncodeMapStart(yynn1445)
				yynn1445 = 0
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1447 := z.EncBinary()
				_ = yym1447
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1448 := z.EncBinary()
				_ = yym1448
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1445[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1451 := z.EncBinary()
						_ = yym1451
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1445[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1452 := z.EncBinary()
						_ = yym1452
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1445 || yy2arr1445 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1453 := z.DecBinary()
	_ = yym1453
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1454 := r.ContainerType()
		if yyct1454 == codecSelferValueTypeMap1234 {
			yyl1454 := r.ReadMapStart()
			if yyl1454 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1454, d)
			}
		} else if yyct1454 == codecSelferValueTypeArray1234 {
			yyl1454 := r.ReadArrayStart()
			if yyl1454 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1454, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1455Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1455Slc
	var yyhl1455 bool = l >= 0
	for yyj1455 := 0; ; yyj1455++ {
		if yyhl1455 {
			if yyj1455 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1455Slc = r.DecodeBytes(yys1455Slc, true, true)
		yys1455 := string(yys1455Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1455 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1458 := &x.Values
				yym1459 := z.DecBinary()
				_ = yym1459
				if false {
				} else {
					z.F.DecSliceStringX(yyv1458, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1455)
		} // end switch yys1455
	} // end for yyj1455
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1460 int
	var yyb1460 bool
	var yyhl1460 bool = l >= 0
	yyj1460++
	if yyhl1460 {
		yyb1460 = yyj1460 > l
	} else {
		yyb1460 = r.CheckBreak()
	}
	if yyb1460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1460++
	if yyhl1460 {
		yyb1460 = yyj1460 > l
	} else {
		yyb1460 = r.CheckBreak()
	}
	if yyb1460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1460++
	if yyhl1460 {
		yyb1460 = yyj1460 > l
	} else {
		yyb1460 = r.CheckBreak()
	}
	if yyb1460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1463 := &x.Values
		yym1464 := z.DecBinary()
		_ = yym1464
		if false {
		} else {
			z.F.DecSliceStringX(yyv1463, false, d)
		}
	}
	for {
		yyj1460++
		if yyhl1460 {
			yyb1460 = yyj1460 > l
		} else {
			yyb1460 = r.CheckBreak()
		}
		if yyb1460 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1460-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1465 := z.EncBinary()
	_ = yym1465
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1466 := z.DecBinary()
	_ = yym1466
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1467 := z.EncBinary()
		_ = yym1467
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1468 := !z.EncBinary()
			yy2arr1468 := z.EncBasicHandle().StructToArray
			var yyq1468 [5]bool
			_, _, _ = yysep1468, yyq1468, yy2arr1468
			const yyr1468 bool = false
			yyq1468[0] = x.Kind != ""
			yyq1468[1] = x.APIVersion != ""
			yyq1468[2] = true
			yyq1468[3] = true
			yyq1468[4] = true
			var yynn1468 int
			if yyr1468 || yy2arr1468 {
				r.EncodeArrayStart(5)
			} else {
				yynn1468 = 0
				for _, b := range yyq1468 {
					if b {
						yynn1468++
					}
				}
				r.EncodeMapStart(yynn1468)
				yynn1468 = 0
			}
			if yyr1468 || yy2arr1468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1468[0] {
					yym1470 := z.EncBinary()
					_ = yym1470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1468[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1471 := z.EncBinary()
					_ = yym1471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1468 || yy2arr1468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1468[1] {
					yym1473 := z.EncBinary()
					_ = yym1473
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1468[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1474 := z.EncBinary()
					_ = yym1474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1468 || yy2arr1468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1468[2] {
					yy1476 := &x.ObjectMeta
					yym1477 := z.EncBinary()
					_ = yym1477
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1476) {
					} else {
						z.EncFallback(yy1476)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1468[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1478 := &x.ObjectMeta
					yym1479 := z.EncBinary()
					_ = yym1479
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1478) {
					} else {
						z.EncFallback(yy1478)
					}
				}
			}
			if yyr1468 || yy2arr1468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1468[3] {
					yy1481 := &x.Spec
					yy1481.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1468[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1482 := &x.Spec
					yy1482.CodecEncodeSelf(e)
				}
			}
			if yyr1468 || yy2arr1468 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1468[4] {
					yy1484 := &x.Status
					yy1484.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1468[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1485 := &x.Status
					yy1485.CodecEncodeSelf(e)
				}
			}
			if yyr1468 || yy2arr1468 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1486 := z.DecBinary()
	_ = yym1486
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1487 := r.ContainerType()
		if yyct1487 == codecSelferValueTypeMap1234 {
			yyl1487 := r.ReadMapStart()
			if yyl1487 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1487, d)
			}
		} else if yyct1487 == codecSelferValueTypeArray1234 {
			yyl1487 := r.ReadArrayStart()
			if yyl1487 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1487, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1488Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1488Slc
	var yyhl1488 bool = l >= 0
	for yyj1488 := 0; ; yyj1488++ {
		if yyhl1488 {
			if yyj1488 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1488Slc = r.DecodeBytes(yys1488Slc, true, true)
		yys1488 := string(yys1488Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1488 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1491 := &x.ObjectMeta
				yym1492 := z.DecBinary()
				_ = yym1492
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1491) {
				} else {
					z.DecFallback(yyv1491, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1493 := &x.Spec
				yyv1493.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1494 := &x.Status
				yyv1494.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1488)
		} // end switch yys1488
	} // end for yyj1488
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1495 int
	var yyb1495 bool
	var yyhl1495 bool = l >= 0
	yyj1495++
	if yyhl1495 {
		yyb1495 = yyj1495 > l
	} else {
		yyb1495 = r.CheckBreak()
	}
	if yyb1495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1495++
	if yyhl1495 {
		yyb1495 = yyj1495 > l
	} else {
		yyb1495 = r.CheckBreak()
	}
	if yyb1495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1495++
	if yyhl1495 {
		yyb1495 = yyj1495 > l
	} else {
		yyb1495 = r.CheckBreak()
	}
	if yyb1495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1498 := &x.ObjectMeta
		yym1499 := z.DecBinary()
		_ = yym1499
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1498) {
		} else {
			z.DecFallback(yyv1498, false)
		}
	}
	yyj1495++
	if yyhl1495 {
		yyb1495 = yyj1495 > l
	} else {
		yyb1495 = r.CheckBreak()
	}
	if yyb1495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1500 := &x.Spec
		yyv1500.CodecDecodeSelf(d)
	}
	yyj1495++
	if yyhl1495 {
		yyb1495 = yyj1495 > l
	} else {
		yyb1495 = r.CheckBreak()
	}
	if yyb1495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1501 := &x.Status
		yyv1501.CodecDecodeSelf(d)
	}
	for {
		yyj1495++
		if yyhl1495 {
			yyb1495 = yyj1495 > l
		} else {
			yyb1495 = r.CheckBreak()
		}
		if yyb1495 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1495-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1502 := z.EncBinary()
		_ = yym1502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1503 := !z.EncBinary()
			yy2arr1503 := z.EncBasicHandle().StructToArray
			var yyq1503 [4]bool
			_, _, _ = yysep1503, yyq1503, yy2arr1503
			const yyr1503 bool = false
			yyq1503[0] = x.Kind != ""
			yyq1503[1] = x.APIVersion != ""
			yyq1503[2] = true
			var yynn1503 int
			if yyr1503 || yy2arr1503 {
				r.EncodeArrayStart(4)
			} else {
				yynn1503 = 1
				for _, b := range yyq1503 {
					if b {
						yynn1503++
					}
				}
				r.EncodeMapStart(yynn1503)
				yynn1503 = 0
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[0] {
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[1] {
					yym1508 := z.EncBinary()
					_ = yym1508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1503[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1503[2] {
					yy1511 := &x.ListMeta
					yym1512 := z.EncBinary()
					_ = yym1512
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1511) {
					} else {
						z.EncFallback(yy1511)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1503[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1513 := &x.ListMeta
					yym1514 := z.EncBinary()
					_ = yym1514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1513) {
					} else {
						z.EncFallback(yy1513)
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1517 := z.EncBinary()
					_ = yym1517
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1503 || yy2arr1503 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1518 := z.DecBinary()
	_ = yym1518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1519 := r.ContainerType()
		if yyct1519 == codecSelferValueTypeMap1234 {
			yyl1519 := r.ReadMapStart()
			if yyl1519 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1519, d)
			}
		} else if yyct1519 == codecSelferValueTypeArray1234 {
			yyl1519 := r.ReadArrayStart()
			if yyl1519 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1520Slc
	var yyhl1520 bool = l >= 0
	for yyj1520 := 0; ; yyj1520++ {
		if yyhl1520 {
			if yyj1520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1520Slc = r.DecodeBytes(yys1520Slc, true, true)
		yys1520 := string(yys1520Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1520 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1523 := &x.ListMeta
				yym1524 := z.DecBinary()
				_ = yym1524
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1523) {
				} else {
					z.DecFallback(yyv1523, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1525 := &x.Items
				yym1526 := z.DecBinary()
				_ = yym1526
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1525), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1520)
		} // end switch yys1520
	} // end for yyj1520
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1527 int
	var yyb1527 bool
	var yyhl1527 bool = l >= 0
	yyj1527++
	if yyhl1527 {
		yyb1527 = yyj1527 > l
	} else {
		yyb1527 = r.CheckBreak()
	}
	if yyb1527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1527++
	if yyhl1527 {
		yyb1527 = yyj1527 > l
	} else {
		yyb1527 = r.CheckBreak()
	}
	if yyb1527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1527++
	if yyhl1527 {
		yyb1527 = yyj1527 > l
	} else {
		yyb1527 = r.CheckBreak()
	}
	if yyb1527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1530 := &x.ListMeta
		yym1531 := z.DecBinary()
		_ = yym1531
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1530) {
		} else {
			z.DecFallback(yyv1530, false)
		}
	}
	yyj1527++
	if yyhl1527 {
		yyb1527 = yyj1527 > l
	} else {
		yyb1527 = r.CheckBreak()
	}
	if yyb1527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1532 := &x.Items
		yym1533 := z.DecBinary()
		_ = yym1533
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1532), d)
		}
	}
	for {
		yyj1527++
		if yyhl1527 {
			yyb1527 = yyj1527 > l
		} else {
			yyb1527 = r.CheckBreak()
		}
		if yyb1527 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1527-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1534 := z.EncBinary()
		_ = yym1534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1535 := !z.EncBinary()
			yy2arr1535 := z.EncBasicHandle().StructToArray
			var yyq1535 [3]bool
			_, _, _ = yysep1535, yyq1535, yy2arr1535
			const yyr1535 bool = false
			yyq1535[0] = x.Replicas != nil
			yyq1535[1] = x.Selector != nil
			yyq1535[2] = x.Template != nil
			var yynn1535 int
			if yyr1535 || yy2arr1535 {
				r.EncodeArrayStart(3)
			} else {
				yynn1535 = 0
				for _, b := range yyq1535 {
					if b {
						yynn1535++
					}
				}
				r.EncodeMapStart(yynn1535)
				yynn1535 = 0
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1535[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1537 := *x.Replicas
						yym1538 := z.EncBinary()
						_ = yym1538
						if false {
						} else {
							r.EncodeInt(int64(yy1537))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1535[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1539 := *x.Replicas
						yym1540 := z.EncBinary()
						_ = yym1540
						if false {
						} else {
							r.EncodeInt(int64(yy1539))
						}
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1535[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1535[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1535[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym1543 := z.EncBinary()
						_ = yym1543
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1535[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						yym1544 := z.EncBinary()
						_ = yym1544
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Template) {
						} else {
							z.EncFallback(x.Template)
						}
					}
				}
			}
			if yyr1535 || yy2arr1535 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1545 := z.DecBinary()
	_ = yym1545
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1546 := r.ContainerType()
		if yyct1546 == codecSelferValueTypeMap1234 {
			yyl1546 := r.ReadMapStart()
			if yyl1546 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1546, d)
			}
		} else if yyct1546 == codecSelferValueTypeArray1234 {
			yyl1546 := r.ReadArrayStart()
			if yyl1546 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1546, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1547Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1547Slc
	var yyhl1547 bool = l >= 0
	for yyj1547 := 0; ; yyj1547++ {
		if yyhl1547 {
			if yyj1547 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1547Slc = r.DecodeBytes(yys1547Slc, true, true)
		yys1547 := string(yys1547Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1547 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym1549 := z.DecBinary()
				_ = yym1549
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_v1.PodTemplateSpec)
				}
				yym1552 := z.DecBinary()
				_ = yym1552
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Template) {
				} else {
					z.DecFallback(x.Template, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1547)
		} // end switch yys1547
	} // end for yyj1547
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1553 int
	var yyb1553 bool
	var yyhl1553 bool = l >= 0
	yyj1553++
	if yyhl1553 {
		yyb1553 = yyj1553 > l
	} else {
		yyb1553 = r.CheckBreak()
	}
	if yyb1553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym1555 := z.DecBinary()
		_ = yym1555
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj1553++
	if yyhl1553 {
		yyb1553 = yyj1553 > l
	} else {
		yyb1553 = r.CheckBreak()
	}
	if yyb1553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1553++
	if yyhl1553 {
		yyb1553 = yyj1553 > l
	} else {
		yyb1553 = r.CheckBreak()
	}
	if yyb1553 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_v1.PodTemplateSpec)
		}
		yym1558 := z.DecBinary()
		_ = yym1558
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Template) {
		} else {
			z.DecFallback(x.Template, false)
		}
	}
	for {
		yyj1553++
		if yyhl1553 {
			yyb1553 = yyj1553 > l
		} else {
			yyb1553 = r.CheckBreak()
		}
		if yyb1553 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1553-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1559 := z.EncBinary()
		_ = yym1559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1560 := !z.EncBinary()
			yy2arr1560 := z.EncBasicHandle().StructToArray
			var yyq1560 [2]bool
			_, _, _ = yysep1560, yyq1560, yy2arr1560
			const yyr1560 bool = false
			yyq1560[1] = x.ObservedGeneration != 0
			var yynn1560 int
			if yyr1560 || yy2arr1560 {
				r.EncodeArrayStart(2)
			} else {
				yynn1560 = 1
				for _, b := range yyq1560 {
					if b {
						yynn1560++
					}
				}
				r.EncodeMapStart(yynn1560)
				yynn1560 = 0
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1562 := z.EncBinary()
				_ = yym1562
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1563 := z.EncBinary()
				_ = yym1563
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1560[1] {
					yym1565 := z.EncBinary()
					_ = yym1565
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1560[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1566 := z.EncBinary()
					_ = yym1566
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1560 || yy2arr1560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1567 := z.DecBinary()
	_ = yym1567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1568 := r.ContainerType()
		if yyct1568 == codecSelferValueTypeMap1234 {
			yyl1568 := r.ReadMapStart()
			if yyl1568 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1568, d)
			}
		} else if yyct1568 == codecSelferValueTypeArray1234 {
			yyl1568 := r.ReadArrayStart()
			if yyl1568 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1568, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1569Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1569Slc
	var yyhl1569 bool = l >= 0
	for yyj1569 := 0; ; yyj1569++ {
		if yyhl1569 {
			if yyj1569 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1569Slc = r.DecodeBytes(yys1569Slc, true, true)
		yys1569 := string(yys1569Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1569 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1569)
		} // end switch yys1569
	} // end for yyj1569
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1572 int
	var yyb1572 bool
	var yyhl1572 bool = l >= 0
	yyj1572++
	if yyhl1572 {
		yyb1572 = yyj1572 > l
	} else {
		yyb1572 = r.CheckBreak()
	}
	if yyb1572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj1572++
	if yyhl1572 {
		yyb1572 = yyj1572 > l
	} else {
		yyb1572 = r.CheckBreak()
	}
	if yyb1572 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1572++
		if yyhl1572 {
			yyb1572 = yyj1572 > l
		} else {
			yyb1572 = r.CheckBreak()
		}
		if yyb1572 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1572-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1575 := z.EncBinary()
		_ = yym1575
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1576 := !z.EncBinary()
			yy2arr1576 := z.EncBasicHandle().StructToArray
			var yyq1576 [4]bool
			_, _, _ = yysep1576, yyq1576, yy2arr1576
			const yyr1576 bool = false
			yyq1576[0] = x.Kind != ""
			yyq1576[1] = x.APIVersion != ""
			yyq1576[2] = true
			yyq1576[3] = true
			var yynn1576 int
			if yyr1576 || yy2arr1576 {
				r.EncodeArrayStart(4)
			} else {
				yynn1576 = 0
				for _, b := range yyq1576 {
					if b {
						yynn1576++
					}
				}
				r.EncodeMapStart(yynn1576)
				yynn1576 = 0
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1576[0] {
					yym1578 := z.EncBinary()
					_ = yym1578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1576[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1579 := z.EncBinary()
					_ = yym1579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1576[1] {
					yym1581 := z.EncBinary()
					_ = yym1581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1576[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1582 := z.EncBinary()
					_ = yym1582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1576[2] {
					yy1584 := &x.ObjectMeta
					yym1585 := z.EncBinary()
					_ = yym1585
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1584) {
					} else {
						z.EncFallback(yy1584)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1576[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1586 := &x.ObjectMeta
					yym1587 := z.EncBinary()
					_ = yym1587
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1586) {
					} else {
						z.EncFallback(yy1586)
					}
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1576[3] {
					yy1589 := &x.Spec
					yy1589.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1576[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1590 := &x.Spec
					yy1590.CodecEncodeSelf(e)
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1591 := z.DecBinary()
	_ = yym1591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1592 := r.ContainerType()
		if yyct1592 == codecSelferValueTypeMap1234 {
			yyl1592 := r.ReadMapStart()
			if yyl1592 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1592, d)
			}
		} else if yyct1592 == codecSelferValueTypeArray1234 {
			yyl1592 := r.ReadArrayStart()
			if yyl1592 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1593Slc
	var yyhl1593 bool = l >= 0
	for yyj1593 := 0; ; yyj1593++ {
		if yyhl1593 {
			if yyj1593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1593Slc = r.DecodeBytes(yys1593Slc, true, true)
		yys1593 := string(yys1593Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1593 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1596 := &x.ObjectMeta
				yym1597 := z.DecBinary()
				_ = yym1597
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1596) {
				} else {
					z.DecFallback(yyv1596, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSecurityPolicySpec{}
			} else {
				yyv1598 := &x.Spec
				yyv1598.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1593)
		} // end switch yys1593
	} // end for yyj1593
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1599 int
	var yyb1599 bool
	var yyhl1599 bool = l >= 0
	yyj1599++
	if yyhl1599 {
		yyb1599 = yyj1599 > l
	} else {
		yyb1599 = r.CheckBreak()
	}
	if yyb1599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1599++
	if yyhl1599 {
		yyb1599 = yyj1599 > l
	} else {
		yyb1599 = r.CheckBreak()
	}
	if yyb1599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1599++
	if yyhl1599 {
		yyb1599 = yyj1599 > l
	} else {
		yyb1599 = r.CheckBreak()
	}
	if yyb1599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1602 := &x.ObjectMeta
		yym1603 := z.DecBinary()
		_ = yym1603
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1602) {
		} else {
			z.DecFallback(yyv1602, false)
		}
	}
	yyj1599++
	if yyhl1599 {
		yyb1599 = yyj1599 > l
	} else {
		yyb1599 = r.CheckBreak()
	}
	if yyb1599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSecurityPolicySpec{}
	} else {
		yyv1604 := &x.Spec
		yyv1604.CodecDecodeSelf(d)
	}
	for {
		yyj1599++
		if yyhl1599 {
			yyb1599 = yyj1599 > l
		} else {
			yyb1599 = r.CheckBreak()
		}
		if yyb1599 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1599-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1605 := z.EncBinary()
		_ = yym1605
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1606 := !z.EncBinary()
			yy2arr1606 := z.EncBasicHandle().StructToArray
			var yyq1606 [9]bool
			_, _, _ = yysep1606, yyq1606, yy2arr1606
			const yyr1606 bool = false
			yyq1606[0] = x.Privileged != false
			yyq1606[1] = len(x.Capabilities) != 0
			yyq1606[2] = len(x.Volumes) != 0
			yyq1606[3] = x.HostNetwork != false
			yyq1606[4] = len(x.HostPorts) != 0
			yyq1606[5] = x.HostPID != false
			yyq1606[6] = x.HostIPC != false
			yyq1606[7] = true
			yyq1606[8] = true
			var yynn1606 int
			if yyr1606 || yy2arr1606 {
				r.EncodeArrayStart(9)
			} else {
				yynn1606 = 0
				for _, b := range yyq1606 {
					if b {
						yynn1606++
					}
				}
				r.EncodeMapStart(yynn1606)
				yynn1606 = 0
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[0] {
					yym1608 := z.EncBinary()
					_ = yym1608
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1606[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1609 := z.EncBinary()
					_ = yym1609
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[1] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						yym1611 := z.EncBinary()
						_ = yym1611
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.Capabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1606[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						yym1612 := z.EncBinary()
						_ = yym1612
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.Capabilities), e)
						}
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[2] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1614 := z.EncBinary()
						_ = yym1614
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1606[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1615 := z.EncBinary()
						_ = yym1615
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[3] {
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1606[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1618 := z.EncBinary()
					_ = yym1618
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[4] {
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1620 := z.EncBinary()
						_ = yym1620
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1606[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPorts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1621 := z.EncBinary()
						_ = yym1621
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[5] {
					yym1623 := z.EncBinary()
					_ = yym1623
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1606[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[6] {
					yym1626 := z.EncBinary()
					_ = yym1626
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1606[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1627 := z.EncBinary()
					_ = yym1627
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[7] {
					yy1629 := &x.SELinuxContext
					yy1629.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1606[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1630 := &x.SELinuxContext
					yy1630.CodecEncodeSelf(e)
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[8] {
					yy1632 := &x.RunAsUser
					yy1632.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1606[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1633 := &x.RunAsUser
					yy1633.CodecEncodeSelf(e)
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1634 := z.DecBinary()
	_ = yym1634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1635 := r.ContainerType()
		if yyct1635 == codecSelferValueTypeMap1234 {
			yyl1635 := r.ReadMapStart()
			if yyl1635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1635, d)
			}
		} else if yyct1635 == codecSelferValueTypeArray1234 {
			yyl1635 := r.ReadArrayStart()
			if yyl1635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1636Slc
	var yyhl1636 bool = l >= 0
	for yyj1636 := 0; ; yyj1636++ {
		if yyhl1636 {
			if yyj1636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1636Slc = r.DecodeBytes(yys1636Slc, true, true)
		yys1636 := string(yys1636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1636 {
		case "privileged":
			if r.TryDecodeAsNil() {
				x.Privileged = false
			} else {
				x.Privileged = bool(r.DecodeBool())
			}
		case "capabilities":
			if r.TryDecodeAsNil() {
				x.Capabilities = nil
			} else {
				yyv1638 := &x.Capabilities
				yym1639 := z.DecBinary()
				_ = yym1639
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1638), d)
				}
			}
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1640 := &x.Volumes
				yym1641 := z.DecBinary()
				_ = yym1641
				if false {
				} else {
					h.decSliceFSType((*[]FSType)(yyv1640), d)
				}
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPorts":
			if r.TryDecodeAsNil() {
				x.HostPorts = nil
			} else {
				yyv1643 := &x.HostPorts
				yym1644 := z.DecBinary()
				_ = yym1644
				if false {
				} else {
					h.decSliceHostPortRange((*[]HostPortRange)(yyv1643), d)
				}
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxContext":
			if r.TryDecodeAsNil() {
				x.SELinuxContext = SELinuxContextStrategyOptions{}
			} else {
				yyv1647 := &x.SELinuxContext
				yyv1647.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				x.RunAsUser = RunAsUserStrategyOptions{}
			} else {
				yyv1648 := &x.RunAsUser
				yyv1648.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1636)
		} // end switch yys1636
	} // end for yyj1636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1649 int
	var yyb1649 bool
	var yyhl1649 bool = l >= 0
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Privileged = false
	} else {
		x.Privileged = bool(r.DecodeBool())
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capabilities = nil
	} else {
		yyv1651 := &x.Capabilities
		yym1652 := z.DecBinary()
		_ = yym1652
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1651), d)
		}
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1653 := &x.Volumes
		yym1654 := z.DecBinary()
		_ = yym1654
		if false {
		} else {
			h.decSliceFSType((*[]FSType)(yyv1653), d)
		}
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPorts = nil
	} else {
		yyv1656 := &x.HostPorts
		yym1657 := z.DecBinary()
		_ = yym1657
		if false {
		} else {
			h.decSliceHostPortRange((*[]HostPortRange)(yyv1656), d)
		}
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SELinuxContext = SELinuxContextStrategyOptions{}
	} else {
		yyv1660 := &x.SELinuxContext
		yyv1660.CodecDecodeSelf(d)
	}
	yyj1649++
	if yyhl1649 {
		yyb1649 = yyj1649 > l
	} else {
		yyb1649 = r.CheckBreak()
	}
	if yyb1649 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RunAsUser = RunAsUserStrategyOptions{}
	} else {
		yyv1661 := &x.RunAsUser
		yyv1661.CodecDecodeSelf(d)
	}
	for {
		yyj1649++
		if yyhl1649 {
			yyb1649 = yyj1649 > l
		} else {
			yyb1649 = r.CheckBreak()
		}
		if yyb1649 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1649-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1662 := z.EncBinary()
	_ = yym1662
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1663 := z.DecBinary()
	_ = yym1663
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPortRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1664 := z.EncBinary()
		_ = yym1664
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1665 := !z.EncBinary()
			yy2arr1665 := z.EncBasicHandle().StructToArray
			var yyq1665 [2]bool
			_, _, _ = yysep1665, yyq1665, yy2arr1665
			const yyr1665 bool = false
			var yynn1665 int
			if yyr1665 || yy2arr1665 {
				r.EncodeArrayStart(2)
			} else {
				yynn1665 = 2
				for _, b := range yyq1665 {
					if b {
						yynn1665++
					}
				}
				r.EncodeMapStart(yynn1665)
				yynn1665 = 0
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1667 := z.EncBinary()
				_ = yym1667
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1668 := z.EncBinary()
				_ = yym1668
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1670 := z.EncBinary()
				_ = yym1670
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1671 := z.EncBinary()
				_ = yym1671
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1665 || yy2arr1665 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPortRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1672 := z.DecBinary()
	_ = yym1672
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1673 := r.ContainerType()
		if yyct1673 == codecSelferValueTypeMap1234 {
			yyl1673 := r.ReadMapStart()
			if yyl1673 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1673, d)
			}
		} else if yyct1673 == codecSelferValueTypeArray1234 {
			yyl1673 := r.ReadArrayStart()
			if yyl1673 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1673, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPortRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1674Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1674Slc
	var yyhl1674 bool = l >= 0
	for yyj1674 := 0; ; yyj1674++ {
		if yyhl1674 {
			if yyj1674 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1674Slc = r.DecodeBytes(yys1674Slc, true, true)
		yys1674 := string(yys1674Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1674 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int32(r.DecodeInt(32))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1674)
		} // end switch yys1674
	} // end for yyj1674
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPortRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1677 int
	var yyb1677 bool
	var yyhl1677 bool = l >= 0
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int32(r.DecodeInt(32))
	}
	yyj1677++
	if yyhl1677 {
		yyb1677 = yyj1677 > l
	} else {
		yyb1677 = r.CheckBreak()
	}
	if yyb1677 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int32(r.DecodeInt(32))
	}
	for {
		yyj1677++
		if yyhl1677 {
			yyb1677 = yyj1677 > l
		} else {
			yyb1677 = r.CheckBreak()
		}
		if yyb1677 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1677-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxContextStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1680 := z.EncBinary()
		_ = yym1680
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1681 := !z.EncBinary()
			yy2arr1681 := z.EncBasicHandle().StructToArray
			var yyq1681 [2]bool
			_, _, _ = yysep1681, yyq1681, yy2arr1681
			const yyr1681 bool = false
			yyq1681[1] = x.SELinuxOptions != nil
			var yynn1681 int
			if yyr1681 || yy2arr1681 {
				r.EncodeArrayStart(2)
			} else {
				yynn1681 = 1
				for _, b := range yyq1681 {
					if b {
						yynn1681++
					}
				}
				r.EncodeMapStart(yynn1681)
				yynn1681 = 0
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1681[1] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						yym1684 := z.EncBinary()
						_ = yym1684
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SELinuxOptions) {
						} else {
							z.EncFallback(x.SELinuxOptions)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1681[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						yym1685 := z.EncBinary()
						_ = yym1685
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SELinuxOptions) {
						} else {
							z.EncFallback(x.SELinuxOptions)
						}
					}
				}
			}
			if yyr1681 || yy2arr1681 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxContextStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1686 := z.DecBinary()
	_ = yym1686
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1687 := r.ContainerType()
		if yyct1687 == codecSelferValueTypeMap1234 {
			yyl1687 := r.ReadMapStart()
			if yyl1687 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1687, d)
			}
		} else if yyct1687 == codecSelferValueTypeArray1234 {
			yyl1687 := r.ReadArrayStart()
			if yyl1687 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1687, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxContextStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1688Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1688Slc
	var yyhl1688 bool = l >= 0
	for yyj1688 := 0; ; yyj1688++ {
		if yyhl1688 {
			if yyj1688 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1688Slc = r.DecodeBytes(yys1688Slc, true, true)
		yys1688 := string(yys1688Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1688 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SELinuxContextStrategy(r.DecodeString())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(pkg2_v1.SELinuxOptions)
				}
				yym1691 := z.DecBinary()
				_ = yym1691
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SELinuxOptions) {
				} else {
					z.DecFallback(x.SELinuxOptions, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1688)
		} // end switch yys1688
	} // end for yyj1688
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxContextStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1692 int
	var yyb1692 bool
	var yyhl1692 bool = l >= 0
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SELinuxContextStrategy(r.DecodeString())
	}
	yyj1692++
	if yyhl1692 {
		yyb1692 = yyj1692 > l
	} else {
		yyb1692 = r.CheckBreak()
	}
	if yyb1692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(pkg2_v1.SELinuxOptions)
		}
		yym1695 := z.DecBinary()
		_ = yym1695
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SELinuxOptions) {
		} else {
			z.DecFallback(x.SELinuxOptions, false)
		}
	}
	for {
		yyj1692++
		if yyhl1692 {
			yyb1692 = yyj1692 > l
		} else {
			yyb1692 = r.CheckBreak()
		}
		if yyb1692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SELinuxContextStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1696 := z.EncBinary()
	_ = yym1696
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SELinuxContextStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1697 := z.DecBinary()
	_ = yym1697
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RunAsUserStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1698 := z.EncBinary()
		_ = yym1698
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1699 := !z.EncBinary()
			yy2arr1699 := z.EncBasicHandle().StructToArray
			var yyq1699 [2]bool
			_, _, _ = yysep1699, yyq1699, yy2arr1699
			const yyr1699 bool = false
			yyq1699[1] = len(x.Ranges) != 0
			var yynn1699 int
			if yyr1699 || yy2arr1699 {
				r.EncodeArrayStart(2)
			} else {
				yynn1699 = 1
				for _, b := range yyq1699 {
					if b {
						yynn1699++
					}
				}
				r.EncodeMapStart(yynn1699)
				yynn1699 = 0
			}
			if yyr1699 || yy2arr1699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1699 || yy2arr1699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1699[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1702 := z.EncBinary()
						_ = yym1702
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1699[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1703 := z.EncBinary()
						_ = yym1703
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1699 || yy2arr1699 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RunAsUserStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1704 := z.DecBinary()
	_ = yym1704
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1705 := r.ContainerType()
		if yyct1705 == codecSelferValueTypeMap1234 {
			yyl1705 := r.ReadMapStart()
			if yyl1705 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1705, d)
			}
		} else if yyct1705 == codecSelferValueTypeArray1234 {
			yyl1705 := r.ReadArrayStart()
			if yyl1705 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1705, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1706Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1706Slc
	var yyhl1706 bool = l >= 0
	for yyj1706 := 0; ; yyj1706++ {
		if yyhl1706 {
			if yyj1706 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1706Slc = r.DecodeBytes(yys1706Slc, true, true)
		yys1706 := string(yys1706Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1706 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = RunAsUserStrategy(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1708 := &x.Ranges
				yym1709 := z.DecBinary()
				_ = yym1709
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1708), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1706)
		} // end switch yys1706
	} // end for yyj1706
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1710 int
	var yyb1710 bool
	var yyhl1710 bool = l >= 0
	yyj1710++
	if yyhl1710 {
		yyb1710 = yyj1710 > l
	} else {
		yyb1710 = r.CheckBreak()
	}
	if yyb1710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = RunAsUserStrategy(r.DecodeString())
	}
	yyj1710++
	if yyhl1710 {
		yyb1710 = yyj1710 > l
	} else {
		yyb1710 = r.CheckBreak()
	}
	if yyb1710 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1712 := &x.Ranges
		yym1713 := z.DecBinary()
		_ = yym1713
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1712), d)
		}
	}
	for {
		yyj1710++
		if yyhl1710 {
			yyb1710 = yyj1710 > l
		} else {
			yyb1710 = r.CheckBreak()
		}
		if yyb1710 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1710-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IDRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1714 := z.EncBinary()
		_ = yym1714
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1715 := !z.EncBinary()
			yy2arr1715 := z.EncBasicHandle().StructToArray
			var yyq1715 [2]bool
			_, _, _ = yysep1715, yyq1715, yy2arr1715
			const yyr1715 bool = false
			var yynn1715 int
			if yyr1715 || yy2arr1715 {
				r.EncodeArrayStart(2)
			} else {
				yynn1715 = 2
				for _, b := range yyq1715 {
					if b {
						yynn1715++
					}
				}
				r.EncodeMapStart(yynn1715)
				yynn1715 = 0
			}
			if yyr1715 || yy2arr1715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1717 := z.EncBinary()
				_ = yym1717
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1718 := z.EncBinary()
				_ = yym1718
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1715 || yy2arr1715 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1720 := z.EncBinary()
				_ = yym1720
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1721 := z.EncBinary()
				_ = yym1721
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1715 || yy2arr1715 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IDRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1722 := z.DecBinary()
	_ = yym1722
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1723 := r.ContainerType()
		if yyct1723 == codecSelferValueTypeMap1234 {
			yyl1723 := r.ReadMapStart()
			if yyl1723 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1723, d)
			}
		} else if yyct1723 == codecSelferValueTypeArray1234 {
			yyl1723 := r.ReadArrayStart()
			if yyl1723 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1723, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IDRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1724Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1724Slc
	var yyhl1724 bool = l >= 0
	for yyj1724 := 0; ; yyj1724++ {
		if yyhl1724 {
			if yyj1724 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1724Slc = r.DecodeBytes(yys1724Slc, true, true)
		yys1724 := string(yys1724Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1724 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int64(r.DecodeInt(64))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1724)
		} // end switch yys1724
	} // end for yyj1724
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IDRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1727 int
	var yyb1727 bool
	var yyhl1727 bool = l >= 0
	yyj1727++
	if yyhl1727 {
		yyb1727 = yyj1727 > l
	} else {
		yyb1727 = r.CheckBreak()
	}
	if yyb1727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int64(r.DecodeInt(64))
	}
	yyj1727++
	if yyhl1727 {
		yyb1727 = yyj1727 > l
	} else {
		yyb1727 = r.CheckBreak()
	}
	if yyb1727 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int64(r.DecodeInt(64))
	}
	for {
		yyj1727++
		if yyhl1727 {
			yyb1727 = yyj1727 > l
		} else {
			yyb1727 = r.CheckBreak()
		}
		if yyb1727 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1727-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RunAsUserStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1730 := z.EncBinary()
	_ = yym1730
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RunAsUserStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1731 := z.DecBinary()
	_ = yym1731
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSecurityPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1732 := z.EncBinary()
		_ = yym1732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1733 := !z.EncBinary()
			yy2arr1733 := z.EncBasicHandle().StructToArray
			var yyq1733 [4]bool
			_, _, _ = yysep1733, yyq1733, yy2arr1733
			const yyr1733 bool = false
			yyq1733[0] = x.Kind != ""
			yyq1733[1] = x.APIVersion != ""
			yyq1733[2] = true
			var yynn1733 int
			if yyr1733 || yy2arr1733 {
				r.EncodeArrayStart(4)
			} else {
				yynn1733 = 1
				for _, b := range yyq1733 {
					if b {
						yynn1733++
					}
				}
				r.EncodeMapStart(yynn1733)
				yynn1733 = 0
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[0] {
					yym1735 := z.EncBinary()
					_ = yym1735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1733[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1736 := z.EncBinary()
					_ = yym1736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[1] {
					yym1738 := z.EncBinary()
					_ = yym1738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1733[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1739 := z.EncBinary()
					_ = yym1739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1733[2] {
					yy1741 := &x.ListMeta
					yym1742 := z.EncBinary()
					_ = yym1742
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1741) {
					} else {
						z.EncFallback(yy1741)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1733[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1743 := &x.ListMeta
					yym1744 := z.EncBinary()
					_ = yym1744
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1743) {
					} else {
						z.EncFallback(yy1743)
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1747 := z.EncBinary()
					_ = yym1747
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			}
			if yyr1733 || yy2arr1733 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1748 := z.DecBinary()
	_ = yym1748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1749 := r.ContainerType()
		if yyct1749 == codecSelferValueTypeMap1234 {
			yyl1749 := r.ReadMapStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1749, d)
			}
		} else if yyct1749 == codecSelferValueTypeArray1234 {
			yyl1749 := r.ReadArrayStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1750Slc
	var yyhl1750 bool = l >= 0
	for yyj1750 := 0; ; yyj1750++ {
		if yyhl1750 {
			if yyj1750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1750Slc = r.DecodeBytes(yys1750Slc, true, true)
		yys1750 := string(yys1750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1750 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1753 := &x.ListMeta
				yym1754 := z.DecBinary()
				_ = yym1754
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1753) {
				} else {
					z.DecFallback(yyv1753, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1755 := &x.Items
				yym1756 := z.DecBinary()
				_ = yym1756
				if false {
				} else {
					h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1755), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1750)
		} // end switch yys1750
	} // end for yyj1750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1757 int
	var yyb1757 bool
	var yyhl1757 bool = l >= 0
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1760 := &x.ListMeta
		yym1761 := z.DecBinary()
		_ = yym1761
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1760) {
		} else {
			z.DecFallback(yyv1760, false)
		}
	}
	yyj1757++
	if yyhl1757 {
		yyb1757 = yyj1757 > l
	} else {
		yyb1757 = r.CheckBreak()
	}
	if yyb1757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1762 := &x.Items
		yym1763 := z.DecBinary()
		_ = yym1763
		if false {
		} else {
			h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1762), d)
		}
	}
	for {
		yyj1757++
		if yyhl1757 {
			yyb1757 = yyj1757 > l
		} else {
			yyb1757 = r.CheckBreak()
		}
		if yyb1757 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1757-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1764 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1765 := &yyv1764
		yy1765.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1766 := *v
	yyh1766, yyl1766 := z.DecSliceHelperStart()
	var yyc1766 bool
	if yyl1766 == 0 {
		if yyv1766 == nil {
			yyv1766 = []CustomMetricTarget{}
			yyc1766 = true
		} else if len(yyv1766) != 0 {
			yyv1766 = yyv1766[:0]
			yyc1766 = true
		}
	} else if yyl1766 > 0 {
		var yyrr1766, yyrl1766 int
		var yyrt1766 bool
		if yyl1766 > cap(yyv1766) {

			yyrg1766 := len(yyv1766) > 0
			yyv21766 := yyv1766
			yyrl1766, yyrt1766 = z.DecInferLen(yyl1766, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1766 {
				if yyrl1766 <= cap(yyv1766) {
					yyv1766 = yyv1766[:yyrl1766]
				} else {
					yyv1766 = make([]CustomMetricTarget, yyrl1766)
				}
			} else {
				yyv1766 = make([]CustomMetricTarget, yyrl1766)
			}
			yyc1766 = true
			yyrr1766 = len(yyv1766)
			if yyrg1766 {
				copy(yyv1766, yyv21766)
			}
		} else if yyl1766 != len(yyv1766) {
			yyv1766 = yyv1766[:yyl1766]
			yyc1766 = true
		}
		yyj1766 := 0
		for ; yyj1766 < yyrr1766; yyj1766++ {
			yyh1766.ElemContainerState(yyj1766)
			if r.TryDecodeAsNil() {
				yyv1766[yyj1766] = CustomMetricTarget{}
			} else {
				yyv1767 := &yyv1766[yyj1766]
				yyv1767.CodecDecodeSelf(d)
			}

		}
		if yyrt1766 {
			for ; yyj1766 < yyl1766; yyj1766++ {
				yyv1766 = append(yyv1766, CustomMetricTarget{})
				yyh1766.ElemContainerState(yyj1766)
				if r.TryDecodeAsNil() {
					yyv1766[yyj1766] = CustomMetricTarget{}
				} else {
					yyv1768 := &yyv1766[yyj1766]
					yyv1768.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1766 := 0
		for ; !r.CheckBreak(); yyj1766++ {

			if yyj1766 >= len(yyv1766) {
				yyv1766 = append(yyv1766, CustomMetricTarget{}) // var yyz1766 CustomMetricTarget
				yyc1766 = true
			}
			yyh1766.ElemContainerState(yyj1766)
			if yyj1766 < len(yyv1766) {
				if r.TryDecodeAsNil() {
					yyv1766[yyj1766] = CustomMetricTarget{}
				} else {
					yyv1769 := &yyv1766[yyj1766]
					yyv1769.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1766 < len(yyv1766) {
			yyv1766 = yyv1766[:yyj1766]
			yyc1766 = true
		} else if yyj1766 == 0 && yyv1766 == nil {
			yyv1766 = []CustomMetricTarget{}
			yyc1766 = true
		}
	}
	yyh1766.End()
	if yyc1766 {
		*v = yyv1766
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1770 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1771 := &yyv1770
		yy1771.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1772 := *v
	yyh1772, yyl1772 := z.DecSliceHelperStart()
	var yyc1772 bool
	if yyl1772 == 0 {
		if yyv1772 == nil {
			yyv1772 = []CustomMetricCurrentStatus{}
			yyc1772 = true
		} else if len(yyv1772) != 0 {
			yyv1772 = yyv1772[:0]
			yyc1772 = true
		}
	} else if yyl1772 > 0 {
		var yyrr1772, yyrl1772 int
		var yyrt1772 bool
		if yyl1772 > cap(yyv1772) {

			yyrg1772 := len(yyv1772) > 0
			yyv21772 := yyv1772
			yyrl1772, yyrt1772 = z.DecInferLen(yyl1772, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1772 {
				if yyrl1772 <= cap(yyv1772) {
					yyv1772 = yyv1772[:yyrl1772]
				} else {
					yyv1772 = make([]CustomMetricCurrentStatus, yyrl1772)
				}
			} else {
				yyv1772 = make([]CustomMetricCurrentStatus, yyrl1772)
			}
			yyc1772 = true
			yyrr1772 = len(yyv1772)
			if yyrg1772 {
				copy(yyv1772, yyv21772)
			}
		} else if yyl1772 != len(yyv1772) {
			yyv1772 = yyv1772[:yyl1772]
			yyc1772 = true
		}
		yyj1772 := 0
		for ; yyj1772 < yyrr1772; yyj1772++ {
			yyh1772.ElemContainerState(yyj1772)
			if r.TryDecodeAsNil() {
				yyv1772[yyj1772] = CustomMetricCurrentStatus{}
			} else {
				yyv1773 := &yyv1772[yyj1772]
				yyv1773.CodecDecodeSelf(d)
			}

		}
		if yyrt1772 {
			for ; yyj1772 < yyl1772; yyj1772++ {
				yyv1772 = append(yyv1772, CustomMetricCurrentStatus{})
				yyh1772.ElemContainerState(yyj1772)
				if r.TryDecodeAsNil() {
					yyv1772[yyj1772] = CustomMetricCurrentStatus{}
				} else {
					yyv1774 := &yyv1772[yyj1772]
					yyv1774.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1772 := 0
		for ; !r.CheckBreak(); yyj1772++ {

			if yyj1772 >= len(yyv1772) {
				yyv1772 = append(yyv1772, CustomMetricCurrentStatus{}) // var yyz1772 CustomMetricCurrentStatus
				yyc1772 = true
			}
			yyh1772.ElemContainerState(yyj1772)
			if yyj1772 < len(yyv1772) {
				if r.TryDecodeAsNil() {
					yyv1772[yyj1772] = CustomMetricCurrentStatus{}
				} else {
					yyv1775 := &yyv1772[yyj1772]
					yyv1775.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1772 < len(yyv1772) {
			yyv1772 = yyv1772[:yyj1772]
			yyc1772 = true
		} else if yyj1772 == 0 && yyv1772 == nil {
			yyv1772 = []CustomMetricCurrentStatus{}
			yyc1772 = true
		}
	}
	yyh1772.End()
	if yyc1772 {
		*v = yyv1772
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1776 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1777 := &yyv1776
		yy1777.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1778 := *v
	yyh1778, yyl1778 := z.DecSliceHelperStart()
	var yyc1778 bool
	if yyl1778 == 0 {
		if yyv1778 == nil {
			yyv1778 = []HorizontalPodAutoscaler{}
			yyc1778 = true
		} else if len(yyv1778) != 0 {
			yyv1778 = yyv1778[:0]
			yyc1778 = true
		}
	} else if yyl1778 > 0 {
		var yyrr1778, yyrl1778 int
		var yyrt1778 bool
		if yyl1778 > cap(yyv1778) {

			yyrg1778 := len(yyv1778) > 0
			yyv21778 := yyv1778
			yyrl1778, yyrt1778 = z.DecInferLen(yyl1778, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt1778 {
				if yyrl1778 <= cap(yyv1778) {
					yyv1778 = yyv1778[:yyrl1778]
				} else {
					yyv1778 = make([]HorizontalPodAutoscaler, yyrl1778)
				}
			} else {
				yyv1778 = make([]HorizontalPodAutoscaler, yyrl1778)
			}
			yyc1778 = true
			yyrr1778 = len(yyv1778)
			if yyrg1778 {
				copy(yyv1778, yyv21778)
			}
		} else if yyl1778 != len(yyv1778) {
			yyv1778 = yyv1778[:yyl1778]
			yyc1778 = true
		}
		yyj1778 := 0
		for ; yyj1778 < yyrr1778; yyj1778++ {
			yyh1778.ElemContainerState(yyj1778)
			if r.TryDecodeAsNil() {
				yyv1778[yyj1778] = HorizontalPodAutoscaler{}
			} else {
				yyv1779 := &yyv1778[yyj1778]
				yyv1779.CodecDecodeSelf(d)
			}

		}
		if yyrt1778 {
			for ; yyj1778 < yyl1778; yyj1778++ {
				yyv1778 = append(yyv1778, HorizontalPodAutoscaler{})
				yyh1778.ElemContainerState(yyj1778)
				if r.TryDecodeAsNil() {
					yyv1778[yyj1778] = HorizontalPodAutoscaler{}
				} else {
					yyv1780 := &yyv1778[yyj1778]
					yyv1780.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1778 := 0
		for ; !r.CheckBreak(); yyj1778++ {

			if yyj1778 >= len(yyv1778) {
				yyv1778 = append(yyv1778, HorizontalPodAutoscaler{}) // var yyz1778 HorizontalPodAutoscaler
				yyc1778 = true
			}
			yyh1778.ElemContainerState(yyj1778)
			if yyj1778 < len(yyv1778) {
				if r.TryDecodeAsNil() {
					yyv1778[yyj1778] = HorizontalPodAutoscaler{}
				} else {
					yyv1781 := &yyv1778[yyj1778]
					yyv1781.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1778 < len(yyv1778) {
			yyv1778 = yyv1778[:yyj1778]
			yyc1778 = true
		} else if yyj1778 == 0 && yyv1778 == nil {
			yyv1778 = []HorizontalPodAutoscaler{}
			yyc1778 = true
		}
	}
	yyh1778.End()
	if yyc1778 {
		*v = yyv1778
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1782 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1783 := &yyv1782
		yy1783.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1784 := *v
	yyh1784, yyl1784 := z.DecSliceHelperStart()
	var yyc1784 bool
	if yyl1784 == 0 {
		if yyv1784 == nil {
			yyv1784 = []APIVersion{}
			yyc1784 = true
		} else if len(yyv1784) != 0 {
			yyv1784 = yyv1784[:0]
			yyc1784 = true
		}
	} else if yyl1784 > 0 {
		var yyrr1784, yyrl1784 int
		var yyrt1784 bool
		if yyl1784 > cap(yyv1784) {

			yyrg1784 := len(yyv1784) > 0
			yyv21784 := yyv1784
			yyrl1784, yyrt1784 = z.DecInferLen(yyl1784, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1784 {
				if yyrl1784 <= cap(yyv1784) {
					yyv1784 = yyv1784[:yyrl1784]
				} else {
					yyv1784 = make([]APIVersion, yyrl1784)
				}
			} else {
				yyv1784 = make([]APIVersion, yyrl1784)
			}
			yyc1784 = true
			yyrr1784 = len(yyv1784)
			if yyrg1784 {
				copy(yyv1784, yyv21784)
			}
		} else if yyl1784 != len(yyv1784) {
			yyv1784 = yyv1784[:yyl1784]
			yyc1784 = true
		}
		yyj1784 := 0
		for ; yyj1784 < yyrr1784; yyj1784++ {
			yyh1784.ElemContainerState(yyj1784)
			if r.TryDecodeAsNil() {
				yyv1784[yyj1784] = APIVersion{}
			} else {
				yyv1785 := &yyv1784[yyj1784]
				yyv1785.CodecDecodeSelf(d)
			}

		}
		if yyrt1784 {
			for ; yyj1784 < yyl1784; yyj1784++ {
				yyv1784 = append(yyv1784, APIVersion{})
				yyh1784.ElemContainerState(yyj1784)
				if r.TryDecodeAsNil() {
					yyv1784[yyj1784] = APIVersion{}
				} else {
					yyv1786 := &yyv1784[yyj1784]
					yyv1786.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1784 := 0
		for ; !r.CheckBreak(); yyj1784++ {

			if yyj1784 >= len(yyv1784) {
				yyv1784 = append(yyv1784, APIVersion{}) // var yyz1784 APIVersion
				yyc1784 = true
			}
			yyh1784.ElemContainerState(yyj1784)
			if yyj1784 < len(yyv1784) {
				if r.TryDecodeAsNil() {
					yyv1784[yyj1784] = APIVersion{}
				} else {
					yyv1787 := &yyv1784[yyj1784]
					yyv1787.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1784 < len(yyv1784) {
			yyv1784 = yyv1784[:yyj1784]
			yyc1784 = true
		} else if yyj1784 == 0 && yyv1784 == nil {
			yyv1784 = []APIVersion{}
			yyc1784 = true
		}
	}
	yyh1784.End()
	if yyc1784 {
		*v = yyv1784
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1788 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1789 := &yyv1788
		yy1789.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1790 := *v
	yyh1790, yyl1790 := z.DecSliceHelperStart()
	var yyc1790 bool
	if yyl1790 == 0 {
		if yyv1790 == nil {
			yyv1790 = []ThirdPartyResource{}
			yyc1790 = true
		} else if len(yyv1790) != 0 {
			yyv1790 = yyv1790[:0]
			yyc1790 = true
		}
	} else if yyl1790 > 0 {
		var yyrr1790, yyrl1790 int
		var yyrt1790 bool
		if yyl1790 > cap(yyv1790) {

			yyrg1790 := len(yyv1790) > 0
			yyv21790 := yyv1790
			yyrl1790, yyrt1790 = z.DecInferLen(yyl1790, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1790 {
				if yyrl1790 <= cap(yyv1790) {
					yyv1790 = yyv1790[:yyrl1790]
				} else {
					yyv1790 = make([]ThirdPartyResource, yyrl1790)
				}
			} else {
				yyv1790 = make([]ThirdPartyResource, yyrl1790)
			}
			yyc1790 = true
			yyrr1790 = len(yyv1790)
			if yyrg1790 {
				copy(yyv1790, yyv21790)
			}
		} else if yyl1790 != len(yyv1790) {
			yyv1790 = yyv1790[:yyl1790]
			yyc1790 = true
		}
		yyj1790 := 0
		for ; yyj1790 < yyrr1790; yyj1790++ {
			yyh1790.ElemContainerState(yyj1790)
			if r.TryDecodeAsNil() {
				yyv1790[yyj1790] = ThirdPartyResource{}
			} else {
				yyv1791 := &yyv1790[yyj1790]
				yyv1791.CodecDecodeSelf(d)
			}

		}
		if yyrt1790 {
			for ; yyj1790 < yyl1790; yyj1790++ {
				yyv1790 = append(yyv1790, ThirdPartyResource{})
				yyh1790.ElemContainerState(yyj1790)
				if r.TryDecodeAsNil() {
					yyv1790[yyj1790] = ThirdPartyResource{}
				} else {
					yyv1792 := &yyv1790[yyj1790]
					yyv1792.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1790 := 0
		for ; !r.CheckBreak(); yyj1790++ {

			if yyj1790 >= len(yyv1790) {
				yyv1790 = append(yyv1790, ThirdPartyResource{}) // var yyz1790 ThirdPartyResource
				yyc1790 = true
			}
			yyh1790.ElemContainerState(yyj1790)
			if yyj1790 < len(yyv1790) {
				if r.TryDecodeAsNil() {
					yyv1790[yyj1790] = ThirdPartyResource{}
				} else {
					yyv1793 := &yyv1790[yyj1790]
					yyv1793.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1790 < len(yyv1790) {
			yyv1790 = yyv1790[:yyj1790]
			yyc1790 = true
		} else if yyj1790 == 0 && yyv1790 == nil {
			yyv1790 = []ThirdPartyResource{}
			yyc1790 = true
		}
	}
	yyh1790.End()
	if yyc1790 {
		*v = yyv1790
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1794 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1795 := &yyv1794
		yy1795.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1796 := *v
	yyh1796, yyl1796 := z.DecSliceHelperStart()
	var yyc1796 bool
	if yyl1796 == 0 {
		if yyv1796 == nil {
			yyv1796 = []Deployment{}
			yyc1796 = true
		} else if len(yyv1796) != 0 {
			yyv1796 = yyv1796[:0]
			yyc1796 = true
		}
	} else if yyl1796 > 0 {
		var yyrr1796, yyrl1796 int
		var yyrt1796 bool
		if yyl1796 > cap(yyv1796) {

			yyrg1796 := len(yyv1796) > 0
			yyv21796 := yyv1796
			yyrl1796, yyrt1796 = z.DecInferLen(yyl1796, z.DecBasicHandle().MaxInitLen, 640)
			if yyrt1796 {
				if yyrl1796 <= cap(yyv1796) {
					yyv1796 = yyv1796[:yyrl1796]
				} else {
					yyv1796 = make([]Deployment, yyrl1796)
				}
			} else {
				yyv1796 = make([]Deployment, yyrl1796)
			}
			yyc1796 = true
			yyrr1796 = len(yyv1796)
			if yyrg1796 {
				copy(yyv1796, yyv21796)
			}
		} else if yyl1796 != len(yyv1796) {
			yyv1796 = yyv1796[:yyl1796]
			yyc1796 = true
		}
		yyj1796 := 0
		for ; yyj1796 < yyrr1796; yyj1796++ {
			yyh1796.ElemContainerState(yyj1796)
			if r.TryDecodeAsNil() {
				yyv1796[yyj1796] = Deployment{}
			} else {
				yyv1797 := &yyv1796[yyj1796]
				yyv1797.CodecDecodeSelf(d)
			}

		}
		if yyrt1796 {
			for ; yyj1796 < yyl1796; yyj1796++ {
				yyv1796 = append(yyv1796, Deployment{})
				yyh1796.ElemContainerState(yyj1796)
				if r.TryDecodeAsNil() {
					yyv1796[yyj1796] = Deployment{}
				} else {
					yyv1798 := &yyv1796[yyj1796]
					yyv1798.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1796 := 0
		for ; !r.CheckBreak(); yyj1796++ {

			if yyj1796 >= len(yyv1796) {
				yyv1796 = append(yyv1796, Deployment{}) // var yyz1796 Deployment
				yyc1796 = true
			}
			yyh1796.ElemContainerState(yyj1796)
			if yyj1796 < len(yyv1796) {
				if r.TryDecodeAsNil() {
					yyv1796[yyj1796] = Deployment{}
				} else {
					yyv1799 := &yyv1796[yyj1796]
					yyv1799.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1796 < len(yyv1796) {
			yyv1796 = yyv1796[:yyj1796]
			yyc1796 = true
		} else if yyj1796 == 0 && yyv1796 == nil {
			yyv1796 = []Deployment{}
			yyc1796 = true
		}
	}
	yyh1796.End()
	if yyc1796 {
		*v = yyv1796
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1800 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1801 := &yyv1800
		yy1801.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1802 := *v
	yyh1802, yyl1802 := z.DecSliceHelperStart()
	var yyc1802 bool
	if yyl1802 == 0 {
		if yyv1802 == nil {
			yyv1802 = []DaemonSet{}
			yyc1802 = true
		} else if len(yyv1802) != 0 {
			yyv1802 = yyv1802[:0]
			yyc1802 = true
		}
	} else if yyl1802 > 0 {
		var yyrr1802, yyrl1802 int
		var yyrt1802 bool
		if yyl1802 > cap(yyv1802) {

			yyrg1802 := len(yyv1802) > 0
			yyv21802 := yyv1802
			yyrl1802, yyrt1802 = z.DecInferLen(yyl1802, z.DecBasicHandle().MaxInitLen, 600)
			if yyrt1802 {
				if yyrl1802 <= cap(yyv1802) {
					yyv1802 = yyv1802[:yyrl1802]
				} else {
					yyv1802 = make([]DaemonSet, yyrl1802)
				}
			} else {
				yyv1802 = make([]DaemonSet, yyrl1802)
			}
			yyc1802 = true
			yyrr1802 = len(yyv1802)
			if yyrg1802 {
				copy(yyv1802, yyv21802)
			}
		} else if yyl1802 != len(yyv1802) {
			yyv1802 = yyv1802[:yyl1802]
			yyc1802 = true
		}
		yyj1802 := 0
		for ; yyj1802 < yyrr1802; yyj1802++ {
			yyh1802.ElemContainerState(yyj1802)
			if r.TryDecodeAsNil() {
				yyv1802[yyj1802] = DaemonSet{}
			} else {
				yyv1803 := &yyv1802[yyj1802]
				yyv1803.CodecDecodeSelf(d)
			}

		}
		if yyrt1802 {
			for ; yyj1802 < yyl1802; yyj1802++ {
				yyv1802 = append(yyv1802, DaemonSet{})
				yyh1802.ElemContainerState(yyj1802)
				if r.TryDecodeAsNil() {
					yyv1802[yyj1802] = DaemonSet{}
				} else {
					yyv1804 := &yyv1802[yyj1802]
					yyv1804.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1802 := 0
		for ; !r.CheckBreak(); yyj1802++ {

			if yyj1802 >= len(yyv1802) {
				yyv1802 = append(yyv1802, DaemonSet{}) // var yyz1802 DaemonSet
				yyc1802 = true
			}
			yyh1802.ElemContainerState(yyj1802)
			if yyj1802 < len(yyv1802) {
				if r.TryDecodeAsNil() {
					yyv1802[yyj1802] = DaemonSet{}
				} else {
					yyv1805 := &yyv1802[yyj1802]
					yyv1805.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1802 < len(yyv1802) {
			yyv1802 = yyv1802[:yyj1802]
			yyc1802 = true
		} else if yyj1802 == 0 && yyv1802 == nil {
			yyv1802 = []DaemonSet{}
			yyc1802 = true
		}
	}
	yyh1802.End()
	if yyc1802 {
		*v = yyv1802
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1806 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1807 := &yyv1806
		yy1807.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1808 := *v
	yyh1808, yyl1808 := z.DecSliceHelperStart()
	var yyc1808 bool
	if yyl1808 == 0 {
		if yyv1808 == nil {
			yyv1808 = []ThirdPartyResourceData{}
			yyc1808 = true
		} else if len(yyv1808) != 0 {
			yyv1808 = yyv1808[:0]
			yyc1808 = true
		}
	} else if yyl1808 > 0 {
		var yyrr1808, yyrl1808 int
		var yyrt1808 bool
		if yyl1808 > cap(yyv1808) {

			yyrg1808 := len(yyv1808) > 0
			yyv21808 := yyv1808
			yyrl1808, yyrt1808 = z.DecInferLen(yyl1808, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1808 {
				if yyrl1808 <= cap(yyv1808) {
					yyv1808 = yyv1808[:yyrl1808]
				} else {
					yyv1808 = make([]ThirdPartyResourceData, yyrl1808)
				}
			} else {
				yyv1808 = make([]ThirdPartyResourceData, yyrl1808)
			}
			yyc1808 = true
			yyrr1808 = len(yyv1808)
			if yyrg1808 {
				copy(yyv1808, yyv21808)
			}
		} else if yyl1808 != len(yyv1808) {
			yyv1808 = yyv1808[:yyl1808]
			yyc1808 = true
		}
		yyj1808 := 0
		for ; yyj1808 < yyrr1808; yyj1808++ {
			yyh1808.ElemContainerState(yyj1808)
			if r.TryDecodeAsNil() {
				yyv1808[yyj1808] = ThirdPartyResourceData{}
			} else {
				yyv1809 := &yyv1808[yyj1808]
				yyv1809.CodecDecodeSelf(d)
			}

		}
		if yyrt1808 {
			for ; yyj1808 < yyl1808; yyj1808++ {
				yyv1808 = append(yyv1808, ThirdPartyResourceData{})
				yyh1808.ElemContainerState(yyj1808)
				if r.TryDecodeAsNil() {
					yyv1808[yyj1808] = ThirdPartyResourceData{}
				} else {
					yyv1810 := &yyv1808[yyj1808]
					yyv1810.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1808 := 0
		for ; !r.CheckBreak(); yyj1808++ {

			if yyj1808 >= len(yyv1808) {
				yyv1808 = append(yyv1808, ThirdPartyResourceData{}) // var yyz1808 ThirdPartyResourceData
				yyc1808 = true
			}
			yyh1808.ElemContainerState(yyj1808)
			if yyj1808 < len(yyv1808) {
				if r.TryDecodeAsNil() {
					yyv1808[yyj1808] = ThirdPartyResourceData{}
				} else {
					yyv1811 := &yyv1808[yyj1808]
					yyv1811.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1808 < len(yyv1808) {
			yyv1808 = yyv1808[:yyj1808]
			yyc1808 = true
		} else if yyj1808 == 0 && yyv1808 == nil {
			yyv1808 = []ThirdPartyResourceData{}
			yyc1808 = true
		}
	}
	yyh1808.End()
	if yyc1808 {
		*v = yyv1808
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1812 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1813 := &yyv1812
		yy1813.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1814 := *v
	yyh1814, yyl1814 := z.DecSliceHelperStart()
	var yyc1814 bool
	if yyl1814 == 0 {
		if yyv1814 == nil {
			yyv1814 = []Job{}
			yyc1814 = true
		} else if len(yyv1814) != 0 {
			yyv1814 = yyv1814[:0]
			yyc1814 = true
		}
	} else if yyl1814 > 0 {
		var yyrr1814, yyrl1814 int
		var yyrt1814 bool
		if yyl1814 > cap(yyv1814) {

			yyrg1814 := len(yyv1814) > 0
			yyv21814 := yyv1814
			yyrl1814, yyrt1814 = z.DecInferLen(yyl1814, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt1814 {
				if yyrl1814 <= cap(yyv1814) {
					yyv1814 = yyv1814[:yyrl1814]
				} else {
					yyv1814 = make([]Job, yyrl1814)
				}
			} else {
				yyv1814 = make([]Job, yyrl1814)
			}
			yyc1814 = true
			yyrr1814 = len(yyv1814)
			if yyrg1814 {
				copy(yyv1814, yyv21814)
			}
		} else if yyl1814 != len(yyv1814) {
			yyv1814 = yyv1814[:yyl1814]
			yyc1814 = true
		}
		yyj1814 := 0
		for ; yyj1814 < yyrr1814; yyj1814++ {
			yyh1814.ElemContainerState(yyj1814)
			if r.TryDecodeAsNil() {
				yyv1814[yyj1814] = Job{}
			} else {
				yyv1815 := &yyv1814[yyj1814]
				yyv1815.CodecDecodeSelf(d)
			}

		}
		if yyrt1814 {
			for ; yyj1814 < yyl1814; yyj1814++ {
				yyv1814 = append(yyv1814, Job{})
				yyh1814.ElemContainerState(yyj1814)
				if r.TryDecodeAsNil() {
					yyv1814[yyj1814] = Job{}
				} else {
					yyv1816 := &yyv1814[yyj1814]
					yyv1816.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1814 := 0
		for ; !r.CheckBreak(); yyj1814++ {

			if yyj1814 >= len(yyv1814) {
				yyv1814 = append(yyv1814, Job{}) // var yyz1814 Job
				yyc1814 = true
			}
			yyh1814.ElemContainerState(yyj1814)
			if yyj1814 < len(yyv1814) {
				if r.TryDecodeAsNil() {
					yyv1814[yyj1814] = Job{}
				} else {
					yyv1817 := &yyv1814[yyj1814]
					yyv1817.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1814 < len(yyv1814) {
			yyv1814 = yyv1814[:yyj1814]
			yyc1814 = true
		} else if yyj1814 == 0 && yyv1814 == nil {
			yyv1814 = []Job{}
			yyc1814 = true
		}
	}
	yyh1814.End()
	if yyc1814 {
		*v = yyv1814
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1818 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1819 := &yyv1818
		yy1819.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1820 := *v
	yyh1820, yyl1820 := z.DecSliceHelperStart()
	var yyc1820 bool
	if yyl1820 == 0 {
		if yyv1820 == nil {
			yyv1820 = []JobCondition{}
			yyc1820 = true
		} else if len(yyv1820) != 0 {
			yyv1820 = yyv1820[:0]
			yyc1820 = true
		}
	} else if yyl1820 > 0 {
		var yyrr1820, yyrl1820 int
		var yyrt1820 bool
		if yyl1820 > cap(yyv1820) {

			yyrg1820 := len(yyv1820) > 0
			yyv21820 := yyv1820
			yyrl1820, yyrt1820 = z.DecInferLen(yyl1820, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1820 {
				if yyrl1820 <= cap(yyv1820) {
					yyv1820 = yyv1820[:yyrl1820]
				} else {
					yyv1820 = make([]JobCondition, yyrl1820)
				}
			} else {
				yyv1820 = make([]JobCondition, yyrl1820)
			}
			yyc1820 = true
			yyrr1820 = len(yyv1820)
			if yyrg1820 {
				copy(yyv1820, yyv21820)
			}
		} else if yyl1820 != len(yyv1820) {
			yyv1820 = yyv1820[:yyl1820]
			yyc1820 = true
		}
		yyj1820 := 0
		for ; yyj1820 < yyrr1820; yyj1820++ {
			yyh1820.ElemContainerState(yyj1820)
			if r.TryDecodeAsNil() {
				yyv1820[yyj1820] = JobCondition{}
			} else {
				yyv1821 := &yyv1820[yyj1820]
				yyv1821.CodecDecodeSelf(d)
			}

		}
		if yyrt1820 {
			for ; yyj1820 < yyl1820; yyj1820++ {
				yyv1820 = append(yyv1820, JobCondition{})
				yyh1820.ElemContainerState(yyj1820)
				if r.TryDecodeAsNil() {
					yyv1820[yyj1820] = JobCondition{}
				} else {
					yyv1822 := &yyv1820[yyj1820]
					yyv1822.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1820 := 0
		for ; !r.CheckBreak(); yyj1820++ {

			if yyj1820 >= len(yyv1820) {
				yyv1820 = append(yyv1820, JobCondition{}) // var yyz1820 JobCondition
				yyc1820 = true
			}
			yyh1820.ElemContainerState(yyj1820)
			if yyj1820 < len(yyv1820) {
				if r.TryDecodeAsNil() {
					yyv1820[yyj1820] = JobCondition{}
				} else {
					yyv1823 := &yyv1820[yyj1820]
					yyv1823.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1820 < len(yyv1820) {
			yyv1820 = yyv1820[:yyj1820]
			yyc1820 = true
		} else if yyj1820 == 0 && yyv1820 == nil {
			yyv1820 = []JobCondition{}
			yyc1820 = true
		}
	}
	yyh1820.End()
	if yyc1820 {
		*v = yyv1820
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1824 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1825 := &yyv1824
		yy1825.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1826 := *v
	yyh1826, yyl1826 := z.DecSliceHelperStart()
	var yyc1826 bool
	if yyl1826 == 0 {
		if yyv1826 == nil {
			yyv1826 = []Ingress{}
			yyc1826 = true
		} else if len(yyv1826) != 0 {
			yyv1826 = yyv1826[:0]
			yyc1826 = true
		}
	} else if yyl1826 > 0 {
		var yyrr1826, yyrl1826 int
		var yyrt1826 bool
		if yyl1826 > cap(yyv1826) {

			yyrg1826 := len(yyv1826) > 0
			yyv21826 := yyv1826
			yyrl1826, yyrt1826 = z.DecInferLen(yyl1826, z.DecBasicHandle().MaxInitLen, 272)
			if yyrt1826 {
				if yyrl1826 <= cap(yyv1826) {
					yyv1826 = yyv1826[:yyrl1826]
				} else {
					yyv1826 = make([]Ingress, yyrl1826)
				}
			} else {
				yyv1826 = make([]Ingress, yyrl1826)
			}
			yyc1826 = true
			yyrr1826 = len(yyv1826)
			if yyrg1826 {
				copy(yyv1826, yyv21826)
			}
		} else if yyl1826 != len(yyv1826) {
			yyv1826 = yyv1826[:yyl1826]
			yyc1826 = true
		}
		yyj1826 := 0
		for ; yyj1826 < yyrr1826; yyj1826++ {
			yyh1826.ElemContainerState(yyj1826)
			if r.TryDecodeAsNil() {
				yyv1826[yyj1826] = Ingress{}
			} else {
				yyv1827 := &yyv1826[yyj1826]
				yyv1827.CodecDecodeSelf(d)
			}

		}
		if yyrt1826 {
			for ; yyj1826 < yyl1826; yyj1826++ {
				yyv1826 = append(yyv1826, Ingress{})
				yyh1826.ElemContainerState(yyj1826)
				if r.TryDecodeAsNil() {
					yyv1826[yyj1826] = Ingress{}
				} else {
					yyv1828 := &yyv1826[yyj1826]
					yyv1828.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1826 := 0
		for ; !r.CheckBreak(); yyj1826++ {

			if yyj1826 >= len(yyv1826) {
				yyv1826 = append(yyv1826, Ingress{}) // var yyz1826 Ingress
				yyc1826 = true
			}
			yyh1826.ElemContainerState(yyj1826)
			if yyj1826 < len(yyv1826) {
				if r.TryDecodeAsNil() {
					yyv1826[yyj1826] = Ingress{}
				} else {
					yyv1829 := &yyv1826[yyj1826]
					yyv1829.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1826 < len(yyv1826) {
			yyv1826 = yyv1826[:yyj1826]
			yyc1826 = true
		} else if yyj1826 == 0 && yyv1826 == nil {
			yyv1826 = []Ingress{}
			yyc1826 = true
		}
	}
	yyh1826.End()
	if yyc1826 {
		*v = yyv1826
	}
}

func (x codecSelfer1234) encSliceIngressTLS(v []IngressTLS, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1830 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1831 := &yyv1830
		yy1831.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressTLS(v *[]IngressTLS, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1832 := *v
	yyh1832, yyl1832 := z.DecSliceHelperStart()
	var yyc1832 bool
	if yyl1832 == 0 {
		if yyv1832 == nil {
			yyv1832 = []IngressTLS{}
			yyc1832 = true
		} else if len(yyv1832) != 0 {
			yyv1832 = yyv1832[:0]
			yyc1832 = true
		}
	} else if yyl1832 > 0 {
		var yyrr1832, yyrl1832 int
		var yyrt1832 bool
		if yyl1832 > cap(yyv1832) {

			yyrg1832 := len(yyv1832) > 0
			yyv21832 := yyv1832
			yyrl1832, yyrt1832 = z.DecInferLen(yyl1832, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1832 {
				if yyrl1832 <= cap(yyv1832) {
					yyv1832 = yyv1832[:yyrl1832]
				} else {
					yyv1832 = make([]IngressTLS, yyrl1832)
				}
			} else {
				yyv1832 = make([]IngressTLS, yyrl1832)
			}
			yyc1832 = true
			yyrr1832 = len(yyv1832)
			if yyrg1832 {
				copy(yyv1832, yyv21832)
			}
		} else if yyl1832 != len(yyv1832) {
			yyv1832 = yyv1832[:yyl1832]
			yyc1832 = true
		}
		yyj1832 := 0
		for ; yyj1832 < yyrr1832; yyj1832++ {
			yyh1832.ElemContainerState(yyj1832)
			if r.TryDecodeAsNil() {
				yyv1832[yyj1832] = IngressTLS{}
			} else {
				yyv1833 := &yyv1832[yyj1832]
				yyv1833.CodecDecodeSelf(d)
			}

		}
		if yyrt1832 {
			for ; yyj1832 < yyl1832; yyj1832++ {
				yyv1832 = append(yyv1832, IngressTLS{})
				yyh1832.ElemContainerState(yyj1832)
				if r.TryDecodeAsNil() {
					yyv1832[yyj1832] = IngressTLS{}
				} else {
					yyv1834 := &yyv1832[yyj1832]
					yyv1834.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1832 := 0
		for ; !r.CheckBreak(); yyj1832++ {

			if yyj1832 >= len(yyv1832) {
				yyv1832 = append(yyv1832, IngressTLS{}) // var yyz1832 IngressTLS
				yyc1832 = true
			}
			yyh1832.ElemContainerState(yyj1832)
			if yyj1832 < len(yyv1832) {
				if r.TryDecodeAsNil() {
					yyv1832[yyj1832] = IngressTLS{}
				} else {
					yyv1835 := &yyv1832[yyj1832]
					yyv1835.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1832 < len(yyv1832) {
			yyv1832 = yyv1832[:yyj1832]
			yyc1832 = true
		} else if yyj1832 == 0 && yyv1832 == nil {
			yyv1832 = []IngressTLS{}
			yyc1832 = true
		}
	}
	yyh1832.End()
	if yyc1832 {
		*v = yyv1832
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1836 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1837 := &yyv1836
		yy1837.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1838 := *v
	yyh1838, yyl1838 := z.DecSliceHelperStart()
	var yyc1838 bool
	if yyl1838 == 0 {
		if yyv1838 == nil {
			yyv1838 = []IngressRule{}
			yyc1838 = true
		} else if len(yyv1838) != 0 {
			yyv1838 = yyv1838[:0]
			yyc1838 = true
		}
	} else if yyl1838 > 0 {
		var yyrr1838, yyrl1838 int
		var yyrt1838 bool
		if yyl1838 > cap(yyv1838) {

			yyrg1838 := len(yyv1838) > 0
			yyv21838 := yyv1838
			yyrl1838, yyrt1838 = z.DecInferLen(yyl1838, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1838 {
				if yyrl1838 <= cap(yyv1838) {
					yyv1838 = yyv1838[:yyrl1838]
				} else {
					yyv1838 = make([]IngressRule, yyrl1838)
				}
			} else {
				yyv1838 = make([]IngressRule, yyrl1838)
			}
			yyc1838 = true
			yyrr1838 = len(yyv1838)
			if yyrg1838 {
				copy(yyv1838, yyv21838)
			}
		} else if yyl1838 != len(yyv1838) {
			yyv1838 = yyv1838[:yyl1838]
			yyc1838 = true
		}
		yyj1838 := 0
		for ; yyj1838 < yyrr1838; yyj1838++ {
			yyh1838.ElemContainerState(yyj1838)
			if r.TryDecodeAsNil() {
				yyv1838[yyj1838] = IngressRule{}
			} else {
				yyv1839 := &yyv1838[yyj1838]
				yyv1839.CodecDecodeSelf(d)
			}

		}
		if yyrt1838 {
			for ; yyj1838 < yyl1838; yyj1838++ {
				yyv1838 = append(yyv1838, IngressRule{})
				yyh1838.ElemContainerState(yyj1838)
				if r.TryDecodeAsNil() {
					yyv1838[yyj1838] = IngressRule{}
				} else {
					yyv1840 := &yyv1838[yyj1838]
					yyv1840.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1838 := 0
		for ; !r.CheckBreak(); yyj1838++ {

			if yyj1838 >= len(yyv1838) {
				yyv1838 = append(yyv1838, IngressRule{}) // var yyz1838 IngressRule
				yyc1838 = true
			}
			yyh1838.ElemContainerState(yyj1838)
			if yyj1838 < len(yyv1838) {
				if r.TryDecodeAsNil() {
					yyv1838[yyj1838] = IngressRule{}
				} else {
					yyv1841 := &yyv1838[yyj1838]
					yyv1841.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1838 < len(yyv1838) {
			yyv1838 = yyv1838[:yyj1838]
			yyc1838 = true
		} else if yyj1838 == 0 && yyv1838 == nil {
			yyv1838 = []IngressRule{}
			yyc1838 = true
		}
	}
	yyh1838.End()
	if yyc1838 {
		*v = yyv1838
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1842 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1843 := &yyv1842
		yy1843.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1844 := *v
	yyh1844, yyl1844 := z.DecSliceHelperStart()
	var yyc1844 bool
	if yyl1844 == 0 {
		if yyv1844 == nil {
			yyv1844 = []HTTPIngressPath{}
			yyc1844 = true
		} else if len(yyv1844) != 0 {
			yyv1844 = yyv1844[:0]
			yyc1844 = true
		}
	} else if yyl1844 > 0 {
		var yyrr1844, yyrl1844 int
		var yyrt1844 bool
		if yyl1844 > cap(yyv1844) {

			yyrg1844 := len(yyv1844) > 0
			yyv21844 := yyv1844
			yyrl1844, yyrt1844 = z.DecInferLen(yyl1844, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1844 {
				if yyrl1844 <= cap(yyv1844) {
					yyv1844 = yyv1844[:yyrl1844]
				} else {
					yyv1844 = make([]HTTPIngressPath, yyrl1844)
				}
			} else {
				yyv1844 = make([]HTTPIngressPath, yyrl1844)
			}
			yyc1844 = true
			yyrr1844 = len(yyv1844)
			if yyrg1844 {
				copy(yyv1844, yyv21844)
			}
		} else if yyl1844 != len(yyv1844) {
			yyv1844 = yyv1844[:yyl1844]
			yyc1844 = true
		}
		yyj1844 := 0
		for ; yyj1844 < yyrr1844; yyj1844++ {
			yyh1844.ElemContainerState(yyj1844)
			if r.TryDecodeAsNil() {
				yyv1844[yyj1844] = HTTPIngressPath{}
			} else {
				yyv1845 := &yyv1844[yyj1844]
				yyv1845.CodecDecodeSelf(d)
			}

		}
		if yyrt1844 {
			for ; yyj1844 < yyl1844; yyj1844++ {
				yyv1844 = append(yyv1844, HTTPIngressPath{})
				yyh1844.ElemContainerState(yyj1844)
				if r.TryDecodeAsNil() {
					yyv1844[yyj1844] = HTTPIngressPath{}
				} else {
					yyv1846 := &yyv1844[yyj1844]
					yyv1846.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1844 := 0
		for ; !r.CheckBreak(); yyj1844++ {

			if yyj1844 >= len(yyv1844) {
				yyv1844 = append(yyv1844, HTTPIngressPath{}) // var yyz1844 HTTPIngressPath
				yyc1844 = true
			}
			yyh1844.ElemContainerState(yyj1844)
			if yyj1844 < len(yyv1844) {
				if r.TryDecodeAsNil() {
					yyv1844[yyj1844] = HTTPIngressPath{}
				} else {
					yyv1847 := &yyv1844[yyj1844]
					yyv1847.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1844 < len(yyv1844) {
			yyv1844 = yyv1844[:yyj1844]
			yyc1844 = true
		} else if yyj1844 == 0 && yyv1844 == nil {
			yyv1844 = []HTTPIngressPath{}
			yyc1844 = true
		}
	}
	yyh1844.End()
	if yyc1844 {
		*v = yyv1844
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1848 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1849 := &yyv1848
		yy1849.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1850 := *v
	yyh1850, yyl1850 := z.DecSliceHelperStart()
	var yyc1850 bool
	if yyl1850 == 0 {
		if yyv1850 == nil {
			yyv1850 = []NodeUtilization{}
			yyc1850 = true
		} else if len(yyv1850) != 0 {
			yyv1850 = yyv1850[:0]
			yyc1850 = true
		}
	} else if yyl1850 > 0 {
		var yyrr1850, yyrl1850 int
		var yyrt1850 bool
		if yyl1850 > cap(yyv1850) {

			yyrg1850 := len(yyv1850) > 0
			yyv21850 := yyv1850
			yyrl1850, yyrt1850 = z.DecInferLen(yyl1850, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1850 {
				if yyrl1850 <= cap(yyv1850) {
					yyv1850 = yyv1850[:yyrl1850]
				} else {
					yyv1850 = make([]NodeUtilization, yyrl1850)
				}
			} else {
				yyv1850 = make([]NodeUtilization, yyrl1850)
			}
			yyc1850 = true
			yyrr1850 = len(yyv1850)
			if yyrg1850 {
				copy(yyv1850, yyv21850)
			}
		} else if yyl1850 != len(yyv1850) {
			yyv1850 = yyv1850[:yyl1850]
			yyc1850 = true
		}
		yyj1850 := 0
		for ; yyj1850 < yyrr1850; yyj1850++ {
			yyh1850.ElemContainerState(yyj1850)
			if r.TryDecodeAsNil() {
				yyv1850[yyj1850] = NodeUtilization{}
			} else {
				yyv1851 := &yyv1850[yyj1850]
				yyv1851.CodecDecodeSelf(d)
			}

		}
		if yyrt1850 {
			for ; yyj1850 < yyl1850; yyj1850++ {
				yyv1850 = append(yyv1850, NodeUtilization{})
				yyh1850.ElemContainerState(yyj1850)
				if r.TryDecodeAsNil() {
					yyv1850[yyj1850] = NodeUtilization{}
				} else {
					yyv1852 := &yyv1850[yyj1850]
					yyv1852.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1850 := 0
		for ; !r.CheckBreak(); yyj1850++ {

			if yyj1850 >= len(yyv1850) {
				yyv1850 = append(yyv1850, NodeUtilization{}) // var yyz1850 NodeUtilization
				yyc1850 = true
			}
			yyh1850.ElemContainerState(yyj1850)
			if yyj1850 < len(yyv1850) {
				if r.TryDecodeAsNil() {
					yyv1850[yyj1850] = NodeUtilization{}
				} else {
					yyv1853 := &yyv1850[yyj1850]
					yyv1853.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1850 < len(yyv1850) {
			yyv1850 = yyv1850[:yyj1850]
			yyc1850 = true
		} else if yyj1850 == 0 && yyv1850 == nil {
			yyv1850 = []NodeUtilization{}
			yyc1850 = true
		}
	}
	yyh1850.End()
	if yyc1850 {
		*v = yyv1850
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1854 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1855 := &yyv1854
		yy1855.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1856 := *v
	yyh1856, yyl1856 := z.DecSliceHelperStart()
	var yyc1856 bool
	if yyl1856 == 0 {
		if yyv1856 == nil {
			yyv1856 = []ClusterAutoscaler{}
			yyc1856 = true
		} else if len(yyv1856) != 0 {
			yyv1856 = yyv1856[:0]
			yyc1856 = true
		}
	} else if yyl1856 > 0 {
		var yyrr1856, yyrl1856 int
		var yyrt1856 bool
		if yyl1856 > cap(yyv1856) {

			yyrg1856 := len(yyv1856) > 0
			yyv21856 := yyv1856
			yyrl1856, yyrt1856 = z.DecInferLen(yyl1856, z.DecBasicHandle().MaxInitLen, 224)
			if yyrt1856 {
				if yyrl1856 <= cap(yyv1856) {
					yyv1856 = yyv1856[:yyrl1856]
				} else {
					yyv1856 = make([]ClusterAutoscaler, yyrl1856)
				}
			} else {
				yyv1856 = make([]ClusterAutoscaler, yyrl1856)
			}
			yyc1856 = true
			yyrr1856 = len(yyv1856)
			if yyrg1856 {
				copy(yyv1856, yyv21856)
			}
		} else if yyl1856 != len(yyv1856) {
			yyv1856 = yyv1856[:yyl1856]
			yyc1856 = true
		}
		yyj1856 := 0
		for ; yyj1856 < yyrr1856; yyj1856++ {
			yyh1856.ElemContainerState(yyj1856)
			if r.TryDecodeAsNil() {
				yyv1856[yyj1856] = ClusterAutoscaler{}
			} else {
				yyv1857 := &yyv1856[yyj1856]
				yyv1857.CodecDecodeSelf(d)
			}

		}
		if yyrt1856 {
			for ; yyj1856 < yyl1856; yyj1856++ {
				yyv1856 = append(yyv1856, ClusterAutoscaler{})
				yyh1856.ElemContainerState(yyj1856)
				if r.TryDecodeAsNil() {
					yyv1856[yyj1856] = ClusterAutoscaler{}
				} else {
					yyv1858 := &yyv1856[yyj1856]
					yyv1858.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1856 := 0
		for ; !r.CheckBreak(); yyj1856++ {

			if yyj1856 >= len(yyv1856) {
				yyv1856 = append(yyv1856, ClusterAutoscaler{}) // var yyz1856 ClusterAutoscaler
				yyc1856 = true
			}
			yyh1856.ElemContainerState(yyj1856)
			if yyj1856 < len(yyv1856) {
				if r.TryDecodeAsNil() {
					yyv1856[yyj1856] = ClusterAutoscaler{}
				} else {
					yyv1859 := &yyv1856[yyj1856]
					yyv1859.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1856 < len(yyv1856) {
			yyv1856 = yyv1856[:yyj1856]
			yyc1856 = true
		} else if yyj1856 == 0 && yyv1856 == nil {
			yyv1856 = []ClusterAutoscaler{}
			yyc1856 = true
		}
	}
	yyh1856.End()
	if yyc1856 {
		*v = yyv1856
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1860 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1861 := &yyv1860
		yy1861.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1862 := *v
	yyh1862, yyl1862 := z.DecSliceHelperStart()
	var yyc1862 bool
	if yyl1862 == 0 {
		if yyv1862 == nil {
			yyv1862 = []LabelSelectorRequirement{}
			yyc1862 = true
		} else if len(yyv1862) != 0 {
			yyv1862 = yyv1862[:0]
			yyc1862 = true
		}
	} else if yyl1862 > 0 {
		var yyrr1862, yyrl1862 int
		var yyrt1862 bool
		if yyl1862 > cap(yyv1862) {

			yyrg1862 := len(yyv1862) > 0
			yyv21862 := yyv1862
			yyrl1862, yyrt1862 = z.DecInferLen(yyl1862, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1862 {
				if yyrl1862 <= cap(yyv1862) {
					yyv1862 = yyv1862[:yyrl1862]
				} else {
					yyv1862 = make([]LabelSelectorRequirement, yyrl1862)
				}
			} else {
				yyv1862 = make([]LabelSelectorRequirement, yyrl1862)
			}
			yyc1862 = true
			yyrr1862 = len(yyv1862)
			if yyrg1862 {
				copy(yyv1862, yyv21862)
			}
		} else if yyl1862 != len(yyv1862) {
			yyv1862 = yyv1862[:yyl1862]
			yyc1862 = true
		}
		yyj1862 := 0
		for ; yyj1862 < yyrr1862; yyj1862++ {
			yyh1862.ElemContainerState(yyj1862)
			if r.TryDecodeAsNil() {
				yyv1862[yyj1862] = LabelSelectorRequirement{}
			} else {
				yyv1863 := &yyv1862[yyj1862]
				yyv1863.CodecDecodeSelf(d)
			}

		}
		if yyrt1862 {
			for ; yyj1862 < yyl1862; yyj1862++ {
				yyv1862 = append(yyv1862, LabelSelectorRequirement{})
				yyh1862.ElemContainerState(yyj1862)
				if r.TryDecodeAsNil() {
					yyv1862[yyj1862] = LabelSelectorRequirement{}
				} else {
					yyv1864 := &yyv1862[yyj1862]
					yyv1864.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1862 := 0
		for ; !r.CheckBreak(); yyj1862++ {

			if yyj1862 >= len(yyv1862) {
				yyv1862 = append(yyv1862, LabelSelectorRequirement{}) // var yyz1862 LabelSelectorRequirement
				yyc1862 = true
			}
			yyh1862.ElemContainerState(yyj1862)
			if yyj1862 < len(yyv1862) {
				if r.TryDecodeAsNil() {
					yyv1862[yyj1862] = LabelSelectorRequirement{}
				} else {
					yyv1865 := &yyv1862[yyj1862]
					yyv1865.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1862 < len(yyv1862) {
			yyv1862 = yyv1862[:yyj1862]
			yyc1862 = true
		} else if yyj1862 == 0 && yyv1862 == nil {
			yyv1862 = []LabelSelectorRequirement{}
			yyc1862 = true
		}
	}
	yyh1862.End()
	if yyc1862 {
		*v = yyv1862
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1866 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1867 := &yyv1866
		yy1867.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1868 := *v
	yyh1868, yyl1868 := z.DecSliceHelperStart()
	var yyc1868 bool
	if yyl1868 == 0 {
		if yyv1868 == nil {
			yyv1868 = []ReplicaSet{}
			yyc1868 = true
		} else if len(yyv1868) != 0 {
			yyv1868 = yyv1868[:0]
			yyc1868 = true
		}
	} else if yyl1868 > 0 {
		var yyrr1868, yyrl1868 int
		var yyrt1868 bool
		if yyl1868 > cap(yyv1868) {

			yyrg1868 := len(yyv1868) > 0
			yyv21868 := yyv1868
			yyrl1868, yyrt1868 = z.DecInferLen(yyl1868, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1868 {
				if yyrl1868 <= cap(yyv1868) {
					yyv1868 = yyv1868[:yyrl1868]
				} else {
					yyv1868 = make([]ReplicaSet, yyrl1868)
				}
			} else {
				yyv1868 = make([]ReplicaSet, yyrl1868)
			}
			yyc1868 = true
			yyrr1868 = len(yyv1868)
			if yyrg1868 {
				copy(yyv1868, yyv21868)
			}
		} else if yyl1868 != len(yyv1868) {
			yyv1868 = yyv1868[:yyl1868]
			yyc1868 = true
		}
		yyj1868 := 0
		for ; yyj1868 < yyrr1868; yyj1868++ {
			yyh1868.ElemContainerState(yyj1868)
			if r.TryDecodeAsNil() {
				yyv1868[yyj1868] = ReplicaSet{}
			} else {
				yyv1869 := &yyv1868[yyj1868]
				yyv1869.CodecDecodeSelf(d)
			}

		}
		if yyrt1868 {
			for ; yyj1868 < yyl1868; yyj1868++ {
				yyv1868 = append(yyv1868, ReplicaSet{})
				yyh1868.ElemContainerState(yyj1868)
				if r.TryDecodeAsNil() {
					yyv1868[yyj1868] = ReplicaSet{}
				} else {
					yyv1870 := &yyv1868[yyj1868]
					yyv1870.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1868 := 0
		for ; !r.CheckBreak(); yyj1868++ {

			if yyj1868 >= len(yyv1868) {
				yyv1868 = append(yyv1868, ReplicaSet{}) // var yyz1868 ReplicaSet
				yyc1868 = true
			}
			yyh1868.ElemContainerState(yyj1868)
			if yyj1868 < len(yyv1868) {
				if r.TryDecodeAsNil() {
					yyv1868[yyj1868] = ReplicaSet{}
				} else {
					yyv1871 := &yyv1868[yyj1868]
					yyv1871.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1868 < len(yyv1868) {
			yyv1868 = yyv1868[:yyj1868]
			yyc1868 = true
		} else if yyj1868 == 0 && yyv1868 == nil {
			yyv1868 = []ReplicaSet{}
			yyc1868 = true
		}
	}
	yyh1868.End()
	if yyc1868 {
		*v = yyv1868
	}
}

func (x codecSelfer1234) encSlicev1_Capability(v []pkg2_v1.Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1872 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yym1873 := z.EncBinary()
		_ = yym1873
		if false {
		} else if z.HasExtensions() && z.EncExt(yyv1872) {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyv1872))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicev1_Capability(v *[]pkg2_v1.Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1874 := *v
	yyh1874, yyl1874 := z.DecSliceHelperStart()
	var yyc1874 bool
	if yyl1874 == 0 {
		if yyv1874 == nil {
			yyv1874 = []pkg2_v1.Capability{}
			yyc1874 = true
		} else if len(yyv1874) != 0 {
			yyv1874 = yyv1874[:0]
			yyc1874 = true
		}
	} else if yyl1874 > 0 {
		var yyrr1874, yyrl1874 int
		var yyrt1874 bool
		if yyl1874 > cap(yyv1874) {

			yyrl1874, yyrt1874 = z.DecInferLen(yyl1874, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1874 {
				if yyrl1874 <= cap(yyv1874) {
					yyv1874 = yyv1874[:yyrl1874]
				} else {
					yyv1874 = make([]pkg2_v1.Capability, yyrl1874)
				}
			} else {
				yyv1874 = make([]pkg2_v1.Capability, yyrl1874)
			}
			yyc1874 = true
			yyrr1874 = len(yyv1874)
		} else if yyl1874 != len(yyv1874) {
			yyv1874 = yyv1874[:yyl1874]
			yyc1874 = true
		}
		yyj1874 := 0
		for ; yyj1874 < yyrr1874; yyj1874++ {
			yyh1874.ElemContainerState(yyj1874)
			if r.TryDecodeAsNil() {
				yyv1874[yyj1874] = ""
			} else {
				yyv1874[yyj1874] = pkg2_v1.Capability(r.DecodeString())
			}

		}
		if yyrt1874 {
			for ; yyj1874 < yyl1874; yyj1874++ {
				yyv1874 = append(yyv1874, "")
				yyh1874.ElemContainerState(yyj1874)
				if r.TryDecodeAsNil() {
					yyv1874[yyj1874] = ""
				} else {
					yyv1874[yyj1874] = pkg2_v1.Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj1874 := 0
		for ; !r.CheckBreak(); yyj1874++ {

			if yyj1874 >= len(yyv1874) {
				yyv1874 = append(yyv1874, "") // var yyz1874 pkg2_v1.Capability
				yyc1874 = true
			}
			yyh1874.ElemContainerState(yyj1874)
			if yyj1874 < len(yyv1874) {
				if r.TryDecodeAsNil() {
					yyv1874[yyj1874] = ""
				} else {
					yyv1874[yyj1874] = pkg2_v1.Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1874 < len(yyv1874) {
			yyv1874 = yyv1874[:yyj1874]
			yyc1874 = true
		} else if yyj1874 == 0 && yyv1874 == nil {
			yyv1874 = []pkg2_v1.Capability{}
			yyc1874 = true
		}
	}
	yyh1874.End()
	if yyc1874 {
		*v = yyv1874
	}
}

func (x codecSelfer1234) encSliceFSType(v []FSType, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1878 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv1878.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFSType(v *[]FSType, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1879 := *v
	yyh1879, yyl1879 := z.DecSliceHelperStart()
	var yyc1879 bool
	if yyl1879 == 0 {
		if yyv1879 == nil {
			yyv1879 = []FSType{}
			yyc1879 = true
		} else if len(yyv1879) != 0 {
			yyv1879 = yyv1879[:0]
			yyc1879 = true
		}
	} else if yyl1879 > 0 {
		var yyrr1879, yyrl1879 int
		var yyrt1879 bool
		if yyl1879 > cap(yyv1879) {

			yyrl1879, yyrt1879 = z.DecInferLen(yyl1879, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1879 {
				if yyrl1879 <= cap(yyv1879) {
					yyv1879 = yyv1879[:yyrl1879]
				} else {
					yyv1879 = make([]FSType, yyrl1879)
				}
			} else {
				yyv1879 = make([]FSType, yyrl1879)
			}
			yyc1879 = true
			yyrr1879 = len(yyv1879)
		} else if yyl1879 != len(yyv1879) {
			yyv1879 = yyv1879[:yyl1879]
			yyc1879 = true
		}
		yyj1879 := 0
		for ; yyj1879 < yyrr1879; yyj1879++ {
			yyh1879.ElemContainerState(yyj1879)
			if r.TryDecodeAsNil() {
				yyv1879[yyj1879] = ""
			} else {
				yyv1879[yyj1879] = FSType(r.DecodeString())
			}

		}
		if yyrt1879 {
			for ; yyj1879 < yyl1879; yyj1879++ {
				yyv1879 = append(yyv1879, "")
				yyh1879.ElemContainerState(yyj1879)
				if r.TryDecodeAsNil() {
					yyv1879[yyj1879] = ""
				} else {
					yyv1879[yyj1879] = FSType(r.DecodeString())
				}

			}
		}

	} else {
		yyj1879 := 0
		for ; !r.CheckBreak(); yyj1879++ {

			if yyj1879 >= len(yyv1879) {
				yyv1879 = append(yyv1879, "") // var yyz1879 FSType
				yyc1879 = true
			}
			yyh1879.ElemContainerState(yyj1879)
			if yyj1879 < len(yyv1879) {
				if r.TryDecodeAsNil() {
					yyv1879[yyj1879] = ""
				} else {
					yyv1879[yyj1879] = FSType(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1879 < len(yyv1879) {
			yyv1879 = yyv1879[:yyj1879]
			yyc1879 = true
		} else if yyj1879 == 0 && yyv1879 == nil {
			yyv1879 = []FSType{}
			yyc1879 = true
		}
	}
	yyh1879.End()
	if yyc1879 {
		*v = yyv1879
	}
}

func (x codecSelfer1234) encSliceHostPortRange(v []HostPortRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1883 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1884 := &yyv1883
		yy1884.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHostPortRange(v *[]HostPortRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1885 := *v
	yyh1885, yyl1885 := z.DecSliceHelperStart()
	var yyc1885 bool
	if yyl1885 == 0 {
		if yyv1885 == nil {
			yyv1885 = []HostPortRange{}
			yyc1885 = true
		} else if len(yyv1885) != 0 {
			yyv1885 = yyv1885[:0]
			yyc1885 = true
		}
	} else if yyl1885 > 0 {
		var yyrr1885, yyrl1885 int
		var yyrt1885 bool
		if yyl1885 > cap(yyv1885) {

			yyrg1885 := len(yyv1885) > 0
			yyv21885 := yyv1885
			yyrl1885, yyrt1885 = z.DecInferLen(yyl1885, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1885 {
				if yyrl1885 <= cap(yyv1885) {
					yyv1885 = yyv1885[:yyrl1885]
				} else {
					yyv1885 = make([]HostPortRange, yyrl1885)
				}
			} else {
				yyv1885 = make([]HostPortRange, yyrl1885)
			}
			yyc1885 = true
			yyrr1885 = len(yyv1885)
			if yyrg1885 {
				copy(yyv1885, yyv21885)
			}
		} else if yyl1885 != len(yyv1885) {
			yyv1885 = yyv1885[:yyl1885]
			yyc1885 = true
		}
		yyj1885 := 0
		for ; yyj1885 < yyrr1885; yyj1885++ {
			yyh1885.ElemContainerState(yyj1885)
			if r.TryDecodeAsNil() {
				yyv1885[yyj1885] = HostPortRange{}
			} else {
				yyv1886 := &yyv1885[yyj1885]
				yyv1886.CodecDecodeSelf(d)
			}

		}
		if yyrt1885 {
			for ; yyj1885 < yyl1885; yyj1885++ {
				yyv1885 = append(yyv1885, HostPortRange{})
				yyh1885.ElemContainerState(yyj1885)
				if r.TryDecodeAsNil() {
					yyv1885[yyj1885] = HostPortRange{}
				} else {
					yyv1887 := &yyv1885[yyj1885]
					yyv1887.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1885 := 0
		for ; !r.CheckBreak(); yyj1885++ {

			if yyj1885 >= len(yyv1885) {
				yyv1885 = append(yyv1885, HostPortRange{}) // var yyz1885 HostPortRange
				yyc1885 = true
			}
			yyh1885.ElemContainerState(yyj1885)
			if yyj1885 < len(yyv1885) {
				if r.TryDecodeAsNil() {
					yyv1885[yyj1885] = HostPortRange{}
				} else {
					yyv1888 := &yyv1885[yyj1885]
					yyv1888.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1885 < len(yyv1885) {
			yyv1885 = yyv1885[:yyj1885]
			yyc1885 = true
		} else if yyj1885 == 0 && yyv1885 == nil {
			yyv1885 = []HostPortRange{}
			yyc1885 = true
		}
	}
	yyh1885.End()
	if yyc1885 {
		*v = yyv1885
	}
}

func (x codecSelfer1234) encSliceIDRange(v []IDRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1889 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1890 := &yyv1889
		yy1890.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIDRange(v *[]IDRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1891 := *v
	yyh1891, yyl1891 := z.DecSliceHelperStart()
	var yyc1891 bool
	if yyl1891 == 0 {
		if yyv1891 == nil {
			yyv1891 = []IDRange{}
			yyc1891 = true
		} else if len(yyv1891) != 0 {
			yyv1891 = yyv1891[:0]
			yyc1891 = true
		}
	} else if yyl1891 > 0 {
		var yyrr1891, yyrl1891 int
		var yyrt1891 bool
		if yyl1891 > cap(yyv1891) {

			yyrg1891 := len(yyv1891) > 0
			yyv21891 := yyv1891
			yyrl1891, yyrt1891 = z.DecInferLen(yyl1891, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1891 {
				if yyrl1891 <= cap(yyv1891) {
					yyv1891 = yyv1891[:yyrl1891]
				} else {
					yyv1891 = make([]IDRange, yyrl1891)
				}
			} else {
				yyv1891 = make([]IDRange, yyrl1891)
			}
			yyc1891 = true
			yyrr1891 = len(yyv1891)
			if yyrg1891 {
				copy(yyv1891, yyv21891)
			}
		} else if yyl1891 != len(yyv1891) {
			yyv1891 = yyv1891[:yyl1891]
			yyc1891 = true
		}
		yyj1891 := 0
		for ; yyj1891 < yyrr1891; yyj1891++ {
			yyh1891.ElemContainerState(yyj1891)
			if r.TryDecodeAsNil() {
				yyv1891[yyj1891] = IDRange{}
			} else {
				yyv1892 := &yyv1891[yyj1891]
				yyv1892.CodecDecodeSelf(d)
			}

		}
		if yyrt1891 {
			for ; yyj1891 < yyl1891; yyj1891++ {
				yyv1891 = append(yyv1891, IDRange{})
				yyh1891.ElemContainerState(yyj1891)
				if r.TryDecodeAsNil() {
					yyv1891[yyj1891] = IDRange{}
				} else {
					yyv1893 := &yyv1891[yyj1891]
					yyv1893.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1891 := 0
		for ; !r.CheckBreak(); yyj1891++ {

			if yyj1891 >= len(yyv1891) {
				yyv1891 = append(yyv1891, IDRange{}) // var yyz1891 IDRange
				yyc1891 = true
			}
			yyh1891.ElemContainerState(yyj1891)
			if yyj1891 < len(yyv1891) {
				if r.TryDecodeAsNil() {
					yyv1891[yyj1891] = IDRange{}
				} else {
					yyv1894 := &yyv1891[yyj1891]
					yyv1894.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1891 < len(yyv1891) {
			yyv1891 = yyv1891[:yyj1891]
			yyc1891 = true
		} else if yyj1891 == 0 && yyv1891 == nil {
			yyv1891 = []IDRange{}
			yyc1891 = true
		}
	}
	yyh1891.End()
	if yyc1891 {
		*v = yyv1891
	}
}

func (x codecSelfer1234) encSlicePodSecurityPolicy(v []PodSecurityPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1895 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1896 := &yyv1895
		yy1896.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodSecurityPolicy(v *[]PodSecurityPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1897 := *v
	yyh1897, yyl1897 := z.DecSliceHelperStart()
	var yyc1897 bool
	if yyl1897 == 0 {
		if yyv1897 == nil {
			yyv1897 = []PodSecurityPolicy{}
			yyc1897 = true
		} else if len(yyv1897) != 0 {
			yyv1897 = yyv1897[:0]
			yyc1897 = true
		}
	} else if yyl1897 > 0 {
		var yyrr1897, yyrl1897 int
		var yyrt1897 bool
		if yyl1897 > cap(yyv1897) {

			yyrg1897 := len(yyv1897) > 0
			yyv21897 := yyv1897
			yyrl1897, yyrt1897 = z.DecInferLen(yyl1897, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt1897 {
				if yyrl1897 <= cap(yyv1897) {
					yyv1897 = yyv1897[:yyrl1897]
				} else {
					yyv1897 = make([]PodSecurityPolicy, yyrl1897)
				}
			} else {
				yyv1897 = make([]PodSecurityPolicy, yyrl1897)
			}
			yyc1897 = true
			yyrr1897 = len(yyv1897)
			if yyrg1897 {
				copy(yyv1897, yyv21897)
			}
		} else if yyl1897 != len(yyv1897) {
			yyv1897 = yyv1897[:yyl1897]
			yyc1897 = true
		}
		yyj1897 := 0
		for ; yyj1897 < yyrr1897; yyj1897++ {
			yyh1897.ElemContainerState(yyj1897)
			if r.TryDecodeAsNil() {
				yyv1897[yyj1897] = PodSecurityPolicy{}
			} else {
				yyv1898 := &yyv1897[yyj1897]
				yyv1898.CodecDecodeSelf(d)
			}

		}
		if yyrt1897 {
			for ; yyj1897 < yyl1897; yyj1897++ {
				yyv1897 = append(yyv1897, PodSecurityPolicy{})
				yyh1897.ElemContainerState(yyj1897)
				if r.TryDecodeAsNil() {
					yyv1897[yyj1897] = PodSecurityPolicy{}
				} else {
					yyv1899 := &yyv1897[yyj1897]
					yyv1899.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1897 := 0
		for ; !r.CheckBreak(); yyj1897++ {

			if yyj1897 >= len(yyv1897) {
				yyv1897 = append(yyv1897, PodSecurityPolicy{}) // var yyz1897 PodSecurityPolicy
				yyc1897 = true
			}
			yyh1897.ElemContainerState(yyj1897)
			if yyj1897 < len(yyv1897) {
				if r.TryDecodeAsNil() {
					yyv1897[yyj1897] = PodSecurityPolicy{}
				} else {
					yyv1900 := &yyv1897[yyj1897]
					yyv1900.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1897 < len(yyv1897) {
			yyv1897 = yyv1897[:yyj1897]
			yyc1897 = true
		} else if yyj1897 == 0 && yyv1897 == nil {
			yyv1897 = []PodSecurityPolicy{}
			yyc1897 = true
		}
	}
	yyh1897.End()
	if yyc1897 {
		*v = yyv1897
	}
}
