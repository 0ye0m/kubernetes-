/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_util "k8s.io/kubernetes/pkg/util"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 4 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			4, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg2_v1.ObjectMeta
		var v3 pkg3_types.UID
		var v4 pkg6_util.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				var yynn2 int = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yysep2 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	if !yyhl8 {
		r.ReadEnd()
	}
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadEnd()
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				var yynn13 int = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
			}
			if yyr13 || yy2arr13 {
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yysep13 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	if !yyhl22 {
		r.ReadEnd()
	}
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	r.ReadEnd()
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = true
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				var yynn31 int = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
			}
			if yyr31 || yy2arr31 {
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[1] {
					yy36 := &x.APIVersion
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else if z.HasExtensions() && z.EncExt(yy36) {
					} else if !yym37 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy36)
					} else {
						z.EncFallback(yy36)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy38 := &x.APIVersion
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else if z.HasExtensions() && z.EncExt(yy38) {
					} else if !yym39 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy38)
					} else {
						z.EncFallback(yy38)
					}
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[2] {
					yy41 := &x.ObjectMeta
					yy41.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy42 := &x.ObjectMeta
					yy42.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[3] {
					yy44 := &x.Spec
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy45 := &x.Spec
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				if yyq31[4] {
					yy47 := &x.Status
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy48 := &x.Status
					yy48.CodecEncodeSelf(e)
				}
			}
			if yysep31 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		switch yys51 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv53 := &x.APIVersion
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv55 := &x.ObjectMeta
				yyv55.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv56 := &x.Spec
				yyv56.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv57 := &x.Status
				yyv57.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	if !yyhl51 {
		r.ReadEnd()
	}
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj58 int
	var yyb58 bool
	var yyhl58 bool = l >= 0
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv60 := &x.APIVersion
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv60) {
		} else if !yym61 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv60)
		} else {
			z.DecFallback(yyv60, false)
		}
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv62 := &x.ObjectMeta
		yyv62.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv63 := &x.Spec
		yyv63.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv64 := &x.Status
		yyv64.CodecDecodeSelf(d)
	}
	for {
		yyj58++
		if yyhl58 {
			yyb58 = yyj58 > l
		} else {
			yyb58 = r.CheckBreak()
		}
		if yyb58 {
			break
		}
		z.DecStructFieldNotFound(yyj58-1, "")
	}
	r.ReadEnd()
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym65 := z.EncBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep66 := !z.EncBinary()
			yy2arr66 := z.EncBasicHandle().StructToArray
			var yyq66 [2]bool
			_, _, _ = yysep66, yyq66, yy2arr66
			const yyr66 bool = false
			yyq66[0] = x.Kind != ""
			yyq66[1] = true
			if yyr66 || yy2arr66 {
				r.EncodeArrayStart(2)
			} else {
				var yynn66 int = 0
				for _, b := range yyq66 {
					if b {
						yynn66++
					}
				}
				r.EncodeMapStart(yynn66)
			}
			if yyr66 || yy2arr66 {
				if yyq66[0] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr66 || yy2arr66 {
				if yyq66[1] {
					yy71 := &x.APIVersion
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else if z.HasExtensions() && z.EncExt(yy71) {
					} else if !yym72 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy71)
					} else {
						z.EncFallback(yy71)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq66[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy73 := &x.APIVersion
					yym74 := z.EncBinary()
					_ = yym74
					if false {
					} else if z.HasExtensions() && z.EncExt(yy73) {
					} else if !yym74 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy73)
					} else {
						z.EncFallback(yy73)
					}
				}
			}
			if yysep66 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym75 := z.DecBinary()
	_ = yym75
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl76 := r.ReadMapStart()
			if yyl76 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl76, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl76 := r.ReadArrayStart()
			if yyl76 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl76, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys77Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys77Slc
	var yyhl77 bool = l >= 0
	for yyj77 := 0; ; yyj77++ {
		if yyhl77 {
			if yyj77 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys77Slc = r.DecodeBytes(yys77Slc, true, true)
		yys77 := string(yys77Slc)
		switch yys77 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv79 := &x.APIVersion
				yym80 := z.DecBinary()
				_ = yym80
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv79) {
				} else if !yym80 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv79)
				} else {
					z.DecFallback(yyv79, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys77)
		} // end switch yys77
	} // end for yyj77
	if !yyhl77 {
		r.ReadEnd()
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj81 int
	var yyb81 bool
	var yyhl81 bool = l >= 0
	yyj81++
	if yyhl81 {
		yyb81 = yyj81 > l
	} else {
		yyb81 = r.CheckBreak()
	}
	if yyb81 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj81++
	if yyhl81 {
		yyb81 = yyj81 > l
	} else {
		yyb81 = r.CheckBreak()
	}
	if yyb81 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv83 := &x.APIVersion
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv83) {
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv83)
		} else {
			z.DecFallback(yyv83, false)
		}
	}
	for {
		yyj81++
		if yyhl81 {
			yyb81 = yyj81 > l
		} else {
			yyb81 = r.CheckBreak()
		}
		if yyb81 {
			break
		}
		z.DecStructFieldNotFound(yyj81-1, "")
	}
	r.ReadEnd()
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym85 := z.EncBinary()
		_ = yym85
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep86 := !z.EncBinary()
			yy2arr86 := z.EncBasicHandle().StructToArray
			var yyq86 [4]bool
			_, _, _ = yysep86, yyq86, yy2arr86
			const yyr86 bool = false
			yyq86[0] = x.Kind != ""
			yyq86[1] = x.Name != ""
			yyq86[2] = x.APIVersion != ""
			yyq86[3] = x.Subresource != ""
			if yyr86 || yy2arr86 {
				r.EncodeArrayStart(4)
			} else {
				var yynn86 int = 0
				for _, b := range yyq86 {
					if b {
						yynn86++
					}
				}
				r.EncodeMapStart(yynn86)
			}
			if yyr86 || yy2arr86 {
				if yyq86[0] {
					yym88 := z.EncBinary()
					_ = yym88
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq86[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym89 := z.EncBinary()
					_ = yym89
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr86 || yy2arr86 {
				if yyq86[1] {
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq86[1] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr86 || yy2arr86 {
				if yyq86[2] {
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq86[2] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yym95 := z.EncBinary()
					_ = yym95
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr86 || yy2arr86 {
				if yyq86[3] {
					yym97 := z.EncBinary()
					_ = yym97
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq86[3] {
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					yym98 := z.EncBinary()
					_ = yym98
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yysep86 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym99 := z.DecBinary()
	_ = yym99
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl100 := r.ReadMapStart()
			if yyl100 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl100, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl100 := r.ReadArrayStart()
			if yyl100 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl100, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys101Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys101Slc
	var yyhl101 bool = l >= 0
	for yyj101 := 0; ; yyj101++ {
		if yyhl101 {
			if yyj101 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys101Slc = r.DecodeBytes(yys101Slc, true, true)
		yys101 := string(yys101Slc)
		switch yys101 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys101)
		} // end switch yys101
	} // end for yyj101
	if !yyhl101 {
		r.ReadEnd()
	}
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj106 int
	var yyb106 bool
	var yyhl106 bool = l >= 0
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj106++
	if yyhl106 {
		yyb106 = yyj106 > l
	} else {
		yyb106 = r.CheckBreak()
	}
	if yyb106 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj106++
		if yyhl106 {
			yyb106 = yyj106 > l
		} else {
			yyb106 = r.CheckBreak()
		}
		if yyb106 {
			break
		}
		z.DecStructFieldNotFound(yyj106-1, "")
	}
	r.ReadEnd()
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym111 := z.EncBinary()
		_ = yym111
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep112 := !z.EncBinary()
			yy2arr112 := z.EncBasicHandle().StructToArray
			var yyq112 [1]bool
			_, _, _ = yysep112, yyq112, yy2arr112
			const yyr112 bool = false
			if yyr112 || yy2arr112 {
				r.EncodeArrayStart(1)
			} else {
				var yynn112 int = 1
				for _, b := range yyq112 {
					if b {
						yynn112++
					}
				}
				r.EncodeMapStart(yynn112)
			}
			if yyr112 || yy2arr112 {
				yym114 := z.EncBinary()
				_ = yym114
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				yym115 := z.EncBinary()
				_ = yym115
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yysep112 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym116 := z.DecBinary()
	_ = yym116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl117 := r.ReadMapStart()
			if yyl117 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl117, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl117 := r.ReadArrayStart()
			if yyl117 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys118Slc
	var yyhl118 bool = l >= 0
	for yyj118 := 0; ; yyj118++ {
		if yyhl118 {
			if yyj118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys118Slc = r.DecodeBytes(yys118Slc, true, true)
		yys118 := string(yys118Slc)
		switch yys118 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys118)
		} // end switch yys118
	} // end for yyj118
	if !yyhl118 {
		r.ReadEnd()
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj120 int
	var yyb120 bool
	var yyhl120 bool = l >= 0
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj120++
		if yyhl120 {
			yyb120 = yyj120 > l
		} else {
			yyb120 = r.CheckBreak()
		}
		if yyb120 {
			break
		}
		z.DecStructFieldNotFound(yyj120-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym122 := z.EncBinary()
		_ = yym122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep123 := !z.EncBinary()
			yy2arr123 := z.EncBasicHandle().StructToArray
			var yyq123 [4]bool
			_, _, _ = yysep123, yyq123, yy2arr123
			const yyr123 bool = false
			yyq123[1] = x.MinReplicas != nil
			yyq123[3] = x.CPUUtilization != nil
			if yyr123 || yy2arr123 {
				r.EncodeArrayStart(4)
			} else {
				var yynn123 int = 2
				for _, b := range yyq123 {
					if b {
						yynn123++
					}
				}
				r.EncodeMapStart(yynn123)
			}
			if yyr123 || yy2arr123 {
				yy125 := &x.ScaleRef
				yy125.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				yy126 := &x.ScaleRef
				yy126.CodecEncodeSelf(e)
			}
			if yyr123 || yy2arr123 {
				if yyq123[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy128 := *x.MinReplicas
						yym129 := z.EncBinary()
						_ = yym129
						if false {
						} else {
							r.EncodeInt(int64(yy128))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[1] {
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy130 := *x.MinReplicas
						yym131 := z.EncBinary()
						_ = yym131
						if false {
						} else {
							r.EncodeInt(int64(yy130))
						}
					}
				}
			}
			if yyr123 || yy2arr123 {
				yym133 := z.EncBinary()
				_ = yym133
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				yym134 := z.EncBinary()
				_ = yym134
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr123 || yy2arr123 {
				if yyq123[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[3] {
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yysep123 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym136 := z.DecBinary()
	_ = yym136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl137 := r.ReadMapStart()
			if yyl137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl137, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl137 := r.ReadArrayStart()
			if yyl137 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys138Slc
	var yyhl138 bool = l >= 0
	for yyj138 := 0; ; yyj138++ {
		if yyhl138 {
			if yyj138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys138Slc = r.DecodeBytes(yys138Slc, true, true)
		yys138 := string(yys138Slc)
		switch yys138 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv139 := &x.ScaleRef
				yyv139.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int)
				}
				yym141 := z.DecBinary()
				_ = yym141
				if false {
				} else {
					*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys138)
		} // end switch yys138
	} // end for yyj138
	if !yyhl138 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj144 int
	var yyb144 bool
	var yyhl144 bool = l >= 0
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv145 := &x.ScaleRef
		yyv145.CodecDecodeSelf(d)
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int)
		}
		yym147 := z.DecBinary()
		_ = yym147
		if false {
		} else {
			*((*int)(x.MinReplicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj144++
		if yyhl144 {
			yyb144 = yyj144 > l
		} else {
			yyb144 = r.CheckBreak()
		}
		if yyb144 {
			break
		}
		z.DecStructFieldNotFound(yyj144-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym150 := z.EncBinary()
		_ = yym150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep151 := !z.EncBinary()
			yy2arr151 := z.EncBasicHandle().StructToArray
			var yyq151 [5]bool
			_, _, _ = yysep151, yyq151, yy2arr151
			const yyr151 bool = false
			yyq151[0] = x.ObservedGeneration != nil
			yyq151[1] = x.LastScaleTime != nil
			yyq151[4] = x.CurrentCPUUtilizationPercentage != nil
			if yyr151 || yy2arr151 {
				r.EncodeArrayStart(5)
			} else {
				var yynn151 int = 2
				for _, b := range yyq151 {
					if b {
						yynn151++
					}
				}
				r.EncodeMapStart(yynn151)
			}
			if yyr151 || yy2arr151 {
				if yyq151[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy153 := *x.ObservedGeneration
						yym154 := z.EncBinary()
						_ = yym154
						if false {
						} else {
							r.EncodeInt(int64(yy153))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq151[0] {
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy155 := *x.ObservedGeneration
						yym156 := z.EncBinary()
						_ = yym156
						if false {
						} else {
							r.EncodeInt(int64(yy155))
						}
					}
				}
			}
			if yyr151 || yy2arr151 {
				if yyq151[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym158 := z.EncBinary()
						_ = yym158
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym158 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym158 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq151[1] {
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym159 := z.EncBinary()
						_ = yym159
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym159 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym159 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr151 || yy2arr151 {
				yym161 := z.EncBinary()
				_ = yym161
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				yym162 := z.EncBinary()
				_ = yym162
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr151 || yy2arr151 {
				yym164 := z.EncBinary()
				_ = yym164
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr151 || yy2arr151 {
				if yyq151[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy167 := *x.CurrentCPUUtilizationPercentage
						yym168 := z.EncBinary()
						_ = yym168
						if false {
						} else {
							r.EncodeInt(int64(yy167))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq151[4] {
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy169 := *x.CurrentCPUUtilizationPercentage
						yym170 := z.EncBinary()
						_ = yym170
						if false {
						} else {
							r.EncodeInt(int64(yy169))
						}
					}
				}
			}
			if yysep151 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym171 := z.DecBinary()
	_ = yym171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl172 := r.ReadMapStart()
			if yyl172 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl172, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl172 := r.ReadArrayStart()
			if yyl172 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys173Slc
	var yyhl173 bool = l >= 0
	for yyj173 := 0; ; yyj173++ {
		if yyhl173 {
			if yyj173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys173Slc = r.DecodeBytes(yys173Slc, true, true)
		yys173 := string(yys173Slc)
		switch yys173 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym175 := z.DecBinary()
				_ = yym175
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym177 := z.DecBinary()
				_ = yym177
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym177 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym177 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int)
				}
				yym181 := z.DecBinary()
				_ = yym181
				if false {
				} else {
					*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys173)
		} // end switch yys173
	} // end for yyj173
	if !yyhl173 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym184 := z.DecBinary()
		_ = yym184
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym186 := z.DecBinary()
		_ = yym186
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym186 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym186 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int)
		}
		yym190 := z.DecBinary()
		_ = yym190
		if false {
		} else {
			*((*int)(x.CurrentCPUUtilizationPercentage)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym191 := z.EncBinary()
		_ = yym191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep192 := !z.EncBinary()
			yy2arr192 := z.EncBasicHandle().StructToArray
			var yyq192 [5]bool
			_, _, _ = yysep192, yyq192, yy2arr192
			const yyr192 bool = false
			yyq192[0] = x.Kind != ""
			yyq192[1] = true
			yyq192[2] = true
			yyq192[3] = true
			yyq192[4] = true
			if yyr192 || yy2arr192 {
				r.EncodeArrayStart(5)
			} else {
				var yynn192 int = 0
				for _, b := range yyq192 {
					if b {
						yynn192++
					}
				}
				r.EncodeMapStart(yynn192)
			}
			if yyr192 || yy2arr192 {
				if yyq192[0] {
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq192[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym195 := z.EncBinary()
					_ = yym195
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr192 || yy2arr192 {
				if yyq192[1] {
					yy197 := &x.APIVersion
					yym198 := z.EncBinary()
					_ = yym198
					if false {
					} else if z.HasExtensions() && z.EncExt(yy197) {
					} else if !yym198 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy197)
					} else {
						z.EncFallback(yy197)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq192[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy199 := &x.APIVersion
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else if z.HasExtensions() && z.EncExt(yy199) {
					} else if !yym200 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy199)
					} else {
						z.EncFallback(yy199)
					}
				}
			}
			if yyr192 || yy2arr192 {
				if yyq192[2] {
					yy202 := &x.ObjectMeta
					yy202.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq192[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy203 := &x.ObjectMeta
					yy203.CodecEncodeSelf(e)
				}
			}
			if yyr192 || yy2arr192 {
				if yyq192[3] {
					yy205 := &x.Spec
					yy205.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq192[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy206 := &x.Spec
					yy206.CodecEncodeSelf(e)
				}
			}
			if yyr192 || yy2arr192 {
				if yyq192[4] {
					yy208 := &x.Status
					yy208.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq192[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy209 := &x.Status
					yy209.CodecEncodeSelf(e)
				}
			}
			if yysep192 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym210 := z.DecBinary()
	_ = yym210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl211 := r.ReadMapStart()
			if yyl211 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl211, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl211 := r.ReadArrayStart()
			if yyl211 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl211, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys212Slc
	var yyhl212 bool = l >= 0
	for yyj212 := 0; ; yyj212++ {
		if yyhl212 {
			if yyj212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys212Slc = r.DecodeBytes(yys212Slc, true, true)
		yys212 := string(yys212Slc)
		switch yys212 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv214 := &x.APIVersion
				yym215 := z.DecBinary()
				_ = yym215
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv214) {
				} else if !yym215 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv214)
				} else {
					z.DecFallback(yyv214, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv216 := &x.ObjectMeta
				yyv216.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv217 := &x.Spec
				yyv217.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv218 := &x.Status
				yyv218.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys212)
		} // end switch yys212
	} // end for yyj212
	if !yyhl212 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj219 int
	var yyb219 bool
	var yyhl219 bool = l >= 0
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv221 := &x.APIVersion
		yym222 := z.DecBinary()
		_ = yym222
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv221) {
		} else if !yym222 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv221)
		} else {
			z.DecFallback(yyv221, false)
		}
	}
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv223 := &x.ObjectMeta
		yyv223.CodecDecodeSelf(d)
	}
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv224 := &x.Spec
		yyv224.CodecDecodeSelf(d)
	}
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv225 := &x.Status
		yyv225.CodecDecodeSelf(d)
	}
	for {
		yyj219++
		if yyhl219 {
			yyb219 = yyj219 > l
		} else {
			yyb219 = r.CheckBreak()
		}
		if yyb219 {
			break
		}
		z.DecStructFieldNotFound(yyj219-1, "")
	}
	r.ReadEnd()
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym226 := z.EncBinary()
		_ = yym226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep227 := !z.EncBinary()
			yy2arr227 := z.EncBasicHandle().StructToArray
			var yyq227 [4]bool
			_, _, _ = yysep227, yyq227, yy2arr227
			const yyr227 bool = false
			yyq227[0] = x.Kind != ""
			yyq227[1] = true
			yyq227[2] = true
			if yyr227 || yy2arr227 {
				r.EncodeArrayStart(4)
			} else {
				var yynn227 int = 1
				for _, b := range yyq227 {
					if b {
						yynn227++
					}
				}
				r.EncodeMapStart(yynn227)
			}
			if yyr227 || yy2arr227 {
				if yyq227[0] {
					yym229 := z.EncBinary()
					_ = yym229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq227[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym230 := z.EncBinary()
					_ = yym230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr227 || yy2arr227 {
				if yyq227[1] {
					yy232 := &x.APIVersion
					yym233 := z.EncBinary()
					_ = yym233
					if false {
					} else if z.HasExtensions() && z.EncExt(yy232) {
					} else if !yym233 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy232)
					} else {
						z.EncFallback(yy232)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq227[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy234 := &x.APIVersion
					yym235 := z.EncBinary()
					_ = yym235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy234) {
					} else if !yym235 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy234)
					} else {
						z.EncFallback(yy234)
					}
				}
			}
			if yyr227 || yy2arr227 {
				if yyq227[2] {
					yy237 := &x.ListMeta
					yym238 := z.EncBinary()
					_ = yym238
					if false {
					} else if z.HasExtensions() && z.EncExt(yy237) {
					} else {
						z.EncFallback(yy237)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq227[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy239 := &x.ListMeta
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else if z.HasExtensions() && z.EncExt(yy239) {
					} else {
						z.EncFallback(yy239)
					}
				}
			}
			if yyr227 || yy2arr227 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym242 := z.EncBinary()
					_ = yym242
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym243 := z.EncBinary()
					_ = yym243
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep227 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym244 := z.DecBinary()
	_ = yym244
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl245 := r.ReadMapStart()
			if yyl245 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl245, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl245 := r.ReadArrayStart()
			if yyl245 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl245, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys246Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys246Slc
	var yyhl246 bool = l >= 0
	for yyj246 := 0; ; yyj246++ {
		if yyhl246 {
			if yyj246 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys246Slc = r.DecodeBytes(yys246Slc, true, true)
		yys246 := string(yys246Slc)
		switch yys246 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv248 := &x.APIVersion
				yym249 := z.DecBinary()
				_ = yym249
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv248) {
				} else if !yym249 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv248)
				} else {
					z.DecFallback(yyv248, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv250 := &x.ListMeta
				yym251 := z.DecBinary()
				_ = yym251
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv250) {
				} else {
					z.DecFallback(yyv250, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv252 := &x.Items
				yym253 := z.DecBinary()
				_ = yym253
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv252), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys246)
		} // end switch yys246
	} // end for yyj246
	if !yyhl246 {
		r.ReadEnd()
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj254 int
	var yyb254 bool
	var yyhl254 bool = l >= 0
	yyj254++
	if yyhl254 {
		yyb254 = yyj254 > l
	} else {
		yyb254 = r.CheckBreak()
	}
	if yyb254 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj254++
	if yyhl254 {
		yyb254 = yyj254 > l
	} else {
		yyb254 = r.CheckBreak()
	}
	if yyb254 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv256 := &x.APIVersion
		yym257 := z.DecBinary()
		_ = yym257
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv256) {
		} else if !yym257 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv256)
		} else {
			z.DecFallback(yyv256, false)
		}
	}
	yyj254++
	if yyhl254 {
		yyb254 = yyj254 > l
	} else {
		yyb254 = r.CheckBreak()
	}
	if yyb254 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv258 := &x.ListMeta
		yym259 := z.DecBinary()
		_ = yym259
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv258) {
		} else {
			z.DecFallback(yyv258, false)
		}
	}
	yyj254++
	if yyhl254 {
		yyb254 = yyj254 > l
	} else {
		yyb254 = r.CheckBreak()
	}
	if yyb254 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv260 := &x.Items
		yym261 := z.DecBinary()
		_ = yym261
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv260), d)
		}
	}
	for {
		yyj254++
		if yyhl254 {
			yyb254 = yyj254 > l
		} else {
			yyb254 = r.CheckBreak()
		}
		if yyb254 {
			break
		}
		z.DecStructFieldNotFound(yyj254-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym262 := z.EncBinary()
		_ = yym262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep263 := !z.EncBinary()
			yy2arr263 := z.EncBasicHandle().StructToArray
			var yyq263 [5]bool
			_, _, _ = yysep263, yyq263, yy2arr263
			const yyr263 bool = false
			yyq263[0] = x.Kind != ""
			yyq263[1] = true
			yyq263[2] = true
			yyq263[3] = x.Description != ""
			yyq263[4] = len(x.Versions) != 0
			if yyr263 || yy2arr263 {
				r.EncodeArrayStart(5)
			} else {
				var yynn263 int = 0
				for _, b := range yyq263 {
					if b {
						yynn263++
					}
				}
				r.EncodeMapStart(yynn263)
			}
			if yyr263 || yy2arr263 {
				if yyq263[0] {
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq263[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr263 || yy2arr263 {
				if yyq263[1] {
					yy268 := &x.APIVersion
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else if z.HasExtensions() && z.EncExt(yy268) {
					} else if !yym269 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy268)
					} else {
						z.EncFallback(yy268)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy270 := &x.APIVersion
					yym271 := z.EncBinary()
					_ = yym271
					if false {
					} else if z.HasExtensions() && z.EncExt(yy270) {
					} else if !yym271 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy270)
					} else {
						z.EncFallback(yy270)
					}
				}
			}
			if yyr263 || yy2arr263 {
				if yyq263[2] {
					yy273 := &x.ObjectMeta
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy274 := &x.ObjectMeta
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr263 || yy2arr263 {
				if yyq263[3] {
					yym276 := z.EncBinary()
					_ = yym276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq263[3] {
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					yym277 := z.EncBinary()
					_ = yym277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr263 || yy2arr263 {
				if yyq263[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym279 := z.EncBinary()
						_ = yym279
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[4] {
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym280 := z.EncBinary()
						_ = yym280
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yysep263 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym281 := z.DecBinary()
	_ = yym281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl282 := r.ReadMapStart()
			if yyl282 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl282, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl282 := r.ReadArrayStart()
			if yyl282 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys283Slc
	var yyhl283 bool = l >= 0
	for yyj283 := 0; ; yyj283++ {
		if yyhl283 {
			if yyj283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys283Slc = r.DecodeBytes(yys283Slc, true, true)
		yys283 := string(yys283Slc)
		switch yys283 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv285 := &x.APIVersion
				yym286 := z.DecBinary()
				_ = yym286
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv285) {
				} else if !yym286 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv285)
				} else {
					z.DecFallback(yyv285, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv287 := &x.ObjectMeta
				yyv287.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv289 := &x.Versions
				yym290 := z.DecBinary()
				_ = yym290
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv289), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys283)
		} // end switch yys283
	} // end for yyj283
	if !yyhl283 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj291 int
	var yyb291 bool
	var yyhl291 bool = l >= 0
	yyj291++
	if yyhl291 {
		yyb291 = yyj291 > l
	} else {
		yyb291 = r.CheckBreak()
	}
	if yyb291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj291++
	if yyhl291 {
		yyb291 = yyj291 > l
	} else {
		yyb291 = r.CheckBreak()
	}
	if yyb291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv293 := &x.APIVersion
		yym294 := z.DecBinary()
		_ = yym294
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv293) {
		} else if !yym294 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv293)
		} else {
			z.DecFallback(yyv293, false)
		}
	}
	yyj291++
	if yyhl291 {
		yyb291 = yyj291 > l
	} else {
		yyb291 = r.CheckBreak()
	}
	if yyb291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv295 := &x.ObjectMeta
		yyv295.CodecDecodeSelf(d)
	}
	yyj291++
	if yyhl291 {
		yyb291 = yyj291 > l
	} else {
		yyb291 = r.CheckBreak()
	}
	if yyb291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj291++
	if yyhl291 {
		yyb291 = yyj291 > l
	} else {
		yyb291 = r.CheckBreak()
	}
	if yyb291 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv297 := &x.Versions
		yym298 := z.DecBinary()
		_ = yym298
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv297), d)
		}
	}
	for {
		yyj291++
		if yyhl291 {
			yyb291 = yyj291 > l
		} else {
			yyb291 = r.CheckBreak()
		}
		if yyb291 {
			break
		}
		z.DecStructFieldNotFound(yyj291-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym299 := z.EncBinary()
		_ = yym299
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep300 := !z.EncBinary()
			yy2arr300 := z.EncBasicHandle().StructToArray
			var yyq300 [4]bool
			_, _, _ = yysep300, yyq300, yy2arr300
			const yyr300 bool = false
			yyq300[0] = x.Kind != ""
			yyq300[1] = true
			yyq300[2] = true
			if yyr300 || yy2arr300 {
				r.EncodeArrayStart(4)
			} else {
				var yynn300 int = 1
				for _, b := range yyq300 {
					if b {
						yynn300++
					}
				}
				r.EncodeMapStart(yynn300)
			}
			if yyr300 || yy2arr300 {
				if yyq300[0] {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq300[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr300 || yy2arr300 {
				if yyq300[1] {
					yy305 := &x.APIVersion
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else if z.HasExtensions() && z.EncExt(yy305) {
					} else if !yym306 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy305)
					} else {
						z.EncFallback(yy305)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq300[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy307 := &x.APIVersion
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else if z.HasExtensions() && z.EncExt(yy307) {
					} else if !yym308 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy307)
					} else {
						z.EncFallback(yy307)
					}
				}
			}
			if yyr300 || yy2arr300 {
				if yyq300[2] {
					yy310 := &x.ListMeta
					yym311 := z.EncBinary()
					_ = yym311
					if false {
					} else if z.HasExtensions() && z.EncExt(yy310) {
					} else {
						z.EncFallback(yy310)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq300[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy312 := &x.ListMeta
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else if z.HasExtensions() && z.EncExt(yy312) {
					} else {
						z.EncFallback(yy312)
					}
				}
			}
			if yyr300 || yy2arr300 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym315 := z.EncBinary()
					_ = yym315
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yysep300 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym317 := z.DecBinary()
	_ = yym317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl318 := r.ReadMapStart()
			if yyl318 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl318, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl318 := r.ReadArrayStart()
			if yyl318 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys319Slc
	var yyhl319 bool = l >= 0
	for yyj319 := 0; ; yyj319++ {
		if yyhl319 {
			if yyj319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys319Slc = r.DecodeBytes(yys319Slc, true, true)
		yys319 := string(yys319Slc)
		switch yys319 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv321 := &x.APIVersion
				yym322 := z.DecBinary()
				_ = yym322
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv321) {
				} else if !yym322 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv321)
				} else {
					z.DecFallback(yyv321, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv323 := &x.ListMeta
				yym324 := z.DecBinary()
				_ = yym324
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv323) {
				} else {
					z.DecFallback(yyv323, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv325 := &x.Items
				yym326 := z.DecBinary()
				_ = yym326
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv325), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys319)
		} // end switch yys319
	} // end for yyj319
	if !yyhl319 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj327 int
	var yyb327 bool
	var yyhl327 bool = l >= 0
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv329 := &x.APIVersion
		yym330 := z.DecBinary()
		_ = yym330
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv329) {
		} else if !yym330 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv329)
		} else {
			z.DecFallback(yyv329, false)
		}
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv331 := &x.ListMeta
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv331) {
		} else {
			z.DecFallback(yyv331, false)
		}
	}
	yyj327++
	if yyhl327 {
		yyb327 = yyj327 > l
	} else {
		yyb327 = r.CheckBreak()
	}
	if yyb327 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv333 := &x.Items
		yym334 := z.DecBinary()
		_ = yym334
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv333), d)
		}
	}
	for {
		yyj327++
		if yyhl327 {
			yyb327 = yyj327 > l
		} else {
			yyb327 = r.CheckBreak()
		}
		if yyb327 {
			break
		}
		z.DecStructFieldNotFound(yyj327-1, "")
	}
	r.ReadEnd()
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym335 := z.EncBinary()
		_ = yym335
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep336 := !z.EncBinary()
			yy2arr336 := z.EncBasicHandle().StructToArray
			var yyq336 [2]bool
			_, _, _ = yysep336, yyq336, yy2arr336
			const yyr336 bool = false
			yyq336[0] = x.Name != ""
			yyq336[1] = x.APIGroup != ""
			if yyr336 || yy2arr336 {
				r.EncodeArrayStart(2)
			} else {
				var yynn336 int = 0
				for _, b := range yyq336 {
					if b {
						yynn336++
					}
				}
				r.EncodeMapStart(yynn336)
			}
			if yyr336 || yy2arr336 {
				if yyq336[0] {
					yym338 := z.EncBinary()
					_ = yym338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq336[0] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr336 || yy2arr336 {
				if yyq336[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq336[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yysep336 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym343 := z.DecBinary()
	_ = yym343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl344 := r.ReadMapStart()
			if yyl344 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl344, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl344 := r.ReadArrayStart()
			if yyl344 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys345Slc
	var yyhl345 bool = l >= 0
	for yyj345 := 0; ; yyj345++ {
		if yyhl345 {
			if yyj345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys345Slc = r.DecodeBytes(yys345Slc, true, true)
		yys345 := string(yys345Slc)
		switch yys345 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys345)
		} // end switch yys345
	} // end for yyj345
	if !yyhl345 {
		r.ReadEnd()
	}
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj348 int
	var yyb348 bool
	var yyhl348 bool = l >= 0
	yyj348++
	if yyhl348 {
		yyb348 = yyj348 > l
	} else {
		yyb348 = r.CheckBreak()
	}
	if yyb348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj348++
	if yyhl348 {
		yyb348 = yyj348 > l
	} else {
		yyb348 = r.CheckBreak()
	}
	if yyb348 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj348++
		if yyhl348 {
			yyb348 = yyj348 > l
		} else {
			yyb348 = r.CheckBreak()
		}
		if yyb348 {
			break
		}
		z.DecStructFieldNotFound(yyj348-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym351 := z.EncBinary()
		_ = yym351
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep352 := !z.EncBinary()
			yy2arr352 := z.EncBasicHandle().StructToArray
			var yyq352 [4]bool
			_, _, _ = yysep352, yyq352, yy2arr352
			const yyr352 bool = false
			yyq352[0] = x.Kind != ""
			yyq352[1] = true
			yyq352[2] = true
			yyq352[3] = len(x.Data) != 0
			if yyr352 || yy2arr352 {
				r.EncodeArrayStart(4)
			} else {
				var yynn352 int = 0
				for _, b := range yyq352 {
					if b {
						yynn352++
					}
				}
				r.EncodeMapStart(yynn352)
			}
			if yyr352 || yy2arr352 {
				if yyq352[0] {
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq352[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym355 := z.EncBinary()
					_ = yym355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr352 || yy2arr352 {
				if yyq352[1] {
					yy357 := &x.APIVersion
					yym358 := z.EncBinary()
					_ = yym358
					if false {
					} else if z.HasExtensions() && z.EncExt(yy357) {
					} else if !yym358 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy357)
					} else {
						z.EncFallback(yy357)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq352[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy359 := &x.APIVersion
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else if z.HasExtensions() && z.EncExt(yy359) {
					} else if !yym360 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy359)
					} else {
						z.EncFallback(yy359)
					}
				}
			}
			if yyr352 || yy2arr352 {
				if yyq352[2] {
					yy362 := &x.ObjectMeta
					yy362.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq352[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy363 := &x.ObjectMeta
					yy363.CodecEncodeSelf(e)
				}
			}
			if yyr352 || yy2arr352 {
				if yyq352[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym365 := z.EncBinary()
						_ = yym365
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq352[3] {
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym366 := z.EncBinary()
						_ = yym366
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yysep352 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym367 := z.DecBinary()
	_ = yym367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl368 := r.ReadMapStart()
			if yyl368 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl368, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl368 := r.ReadArrayStart()
			if yyl368 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl368, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys369Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys369Slc
	var yyhl369 bool = l >= 0
	for yyj369 := 0; ; yyj369++ {
		if yyhl369 {
			if yyj369 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys369Slc = r.DecodeBytes(yys369Slc, true, true)
		yys369 := string(yys369Slc)
		switch yys369 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv371 := &x.APIVersion
				yym372 := z.DecBinary()
				_ = yym372
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv371) {
				} else if !yym372 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv371)
				} else {
					z.DecFallback(yyv371, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv373 := &x.ObjectMeta
				yyv373.CodecDecodeSelf(d)
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv374 := &x.Data
				yym375 := z.DecBinary()
				_ = yym375
				if false {
				} else {
					*yyv374 = r.DecodeBytes(*(*[]byte)(yyv374), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys369)
		} // end switch yys369
	} // end for yyj369
	if !yyhl369 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj376 int
	var yyb376 bool
	var yyhl376 bool = l >= 0
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv378 := &x.APIVersion
		yym379 := z.DecBinary()
		_ = yym379
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv378) {
		} else if !yym379 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv378)
		} else {
			z.DecFallback(yyv378, false)
		}
	}
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv380 := &x.ObjectMeta
		yyv380.CodecDecodeSelf(d)
	}
	yyj376++
	if yyhl376 {
		yyb376 = yyj376 > l
	} else {
		yyb376 = r.CheckBreak()
	}
	if yyb376 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv381 := &x.Data
		yym382 := z.DecBinary()
		_ = yym382
		if false {
		} else {
			*yyv381 = r.DecodeBytes(*(*[]byte)(yyv381), false, false)
		}
	}
	for {
		yyj376++
		if yyhl376 {
			yyb376 = yyj376 > l
		} else {
			yyb376 = r.CheckBreak()
		}
		if yyb376 {
			break
		}
		z.DecStructFieldNotFound(yyj376-1, "")
	}
	r.ReadEnd()
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym383 := z.EncBinary()
		_ = yym383
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep384 := !z.EncBinary()
			yy2arr384 := z.EncBasicHandle().StructToArray
			var yyq384 [5]bool
			_, _, _ = yysep384, yyq384, yy2arr384
			const yyr384 bool = false
			yyq384[0] = x.Kind != ""
			yyq384[1] = true
			yyq384[2] = true
			yyq384[3] = true
			yyq384[4] = true
			if yyr384 || yy2arr384 {
				r.EncodeArrayStart(5)
			} else {
				var yynn384 int = 0
				for _, b := range yyq384 {
					if b {
						yynn384++
					}
				}
				r.EncodeMapStart(yynn384)
			}
			if yyr384 || yy2arr384 {
				if yyq384[0] {
					yym386 := z.EncBinary()
					_ = yym386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq384[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym387 := z.EncBinary()
					_ = yym387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr384 || yy2arr384 {
				if yyq384[1] {
					yy389 := &x.APIVersion
					yym390 := z.EncBinary()
					_ = yym390
					if false {
					} else if z.HasExtensions() && z.EncExt(yy389) {
					} else if !yym390 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy389)
					} else {
						z.EncFallback(yy389)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq384[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy391 := &x.APIVersion
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else if z.HasExtensions() && z.EncExt(yy391) {
					} else if !yym392 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy391)
					} else {
						z.EncFallback(yy391)
					}
				}
			}
			if yyr384 || yy2arr384 {
				if yyq384[2] {
					yy394 := &x.ObjectMeta
					yy394.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq384[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy395 := &x.ObjectMeta
					yy395.CodecEncodeSelf(e)
				}
			}
			if yyr384 || yy2arr384 {
				if yyq384[3] {
					yy397 := &x.Spec
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq384[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy398 := &x.Spec
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr384 || yy2arr384 {
				if yyq384[4] {
					yy400 := &x.Status
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq384[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy401 := &x.Status
					yy401.CodecEncodeSelf(e)
				}
			}
			if yysep384 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym402 := z.DecBinary()
	_ = yym402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl403 := r.ReadMapStart()
			if yyl403 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl403, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl403 := r.ReadArrayStart()
			if yyl403 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys404Slc
	var yyhl404 bool = l >= 0
	for yyj404 := 0; ; yyj404++ {
		if yyhl404 {
			if yyj404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys404Slc = r.DecodeBytes(yys404Slc, true, true)
		yys404 := string(yys404Slc)
		switch yys404 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv406 := &x.APIVersion
				yym407 := z.DecBinary()
				_ = yym407
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv406) {
				} else if !yym407 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv406)
				} else {
					z.DecFallback(yyv406, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv408 := &x.ObjectMeta
				yyv408.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv409 := &x.Spec
				yyv409.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv410 := &x.Status
				yyv410.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys404)
		} // end switch yys404
	} // end for yyj404
	if !yyhl404 {
		r.ReadEnd()
	}
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj411 int
	var yyb411 bool
	var yyhl411 bool = l >= 0
	yyj411++
	if yyhl411 {
		yyb411 = yyj411 > l
	} else {
		yyb411 = r.CheckBreak()
	}
	if yyb411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj411++
	if yyhl411 {
		yyb411 = yyj411 > l
	} else {
		yyb411 = r.CheckBreak()
	}
	if yyb411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv413 := &x.APIVersion
		yym414 := z.DecBinary()
		_ = yym414
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv413) {
		} else if !yym414 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv413)
		} else {
			z.DecFallback(yyv413, false)
		}
	}
	yyj411++
	if yyhl411 {
		yyb411 = yyj411 > l
	} else {
		yyb411 = r.CheckBreak()
	}
	if yyb411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv415 := &x.ObjectMeta
		yyv415.CodecDecodeSelf(d)
	}
	yyj411++
	if yyhl411 {
		yyb411 = yyj411 > l
	} else {
		yyb411 = r.CheckBreak()
	}
	if yyb411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv416 := &x.Spec
		yyv416.CodecDecodeSelf(d)
	}
	yyj411++
	if yyhl411 {
		yyb411 = yyj411 > l
	} else {
		yyb411 = r.CheckBreak()
	}
	if yyb411 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv417 := &x.Status
		yyv417.CodecDecodeSelf(d)
	}
	for {
		yyj411++
		if yyhl411 {
			yyb411 = yyj411 > l
		} else {
			yyb411 = r.CheckBreak()
		}
		if yyb411 {
			break
		}
		z.DecStructFieldNotFound(yyj411-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym418 := z.EncBinary()
		_ = yym418
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep419 := !z.EncBinary()
			yy2arr419 := z.EncBasicHandle().StructToArray
			var yyq419 [5]bool
			_, _, _ = yysep419, yyq419, yy2arr419
			const yyr419 bool = false
			yyq419[0] = x.Replicas != nil
			yyq419[1] = len(x.Selector) != 0
			yyq419[3] = true
			yyq419[4] = x.UniqueLabelKey != nil
			if yyr419 || yy2arr419 {
				r.EncodeArrayStart(5)
			} else {
				var yynn419 int = 1
				for _, b := range yyq419 {
					if b {
						yynn419++
					}
				}
				r.EncodeMapStart(yynn419)
			}
			if yyr419 || yy2arr419 {
				if yyq419[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy421 := *x.Replicas
						yym422 := z.EncBinary()
						_ = yym422
						if false {
						} else {
							r.EncodeInt(int64(yy421))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq419[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy423 := *x.Replicas
						yym424 := z.EncBinary()
						_ = yym424
						if false {
						} else {
							r.EncodeInt(int64(yy423))
						}
					}
				}
			}
			if yyr419 || yy2arr419 {
				if yyq419[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym426 := z.EncBinary()
						_ = yym426
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq419[1] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym427 := z.EncBinary()
						_ = yym427
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr419 || yy2arr419 {
				yy429 := &x.Template
				yy429.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				yy430 := &x.Template
				yy430.CodecEncodeSelf(e)
			}
			if yyr419 || yy2arr419 {
				if yyq419[3] {
					yy432 := &x.Strategy
					yy432.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq419[3] {
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					yy433 := &x.Strategy
					yy433.CodecEncodeSelf(e)
				}
			}
			if yyr419 || yy2arr419 {
				if yyq419[4] {
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy435 := *x.UniqueLabelKey
						yym436 := z.EncBinary()
						_ = yym436
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy435))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq419[4] {
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy437 := *x.UniqueLabelKey
						yym438 := z.EncBinary()
						_ = yym438
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy437))
						}
					}
				}
			}
			if yysep419 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym439 := z.DecBinary()
	_ = yym439
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl440 := r.ReadMapStart()
			if yyl440 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl440, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl440 := r.ReadArrayStart()
			if yyl440 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl440, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys441Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys441Slc
	var yyhl441 bool = l >= 0
	for yyj441 := 0; ; yyj441++ {
		if yyhl441 {
			if yyj441 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys441Slc = r.DecodeBytes(yys441Slc, true, true)
		yys441 := string(yys441Slc)
		switch yys441 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int)
				}
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv444 := &x.Selector
				yym445 := z.DecBinary()
				_ = yym445
				if false {
				} else {
					z.F.DecMapStringStringX(yyv444, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv446 := &x.Template
				yyv446.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv447 := &x.Strategy
				yyv447.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				if x.UniqueLabelKey != nil {
					x.UniqueLabelKey = nil
				}
			} else {
				if x.UniqueLabelKey == nil {
					x.UniqueLabelKey = new(string)
				}
				yym449 := z.DecBinary()
				_ = yym449
				if false {
				} else {
					*((*string)(x.UniqueLabelKey)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys441)
		} // end switch yys441
	} // end for yyj441
	if !yyhl441 {
		r.ReadEnd()
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj450 int
	var yyb450 bool
	var yyhl450 bool = l >= 0
	yyj450++
	if yyhl450 {
		yyb450 = yyj450 > l
	} else {
		yyb450 = r.CheckBreak()
	}
	if yyb450 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int)
		}
		yym452 := z.DecBinary()
		_ = yym452
		if false {
		} else {
			*((*int)(x.Replicas)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj450++
	if yyhl450 {
		yyb450 = yyj450 > l
	} else {
		yyb450 = r.CheckBreak()
	}
	if yyb450 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv453 := &x.Selector
		yym454 := z.DecBinary()
		_ = yym454
		if false {
		} else {
			z.F.DecMapStringStringX(yyv453, false, d)
		}
	}
	yyj450++
	if yyhl450 {
		yyb450 = yyj450 > l
	} else {
		yyb450 = r.CheckBreak()
	}
	if yyb450 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv455 := &x.Template
		yyv455.CodecDecodeSelf(d)
	}
	yyj450++
	if yyhl450 {
		yyb450 = yyj450 > l
	} else {
		yyb450 = r.CheckBreak()
	}
	if yyb450 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv456 := &x.Strategy
		yyv456.CodecDecodeSelf(d)
	}
	yyj450++
	if yyhl450 {
		yyb450 = yyj450 > l
	} else {
		yyb450 = r.CheckBreak()
	}
	if yyb450 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.UniqueLabelKey != nil {
			x.UniqueLabelKey = nil
		}
	} else {
		if x.UniqueLabelKey == nil {
			x.UniqueLabelKey = new(string)
		}
		yym458 := z.DecBinary()
		_ = yym458
		if false {
		} else {
			*((*string)(x.UniqueLabelKey)) = r.DecodeString()
		}
	}
	for {
		yyj450++
		if yyhl450 {
			yyb450 = yyj450 > l
		} else {
			yyb450 = r.CheckBreak()
		}
		if yyb450 {
			break
		}
		z.DecStructFieldNotFound(yyj450-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym459 := z.EncBinary()
		_ = yym459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep460 := !z.EncBinary()
			yy2arr460 := z.EncBasicHandle().StructToArray
			var yyq460 [2]bool
			_, _, _ = yysep460, yyq460, yy2arr460
			const yyr460 bool = false
			yyq460[0] = x.Type != ""
			yyq460[1] = x.RollingUpdate != nil
			if yyr460 || yy2arr460 {
				r.EncodeArrayStart(2)
			} else {
				var yynn460 int = 0
				for _, b := range yyq460 {
					if b {
						yynn460++
					}
				}
				r.EncodeMapStart(yynn460)
			}
			if yyr460 || yy2arr460 {
				if yyq460[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq460[0] {
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr460 || yy2arr460 {
				if yyq460[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq460[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yysep460 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym463 := z.DecBinary()
	_ = yym463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl464 := r.ReadMapStart()
			if yyl464 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl464, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl464 := r.ReadArrayStart()
			if yyl464 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl464, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys465Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys465Slc
	var yyhl465 bool = l >= 0
	for yyj465 := 0; ; yyj465++ {
		if yyhl465 {
			if yyj465 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys465Slc = r.DecodeBytes(yys465Slc, true, true)
		yys465 := string(yys465Slc)
		switch yys465 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys465)
		} // end switch yys465
	} // end for yyj465
	if !yyhl465 {
		r.ReadEnd()
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj468 int
	var yyb468 bool
	var yyhl468 bool = l >= 0
	yyj468++
	if yyhl468 {
		yyb468 = yyj468 > l
	} else {
		yyb468 = r.CheckBreak()
	}
	if yyb468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj468++
	if yyhl468 {
		yyb468 = yyj468 > l
	} else {
		yyb468 = r.CheckBreak()
	}
	if yyb468 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj468++
		if yyhl468 {
			yyb468 = yyj468 > l
		} else {
			yyb468 = r.CheckBreak()
		}
		if yyb468 {
			break
		}
		z.DecStructFieldNotFound(yyj468-1, "")
	}
	r.ReadEnd()
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym471 := z.EncBinary()
	_ = yym471
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym472 := z.DecBinary()
	_ = yym472
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym473 := z.EncBinary()
		_ = yym473
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep474 := !z.EncBinary()
			yy2arr474 := z.EncBasicHandle().StructToArray
			var yyq474 [3]bool
			_, _, _ = yysep474, yyq474, yy2arr474
			const yyr474 bool = false
			yyq474[0] = x.MaxUnavailable != nil
			yyq474[1] = x.MaxSurge != nil
			yyq474[2] = x.MinReadySeconds != 0
			if yyr474 || yy2arr474 {
				r.EncodeArrayStart(3)
			} else {
				var yynn474 int = 0
				for _, b := range yyq474 {
					if b {
						yynn474++
					}
				}
				r.EncodeMapStart(yynn474)
			}
			if yyr474 || yy2arr474 {
				if yyq474[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym476 := z.EncBinary()
						_ = yym476
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym476 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[0] {
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym477 := z.EncBinary()
						_ = yym477
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym477 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr474 || yy2arr474 {
				if yyq474[1] {
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym479 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq474[1] {
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym480 := z.EncBinary()
						_ = yym480
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym480 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				}
			}
			if yyr474 || yy2arr474 {
				if yyq474[2] {
					yym482 := z.EncBinary()
					_ = yym482
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq474[2] {
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					yym483 := z.EncBinary()
					_ = yym483
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yysep474 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym484 := z.DecBinary()
	_ = yym484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl485 := r.ReadMapStart()
			if yyl485 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl485, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl485 := r.ReadArrayStart()
			if yyl485 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl485, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys486Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys486Slc
	var yyhl486 bool = l >= 0
	for yyj486 := 0; ; yyj486++ {
		if yyhl486 {
			if yyj486 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys486Slc = r.DecodeBytes(yys486Slc, true, true)
		yys486 := string(yys486Slc)
		switch yys486 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg6_util.IntOrString)
				}
				yym488 := z.DecBinary()
				_ = yym488
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym488 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				if x.MaxSurge != nil {
					x.MaxSurge = nil
				}
			} else {
				if x.MaxSurge == nil {
					x.MaxSurge = new(pkg6_util.IntOrString)
				}
				yym490 := z.DecBinary()
				_ = yym490
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
				} else if !yym490 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxSurge)
				} else {
					z.DecFallback(x.MaxSurge, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys486)
		} // end switch yys486
	} // end for yyj486
	if !yyhl486 {
		r.ReadEnd()
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj492 int
	var yyb492 bool
	var yyhl492 bool = l >= 0
	yyj492++
	if yyhl492 {
		yyb492 = yyj492 > l
	} else {
		yyb492 = r.CheckBreak()
	}
	if yyb492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg6_util.IntOrString)
		}
		yym494 := z.DecBinary()
		_ = yym494
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym494 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj492++
	if yyhl492 {
		yyb492 = yyj492 > l
	} else {
		yyb492 = r.CheckBreak()
	}
	if yyb492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.MaxSurge != nil {
			x.MaxSurge = nil
		}
	} else {
		if x.MaxSurge == nil {
			x.MaxSurge = new(pkg6_util.IntOrString)
		}
		yym496 := z.DecBinary()
		_ = yym496
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
		} else if !yym496 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxSurge)
		} else {
			z.DecFallback(x.MaxSurge, false)
		}
	}
	yyj492++
	if yyhl492 {
		yyb492 = yyj492 > l
	} else {
		yyb492 = r.CheckBreak()
	}
	if yyb492 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj492++
		if yyhl492 {
			yyb492 = yyj492 > l
		} else {
			yyb492 = r.CheckBreak()
		}
		if yyb492 {
			break
		}
		z.DecStructFieldNotFound(yyj492-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym498 := z.EncBinary()
		_ = yym498
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep499 := !z.EncBinary()
			yy2arr499 := z.EncBasicHandle().StructToArray
			var yyq499 [2]bool
			_, _, _ = yysep499, yyq499, yy2arr499
			const yyr499 bool = false
			yyq499[0] = x.Replicas != 0
			yyq499[1] = x.UpdatedReplicas != 0
			if yyr499 || yy2arr499 {
				r.EncodeArrayStart(2)
			} else {
				var yynn499 int = 0
				for _, b := range yyq499 {
					if b {
						yynn499++
					}
				}
				r.EncodeMapStart(yynn499)
			}
			if yyr499 || yy2arr499 {
				if yyq499[0] {
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq499[0] {
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr499 || yy2arr499 {
				if yyq499[1] {
					yym504 := z.EncBinary()
					_ = yym504
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq499[1] {
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					yym505 := z.EncBinary()
					_ = yym505
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yysep499 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym506 := z.DecBinary()
	_ = yym506
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl507 := r.ReadMapStart()
			if yyl507 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl507, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl507 := r.ReadArrayStart()
			if yyl507 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl507, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys508Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys508Slc
	var yyhl508 bool = l >= 0
	for yyj508 := 0; ; yyj508++ {
		if yyhl508 {
			if yyj508 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys508Slc = r.DecodeBytes(yys508Slc, true, true)
		yys508 := string(yys508Slc)
		switch yys508 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys508)
		} // end switch yys508
	} // end for yyj508
	if !yyhl508 {
		r.ReadEnd()
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj511 int
	var yyb511 bool
	var yyhl511 bool = l >= 0
	yyj511++
	if yyhl511 {
		yyb511 = yyj511 > l
	} else {
		yyb511 = r.CheckBreak()
	}
	if yyb511 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj511++
	if yyhl511 {
		yyb511 = yyj511 > l
	} else {
		yyb511 = r.CheckBreak()
	}
	if yyb511 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj511++
		if yyhl511 {
			yyb511 = yyj511 > l
		} else {
			yyb511 = r.CheckBreak()
		}
		if yyb511 {
			break
		}
		z.DecStructFieldNotFound(yyj511-1, "")
	}
	r.ReadEnd()
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym514 := z.EncBinary()
		_ = yym514
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep515 := !z.EncBinary()
			yy2arr515 := z.EncBasicHandle().StructToArray
			var yyq515 [4]bool
			_, _, _ = yysep515, yyq515, yy2arr515
			const yyr515 bool = false
			yyq515[0] = x.Kind != ""
			yyq515[1] = true
			yyq515[2] = true
			if yyr515 || yy2arr515 {
				r.EncodeArrayStart(4)
			} else {
				var yynn515 int = 1
				for _, b := range yyq515 {
					if b {
						yynn515++
					}
				}
				r.EncodeMapStart(yynn515)
			}
			if yyr515 || yy2arr515 {
				if yyq515[0] {
					yym517 := z.EncBinary()
					_ = yym517
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq515[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym518 := z.EncBinary()
					_ = yym518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr515 || yy2arr515 {
				if yyq515[1] {
					yy520 := &x.APIVersion
					yym521 := z.EncBinary()
					_ = yym521
					if false {
					} else if z.HasExtensions() && z.EncExt(yy520) {
					} else if !yym521 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy520)
					} else {
						z.EncFallback(yy520)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq515[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy522 := &x.APIVersion
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else if z.HasExtensions() && z.EncExt(yy522) {
					} else if !yym523 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy522)
					} else {
						z.EncFallback(yy522)
					}
				}
			}
			if yyr515 || yy2arr515 {
				if yyq515[2] {
					yy525 := &x.ListMeta
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else if z.HasExtensions() && z.EncExt(yy525) {
					} else {
						z.EncFallback(yy525)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq515[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy527 := &x.ListMeta
					yym528 := z.EncBinary()
					_ = yym528
					if false {
					} else if z.HasExtensions() && z.EncExt(yy527) {
					} else {
						z.EncFallback(yy527)
					}
				}
			}
			if yyr515 || yy2arr515 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yysep515 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl533 := r.ReadMapStart()
			if yyl533 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl533, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl533 := r.ReadArrayStart()
			if yyl533 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl533, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys534Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys534Slc
	var yyhl534 bool = l >= 0
	for yyj534 := 0; ; yyj534++ {
		if yyhl534 {
			if yyj534 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys534Slc = r.DecodeBytes(yys534Slc, true, true)
		yys534 := string(yys534Slc)
		switch yys534 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv536 := &x.APIVersion
				yym537 := z.DecBinary()
				_ = yym537
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv536) {
				} else if !yym537 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv536)
				} else {
					z.DecFallback(yyv536, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv538 := &x.ListMeta
				yym539 := z.DecBinary()
				_ = yym539
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv538) {
				} else {
					z.DecFallback(yyv538, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv540 := &x.Items
				yym541 := z.DecBinary()
				_ = yym541
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv540), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys534)
		} // end switch yys534
	} // end for yyj534
	if !yyhl534 {
		r.ReadEnd()
	}
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj542 int
	var yyb542 bool
	var yyhl542 bool = l >= 0
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv544 := &x.APIVersion
		yym545 := z.DecBinary()
		_ = yym545
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv544) {
		} else if !yym545 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv544)
		} else {
			z.DecFallback(yyv544, false)
		}
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv546 := &x.ListMeta
		yym547 := z.DecBinary()
		_ = yym547
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv546) {
		} else {
			z.DecFallback(yyv546, false)
		}
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv548 := &x.Items
		yym549 := z.DecBinary()
		_ = yym549
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv548), d)
		}
	}
	for {
		yyj542++
		if yyhl542 {
			yyb542 = yyj542 > l
		} else {
			yyb542 = r.CheckBreak()
		}
		if yyb542 {
			break
		}
		z.DecStructFieldNotFound(yyj542-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym550 := z.EncBinary()
		_ = yym550
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep551 := !z.EncBinary()
			yy2arr551 := z.EncBasicHandle().StructToArray
			var yyq551 [2]bool
			_, _, _ = yysep551, yyq551, yy2arr551
			const yyr551 bool = false
			yyq551[0] = len(x.Selector) != 0
			yyq551[1] = x.Template != nil
			if yyr551 || yy2arr551 {
				r.EncodeArrayStart(2)
			} else {
				var yynn551 int = 0
				for _, b := range yyq551 {
					if b {
						yynn551++
					}
				}
				r.EncodeMapStart(yynn551)
			}
			if yyr551 || yy2arr551 {
				if yyq551[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym553 := z.EncBinary()
						_ = yym553
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq551[0] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym554 := z.EncBinary()
						_ = yym554
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr551 || yy2arr551 {
				if yyq551[1] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq551[1] {
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yysep551 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym556 := z.DecBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl557 := r.ReadMapStart()
			if yyl557 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl557, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl557 := r.ReadArrayStart()
			if yyl557 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys558Slc
	var yyhl558 bool = l >= 0
	for yyj558 := 0; ; yyj558++ {
		if yyhl558 {
			if yyj558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys558Slc = r.DecodeBytes(yys558Slc, true, true)
		yys558 := string(yys558Slc)
		switch yys558 {
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv559 := &x.Selector
				yym560 := z.DecBinary()
				_ = yym560
				if false {
				} else {
					z.F.DecMapStringStringX(yyv559, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_v1.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys558)
		} // end switch yys558
	} // end for yyj558
	if !yyhl558 {
		r.ReadEnd()
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj562 int
	var yyb562 bool
	var yyhl562 bool = l >= 0
	yyj562++
	if yyhl562 {
		yyb562 = yyj562 > l
	} else {
		yyb562 = r.CheckBreak()
	}
	if yyb562 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv563 := &x.Selector
		yym564 := z.DecBinary()
		_ = yym564
		if false {
		} else {
			z.F.DecMapStringStringX(yyv563, false, d)
		}
	}
	yyj562++
	if yyhl562 {
		yyb562 = yyj562 > l
	} else {
		yyb562 = r.CheckBreak()
	}
	if yyb562 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_v1.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj562++
		if yyhl562 {
			yyb562 = yyj562 > l
		} else {
			yyb562 = r.CheckBreak()
		}
		if yyb562 {
			break
		}
		z.DecStructFieldNotFound(yyj562-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym566 := z.EncBinary()
		_ = yym566
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep567 := !z.EncBinary()
			yy2arr567 := z.EncBasicHandle().StructToArray
			var yyq567 [3]bool
			_, _, _ = yysep567, yyq567, yy2arr567
			const yyr567 bool = false
			if yyr567 || yy2arr567 {
				r.EncodeArrayStart(3)
			} else {
				var yynn567 int = 3
				for _, b := range yyq567 {
					if b {
						yynn567++
					}
				}
				r.EncodeMapStart(yynn567)
			}
			if yyr567 || yy2arr567 {
				yym569 := z.EncBinary()
				_ = yym569
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				yym570 := z.EncBinary()
				_ = yym570
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr567 || yy2arr567 {
				yym572 := z.EncBinary()
				_ = yym572
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				yym573 := z.EncBinary()
				_ = yym573
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr567 || yy2arr567 {
				yym575 := z.EncBinary()
				_ = yym575
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				yym576 := z.EncBinary()
				_ = yym576
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yysep567 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym577 := z.DecBinary()
	_ = yym577
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl578 := r.ReadMapStart()
			if yyl578 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl578, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl578 := r.ReadArrayStart()
			if yyl578 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl578, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys579Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys579Slc
	var yyhl579 bool = l >= 0
	for yyj579 := 0; ; yyj579++ {
		if yyhl579 {
			if yyj579 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys579Slc = r.DecodeBytes(yys579Slc, true, true)
		yys579 := string(yys579Slc)
		switch yys579 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys579)
		} // end switch yys579
	} // end for yyj579
	if !yyhl579 {
		r.ReadEnd()
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj583 int
	var yyb583 bool
	var yyhl583 bool = l >= 0
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj583++
		if yyhl583 {
			yyb583 = yyj583 > l
		} else {
			yyb583 = r.CheckBreak()
		}
		if yyb583 {
			break
		}
		z.DecStructFieldNotFound(yyj583-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym587 := z.EncBinary()
		_ = yym587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep588 := !z.EncBinary()
			yy2arr588 := z.EncBasicHandle().StructToArray
			var yyq588 [5]bool
			_, _, _ = yysep588, yyq588, yy2arr588
			const yyr588 bool = false
			yyq588[0] = x.Kind != ""
			yyq588[1] = true
			yyq588[2] = true
			yyq588[3] = true
			yyq588[4] = true
			if yyr588 || yy2arr588 {
				r.EncodeArrayStart(5)
			} else {
				var yynn588 int = 0
				for _, b := range yyq588 {
					if b {
						yynn588++
					}
				}
				r.EncodeMapStart(yynn588)
			}
			if yyr588 || yy2arr588 {
				if yyq588[0] {
					yym590 := z.EncBinary()
					_ = yym590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq588[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym591 := z.EncBinary()
					_ = yym591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr588 || yy2arr588 {
				if yyq588[1] {
					yy593 := &x.APIVersion
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else if z.HasExtensions() && z.EncExt(yy593) {
					} else if !yym594 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy593)
					} else {
						z.EncFallback(yy593)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq588[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy595 := &x.APIVersion
					yym596 := z.EncBinary()
					_ = yym596
					if false {
					} else if z.HasExtensions() && z.EncExt(yy595) {
					} else if !yym596 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy595)
					} else {
						z.EncFallback(yy595)
					}
				}
			}
			if yyr588 || yy2arr588 {
				if yyq588[2] {
					yy598 := &x.ObjectMeta
					yy598.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq588[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy599 := &x.ObjectMeta
					yy599.CodecEncodeSelf(e)
				}
			}
			if yyr588 || yy2arr588 {
				if yyq588[3] {
					yy601 := &x.Spec
					yy601.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq588[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy602 := &x.Spec
					yy602.CodecEncodeSelf(e)
				}
			}
			if yyr588 || yy2arr588 {
				if yyq588[4] {
					yy604 := &x.Status
					yy604.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq588[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy605 := &x.Status
					yy605.CodecEncodeSelf(e)
				}
			}
			if yysep588 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym606 := z.DecBinary()
	_ = yym606
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl607 := r.ReadMapStart()
			if yyl607 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl607, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl607 := r.ReadArrayStart()
			if yyl607 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl607, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys608Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys608Slc
	var yyhl608 bool = l >= 0
	for yyj608 := 0; ; yyj608++ {
		if yyhl608 {
			if yyj608 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys608Slc = r.DecodeBytes(yys608Slc, true, true)
		yys608 := string(yys608Slc)
		switch yys608 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv610 := &x.APIVersion
				yym611 := z.DecBinary()
				_ = yym611
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv610) {
				} else if !yym611 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv610)
				} else {
					z.DecFallback(yyv610, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv612 := &x.ObjectMeta
				yyv612.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv613 := &x.Spec
				yyv613.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv614 := &x.Status
				yyv614.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys608)
		} // end switch yys608
	} // end for yyj608
	if !yyhl608 {
		r.ReadEnd()
	}
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj615 int
	var yyb615 bool
	var yyhl615 bool = l >= 0
	yyj615++
	if yyhl615 {
		yyb615 = yyj615 > l
	} else {
		yyb615 = r.CheckBreak()
	}
	if yyb615 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj615++
	if yyhl615 {
		yyb615 = yyj615 > l
	} else {
		yyb615 = r.CheckBreak()
	}
	if yyb615 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv617 := &x.APIVersion
		yym618 := z.DecBinary()
		_ = yym618
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv617) {
		} else if !yym618 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv617)
		} else {
			z.DecFallback(yyv617, false)
		}
	}
	yyj615++
	if yyhl615 {
		yyb615 = yyj615 > l
	} else {
		yyb615 = r.CheckBreak()
	}
	if yyb615 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv619 := &x.ObjectMeta
		yyv619.CodecDecodeSelf(d)
	}
	yyj615++
	if yyhl615 {
		yyb615 = yyj615 > l
	} else {
		yyb615 = r.CheckBreak()
	}
	if yyb615 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv620 := &x.Spec
		yyv620.CodecDecodeSelf(d)
	}
	yyj615++
	if yyhl615 {
		yyb615 = yyj615 > l
	} else {
		yyb615 = r.CheckBreak()
	}
	if yyb615 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv621 := &x.Status
		yyv621.CodecDecodeSelf(d)
	}
	for {
		yyj615++
		if yyhl615 {
			yyb615 = yyj615 > l
		} else {
			yyb615 = r.CheckBreak()
		}
		if yyb615 {
			break
		}
		z.DecStructFieldNotFound(yyj615-1, "")
	}
	r.ReadEnd()
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym622 := z.EncBinary()
		_ = yym622
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep623 := !z.EncBinary()
			yy2arr623 := z.EncBasicHandle().StructToArray
			var yyq623 [4]bool
			_, _, _ = yysep623, yyq623, yy2arr623
			const yyr623 bool = false
			yyq623[0] = x.Kind != ""
			yyq623[1] = true
			yyq623[2] = true
			if yyr623 || yy2arr623 {
				r.EncodeArrayStart(4)
			} else {
				var yynn623 int = 1
				for _, b := range yyq623 {
					if b {
						yynn623++
					}
				}
				r.EncodeMapStart(yynn623)
			}
			if yyr623 || yy2arr623 {
				if yyq623[0] {
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq623[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr623 || yy2arr623 {
				if yyq623[1] {
					yy628 := &x.APIVersion
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else if z.HasExtensions() && z.EncExt(yy628) {
					} else if !yym629 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy628)
					} else {
						z.EncFallback(yy628)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq623[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy630 := &x.APIVersion
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else if z.HasExtensions() && z.EncExt(yy630) {
					} else if !yym631 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy630)
					} else {
						z.EncFallback(yy630)
					}
				}
			}
			if yyr623 || yy2arr623 {
				if yyq623[2] {
					yy633 := &x.ListMeta
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else if z.HasExtensions() && z.EncExt(yy633) {
					} else {
						z.EncFallback(yy633)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq623[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy635 := &x.ListMeta
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else if z.HasExtensions() && z.EncExt(yy635) {
					} else {
						z.EncFallback(yy635)
					}
				}
			}
			if yyr623 || yy2arr623 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yysep623 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym640 := z.DecBinary()
	_ = yym640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl641 := r.ReadMapStart()
			if yyl641 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl641, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl641 := r.ReadArrayStart()
			if yyl641 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl641, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys642Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys642Slc
	var yyhl642 bool = l >= 0
	for yyj642 := 0; ; yyj642++ {
		if yyhl642 {
			if yyj642 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys642Slc = r.DecodeBytes(yys642Slc, true, true)
		yys642 := string(yys642Slc)
		switch yys642 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv644 := &x.APIVersion
				yym645 := z.DecBinary()
				_ = yym645
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv644) {
				} else if !yym645 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv644)
				} else {
					z.DecFallback(yyv644, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv646 := &x.ListMeta
				yym647 := z.DecBinary()
				_ = yym647
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv646) {
				} else {
					z.DecFallback(yyv646, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv648 := &x.Items
				yym649 := z.DecBinary()
				_ = yym649
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv648), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys642)
		} // end switch yys642
	} // end for yyj642
	if !yyhl642 {
		r.ReadEnd()
	}
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj650 int
	var yyb650 bool
	var yyhl650 bool = l >= 0
	yyj650++
	if yyhl650 {
		yyb650 = yyj650 > l
	} else {
		yyb650 = r.CheckBreak()
	}
	if yyb650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj650++
	if yyhl650 {
		yyb650 = yyj650 > l
	} else {
		yyb650 = r.CheckBreak()
	}
	if yyb650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv652 := &x.APIVersion
		yym653 := z.DecBinary()
		_ = yym653
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv652) {
		} else if !yym653 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv652)
		} else {
			z.DecFallback(yyv652, false)
		}
	}
	yyj650++
	if yyhl650 {
		yyb650 = yyj650 > l
	} else {
		yyb650 = r.CheckBreak()
	}
	if yyb650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv654 := &x.ListMeta
		yym655 := z.DecBinary()
		_ = yym655
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv654) {
		} else {
			z.DecFallback(yyv654, false)
		}
	}
	yyj650++
	if yyhl650 {
		yyb650 = yyj650 > l
	} else {
		yyb650 = r.CheckBreak()
	}
	if yyb650 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv656 := &x.Items
		yym657 := z.DecBinary()
		_ = yym657
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv656), d)
		}
	}
	for {
		yyj650++
		if yyhl650 {
			yyb650 = yyj650 > l
		} else {
			yyb650 = r.CheckBreak()
		}
		if yyb650 {
			break
		}
		z.DecStructFieldNotFound(yyj650-1, "")
	}
	r.ReadEnd()
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym658 := z.EncBinary()
		_ = yym658
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep659 := !z.EncBinary()
			yy2arr659 := z.EncBasicHandle().StructToArray
			var yyq659 [4]bool
			_, _, _ = yysep659, yyq659, yy2arr659
			const yyr659 bool = false
			yyq659[0] = x.Kind != ""
			yyq659[1] = true
			yyq659[2] = true
			if yyr659 || yy2arr659 {
				r.EncodeArrayStart(4)
			} else {
				var yynn659 int = 1
				for _, b := range yyq659 {
					if b {
						yynn659++
					}
				}
				r.EncodeMapStart(yynn659)
			}
			if yyr659 || yy2arr659 {
				if yyq659[0] {
					yym661 := z.EncBinary()
					_ = yym661
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq659[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym662 := z.EncBinary()
					_ = yym662
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr659 || yy2arr659 {
				if yyq659[1] {
					yy664 := &x.APIVersion
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else if z.HasExtensions() && z.EncExt(yy664) {
					} else if !yym665 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy664)
					} else {
						z.EncFallback(yy664)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq659[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy666 := &x.APIVersion
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else if z.HasExtensions() && z.EncExt(yy666) {
					} else if !yym667 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy666)
					} else {
						z.EncFallback(yy666)
					}
				}
			}
			if yyr659 || yy2arr659 {
				if yyq659[2] {
					yy669 := &x.ListMeta
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else if z.HasExtensions() && z.EncExt(yy669) {
					} else {
						z.EncFallback(yy669)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq659[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy671 := &x.ListMeta
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else if z.HasExtensions() && z.EncExt(yy671) {
					} else {
						z.EncFallback(yy671)
					}
				}
			}
			if yyr659 || yy2arr659 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yysep659 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym676 := z.DecBinary()
	_ = yym676
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl677 := r.ReadMapStart()
			if yyl677 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl677, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl677 := r.ReadArrayStart()
			if yyl677 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl677, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys678Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys678Slc
	var yyhl678 bool = l >= 0
	for yyj678 := 0; ; yyj678++ {
		if yyhl678 {
			if yyj678 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys678Slc = r.DecodeBytes(yys678Slc, true, true)
		yys678 := string(yys678Slc)
		switch yys678 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv680 := &x.APIVersion
				yym681 := z.DecBinary()
				_ = yym681
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv680) {
				} else if !yym681 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv680)
				} else {
					z.DecFallback(yyv680, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv682 := &x.ListMeta
				yym683 := z.DecBinary()
				_ = yym683
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv682) {
				} else {
					z.DecFallback(yyv682, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv684 := &x.Items
				yym685 := z.DecBinary()
				_ = yym685
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv684), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys678)
		} // end switch yys678
	} // end for yyj678
	if !yyhl678 {
		r.ReadEnd()
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj686 int
	var yyb686 bool
	var yyhl686 bool = l >= 0
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv688 := &x.APIVersion
		yym689 := z.DecBinary()
		_ = yym689
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv688) {
		} else if !yym689 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv688)
		} else {
			z.DecFallback(yyv688, false)
		}
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv690 := &x.ListMeta
		yym691 := z.DecBinary()
		_ = yym691
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv690) {
		} else {
			z.DecFallback(yyv690, false)
		}
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv692 := &x.Items
		yym693 := z.DecBinary()
		_ = yym693
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv692), d)
		}
	}
	for {
		yyj686++
		if yyhl686 {
			yyb686 = yyj686 > l
		} else {
			yyb686 = r.CheckBreak()
		}
		if yyb686 {
			break
		}
		z.DecStructFieldNotFound(yyj686-1, "")
	}
	r.ReadEnd()
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym694 := z.EncBinary()
		_ = yym694
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep695 := !z.EncBinary()
			yy2arr695 := z.EncBasicHandle().StructToArray
			var yyq695 [5]bool
			_, _, _ = yysep695, yyq695, yy2arr695
			const yyr695 bool = false
			yyq695[0] = x.Kind != ""
			yyq695[1] = true
			yyq695[2] = true
			yyq695[3] = true
			yyq695[4] = true
			if yyr695 || yy2arr695 {
				r.EncodeArrayStart(5)
			} else {
				var yynn695 int = 0
				for _, b := range yyq695 {
					if b {
						yynn695++
					}
				}
				r.EncodeMapStart(yynn695)
			}
			if yyr695 || yy2arr695 {
				if yyq695[0] {
					yym697 := z.EncBinary()
					_ = yym697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq695[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr695 || yy2arr695 {
				if yyq695[1] {
					yy700 := &x.APIVersion
					yym701 := z.EncBinary()
					_ = yym701
					if false {
					} else if z.HasExtensions() && z.EncExt(yy700) {
					} else if !yym701 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy700)
					} else {
						z.EncFallback(yy700)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq695[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy702 := &x.APIVersion
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else if z.HasExtensions() && z.EncExt(yy702) {
					} else if !yym703 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy702)
					} else {
						z.EncFallback(yy702)
					}
				}
			}
			if yyr695 || yy2arr695 {
				if yyq695[2] {
					yy705 := &x.ObjectMeta
					yy705.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq695[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy706 := &x.ObjectMeta
					yy706.CodecEncodeSelf(e)
				}
			}
			if yyr695 || yy2arr695 {
				if yyq695[3] {
					yy708 := &x.Spec
					yy708.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq695[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy709 := &x.Spec
					yy709.CodecEncodeSelf(e)
				}
			}
			if yyr695 || yy2arr695 {
				if yyq695[4] {
					yy711 := &x.Status
					yy711.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq695[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy712 := &x.Status
					yy712.CodecEncodeSelf(e)
				}
			}
			if yysep695 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym713 := z.DecBinary()
	_ = yym713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl714 := r.ReadMapStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl714, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl714 := r.ReadArrayStart()
			if yyl714 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys715Slc
	var yyhl715 bool = l >= 0
	for yyj715 := 0; ; yyj715++ {
		if yyhl715 {
			if yyj715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys715Slc = r.DecodeBytes(yys715Slc, true, true)
		yys715 := string(yys715Slc)
		switch yys715 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv717 := &x.APIVersion
				yym718 := z.DecBinary()
				_ = yym718
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv717) {
				} else if !yym718 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv717)
				} else {
					z.DecFallback(yyv717, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv719 := &x.ObjectMeta
				yyv719.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv720 := &x.Spec
				yyv720.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv721 := &x.Status
				yyv721.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys715)
		} // end switch yys715
	} // end for yyj715
	if !yyhl715 {
		r.ReadEnd()
	}
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj722 int
	var yyb722 bool
	var yyhl722 bool = l >= 0
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv724 := &x.APIVersion
		yym725 := z.DecBinary()
		_ = yym725
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv724) {
		} else if !yym725 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv724)
		} else {
			z.DecFallback(yyv724, false)
		}
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv726 := &x.ObjectMeta
		yyv726.CodecDecodeSelf(d)
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv727 := &x.Spec
		yyv727.CodecDecodeSelf(d)
	}
	yyj722++
	if yyhl722 {
		yyb722 = yyj722 > l
	} else {
		yyb722 = r.CheckBreak()
	}
	if yyb722 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv728 := &x.Status
		yyv728.CodecDecodeSelf(d)
	}
	for {
		yyj722++
		if yyhl722 {
			yyb722 = yyj722 > l
		} else {
			yyb722 = r.CheckBreak()
		}
		if yyb722 {
			break
		}
		z.DecStructFieldNotFound(yyj722-1, "")
	}
	r.ReadEnd()
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym729 := z.EncBinary()
		_ = yym729
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep730 := !z.EncBinary()
			yy2arr730 := z.EncBasicHandle().StructToArray
			var yyq730 [4]bool
			_, _, _ = yysep730, yyq730, yy2arr730
			const yyr730 bool = false
			yyq730[0] = x.Kind != ""
			yyq730[1] = true
			yyq730[2] = true
			if yyr730 || yy2arr730 {
				r.EncodeArrayStart(4)
			} else {
				var yynn730 int = 1
				for _, b := range yyq730 {
					if b {
						yynn730++
					}
				}
				r.EncodeMapStart(yynn730)
			}
			if yyr730 || yy2arr730 {
				if yyq730[0] {
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq730[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr730 || yy2arr730 {
				if yyq730[1] {
					yy735 := &x.APIVersion
					yym736 := z.EncBinary()
					_ = yym736
					if false {
					} else if z.HasExtensions() && z.EncExt(yy735) {
					} else if !yym736 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy735)
					} else {
						z.EncFallback(yy735)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq730[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy737 := &x.APIVersion
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else if z.HasExtensions() && z.EncExt(yy737) {
					} else if !yym738 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy737)
					} else {
						z.EncFallback(yy737)
					}
				}
			}
			if yyr730 || yy2arr730 {
				if yyq730[2] {
					yy740 := &x.ListMeta
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else if z.HasExtensions() && z.EncExt(yy740) {
					} else {
						z.EncFallback(yy740)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq730[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy742 := &x.ListMeta
					yym743 := z.EncBinary()
					_ = yym743
					if false {
					} else if z.HasExtensions() && z.EncExt(yy742) {
					} else {
						z.EncFallback(yy742)
					}
				}
			}
			if yyr730 || yy2arr730 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yysep730 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym747 := z.DecBinary()
	_ = yym747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl748 := r.ReadMapStart()
			if yyl748 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl748, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl748 := r.ReadArrayStart()
			if yyl748 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys749Slc
	var yyhl749 bool = l >= 0
	for yyj749 := 0; ; yyj749++ {
		if yyhl749 {
			if yyj749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys749Slc = r.DecodeBytes(yys749Slc, true, true)
		yys749 := string(yys749Slc)
		switch yys749 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv751 := &x.APIVersion
				yym752 := z.DecBinary()
				_ = yym752
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv751) {
				} else if !yym752 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv751)
				} else {
					z.DecFallback(yyv751, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv753 := &x.ListMeta
				yym754 := z.DecBinary()
				_ = yym754
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv753) {
				} else {
					z.DecFallback(yyv753, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv755 := &x.Items
				yym756 := z.DecBinary()
				_ = yym756
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv755), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys749)
		} // end switch yys749
	} // end for yyj749
	if !yyhl749 {
		r.ReadEnd()
	}
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj757 int
	var yyb757 bool
	var yyhl757 bool = l >= 0
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv759 := &x.APIVersion
		yym760 := z.DecBinary()
		_ = yym760
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv759) {
		} else if !yym760 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv759)
		} else {
			z.DecFallback(yyv759, false)
		}
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv761 := &x.ListMeta
		yym762 := z.DecBinary()
		_ = yym762
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv761) {
		} else {
			z.DecFallback(yyv761, false)
		}
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv763 := &x.Items
		yym764 := z.DecBinary()
		_ = yym764
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv763), d)
		}
	}
	for {
		yyj757++
		if yyhl757 {
			yyb757 = yyj757 > l
		} else {
			yyb757 = r.CheckBreak()
		}
		if yyb757 {
			break
		}
		z.DecStructFieldNotFound(yyj757-1, "")
	}
	r.ReadEnd()
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym765 := z.EncBinary()
		_ = yym765
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep766 := !z.EncBinary()
			yy2arr766 := z.EncBasicHandle().StructToArray
			var yyq766 [4]bool
			_, _, _ = yysep766, yyq766, yy2arr766
			const yyr766 bool = false
			yyq766[0] = x.Parallelism != nil
			yyq766[1] = x.Completions != nil
			yyq766[2] = x.Selector != nil
			if yyr766 || yy2arr766 {
				r.EncodeArrayStart(4)
			} else {
				var yynn766 int = 1
				for _, b := range yyq766 {
					if b {
						yynn766++
					}
				}
				r.EncodeMapStart(yynn766)
			}
			if yyr766 || yy2arr766 {
				if yyq766[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy768 := *x.Parallelism
						yym769 := z.EncBinary()
						_ = yym769
						if false {
						} else {
							r.EncodeInt(int64(yy768))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq766[0] {
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy770 := *x.Parallelism
						yym771 := z.EncBinary()
						_ = yym771
						if false {
						} else {
							r.EncodeInt(int64(yy770))
						}
					}
				}
			}
			if yyr766 || yy2arr766 {
				if yyq766[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy773 := *x.Completions
						yym774 := z.EncBinary()
						_ = yym774
						if false {
						} else {
							r.EncodeInt(int64(yy773))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq766[1] {
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy775 := *x.Completions
						yym776 := z.EncBinary()
						_ = yym776
						if false {
						} else {
							r.EncodeInt(int64(yy775))
						}
					}
				}
			}
			if yyr766 || yy2arr766 {
				if yyq766[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq766[2] {
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr766 || yy2arr766 {
				yy779 := &x.Template
				yy779.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				yy780 := &x.Template
				yy780.CodecEncodeSelf(e)
			}
			if yysep766 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym781 := z.DecBinary()
	_ = yym781
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl782 := r.ReadMapStart()
			if yyl782 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl782, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl782 := r.ReadArrayStart()
			if yyl782 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl782, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys783Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys783Slc
	var yyhl783 bool = l >= 0
	for yyj783 := 0; ; yyj783++ {
		if yyhl783 {
			if yyj783 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys783Slc = r.DecodeBytes(yys783Slc, true, true)
		yys783 := string(yys783Slc)
		switch yys783 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int)
				}
				yym785 := z.DecBinary()
				_ = yym785
				if false {
				} else {
					*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int)
				}
				yym787 := z.DecBinary()
				_ = yym787
				if false {
				} else {
					*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(PodSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv789 := &x.Template
				yyv789.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys783)
		} // end switch yys783
	} // end for yyj783
	if !yyhl783 {
		r.ReadEnd()
	}
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj790 int
	var yyb790 bool
	var yyhl790 bool = l >= 0
	yyj790++
	if yyhl790 {
		yyb790 = yyj790 > l
	} else {
		yyb790 = r.CheckBreak()
	}
	if yyb790 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int)
		}
		yym792 := z.DecBinary()
		_ = yym792
		if false {
		} else {
			*((*int)(x.Parallelism)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj790++
	if yyhl790 {
		yyb790 = yyj790 > l
	} else {
		yyb790 = r.CheckBreak()
	}
	if yyb790 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int)
		}
		yym794 := z.DecBinary()
		_ = yym794
		if false {
		} else {
			*((*int)(x.Completions)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj790++
	if yyhl790 {
		yyb790 = yyj790 > l
	} else {
		yyb790 = r.CheckBreak()
	}
	if yyb790 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(PodSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj790++
	if yyhl790 {
		yyb790 = yyj790 > l
	} else {
		yyb790 = r.CheckBreak()
	}
	if yyb790 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv796 := &x.Template
		yyv796.CodecDecodeSelf(d)
	}
	for {
		yyj790++
		if yyhl790 {
			yyb790 = yyj790 > l
		} else {
			yyb790 = r.CheckBreak()
		}
		if yyb790 {
			break
		}
		z.DecStructFieldNotFound(yyj790-1, "")
	}
	r.ReadEnd()
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym797 := z.EncBinary()
		_ = yym797
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep798 := !z.EncBinary()
			yy2arr798 := z.EncBasicHandle().StructToArray
			var yyq798 [6]bool
			_, _, _ = yysep798, yyq798, yy2arr798
			const yyr798 bool = false
			yyq798[0] = len(x.Conditions) != 0
			yyq798[1] = x.StartTime != nil
			yyq798[2] = x.CompletionTime != nil
			yyq798[3] = x.Active != 0
			yyq798[4] = x.Succeeded != 0
			yyq798[5] = x.Failed != 0
			if yyr798 || yy2arr798 {
				r.EncodeArrayStart(6)
			} else {
				var yynn798 int = 0
				for _, b := range yyq798 {
					if b {
						yynn798++
					}
				}
				r.EncodeMapStart(yynn798)
			}
			if yyr798 || yy2arr798 {
				if yyq798[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym800 := z.EncBinary()
						_ = yym800
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq798[0] {
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym801 := z.EncBinary()
						_ = yym801
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr798 || yy2arr798 {
				if yyq798[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym803 := z.EncBinary()
						_ = yym803
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym803 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym803 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq798[1] {
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym804 := z.EncBinary()
						_ = yym804
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym804 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym804 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr798 || yy2arr798 {
				if yyq798[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym806 := z.EncBinary()
						_ = yym806
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym806 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym806 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq798[2] {
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym807 := z.EncBinary()
						_ = yym807
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym807 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym807 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr798 || yy2arr798 {
				if yyq798[3] {
					yym809 := z.EncBinary()
					_ = yym809
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq798[3] {
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					yym810 := z.EncBinary()
					_ = yym810
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr798 || yy2arr798 {
				if yyq798[4] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq798[4] {
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr798 || yy2arr798 {
				if yyq798[5] {
					yym815 := z.EncBinary()
					_ = yym815
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq798[5] {
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yysep798 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym817 := z.DecBinary()
	_ = yym817
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl818 := r.ReadMapStart()
			if yyl818 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl818, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl818 := r.ReadArrayStart()
			if yyl818 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl818, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys819Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys819Slc
	var yyhl819 bool = l >= 0
	for yyj819 := 0; ; yyj819++ {
		if yyhl819 {
			if yyj819 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys819Slc = r.DecodeBytes(yys819Slc, true, true)
		yys819 := string(yys819Slc)
		switch yys819 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv820 := &x.Conditions
				yym821 := z.DecBinary()
				_ = yym821
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv820), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym823 := z.DecBinary()
				_ = yym823
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym823 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym823 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym825 := z.DecBinary()
				_ = yym825
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym825 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym825 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys819)
		} // end switch yys819
	} // end for yyj819
	if !yyhl819 {
		r.ReadEnd()
	}
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj829 int
	var yyb829 bool
	var yyhl829 bool = l >= 0
	yyj829++
	if yyhl829 {
		yyb829 = yyj829 > l
	} else {
		yyb829 = r.CheckBreak()
	}
	if yyb829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv830 := &x.Conditions
		yym831 := z.DecBinary()
		_ = yym831
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv830), d)
		}
	}
	yyj829++
	if yyhl829 {
		yyb829 = yyj829 > l
	} else {
		yyb829 = r.CheckBreak()
	}
	if yyb829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym833 := z.DecBinary()
		_ = yym833
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym833 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym833 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj829++
	if yyhl829 {
		yyb829 = yyj829 > l
	} else {
		yyb829 = r.CheckBreak()
	}
	if yyb829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym835 := z.DecBinary()
		_ = yym835
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym835 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym835 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj829++
	if yyhl829 {
		yyb829 = yyj829 > l
	} else {
		yyb829 = r.CheckBreak()
	}
	if yyb829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj829++
	if yyhl829 {
		yyb829 = yyj829 > l
	} else {
		yyb829 = r.CheckBreak()
	}
	if yyb829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj829++
	if yyhl829 {
		yyb829 = yyj829 > l
	} else {
		yyb829 = r.CheckBreak()
	}
	if yyb829 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj829++
		if yyhl829 {
			yyb829 = yyj829 > l
		} else {
			yyb829 = r.CheckBreak()
		}
		if yyb829 {
			break
		}
		z.DecStructFieldNotFound(yyj829-1, "")
	}
	r.ReadEnd()
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym839 := z.EncBinary()
	_ = yym839
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym840 := z.DecBinary()
	_ = yym840
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym841 := z.EncBinary()
		_ = yym841
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep842 := !z.EncBinary()
			yy2arr842 := z.EncBasicHandle().StructToArray
			var yyq842 [6]bool
			_, _, _ = yysep842, yyq842, yy2arr842
			const yyr842 bool = false
			yyq842[2] = true
			yyq842[3] = true
			yyq842[4] = x.Reason != ""
			yyq842[5] = x.Message != ""
			if yyr842 || yy2arr842 {
				r.EncodeArrayStart(6)
			} else {
				var yynn842 int = 2
				for _, b := range yyq842 {
					if b {
						yynn842++
					}
				}
				r.EncodeMapStart(yynn842)
			}
			if yyr842 || yy2arr842 {
				x.Type.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				x.Type.CodecEncodeSelf(e)
			}
			if yyr842 || yy2arr842 {
				yym845 := z.EncBinary()
				_ = yym845
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				yym846 := z.EncBinary()
				_ = yym846
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr842 || yy2arr842 {
				if yyq842[2] {
					yy848 := &x.LastProbeTime
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else if z.HasExtensions() && z.EncExt(yy848) {
					} else if yym849 {
						z.EncBinaryMarshal(yy848)
					} else if !yym849 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy848)
					} else {
						z.EncFallback(yy848)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq842[2] {
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					yy850 := &x.LastProbeTime
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else if z.HasExtensions() && z.EncExt(yy850) {
					} else if yym851 {
						z.EncBinaryMarshal(yy850)
					} else if !yym851 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy850)
					} else {
						z.EncFallback(yy850)
					}
				}
			}
			if yyr842 || yy2arr842 {
				if yyq842[3] {
					yy853 := &x.LastTransitionTime
					yym854 := z.EncBinary()
					_ = yym854
					if false {
					} else if z.HasExtensions() && z.EncExt(yy853) {
					} else if yym854 {
						z.EncBinaryMarshal(yy853)
					} else if !yym854 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy853)
					} else {
						z.EncFallback(yy853)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq842[3] {
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					yy855 := &x.LastTransitionTime
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else if z.HasExtensions() && z.EncExt(yy855) {
					} else if yym856 {
						z.EncBinaryMarshal(yy855)
					} else if !yym856 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy855)
					} else {
						z.EncFallback(yy855)
					}
				}
			}
			if yyr842 || yy2arr842 {
				if yyq842[4] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq842[4] {
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr842 || yy2arr842 {
				if yyq842[5] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq842[5] {
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yysep842 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym863 := z.DecBinary()
	_ = yym863
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl864 := r.ReadMapStart()
			if yyl864 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl864, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl864 := r.ReadArrayStart()
			if yyl864 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl864, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys865Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys865Slc
	var yyhl865 bool = l >= 0
	for yyj865 := 0; ; yyj865++ {
		if yyhl865 {
			if yyj865 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys865Slc = r.DecodeBytes(yys865Slc, true, true)
		yys865 := string(yys865Slc)
		switch yys865 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv868 := &x.LastProbeTime
				yym869 := z.DecBinary()
				_ = yym869
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv868) {
				} else if yym869 {
					z.DecBinaryUnmarshal(yyv868)
				} else if !yym869 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv868)
				} else {
					z.DecFallback(yyv868, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv870 := &x.LastTransitionTime
				yym871 := z.DecBinary()
				_ = yym871
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv870) {
				} else if yym871 {
					z.DecBinaryUnmarshal(yyv870)
				} else if !yym871 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv870)
				} else {
					z.DecFallback(yyv870, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys865)
		} // end switch yys865
	} // end for yyj865
	if !yyhl865 {
		r.ReadEnd()
	}
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj874 int
	var yyb874 bool
	var yyhl874 bool = l >= 0
	yyj874++
	if yyhl874 {
		yyb874 = yyj874 > l
	} else {
		yyb874 = r.CheckBreak()
	}
	if yyb874 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj874++
	if yyhl874 {
		yyb874 = yyj874 > l
	} else {
		yyb874 = r.CheckBreak()
	}
	if yyb874 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj874++
	if yyhl874 {
		yyb874 = yyj874 > l
	} else {
		yyb874 = r.CheckBreak()
	}
	if yyb874 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv877 := &x.LastProbeTime
		yym878 := z.DecBinary()
		_ = yym878
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv877) {
		} else if yym878 {
			z.DecBinaryUnmarshal(yyv877)
		} else if !yym878 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv877)
		} else {
			z.DecFallback(yyv877, false)
		}
	}
	yyj874++
	if yyhl874 {
		yyb874 = yyj874 > l
	} else {
		yyb874 = r.CheckBreak()
	}
	if yyb874 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv879 := &x.LastTransitionTime
		yym880 := z.DecBinary()
		_ = yym880
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv879) {
		} else if yym880 {
			z.DecBinaryUnmarshal(yyv879)
		} else if !yym880 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv879)
		} else {
			z.DecFallback(yyv879, false)
		}
	}
	yyj874++
	if yyhl874 {
		yyb874 = yyj874 > l
	} else {
		yyb874 = r.CheckBreak()
	}
	if yyb874 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj874++
	if yyhl874 {
		yyb874 = yyj874 > l
	} else {
		yyb874 = r.CheckBreak()
	}
	if yyb874 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj874++
		if yyhl874 {
			yyb874 = yyj874 > l
		} else {
			yyb874 = r.CheckBreak()
		}
		if yyb874 {
			break
		}
		z.DecStructFieldNotFound(yyj874-1, "")
	}
	r.ReadEnd()
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym883 := z.EncBinary()
		_ = yym883
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep884 := !z.EncBinary()
			yy2arr884 := z.EncBasicHandle().StructToArray
			var yyq884 [5]bool
			_, _, _ = yysep884, yyq884, yy2arr884
			const yyr884 bool = false
			yyq884[0] = x.Kind != ""
			yyq884[1] = true
			yyq884[2] = true
			yyq884[3] = true
			yyq884[4] = true
			if yyr884 || yy2arr884 {
				r.EncodeArrayStart(5)
			} else {
				var yynn884 int = 0
				for _, b := range yyq884 {
					if b {
						yynn884++
					}
				}
				r.EncodeMapStart(yynn884)
			}
			if yyr884 || yy2arr884 {
				if yyq884[0] {
					yym886 := z.EncBinary()
					_ = yym886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq884[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr884 || yy2arr884 {
				if yyq884[1] {
					yy889 := &x.APIVersion
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else if z.HasExtensions() && z.EncExt(yy889) {
					} else if !yym890 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy889)
					} else {
						z.EncFallback(yy889)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq884[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy891 := &x.APIVersion
					yym892 := z.EncBinary()
					_ = yym892
					if false {
					} else if z.HasExtensions() && z.EncExt(yy891) {
					} else if !yym892 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy891)
					} else {
						z.EncFallback(yy891)
					}
				}
			}
			if yyr884 || yy2arr884 {
				if yyq884[2] {
					yy894 := &x.ObjectMeta
					yy894.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq884[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy895 := &x.ObjectMeta
					yy895.CodecEncodeSelf(e)
				}
			}
			if yyr884 || yy2arr884 {
				if yyq884[3] {
					yy897 := &x.Spec
					yy897.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq884[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy898 := &x.Spec
					yy898.CodecEncodeSelf(e)
				}
			}
			if yyr884 || yy2arr884 {
				if yyq884[4] {
					yy900 := &x.Status
					yy900.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq884[4] {
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					yy901 := &x.Status
					yy901.CodecEncodeSelf(e)
				}
			}
			if yysep884 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym902 := z.DecBinary()
	_ = yym902
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl903 := r.ReadMapStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl903, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl903 := r.ReadArrayStart()
			if yyl903 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl903, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys904Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys904Slc
	var yyhl904 bool = l >= 0
	for yyj904 := 0; ; yyj904++ {
		if yyhl904 {
			if yyj904 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys904Slc = r.DecodeBytes(yys904Slc, true, true)
		yys904 := string(yys904Slc)
		switch yys904 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv906 := &x.APIVersion
				yym907 := z.DecBinary()
				_ = yym907
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv906) {
				} else if !yym907 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv906)
				} else {
					z.DecFallback(yyv906, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv908 := &x.ObjectMeta
				yyv908.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv909 := &x.Spec
				yyv909.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv910 := &x.Status
				yyv910.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys904)
		} // end switch yys904
	} // end for yyj904
	if !yyhl904 {
		r.ReadEnd()
	}
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj911 int
	var yyb911 bool
	var yyhl911 bool = l >= 0
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv913 := &x.APIVersion
		yym914 := z.DecBinary()
		_ = yym914
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv913) {
		} else if !yym914 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv913)
		} else {
			z.DecFallback(yyv913, false)
		}
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv915 := &x.ObjectMeta
		yyv915.CodecDecodeSelf(d)
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv916 := &x.Spec
		yyv916.CodecDecodeSelf(d)
	}
	yyj911++
	if yyhl911 {
		yyb911 = yyj911 > l
	} else {
		yyb911 = r.CheckBreak()
	}
	if yyb911 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv917 := &x.Status
		yyv917.CodecDecodeSelf(d)
	}
	for {
		yyj911++
		if yyhl911 {
			yyb911 = yyj911 > l
		} else {
			yyb911 = r.CheckBreak()
		}
		if yyb911 {
			break
		}
		z.DecStructFieldNotFound(yyj911-1, "")
	}
	r.ReadEnd()
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym918 := z.EncBinary()
		_ = yym918
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep919 := !z.EncBinary()
			yy2arr919 := z.EncBasicHandle().StructToArray
			var yyq919 [4]bool
			_, _, _ = yysep919, yyq919, yy2arr919
			const yyr919 bool = false
			yyq919[0] = x.Kind != ""
			yyq919[1] = true
			yyq919[2] = true
			if yyr919 || yy2arr919 {
				r.EncodeArrayStart(4)
			} else {
				var yynn919 int = 1
				for _, b := range yyq919 {
					if b {
						yynn919++
					}
				}
				r.EncodeMapStart(yynn919)
			}
			if yyr919 || yy2arr919 {
				if yyq919[0] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq919[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr919 || yy2arr919 {
				if yyq919[1] {
					yy924 := &x.APIVersion
					yym925 := z.EncBinary()
					_ = yym925
					if false {
					} else if z.HasExtensions() && z.EncExt(yy924) {
					} else if !yym925 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy924)
					} else {
						z.EncFallback(yy924)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq919[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy926 := &x.APIVersion
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy926) {
					} else if !yym927 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy926)
					} else {
						z.EncFallback(yy926)
					}
				}
			}
			if yyr919 || yy2arr919 {
				if yyq919[2] {
					yy929 := &x.ListMeta
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else if z.HasExtensions() && z.EncExt(yy929) {
					} else {
						z.EncFallback(yy929)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq919[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy931 := &x.ListMeta
					yym932 := z.EncBinary()
					_ = yym932
					if false {
					} else if z.HasExtensions() && z.EncExt(yy931) {
					} else {
						z.EncFallback(yy931)
					}
				}
			}
			if yyr919 || yy2arr919 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym934 := z.EncBinary()
					_ = yym934
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym935 := z.EncBinary()
					_ = yym935
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yysep919 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym936 := z.DecBinary()
	_ = yym936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl937 := r.ReadMapStart()
			if yyl937 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl937, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl937 := r.ReadArrayStart()
			if yyl937 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl937, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys938Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys938Slc
	var yyhl938 bool = l >= 0
	for yyj938 := 0; ; yyj938++ {
		if yyhl938 {
			if yyj938 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys938Slc = r.DecodeBytes(yys938Slc, true, true)
		yys938 := string(yys938Slc)
		switch yys938 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv940 := &x.APIVersion
				yym941 := z.DecBinary()
				_ = yym941
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv940) {
				} else if !yym941 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv940)
				} else {
					z.DecFallback(yyv940, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv942 := &x.ListMeta
				yym943 := z.DecBinary()
				_ = yym943
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv942) {
				} else {
					z.DecFallback(yyv942, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv944 := &x.Items
				yym945 := z.DecBinary()
				_ = yym945
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv944), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys938)
		} // end switch yys938
	} // end for yyj938
	if !yyhl938 {
		r.ReadEnd()
	}
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj946 int
	var yyb946 bool
	var yyhl946 bool = l >= 0
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv948 := &x.APIVersion
		yym949 := z.DecBinary()
		_ = yym949
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv948) {
		} else if !yym949 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv948)
		} else {
			z.DecFallback(yyv948, false)
		}
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv950 := &x.ListMeta
		yym951 := z.DecBinary()
		_ = yym951
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv950) {
		} else {
			z.DecFallback(yyv950, false)
		}
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv952 := &x.Items
		yym953 := z.DecBinary()
		_ = yym953
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv952), d)
		}
	}
	for {
		yyj946++
		if yyhl946 {
			yyb946 = yyj946 > l
		} else {
			yyb946 = r.CheckBreak()
		}
		if yyb946 {
			break
		}
		z.DecStructFieldNotFound(yyj946-1, "")
	}
	r.ReadEnd()
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym954 := z.EncBinary()
		_ = yym954
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep955 := !z.EncBinary()
			yy2arr955 := z.EncBasicHandle().StructToArray
			var yyq955 [2]bool
			_, _, _ = yysep955, yyq955, yy2arr955
			const yyr955 bool = false
			yyq955[0] = x.Backend != nil
			yyq955[1] = len(x.Rules) != 0
			if yyr955 || yy2arr955 {
				r.EncodeArrayStart(2)
			} else {
				var yynn955 int = 0
				for _, b := range yyq955 {
					if b {
						yynn955++
					}
				}
				r.EncodeMapStart(yynn955)
			}
			if yyr955 || yy2arr955 {
				if yyq955[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq955[0] {
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr955 || yy2arr955 {
				if yyq955[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym958 := z.EncBinary()
						_ = yym958
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq955[1] {
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym959 := z.EncBinary()
						_ = yym959
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yysep955 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym960 := z.DecBinary()
	_ = yym960
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl961 := r.ReadMapStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl961, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl961 := r.ReadArrayStart()
			if yyl961 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl961, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys962Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys962Slc
	var yyhl962 bool = l >= 0
	for yyj962 := 0; ; yyj962++ {
		if yyhl962 {
			if yyj962 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys962Slc = r.DecodeBytes(yys962Slc, true, true)
		yys962 := string(yys962Slc)
		switch yys962 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv964 := &x.Rules
				yym965 := z.DecBinary()
				_ = yym965
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv964), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys962)
		} // end switch yys962
	} // end for yyj962
	if !yyhl962 {
		r.ReadEnd()
	}
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj966 int
	var yyb966 bool
	var yyhl966 bool = l >= 0
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj966++
	if yyhl966 {
		yyb966 = yyj966 > l
	} else {
		yyb966 = r.CheckBreak()
	}
	if yyb966 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv968 := &x.Rules
		yym969 := z.DecBinary()
		_ = yym969
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv968), d)
		}
	}
	for {
		yyj966++
		if yyhl966 {
			yyb966 = yyj966 > l
		} else {
			yyb966 = r.CheckBreak()
		}
		if yyb966 {
			break
		}
		z.DecStructFieldNotFound(yyj966-1, "")
	}
	r.ReadEnd()
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym970 := z.EncBinary()
		_ = yym970
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep971 := !z.EncBinary()
			yy2arr971 := z.EncBasicHandle().StructToArray
			var yyq971 [1]bool
			_, _, _ = yysep971, yyq971, yy2arr971
			const yyr971 bool = false
			yyq971[0] = true
			if yyr971 || yy2arr971 {
				r.EncodeArrayStart(1)
			} else {
				var yynn971 int = 0
				for _, b := range yyq971 {
					if b {
						yynn971++
					}
				}
				r.EncodeMapStart(yynn971)
			}
			if yyr971 || yy2arr971 {
				if yyq971[0] {
					yy973 := &x.LoadBalancer
					yy973.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq971[0] {
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					yy974 := &x.LoadBalancer
					yy974.CodecEncodeSelf(e)
				}
			}
			if yysep971 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym975 := z.DecBinary()
	_ = yym975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl976 := r.ReadMapStart()
			if yyl976 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl976, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl976 := r.ReadArrayStart()
			if yyl976 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys977Slc
	var yyhl977 bool = l >= 0
	for yyj977 := 0; ; yyj977++ {
		if yyhl977 {
			if yyj977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys977Slc = r.DecodeBytes(yys977Slc, true, true)
		yys977 := string(yys977Slc)
		switch yys977 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
			} else {
				yyv978 := &x.LoadBalancer
				yyv978.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys977)
		} // end switch yys977
	} // end for yyj977
	if !yyhl977 {
		r.ReadEnd()
	}
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj979 int
	var yyb979 bool
	var yyhl979 bool = l >= 0
	yyj979++
	if yyhl979 {
		yyb979 = yyj979 > l
	} else {
		yyb979 = r.CheckBreak()
	}
	if yyb979 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
	} else {
		yyv980 := &x.LoadBalancer
		yyv980.CodecDecodeSelf(d)
	}
	for {
		yyj979++
		if yyhl979 {
			yyb979 = yyj979 > l
		} else {
			yyb979 = r.CheckBreak()
		}
		if yyb979 {
			break
		}
		z.DecStructFieldNotFound(yyj979-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym981 := z.EncBinary()
		_ = yym981
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep982 := !z.EncBinary()
			yy2arr982 := z.EncBasicHandle().StructToArray
			var yyq982 [2]bool
			_, _, _ = yysep982, yyq982, yy2arr982
			const yyr982 bool = false
			yyq982[0] = x.Host != ""
			yyq982[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			if yyr982 || yy2arr982 {
				r.EncodeArrayStart(2)
			} else {
				var yynn982 int = 0
				for _, b := range yyq982 {
					if b {
						yynn982++
					}
				}
				r.EncodeMapStart(yynn982)
			}
			if yyr982 || yy2arr982 {
				if yyq982[0] {
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq982[0] {
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn986 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn986 = true
				goto LABEL986
			}
		LABEL986:
			if yyr982 || yy2arr982 {
				if yyn986 {
					r.EncodeNil()
				} else {
					if yyq982[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq982[1] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if yyn986 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yysep982 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym987 := z.DecBinary()
	_ = yym987
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl988 := r.ReadMapStart()
			if yyl988 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl988, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl988 := r.ReadArrayStart()
			if yyl988 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl988, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys989Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys989Slc
	var yyhl989 bool = l >= 0
	for yyj989 := 0; ; yyj989++ {
		if yyhl989 {
			if yyj989 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys989Slc = r.DecodeBytes(yys989Slc, true, true)
		yys989 := string(yys989Slc)
		switch yys989 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys989)
		} // end switch yys989
	} // end for yyj989
	if !yyhl989 {
		r.ReadEnd()
	}
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj992 int
	var yyb992 bool
	var yyhl992 bool = l >= 0
	yyj992++
	if yyhl992 {
		yyb992 = yyj992 > l
	} else {
		yyb992 = r.CheckBreak()
	}
	if yyb992 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj992++
	if yyhl992 {
		yyb992 = yyj992 > l
	} else {
		yyb992 = r.CheckBreak()
	}
	if yyb992 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj992++
		if yyhl992 {
			yyb992 = yyj992 > l
		} else {
			yyb992 = r.CheckBreak()
		}
		if yyb992 {
			break
		}
		z.DecStructFieldNotFound(yyj992-1, "")
	}
	r.ReadEnd()
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym995 := z.EncBinary()
		_ = yym995
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep996 := !z.EncBinary()
			yy2arr996 := z.EncBasicHandle().StructToArray
			var yyq996 [1]bool
			_, _, _ = yysep996, yyq996, yy2arr996
			const yyr996 bool = false
			yyq996[0] = x.HTTP != nil
			if yyr996 || yy2arr996 {
				r.EncodeArrayStart(1)
			} else {
				var yynn996 int = 0
				for _, b := range yyq996 {
					if b {
						yynn996++
					}
				}
				r.EncodeMapStart(yynn996)
			}
			if yyr996 || yy2arr996 {
				if yyq996[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq996[0] {
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yysep996 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym998 := z.DecBinary()
	_ = yym998
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl999 := r.ReadMapStart()
			if yyl999 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl999, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl999 := r.ReadArrayStart()
			if yyl999 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl999, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1000Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1000Slc
	var yyhl1000 bool = l >= 0
	for yyj1000 := 0; ; yyj1000++ {
		if yyhl1000 {
			if yyj1000 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1000Slc = r.DecodeBytes(yys1000Slc, true, true)
		yys1000 := string(yys1000Slc)
		switch yys1000 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1000)
		} // end switch yys1000
	} // end for yyj1000
	if !yyhl1000 {
		r.ReadEnd()
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1002 int
	var yyb1002 bool
	var yyhl1002 bool = l >= 0
	yyj1002++
	if yyhl1002 {
		yyb1002 = yyj1002 > l
	} else {
		yyb1002 = r.CheckBreak()
	}
	if yyb1002 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1002++
		if yyhl1002 {
			yyb1002 = yyj1002 > l
		} else {
			yyb1002 = r.CheckBreak()
		}
		if yyb1002 {
			break
		}
		z.DecStructFieldNotFound(yyj1002-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1004 := z.EncBinary()
		_ = yym1004
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1005 := !z.EncBinary()
			yy2arr1005 := z.EncBasicHandle().StructToArray
			var yyq1005 [1]bool
			_, _, _ = yysep1005, yyq1005, yy2arr1005
			const yyr1005 bool = false
			if yyr1005 || yy2arr1005 {
				r.EncodeArrayStart(1)
			} else {
				var yynn1005 int = 1
				for _, b := range yyq1005 {
					if b {
						yynn1005++
					}
				}
				r.EncodeMapStart(yynn1005)
			}
			if yyr1005 || yy2arr1005 {
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1008 := z.EncBinary()
					_ = yym1008
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yysep1005 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1009 := z.DecBinary()
	_ = yym1009
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1010 := r.ReadMapStart()
			if yyl1010 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1010, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1010 := r.ReadArrayStart()
			if yyl1010 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1010, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1011Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1011Slc
	var yyhl1011 bool = l >= 0
	for yyj1011 := 0; ; yyj1011++ {
		if yyhl1011 {
			if yyj1011 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1011Slc = r.DecodeBytes(yys1011Slc, true, true)
		yys1011 := string(yys1011Slc)
		switch yys1011 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1012 := &x.Paths
				yym1013 := z.DecBinary()
				_ = yym1013
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1012), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1011)
		} // end switch yys1011
	} // end for yyj1011
	if !yyhl1011 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1014 int
	var yyb1014 bool
	var yyhl1014 bool = l >= 0
	yyj1014++
	if yyhl1014 {
		yyb1014 = yyj1014 > l
	} else {
		yyb1014 = r.CheckBreak()
	}
	if yyb1014 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1015 := &x.Paths
		yym1016 := z.DecBinary()
		_ = yym1016
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1015), d)
		}
	}
	for {
		yyj1014++
		if yyhl1014 {
			yyb1014 = yyj1014 > l
		} else {
			yyb1014 = r.CheckBreak()
		}
		if yyb1014 {
			break
		}
		z.DecStructFieldNotFound(yyj1014-1, "")
	}
	r.ReadEnd()
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1017 := z.EncBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1018 := !z.EncBinary()
			yy2arr1018 := z.EncBasicHandle().StructToArray
			var yyq1018 [2]bool
			_, _, _ = yysep1018, yyq1018, yy2arr1018
			const yyr1018 bool = false
			yyq1018[0] = x.Path != ""
			if yyr1018 || yy2arr1018 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1018 int = 1
				for _, b := range yyq1018 {
					if b {
						yynn1018++
					}
				}
				r.EncodeMapStart(yynn1018)
			}
			if yyr1018 || yy2arr1018 {
				if yyq1018[0] {
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1018[0] {
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					yym1021 := z.EncBinary()
					_ = yym1021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				yy1023 := &x.Backend
				yy1023.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				yy1024 := &x.Backend
				yy1024.CodecEncodeSelf(e)
			}
			if yysep1018 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1025 := z.DecBinary()
	_ = yym1025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1026 := r.ReadMapStart()
			if yyl1026 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1026, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1026 := r.ReadArrayStart()
			if yyl1026 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1026, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1027Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1027Slc
	var yyhl1027 bool = l >= 0
	for yyj1027 := 0; ; yyj1027++ {
		if yyhl1027 {
			if yyj1027 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1027Slc = r.DecodeBytes(yys1027Slc, true, true)
		yys1027 := string(yys1027Slc)
		switch yys1027 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1029 := &x.Backend
				yyv1029.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1027)
		} // end switch yys1027
	} // end for yyj1027
	if !yyhl1027 {
		r.ReadEnd()
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1030 int
	var yyb1030 bool
	var yyhl1030 bool = l >= 0
	yyj1030++
	if yyhl1030 {
		yyb1030 = yyj1030 > l
	} else {
		yyb1030 = r.CheckBreak()
	}
	if yyb1030 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1030++
	if yyhl1030 {
		yyb1030 = yyj1030 > l
	} else {
		yyb1030 = r.CheckBreak()
	}
	if yyb1030 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1032 := &x.Backend
		yyv1032.CodecDecodeSelf(d)
	}
	for {
		yyj1030++
		if yyhl1030 {
			yyb1030 = yyj1030 > l
		} else {
			yyb1030 = r.CheckBreak()
		}
		if yyb1030 {
			break
		}
		z.DecStructFieldNotFound(yyj1030-1, "")
	}
	r.ReadEnd()
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1033 := z.EncBinary()
		_ = yym1033
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1034 := !z.EncBinary()
			yy2arr1034 := z.EncBasicHandle().StructToArray
			var yyq1034 [2]bool
			_, _, _ = yysep1034, yyq1034, yy2arr1034
			const yyr1034 bool = false
			if yyr1034 || yy2arr1034 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1034 int = 2
				for _, b := range yyq1034 {
					if b {
						yynn1034++
					}
				}
				r.EncodeMapStart(yynn1034)
			}
			if yyr1034 || yy2arr1034 {
				yym1036 := z.EncBinary()
				_ = yym1036
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				yym1037 := z.EncBinary()
				_ = yym1037
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1034 || yy2arr1034 {
				yy1039 := &x.ServicePort
				yym1040 := z.EncBinary()
				_ = yym1040
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1039) {
				} else if !yym1040 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1039)
				} else {
					z.EncFallback(yy1039)
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				yy1041 := &x.ServicePort
				yym1042 := z.EncBinary()
				_ = yym1042
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1041) {
				} else if !yym1042 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1041)
				} else {
					z.EncFallback(yy1041)
				}
			}
			if yysep1034 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1043 := z.DecBinary()
	_ = yym1043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1044 := r.ReadMapStart()
			if yyl1044 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1044, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1044 := r.ReadArrayStart()
			if yyl1044 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1044, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1045Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1045Slc
	var yyhl1045 bool = l >= 0
	for yyj1045 := 0; ; yyj1045++ {
		if yyhl1045 {
			if yyj1045 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1045Slc = r.DecodeBytes(yys1045Slc, true, true)
		yys1045 := string(yys1045Slc)
		switch yys1045 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_util.IntOrString{}
			} else {
				yyv1047 := &x.ServicePort
				yym1048 := z.DecBinary()
				_ = yym1048
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1047) {
				} else if !yym1048 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1047)
				} else {
					z.DecFallback(yyv1047, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1045)
		} // end switch yys1045
	} // end for yyj1045
	if !yyhl1045 {
		r.ReadEnd()
	}
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1049 int
	var yyb1049 bool
	var yyhl1049 bool = l >= 0
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_util.IntOrString{}
	} else {
		yyv1051 := &x.ServicePort
		yym1052 := z.DecBinary()
		_ = yym1052
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1051) {
		} else if !yym1052 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1051)
		} else {
			z.DecFallback(yyv1051, false)
		}
	}
	for {
		yyj1049++
		if yyhl1049 {
			yyb1049 = yyj1049 > l
		} else {
			yyb1049 = r.CheckBreak()
		}
		if yyb1049 {
			break
		}
		z.DecStructFieldNotFound(yyj1049-1, "")
	}
	r.ReadEnd()
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1053 := z.EncBinary()
	_ = yym1053
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1054 := z.DecBinary()
	_ = yym1054
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1055 := z.EncBinary()
		_ = yym1055
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1056 := !z.EncBinary()
			yy2arr1056 := z.EncBasicHandle().StructToArray
			var yyq1056 [2]bool
			_, _, _ = yysep1056, yyq1056, yy2arr1056
			const yyr1056 bool = false
			if yyr1056 || yy2arr1056 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1056 int = 2
				for _, b := range yyq1056 {
					if b {
						yynn1056++
					}
				}
				r.EncodeMapStart(yynn1056)
			}
			if yyr1056 || yy2arr1056 {
				x.Resource.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1056 || yy2arr1056 {
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				yym1060 := z.EncBinary()
				_ = yym1060
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yysep1056 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1061 := z.DecBinary()
	_ = yym1061
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1062 := r.ReadMapStart()
			if yyl1062 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1062, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1062 := r.ReadArrayStart()
			if yyl1062 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1062, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1063Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1063Slc
	var yyhl1063 bool = l >= 0
	for yyj1063 := 0; ; yyj1063++ {
		if yyhl1063 {
			if yyj1063 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1063Slc = r.DecodeBytes(yys1063Slc, true, true)
		yys1063 := string(yys1063Slc)
		switch yys1063 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1063)
		} // end switch yys1063
	} // end for yyj1063
	if !yyhl1063 {
		r.ReadEnd()
	}
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1066 int
	var yyb1066 bool
	var yyhl1066 bool = l >= 0
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1066++
		if yyhl1066 {
			yyb1066 = yyj1066 > l
		} else {
			yyb1066 = r.CheckBreak()
		}
		if yyb1066 {
			break
		}
		z.DecStructFieldNotFound(yyj1066-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1069 := z.EncBinary()
		_ = yym1069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1070 := !z.EncBinary()
			yy2arr1070 := z.EncBasicHandle().StructToArray
			var yyq1070 [3]bool
			_, _, _ = yysep1070, yyq1070, yy2arr1070
			const yyr1070 bool = false
			if yyr1070 || yy2arr1070 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1070 int = 3
				for _, b := range yyq1070 {
					if b {
						yynn1070++
					}
				}
				r.EncodeMapStart(yynn1070)
			}
			if yyr1070 || yy2arr1070 {
				yym1072 := z.EncBinary()
				_ = yym1072
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				yym1073 := z.EncBinary()
				_ = yym1073
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1070 || yy2arr1070 {
				yym1075 := z.EncBinary()
				_ = yym1075
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				yym1076 := z.EncBinary()
				_ = yym1076
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1070 || yy2arr1070 {
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1078 := z.EncBinary()
					_ = yym1078
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1079 := z.EncBinary()
					_ = yym1079
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yysep1070 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1080 := z.DecBinary()
	_ = yym1080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1081 := r.ReadMapStart()
			if yyl1081 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1081, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1081 := r.ReadArrayStart()
			if yyl1081 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1082Slc
	var yyhl1082 bool = l >= 0
	for yyj1082 := 0; ; yyj1082++ {
		if yyhl1082 {
			if yyj1082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1082Slc = r.DecodeBytes(yys1082Slc, true, true)
		yys1082 := string(yys1082Slc)
		switch yys1082 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1085 := &x.TargetUtilization
				yym1086 := z.DecBinary()
				_ = yym1086
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1085), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1082)
		} // end switch yys1082
	} // end for yyj1082
	if !yyhl1082 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1087 int
	var yyb1087 bool
	var yyhl1087 bool = l >= 0
	yyj1087++
	if yyhl1087 {
		yyb1087 = yyj1087 > l
	} else {
		yyb1087 = r.CheckBreak()
	}
	if yyb1087 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1087++
	if yyhl1087 {
		yyb1087 = yyj1087 > l
	} else {
		yyb1087 = r.CheckBreak()
	}
	if yyb1087 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1087++
	if yyhl1087 {
		yyb1087 = yyj1087 > l
	} else {
		yyb1087 = r.CheckBreak()
	}
	if yyb1087 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1090 := &x.TargetUtilization
		yym1091 := z.DecBinary()
		_ = yym1091
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1090), d)
		}
	}
	for {
		yyj1087++
		if yyhl1087 {
			yyb1087 = yyj1087 > l
		} else {
			yyb1087 = r.CheckBreak()
		}
		if yyb1087 {
			break
		}
		z.DecStructFieldNotFound(yyj1087-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1092 := z.EncBinary()
		_ = yym1092
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1093 := !z.EncBinary()
			yy2arr1093 := z.EncBasicHandle().StructToArray
			var yyq1093 [4]bool
			_, _, _ = yysep1093, yyq1093, yy2arr1093
			const yyr1093 bool = false
			yyq1093[0] = x.Kind != ""
			yyq1093[1] = true
			yyq1093[2] = true
			yyq1093[3] = true
			if yyr1093 || yy2arr1093 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1093 int = 0
				for _, b := range yyq1093 {
					if b {
						yynn1093++
					}
				}
				r.EncodeMapStart(yynn1093)
			}
			if yyr1093 || yy2arr1093 {
				if yyq1093[0] {
					yym1095 := z.EncBinary()
					_ = yym1095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1093[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1096 := z.EncBinary()
					_ = yym1096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1093 || yy2arr1093 {
				if yyq1093[1] {
					yy1098 := &x.APIVersion
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1098) {
					} else if !yym1099 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1098)
					} else {
						z.EncFallback(yy1098)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1093[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1100 := &x.APIVersion
					yym1101 := z.EncBinary()
					_ = yym1101
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1100) {
					} else if !yym1101 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1100)
					} else {
						z.EncFallback(yy1100)
					}
				}
			}
			if yyr1093 || yy2arr1093 {
				if yyq1093[2] {
					yy1103 := &x.ObjectMeta
					yy1103.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1093[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1104 := &x.ObjectMeta
					yy1104.CodecEncodeSelf(e)
				}
			}
			if yyr1093 || yy2arr1093 {
				if yyq1093[3] {
					yy1106 := &x.Spec
					yy1106.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1093[3] {
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					yy1107 := &x.Spec
					yy1107.CodecEncodeSelf(e)
				}
			}
			if yysep1093 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1108 := z.DecBinary()
	_ = yym1108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1109 := r.ReadMapStart()
			if yyl1109 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1109, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1109 := r.ReadArrayStart()
			if yyl1109 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1110Slc
	var yyhl1110 bool = l >= 0
	for yyj1110 := 0; ; yyj1110++ {
		if yyhl1110 {
			if yyj1110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1110Slc = r.DecodeBytes(yys1110Slc, true, true)
		yys1110 := string(yys1110Slc)
		switch yys1110 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv1112 := &x.APIVersion
				yym1113 := z.DecBinary()
				_ = yym1113
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1112) {
				} else if !yym1113 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1112)
				} else {
					z.DecFallback(yyv1112, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1114 := &x.ObjectMeta
				yyv1114.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1115 := &x.Spec
				yyv1115.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1110)
		} // end switch yys1110
	} // end for yyj1110
	if !yyhl1110 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1116 int
	var yyb1116 bool
	var yyhl1116 bool = l >= 0
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv1118 := &x.APIVersion
		yym1119 := z.DecBinary()
		_ = yym1119
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1118) {
		} else if !yym1119 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1118)
		} else {
			z.DecFallback(yyv1118, false)
		}
	}
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1120 := &x.ObjectMeta
		yyv1120.CodecDecodeSelf(d)
	}
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1121 := &x.Spec
		yyv1121.CodecDecodeSelf(d)
	}
	for {
		yyj1116++
		if yyhl1116 {
			yyb1116 = yyj1116 > l
		} else {
			yyb1116 = r.CheckBreak()
		}
		if yyb1116 {
			break
		}
		z.DecStructFieldNotFound(yyj1116-1, "")
	}
	r.ReadEnd()
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1122 := z.EncBinary()
		_ = yym1122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1123 := !z.EncBinary()
			yy2arr1123 := z.EncBasicHandle().StructToArray
			var yyq1123 [4]bool
			_, _, _ = yysep1123, yyq1123, yy2arr1123
			const yyr1123 bool = false
			yyq1123[0] = x.Kind != ""
			yyq1123[1] = true
			yyq1123[2] = true
			if yyr1123 || yy2arr1123 {
				r.EncodeArrayStart(4)
			} else {
				var yynn1123 int = 1
				for _, b := range yyq1123 {
					if b {
						yynn1123++
					}
				}
				r.EncodeMapStart(yynn1123)
			}
			if yyr1123 || yy2arr1123 {
				if yyq1123[0] {
					yym1125 := z.EncBinary()
					_ = yym1125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1123[0] {
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					yym1126 := z.EncBinary()
					_ = yym1126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1123 || yy2arr1123 {
				if yyq1123[1] {
					yy1128 := &x.APIVersion
					yym1129 := z.EncBinary()
					_ = yym1129
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1128) {
					} else if !yym1129 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1128)
					} else {
						z.EncFallback(yy1128)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1123[1] {
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					yy1130 := &x.APIVersion
					yym1131 := z.EncBinary()
					_ = yym1131
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1130) {
					} else if !yym1131 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1130)
					} else {
						z.EncFallback(yy1130)
					}
				}
			}
			if yyr1123 || yy2arr1123 {
				if yyq1123[2] {
					yy1133 := &x.ListMeta
					yym1134 := z.EncBinary()
					_ = yym1134
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1133) {
					} else {
						z.EncFallback(yy1133)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1123[2] {
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					yy1135 := &x.ListMeta
					yym1136 := z.EncBinary()
					_ = yym1136
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1135) {
					} else {
						z.EncFallback(yy1135)
					}
				}
			}
			if yyr1123 || yy2arr1123 {
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1138 := z.EncBinary()
					_ = yym1138
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1139 := z.EncBinary()
					_ = yym1139
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yysep1123 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1140 := z.DecBinary()
	_ = yym1140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1141 := r.ReadMapStart()
			if yyl1141 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1141, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1141 := r.ReadArrayStart()
			if yyl1141 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1142Slc
	var yyhl1142 bool = l >= 0
	for yyj1142 := 0; ; yyj1142++ {
		if yyhl1142 {
			if yyj1142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1142Slc = r.DecodeBytes(yys1142Slc, true, true)
		yys1142 := string(yys1142Slc)
		switch yys1142 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = pkg1_unversioned.GroupVersion{}
			} else {
				yyv1144 := &x.APIVersion
				yym1145 := z.DecBinary()
				_ = yym1145
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1144) {
				} else if !yym1145 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1144)
				} else {
					z.DecFallback(yyv1144, false)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1146 := &x.ListMeta
				yym1147 := z.DecBinary()
				_ = yym1147
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1146) {
				} else {
					z.DecFallback(yyv1146, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1148 := &x.Items
				yym1149 := z.DecBinary()
				_ = yym1149
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1148), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1142)
		} // end switch yys1142
	} // end for yyj1142
	if !yyhl1142 {
		r.ReadEnd()
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1150 int
	var yyb1150 bool
	var yyhl1150 bool = l >= 0
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.APIVersion = pkg1_unversioned.GroupVersion{}
	} else {
		yyv1152 := &x.APIVersion
		yym1153 := z.DecBinary()
		_ = yym1153
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1152) {
		} else if !yym1153 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1152)
		} else {
			z.DecFallback(yyv1152, false)
		}
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1154 := &x.ListMeta
		yym1155 := z.DecBinary()
		_ = yym1155
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1154) {
		} else {
			z.DecFallback(yyv1154, false)
		}
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1156 := &x.Items
		yym1157 := z.DecBinary()
		_ = yym1157
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1156), d)
		}
	}
	for {
		yyj1150++
		if yyhl1150 {
			yyb1150 = yyj1150 > l
		} else {
			yyb1150 = r.CheckBreak()
		}
		if yyb1150 {
			break
		}
		z.DecStructFieldNotFound(yyj1150-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1158 := z.EncBinary()
		_ = yym1158
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1159 := !z.EncBinary()
			yy2arr1159 := z.EncBasicHandle().StructToArray
			var yyq1159 [2]bool
			_, _, _ = yysep1159, yyq1159, yy2arr1159
			const yyr1159 bool = false
			yyq1159[0] = len(x.MatchLabels) != 0
			yyq1159[1] = len(x.MatchExpressions) != 0
			if yyr1159 || yy2arr1159 {
				r.EncodeArrayStart(2)
			} else {
				var yynn1159 int = 0
				for _, b := range yyq1159 {
					if b {
						yynn1159++
					}
				}
				r.EncodeMapStart(yynn1159)
			}
			if yyr1159 || yy2arr1159 {
				if yyq1159[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1161 := z.EncBinary()
						_ = yym1161
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1159[0] {
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1162 := z.EncBinary()
						_ = yym1162
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1159 || yy2arr1159 {
				if yyq1159[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1164 := z.EncBinary()
						_ = yym1164
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1159[1] {
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1165 := z.EncBinary()
						_ = yym1165
						if false {
						} else {
							h.encSlicePodSelectorRequirement(([]PodSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yysep1159 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1166 := z.DecBinary()
	_ = yym1166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1167 := r.ReadMapStart()
			if yyl1167 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1167, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1167 := r.ReadArrayStart()
			if yyl1167 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1168Slc
	var yyhl1168 bool = l >= 0
	for yyj1168 := 0; ; yyj1168++ {
		if yyhl1168 {
			if yyj1168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1168Slc = r.DecodeBytes(yys1168Slc, true, true)
		yys1168 := string(yys1168Slc)
		switch yys1168 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1169 := &x.MatchLabels
				yym1170 := z.DecBinary()
				_ = yym1170
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1169, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1171 := &x.MatchExpressions
				yym1172 := z.DecBinary()
				_ = yym1172
				if false {
				} else {
					h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1171), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1168)
		} // end switch yys1168
	} // end for yyj1168
	if !yyhl1168 {
		r.ReadEnd()
	}
}

func (x *PodSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1173 int
	var yyb1173 bool
	var yyhl1173 bool = l >= 0
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1174 := &x.MatchLabels
		yym1175 := z.DecBinary()
		_ = yym1175
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1174, false, d)
		}
	}
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1176 := &x.MatchExpressions
		yym1177 := z.DecBinary()
		_ = yym1177
		if false {
		} else {
			h.decSlicePodSelectorRequirement((*[]PodSelectorRequirement)(yyv1176), d)
		}
	}
	for {
		yyj1173++
		if yyhl1173 {
			yyb1173 = yyj1173 > l
		} else {
			yyb1173 = r.CheckBreak()
		}
		if yyb1173 {
			break
		}
		z.DecStructFieldNotFound(yyj1173-1, "")
	}
	r.ReadEnd()
}

func (x *PodSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1178 := z.EncBinary()
		_ = yym1178
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1179 := !z.EncBinary()
			yy2arr1179 := z.EncBasicHandle().StructToArray
			var yyq1179 [3]bool
			_, _, _ = yysep1179, yyq1179, yy2arr1179
			const yyr1179 bool = false
			yyq1179[2] = len(x.Values) != 0
			if yyr1179 || yy2arr1179 {
				r.EncodeArrayStart(3)
			} else {
				var yynn1179 int = 2
				for _, b := range yyq1179 {
					if b {
						yynn1179++
					}
				}
				r.EncodeMapStart(yynn1179)
			}
			if yyr1179 || yy2arr1179 {
				yym1181 := z.EncBinary()
				_ = yym1181
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				yym1182 := z.EncBinary()
				_ = yym1182
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1179 || yy2arr1179 {
				x.Operator.CodecEncodeSelf(e)
			} else {
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1179 || yy2arr1179 {
				if yyq1179[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1185 := z.EncBinary()
						_ = yym1185
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1179[2] {
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1186 := z.EncBinary()
						_ = yym1186
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yysep1179 {
				r.EncodeEnd()
			}
		}
	}
}

func (x *PodSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1187 := z.DecBinary()
	_ = yym1187
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelferValueTypeMap1234) {
			yyl1188 := r.ReadMapStart()
			if yyl1188 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl1188, d)
			}
		} else if r.IsContainerType(codecSelferValueTypeArray1234) {
			yyl1188 := r.ReadArrayStart()
			if yyl1188 == 0 {
				r.ReadEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl1188, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1189Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1189Slc
	var yyhl1189 bool = l >= 0
	for yyj1189 := 0; ; yyj1189++ {
		if yyhl1189 {
			if yyj1189 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		yys1189Slc = r.DecodeBytes(yys1189Slc, true, true)
		yys1189 := string(yys1189Slc)
		switch yys1189 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = PodSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1192 := &x.Values
				yym1193 := z.DecBinary()
				_ = yym1193
				if false {
				} else {
					z.F.DecSliceStringX(yyv1192, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1189)
		} // end switch yys1189
	} // end for yyj1189
	if !yyhl1189 {
		r.ReadEnd()
	}
}

func (x *PodSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1194 int
	var yyb1194 bool
	var yyhl1194 bool = l >= 0
	yyj1194++
	if yyhl1194 {
		yyb1194 = yyj1194 > l
	} else {
		yyb1194 = r.CheckBreak()
	}
	if yyb1194 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1194++
	if yyhl1194 {
		yyb1194 = yyj1194 > l
	} else {
		yyb1194 = r.CheckBreak()
	}
	if yyb1194 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = PodSelectorOperator(r.DecodeString())
	}
	yyj1194++
	if yyhl1194 {
		yyb1194 = yyj1194 > l
	} else {
		yyb1194 = r.CheckBreak()
	}
	if yyb1194 {
		r.ReadEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1197 := &x.Values
		yym1198 := z.DecBinary()
		_ = yym1198
		if false {
		} else {
			z.F.DecSliceStringX(yyv1197, false, d)
		}
	}
	for {
		yyj1194++
		if yyhl1194 {
			yyb1194 = yyj1194 > l
		} else {
			yyb1194 = r.CheckBreak()
		}
		if yyb1194 {
			break
		}
		z.DecStructFieldNotFound(yyj1194-1, "")
	}
	r.ReadEnd()
}

func (x PodSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1199 := z.EncBinary()
	_ = yym1199
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1200 := z.DecBinary()
	_ = yym1200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1201 := range v {
		yy1202 := &yyv1201
		yy1202.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1203 := *v
	yyh1203, yyl1203 := z.DecSliceHelperStart()

	var yyrr1203, yyrl1203 int
	var yyc1203, yyrt1203 bool
	_, _, _ = yyc1203, yyrt1203, yyrl1203
	yyrr1203 = yyl1203

	if yyv1203 == nil {
		if yyrl1203, yyrt1203 = z.DecInferLen(yyl1203, z.DecBasicHandle().MaxInitLen, 336); yyrt1203 {
			yyrr1203 = yyrl1203
		}
		yyv1203 = make([]HorizontalPodAutoscaler, yyrl1203)
		yyc1203 = true
	}

	if yyl1203 == 0 {
		if len(yyv1203) != 0 {
			yyv1203 = yyv1203[:0]
			yyc1203 = true
		}
	} else if yyl1203 > 0 {

		if yyl1203 > cap(yyv1203) {
			yyrl1203, yyrt1203 = z.DecInferLen(yyl1203, z.DecBasicHandle().MaxInitLen, 336)
			yyv1203 = make([]HorizontalPodAutoscaler, yyrl1203)
			yyc1203 = true

			yyrr1203 = len(yyv1203)
		} else if yyl1203 != len(yyv1203) {
			yyv1203 = yyv1203[:yyl1203]
			yyc1203 = true
		}
		yyj1203 := 0
		for ; yyj1203 < yyrr1203; yyj1203++ {
			if r.TryDecodeAsNil() {
				yyv1203[yyj1203] = HorizontalPodAutoscaler{}
			} else {
				yyv1204 := &yyv1203[yyj1203]
				yyv1204.CodecDecodeSelf(d)
			}

		}
		if yyrt1203 {
			for ; yyj1203 < yyl1203; yyj1203++ {
				yyv1203 = append(yyv1203, HorizontalPodAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1203[yyj1203] = HorizontalPodAutoscaler{}
				} else {
					yyv1205 := &yyv1203[yyj1203]
					yyv1205.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1203 := 0; !r.CheckBreak(); yyj1203++ {
			if yyj1203 >= len(yyv1203) {
				yyv1203 = append(yyv1203, HorizontalPodAutoscaler{}) // var yyz1203 HorizontalPodAutoscaler
				yyc1203 = true
			}

			if yyj1203 < len(yyv1203) {
				if r.TryDecodeAsNil() {
					yyv1203[yyj1203] = HorizontalPodAutoscaler{}
				} else {
					yyv1206 := &yyv1203[yyj1203]
					yyv1206.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1203.End()
	}
	if yyc1203 {
		*v = yyv1203
	}

}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1207 := range v {
		yy1208 := &yyv1207
		yy1208.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1209 := *v
	yyh1209, yyl1209 := z.DecSliceHelperStart()

	var yyrr1209, yyrl1209 int
	var yyc1209, yyrt1209 bool
	_, _, _ = yyc1209, yyrt1209, yyrl1209
	yyrr1209 = yyl1209

	if yyv1209 == nil {
		if yyrl1209, yyrt1209 = z.DecInferLen(yyl1209, z.DecBasicHandle().MaxInitLen, 32); yyrt1209 {
			yyrr1209 = yyrl1209
		}
		yyv1209 = make([]APIVersion, yyrl1209)
		yyc1209 = true
	}

	if yyl1209 == 0 {
		if len(yyv1209) != 0 {
			yyv1209 = yyv1209[:0]
			yyc1209 = true
		}
	} else if yyl1209 > 0 {

		if yyl1209 > cap(yyv1209) {
			yyrl1209, yyrt1209 = z.DecInferLen(yyl1209, z.DecBasicHandle().MaxInitLen, 32)
			yyv1209 = make([]APIVersion, yyrl1209)
			yyc1209 = true

			yyrr1209 = len(yyv1209)
		} else if yyl1209 != len(yyv1209) {
			yyv1209 = yyv1209[:yyl1209]
			yyc1209 = true
		}
		yyj1209 := 0
		for ; yyj1209 < yyrr1209; yyj1209++ {
			if r.TryDecodeAsNil() {
				yyv1209[yyj1209] = APIVersion{}
			} else {
				yyv1210 := &yyv1209[yyj1209]
				yyv1210.CodecDecodeSelf(d)
			}

		}
		if yyrt1209 {
			for ; yyj1209 < yyl1209; yyj1209++ {
				yyv1209 = append(yyv1209, APIVersion{})
				if r.TryDecodeAsNil() {
					yyv1209[yyj1209] = APIVersion{}
				} else {
					yyv1211 := &yyv1209[yyj1209]
					yyv1211.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1209 := 0; !r.CheckBreak(); yyj1209++ {
			if yyj1209 >= len(yyv1209) {
				yyv1209 = append(yyv1209, APIVersion{}) // var yyz1209 APIVersion
				yyc1209 = true
			}

			if yyj1209 < len(yyv1209) {
				if r.TryDecodeAsNil() {
					yyv1209[yyj1209] = APIVersion{}
				} else {
					yyv1212 := &yyv1209[yyj1209]
					yyv1212.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1209.End()
	}
	if yyc1209 {
		*v = yyv1209
	}

}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1213 := range v {
		yy1214 := &yyv1213
		yy1214.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1215 := *v
	yyh1215, yyl1215 := z.DecSliceHelperStart()

	var yyrr1215, yyrl1215 int
	var yyc1215, yyrt1215 bool
	_, _, _ = yyc1215, yyrt1215, yyrl1215
	yyrr1215 = yyl1215

	if yyv1215 == nil {
		if yyrl1215, yyrt1215 = z.DecInferLen(yyl1215, z.DecBasicHandle().MaxInitLen, 248); yyrt1215 {
			yyrr1215 = yyrl1215
		}
		yyv1215 = make([]ThirdPartyResource, yyrl1215)
		yyc1215 = true
	}

	if yyl1215 == 0 {
		if len(yyv1215) != 0 {
			yyv1215 = yyv1215[:0]
			yyc1215 = true
		}
	} else if yyl1215 > 0 {

		if yyl1215 > cap(yyv1215) {
			yyrl1215, yyrt1215 = z.DecInferLen(yyl1215, z.DecBasicHandle().MaxInitLen, 248)
			yyv1215 = make([]ThirdPartyResource, yyrl1215)
			yyc1215 = true

			yyrr1215 = len(yyv1215)
		} else if yyl1215 != len(yyv1215) {
			yyv1215 = yyv1215[:yyl1215]
			yyc1215 = true
		}
		yyj1215 := 0
		for ; yyj1215 < yyrr1215; yyj1215++ {
			if r.TryDecodeAsNil() {
				yyv1215[yyj1215] = ThirdPartyResource{}
			} else {
				yyv1216 := &yyv1215[yyj1215]
				yyv1216.CodecDecodeSelf(d)
			}

		}
		if yyrt1215 {
			for ; yyj1215 < yyl1215; yyj1215++ {
				yyv1215 = append(yyv1215, ThirdPartyResource{})
				if r.TryDecodeAsNil() {
					yyv1215[yyj1215] = ThirdPartyResource{}
				} else {
					yyv1217 := &yyv1215[yyj1215]
					yyv1217.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1215 := 0; !r.CheckBreak(); yyj1215++ {
			if yyj1215 >= len(yyv1215) {
				yyv1215 = append(yyv1215, ThirdPartyResource{}) // var yyz1215 ThirdPartyResource
				yyc1215 = true
			}

			if yyj1215 < len(yyv1215) {
				if r.TryDecodeAsNil() {
					yyv1215[yyj1215] = ThirdPartyResource{}
				} else {
					yyv1218 := &yyv1215[yyj1215]
					yyv1218.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1215.End()
	}
	if yyc1215 {
		*v = yyv1215
	}

}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1219 := range v {
		yy1220 := &yyv1219
		yy1220.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1221 := *v
	yyh1221, yyl1221 := z.DecSliceHelperStart()

	var yyrr1221, yyrl1221 int
	var yyc1221, yyrt1221 bool
	_, _, _ = yyc1221, yyrt1221, yyrl1221
	yyrr1221 = yyl1221

	if yyv1221 == nil {
		if yyrl1221, yyrt1221 = z.DecInferLen(yyl1221, z.DecBasicHandle().MaxInitLen, 624); yyrt1221 {
			yyrr1221 = yyrl1221
		}
		yyv1221 = make([]Deployment, yyrl1221)
		yyc1221 = true
	}

	if yyl1221 == 0 {
		if len(yyv1221) != 0 {
			yyv1221 = yyv1221[:0]
			yyc1221 = true
		}
	} else if yyl1221 > 0 {

		if yyl1221 > cap(yyv1221) {
			yyrl1221, yyrt1221 = z.DecInferLen(yyl1221, z.DecBasicHandle().MaxInitLen, 624)
			yyv1221 = make([]Deployment, yyrl1221)
			yyc1221 = true

			yyrr1221 = len(yyv1221)
		} else if yyl1221 != len(yyv1221) {
			yyv1221 = yyv1221[:yyl1221]
			yyc1221 = true
		}
		yyj1221 := 0
		for ; yyj1221 < yyrr1221; yyj1221++ {
			if r.TryDecodeAsNil() {
				yyv1221[yyj1221] = Deployment{}
			} else {
				yyv1222 := &yyv1221[yyj1221]
				yyv1222.CodecDecodeSelf(d)
			}

		}
		if yyrt1221 {
			for ; yyj1221 < yyl1221; yyj1221++ {
				yyv1221 = append(yyv1221, Deployment{})
				if r.TryDecodeAsNil() {
					yyv1221[yyj1221] = Deployment{}
				} else {
					yyv1223 := &yyv1221[yyj1221]
					yyv1223.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1221 := 0; !r.CheckBreak(); yyj1221++ {
			if yyj1221 >= len(yyv1221) {
				yyv1221 = append(yyv1221, Deployment{}) // var yyz1221 Deployment
				yyc1221 = true
			}

			if yyj1221 < len(yyv1221) {
				if r.TryDecodeAsNil() {
					yyv1221[yyj1221] = Deployment{}
				} else {
					yyv1224 := &yyv1221[yyj1221]
					yyv1224.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1221.End()
	}
	if yyc1221 {
		*v = yyv1221
	}

}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1225 := range v {
		yy1226 := &yyv1225
		yy1226.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1227 := *v
	yyh1227, yyl1227 := z.DecSliceHelperStart()

	var yyrr1227, yyrl1227 int
	var yyc1227, yyrt1227 bool
	_, _, _ = yyc1227, yyrt1227, yyrl1227
	yyrr1227 = yyl1227

	if yyv1227 == nil {
		if yyrl1227, yyrt1227 = z.DecInferLen(yyl1227, z.DecBasicHandle().MaxInitLen, 248); yyrt1227 {
			yyrr1227 = yyrl1227
		}
		yyv1227 = make([]DaemonSet, yyrl1227)
		yyc1227 = true
	}

	if yyl1227 == 0 {
		if len(yyv1227) != 0 {
			yyv1227 = yyv1227[:0]
			yyc1227 = true
		}
	} else if yyl1227 > 0 {

		if yyl1227 > cap(yyv1227) {
			yyrl1227, yyrt1227 = z.DecInferLen(yyl1227, z.DecBasicHandle().MaxInitLen, 248)
			yyv1227 = make([]DaemonSet, yyrl1227)
			yyc1227 = true

			yyrr1227 = len(yyv1227)
		} else if yyl1227 != len(yyv1227) {
			yyv1227 = yyv1227[:yyl1227]
			yyc1227 = true
		}
		yyj1227 := 0
		for ; yyj1227 < yyrr1227; yyj1227++ {
			if r.TryDecodeAsNil() {
				yyv1227[yyj1227] = DaemonSet{}
			} else {
				yyv1228 := &yyv1227[yyj1227]
				yyv1228.CodecDecodeSelf(d)
			}

		}
		if yyrt1227 {
			for ; yyj1227 < yyl1227; yyj1227++ {
				yyv1227 = append(yyv1227, DaemonSet{})
				if r.TryDecodeAsNil() {
					yyv1227[yyj1227] = DaemonSet{}
				} else {
					yyv1229 := &yyv1227[yyj1227]
					yyv1229.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1227 := 0; !r.CheckBreak(); yyj1227++ {
			if yyj1227 >= len(yyv1227) {
				yyv1227 = append(yyv1227, DaemonSet{}) // var yyz1227 DaemonSet
				yyc1227 = true
			}

			if yyj1227 < len(yyv1227) {
				if r.TryDecodeAsNil() {
					yyv1227[yyj1227] = DaemonSet{}
				} else {
					yyv1230 := &yyv1227[yyj1227]
					yyv1230.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1227.End()
	}
	if yyc1227 {
		*v = yyv1227
	}

}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1231 := range v {
		yy1232 := &yyv1231
		yy1232.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1233 := *v
	yyh1233, yyl1233 := z.DecSliceHelperStart()

	var yyrr1233, yyrl1233 int
	var yyc1233, yyrt1233 bool
	_, _, _ = yyc1233, yyrt1233, yyrl1233
	yyrr1233 = yyl1233

	if yyv1233 == nil {
		if yyrl1233, yyrt1233 = z.DecInferLen(yyl1233, z.DecBasicHandle().MaxInitLen, 232); yyrt1233 {
			yyrr1233 = yyrl1233
		}
		yyv1233 = make([]ThirdPartyResourceData, yyrl1233)
		yyc1233 = true
	}

	if yyl1233 == 0 {
		if len(yyv1233) != 0 {
			yyv1233 = yyv1233[:0]
			yyc1233 = true
		}
	} else if yyl1233 > 0 {

		if yyl1233 > cap(yyv1233) {
			yyrl1233, yyrt1233 = z.DecInferLen(yyl1233, z.DecBasicHandle().MaxInitLen, 232)
			yyv1233 = make([]ThirdPartyResourceData, yyrl1233)
			yyc1233 = true

			yyrr1233 = len(yyv1233)
		} else if yyl1233 != len(yyv1233) {
			yyv1233 = yyv1233[:yyl1233]
			yyc1233 = true
		}
		yyj1233 := 0
		for ; yyj1233 < yyrr1233; yyj1233++ {
			if r.TryDecodeAsNil() {
				yyv1233[yyj1233] = ThirdPartyResourceData{}
			} else {
				yyv1234 := &yyv1233[yyj1233]
				yyv1234.CodecDecodeSelf(d)
			}

		}
		if yyrt1233 {
			for ; yyj1233 < yyl1233; yyj1233++ {
				yyv1233 = append(yyv1233, ThirdPartyResourceData{})
				if r.TryDecodeAsNil() {
					yyv1233[yyj1233] = ThirdPartyResourceData{}
				} else {
					yyv1235 := &yyv1233[yyj1233]
					yyv1235.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1233 := 0; !r.CheckBreak(); yyj1233++ {
			if yyj1233 >= len(yyv1233) {
				yyv1233 = append(yyv1233, ThirdPartyResourceData{}) // var yyz1233 ThirdPartyResourceData
				yyc1233 = true
			}

			if yyj1233 < len(yyv1233) {
				if r.TryDecodeAsNil() {
					yyv1233[yyj1233] = ThirdPartyResourceData{}
				} else {
					yyv1236 := &yyv1233[yyj1233]
					yyv1236.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1233.End()
	}
	if yyc1233 {
		*v = yyv1233
	}

}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1237 := range v {
		yy1238 := &yyv1237
		yy1238.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1239 := *v
	yyh1239, yyl1239 := z.DecSliceHelperStart()

	var yyrr1239, yyrl1239 int
	var yyc1239, yyrt1239 bool
	_, _, _ = yyc1239, yyrt1239, yyrl1239
	yyrr1239 = yyl1239

	if yyv1239 == nil {
		if yyrl1239, yyrt1239 = z.DecInferLen(yyl1239, z.DecBasicHandle().MaxInitLen, 648); yyrt1239 {
			yyrr1239 = yyrl1239
		}
		yyv1239 = make([]Job, yyrl1239)
		yyc1239 = true
	}

	if yyl1239 == 0 {
		if len(yyv1239) != 0 {
			yyv1239 = yyv1239[:0]
			yyc1239 = true
		}
	} else if yyl1239 > 0 {

		if yyl1239 > cap(yyv1239) {
			yyrl1239, yyrt1239 = z.DecInferLen(yyl1239, z.DecBasicHandle().MaxInitLen, 648)
			yyv1239 = make([]Job, yyrl1239)
			yyc1239 = true

			yyrr1239 = len(yyv1239)
		} else if yyl1239 != len(yyv1239) {
			yyv1239 = yyv1239[:yyl1239]
			yyc1239 = true
		}
		yyj1239 := 0
		for ; yyj1239 < yyrr1239; yyj1239++ {
			if r.TryDecodeAsNil() {
				yyv1239[yyj1239] = Job{}
			} else {
				yyv1240 := &yyv1239[yyj1239]
				yyv1240.CodecDecodeSelf(d)
			}

		}
		if yyrt1239 {
			for ; yyj1239 < yyl1239; yyj1239++ {
				yyv1239 = append(yyv1239, Job{})
				if r.TryDecodeAsNil() {
					yyv1239[yyj1239] = Job{}
				} else {
					yyv1241 := &yyv1239[yyj1239]
					yyv1241.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1239 := 0; !r.CheckBreak(); yyj1239++ {
			if yyj1239 >= len(yyv1239) {
				yyv1239 = append(yyv1239, Job{}) // var yyz1239 Job
				yyc1239 = true
			}

			if yyj1239 < len(yyv1239) {
				if r.TryDecodeAsNil() {
					yyv1239[yyj1239] = Job{}
				} else {
					yyv1242 := &yyv1239[yyj1239]
					yyv1242.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1239.End()
	}
	if yyc1239 {
		*v = yyv1239
	}

}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1243 := range v {
		yy1244 := &yyv1243
		yy1244.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1245 := *v
	yyh1245, yyl1245 := z.DecSliceHelperStart()

	var yyrr1245, yyrl1245 int
	var yyc1245, yyrt1245 bool
	_, _, _ = yyc1245, yyrt1245, yyrl1245
	yyrr1245 = yyl1245

	if yyv1245 == nil {
		if yyrl1245, yyrt1245 = z.DecInferLen(yyl1245, z.DecBasicHandle().MaxInitLen, 112); yyrt1245 {
			yyrr1245 = yyrl1245
		}
		yyv1245 = make([]JobCondition, yyrl1245)
		yyc1245 = true
	}

	if yyl1245 == 0 {
		if len(yyv1245) != 0 {
			yyv1245 = yyv1245[:0]
			yyc1245 = true
		}
	} else if yyl1245 > 0 {

		if yyl1245 > cap(yyv1245) {
			yyrl1245, yyrt1245 = z.DecInferLen(yyl1245, z.DecBasicHandle().MaxInitLen, 112)
			yyv1245 = make([]JobCondition, yyrl1245)
			yyc1245 = true

			yyrr1245 = len(yyv1245)
		} else if yyl1245 != len(yyv1245) {
			yyv1245 = yyv1245[:yyl1245]
			yyc1245 = true
		}
		yyj1245 := 0
		for ; yyj1245 < yyrr1245; yyj1245++ {
			if r.TryDecodeAsNil() {
				yyv1245[yyj1245] = JobCondition{}
			} else {
				yyv1246 := &yyv1245[yyj1245]
				yyv1246.CodecDecodeSelf(d)
			}

		}
		if yyrt1245 {
			for ; yyj1245 < yyl1245; yyj1245++ {
				yyv1245 = append(yyv1245, JobCondition{})
				if r.TryDecodeAsNil() {
					yyv1245[yyj1245] = JobCondition{}
				} else {
					yyv1247 := &yyv1245[yyj1245]
					yyv1247.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1245 := 0; !r.CheckBreak(); yyj1245++ {
			if yyj1245 >= len(yyv1245) {
				yyv1245 = append(yyv1245, JobCondition{}) // var yyz1245 JobCondition
				yyc1245 = true
			}

			if yyj1245 < len(yyv1245) {
				if r.TryDecodeAsNil() {
					yyv1245[yyj1245] = JobCondition{}
				} else {
					yyv1248 := &yyv1245[yyj1245]
					yyv1248.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1245.End()
	}
	if yyc1245 {
		*v = yyv1245
	}

}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1249 := range v {
		yy1250 := &yyv1249
		yy1250.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1251 := *v
	yyh1251, yyl1251 := z.DecSliceHelperStart()

	var yyrr1251, yyrl1251 int
	var yyc1251, yyrt1251 bool
	_, _, _ = yyc1251, yyrt1251, yyrl1251
	yyrr1251 = yyl1251

	if yyv1251 == nil {
		if yyrl1251, yyrt1251 = z.DecInferLen(yyl1251, z.DecBasicHandle().MaxInitLen, 264); yyrt1251 {
			yyrr1251 = yyrl1251
		}
		yyv1251 = make([]Ingress, yyrl1251)
		yyc1251 = true
	}

	if yyl1251 == 0 {
		if len(yyv1251) != 0 {
			yyv1251 = yyv1251[:0]
			yyc1251 = true
		}
	} else if yyl1251 > 0 {

		if yyl1251 > cap(yyv1251) {
			yyrl1251, yyrt1251 = z.DecInferLen(yyl1251, z.DecBasicHandle().MaxInitLen, 264)
			yyv1251 = make([]Ingress, yyrl1251)
			yyc1251 = true

			yyrr1251 = len(yyv1251)
		} else if yyl1251 != len(yyv1251) {
			yyv1251 = yyv1251[:yyl1251]
			yyc1251 = true
		}
		yyj1251 := 0
		for ; yyj1251 < yyrr1251; yyj1251++ {
			if r.TryDecodeAsNil() {
				yyv1251[yyj1251] = Ingress{}
			} else {
				yyv1252 := &yyv1251[yyj1251]
				yyv1252.CodecDecodeSelf(d)
			}

		}
		if yyrt1251 {
			for ; yyj1251 < yyl1251; yyj1251++ {
				yyv1251 = append(yyv1251, Ingress{})
				if r.TryDecodeAsNil() {
					yyv1251[yyj1251] = Ingress{}
				} else {
					yyv1253 := &yyv1251[yyj1251]
					yyv1253.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1251 := 0; !r.CheckBreak(); yyj1251++ {
			if yyj1251 >= len(yyv1251) {
				yyv1251 = append(yyv1251, Ingress{}) // var yyz1251 Ingress
				yyc1251 = true
			}

			if yyj1251 < len(yyv1251) {
				if r.TryDecodeAsNil() {
					yyv1251[yyj1251] = Ingress{}
				} else {
					yyv1254 := &yyv1251[yyj1251]
					yyv1254.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1251.End()
	}
	if yyc1251 {
		*v = yyv1251
	}

}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1255 := range v {
		yy1256 := &yyv1255
		yy1256.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1257 := *v
	yyh1257, yyl1257 := z.DecSliceHelperStart()

	var yyrr1257, yyrl1257 int
	var yyc1257, yyrt1257 bool
	_, _, _ = yyc1257, yyrt1257, yyrl1257
	yyrr1257 = yyl1257

	if yyv1257 == nil {
		if yyrl1257, yyrt1257 = z.DecInferLen(yyl1257, z.DecBasicHandle().MaxInitLen, 24); yyrt1257 {
			yyrr1257 = yyrl1257
		}
		yyv1257 = make([]IngressRule, yyrl1257)
		yyc1257 = true
	}

	if yyl1257 == 0 {
		if len(yyv1257) != 0 {
			yyv1257 = yyv1257[:0]
			yyc1257 = true
		}
	} else if yyl1257 > 0 {

		if yyl1257 > cap(yyv1257) {
			yyrl1257, yyrt1257 = z.DecInferLen(yyl1257, z.DecBasicHandle().MaxInitLen, 24)
			yyv1257 = make([]IngressRule, yyrl1257)
			yyc1257 = true

			yyrr1257 = len(yyv1257)
		} else if yyl1257 != len(yyv1257) {
			yyv1257 = yyv1257[:yyl1257]
			yyc1257 = true
		}
		yyj1257 := 0
		for ; yyj1257 < yyrr1257; yyj1257++ {
			if r.TryDecodeAsNil() {
				yyv1257[yyj1257] = IngressRule{}
			} else {
				yyv1258 := &yyv1257[yyj1257]
				yyv1258.CodecDecodeSelf(d)
			}

		}
		if yyrt1257 {
			for ; yyj1257 < yyl1257; yyj1257++ {
				yyv1257 = append(yyv1257, IngressRule{})
				if r.TryDecodeAsNil() {
					yyv1257[yyj1257] = IngressRule{}
				} else {
					yyv1259 := &yyv1257[yyj1257]
					yyv1259.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1257 := 0; !r.CheckBreak(); yyj1257++ {
			if yyj1257 >= len(yyv1257) {
				yyv1257 = append(yyv1257, IngressRule{}) // var yyz1257 IngressRule
				yyc1257 = true
			}

			if yyj1257 < len(yyv1257) {
				if r.TryDecodeAsNil() {
					yyv1257[yyj1257] = IngressRule{}
				} else {
					yyv1260 := &yyv1257[yyj1257]
					yyv1260.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1257.End()
	}
	if yyc1257 {
		*v = yyv1257
	}

}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1261 := range v {
		yy1262 := &yyv1261
		yy1262.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1263 := *v
	yyh1263, yyl1263 := z.DecSliceHelperStart()

	var yyrr1263, yyrl1263 int
	var yyc1263, yyrt1263 bool
	_, _, _ = yyc1263, yyrt1263, yyrl1263
	yyrr1263 = yyl1263

	if yyv1263 == nil {
		if yyrl1263, yyrt1263 = z.DecInferLen(yyl1263, z.DecBasicHandle().MaxInitLen, 64); yyrt1263 {
			yyrr1263 = yyrl1263
		}
		yyv1263 = make([]HTTPIngressPath, yyrl1263)
		yyc1263 = true
	}

	if yyl1263 == 0 {
		if len(yyv1263) != 0 {
			yyv1263 = yyv1263[:0]
			yyc1263 = true
		}
	} else if yyl1263 > 0 {

		if yyl1263 > cap(yyv1263) {
			yyrl1263, yyrt1263 = z.DecInferLen(yyl1263, z.DecBasicHandle().MaxInitLen, 64)
			yyv1263 = make([]HTTPIngressPath, yyrl1263)
			yyc1263 = true

			yyrr1263 = len(yyv1263)
		} else if yyl1263 != len(yyv1263) {
			yyv1263 = yyv1263[:yyl1263]
			yyc1263 = true
		}
		yyj1263 := 0
		for ; yyj1263 < yyrr1263; yyj1263++ {
			if r.TryDecodeAsNil() {
				yyv1263[yyj1263] = HTTPIngressPath{}
			} else {
				yyv1264 := &yyv1263[yyj1263]
				yyv1264.CodecDecodeSelf(d)
			}

		}
		if yyrt1263 {
			for ; yyj1263 < yyl1263; yyj1263++ {
				yyv1263 = append(yyv1263, HTTPIngressPath{})
				if r.TryDecodeAsNil() {
					yyv1263[yyj1263] = HTTPIngressPath{}
				} else {
					yyv1265 := &yyv1263[yyj1263]
					yyv1265.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1263 := 0; !r.CheckBreak(); yyj1263++ {
			if yyj1263 >= len(yyv1263) {
				yyv1263 = append(yyv1263, HTTPIngressPath{}) // var yyz1263 HTTPIngressPath
				yyc1263 = true
			}

			if yyj1263 < len(yyv1263) {
				if r.TryDecodeAsNil() {
					yyv1263[yyj1263] = HTTPIngressPath{}
				} else {
					yyv1266 := &yyv1263[yyj1263]
					yyv1266.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1263.End()
	}
	if yyc1263 {
		*v = yyv1263
	}

}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1267 := range v {
		yy1268 := &yyv1267
		yy1268.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1269 := *v
	yyh1269, yyl1269 := z.DecSliceHelperStart()

	var yyrr1269, yyrl1269 int
	var yyc1269, yyrt1269 bool
	_, _, _ = yyc1269, yyrt1269, yyrl1269
	yyrr1269 = yyl1269

	if yyv1269 == nil {
		if yyrl1269, yyrt1269 = z.DecInferLen(yyl1269, z.DecBasicHandle().MaxInitLen, 24); yyrt1269 {
			yyrr1269 = yyrl1269
		}
		yyv1269 = make([]NodeUtilization, yyrl1269)
		yyc1269 = true
	}

	if yyl1269 == 0 {
		if len(yyv1269) != 0 {
			yyv1269 = yyv1269[:0]
			yyc1269 = true
		}
	} else if yyl1269 > 0 {

		if yyl1269 > cap(yyv1269) {
			yyrl1269, yyrt1269 = z.DecInferLen(yyl1269, z.DecBasicHandle().MaxInitLen, 24)
			yyv1269 = make([]NodeUtilization, yyrl1269)
			yyc1269 = true

			yyrr1269 = len(yyv1269)
		} else if yyl1269 != len(yyv1269) {
			yyv1269 = yyv1269[:yyl1269]
			yyc1269 = true
		}
		yyj1269 := 0
		for ; yyj1269 < yyrr1269; yyj1269++ {
			if r.TryDecodeAsNil() {
				yyv1269[yyj1269] = NodeUtilization{}
			} else {
				yyv1270 := &yyv1269[yyj1269]
				yyv1270.CodecDecodeSelf(d)
			}

		}
		if yyrt1269 {
			for ; yyj1269 < yyl1269; yyj1269++ {
				yyv1269 = append(yyv1269, NodeUtilization{})
				if r.TryDecodeAsNil() {
					yyv1269[yyj1269] = NodeUtilization{}
				} else {
					yyv1271 := &yyv1269[yyj1269]
					yyv1271.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1269 := 0; !r.CheckBreak(); yyj1269++ {
			if yyj1269 >= len(yyv1269) {
				yyv1269 = append(yyv1269, NodeUtilization{}) // var yyz1269 NodeUtilization
				yyc1269 = true
			}

			if yyj1269 < len(yyv1269) {
				if r.TryDecodeAsNil() {
					yyv1269[yyj1269] = NodeUtilization{}
				} else {
					yyv1272 := &yyv1269[yyj1269]
					yyv1272.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1269.End()
	}
	if yyc1269 {
		*v = yyv1269
	}

}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1273 := range v {
		yy1274 := &yyv1273
		yy1274.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1275 := *v
	yyh1275, yyl1275 := z.DecSliceHelperStart()

	var yyrr1275, yyrl1275 int
	var yyc1275, yyrt1275 bool
	_, _, _ = yyc1275, yyrt1275, yyrl1275
	yyrr1275 = yyl1275

	if yyv1275 == nil {
		if yyrl1275, yyrt1275 = z.DecInferLen(yyl1275, z.DecBasicHandle().MaxInitLen, 248); yyrt1275 {
			yyrr1275 = yyrl1275
		}
		yyv1275 = make([]ClusterAutoscaler, yyrl1275)
		yyc1275 = true
	}

	if yyl1275 == 0 {
		if len(yyv1275) != 0 {
			yyv1275 = yyv1275[:0]
			yyc1275 = true
		}
	} else if yyl1275 > 0 {

		if yyl1275 > cap(yyv1275) {
			yyrl1275, yyrt1275 = z.DecInferLen(yyl1275, z.DecBasicHandle().MaxInitLen, 248)
			yyv1275 = make([]ClusterAutoscaler, yyrl1275)
			yyc1275 = true

			yyrr1275 = len(yyv1275)
		} else if yyl1275 != len(yyv1275) {
			yyv1275 = yyv1275[:yyl1275]
			yyc1275 = true
		}
		yyj1275 := 0
		for ; yyj1275 < yyrr1275; yyj1275++ {
			if r.TryDecodeAsNil() {
				yyv1275[yyj1275] = ClusterAutoscaler{}
			} else {
				yyv1276 := &yyv1275[yyj1275]
				yyv1276.CodecDecodeSelf(d)
			}

		}
		if yyrt1275 {
			for ; yyj1275 < yyl1275; yyj1275++ {
				yyv1275 = append(yyv1275, ClusterAutoscaler{})
				if r.TryDecodeAsNil() {
					yyv1275[yyj1275] = ClusterAutoscaler{}
				} else {
					yyv1277 := &yyv1275[yyj1275]
					yyv1277.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1275 := 0; !r.CheckBreak(); yyj1275++ {
			if yyj1275 >= len(yyv1275) {
				yyv1275 = append(yyv1275, ClusterAutoscaler{}) // var yyz1275 ClusterAutoscaler
				yyc1275 = true
			}

			if yyj1275 < len(yyv1275) {
				if r.TryDecodeAsNil() {
					yyv1275[yyj1275] = ClusterAutoscaler{}
				} else {
					yyv1278 := &yyv1275[yyj1275]
					yyv1278.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1275.End()
	}
	if yyc1275 {
		*v = yyv1275
	}

}

func (x codecSelfer1234) encSlicePodSelectorRequirement(v []PodSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1279 := range v {
		yy1280 := &yyv1279
		yy1280.CodecEncodeSelf(e)
	}
	r.EncodeEnd()
}

func (x codecSelfer1234) decSlicePodSelectorRequirement(v *[]PodSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1281 := *v
	yyh1281, yyl1281 := z.DecSliceHelperStart()

	var yyrr1281, yyrl1281 int
	var yyc1281, yyrt1281 bool
	_, _, _ = yyc1281, yyrt1281, yyrl1281
	yyrr1281 = yyl1281

	if yyv1281 == nil {
		if yyrl1281, yyrt1281 = z.DecInferLen(yyl1281, z.DecBasicHandle().MaxInitLen, 56); yyrt1281 {
			yyrr1281 = yyrl1281
		}
		yyv1281 = make([]PodSelectorRequirement, yyrl1281)
		yyc1281 = true
	}

	if yyl1281 == 0 {
		if len(yyv1281) != 0 {
			yyv1281 = yyv1281[:0]
			yyc1281 = true
		}
	} else if yyl1281 > 0 {

		if yyl1281 > cap(yyv1281) {
			yyrl1281, yyrt1281 = z.DecInferLen(yyl1281, z.DecBasicHandle().MaxInitLen, 56)
			yyv1281 = make([]PodSelectorRequirement, yyrl1281)
			yyc1281 = true

			yyrr1281 = len(yyv1281)
		} else if yyl1281 != len(yyv1281) {
			yyv1281 = yyv1281[:yyl1281]
			yyc1281 = true
		}
		yyj1281 := 0
		for ; yyj1281 < yyrr1281; yyj1281++ {
			if r.TryDecodeAsNil() {
				yyv1281[yyj1281] = PodSelectorRequirement{}
			} else {
				yyv1282 := &yyv1281[yyj1281]
				yyv1282.CodecDecodeSelf(d)
			}

		}
		if yyrt1281 {
			for ; yyj1281 < yyl1281; yyj1281++ {
				yyv1281 = append(yyv1281, PodSelectorRequirement{})
				if r.TryDecodeAsNil() {
					yyv1281[yyj1281] = PodSelectorRequirement{}
				} else {
					yyv1283 := &yyv1281[yyj1281]
					yyv1283.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		for yyj1281 := 0; !r.CheckBreak(); yyj1281++ {
			if yyj1281 >= len(yyv1281) {
				yyv1281 = append(yyv1281, PodSelectorRequirement{}) // var yyz1281 PodSelectorRequirement
				yyc1281 = true
			}

			if yyj1281 < len(yyv1281) {
				if r.TryDecodeAsNil() {
					yyv1281[yyj1281] = PodSelectorRequirement{}
				} else {
					yyv1284 := &yyv1281[yyj1281]
					yyv1284.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh1281.End()
	}
	if yyc1281 {
		*v = yyv1281
	}

}
