/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg6_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg5_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg2_v1.ObjectMeta
		var v3 pkg3_types.UID
		var v4 pkg6_intstr.IntOrString
		var v5 pkg5_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv24 := &x.Selector
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					z.F.DecMapStringStringX(yyv24, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv28 := &x.Selector
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			z.F.DecMapStringStringX(yyv28, false, d)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yy39.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy40 := &x.ObjectMeta
					yy40.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy42 := &x.Spec
					yy42.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.Spec
					yy43.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy45 := &x.Status
					yy45.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy46 := &x.Status
					yy46.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym47 := z.DecBinary()
	_ = yym47
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct48 := r.ContainerType()
		if yyct48 == codecSelferValueTypeMap1234 {
			yyl48 := r.ReadMapStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl48, d)
			}
		} else if yyct48 == codecSelferValueTypeArray1234 {
			yyl48 := r.ReadArrayStart()
			if yyl48 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl48, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys49Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys49Slc
	var yyhl49 bool = l >= 0
	for yyj49 := 0; ; yyj49++ {
		if yyhl49 {
			if yyj49 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys49Slc = r.DecodeBytes(yys49Slc, true, true)
		yys49 := string(yys49Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys49 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv52 := &x.ObjectMeta
				yyv52.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv53 := &x.Spec
				yyv53.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv54 := &x.Status
				yyv54.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys49)
		} // end switch yys49
	} // end for yyj49
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj55 int
	var yyb55 bool
	var yyhl55 bool = l >= 0
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv58 := &x.ObjectMeta
		yyv58.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv59 := &x.Spec
		yyv59.CodecDecodeSelf(d)
	}
	yyj55++
	if yyhl55 {
		yyb55 = yyj55 > l
	} else {
		yyb55 = r.CheckBreak()
	}
	if yyb55 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv60 := &x.Status
		yyv60.CodecDecodeSelf(d)
	}
	for {
		yyj55++
		if yyhl55 {
			yyb55 = yyj55 > l
		} else {
			yyb55 = r.CheckBreak()
		}
		if yyb55 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj55-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleTwo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym61 := z.EncBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep62 := !z.EncBinary()
			yy2arr62 := z.EncBasicHandle().StructToArray
			var yyq62 [5]bool
			_, _, _ = yysep62, yyq62, yy2arr62
			const yyr62 bool = false
			yyq62[0] = x.Kind != ""
			yyq62[1] = x.APIVersion != ""
			yyq62[2] = true
			yyq62[3] = true
			yyq62[4] = true
			var yynn62 int
			if yyr62 || yy2arr62 {
				r.EncodeArrayStart(5)
			} else {
				yynn62 = 0
				for _, b := range yyq62 {
					if b {
						yynn62++
					}
				}
				r.EncodeMapStart(yynn62)
				yynn62 = 0
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[0] {
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym65 := z.EncBinary()
					_ = yym65
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[1] {
					yym67 := z.EncBinary()
					_ = yym67
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq62[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[2] {
					yy70 := &x.ObjectMeta
					yy70.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq62[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy71 := &x.ObjectMeta
					yy71.CodecEncodeSelf(e)
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[3] {
					yy73 := &x.Spec
					yy73.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq62[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy74 := &x.Spec
					yy74.CodecEncodeSelf(e)
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq62[4] {
					yy76 := &x.Status
					yy76.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq62[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy77 := &x.Status
					yy77.CodecEncodeSelf(e)
				}
			}
			if yyr62 || yy2arr62 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleTwo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym78 := z.DecBinary()
	_ = yym78
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct79 := r.ContainerType()
		if yyct79 == codecSelferValueTypeMap1234 {
			yyl79 := r.ReadMapStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl79, d)
			}
		} else if yyct79 == codecSelferValueTypeArray1234 {
			yyl79 := r.ReadArrayStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl79, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleTwo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys80Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys80Slc
	var yyhl80 bool = l >= 0
	for yyj80 := 0; ; yyj80++ {
		if yyhl80 {
			if yyj80 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys80Slc = r.DecodeBytes(yys80Slc, true, true)
		yys80 := string(yys80Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys80 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv83 := &x.ObjectMeta
				yyv83.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv84 := &x.Spec
				yyv84.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleTwoStatus{}
			} else {
				yyv85 := &x.Status
				yyv85.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys80)
		} // end switch yys80
	} // end for yyj80
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleTwo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj86 int
	var yyb86 bool
	var yyhl86 bool = l >= 0
	yyj86++
	if yyhl86 {
		yyb86 = yyj86 > l
	} else {
		yyb86 = r.CheckBreak()
	}
	if yyb86 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj86++
	if yyhl86 {
		yyb86 = yyj86 > l
	} else {
		yyb86 = r.CheckBreak()
	}
	if yyb86 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj86++
	if yyhl86 {
		yyb86 = yyj86 > l
	} else {
		yyb86 = r.CheckBreak()
	}
	if yyb86 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv89 := &x.ObjectMeta
		yyv89.CodecDecodeSelf(d)
	}
	yyj86++
	if yyhl86 {
		yyb86 = yyj86 > l
	} else {
		yyb86 = r.CheckBreak()
	}
	if yyb86 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv90 := &x.Spec
		yyv90.CodecDecodeSelf(d)
	}
	yyj86++
	if yyhl86 {
		yyb86 = yyj86 > l
	} else {
		yyb86 = r.CheckBreak()
	}
	if yyb86 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleTwoStatus{}
	} else {
		yyv91 := &x.Status
		yyv91.CodecDecodeSelf(d)
	}
	for {
		yyj86++
		if yyhl86 {
			yyb86 = yyj86 > l
		} else {
			yyb86 = r.CheckBreak()
		}
		if yyb86 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj86-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleTwoStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym92 := z.EncBinary()
		_ = yym92
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep93 := !z.EncBinary()
			yy2arr93 := z.EncBasicHandle().StructToArray
			var yyq93 [2]bool
			_, _, _ = yysep93, yyq93, yy2arr93
			const yyr93 bool = false
			yyq93[1] = x.Selector != ""
			var yynn93 int
			if yyr93 || yy2arr93 {
				r.EncodeArrayStart(2)
			} else {
				yynn93 = 1
				for _, b := range yyq93 {
					if b {
						yynn93++
					}
				}
				r.EncodeMapStart(yynn93)
				yynn93 = 0
			}
			if yyr93 || yy2arr93 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym95 := z.EncBinary()
				_ = yym95
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym96 := z.EncBinary()
				_ = yym96
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr93 || yy2arr93 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq93[1] {
					yym98 := z.EncBinary()
					_ = yym98
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Selector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq93[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym99 := z.EncBinary()
					_ = yym99
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Selector))
					}
				}
			}
			if yyr93 || yy2arr93 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleTwoStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym100 := z.DecBinary()
	_ = yym100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct101 := r.ContainerType()
		if yyct101 == codecSelferValueTypeMap1234 {
			yyl101 := r.ReadMapStart()
			if yyl101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl101, d)
			}
		} else if yyct101 == codecSelferValueTypeArray1234 {
			yyl101 := r.ReadArrayStart()
			if yyl101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleTwoStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys102Slc
	var yyhl102 bool = l >= 0
	for yyj102 := 0; ; yyj102++ {
		if yyhl102 {
			if yyj102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys102Slc = r.DecodeBytes(yys102Slc, true, true)
		yys102 := string(yys102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys102 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = ""
			} else {
				x.Selector = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys102)
		} // end switch yys102
	} // end for yyj102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleTwoStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj105 int
	var yyb105 bool
	var yyhl105 bool = l >= 0
	yyj105++
	if yyhl105 {
		yyb105 = yyj105 > l
	} else {
		yyb105 = r.CheckBreak()
	}
	if yyb105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj105++
	if yyhl105 {
		yyb105 = yyj105 > l
	} else {
		yyb105 = r.CheckBreak()
	}
	if yyb105 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = ""
	} else {
		x.Selector = string(r.DecodeString())
	}
	for {
		yyj105++
		if yyhl105 {
			yyb105 = yyj105 > l
		} else {
			yyb105 = r.CheckBreak()
		}
		if yyb105 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj105-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym108 := z.EncBinary()
		_ = yym108
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep109 := !z.EncBinary()
			yy2arr109 := z.EncBasicHandle().StructToArray
			var yyq109 [2]bool
			_, _, _ = yysep109, yyq109, yy2arr109
			const yyr109 bool = false
			yyq109[0] = x.Kind != ""
			yyq109[1] = x.APIVersion != ""
			var yynn109 int
			if yyr109 || yy2arr109 {
				r.EncodeArrayStart(2)
			} else {
				yynn109 = 0
				for _, b := range yyq109 {
					if b {
						yynn109++
					}
				}
				r.EncodeMapStart(yynn109)
				yynn109 = 0
			}
			if yyr109 || yy2arr109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq109[0] {
					yym111 := z.EncBinary()
					_ = yym111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq109[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym112 := z.EncBinary()
					_ = yym112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr109 || yy2arr109 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq109[1] {
					yym114 := z.EncBinary()
					_ = yym114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq109[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym115 := z.EncBinary()
					_ = yym115
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr109 || yy2arr109 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym116 := z.DecBinary()
	_ = yym116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct117 := r.ContainerType()
		if yyct117 == codecSelferValueTypeMap1234 {
			yyl117 := r.ReadMapStart()
			if yyl117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl117, d)
			}
		} else if yyct117 == codecSelferValueTypeArray1234 {
			yyl117 := r.ReadArrayStart()
			if yyl117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys118Slc
	var yyhl118 bool = l >= 0
	for yyj118 := 0; ; yyj118++ {
		if yyhl118 {
			if yyj118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys118Slc = r.DecodeBytes(yys118Slc, true, true)
		yys118 := string(yys118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys118 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys118)
		} // end switch yys118
	} // end for yyj118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj121 int
	var yyb121 bool
	var yyhl121 bool = l >= 0
	yyj121++
	if yyhl121 {
		yyb121 = yyj121 > l
	} else {
		yyb121 = r.CheckBreak()
	}
	if yyb121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj121++
	if yyhl121 {
		yyb121 = yyj121 > l
	} else {
		yyb121 = r.CheckBreak()
	}
	if yyb121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj121++
		if yyhl121 {
			yyb121 = yyj121 > l
		} else {
			yyb121 = r.CheckBreak()
		}
		if yyb121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym124 := z.EncBinary()
		_ = yym124
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep125 := !z.EncBinary()
			yy2arr125 := z.EncBasicHandle().StructToArray
			var yyq125 [4]bool
			_, _, _ = yysep125, yyq125, yy2arr125
			const yyr125 bool = false
			yyq125[0] = x.Kind != ""
			yyq125[1] = x.Name != ""
			yyq125[2] = x.APIVersion != ""
			yyq125[3] = x.Subresource != ""
			var yynn125 int
			if yyr125 || yy2arr125 {
				r.EncodeArrayStart(4)
			} else {
				yynn125 = 0
				for _, b := range yyq125 {
					if b {
						yynn125++
					}
				}
				r.EncodeMapStart(yynn125)
				yynn125 = 0
			}
			if yyr125 || yy2arr125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq125[0] {
					yym127 := z.EncBinary()
					_ = yym127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq125[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym128 := z.EncBinary()
					_ = yym128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr125 || yy2arr125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq125[1] {
					yym130 := z.EncBinary()
					_ = yym130
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq125[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym131 := z.EncBinary()
					_ = yym131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr125 || yy2arr125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq125[2] {
					yym133 := z.EncBinary()
					_ = yym133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq125[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym134 := z.EncBinary()
					_ = yym134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr125 || yy2arr125 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq125[3] {
					yym136 := z.EncBinary()
					_ = yym136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq125[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym137 := z.EncBinary()
					_ = yym137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr125 || yy2arr125 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym138 := z.DecBinary()
	_ = yym138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct139 := r.ContainerType()
		if yyct139 == codecSelferValueTypeMap1234 {
			yyl139 := r.ReadMapStart()
			if yyl139 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl139, d)
			}
		} else if yyct139 == codecSelferValueTypeArray1234 {
			yyl139 := r.ReadArrayStart()
			if yyl139 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys140Slc
	var yyhl140 bool = l >= 0
	for yyj140 := 0; ; yyj140++ {
		if yyhl140 {
			if yyj140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys140Slc = r.DecodeBytes(yys140Slc, true, true)
		yys140 := string(yys140Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys140 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys140)
		} // end switch yys140
	} // end for yyj140
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj145 int
	var yyb145 bool
	var yyhl145 bool = l >= 0
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj145++
	if yyhl145 {
		yyb145 = yyj145 > l
	} else {
		yyb145 = r.CheckBreak()
	}
	if yyb145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj145++
		if yyhl145 {
			yyb145 = yyj145 > l
		} else {
			yyb145 = r.CheckBreak()
		}
		if yyb145 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj145-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym150 := z.EncBinary()
		_ = yym150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep151 := !z.EncBinary()
			yy2arr151 := z.EncBasicHandle().StructToArray
			var yyq151 [1]bool
			_, _, _ = yysep151, yyq151, yy2arr151
			const yyr151 bool = false
			var yynn151 int
			if yyr151 || yy2arr151 {
				r.EncodeArrayStart(1)
			} else {
				yynn151 = 1
				for _, b := range yyq151 {
					if b {
						yynn151++
					}
				}
				r.EncodeMapStart(yynn151)
				yynn151 = 0
			}
			if yyr151 || yy2arr151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym153 := z.EncBinary()
				_ = yym153
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym154 := z.EncBinary()
				_ = yym154
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr151 || yy2arr151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym155 := z.DecBinary()
	_ = yym155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct156 := r.ContainerType()
		if yyct156 == codecSelferValueTypeMap1234 {
			yyl156 := r.ReadMapStart()
			if yyl156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl156, d)
			}
		} else if yyct156 == codecSelferValueTypeArray1234 {
			yyl156 := r.ReadArrayStart()
			if yyl156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys157Slc
	var yyhl157 bool = l >= 0
	for yyj157 := 0; ; yyj157++ {
		if yyhl157 {
			if yyj157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys157Slc = r.DecodeBytes(yys157Slc, true, true)
		yys157 := string(yys157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys157 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys157)
		} // end switch yys157
	} // end for yyj157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj159 int
	var yyb159 bool
	var yyhl159 bool = l >= 0
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int32(r.DecodeInt(32))
	}
	for {
		yyj159++
		if yyhl159 {
			yyb159 = yyj159 > l
		} else {
			yyb159 = r.CheckBreak()
		}
		if yyb159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym161 := z.EncBinary()
		_ = yym161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep162 := !z.EncBinary()
			yy2arr162 := z.EncBasicHandle().StructToArray
			var yyq162 [2]bool
			_, _, _ = yysep162, yyq162, yy2arr162
			const yyr162 bool = false
			var yynn162 int
			if yyr162 || yy2arr162 {
				r.EncodeArrayStart(2)
			} else {
				yynn162 = 2
				for _, b := range yyq162 {
					if b {
						yynn162++
					}
				}
				r.EncodeMapStart(yynn162)
				yynn162 = 0
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym164 := z.EncBinary()
				_ = yym164
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy167 := &x.TargetValue
				yym168 := z.EncBinary()
				_ = yym168
				if false {
				} else if z.HasExtensions() && z.EncExt(yy167) {
				} else if !yym168 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy167)
				} else {
					z.EncFallback(yy167)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy169 := &x.TargetValue
				yym170 := z.EncBinary()
				_ = yym170
				if false {
				} else if z.HasExtensions() && z.EncExt(yy169) {
				} else if !yym170 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy169)
				} else {
					z.EncFallback(yy169)
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym171 := z.DecBinary()
	_ = yym171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct172 := r.ContainerType()
		if yyct172 == codecSelferValueTypeMap1234 {
			yyl172 := r.ReadMapStart()
			if yyl172 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl172, d)
			}
		} else if yyct172 == codecSelferValueTypeArray1234 {
			yyl172 := r.ReadArrayStart()
			if yyl172 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys173Slc
	var yyhl173 bool = l >= 0
	for yyj173 := 0; ; yyj173++ {
		if yyhl173 {
			if yyj173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys173Slc = r.DecodeBytes(yys173Slc, true, true)
		yys173 := string(yys173Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys173 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv175 := &x.TargetValue
				yym176 := z.DecBinary()
				_ = yym176
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv175) {
				} else if !yym176 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv175)
				} else {
					z.DecFallback(yyv175, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys173)
		} // end switch yys173
	} // end for yyj173
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv179 := &x.TargetValue
		yym180 := z.DecBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv179) {
		} else if !yym180 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv179)
		} else {
			z.DecFallback(yyv179, false)
		}
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym181 := z.EncBinary()
		_ = yym181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep182 := !z.EncBinary()
			yy2arr182 := z.EncBasicHandle().StructToArray
			var yyq182 [1]bool
			_, _, _ = yysep182, yyq182, yy2arr182
			const yyr182 bool = false
			var yynn182 int
			if yyr182 || yy2arr182 {
				r.EncodeArrayStart(1)
			} else {
				yynn182 = 1
				for _, b := range yyq182 {
					if b {
						yynn182++
					}
				}
				r.EncodeMapStart(yynn182)
				yynn182 = 0
			}
			if yyr182 || yy2arr182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym184 := z.EncBinary()
					_ = yym184
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym185 := z.EncBinary()
					_ = yym185
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr182 || yy2arr182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym186 := z.DecBinary()
	_ = yym186
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct187 := r.ContainerType()
		if yyct187 == codecSelferValueTypeMap1234 {
			yyl187 := r.ReadMapStart()
			if yyl187 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl187, d)
			}
		} else if yyct187 == codecSelferValueTypeArray1234 {
			yyl187 := r.ReadArrayStart()
			if yyl187 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl187, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys188Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys188Slc
	var yyhl188 bool = l >= 0
	for yyj188 := 0; ; yyj188++ {
		if yyhl188 {
			if yyj188 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys188Slc = r.DecodeBytes(yys188Slc, true, true)
		yys188 := string(yys188Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys188 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv189 := &x.Items
				yym190 := z.DecBinary()
				_ = yym190
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv189), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys188)
		} // end switch yys188
	} // end for yyj188
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj191 int
	var yyb191 bool
	var yyhl191 bool = l >= 0
	yyj191++
	if yyhl191 {
		yyb191 = yyj191 > l
	} else {
		yyb191 = r.CheckBreak()
	}
	if yyb191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv192 := &x.Items
		yym193 := z.DecBinary()
		_ = yym193
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv192), d)
		}
	}
	for {
		yyj191++
		if yyhl191 {
			yyb191 = yyj191 > l
		} else {
			yyb191 = r.CheckBreak()
		}
		if yyb191 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj191-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [2]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			var yynn195 int
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(2)
			} else {
				yynn195 = 2
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
				yynn195 = 0
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy200 := &x.CurrentValue
				yym201 := z.EncBinary()
				_ = yym201
				if false {
				} else if z.HasExtensions() && z.EncExt(yy200) {
				} else if !yym201 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy200)
				} else {
					z.EncFallback(yy200)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy202 := &x.CurrentValue
				yym203 := z.EncBinary()
				_ = yym203
				if false {
				} else if z.HasExtensions() && z.EncExt(yy202) {
				} else if !yym203 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy202)
				} else {
					z.EncFallback(yy202)
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym204 := z.DecBinary()
	_ = yym204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct205 := r.ContainerType()
		if yyct205 == codecSelferValueTypeMap1234 {
			yyl205 := r.ReadMapStart()
			if yyl205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl205, d)
			}
		} else if yyct205 == codecSelferValueTypeArray1234 {
			yyl205 := r.ReadArrayStart()
			if yyl205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys206Slc
	var yyhl206 bool = l >= 0
	for yyj206 := 0; ; yyj206++ {
		if yyhl206 {
			if yyj206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys206Slc = r.DecodeBytes(yys206Slc, true, true)
		yys206 := string(yys206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys206 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv208 := &x.CurrentValue
				yym209 := z.DecBinary()
				_ = yym209
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv208) {
				} else if !yym209 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv208)
				} else {
					z.DecFallback(yyv208, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys206)
		} // end switch yys206
	} // end for yyj206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj210 int
	var yyb210 bool
	var yyhl210 bool = l >= 0
	yyj210++
	if yyhl210 {
		yyb210 = yyj210 > l
	} else {
		yyb210 = r.CheckBreak()
	}
	if yyb210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj210++
	if yyhl210 {
		yyb210 = yyj210 > l
	} else {
		yyb210 = r.CheckBreak()
	}
	if yyb210 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv212 := &x.CurrentValue
		yym213 := z.DecBinary()
		_ = yym213
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv212) {
		} else if !yym213 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv212)
		} else {
			z.DecFallback(yyv212, false)
		}
	}
	for {
		yyj210++
		if yyhl210 {
			yyb210 = yyj210 > l
		} else {
			yyb210 = r.CheckBreak()
		}
		if yyb210 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj210-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym214 := z.EncBinary()
		_ = yym214
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep215 := !z.EncBinary()
			yy2arr215 := z.EncBasicHandle().StructToArray
			var yyq215 [1]bool
			_, _, _ = yysep215, yyq215, yy2arr215
			const yyr215 bool = false
			var yynn215 int
			if yyr215 || yy2arr215 {
				r.EncodeArrayStart(1)
			} else {
				yynn215 = 1
				for _, b := range yyq215 {
					if b {
						yynn215++
					}
				}
				r.EncodeMapStart(yynn215)
				yynn215 = 0
			}
			if yyr215 || yy2arr215 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym217 := z.EncBinary()
					_ = yym217
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym218 := z.EncBinary()
					_ = yym218
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr215 || yy2arr215 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym219 := z.DecBinary()
	_ = yym219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct220 := r.ContainerType()
		if yyct220 == codecSelferValueTypeMap1234 {
			yyl220 := r.ReadMapStart()
			if yyl220 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl220, d)
			}
		} else if yyct220 == codecSelferValueTypeArray1234 {
			yyl220 := r.ReadArrayStart()
			if yyl220 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl220, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys221Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys221Slc
	var yyhl221 bool = l >= 0
	for yyj221 := 0; ; yyj221++ {
		if yyhl221 {
			if yyj221 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys221Slc = r.DecodeBytes(yys221Slc, true, true)
		yys221 := string(yys221Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys221 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv222 := &x.Items
				yym223 := z.DecBinary()
				_ = yym223
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv222), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys221)
		} // end switch yys221
	} // end for yyj221
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj224 int
	var yyb224 bool
	var yyhl224 bool = l >= 0
	yyj224++
	if yyhl224 {
		yyb224 = yyj224 > l
	} else {
		yyb224 = r.CheckBreak()
	}
	if yyb224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv225 := &x.Items
		yym226 := z.DecBinary()
		_ = yym226
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv225), d)
		}
	}
	for {
		yyj224++
		if yyhl224 {
			yyb224 = yyj224 > l
		} else {
			yyb224 = r.CheckBreak()
		}
		if yyb224 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj224-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym227 := z.EncBinary()
		_ = yym227
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep228 := !z.EncBinary()
			yy2arr228 := z.EncBasicHandle().StructToArray
			var yyq228 [4]bool
			_, _, _ = yysep228, yyq228, yy2arr228
			const yyr228 bool = false
			yyq228[1] = x.MinReplicas != nil
			yyq228[3] = x.CPUUtilization != nil
			var yynn228 int
			if yyr228 || yy2arr228 {
				r.EncodeArrayStart(4)
			} else {
				yynn228 = 2
				for _, b := range yyq228 {
					if b {
						yynn228++
					}
				}
				r.EncodeMapStart(yynn228)
				yynn228 = 0
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy230 := &x.ScaleRef
				yy230.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy231 := &x.ScaleRef
				yy231.CodecEncodeSelf(e)
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq228[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy233 := *x.MinReplicas
						yym234 := z.EncBinary()
						_ = yym234
						if false {
						} else {
							r.EncodeInt(int64(yy233))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq228[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy235 := *x.MinReplicas
						yym236 := z.EncBinary()
						_ = yym236
						if false {
						} else {
							r.EncodeInt(int64(yy235))
						}
					}
				}
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym238 := z.EncBinary()
				_ = yym238
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym239 := z.EncBinary()
				_ = yym239
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq228[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq228[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct242 := r.ContainerType()
		if yyct242 == codecSelferValueTypeMap1234 {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if yyct242 == codecSelferValueTypeArray1234 {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys243 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv244 := &x.ScaleRef
				yyv244.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int32)
				}
				yym246 := z.DecBinary()
				_ = yym246
				if false {
				} else {
					*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int32(r.DecodeInt(32))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj249 int
	var yyb249 bool
	var yyhl249 bool = l >= 0
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv250 := &x.ScaleRef
		yyv250.CodecDecodeSelf(d)
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int32)
		}
		yym252 := z.DecBinary()
		_ = yym252
		if false {
		} else {
			*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int32(r.DecodeInt(32))
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj249++
		if yyhl249 {
			yyb249 = yyj249 > l
		} else {
			yyb249 = r.CheckBreak()
		}
		if yyb249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym255 := z.EncBinary()
		_ = yym255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep256 := !z.EncBinary()
			yy2arr256 := z.EncBasicHandle().StructToArray
			var yyq256 [5]bool
			_, _, _ = yysep256, yyq256, yy2arr256
			const yyr256 bool = false
			yyq256[0] = x.ObservedGeneration != nil
			yyq256[1] = x.LastScaleTime != nil
			yyq256[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn256 int
			if yyr256 || yy2arr256 {
				r.EncodeArrayStart(5)
			} else {
				yynn256 = 2
				for _, b := range yyq256 {
					if b {
						yynn256++
					}
				}
				r.EncodeMapStart(yynn256)
				yynn256 = 0
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy258 := *x.ObservedGeneration
						yym259 := z.EncBinary()
						_ = yym259
						if false {
						} else {
							r.EncodeInt(int64(yy258))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy260 := *x.ObservedGeneration
						yym261 := z.EncBinary()
						_ = yym261
						if false {
						} else {
							r.EncodeInt(int64(yy260))
						}
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym263 := z.EncBinary()
						_ = yym263
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym263 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym263 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym264 := z.EncBinary()
						_ = yym264
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym264 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym264 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym266 := z.EncBinary()
				_ = yym266
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym267 := z.EncBinary()
				_ = yym267
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym269 := z.EncBinary()
				_ = yym269
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym270 := z.EncBinary()
				_ = yym270
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq256[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy272 := *x.CurrentCPUUtilizationPercentage
						yym273 := z.EncBinary()
						_ = yym273
						if false {
						} else {
							r.EncodeInt(int64(yy272))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq256[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy274 := *x.CurrentCPUUtilizationPercentage
						yym275 := z.EncBinary()
						_ = yym275
						if false {
						} else {
							r.EncodeInt(int64(yy274))
						}
					}
				}
			}
			if yyr256 || yy2arr256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym276 := z.DecBinary()
	_ = yym276
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct277 := r.ContainerType()
		if yyct277 == codecSelferValueTypeMap1234 {
			yyl277 := r.ReadMapStart()
			if yyl277 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl277, d)
			}
		} else if yyct277 == codecSelferValueTypeArray1234 {
			yyl277 := r.ReadArrayStart()
			if yyl277 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl277, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys278Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys278Slc
	var yyhl278 bool = l >= 0
	for yyj278 := 0; ; yyj278++ {
		if yyhl278 {
			if yyj278 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys278Slc = r.DecodeBytes(yys278Slc, true, true)
		yys278 := string(yys278Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys278 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym280 := z.DecBinary()
				_ = yym280
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym282 := z.DecBinary()
				_ = yym282
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym282 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym282 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int32(r.DecodeInt(32))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int32(r.DecodeInt(32))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int32)
				}
				yym286 := z.DecBinary()
				_ = yym286
				if false {
				} else {
					*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys278)
		} // end switch yys278
	} // end for yyj278
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj287 int
	var yyb287 bool
	var yyhl287 bool = l >= 0
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym289 := z.DecBinary()
		_ = yym289
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym291 := z.DecBinary()
		_ = yym291
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym291 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym291 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int32(r.DecodeInt(32))
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int32(r.DecodeInt(32))
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int32)
		}
		yym295 := z.DecBinary()
		_ = yym295
		if false {
		} else {
			*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj287++
		if yyhl287 {
			yyb287 = yyj287 > l
		} else {
			yyb287 = r.CheckBreak()
		}
		if yyb287 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj287-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym296 := z.EncBinary()
		_ = yym296
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep297 := !z.EncBinary()
			yy2arr297 := z.EncBasicHandle().StructToArray
			var yyq297 [5]bool
			_, _, _ = yysep297, yyq297, yy2arr297
			const yyr297 bool = false
			yyq297[0] = x.Kind != ""
			yyq297[1] = x.APIVersion != ""
			yyq297[2] = true
			yyq297[3] = true
			yyq297[4] = true
			var yynn297 int
			if yyr297 || yy2arr297 {
				r.EncodeArrayStart(5)
			} else {
				yynn297 = 0
				for _, b := range yyq297 {
					if b {
						yynn297++
					}
				}
				r.EncodeMapStart(yynn297)
				yynn297 = 0
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[0] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[1] {
					yym302 := z.EncBinary()
					_ = yym302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq297[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[2] {
					yy305 := &x.ObjectMeta
					yy305.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy306 := &x.ObjectMeta
					yy306.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[3] {
					yy308 := &x.Spec
					yy308.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy309 := &x.Spec
					yy309.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq297[4] {
					yy311 := &x.Status
					yy311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq297[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy312 := &x.Status
					yy312.CodecEncodeSelf(e)
				}
			}
			if yyr297 || yy2arr297 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym313 := z.DecBinary()
	_ = yym313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct314 := r.ContainerType()
		if yyct314 == codecSelferValueTypeMap1234 {
			yyl314 := r.ReadMapStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl314, d)
			}
		} else if yyct314 == codecSelferValueTypeArray1234 {
			yyl314 := r.ReadArrayStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys315Slc
	var yyhl315 bool = l >= 0
	for yyj315 := 0; ; yyj315++ {
		if yyhl315 {
			if yyj315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys315Slc = r.DecodeBytes(yys315Slc, true, true)
		yys315 := string(yys315Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys315 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv318 := &x.ObjectMeta
				yyv318.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv319 := &x.Spec
				yyv319.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv320 := &x.Status
				yyv320.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys315)
		} // end switch yys315
	} // end for yyj315
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj321 int
	var yyb321 bool
	var yyhl321 bool = l >= 0
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv324 := &x.ObjectMeta
		yyv324.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv325 := &x.Spec
		yyv325.CodecDecodeSelf(d)
	}
	yyj321++
	if yyhl321 {
		yyb321 = yyj321 > l
	} else {
		yyb321 = r.CheckBreak()
	}
	if yyb321 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv326 := &x.Status
		yyv326.CodecDecodeSelf(d)
	}
	for {
		yyj321++
		if yyhl321 {
			yyb321 = yyj321 > l
		} else {
			yyb321 = r.CheckBreak()
		}
		if yyb321 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj321-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym327 := z.EncBinary()
		_ = yym327
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep328 := !z.EncBinary()
			yy2arr328 := z.EncBasicHandle().StructToArray
			var yyq328 [4]bool
			_, _, _ = yysep328, yyq328, yy2arr328
			const yyr328 bool = false
			yyq328[0] = x.Kind != ""
			yyq328[1] = x.APIVersion != ""
			yyq328[2] = true
			var yynn328 int
			if yyr328 || yy2arr328 {
				r.EncodeArrayStart(4)
			} else {
				yynn328 = 1
				for _, b := range yyq328 {
					if b {
						yynn328++
					}
				}
				r.EncodeMapStart(yynn328)
				yynn328 = 0
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[0] {
					yym330 := z.EncBinary()
					_ = yym330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq328[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[1] {
					yym333 := z.EncBinary()
					_ = yym333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq328[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym334 := z.EncBinary()
					_ = yym334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq328[2] {
					yy336 := &x.ListMeta
					yym337 := z.EncBinary()
					_ = yym337
					if false {
					} else if z.HasExtensions() && z.EncExt(yy336) {
					} else {
						z.EncFallback(yy336)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq328[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy338 := &x.ListMeta
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else if z.HasExtensions() && z.EncExt(yy338) {
					} else {
						z.EncFallback(yy338)
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr328 || yy2arr328 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym343 := z.DecBinary()
	_ = yym343
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct344 := r.ContainerType()
		if yyct344 == codecSelferValueTypeMap1234 {
			yyl344 := r.ReadMapStart()
			if yyl344 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl344, d)
			}
		} else if yyct344 == codecSelferValueTypeArray1234 {
			yyl344 := r.ReadArrayStart()
			if yyl344 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl344, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys345Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys345Slc
	var yyhl345 bool = l >= 0
	for yyj345 := 0; ; yyj345++ {
		if yyhl345 {
			if yyj345 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys345Slc = r.DecodeBytes(yys345Slc, true, true)
		yys345 := string(yys345Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys345 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv348 := &x.ListMeta
				yym349 := z.DecBinary()
				_ = yym349
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv348) {
				} else {
					z.DecFallback(yyv348, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv350 := &x.Items
				yym351 := z.DecBinary()
				_ = yym351
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv350), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys345)
		} // end switch yys345
	} // end for yyj345
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv355 := &x.ListMeta
		yym356 := z.DecBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv355) {
		} else {
			z.DecFallback(yyv355, false)
		}
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv357 := &x.Items
		yym358 := z.DecBinary()
		_ = yym358
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv357), d)
		}
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym359 := z.EncBinary()
		_ = yym359
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep360 := !z.EncBinary()
			yy2arr360 := z.EncBasicHandle().StructToArray
			var yyq360 [5]bool
			_, _, _ = yysep360, yyq360, yy2arr360
			const yyr360 bool = false
			yyq360[0] = x.Kind != ""
			yyq360[1] = x.APIVersion != ""
			yyq360[2] = true
			yyq360[3] = x.Description != ""
			yyq360[4] = len(x.Versions) != 0
			var yynn360 int
			if yyr360 || yy2arr360 {
				r.EncodeArrayStart(5)
			} else {
				yynn360 = 0
				for _, b := range yyq360 {
					if b {
						yynn360++
					}
				}
				r.EncodeMapStart(yynn360)
				yynn360 = 0
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[0] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[1] {
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[2] {
					yy368 := &x.ObjectMeta
					yy368.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy369 := &x.ObjectMeta
					yy369.CodecEncodeSelf(e)
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[3] {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq360[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq360[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym374 := z.EncBinary()
						_ = yym374
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq360[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym375 := z.EncBinary()
						_ = yym375
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr360 || yy2arr360 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym376 := z.DecBinary()
	_ = yym376
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct377 := r.ContainerType()
		if yyct377 == codecSelferValueTypeMap1234 {
			yyl377 := r.ReadMapStart()
			if yyl377 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl377, d)
			}
		} else if yyct377 == codecSelferValueTypeArray1234 {
			yyl377 := r.ReadArrayStart()
			if yyl377 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl377, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys378Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys378Slc
	var yyhl378 bool = l >= 0
	for yyj378 := 0; ; yyj378++ {
		if yyhl378 {
			if yyj378 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys378Slc = r.DecodeBytes(yys378Slc, true, true)
		yys378 := string(yys378Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys378 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv381 := &x.ObjectMeta
				yyv381.CodecDecodeSelf(d)
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv383 := &x.Versions
				yym384 := z.DecBinary()
				_ = yym384
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv383), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys378)
		} // end switch yys378
	} // end for yyj378
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj385 int
	var yyb385 bool
	var yyhl385 bool = l >= 0
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv388 := &x.ObjectMeta
		yyv388.CodecDecodeSelf(d)
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj385++
	if yyhl385 {
		yyb385 = yyj385 > l
	} else {
		yyb385 = r.CheckBreak()
	}
	if yyb385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv390 := &x.Versions
		yym391 := z.DecBinary()
		_ = yym391
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv390), d)
		}
	}
	for {
		yyj385++
		if yyhl385 {
			yyb385 = yyj385 > l
		} else {
			yyb385 = r.CheckBreak()
		}
		if yyb385 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj385-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym392 := z.EncBinary()
		_ = yym392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep393 := !z.EncBinary()
			yy2arr393 := z.EncBasicHandle().StructToArray
			var yyq393 [4]bool
			_, _, _ = yysep393, yyq393, yy2arr393
			const yyr393 bool = false
			yyq393[0] = x.Kind != ""
			yyq393[1] = x.APIVersion != ""
			yyq393[2] = true
			var yynn393 int
			if yyr393 || yy2arr393 {
				r.EncodeArrayStart(4)
			} else {
				yynn393 = 1
				for _, b := range yyq393 {
					if b {
						yynn393++
					}
				}
				r.EncodeMapStart(yynn393)
				yynn393 = 0
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq393[0] {
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq393[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym396 := z.EncBinary()
					_ = yym396
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq393[1] {
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq393[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq393[2] {
					yy401 := &x.ListMeta
					yym402 := z.EncBinary()
					_ = yym402
					if false {
					} else if z.HasExtensions() && z.EncExt(yy401) {
					} else {
						z.EncFallback(yy401)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq393[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy403 := &x.ListMeta
					yym404 := z.EncBinary()
					_ = yym404
					if false {
					} else if z.HasExtensions() && z.EncExt(yy403) {
					} else {
						z.EncFallback(yy403)
					}
				}
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym406 := z.EncBinary()
					_ = yym406
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym407 := z.EncBinary()
					_ = yym407
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym408 := z.DecBinary()
	_ = yym408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct409 := r.ContainerType()
		if yyct409 == codecSelferValueTypeMap1234 {
			yyl409 := r.ReadMapStart()
			if yyl409 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl409, d)
			}
		} else if yyct409 == codecSelferValueTypeArray1234 {
			yyl409 := r.ReadArrayStart()
			if yyl409 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl409, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys410Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys410Slc
	var yyhl410 bool = l >= 0
	for yyj410 := 0; ; yyj410++ {
		if yyhl410 {
			if yyj410 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys410Slc = r.DecodeBytes(yys410Slc, true, true)
		yys410 := string(yys410Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys410 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv413 := &x.ListMeta
				yym414 := z.DecBinary()
				_ = yym414
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv413) {
				} else {
					z.DecFallback(yyv413, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv415 := &x.Items
				yym416 := z.DecBinary()
				_ = yym416
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv415), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys410)
		} // end switch yys410
	} // end for yyj410
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj417 int
	var yyb417 bool
	var yyhl417 bool = l >= 0
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv420 := &x.ListMeta
		yym421 := z.DecBinary()
		_ = yym421
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv420) {
		} else {
			z.DecFallback(yyv420, false)
		}
	}
	yyj417++
	if yyhl417 {
		yyb417 = yyj417 > l
	} else {
		yyb417 = r.CheckBreak()
	}
	if yyb417 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv422 := &x.Items
		yym423 := z.DecBinary()
		_ = yym423
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv422), d)
		}
	}
	for {
		yyj417++
		if yyhl417 {
			yyb417 = yyj417 > l
		} else {
			yyb417 = r.CheckBreak()
		}
		if yyb417 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj417-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym424 := z.EncBinary()
		_ = yym424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep425 := !z.EncBinary()
			yy2arr425 := z.EncBasicHandle().StructToArray
			var yyq425 [2]bool
			_, _, _ = yysep425, yyq425, yy2arr425
			const yyr425 bool = false
			yyq425[0] = x.Name != ""
			yyq425[1] = x.APIGroup != ""
			var yynn425 int
			if yyr425 || yy2arr425 {
				r.EncodeArrayStart(2)
			} else {
				yynn425 = 0
				for _, b := range yyq425 {
					if b {
						yynn425++
					}
				}
				r.EncodeMapStart(yynn425)
				yynn425 = 0
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq425[0] {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq425[1] {
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym432 := z.DecBinary()
	_ = yym432
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct433 := r.ContainerType()
		if yyct433 == codecSelferValueTypeMap1234 {
			yyl433 := r.ReadMapStart()
			if yyl433 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl433, d)
			}
		} else if yyct433 == codecSelferValueTypeArray1234 {
			yyl433 := r.ReadArrayStart()
			if yyl433 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl433, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys434Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys434Slc
	var yyhl434 bool = l >= 0
	for yyj434 := 0; ; yyj434++ {
		if yyhl434 {
			if yyj434 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys434Slc = r.DecodeBytes(yys434Slc, true, true)
		yys434 := string(yys434Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys434 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys434)
		} // end switch yys434
	} // end for yyj434
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj437 int
	var yyb437 bool
	var yyhl437 bool = l >= 0
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj437++
	if yyhl437 {
		yyb437 = yyj437 > l
	} else {
		yyb437 = r.CheckBreak()
	}
	if yyb437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	for {
		yyj437++
		if yyhl437 {
			yyb437 = yyj437 > l
		} else {
			yyb437 = r.CheckBreak()
		}
		if yyb437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym440 := z.EncBinary()
		_ = yym440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep441 := !z.EncBinary()
			yy2arr441 := z.EncBasicHandle().StructToArray
			var yyq441 [4]bool
			_, _, _ = yysep441, yyq441, yy2arr441
			const yyr441 bool = false
			yyq441[0] = x.Kind != ""
			yyq441[1] = x.APIVersion != ""
			yyq441[2] = true
			yyq441[3] = len(x.Data) != 0
			var yynn441 int
			if yyr441 || yy2arr441 {
				r.EncodeArrayStart(4)
			} else {
				yynn441 = 0
				for _, b := range yyq441 {
					if b {
						yynn441++
					}
				}
				r.EncodeMapStart(yynn441)
				yynn441 = 0
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[0] {
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq441[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[1] {
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq441[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[2] {
					yy449 := &x.ObjectMeta
					yy449.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq441[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy450 := &x.ObjectMeta
					yy450.CodecEncodeSelf(e)
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq441[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym452 := z.EncBinary()
						_ = yym452
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq441[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym453 := z.EncBinary()
						_ = yym453
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym454 := z.DecBinary()
	_ = yym454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct455 := r.ContainerType()
		if yyct455 == codecSelferValueTypeMap1234 {
			yyl455 := r.ReadMapStart()
			if yyl455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl455, d)
			}
		} else if yyct455 == codecSelferValueTypeArray1234 {
			yyl455 := r.ReadArrayStart()
			if yyl455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys456Slc
	var yyhl456 bool = l >= 0
	for yyj456 := 0; ; yyj456++ {
		if yyhl456 {
			if yyj456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys456Slc = r.DecodeBytes(yys456Slc, true, true)
		yys456 := string(yys456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys456 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv459 := &x.ObjectMeta
				yyv459.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv460 := &x.Data
				yym461 := z.DecBinary()
				_ = yym461
				if false {
				} else {
					*yyv460 = r.DecodeBytes(*(*[]byte)(yyv460), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys456)
		} // end switch yys456
	} // end for yyj456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj462 int
	var yyb462 bool
	var yyhl462 bool = l >= 0
	yyj462++
	if yyhl462 {
		yyb462 = yyj462 > l
	} else {
		yyb462 = r.CheckBreak()
	}
	if yyb462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj462++
	if yyhl462 {
		yyb462 = yyj462 > l
	} else {
		yyb462 = r.CheckBreak()
	}
	if yyb462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj462++
	if yyhl462 {
		yyb462 = yyj462 > l
	} else {
		yyb462 = r.CheckBreak()
	}
	if yyb462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv465 := &x.ObjectMeta
		yyv465.CodecDecodeSelf(d)
	}
	yyj462++
	if yyhl462 {
		yyb462 = yyj462 > l
	} else {
		yyb462 = r.CheckBreak()
	}
	if yyb462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv466 := &x.Data
		yym467 := z.DecBinary()
		_ = yym467
		if false {
		} else {
			*yyv466 = r.DecodeBytes(*(*[]byte)(yyv466), false, false)
		}
	}
	for {
		yyj462++
		if yyhl462 {
			yyb462 = yyj462 > l
		} else {
			yyb462 = r.CheckBreak()
		}
		if yyb462 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj462-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym468 := z.EncBinary()
		_ = yym468
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep469 := !z.EncBinary()
			yy2arr469 := z.EncBasicHandle().StructToArray
			var yyq469 [5]bool
			_, _, _ = yysep469, yyq469, yy2arr469
			const yyr469 bool = false
			yyq469[0] = x.Kind != ""
			yyq469[1] = x.APIVersion != ""
			yyq469[2] = true
			yyq469[3] = true
			yyq469[4] = true
			var yynn469 int
			if yyr469 || yy2arr469 {
				r.EncodeArrayStart(5)
			} else {
				yynn469 = 0
				for _, b := range yyq469 {
					if b {
						yynn469++
					}
				}
				r.EncodeMapStart(yynn469)
				yynn469 = 0
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[0] {
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq469[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym472 := z.EncBinary()
					_ = yym472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[1] {
					yym474 := z.EncBinary()
					_ = yym474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq469[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[2] {
					yy477 := &x.ObjectMeta
					yy477.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy478 := &x.ObjectMeta
					yy478.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[3] {
					yy480 := &x.Spec
					yy480.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy481 := &x.Spec
					yy481.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq469[4] {
					yy483 := &x.Status
					yy483.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq469[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy484 := &x.Status
					yy484.CodecEncodeSelf(e)
				}
			}
			if yyr469 || yy2arr469 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym485 := z.DecBinary()
	_ = yym485
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct486 := r.ContainerType()
		if yyct486 == codecSelferValueTypeMap1234 {
			yyl486 := r.ReadMapStart()
			if yyl486 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl486, d)
			}
		} else if yyct486 == codecSelferValueTypeArray1234 {
			yyl486 := r.ReadArrayStart()
			if yyl486 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl486, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys487Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys487Slc
	var yyhl487 bool = l >= 0
	for yyj487 := 0; ; yyj487++ {
		if yyhl487 {
			if yyj487 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys487Slc = r.DecodeBytes(yys487Slc, true, true)
		yys487 := string(yys487Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys487 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv490 := &x.ObjectMeta
				yyv490.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv491 := &x.Spec
				yyv491.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv492 := &x.Status
				yyv492.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys487)
		} // end switch yys487
	} // end for yyj487
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj493 int
	var yyb493 bool
	var yyhl493 bool = l >= 0
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv496 := &x.ObjectMeta
		yyv496.CodecDecodeSelf(d)
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv497 := &x.Spec
		yyv497.CodecDecodeSelf(d)
	}
	yyj493++
	if yyhl493 {
		yyb493 = yyj493 > l
	} else {
		yyb493 = r.CheckBreak()
	}
	if yyb493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv498 := &x.Status
		yyv498.CodecDecodeSelf(d)
	}
	for {
		yyj493++
		if yyhl493 {
			yyb493 = yyj493 > l
		} else {
			yyb493 = r.CheckBreak()
		}
		if yyb493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [8]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			yyq500[0] = x.Replicas != nil
			yyq500[1] = len(x.Selector) != 0
			yyq500[3] = true
			yyq500[4] = x.RevisionHistoryLimit != nil
			yyq500[5] = x.UniqueLabelKey != nil
			yyq500[6] = x.Paused != false
			yyq500[7] = x.RollbackTo != nil
			var yynn500 int
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(8)
			} else {
				yynn500 = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
				yynn500 = 0
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy502 := *x.Replicas
						yym503 := z.EncBinary()
						_ = yym503
						if false {
						} else {
							r.EncodeInt(int64(yy502))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy504 := *x.Replicas
						yym505 := z.EncBinary()
						_ = yym505
						if false {
						} else {
							r.EncodeInt(int64(yy504))
						}
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym507 := z.EncBinary()
						_ = yym507
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym508 := z.EncBinary()
						_ = yym508
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy510 := &x.Template
				yy510.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy511 := &x.Template
				yy511.CodecEncodeSelf(e)
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[3] {
					yy513 := &x.Strategy
					yy513.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy514 := &x.Strategy
					yy514.CodecEncodeSelf(e)
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[4] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy516 := *x.RevisionHistoryLimit
						yym517 := z.EncBinary()
						_ = yym517
						if false {
						} else {
							r.EncodeInt(int64(yy516))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy518 := *x.RevisionHistoryLimit
						yym519 := z.EncBinary()
						_ = yym519
						if false {
						} else {
							r.EncodeInt(int64(yy518))
						}
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[5] {
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy521 := *x.UniqueLabelKey
						yym522 := z.EncBinary()
						_ = yym522
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy521))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy523 := *x.UniqueLabelKey
						yym524 := z.EncBinary()
						_ = yym524
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy523))
						}
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[6] {
					yym526 := z.EncBinary()
					_ = yym526
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq500[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym527 := z.EncBinary()
					_ = yym527
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq500[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq500[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym529 := z.DecBinary()
	_ = yym529
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct530 := r.ContainerType()
		if yyct530 == codecSelferValueTypeMap1234 {
			yyl530 := r.ReadMapStart()
			if yyl530 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl530, d)
			}
		} else if yyct530 == codecSelferValueTypeArray1234 {
			yyl530 := r.ReadArrayStart()
			if yyl530 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl530, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys531Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys531Slc
	var yyhl531 bool = l >= 0
	for yyj531 := 0; ; yyj531++ {
		if yyhl531 {
			if yyj531 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys531Slc = r.DecodeBytes(yys531Slc, true, true)
		yys531 := string(yys531Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys531 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym533 := z.DecBinary()
				_ = yym533
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv534 := &x.Selector
				yym535 := z.DecBinary()
				_ = yym535
				if false {
				} else {
					z.F.DecMapStringStringX(yyv534, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv536 := &x.Template
				yyv536.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv537 := &x.Strategy
				yyv537.CodecDecodeSelf(d)
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int32)
				}
				yym539 := z.DecBinary()
				_ = yym539
				if false {
				} else {
					*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
				}
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				if x.UniqueLabelKey != nil {
					x.UniqueLabelKey = nil
				}
			} else {
				if x.UniqueLabelKey == nil {
					x.UniqueLabelKey = new(string)
				}
				yym541 := z.DecBinary()
				_ = yym541
				if false {
				} else {
					*((*string)(x.UniqueLabelKey)) = r.DecodeString()
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys531)
		} // end switch yys531
	} // end for yyj531
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym546 := z.DecBinary()
		_ = yym546
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv547 := &x.Selector
		yym548 := z.DecBinary()
		_ = yym548
		if false {
		} else {
			z.F.DecMapStringStringX(yyv547, false, d)
		}
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv549 := &x.Template
		yyv549.CodecDecodeSelf(d)
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv550 := &x.Strategy
		yyv550.CodecDecodeSelf(d)
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int32)
		}
		yym552 := z.DecBinary()
		_ = yym552
		if false {
		} else {
			*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
		}
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UniqueLabelKey != nil {
			x.UniqueLabelKey = nil
		}
	} else {
		if x.UniqueLabelKey == nil {
			x.UniqueLabelKey = new(string)
		}
		yym554 := z.DecBinary()
		_ = yym554
		if false {
		} else {
			*((*string)(x.UniqueLabelKey)) = r.DecodeString()
		}
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym557 := z.EncBinary()
		_ = yym557
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep558 := !z.EncBinary()
			yy2arr558 := z.EncBasicHandle().StructToArray
			var yyq558 [5]bool
			_, _, _ = yysep558, yyq558, yy2arr558
			const yyr558 bool = false
			yyq558[0] = x.Kind != ""
			yyq558[1] = x.APIVersion != ""
			yyq558[3] = len(x.UpdatedAnnotations) != 0
			var yynn558 int
			if yyr558 || yy2arr558 {
				r.EncodeArrayStart(5)
			} else {
				yynn558 = 2
				for _, b := range yyq558 {
					if b {
						yynn558++
					}
				}
				r.EncodeMapStart(yynn558)
				yynn558 = 0
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[0] {
					yym560 := z.EncBinary()
					_ = yym560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq558[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[1] {
					yym563 := z.EncBinary()
					_ = yym563
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq558[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym566 := z.EncBinary()
				_ = yym566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym567 := z.EncBinary()
				_ = yym567
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq558[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym569 := z.EncBinary()
						_ = yym569
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq558[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym570 := z.EncBinary()
						_ = yym570
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy572 := &x.RollbackTo
				yy572.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy573 := &x.RollbackTo
				yy573.CodecEncodeSelf(e)
			}
			if yyr558 || yy2arr558 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym574 := z.DecBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct575 := r.ContainerType()
		if yyct575 == codecSelferValueTypeMap1234 {
			yyl575 := r.ReadMapStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl575, d)
			}
		} else if yyct575 == codecSelferValueTypeArray1234 {
			yyl575 := r.ReadArrayStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys576Slc
	var yyhl576 bool = l >= 0
	for yyj576 := 0; ; yyj576++ {
		if yyhl576 {
			if yyj576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys576Slc = r.DecodeBytes(yys576Slc, true, true)
		yys576 := string(yys576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys576 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv580 := &x.UpdatedAnnotations
				yym581 := z.DecBinary()
				_ = yym581
				if false {
				} else {
					z.F.DecMapStringStringX(yyv580, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv582 := &x.RollbackTo
				yyv582.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys576)
		} // end switch yys576
	} // end for yyj576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj583 int
	var yyb583 bool
	var yyhl583 bool = l >= 0
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv587 := &x.UpdatedAnnotations
		yym588 := z.DecBinary()
		_ = yym588
		if false {
		} else {
			z.F.DecMapStringStringX(yyv587, false, d)
		}
	}
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv589 := &x.RollbackTo
		yyv589.CodecDecodeSelf(d)
	}
	for {
		yyj583++
		if yyhl583 {
			yyb583 = yyj583 > l
		} else {
			yyb583 = r.CheckBreak()
		}
		if yyb583 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj583-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym590 := z.EncBinary()
		_ = yym590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep591 := !z.EncBinary()
			yy2arr591 := z.EncBasicHandle().StructToArray
			var yyq591 [1]bool
			_, _, _ = yysep591, yyq591, yy2arr591
			const yyr591 bool = false
			yyq591[0] = x.Revision != 0
			var yynn591 int
			if yyr591 || yy2arr591 {
				r.EncodeArrayStart(1)
			} else {
				yynn591 = 0
				for _, b := range yyq591 {
					if b {
						yynn591++
					}
				}
				r.EncodeMapStart(yynn591)
				yynn591 = 0
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq591[0] {
					yym593 := z.EncBinary()
					_ = yym593
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr591 || yy2arr591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym595 := z.DecBinary()
	_ = yym595
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct596 := r.ContainerType()
		if yyct596 == codecSelferValueTypeMap1234 {
			yyl596 := r.ReadMapStart()
			if yyl596 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl596, d)
			}
		} else if yyct596 == codecSelferValueTypeArray1234 {
			yyl596 := r.ReadArrayStart()
			if yyl596 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl596, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys597Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys597Slc
	var yyhl597 bool = l >= 0
	for yyj597 := 0; ; yyj597++ {
		if yyhl597 {
			if yyj597 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys597Slc = r.DecodeBytes(yys597Slc, true, true)
		yys597 := string(yys597Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys597 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys597)
		} // end switch yys597
	} // end for yyj597
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj599 int
	var yyb599 bool
	var yyhl599 bool = l >= 0
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj599++
		if yyhl599 {
			yyb599 = yyj599 > l
		} else {
			yyb599 = r.CheckBreak()
		}
		if yyb599 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj599-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym601 := z.EncBinary()
		_ = yym601
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep602 := !z.EncBinary()
			yy2arr602 := z.EncBasicHandle().StructToArray
			var yyq602 [2]bool
			_, _, _ = yysep602, yyq602, yy2arr602
			const yyr602 bool = false
			yyq602[0] = x.Type != ""
			yyq602[1] = x.RollingUpdate != nil
			var yynn602 int
			if yyr602 || yy2arr602 {
				r.EncodeArrayStart(2)
			} else {
				yynn602 = 0
				for _, b := range yyq602 {
					if b {
						yynn602++
					}
				}
				r.EncodeMapStart(yynn602)
				yynn602 = 0
			}
			if yyr602 || yy2arr602 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq602[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq602[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr602 || yy2arr602 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq602[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq602[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr602 || yy2arr602 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym605 := z.DecBinary()
	_ = yym605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct606 := r.ContainerType()
		if yyct606 == codecSelferValueTypeMap1234 {
			yyl606 := r.ReadMapStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl606, d)
			}
		} else if yyct606 == codecSelferValueTypeArray1234 {
			yyl606 := r.ReadArrayStart()
			if yyl606 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl606, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys607Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys607Slc
	var yyhl607 bool = l >= 0
	for yyj607 := 0; ; yyj607++ {
		if yyhl607 {
			if yyj607 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys607Slc = r.DecodeBytes(yys607Slc, true, true)
		yys607 := string(yys607Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys607 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys607)
		} // end switch yys607
	} // end for yyj607
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj610 int
	var yyb610 bool
	var yyhl610 bool = l >= 0
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj610++
		if yyhl610 {
			yyb610 = yyj610 > l
		} else {
			yyb610 = r.CheckBreak()
		}
		if yyb610 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj610-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym613 := z.EncBinary()
	_ = yym613
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym614 := z.DecBinary()
	_ = yym614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym615 := z.EncBinary()
		_ = yym615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep616 := !z.EncBinary()
			yy2arr616 := z.EncBasicHandle().StructToArray
			var yyq616 [3]bool
			_, _, _ = yysep616, yyq616, yy2arr616
			const yyr616 bool = false
			yyq616[0] = x.MaxUnavailable != nil
			yyq616[1] = x.MaxSurge != nil
			yyq616[2] = x.MinReadySeconds != 0
			var yynn616 int
			if yyr616 || yy2arr616 {
				r.EncodeArrayStart(3)
			} else {
				yynn616 = 0
				for _, b := range yyq616 {
					if b {
						yynn616++
					}
				}
				r.EncodeMapStart(yynn616)
				yynn616 = 0
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym618 := z.EncBinary()
						_ = yym618
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym618 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq616[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym619 := z.EncBinary()
						_ = yym619
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym619 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[1] {
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym621 := z.EncBinary()
						_ = yym621
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym621 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq616[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym622 := z.EncBinary()
						_ = yym622
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym622 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq616[2] {
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq616[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr616 || yy2arr616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct627 := r.ContainerType()
		if yyct627 == codecSelferValueTypeMap1234 {
			yyl627 := r.ReadMapStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl627, d)
			}
		} else if yyct627 == codecSelferValueTypeArray1234 {
			yyl627 := r.ReadArrayStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys628Slc
	var yyhl628 bool = l >= 0
	for yyj628 := 0; ; yyj628++ {
		if yyhl628 {
			if yyj628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys628Slc = r.DecodeBytes(yys628Slc, true, true)
		yys628 := string(yys628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys628 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg6_intstr.IntOrString)
				}
				yym630 := z.DecBinary()
				_ = yym630
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym630 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				if x.MaxSurge != nil {
					x.MaxSurge = nil
				}
			} else {
				if x.MaxSurge == nil {
					x.MaxSurge = new(pkg6_intstr.IntOrString)
				}
				yym632 := z.DecBinary()
				_ = yym632
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
				} else if !yym632 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxSurge)
				} else {
					z.DecFallback(x.MaxSurge, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys628)
		} // end switch yys628
	} // end for yyj628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj634 int
	var yyb634 bool
	var yyhl634 bool = l >= 0
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg6_intstr.IntOrString)
		}
		yym636 := z.DecBinary()
		_ = yym636
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym636 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxSurge != nil {
			x.MaxSurge = nil
		}
	} else {
		if x.MaxSurge == nil {
			x.MaxSurge = new(pkg6_intstr.IntOrString)
		}
		yym638 := z.DecBinary()
		_ = yym638
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
		} else if !yym638 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxSurge)
		} else {
			z.DecFallback(x.MaxSurge, false)
		}
	}
	yyj634++
	if yyhl634 {
		yyb634 = yyj634 > l
	} else {
		yyb634 = r.CheckBreak()
	}
	if yyb634 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	for {
		yyj634++
		if yyhl634 {
			yyb634 = yyj634 > l
		} else {
			yyb634 = r.CheckBreak()
		}
		if yyb634 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj634-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym640 := z.EncBinary()
		_ = yym640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep641 := !z.EncBinary()
			yy2arr641 := z.EncBasicHandle().StructToArray
			var yyq641 [4]bool
			_, _, _ = yysep641, yyq641, yy2arr641
			const yyr641 bool = false
			yyq641[0] = x.Replicas != 0
			yyq641[1] = x.UpdatedReplicas != 0
			yyq641[2] = x.AvailableReplicas != 0
			yyq641[3] = x.UnavailableReplicas != 0
			var yynn641 int
			if yyr641 || yy2arr641 {
				r.EncodeArrayStart(4)
			} else {
				yynn641 = 0
				for _, b := range yyq641 {
					if b {
						yynn641++
					}
				}
				r.EncodeMapStart(yynn641)
				yynn641 = 0
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq641[0] {
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq641[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq641[1] {
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq641[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq641[2] {
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq641[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq641[3] {
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq641[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym654 := z.DecBinary()
	_ = yym654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct655 := r.ContainerType()
		if yyct655 == codecSelferValueTypeMap1234 {
			yyl655 := r.ReadMapStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl655, d)
			}
		} else if yyct655 == codecSelferValueTypeArray1234 {
			yyl655 := r.ReadArrayStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys656Slc
	var yyhl656 bool = l >= 0
	for yyj656 := 0; ; yyj656++ {
		if yyhl656 {
			if yyj656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys656Slc = r.DecodeBytes(yys656Slc, true, true)
		yys656 := string(yys656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys656 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys656)
		} // end switch yys656
	} // end for yyj656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj661 int
	var yyb661 bool
	var yyhl661 bool = l >= 0
	yyj661++
	if yyhl661 {
		yyb661 = yyj661 > l
	} else {
		yyb661 = r.CheckBreak()
	}
	if yyb661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj661++
	if yyhl661 {
		yyb661 = yyj661 > l
	} else {
		yyb661 = r.CheckBreak()
	}
	if yyb661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj661++
	if yyhl661 {
		yyb661 = yyj661 > l
	} else {
		yyb661 = r.CheckBreak()
	}
	if yyb661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj661++
	if yyhl661 {
		yyb661 = yyj661 > l
	} else {
		yyb661 = r.CheckBreak()
	}
	if yyb661 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	for {
		yyj661++
		if yyhl661 {
			yyb661 = yyj661 > l
		} else {
			yyb661 = r.CheckBreak()
		}
		if yyb661 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj661-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym666 := z.EncBinary()
		_ = yym666
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep667 := !z.EncBinary()
			yy2arr667 := z.EncBasicHandle().StructToArray
			var yyq667 [4]bool
			_, _, _ = yysep667, yyq667, yy2arr667
			const yyr667 bool = false
			yyq667[0] = x.Kind != ""
			yyq667[1] = x.APIVersion != ""
			yyq667[2] = true
			var yynn667 int
			if yyr667 || yy2arr667 {
				r.EncodeArrayStart(4)
			} else {
				yynn667 = 1
				for _, b := range yyq667 {
					if b {
						yynn667++
					}
				}
				r.EncodeMapStart(yynn667)
				yynn667 = 0
			}
			if yyr667 || yy2arr667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq667[0] {
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq667[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym670 := z.EncBinary()
					_ = yym670
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr667 || yy2arr667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq667[1] {
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq667[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr667 || yy2arr667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq667[2] {
					yy675 := &x.ListMeta
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else if z.HasExtensions() && z.EncExt(yy675) {
					} else {
						z.EncFallback(yy675)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq667[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy677 := &x.ListMeta
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else if z.HasExtensions() && z.EncExt(yy677) {
					} else {
						z.EncFallback(yy677)
					}
				}
			}
			if yyr667 || yy2arr667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym680 := z.EncBinary()
					_ = yym680
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr667 || yy2arr667 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym682 := z.DecBinary()
	_ = yym682
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct683 := r.ContainerType()
		if yyct683 == codecSelferValueTypeMap1234 {
			yyl683 := r.ReadMapStart()
			if yyl683 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl683, d)
			}
		} else if yyct683 == codecSelferValueTypeArray1234 {
			yyl683 := r.ReadArrayStart()
			if yyl683 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl683, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys684Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys684Slc
	var yyhl684 bool = l >= 0
	for yyj684 := 0; ; yyj684++ {
		if yyhl684 {
			if yyj684 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys684Slc = r.DecodeBytes(yys684Slc, true, true)
		yys684 := string(yys684Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys684 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv687 := &x.ListMeta
				yym688 := z.DecBinary()
				_ = yym688
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv687) {
				} else {
					z.DecFallback(yyv687, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv689 := &x.Items
				yym690 := z.DecBinary()
				_ = yym690
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv689), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys684)
		} // end switch yys684
	} // end for yyj684
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj691 int
	var yyb691 bool
	var yyhl691 bool = l >= 0
	yyj691++
	if yyhl691 {
		yyb691 = yyj691 > l
	} else {
		yyb691 = r.CheckBreak()
	}
	if yyb691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj691++
	if yyhl691 {
		yyb691 = yyj691 > l
	} else {
		yyb691 = r.CheckBreak()
	}
	if yyb691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj691++
	if yyhl691 {
		yyb691 = yyj691 > l
	} else {
		yyb691 = r.CheckBreak()
	}
	if yyb691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv694 := &x.ListMeta
		yym695 := z.DecBinary()
		_ = yym695
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv694) {
		} else {
			z.DecFallback(yyv694, false)
		}
	}
	yyj691++
	if yyhl691 {
		yyb691 = yyj691 > l
	} else {
		yyb691 = r.CheckBreak()
	}
	if yyb691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv696 := &x.Items
		yym697 := z.DecBinary()
		_ = yym697
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv696), d)
		}
	}
	for {
		yyj691++
		if yyhl691 {
			yyb691 = yyj691 > l
		} else {
			yyb691 = r.CheckBreak()
		}
		if yyb691 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj691-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetUpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym698 := z.EncBinary()
		_ = yym698
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep699 := !z.EncBinary()
			yy2arr699 := z.EncBasicHandle().StructToArray
			var yyq699 [2]bool
			_, _, _ = yysep699, yyq699, yy2arr699
			const yyr699 bool = false
			yyq699[0] = x.Type != ""
			yyq699[1] = x.RollingUpdate != nil
			var yynn699 int
			if yyr699 || yy2arr699 {
				r.EncodeArrayStart(2)
			} else {
				yynn699 = 0
				for _, b := range yyq699 {
					if b {
						yynn699++
					}
				}
				r.EncodeMapStart(yynn699)
				yynn699 = 0
			}
			if yyr699 || yy2arr699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq699[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq699[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr699 || yy2arr699 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq699[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq699[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr699 || yy2arr699 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetUpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym702 := z.DecBinary()
	_ = yym702
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct703 := r.ContainerType()
		if yyct703 == codecSelferValueTypeMap1234 {
			yyl703 := r.ReadMapStart()
			if yyl703 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl703, d)
			}
		} else if yyct703 == codecSelferValueTypeArray1234 {
			yyl703 := r.ReadArrayStart()
			if yyl703 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl703, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys704Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys704Slc
	var yyhl704 bool = l >= 0
	for yyj704 := 0; ; yyj704++ {
		if yyhl704 {
			if yyj704 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys704Slc = r.DecodeBytes(yys704Slc, true, true)
		yys704 := string(yys704Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys704 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDaemonSet)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys704)
		} // end switch yys704
	} // end for yyj704
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetUpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj707 int
	var yyb707 bool
	var yyhl707 bool = l >= 0
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DaemonSetUpdateStrategyType(r.DecodeString())
	}
	yyj707++
	if yyhl707 {
		yyb707 = yyj707 > l
	} else {
		yyb707 = r.CheckBreak()
	}
	if yyb707 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDaemonSet)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj707++
		if yyhl707 {
			yyb707 = yyj707 > l
		} else {
			yyb707 = r.CheckBreak()
		}
		if yyb707 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj707-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DaemonSetUpdateStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym710 := z.EncBinary()
	_ = yym710
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DaemonSetUpdateStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym711 := z.DecBinary()
	_ = yym711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym712 := z.EncBinary()
		_ = yym712
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep713 := !z.EncBinary()
			yy2arr713 := z.EncBasicHandle().StructToArray
			var yyq713 [2]bool
			_, _, _ = yysep713, yyq713, yy2arr713
			const yyr713 bool = false
			yyq713[0] = x.MaxUnavailable != nil
			yyq713[1] = x.MinReadySeconds != 0
			var yynn713 int
			if yyr713 || yy2arr713 {
				r.EncodeArrayStart(2)
			} else {
				yynn713 = 0
				for _, b := range yyq713 {
					if b {
						yynn713++
					}
				}
				r.EncodeMapStart(yynn713)
				yynn713 = 0
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq713[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym715 := z.EncBinary()
						_ = yym715
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym715 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq713[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym716 := z.EncBinary()
						_ = yym716
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym716 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq713[1] {
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq713[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym719 := z.EncBinary()
					_ = yym719
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr713 || yy2arr713 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym720 := z.DecBinary()
	_ = yym720
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct721 := r.ContainerType()
		if yyct721 == codecSelferValueTypeMap1234 {
			yyl721 := r.ReadMapStart()
			if yyl721 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl721, d)
			}
		} else if yyct721 == codecSelferValueTypeArray1234 {
			yyl721 := r.ReadArrayStart()
			if yyl721 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl721, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys722Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys722Slc
	var yyhl722 bool = l >= 0
	for yyj722 := 0; ; yyj722++ {
		if yyhl722 {
			if yyj722 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys722Slc = r.DecodeBytes(yys722Slc, true, true)
		yys722 := string(yys722Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys722 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg6_intstr.IntOrString)
				}
				yym724 := z.DecBinary()
				_ = yym724
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym724 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys722)
		} // end switch yys722
	} // end for yyj722
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj726 int
	var yyb726 bool
	var yyhl726 bool = l >= 0
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg6_intstr.IntOrString)
		}
		yym728 := z.DecBinary()
		_ = yym728
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym728 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj726++
	if yyhl726 {
		yyb726 = yyj726 > l
	} else {
		yyb726 = r.CheckBreak()
	}
	if yyb726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	for {
		yyj726++
		if yyhl726 {
			yyb726 = yyj726 > l
		} else {
			yyb726 = r.CheckBreak()
		}
		if yyb726 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj726-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym730 := z.EncBinary()
		_ = yym730
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep731 := !z.EncBinary()
			yy2arr731 := z.EncBasicHandle().StructToArray
			var yyq731 [4]bool
			_, _, _ = yysep731, yyq731, yy2arr731
			const yyr731 bool = false
			yyq731[0] = x.Selector != nil
			yyq731[2] = true
			yyq731[3] = x.UniqueLabelKey != nil
			var yynn731 int
			if yyr731 || yy2arr731 {
				r.EncodeArrayStart(4)
			} else {
				yynn731 = 1
				for _, b := range yyq731 {
					if b {
						yynn731++
					}
				}
				r.EncodeMapStart(yynn731)
				yynn731 = 0
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq731[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy734 := &x.Template
				yy734.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy735 := &x.Template
				yy735.CodecEncodeSelf(e)
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[2] {
					yy737 := &x.UpdateStrategy
					yy737.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq731[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updateStrategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy738 := &x.UpdateStrategy
					yy738.CodecEncodeSelf(e)
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[3] {
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy740 := *x.UniqueLabelKey
						yym741 := z.EncBinary()
						_ = yym741
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy740))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq731[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uniqueLabelKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UniqueLabelKey == nil {
						r.EncodeNil()
					} else {
						yy742 := *x.UniqueLabelKey
						yym743 := z.EncBinary()
						_ = yym743
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy742))
						}
					}
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym744 := z.DecBinary()
	_ = yym744
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct745 := r.ContainerType()
		if yyct745 == codecSelferValueTypeMap1234 {
			yyl745 := r.ReadMapStart()
			if yyl745 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl745, d)
			}
		} else if yyct745 == codecSelferValueTypeArray1234 {
			yyl745 := r.ReadArrayStart()
			if yyl745 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl745, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys746Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys746Slc
	var yyhl746 bool = l >= 0
	for yyj746 := 0; ; yyj746++ {
		if yyhl746 {
			if yyj746 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys746Slc = r.DecodeBytes(yys746Slc, true, true)
		yys746 := string(yys746Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys746 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv748 := &x.Template
				yyv748.CodecDecodeSelf(d)
			}
		case "updateStrategy":
			if r.TryDecodeAsNil() {
				x.UpdateStrategy = DaemonSetUpdateStrategy{}
			} else {
				yyv749 := &x.UpdateStrategy
				yyv749.CodecDecodeSelf(d)
			}
		case "uniqueLabelKey":
			if r.TryDecodeAsNil() {
				if x.UniqueLabelKey != nil {
					x.UniqueLabelKey = nil
				}
			} else {
				if x.UniqueLabelKey == nil {
					x.UniqueLabelKey = new(string)
				}
				yym751 := z.DecBinary()
				_ = yym751
				if false {
				} else {
					*((*string)(x.UniqueLabelKey)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys746)
		} // end switch yys746
	} // end for yyj746
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj752 int
	var yyb752 bool
	var yyhl752 bool = l >= 0
	yyj752++
	if yyhl752 {
		yyb752 = yyj752 > l
	} else {
		yyb752 = r.CheckBreak()
	}
	if yyb752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj752++
	if yyhl752 {
		yyb752 = yyj752 > l
	} else {
		yyb752 = r.CheckBreak()
	}
	if yyb752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv754 := &x.Template
		yyv754.CodecDecodeSelf(d)
	}
	yyj752++
	if yyhl752 {
		yyb752 = yyj752 > l
	} else {
		yyb752 = r.CheckBreak()
	}
	if yyb752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdateStrategy = DaemonSetUpdateStrategy{}
	} else {
		yyv755 := &x.UpdateStrategy
		yyv755.CodecDecodeSelf(d)
	}
	yyj752++
	if yyhl752 {
		yyb752 = yyj752 > l
	} else {
		yyb752 = r.CheckBreak()
	}
	if yyb752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UniqueLabelKey != nil {
			x.UniqueLabelKey = nil
		}
	} else {
		if x.UniqueLabelKey == nil {
			x.UniqueLabelKey = new(string)
		}
		yym757 := z.DecBinary()
		_ = yym757
		if false {
		} else {
			*((*string)(x.UniqueLabelKey)) = r.DecodeString()
		}
	}
	for {
		yyj752++
		if yyhl752 {
			yyb752 = yyj752 > l
		} else {
			yyb752 = r.CheckBreak()
		}
		if yyb752 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj752-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym758 := z.EncBinary()
		_ = yym758
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep759 := !z.EncBinary()
			yy2arr759 := z.EncBasicHandle().StructToArray
			var yyq759 [3]bool
			_, _, _ = yysep759, yyq759, yy2arr759
			const yyr759 bool = false
			var yynn759 int
			if yyr759 || yy2arr759 {
				r.EncodeArrayStart(3)
			} else {
				yynn759 = 3
				for _, b := range yyq759 {
					if b {
						yynn759++
					}
				}
				r.EncodeMapStart(yynn759)
				yynn759 = 0
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym761 := z.EncBinary()
				_ = yym761
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym764 := z.EncBinary()
				_ = yym764
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym765 := z.EncBinary()
				_ = yym765
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym768 := z.EncBinary()
				_ = yym768
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr759 || yy2arr759 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym769 := z.DecBinary()
	_ = yym769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct770 := r.ContainerType()
		if yyct770 == codecSelferValueTypeMap1234 {
			yyl770 := r.ReadMapStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl770, d)
			}
		} else if yyct770 == codecSelferValueTypeArray1234 {
			yyl770 := r.ReadArrayStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys771Slc
	var yyhl771 bool = l >= 0
	for yyj771 := 0; ; yyj771++ {
		if yyhl771 {
			if yyj771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys771Slc = r.DecodeBytes(yys771Slc, true, true)
		yys771 := string(yys771Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys771 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys771)
		} // end switch yys771
	} // end for yyj771
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj775 int
	var yyb775 bool
	var yyhl775 bool = l >= 0
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	for {
		yyj775++
		if yyhl775 {
			yyb775 = yyj775 > l
		} else {
			yyb775 = r.CheckBreak()
		}
		if yyb775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym779 := z.EncBinary()
		_ = yym779
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep780 := !z.EncBinary()
			yy2arr780 := z.EncBasicHandle().StructToArray
			var yyq780 [5]bool
			_, _, _ = yysep780, yyq780, yy2arr780
			const yyr780 bool = false
			yyq780[0] = x.Kind != ""
			yyq780[1] = x.APIVersion != ""
			yyq780[2] = true
			yyq780[3] = true
			yyq780[4] = true
			var yynn780 int
			if yyr780 || yy2arr780 {
				r.EncodeArrayStart(5)
			} else {
				yynn780 = 0
				for _, b := range yyq780 {
					if b {
						yynn780++
					}
				}
				r.EncodeMapStart(yynn780)
				yynn780 = 0
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[0] {
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq780[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym783 := z.EncBinary()
					_ = yym783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[1] {
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq780[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[2] {
					yy788 := &x.ObjectMeta
					yy788.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq780[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy789 := &x.ObjectMeta
					yy789.CodecEncodeSelf(e)
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[3] {
					yy791 := &x.Spec
					yy791.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq780[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy792 := &x.Spec
					yy792.CodecEncodeSelf(e)
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq780[4] {
					yy794 := &x.Status
					yy794.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq780[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy795 := &x.Status
					yy795.CodecEncodeSelf(e)
				}
			}
			if yyr780 || yy2arr780 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym796 := z.DecBinary()
	_ = yym796
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct797 := r.ContainerType()
		if yyct797 == codecSelferValueTypeMap1234 {
			yyl797 := r.ReadMapStart()
			if yyl797 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl797, d)
			}
		} else if yyct797 == codecSelferValueTypeArray1234 {
			yyl797 := r.ReadArrayStart()
			if yyl797 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl797, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys798Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys798Slc
	var yyhl798 bool = l >= 0
	for yyj798 := 0; ; yyj798++ {
		if yyhl798 {
			if yyj798 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys798Slc = r.DecodeBytes(yys798Slc, true, true)
		yys798 := string(yys798Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys798 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv801 := &x.ObjectMeta
				yyv801.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv802 := &x.Spec
				yyv802.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv803 := &x.Status
				yyv803.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys798)
		} // end switch yys798
	} // end for yyj798
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj804 int
	var yyb804 bool
	var yyhl804 bool = l >= 0
	yyj804++
	if yyhl804 {
		yyb804 = yyj804 > l
	} else {
		yyb804 = r.CheckBreak()
	}
	if yyb804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj804++
	if yyhl804 {
		yyb804 = yyj804 > l
	} else {
		yyb804 = r.CheckBreak()
	}
	if yyb804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj804++
	if yyhl804 {
		yyb804 = yyj804 > l
	} else {
		yyb804 = r.CheckBreak()
	}
	if yyb804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv807 := &x.ObjectMeta
		yyv807.CodecDecodeSelf(d)
	}
	yyj804++
	if yyhl804 {
		yyb804 = yyj804 > l
	} else {
		yyb804 = r.CheckBreak()
	}
	if yyb804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv808 := &x.Spec
		yyv808.CodecDecodeSelf(d)
	}
	yyj804++
	if yyhl804 {
		yyb804 = yyj804 > l
	} else {
		yyb804 = r.CheckBreak()
	}
	if yyb804 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv809 := &x.Status
		yyv809.CodecDecodeSelf(d)
	}
	for {
		yyj804++
		if yyhl804 {
			yyb804 = yyj804 > l
		} else {
			yyb804 = r.CheckBreak()
		}
		if yyb804 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj804-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym810 := z.EncBinary()
		_ = yym810
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep811 := !z.EncBinary()
			yy2arr811 := z.EncBasicHandle().StructToArray
			var yyq811 [4]bool
			_, _, _ = yysep811, yyq811, yy2arr811
			const yyr811 bool = false
			yyq811[0] = x.Kind != ""
			yyq811[1] = x.APIVersion != ""
			yyq811[2] = true
			var yynn811 int
			if yyr811 || yy2arr811 {
				r.EncodeArrayStart(4)
			} else {
				yynn811 = 1
				for _, b := range yyq811 {
					if b {
						yynn811++
					}
				}
				r.EncodeMapStart(yynn811)
				yynn811 = 0
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq811[0] {
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq811[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq811[1] {
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq811[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym817 := z.EncBinary()
					_ = yym817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq811[2] {
					yy819 := &x.ListMeta
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else if z.HasExtensions() && z.EncExt(yy819) {
					} else {
						z.EncFallback(yy819)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq811[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy821 := &x.ListMeta
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else if z.HasExtensions() && z.EncExt(yy821) {
					} else {
						z.EncFallback(yy821)
					}
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym824 := z.EncBinary()
					_ = yym824
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym825 := z.EncBinary()
					_ = yym825
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym826 := z.DecBinary()
	_ = yym826
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct827 := r.ContainerType()
		if yyct827 == codecSelferValueTypeMap1234 {
			yyl827 := r.ReadMapStart()
			if yyl827 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl827, d)
			}
		} else if yyct827 == codecSelferValueTypeArray1234 {
			yyl827 := r.ReadArrayStart()
			if yyl827 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl827, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys828Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys828Slc
	var yyhl828 bool = l >= 0
	for yyj828 := 0; ; yyj828++ {
		if yyhl828 {
			if yyj828 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys828Slc = r.DecodeBytes(yys828Slc, true, true)
		yys828 := string(yys828Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys828 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv831 := &x.ListMeta
				yym832 := z.DecBinary()
				_ = yym832
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv831) {
				} else {
					z.DecFallback(yyv831, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv833 := &x.Items
				yym834 := z.DecBinary()
				_ = yym834
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv833), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys828)
		} // end switch yys828
	} // end for yyj828
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj835 int
	var yyb835 bool
	var yyhl835 bool = l >= 0
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv838 := &x.ListMeta
		yym839 := z.DecBinary()
		_ = yym839
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv838) {
		} else {
			z.DecFallback(yyv838, false)
		}
	}
	yyj835++
	if yyhl835 {
		yyb835 = yyj835 > l
	} else {
		yyb835 = r.CheckBreak()
	}
	if yyb835 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv840 := &x.Items
		yym841 := z.DecBinary()
		_ = yym841
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv840), d)
		}
	}
	for {
		yyj835++
		if yyhl835 {
			yyb835 = yyj835 > l
		} else {
			yyb835 = r.CheckBreak()
		}
		if yyb835 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj835-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym842 := z.EncBinary()
		_ = yym842
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep843 := !z.EncBinary()
			yy2arr843 := z.EncBasicHandle().StructToArray
			var yyq843 [4]bool
			_, _, _ = yysep843, yyq843, yy2arr843
			const yyr843 bool = false
			yyq843[0] = x.Kind != ""
			yyq843[1] = x.APIVersion != ""
			yyq843[2] = true
			var yynn843 int
			if yyr843 || yy2arr843 {
				r.EncodeArrayStart(4)
			} else {
				yynn843 = 1
				for _, b := range yyq843 {
					if b {
						yynn843++
					}
				}
				r.EncodeMapStart(yynn843)
				yynn843 = 0
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq843[0] {
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq843[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq843[1] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq843[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq843[2] {
					yy851 := &x.ListMeta
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else if z.HasExtensions() && z.EncExt(yy851) {
					} else {
						z.EncFallback(yy851)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq843[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy853 := &x.ListMeta
					yym854 := z.EncBinary()
					_ = yym854
					if false {
					} else if z.HasExtensions() && z.EncExt(yy853) {
					} else {
						z.EncFallback(yy853)
					}
				}
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym856 := z.EncBinary()
					_ = yym856
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr843 || yy2arr843 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym858 := z.DecBinary()
	_ = yym858
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct859 := r.ContainerType()
		if yyct859 == codecSelferValueTypeMap1234 {
			yyl859 := r.ReadMapStart()
			if yyl859 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl859, d)
			}
		} else if yyct859 == codecSelferValueTypeArray1234 {
			yyl859 := r.ReadArrayStart()
			if yyl859 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl859, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys860Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys860Slc
	var yyhl860 bool = l >= 0
	for yyj860 := 0; ; yyj860++ {
		if yyhl860 {
			if yyj860 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys860Slc = r.DecodeBytes(yys860Slc, true, true)
		yys860 := string(yys860Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys860 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv863 := &x.ListMeta
				yym864 := z.DecBinary()
				_ = yym864
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv863) {
				} else {
					z.DecFallback(yyv863, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv865 := &x.Items
				yym866 := z.DecBinary()
				_ = yym866
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv865), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys860)
		} // end switch yys860
	} // end for yyj860
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj867 int
	var yyb867 bool
	var yyhl867 bool = l >= 0
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv870 := &x.ListMeta
		yym871 := z.DecBinary()
		_ = yym871
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv870) {
		} else {
			z.DecFallback(yyv870, false)
		}
	}
	yyj867++
	if yyhl867 {
		yyb867 = yyj867 > l
	} else {
		yyb867 = r.CheckBreak()
	}
	if yyb867 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv872 := &x.Items
		yym873 := z.DecBinary()
		_ = yym873
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv872), d)
		}
	}
	for {
		yyj867++
		if yyhl867 {
			yyb867 = yyj867 > l
		} else {
			yyb867 = r.CheckBreak()
		}
		if yyb867 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj867-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym874 := z.EncBinary()
		_ = yym874
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep875 := !z.EncBinary()
			yy2arr875 := z.EncBasicHandle().StructToArray
			var yyq875 [5]bool
			_, _, _ = yysep875, yyq875, yy2arr875
			const yyr875 bool = false
			yyq875[0] = x.Kind != ""
			yyq875[1] = x.APIVersion != ""
			yyq875[2] = true
			yyq875[3] = true
			yyq875[4] = true
			var yynn875 int
			if yyr875 || yy2arr875 {
				r.EncodeArrayStart(5)
			} else {
				yynn875 = 0
				for _, b := range yyq875 {
					if b {
						yynn875++
					}
				}
				r.EncodeMapStart(yynn875)
				yynn875 = 0
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[0] {
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq875[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym878 := z.EncBinary()
					_ = yym878
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[1] {
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq875[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym881 := z.EncBinary()
					_ = yym881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[2] {
					yy883 := &x.ObjectMeta
					yy883.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq875[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy884 := &x.ObjectMeta
					yy884.CodecEncodeSelf(e)
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[3] {
					yy886 := &x.Spec
					yy886.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq875[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy887 := &x.Spec
					yy887.CodecEncodeSelf(e)
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq875[4] {
					yy889 := &x.Status
					yy889.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq875[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy890 := &x.Status
					yy890.CodecEncodeSelf(e)
				}
			}
			if yyr875 || yy2arr875 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym891 := z.DecBinary()
	_ = yym891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct892 := r.ContainerType()
		if yyct892 == codecSelferValueTypeMap1234 {
			yyl892 := r.ReadMapStart()
			if yyl892 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl892, d)
			}
		} else if yyct892 == codecSelferValueTypeArray1234 {
			yyl892 := r.ReadArrayStart()
			if yyl892 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl892, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys893Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys893Slc
	var yyhl893 bool = l >= 0
	for yyj893 := 0; ; yyj893++ {
		if yyhl893 {
			if yyj893 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys893Slc = r.DecodeBytes(yys893Slc, true, true)
		yys893 := string(yys893Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys893 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv896 := &x.ObjectMeta
				yyv896.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv897 := &x.Spec
				yyv897.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv898 := &x.Status
				yyv898.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys893)
		} // end switch yys893
	} // end for yyj893
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj899 int
	var yyb899 bool
	var yyhl899 bool = l >= 0
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv902 := &x.ObjectMeta
		yyv902.CodecDecodeSelf(d)
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv903 := &x.Spec
		yyv903.CodecDecodeSelf(d)
	}
	yyj899++
	if yyhl899 {
		yyb899 = yyj899 > l
	} else {
		yyb899 = r.CheckBreak()
	}
	if yyb899 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv904 := &x.Status
		yyv904.CodecDecodeSelf(d)
	}
	for {
		yyj899++
		if yyhl899 {
			yyb899 = yyj899 > l
		} else {
			yyb899 = r.CheckBreak()
		}
		if yyb899 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj899-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym905 := z.EncBinary()
		_ = yym905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep906 := !z.EncBinary()
			yy2arr906 := z.EncBasicHandle().StructToArray
			var yyq906 [4]bool
			_, _, _ = yysep906, yyq906, yy2arr906
			const yyr906 bool = false
			yyq906[0] = x.Kind != ""
			yyq906[1] = x.APIVersion != ""
			yyq906[2] = true
			var yynn906 int
			if yyr906 || yy2arr906 {
				r.EncodeArrayStart(4)
			} else {
				yynn906 = 1
				for _, b := range yyq906 {
					if b {
						yynn906++
					}
				}
				r.EncodeMapStart(yynn906)
				yynn906 = 0
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[0] {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq906[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[1] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq906[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[2] {
					yy914 := &x.ListMeta
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else if z.HasExtensions() && z.EncExt(yy914) {
					} else {
						z.EncFallback(yy914)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq906[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy916 := &x.ListMeta
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else if z.HasExtensions() && z.EncExt(yy916) {
					} else {
						z.EncFallback(yy916)
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym919 := z.EncBinary()
					_ = yym919
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym920 := z.EncBinary()
					_ = yym920
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym921 := z.DecBinary()
	_ = yym921
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct922 := r.ContainerType()
		if yyct922 == codecSelferValueTypeMap1234 {
			yyl922 := r.ReadMapStart()
			if yyl922 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl922, d)
			}
		} else if yyct922 == codecSelferValueTypeArray1234 {
			yyl922 := r.ReadArrayStart()
			if yyl922 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl922, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys923Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys923Slc
	var yyhl923 bool = l >= 0
	for yyj923 := 0; ; yyj923++ {
		if yyhl923 {
			if yyj923 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys923Slc = r.DecodeBytes(yys923Slc, true, true)
		yys923 := string(yys923Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys923 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv926 := &x.ListMeta
				yym927 := z.DecBinary()
				_ = yym927
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv926) {
				} else {
					z.DecFallback(yyv926, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv928 := &x.Items
				yym929 := z.DecBinary()
				_ = yym929
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv928), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys923)
		} // end switch yys923
	} // end for yyj923
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj930 int
	var yyb930 bool
	var yyhl930 bool = l >= 0
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv933 := &x.ListMeta
		yym934 := z.DecBinary()
		_ = yym934
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv933) {
		} else {
			z.DecFallback(yyv933, false)
		}
	}
	yyj930++
	if yyhl930 {
		yyb930 = yyj930 > l
	} else {
		yyb930 = r.CheckBreak()
	}
	if yyb930 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv935 := &x.Items
		yym936 := z.DecBinary()
		_ = yym936
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv935), d)
		}
	}
	for {
		yyj930++
		if yyhl930 {
			yyb930 = yyj930 > l
		} else {
			yyb930 = r.CheckBreak()
		}
		if yyb930 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj930-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym937 := z.EncBinary()
		_ = yym937
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep938 := !z.EncBinary()
			yy2arr938 := z.EncBasicHandle().StructToArray
			var yyq938 [5]bool
			_, _, _ = yysep938, yyq938, yy2arr938
			const yyr938 bool = false
			yyq938[0] = x.Parallelism != nil
			yyq938[1] = x.Completions != nil
			yyq938[2] = x.ActiveDeadlineSeconds != nil
			yyq938[3] = x.Selector != nil
			var yynn938 int
			if yyr938 || yy2arr938 {
				r.EncodeArrayStart(5)
			} else {
				yynn938 = 1
				for _, b := range yyq938 {
					if b {
						yynn938++
					}
				}
				r.EncodeMapStart(yynn938)
				yynn938 = 0
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy940 := *x.Parallelism
						yym941 := z.EncBinary()
						_ = yym941
						if false {
						} else {
							r.EncodeInt(int64(yy940))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq938[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy942 := *x.Parallelism
						yym943 := z.EncBinary()
						_ = yym943
						if false {
						} else {
							r.EncodeInt(int64(yy942))
						}
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy945 := *x.Completions
						yym946 := z.EncBinary()
						_ = yym946
						if false {
						} else {
							r.EncodeInt(int64(yy945))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq938[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy947 := *x.Completions
						yym948 := z.EncBinary()
						_ = yym948
						if false {
						} else {
							r.EncodeInt(int64(yy947))
						}
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy950 := *x.ActiveDeadlineSeconds
						yym951 := z.EncBinary()
						_ = yym951
						if false {
						} else {
							r.EncodeInt(int64(yy950))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq938[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy952 := *x.ActiveDeadlineSeconds
						yym953 := z.EncBinary()
						_ = yym953
						if false {
						} else {
							r.EncodeInt(int64(yy952))
						}
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq938[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy956 := &x.Template
				yy956.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy957 := &x.Template
				yy957.CodecEncodeSelf(e)
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym958 := z.DecBinary()
	_ = yym958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct959 := r.ContainerType()
		if yyct959 == codecSelferValueTypeMap1234 {
			yyl959 := r.ReadMapStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl959, d)
			}
		} else if yyct959 == codecSelferValueTypeArray1234 {
			yyl959 := r.ReadArrayStart()
			if yyl959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys960Slc
	var yyhl960 bool = l >= 0
	for yyj960 := 0; ; yyj960++ {
		if yyhl960 {
			if yyj960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys960Slc = r.DecodeBytes(yys960Slc, true, true)
		yys960 := string(yys960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys960 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int32)
				}
				yym962 := z.DecBinary()
				_ = yym962
				if false {
				} else {
					*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int32)
				}
				yym964 := z.DecBinary()
				_ = yym964
				if false {
				} else {
					*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym966 := z.DecBinary()
				_ = yym966
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv968 := &x.Template
				yyv968.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys960)
		} // end switch yys960
	} // end for yyj960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj969 int
	var yyb969 bool
	var yyhl969 bool = l >= 0
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int32)
		}
		yym971 := z.DecBinary()
		_ = yym971
		if false {
		} else {
			*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
		}
	}
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int32)
		}
		yym973 := z.DecBinary()
		_ = yym973
		if false {
		} else {
			*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
		}
	}
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym975 := z.DecBinary()
		_ = yym975
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj969++
	if yyhl969 {
		yyb969 = yyj969 > l
	} else {
		yyb969 = r.CheckBreak()
	}
	if yyb969 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv977 := &x.Template
		yyv977.CodecDecodeSelf(d)
	}
	for {
		yyj969++
		if yyhl969 {
			yyb969 = yyj969 > l
		} else {
			yyb969 = r.CheckBreak()
		}
		if yyb969 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj969-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym978 := z.EncBinary()
		_ = yym978
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep979 := !z.EncBinary()
			yy2arr979 := z.EncBasicHandle().StructToArray
			var yyq979 [6]bool
			_, _, _ = yysep979, yyq979, yy2arr979
			const yyr979 bool = false
			yyq979[0] = len(x.Conditions) != 0
			yyq979[1] = x.StartTime != nil
			yyq979[2] = x.CompletionTime != nil
			yyq979[3] = x.Active != 0
			yyq979[4] = x.Succeeded != 0
			yyq979[5] = x.Failed != 0
			var yynn979 int
			if yyr979 || yy2arr979 {
				r.EncodeArrayStart(6)
			} else {
				yynn979 = 0
				for _, b := range yyq979 {
					if b {
						yynn979++
					}
				}
				r.EncodeMapStart(yynn979)
				yynn979 = 0
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym981 := z.EncBinary()
						_ = yym981
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq979[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym982 := z.EncBinary()
						_ = yym982
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym984 := z.EncBinary()
						_ = yym984
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym984 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym984 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq979[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym985 := z.EncBinary()
						_ = yym985
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym985 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym985 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym987 := z.EncBinary()
						_ = yym987
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym987 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym987 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq979[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym988 := z.EncBinary()
						_ = yym988
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym988 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym988 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[3] {
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[4] {
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq979[5] {
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq979[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym997 := z.EncBinary()
					_ = yym997
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr979 || yy2arr979 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym998 := z.DecBinary()
	_ = yym998
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct999 := r.ContainerType()
		if yyct999 == codecSelferValueTypeMap1234 {
			yyl999 := r.ReadMapStart()
			if yyl999 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl999, d)
			}
		} else if yyct999 == codecSelferValueTypeArray1234 {
			yyl999 := r.ReadArrayStart()
			if yyl999 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl999, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1000Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1000Slc
	var yyhl1000 bool = l >= 0
	for yyj1000 := 0; ; yyj1000++ {
		if yyhl1000 {
			if yyj1000 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1000Slc = r.DecodeBytes(yys1000Slc, true, true)
		yys1000 := string(yys1000Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1000 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1001 := &x.Conditions
				yym1002 := z.DecBinary()
				_ = yym1002
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv1001), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym1004 := z.DecBinary()
				_ = yym1004
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1004 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1004 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym1006 := z.DecBinary()
				_ = yym1006
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym1006 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym1006 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int32(r.DecodeInt(32))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int32(r.DecodeInt(32))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1000)
		} // end switch yys1000
	} // end for yyj1000
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1010 int
	var yyb1010 bool
	var yyhl1010 bool = l >= 0
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1011 := &x.Conditions
		yym1012 := z.DecBinary()
		_ = yym1012
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv1011), d)
		}
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym1014 := z.DecBinary()
		_ = yym1014
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1014 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1014 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym1016 := z.DecBinary()
		_ = yym1016
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym1016 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym1016 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int32(r.DecodeInt(32))
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int32(r.DecodeInt(32))
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int32(r.DecodeInt(32))
	}
	for {
		yyj1010++
		if yyhl1010 {
			yyb1010 = yyj1010 > l
		} else {
			yyb1010 = r.CheckBreak()
		}
		if yyb1010 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1010-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1020 := z.EncBinary()
	_ = yym1020
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1021 := z.DecBinary()
	_ = yym1021
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1022 := z.EncBinary()
		_ = yym1022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1023 := !z.EncBinary()
			yy2arr1023 := z.EncBasicHandle().StructToArray
			var yyq1023 [6]bool
			_, _, _ = yysep1023, yyq1023, yy2arr1023
			const yyr1023 bool = false
			yyq1023[2] = true
			yyq1023[3] = true
			yyq1023[4] = x.Reason != ""
			yyq1023[5] = x.Message != ""
			var yynn1023 int
			if yyr1023 || yy2arr1023 {
				r.EncodeArrayStart(6)
			} else {
				yynn1023 = 2
				for _, b := range yyq1023 {
					if b {
						yynn1023++
					}
				}
				r.EncodeMapStart(yynn1023)
				yynn1023 = 0
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1026 := z.EncBinary()
				_ = yym1026
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1027 := z.EncBinary()
				_ = yym1027
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[2] {
					yy1029 := &x.LastProbeTime
					yym1030 := z.EncBinary()
					_ = yym1030
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1029) {
					} else if yym1030 {
						z.EncBinaryMarshal(yy1029)
					} else if !yym1030 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1029)
					} else {
						z.EncFallback(yy1029)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1023[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1031 := &x.LastProbeTime
					yym1032 := z.EncBinary()
					_ = yym1032
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1031) {
					} else if yym1032 {
						z.EncBinaryMarshal(yy1031)
					} else if !yym1032 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1031)
					} else {
						z.EncFallback(yy1031)
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[3] {
					yy1034 := &x.LastTransitionTime
					yym1035 := z.EncBinary()
					_ = yym1035
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1034) {
					} else if yym1035 {
						z.EncBinaryMarshal(yy1034)
					} else if !yym1035 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1034)
					} else {
						z.EncFallback(yy1034)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1023[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1036 := &x.LastTransitionTime
					yym1037 := z.EncBinary()
					_ = yym1037
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1036) {
					} else if yym1037 {
						z.EncBinaryMarshal(yy1036)
					} else if !yym1037 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1036)
					} else {
						z.EncFallback(yy1036)
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[4] {
					yym1039 := z.EncBinary()
					_ = yym1039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1023[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1040 := z.EncBinary()
					_ = yym1040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[5] {
					yym1042 := z.EncBinary()
					_ = yym1042
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1023[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1043 := z.EncBinary()
					_ = yym1043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1044 := z.DecBinary()
	_ = yym1044
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1045 := r.ContainerType()
		if yyct1045 == codecSelferValueTypeMap1234 {
			yyl1045 := r.ReadMapStart()
			if yyl1045 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1045, d)
			}
		} else if yyct1045 == codecSelferValueTypeArray1234 {
			yyl1045 := r.ReadArrayStart()
			if yyl1045 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1045, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1046Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1046Slc
	var yyhl1046 bool = l >= 0
	for yyj1046 := 0; ; yyj1046++ {
		if yyhl1046 {
			if yyj1046 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1046Slc = r.DecodeBytes(yys1046Slc, true, true)
		yys1046 := string(yys1046Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1046 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1049 := &x.LastProbeTime
				yym1050 := z.DecBinary()
				_ = yym1050
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1049) {
				} else if yym1050 {
					z.DecBinaryUnmarshal(yyv1049)
				} else if !yym1050 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1049)
				} else {
					z.DecFallback(yyv1049, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1051 := &x.LastTransitionTime
				yym1052 := z.DecBinary()
				_ = yym1052
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1051) {
				} else if yym1052 {
					z.DecBinaryUnmarshal(yyv1051)
				} else if !yym1052 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1051)
				} else {
					z.DecFallback(yyv1051, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1046)
		} // end switch yys1046
	} // end for yyj1046
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1055 int
	var yyb1055 bool
	var yyhl1055 bool = l >= 0
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1058 := &x.LastProbeTime
		yym1059 := z.DecBinary()
		_ = yym1059
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1058) {
		} else if yym1059 {
			z.DecBinaryUnmarshal(yyv1058)
		} else if !yym1059 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1058)
		} else {
			z.DecFallback(yyv1058, false)
		}
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1060 := &x.LastTransitionTime
		yym1061 := z.DecBinary()
		_ = yym1061
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1060) {
		} else if yym1061 {
			z.DecBinaryUnmarshal(yyv1060)
		} else if !yym1061 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1060)
		} else {
			z.DecFallback(yyv1060, false)
		}
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1055++
	if yyhl1055 {
		yyb1055 = yyj1055 > l
	} else {
		yyb1055 = r.CheckBreak()
	}
	if yyb1055 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1055++
		if yyhl1055 {
			yyb1055 = yyj1055 > l
		} else {
			yyb1055 = r.CheckBreak()
		}
		if yyb1055 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1055-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1064 := z.EncBinary()
		_ = yym1064
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1065 := !z.EncBinary()
			yy2arr1065 := z.EncBasicHandle().StructToArray
			var yyq1065 [5]bool
			_, _, _ = yysep1065, yyq1065, yy2arr1065
			const yyr1065 bool = false
			yyq1065[0] = x.Kind != ""
			yyq1065[1] = x.APIVersion != ""
			yyq1065[2] = true
			yyq1065[3] = true
			yyq1065[4] = true
			var yynn1065 int
			if yyr1065 || yy2arr1065 {
				r.EncodeArrayStart(5)
			} else {
				yynn1065 = 0
				for _, b := range yyq1065 {
					if b {
						yynn1065++
					}
				}
				r.EncodeMapStart(yynn1065)
				yynn1065 = 0
			}
			if yyr1065 || yy2arr1065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1065[0] {
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1065[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1068 := z.EncBinary()
					_ = yym1068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1065 || yy2arr1065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1065[1] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1065[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1065 || yy2arr1065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1065[2] {
					yy1073 := &x.ObjectMeta
					yy1073.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1065[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1074 := &x.ObjectMeta
					yy1074.CodecEncodeSelf(e)
				}
			}
			if yyr1065 || yy2arr1065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1065[3] {
					yy1076 := &x.Spec
					yy1076.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1065[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1077 := &x.Spec
					yy1077.CodecEncodeSelf(e)
				}
			}
			if yyr1065 || yy2arr1065 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1065[4] {
					yy1079 := &x.Status
					yy1079.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1065[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1080 := &x.Status
					yy1080.CodecEncodeSelf(e)
				}
			}
			if yyr1065 || yy2arr1065 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1081 := z.DecBinary()
	_ = yym1081
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1082 := r.ContainerType()
		if yyct1082 == codecSelferValueTypeMap1234 {
			yyl1082 := r.ReadMapStart()
			if yyl1082 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1082, d)
			}
		} else if yyct1082 == codecSelferValueTypeArray1234 {
			yyl1082 := r.ReadArrayStart()
			if yyl1082 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1082, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1083Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1083Slc
	var yyhl1083 bool = l >= 0
	for yyj1083 := 0; ; yyj1083++ {
		if yyhl1083 {
			if yyj1083 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1083Slc = r.DecodeBytes(yys1083Slc, true, true)
		yys1083 := string(yys1083Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1083 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1086 := &x.ObjectMeta
				yyv1086.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv1087 := &x.Spec
				yyv1087.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv1088 := &x.Status
				yyv1088.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1083)
		} // end switch yys1083
	} // end for yyj1083
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1089 int
	var yyb1089 bool
	var yyhl1089 bool = l >= 0
	yyj1089++
	if yyhl1089 {
		yyb1089 = yyj1089 > l
	} else {
		yyb1089 = r.CheckBreak()
	}
	if yyb1089 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1089++
	if yyhl1089 {
		yyb1089 = yyj1089 > l
	} else {
		yyb1089 = r.CheckBreak()
	}
	if yyb1089 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1089++
	if yyhl1089 {
		yyb1089 = yyj1089 > l
	} else {
		yyb1089 = r.CheckBreak()
	}
	if yyb1089 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1092 := &x.ObjectMeta
		yyv1092.CodecDecodeSelf(d)
	}
	yyj1089++
	if yyhl1089 {
		yyb1089 = yyj1089 > l
	} else {
		yyb1089 = r.CheckBreak()
	}
	if yyb1089 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv1093 := &x.Spec
		yyv1093.CodecDecodeSelf(d)
	}
	yyj1089++
	if yyhl1089 {
		yyb1089 = yyj1089 > l
	} else {
		yyb1089 = r.CheckBreak()
	}
	if yyb1089 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv1094 := &x.Status
		yyv1094.CodecDecodeSelf(d)
	}
	for {
		yyj1089++
		if yyhl1089 {
			yyb1089 = yyj1089 > l
		} else {
			yyb1089 = r.CheckBreak()
		}
		if yyb1089 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1089-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1095 := z.EncBinary()
		_ = yym1095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1096 := !z.EncBinary()
			yy2arr1096 := z.EncBasicHandle().StructToArray
			var yyq1096 [4]bool
			_, _, _ = yysep1096, yyq1096, yy2arr1096
			const yyr1096 bool = false
			yyq1096[0] = x.Kind != ""
			yyq1096[1] = x.APIVersion != ""
			yyq1096[2] = true
			var yynn1096 int
			if yyr1096 || yy2arr1096 {
				r.EncodeArrayStart(4)
			} else {
				yynn1096 = 1
				for _, b := range yyq1096 {
					if b {
						yynn1096++
					}
				}
				r.EncodeMapStart(yynn1096)
				yynn1096 = 0
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1096[0] {
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1096[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1096[1] {
					yym1101 := z.EncBinary()
					_ = yym1101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1096[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1102 := z.EncBinary()
					_ = yym1102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1096[2] {
					yy1104 := &x.ListMeta
					yym1105 := z.EncBinary()
					_ = yym1105
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1104) {
					} else {
						z.EncFallback(yy1104)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1096[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1106 := &x.ListMeta
					yym1107 := z.EncBinary()
					_ = yym1107
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1106) {
					} else {
						z.EncFallback(yy1106)
					}
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1109 := z.EncBinary()
					_ = yym1109
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1110 := z.EncBinary()
					_ = yym1110
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr1096 || yy2arr1096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1111 := z.DecBinary()
	_ = yym1111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1112 := r.ContainerType()
		if yyct1112 == codecSelferValueTypeMap1234 {
			yyl1112 := r.ReadMapStart()
			if yyl1112 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1112, d)
			}
		} else if yyct1112 == codecSelferValueTypeArray1234 {
			yyl1112 := r.ReadArrayStart()
			if yyl1112 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1113Slc
	var yyhl1113 bool = l >= 0
	for yyj1113 := 0; ; yyj1113++ {
		if yyhl1113 {
			if yyj1113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1113Slc = r.DecodeBytes(yys1113Slc, true, true)
		yys1113 := string(yys1113Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1113 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1116 := &x.ListMeta
				yym1117 := z.DecBinary()
				_ = yym1117
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1116) {
				} else {
					z.DecFallback(yyv1116, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1118 := &x.Items
				yym1119 := z.DecBinary()
				_ = yym1119
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv1118), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1113)
		} // end switch yys1113
	} // end for yyj1113
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1120 int
	var yyb1120 bool
	var yyhl1120 bool = l >= 0
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1123 := &x.ListMeta
		yym1124 := z.DecBinary()
		_ = yym1124
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1123) {
		} else {
			z.DecFallback(yyv1123, false)
		}
	}
	yyj1120++
	if yyhl1120 {
		yyb1120 = yyj1120 > l
	} else {
		yyb1120 = r.CheckBreak()
	}
	if yyb1120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1125 := &x.Items
		yym1126 := z.DecBinary()
		_ = yym1126
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv1125), d)
		}
	}
	for {
		yyj1120++
		if yyhl1120 {
			yyb1120 = yyj1120 > l
		} else {
			yyb1120 = r.CheckBreak()
		}
		if yyb1120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1127 := z.EncBinary()
		_ = yym1127
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1128 := !z.EncBinary()
			yy2arr1128 := z.EncBasicHandle().StructToArray
			var yyq1128 [2]bool
			_, _, _ = yysep1128, yyq1128, yy2arr1128
			const yyr1128 bool = false
			yyq1128[0] = x.Backend != nil
			yyq1128[1] = len(x.Rules) != 0
			var yynn1128 int
			if yyr1128 || yy2arr1128 {
				r.EncodeArrayStart(2)
			} else {
				yynn1128 = 0
				for _, b := range yyq1128 {
					if b {
						yynn1128++
					}
				}
				r.EncodeMapStart(yynn1128)
				yynn1128 = 0
			}
			if yyr1128 || yy2arr1128 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1128[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1128[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1128 || yy2arr1128 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1128[1] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1131 := z.EncBinary()
						_ = yym1131
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1128[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1132 := z.EncBinary()
						_ = yym1132
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr1128 || yy2arr1128 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1133 := z.DecBinary()
	_ = yym1133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1134 := r.ContainerType()
		if yyct1134 == codecSelferValueTypeMap1234 {
			yyl1134 := r.ReadMapStart()
			if yyl1134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1134, d)
			}
		} else if yyct1134 == codecSelferValueTypeArray1234 {
			yyl1134 := r.ReadArrayStart()
			if yyl1134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1135Slc
	var yyhl1135 bool = l >= 0
	for yyj1135 := 0; ; yyj1135++ {
		if yyhl1135 {
			if yyj1135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1135Slc = r.DecodeBytes(yys1135Slc, true, true)
		yys1135 := string(yys1135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1135 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv1137 := &x.Rules
				yym1138 := z.DecBinary()
				_ = yym1138
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv1137), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1135)
		} // end switch yys1135
	} // end for yyj1135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1139 int
	var yyb1139 bool
	var yyhl1139 bool = l >= 0
	yyj1139++
	if yyhl1139 {
		yyb1139 = yyj1139 > l
	} else {
		yyb1139 = r.CheckBreak()
	}
	if yyb1139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj1139++
	if yyhl1139 {
		yyb1139 = yyj1139 > l
	} else {
		yyb1139 = r.CheckBreak()
	}
	if yyb1139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv1141 := &x.Rules
		yym1142 := z.DecBinary()
		_ = yym1142
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv1141), d)
		}
	}
	for {
		yyj1139++
		if yyhl1139 {
			yyb1139 = yyj1139 > l
		} else {
			yyb1139 = r.CheckBreak()
		}
		if yyb1139 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1139-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1143 := z.EncBinary()
		_ = yym1143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1144 := !z.EncBinary()
			yy2arr1144 := z.EncBasicHandle().StructToArray
			var yyq1144 [1]bool
			_, _, _ = yysep1144, yyq1144, yy2arr1144
			const yyr1144 bool = false
			yyq1144[0] = true
			var yynn1144 int
			if yyr1144 || yy2arr1144 {
				r.EncodeArrayStart(1)
			} else {
				yynn1144 = 0
				for _, b := range yyq1144 {
					if b {
						yynn1144++
					}
				}
				r.EncodeMapStart(yynn1144)
				yynn1144 = 0
			}
			if yyr1144 || yy2arr1144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1144[0] {
					yy1146 := &x.LoadBalancer
					yy1146.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1147 := &x.LoadBalancer
					yy1147.CodecEncodeSelf(e)
				}
			}
			if yyr1144 || yy2arr1144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1148 := z.DecBinary()
	_ = yym1148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1149 := r.ContainerType()
		if yyct1149 == codecSelferValueTypeMap1234 {
			yyl1149 := r.ReadMapStart()
			if yyl1149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1149, d)
			}
		} else if yyct1149 == codecSelferValueTypeArray1234 {
			yyl1149 := r.ReadArrayStart()
			if yyl1149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1150Slc
	var yyhl1150 bool = l >= 0
	for yyj1150 := 0; ; yyj1150++ {
		if yyhl1150 {
			if yyj1150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1150Slc = r.DecodeBytes(yys1150Slc, true, true)
		yys1150 := string(yys1150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1150 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
			} else {
				yyv1151 := &x.LoadBalancer
				yyv1151.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1150)
		} // end switch yys1150
	} // end for yyj1150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1152 int
	var yyb1152 bool
	var yyhl1152 bool = l >= 0
	yyj1152++
	if yyhl1152 {
		yyb1152 = yyj1152 > l
	} else {
		yyb1152 = r.CheckBreak()
	}
	if yyb1152 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
	} else {
		yyv1153 := &x.LoadBalancer
		yyv1153.CodecDecodeSelf(d)
	}
	for {
		yyj1152++
		if yyhl1152 {
			yyb1152 = yyj1152 > l
		} else {
			yyb1152 = r.CheckBreak()
		}
		if yyb1152 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1152-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [2]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[0] = x.Host != ""
			yyq1155[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1155 int
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(2)
			} else {
				yynn1155 = 0
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
				yynn1155 = 0
			}
			if yyr1155 || yy2arr1155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1155[0] {
					yym1157 := z.EncBinary()
					_ = yym1157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1155[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1158 := z.EncBinary()
					_ = yym1158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1159 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1159 = true
				goto LABEL1159
			}
		LABEL1159:
			if yyr1155 || yy2arr1155 {
				if yyn1159 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1155[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1155[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1159 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1160 := z.DecBinary()
	_ = yym1160
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1161 := r.ContainerType()
		if yyct1161 == codecSelferValueTypeMap1234 {
			yyl1161 := r.ReadMapStart()
			if yyl1161 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1161, d)
			}
		} else if yyct1161 == codecSelferValueTypeArray1234 {
			yyl1161 := r.ReadArrayStart()
			if yyl1161 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1161, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1162Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1162Slc
	var yyhl1162 bool = l >= 0
	for yyj1162 := 0; ; yyj1162++ {
		if yyhl1162 {
			if yyj1162 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1162Slc = r.DecodeBytes(yys1162Slc, true, true)
		yys1162 := string(yys1162Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1162 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1162)
		} // end switch yys1162
	} // end for yyj1162
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1165 int
	var yyb1165 bool
	var yyhl1165 bool = l >= 0
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1165++
	if yyhl1165 {
		yyb1165 = yyj1165 > l
	} else {
		yyb1165 = r.CheckBreak()
	}
	if yyb1165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1165++
		if yyhl1165 {
			yyb1165 = yyj1165 > l
		} else {
			yyb1165 = r.CheckBreak()
		}
		if yyb1165 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1165-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1168 := z.EncBinary()
		_ = yym1168
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1169 := !z.EncBinary()
			yy2arr1169 := z.EncBasicHandle().StructToArray
			var yyq1169 [1]bool
			_, _, _ = yysep1169, yyq1169, yy2arr1169
			const yyr1169 bool = false
			yyq1169[0] = x.HTTP != nil
			var yynn1169 int
			if yyr1169 || yy2arr1169 {
				r.EncodeArrayStart(1)
			} else {
				yynn1169 = 0
				for _, b := range yyq1169 {
					if b {
						yynn1169++
					}
				}
				r.EncodeMapStart(yynn1169)
				yynn1169 = 0
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1169[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1169[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1171 := z.DecBinary()
	_ = yym1171
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1172 := r.ContainerType()
		if yyct1172 == codecSelferValueTypeMap1234 {
			yyl1172 := r.ReadMapStart()
			if yyl1172 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1172, d)
			}
		} else if yyct1172 == codecSelferValueTypeArray1234 {
			yyl1172 := r.ReadArrayStart()
			if yyl1172 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1172, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1173Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1173Slc
	var yyhl1173 bool = l >= 0
	for yyj1173 := 0; ; yyj1173++ {
		if yyhl1173 {
			if yyj1173 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1173Slc = r.DecodeBytes(yys1173Slc, true, true)
		yys1173 := string(yys1173Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1173 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1173)
		} // end switch yys1173
	} // end for yyj1173
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1175 int
	var yyb1175 bool
	var yyhl1175 bool = l >= 0
	yyj1175++
	if yyhl1175 {
		yyb1175 = yyj1175 > l
	} else {
		yyb1175 = r.CheckBreak()
	}
	if yyb1175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1175++
		if yyhl1175 {
			yyb1175 = yyj1175 > l
		} else {
			yyb1175 = r.CheckBreak()
		}
		if yyb1175 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1175-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1177 := z.EncBinary()
		_ = yym1177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1178 := !z.EncBinary()
			yy2arr1178 := z.EncBasicHandle().StructToArray
			var yyq1178 [1]bool
			_, _, _ = yysep1178, yyq1178, yy2arr1178
			const yyr1178 bool = false
			var yynn1178 int
			if yyr1178 || yy2arr1178 {
				r.EncodeArrayStart(1)
			} else {
				yynn1178 = 1
				for _, b := range yyq1178 {
					if b {
						yynn1178++
					}
				}
				r.EncodeMapStart(yynn1178)
				yynn1178 = 0
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1181 := z.EncBinary()
					_ = yym1181
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1178 || yy2arr1178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1182 := z.DecBinary()
	_ = yym1182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1183 := r.ContainerType()
		if yyct1183 == codecSelferValueTypeMap1234 {
			yyl1183 := r.ReadMapStart()
			if yyl1183 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1183, d)
			}
		} else if yyct1183 == codecSelferValueTypeArray1234 {
			yyl1183 := r.ReadArrayStart()
			if yyl1183 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1184Slc
	var yyhl1184 bool = l >= 0
	for yyj1184 := 0; ; yyj1184++ {
		if yyhl1184 {
			if yyj1184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1184Slc = r.DecodeBytes(yys1184Slc, true, true)
		yys1184 := string(yys1184Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1184 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1185 := &x.Paths
				yym1186 := z.DecBinary()
				_ = yym1186
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1185), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1184)
		} // end switch yys1184
	} // end for yyj1184
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1187 int
	var yyb1187 bool
	var yyhl1187 bool = l >= 0
	yyj1187++
	if yyhl1187 {
		yyb1187 = yyj1187 > l
	} else {
		yyb1187 = r.CheckBreak()
	}
	if yyb1187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1188 := &x.Paths
		yym1189 := z.DecBinary()
		_ = yym1189
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1188), d)
		}
	}
	for {
		yyj1187++
		if yyhl1187 {
			yyb1187 = yyj1187 > l
		} else {
			yyb1187 = r.CheckBreak()
		}
		if yyb1187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1190 := z.EncBinary()
		_ = yym1190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1191 := !z.EncBinary()
			yy2arr1191 := z.EncBasicHandle().StructToArray
			var yyq1191 [2]bool
			_, _, _ = yysep1191, yyq1191, yy2arr1191
			const yyr1191 bool = false
			yyq1191[0] = x.Path != ""
			var yynn1191 int
			if yyr1191 || yy2arr1191 {
				r.EncodeArrayStart(2)
			} else {
				yynn1191 = 1
				for _, b := range yyq1191 {
					if b {
						yynn1191++
					}
				}
				r.EncodeMapStart(yynn1191)
				yynn1191 = 0
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1191[0] {
					yym1193 := z.EncBinary()
					_ = yym1193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1191[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1194 := z.EncBinary()
					_ = yym1194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1196 := &x.Backend
				yy1196.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1197 := &x.Backend
				yy1197.CodecEncodeSelf(e)
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1198 := z.DecBinary()
	_ = yym1198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1199 := r.ContainerType()
		if yyct1199 == codecSelferValueTypeMap1234 {
			yyl1199 := r.ReadMapStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1199, d)
			}
		} else if yyct1199 == codecSelferValueTypeArray1234 {
			yyl1199 := r.ReadArrayStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1200Slc
	var yyhl1200 bool = l >= 0
	for yyj1200 := 0; ; yyj1200++ {
		if yyhl1200 {
			if yyj1200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1200Slc = r.DecodeBytes(yys1200Slc, true, true)
		yys1200 := string(yys1200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1200 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1202 := &x.Backend
				yyv1202.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1200)
		} // end switch yys1200
	} // end for yyj1200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1203 int
	var yyb1203 bool
	var yyhl1203 bool = l >= 0
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1205 := &x.Backend
		yyv1205.CodecDecodeSelf(d)
	}
	for {
		yyj1203++
		if yyhl1203 {
			yyb1203 = yyj1203 > l
		} else {
			yyb1203 = r.CheckBreak()
		}
		if yyb1203 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1203-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1206 := z.EncBinary()
		_ = yym1206
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1207 := !z.EncBinary()
			yy2arr1207 := z.EncBasicHandle().StructToArray
			var yyq1207 [2]bool
			_, _, _ = yysep1207, yyq1207, yy2arr1207
			const yyr1207 bool = false
			var yynn1207 int
			if yyr1207 || yy2arr1207 {
				r.EncodeArrayStart(2)
			} else {
				yynn1207 = 2
				for _, b := range yyq1207 {
					if b {
						yynn1207++
					}
				}
				r.EncodeMapStart(yynn1207)
				yynn1207 = 0
			}
			if yyr1207 || yy2arr1207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1209 := z.EncBinary()
				_ = yym1209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1210 := z.EncBinary()
				_ = yym1210
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1207 || yy2arr1207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1212 := &x.ServicePort
				yym1213 := z.EncBinary()
				_ = yym1213
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1212) {
				} else if !yym1213 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1212)
				} else {
					z.EncFallback(yy1212)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1214 := &x.ServicePort
				yym1215 := z.EncBinary()
				_ = yym1215
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1214) {
				} else if !yym1215 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1214)
				} else {
					z.EncFallback(yy1214)
				}
			}
			if yyr1207 || yy2arr1207 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1216 := z.DecBinary()
	_ = yym1216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1217 := r.ContainerType()
		if yyct1217 == codecSelferValueTypeMap1234 {
			yyl1217 := r.ReadMapStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1217, d)
			}
		} else if yyct1217 == codecSelferValueTypeArray1234 {
			yyl1217 := r.ReadArrayStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1218Slc
	var yyhl1218 bool = l >= 0
	for yyj1218 := 0; ; yyj1218++ {
		if yyhl1218 {
			if yyj1218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1218Slc = r.DecodeBytes(yys1218Slc, true, true)
		yys1218 := string(yys1218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1218 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg6_intstr.IntOrString{}
			} else {
				yyv1220 := &x.ServicePort
				yym1221 := z.DecBinary()
				_ = yym1221
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1220) {
				} else if !yym1221 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1220)
				} else {
					z.DecFallback(yyv1220, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1218)
		} // end switch yys1218
	} // end for yyj1218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1222 int
	var yyb1222 bool
	var yyhl1222 bool = l >= 0
	yyj1222++
	if yyhl1222 {
		yyb1222 = yyj1222 > l
	} else {
		yyb1222 = r.CheckBreak()
	}
	if yyb1222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1222++
	if yyhl1222 {
		yyb1222 = yyj1222 > l
	} else {
		yyb1222 = r.CheckBreak()
	}
	if yyb1222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg6_intstr.IntOrString{}
	} else {
		yyv1224 := &x.ServicePort
		yym1225 := z.DecBinary()
		_ = yym1225
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1224) {
		} else if !yym1225 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1224)
		} else {
			z.DecFallback(yyv1224, false)
		}
	}
	for {
		yyj1222++
		if yyhl1222 {
			yyb1222 = yyj1222 > l
		} else {
			yyb1222 = r.CheckBreak()
		}
		if yyb1222 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1222-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1226 := z.EncBinary()
	_ = yym1226
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1227 := z.DecBinary()
	_ = yym1227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1228 := z.EncBinary()
		_ = yym1228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1229 := !z.EncBinary()
			yy2arr1229 := z.EncBasicHandle().StructToArray
			var yyq1229 [2]bool
			_, _, _ = yysep1229, yyq1229, yy2arr1229
			const yyr1229 bool = false
			var yynn1229 int
			if yyr1229 || yy2arr1229 {
				r.EncodeArrayStart(2)
			} else {
				yynn1229 = 2
				for _, b := range yyq1229 {
					if b {
						yynn1229++
					}
				}
				r.EncodeMapStart(yynn1229)
				yynn1229 = 0
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Resource.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Resource.CodecEncodeSelf(e)
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1232 := z.EncBinary()
				_ = yym1232
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1233 := z.EncBinary()
				_ = yym1233
				if false {
				} else {
					r.EncodeFloat64(float64(x.Value))
				}
			}
			if yyr1229 || yy2arr1229 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1234 := z.DecBinary()
	_ = yym1234
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1235 := r.ContainerType()
		if yyct1235 == codecSelferValueTypeMap1234 {
			yyl1235 := r.ReadMapStart()
			if yyl1235 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1235, d)
			}
		} else if yyct1235 == codecSelferValueTypeArray1234 {
			yyl1235 := r.ReadArrayStart()
			if yyl1235 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1235, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1236Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1236Slc
	var yyhl1236 bool = l >= 0
	for yyj1236 := 0; ; yyj1236++ {
		if yyhl1236 {
			if yyj1236 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1236Slc = r.DecodeBytes(yys1236Slc, true, true)
		yys1236 := string(yys1236Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1236 {
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = NodeResource(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				x.Value = float64(r.DecodeFloat(false))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1236)
		} // end switch yys1236
	} // end for yyj1236
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1239 int
	var yyb1239 bool
	var yyhl1239 bool = l >= 0
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = NodeResource(r.DecodeString())
	}
	yyj1239++
	if yyhl1239 {
		yyb1239 = yyj1239 > l
	} else {
		yyb1239 = r.CheckBreak()
	}
	if yyb1239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		x.Value = float64(r.DecodeFloat(false))
	}
	for {
		yyj1239++
		if yyhl1239 {
			yyb1239 = yyj1239 > l
		} else {
			yyb1239 = r.CheckBreak()
		}
		if yyb1239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1242 := z.EncBinary()
		_ = yym1242
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1243 := !z.EncBinary()
			yy2arr1243 := z.EncBasicHandle().StructToArray
			var yyq1243 [3]bool
			_, _, _ = yysep1243, yyq1243, yy2arr1243
			const yyr1243 bool = false
			var yynn1243 int
			if yyr1243 || yy2arr1243 {
				r.EncodeArrayStart(3)
			} else {
				yynn1243 = 3
				for _, b := range yyq1243 {
					if b {
						yynn1243++
					}
				}
				r.EncodeMapStart(yynn1243)
				yynn1243 = 0
			}
			if yyr1243 || yy2arr1243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1245 := z.EncBinary()
				_ = yym1245
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("minNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1246 := z.EncBinary()
				_ = yym1246
				if false {
				} else {
					r.EncodeInt(int64(x.MinNodes))
				}
			}
			if yyr1243 || yy2arr1243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1248 := z.EncBinary()
				_ = yym1248
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1249 := z.EncBinary()
				_ = yym1249
				if false {
				} else {
					r.EncodeInt(int64(x.MaxNodes))
				}
			}
			if yyr1243 || yy2arr1243 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1251 := z.EncBinary()
					_ = yym1251
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetUtilization == nil {
					r.EncodeNil()
				} else {
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						h.encSliceNodeUtilization(([]NodeUtilization)(x.TargetUtilization), e)
					}
				}
			}
			if yyr1243 || yy2arr1243 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1253 := z.DecBinary()
	_ = yym1253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1254 := r.ContainerType()
		if yyct1254 == codecSelferValueTypeMap1234 {
			yyl1254 := r.ReadMapStart()
			if yyl1254 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1254, d)
			}
		} else if yyct1254 == codecSelferValueTypeArray1234 {
			yyl1254 := r.ReadArrayStart()
			if yyl1254 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1254, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1255Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1255Slc
	var yyhl1255 bool = l >= 0
	for yyj1255 := 0; ; yyj1255++ {
		if yyhl1255 {
			if yyj1255 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1255Slc = r.DecodeBytes(yys1255Slc, true, true)
		yys1255 := string(yys1255Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1255 {
		case "minNodes":
			if r.TryDecodeAsNil() {
				x.MinNodes = 0
			} else {
				x.MinNodes = int32(r.DecodeInt(32))
			}
		case "maxNodes":
			if r.TryDecodeAsNil() {
				x.MaxNodes = 0
			} else {
				x.MaxNodes = int32(r.DecodeInt(32))
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.TargetUtilization = nil
			} else {
				yyv1258 := &x.TargetUtilization
				yym1259 := z.DecBinary()
				_ = yym1259
				if false {
				} else {
					h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1258), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1255)
		} // end switch yys1255
	} // end for yyj1255
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1260 int
	var yyb1260 bool
	var yyhl1260 bool = l >= 0
	yyj1260++
	if yyhl1260 {
		yyb1260 = yyj1260 > l
	} else {
		yyb1260 = r.CheckBreak()
	}
	if yyb1260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinNodes = 0
	} else {
		x.MinNodes = int32(r.DecodeInt(32))
	}
	yyj1260++
	if yyhl1260 {
		yyb1260 = yyj1260 > l
	} else {
		yyb1260 = r.CheckBreak()
	}
	if yyb1260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxNodes = 0
	} else {
		x.MaxNodes = int32(r.DecodeInt(32))
	}
	yyj1260++
	if yyhl1260 {
		yyb1260 = yyj1260 > l
	} else {
		yyb1260 = r.CheckBreak()
	}
	if yyb1260 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetUtilization = nil
	} else {
		yyv1263 := &x.TargetUtilization
		yym1264 := z.DecBinary()
		_ = yym1264
		if false {
		} else {
			h.decSliceNodeUtilization((*[]NodeUtilization)(yyv1263), d)
		}
	}
	for {
		yyj1260++
		if yyhl1260 {
			yyb1260 = yyj1260 > l
		} else {
			yyb1260 = r.CheckBreak()
		}
		if yyb1260 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1260-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1265 := z.EncBinary()
		_ = yym1265
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1266 := !z.EncBinary()
			yy2arr1266 := z.EncBasicHandle().StructToArray
			var yyq1266 [4]bool
			_, _, _ = yysep1266, yyq1266, yy2arr1266
			const yyr1266 bool = false
			yyq1266[0] = x.Kind != ""
			yyq1266[1] = x.APIVersion != ""
			yyq1266[2] = true
			yyq1266[3] = true
			var yynn1266 int
			if yyr1266 || yy2arr1266 {
				r.EncodeArrayStart(4)
			} else {
				yynn1266 = 0
				for _, b := range yyq1266 {
					if b {
						yynn1266++
					}
				}
				r.EncodeMapStart(yynn1266)
				yynn1266 = 0
			}
			if yyr1266 || yy2arr1266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1266[0] {
					yym1268 := z.EncBinary()
					_ = yym1268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1266[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1269 := z.EncBinary()
					_ = yym1269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1266 || yy2arr1266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1266[1] {
					yym1271 := z.EncBinary()
					_ = yym1271
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1266[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1272 := z.EncBinary()
					_ = yym1272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1266 || yy2arr1266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1266[2] {
					yy1274 := &x.ObjectMeta
					yy1274.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1266[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1275 := &x.ObjectMeta
					yy1275.CodecEncodeSelf(e)
				}
			}
			if yyr1266 || yy2arr1266 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1266[3] {
					yy1277 := &x.Spec
					yy1277.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1266[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1278 := &x.Spec
					yy1278.CodecEncodeSelf(e)
				}
			}
			if yyr1266 || yy2arr1266 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1279 := z.DecBinary()
	_ = yym1279
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1280 := r.ContainerType()
		if yyct1280 == codecSelferValueTypeMap1234 {
			yyl1280 := r.ReadMapStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1280, d)
			}
		} else if yyct1280 == codecSelferValueTypeArray1234 {
			yyl1280 := r.ReadArrayStart()
			if yyl1280 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1280, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1281Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1281Slc
	var yyhl1281 bool = l >= 0
	for yyj1281 := 0; ; yyj1281++ {
		if yyhl1281 {
			if yyj1281 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1281Slc = r.DecodeBytes(yys1281Slc, true, true)
		yys1281 := string(yys1281Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1281 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1284 := &x.ObjectMeta
				yyv1284.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterAutoscalerSpec{}
			} else {
				yyv1285 := &x.Spec
				yyv1285.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1281)
		} // end switch yys1281
	} // end for yyj1281
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1286 int
	var yyb1286 bool
	var yyhl1286 bool = l >= 0
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1289 := &x.ObjectMeta
		yyv1289.CodecDecodeSelf(d)
	}
	yyj1286++
	if yyhl1286 {
		yyb1286 = yyj1286 > l
	} else {
		yyb1286 = r.CheckBreak()
	}
	if yyb1286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterAutoscalerSpec{}
	} else {
		yyv1290 := &x.Spec
		yyv1290.CodecDecodeSelf(d)
	}
	for {
		yyj1286++
		if yyhl1286 {
			yyb1286 = yyj1286 > l
		} else {
			yyb1286 = r.CheckBreak()
		}
		if yyb1286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1291 := z.EncBinary()
		_ = yym1291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1292 := !z.EncBinary()
			yy2arr1292 := z.EncBasicHandle().StructToArray
			var yyq1292 [4]bool
			_, _, _ = yysep1292, yyq1292, yy2arr1292
			const yyr1292 bool = false
			yyq1292[0] = x.Kind != ""
			yyq1292[1] = x.APIVersion != ""
			yyq1292[2] = true
			var yynn1292 int
			if yyr1292 || yy2arr1292 {
				r.EncodeArrayStart(4)
			} else {
				yynn1292 = 1
				for _, b := range yyq1292 {
					if b {
						yynn1292++
					}
				}
				r.EncodeMapStart(yynn1292)
				yynn1292 = 0
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[0] {
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1292[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[1] {
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1292[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1292[2] {
					yy1300 := &x.ListMeta
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1300) {
					} else {
						z.EncFallback(yy1300)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1292[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1302 := &x.ListMeta
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1302) {
					} else {
						z.EncFallback(yy1302)
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1306 := z.EncBinary()
					_ = yym1306
					if false {
					} else {
						h.encSliceClusterAutoscaler(([]ClusterAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr1292 || yy2arr1292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1307 := z.DecBinary()
	_ = yym1307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1308 := r.ContainerType()
		if yyct1308 == codecSelferValueTypeMap1234 {
			yyl1308 := r.ReadMapStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1308, d)
			}
		} else if yyct1308 == codecSelferValueTypeArray1234 {
			yyl1308 := r.ReadArrayStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1309Slc
	var yyhl1309 bool = l >= 0
	for yyj1309 := 0; ; yyj1309++ {
		if yyhl1309 {
			if yyj1309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1309Slc = r.DecodeBytes(yys1309Slc, true, true)
		yys1309 := string(yys1309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1309 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1312 := &x.ListMeta
				yym1313 := z.DecBinary()
				_ = yym1313
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1312) {
				} else {
					z.DecFallback(yyv1312, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1314 := &x.Items
				yym1315 := z.DecBinary()
				_ = yym1315
				if false {
				} else {
					h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1314), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1309)
		} // end switch yys1309
	} // end for yyj1309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1316 int
	var yyb1316 bool
	var yyhl1316 bool = l >= 0
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1319 := &x.ListMeta
		yym1320 := z.DecBinary()
		_ = yym1320
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1319) {
		} else {
			z.DecFallback(yyv1319, false)
		}
	}
	yyj1316++
	if yyhl1316 {
		yyb1316 = yyj1316 > l
	} else {
		yyb1316 = r.CheckBreak()
	}
	if yyb1316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1321 := &x.Items
		yym1322 := z.DecBinary()
		_ = yym1322
		if false {
		} else {
			h.decSliceClusterAutoscaler((*[]ClusterAutoscaler)(yyv1321), d)
		}
	}
	for {
		yyj1316++
		if yyhl1316 {
			yyb1316 = yyj1316 > l
		} else {
			yyb1316 = r.CheckBreak()
		}
		if yyb1316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1323 := z.EncBinary()
		_ = yym1323
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1324 := !z.EncBinary()
			yy2arr1324 := z.EncBasicHandle().StructToArray
			var yyq1324 [4]bool
			_, _, _ = yysep1324, yyq1324, yy2arr1324
			const yyr1324 bool = false
			yyq1324[0] = x.Kind != ""
			yyq1324[1] = x.APIVersion != ""
			var yynn1324 int
			if yyr1324 || yy2arr1324 {
				r.EncodeArrayStart(4)
			} else {
				yynn1324 = 2
				for _, b := range yyq1324 {
					if b {
						yynn1324++
					}
				}
				r.EncodeMapStart(yynn1324)
				yynn1324 = 0
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1324[0] {
					yym1326 := z.EncBinary()
					_ = yym1326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1324[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1324[1] {
					yym1329 := z.EncBinary()
					_ = yym1329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1324[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1332 := z.EncBinary()
				_ = yym1332
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1333 := z.EncBinary()
				_ = yym1333
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1335 := z.EncBinary()
				_ = yym1335
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1336 := z.EncBinary()
				_ = yym1336
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr1324 || yy2arr1324 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1337 := z.DecBinary()
	_ = yym1337
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1338 := r.ContainerType()
		if yyct1338 == codecSelferValueTypeMap1234 {
			yyl1338 := r.ReadMapStart()
			if yyl1338 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1338, d)
			}
		} else if yyct1338 == codecSelferValueTypeArray1234 {
			yyl1338 := r.ReadArrayStart()
			if yyl1338 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1338, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1339Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1339Slc
	var yyhl1339 bool = l >= 0
	for yyj1339 := 0; ; yyj1339++ {
		if yyhl1339 {
			if yyj1339 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1339Slc = r.DecodeBytes(yys1339Slc, true, true)
		yys1339 := string(yys1339Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1339 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1339)
		} // end switch yys1339
	} // end for yyj1339
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1344 int
	var yyb1344 bool
	var yyhl1344 bool = l >= 0
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj1344++
	if yyhl1344 {
		yyb1344 = yyj1344 > l
	} else {
		yyb1344 = r.CheckBreak()
	}
	if yyb1344 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj1344++
		if yyhl1344 {
			yyb1344 = yyj1344 > l
		} else {
			yyb1344 = r.CheckBreak()
		}
		if yyb1344 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1344-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1349 := z.EncBinary()
		_ = yym1349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1350 := !z.EncBinary()
			yy2arr1350 := z.EncBasicHandle().StructToArray
			var yyq1350 [7]bool
			_, _, _ = yysep1350, yyq1350, yy2arr1350
			const yyr1350 bool = false
			yyq1350[0] = x.Kind != ""
			yyq1350[1] = x.APIVersion != ""
			yyq1350[2] = x.LabelSelector != ""
			yyq1350[3] = x.FieldSelector != ""
			yyq1350[4] = x.Watch != false
			yyq1350[5] = x.ResourceVersion != ""
			yyq1350[6] = x.TimeoutSeconds != nil
			var yynn1350 int
			if yyr1350 || yy2arr1350 {
				r.EncodeArrayStart(7)
			} else {
				yynn1350 = 0
				for _, b := range yyq1350 {
					if b {
						yynn1350++
					}
				}
				r.EncodeMapStart(yynn1350)
				yynn1350 = 0
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[0] {
					yym1352 := z.EncBinary()
					_ = yym1352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1350[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1353 := z.EncBinary()
					_ = yym1353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[1] {
					yym1355 := z.EncBinary()
					_ = yym1355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[2] {
					yym1358 := z.EncBinary()
					_ = yym1358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1350[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[3] {
					yym1361 := z.EncBinary()
					_ = yym1361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1350[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1362 := z.EncBinary()
					_ = yym1362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[4] {
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1350[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1365 := z.EncBinary()
					_ = yym1365
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[5] {
					yym1367 := z.EncBinary()
					_ = yym1367
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1350[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1350[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy1370 := *x.TimeoutSeconds
						yym1371 := z.EncBinary()
						_ = yym1371
						if false {
						} else {
							r.EncodeInt(int64(yy1370))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1350[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy1372 := *x.TimeoutSeconds
						yym1373 := z.EncBinary()
						_ = yym1373
						if false {
						} else {
							r.EncodeInt(int64(yy1372))
						}
					}
				}
			}
			if yyr1350 || yy2arr1350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1374 := z.DecBinary()
	_ = yym1374
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1375 := r.ContainerType()
		if yyct1375 == codecSelferValueTypeMap1234 {
			yyl1375 := r.ReadMapStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1375, d)
			}
		} else if yyct1375 == codecSelferValueTypeArray1234 {
			yyl1375 := r.ReadArrayStart()
			if yyl1375 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1375, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1376Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1376Slc
	var yyhl1376 bool = l >= 0
	for yyj1376 := 0; ; yyj1376++ {
		if yyhl1376 {
			if yyj1376 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1376Slc = r.DecodeBytes(yys1376Slc, true, true)
		yys1376 := string(yys1376Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1376 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym1384 := z.DecBinary()
				_ = yym1384
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1376)
		} // end switch yys1376
	} // end for yyj1376
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1385 int
	var yyb1385 bool
	var yyhl1385 bool = l >= 0
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj1385++
	if yyhl1385 {
		yyb1385 = yyj1385 > l
	} else {
		yyb1385 = r.CheckBreak()
	}
	if yyb1385 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym1393 := z.DecBinary()
		_ = yym1393
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1385++
		if yyhl1385 {
			yyb1385 = yyj1385 > l
		} else {
			yyb1385 = r.CheckBreak()
		}
		if yyb1385 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1385-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1394 := z.EncBinary()
		_ = yym1394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1395 := !z.EncBinary()
			yy2arr1395 := z.EncBasicHandle().StructToArray
			var yyq1395 [2]bool
			_, _, _ = yysep1395, yyq1395, yy2arr1395
			const yyr1395 bool = false
			yyq1395[0] = len(x.MatchLabels) != 0
			yyq1395[1] = len(x.MatchExpressions) != 0
			var yynn1395 int
			if yyr1395 || yy2arr1395 {
				r.EncodeArrayStart(2)
			} else {
				yynn1395 = 0
				for _, b := range yyq1395 {
					if b {
						yynn1395++
					}
				}
				r.EncodeMapStart(yynn1395)
				yynn1395 = 0
			}
			if yyr1395 || yy2arr1395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1395[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1397 := z.EncBinary()
						_ = yym1397
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1395[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1398 := z.EncBinary()
						_ = yym1398
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1395 || yy2arr1395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1395[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1400 := z.EncBinary()
						_ = yym1400
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1395[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1401 := z.EncBinary()
						_ = yym1401
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1395 || yy2arr1395 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1402 := z.DecBinary()
	_ = yym1402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1403 := r.ContainerType()
		if yyct1403 == codecSelferValueTypeMap1234 {
			yyl1403 := r.ReadMapStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1403, d)
			}
		} else if yyct1403 == codecSelferValueTypeArray1234 {
			yyl1403 := r.ReadArrayStart()
			if yyl1403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1404Slc
	var yyhl1404 bool = l >= 0
	for yyj1404 := 0; ; yyj1404++ {
		if yyhl1404 {
			if yyj1404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1404Slc = r.DecodeBytes(yys1404Slc, true, true)
		yys1404 := string(yys1404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1404 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1405 := &x.MatchLabels
				yym1406 := z.DecBinary()
				_ = yym1406
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1405, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1407 := &x.MatchExpressions
				yym1408 := z.DecBinary()
				_ = yym1408
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1407), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1404)
		} // end switch yys1404
	} // end for yyj1404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1409 int
	var yyb1409 bool
	var yyhl1409 bool = l >= 0
	yyj1409++
	if yyhl1409 {
		yyb1409 = yyj1409 > l
	} else {
		yyb1409 = r.CheckBreak()
	}
	if yyb1409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1410 := &x.MatchLabels
		yym1411 := z.DecBinary()
		_ = yym1411
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1410, false, d)
		}
	}
	yyj1409++
	if yyhl1409 {
		yyb1409 = yyj1409 > l
	} else {
		yyb1409 = r.CheckBreak()
	}
	if yyb1409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1412 := &x.MatchExpressions
		yym1413 := z.DecBinary()
		_ = yym1413
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1412), d)
		}
	}
	for {
		yyj1409++
		if yyhl1409 {
			yyb1409 = yyj1409 > l
		} else {
			yyb1409 = r.CheckBreak()
		}
		if yyb1409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1414 := z.EncBinary()
		_ = yym1414
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1415 := !z.EncBinary()
			yy2arr1415 := z.EncBasicHandle().StructToArray
			var yyq1415 [3]bool
			_, _, _ = yysep1415, yyq1415, yy2arr1415
			const yyr1415 bool = false
			yyq1415[2] = len(x.Values) != 0
			var yynn1415 int
			if yyr1415 || yy2arr1415 {
				r.EncodeArrayStart(3)
			} else {
				yynn1415 = 2
				for _, b := range yyq1415 {
					if b {
						yynn1415++
					}
				}
				r.EncodeMapStart(yynn1415)
				yynn1415 = 0
			}
			if yyr1415 || yy2arr1415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1417 := z.EncBinary()
				_ = yym1417
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1418 := z.EncBinary()
				_ = yym1418
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1415 || yy2arr1415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1415 || yy2arr1415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1415[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1421 := z.EncBinary()
						_ = yym1421
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1415[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1422 := z.EncBinary()
						_ = yym1422
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1415 || yy2arr1415 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1423 := z.DecBinary()
	_ = yym1423
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1424 := r.ContainerType()
		if yyct1424 == codecSelferValueTypeMap1234 {
			yyl1424 := r.ReadMapStart()
			if yyl1424 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1424, d)
			}
		} else if yyct1424 == codecSelferValueTypeArray1234 {
			yyl1424 := r.ReadArrayStart()
			if yyl1424 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1424, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1425Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1425Slc
	var yyhl1425 bool = l >= 0
	for yyj1425 := 0; ; yyj1425++ {
		if yyhl1425 {
			if yyj1425 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1425Slc = r.DecodeBytes(yys1425Slc, true, true)
		yys1425 := string(yys1425Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1425 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1428 := &x.Values
				yym1429 := z.DecBinary()
				_ = yym1429
				if false {
				} else {
					z.F.DecSliceStringX(yyv1428, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1425)
		} // end switch yys1425
	} // end for yyj1425
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1430 int
	var yyb1430 bool
	var yyhl1430 bool = l >= 0
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1430++
	if yyhl1430 {
		yyb1430 = yyj1430 > l
	} else {
		yyb1430 = r.CheckBreak()
	}
	if yyb1430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1433 := &x.Values
		yym1434 := z.DecBinary()
		_ = yym1434
		if false {
		} else {
			z.F.DecSliceStringX(yyv1433, false, d)
		}
	}
	for {
		yyj1430++
		if yyhl1430 {
			yyb1430 = yyj1430 > l
		} else {
			yyb1430 = r.CheckBreak()
		}
		if yyb1430 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1430-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1435 := z.EncBinary()
	_ = yym1435
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1436 := z.DecBinary()
	_ = yym1436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1437 := z.EncBinary()
		_ = yym1437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1438 := !z.EncBinary()
			yy2arr1438 := z.EncBasicHandle().StructToArray
			var yyq1438 [5]bool
			_, _, _ = yysep1438, yyq1438, yy2arr1438
			const yyr1438 bool = false
			yyq1438[0] = x.Kind != ""
			yyq1438[1] = x.APIVersion != ""
			yyq1438[2] = true
			yyq1438[3] = true
			yyq1438[4] = true
			var yynn1438 int
			if yyr1438 || yy2arr1438 {
				r.EncodeArrayStart(5)
			} else {
				yynn1438 = 0
				for _, b := range yyq1438 {
					if b {
						yynn1438++
					}
				}
				r.EncodeMapStart(yynn1438)
				yynn1438 = 0
			}
			if yyr1438 || yy2arr1438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1438[0] {
					yym1440 := z.EncBinary()
					_ = yym1440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1441 := z.EncBinary()
					_ = yym1441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1438 || yy2arr1438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1438[1] {
					yym1443 := z.EncBinary()
					_ = yym1443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1444 := z.EncBinary()
					_ = yym1444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1438 || yy2arr1438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1438[2] {
					yy1446 := &x.ObjectMeta
					yy1446.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1447 := &x.ObjectMeta
					yy1447.CodecEncodeSelf(e)
				}
			}
			if yyr1438 || yy2arr1438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1438[3] {
					yy1449 := &x.Spec
					yy1449.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1438[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1450 := &x.Spec
					yy1450.CodecEncodeSelf(e)
				}
			}
			if yyr1438 || yy2arr1438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1438[4] {
					yy1452 := &x.Status
					yy1452.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1438[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1453 := &x.Status
					yy1453.CodecEncodeSelf(e)
				}
			}
			if yyr1438 || yy2arr1438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1454 := z.DecBinary()
	_ = yym1454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1455 := r.ContainerType()
		if yyct1455 == codecSelferValueTypeMap1234 {
			yyl1455 := r.ReadMapStart()
			if yyl1455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1455, d)
			}
		} else if yyct1455 == codecSelferValueTypeArray1234 {
			yyl1455 := r.ReadArrayStart()
			if yyl1455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1456Slc
	var yyhl1456 bool = l >= 0
	for yyj1456 := 0; ; yyj1456++ {
		if yyhl1456 {
			if yyj1456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1456Slc = r.DecodeBytes(yys1456Slc, true, true)
		yys1456 := string(yys1456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1456 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1459 := &x.ObjectMeta
				yyv1459.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1460 := &x.Spec
				yyv1460.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1461 := &x.Status
				yyv1461.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1456)
		} // end switch yys1456
	} // end for yyj1456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1462 int
	var yyb1462 bool
	var yyhl1462 bool = l >= 0
	yyj1462++
	if yyhl1462 {
		yyb1462 = yyj1462 > l
	} else {
		yyb1462 = r.CheckBreak()
	}
	if yyb1462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1462++
	if yyhl1462 {
		yyb1462 = yyj1462 > l
	} else {
		yyb1462 = r.CheckBreak()
	}
	if yyb1462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1462++
	if yyhl1462 {
		yyb1462 = yyj1462 > l
	} else {
		yyb1462 = r.CheckBreak()
	}
	if yyb1462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1465 := &x.ObjectMeta
		yyv1465.CodecDecodeSelf(d)
	}
	yyj1462++
	if yyhl1462 {
		yyb1462 = yyj1462 > l
	} else {
		yyb1462 = r.CheckBreak()
	}
	if yyb1462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1466 := &x.Spec
		yyv1466.CodecDecodeSelf(d)
	}
	yyj1462++
	if yyhl1462 {
		yyb1462 = yyj1462 > l
	} else {
		yyb1462 = r.CheckBreak()
	}
	if yyb1462 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1467 := &x.Status
		yyv1467.CodecDecodeSelf(d)
	}
	for {
		yyj1462++
		if yyhl1462 {
			yyb1462 = yyj1462 > l
		} else {
			yyb1462 = r.CheckBreak()
		}
		if yyb1462 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1462-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1468 := z.EncBinary()
		_ = yym1468
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1469 := !z.EncBinary()
			yy2arr1469 := z.EncBasicHandle().StructToArray
			var yyq1469 [4]bool
			_, _, _ = yysep1469, yyq1469, yy2arr1469
			const yyr1469 bool = false
			yyq1469[0] = x.Kind != ""
			yyq1469[1] = x.APIVersion != ""
			yyq1469[2] = true
			var yynn1469 int
			if yyr1469 || yy2arr1469 {
				r.EncodeArrayStart(4)
			} else {
				yynn1469 = 1
				for _, b := range yyq1469 {
					if b {
						yynn1469++
					}
				}
				r.EncodeMapStart(yynn1469)
				yynn1469 = 0
			}
			if yyr1469 || yy2arr1469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1469[0] {
					yym1471 := z.EncBinary()
					_ = yym1471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1469[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1472 := z.EncBinary()
					_ = yym1472
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1469 || yy2arr1469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1469[1] {
					yym1474 := z.EncBinary()
					_ = yym1474
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1469[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1475 := z.EncBinary()
					_ = yym1475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1469 || yy2arr1469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1469[2] {
					yy1477 := &x.ListMeta
					yym1478 := z.EncBinary()
					_ = yym1478
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1477) {
					} else {
						z.EncFallback(yy1477)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1469[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1479 := &x.ListMeta
					yym1480 := z.EncBinary()
					_ = yym1480
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1479) {
					} else {
						z.EncFallback(yy1479)
					}
				}
			}
			if yyr1469 || yy2arr1469 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1483 := z.EncBinary()
					_ = yym1483
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1469 || yy2arr1469 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1484 := z.DecBinary()
	_ = yym1484
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1485 := r.ContainerType()
		if yyct1485 == codecSelferValueTypeMap1234 {
			yyl1485 := r.ReadMapStart()
			if yyl1485 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1485, d)
			}
		} else if yyct1485 == codecSelferValueTypeArray1234 {
			yyl1485 := r.ReadArrayStart()
			if yyl1485 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1485, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1486Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1486Slc
	var yyhl1486 bool = l >= 0
	for yyj1486 := 0; ; yyj1486++ {
		if yyhl1486 {
			if yyj1486 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1486Slc = r.DecodeBytes(yys1486Slc, true, true)
		yys1486 := string(yys1486Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1486 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1489 := &x.ListMeta
				yym1490 := z.DecBinary()
				_ = yym1490
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1489) {
				} else {
					z.DecFallback(yyv1489, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1491 := &x.Items
				yym1492 := z.DecBinary()
				_ = yym1492
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1491), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1486)
		} // end switch yys1486
	} // end for yyj1486
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1493 int
	var yyb1493 bool
	var yyhl1493 bool = l >= 0
	yyj1493++
	if yyhl1493 {
		yyb1493 = yyj1493 > l
	} else {
		yyb1493 = r.CheckBreak()
	}
	if yyb1493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1493++
	if yyhl1493 {
		yyb1493 = yyj1493 > l
	} else {
		yyb1493 = r.CheckBreak()
	}
	if yyb1493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1493++
	if yyhl1493 {
		yyb1493 = yyj1493 > l
	} else {
		yyb1493 = r.CheckBreak()
	}
	if yyb1493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1496 := &x.ListMeta
		yym1497 := z.DecBinary()
		_ = yym1497
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1496) {
		} else {
			z.DecFallback(yyv1496, false)
		}
	}
	yyj1493++
	if yyhl1493 {
		yyb1493 = yyj1493 > l
	} else {
		yyb1493 = r.CheckBreak()
	}
	if yyb1493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1498 := &x.Items
		yym1499 := z.DecBinary()
		_ = yym1499
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1498), d)
		}
	}
	for {
		yyj1493++
		if yyhl1493 {
			yyb1493 = yyj1493 > l
		} else {
			yyb1493 = r.CheckBreak()
		}
		if yyb1493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1500 := z.EncBinary()
		_ = yym1500
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1501 := !z.EncBinary()
			yy2arr1501 := z.EncBasicHandle().StructToArray
			var yyq1501 [3]bool
			_, _, _ = yysep1501, yyq1501, yy2arr1501
			const yyr1501 bool = false
			yyq1501[0] = x.Replicas != nil
			yyq1501[1] = x.Selector != nil
			yyq1501[2] = x.Template != nil
			var yynn1501 int
			if yyr1501 || yy2arr1501 {
				r.EncodeArrayStart(3)
			} else {
				yynn1501 = 0
				for _, b := range yyq1501 {
					if b {
						yynn1501++
					}
				}
				r.EncodeMapStart(yynn1501)
				yynn1501 = 0
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1503 := *x.Replicas
						yym1504 := z.EncBinary()
						_ = yym1504
						if false {
						} else {
							r.EncodeInt(int64(yy1503))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1505 := *x.Replicas
						yym1506 := z.EncBinary()
						_ = yym1506
						if false {
						} else {
							r.EncodeInt(int64(yy1505))
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1509 := z.DecBinary()
	_ = yym1509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1510 := r.ContainerType()
		if yyct1510 == codecSelferValueTypeMap1234 {
			yyl1510 := r.ReadMapStart()
			if yyl1510 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1510, d)
			}
		} else if yyct1510 == codecSelferValueTypeArray1234 {
			yyl1510 := r.ReadArrayStart()
			if yyl1510 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1510, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1511Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1511Slc
	var yyhl1511 bool = l >= 0
	for yyj1511 := 0; ; yyj1511++ {
		if yyhl1511 {
			if yyj1511 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1511Slc = r.DecodeBytes(yys1511Slc, true, true)
		yys1511 := string(yys1511Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1511 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym1513 := z.DecBinary()
				_ = yym1513
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(pkg2_v1.PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1511)
		} // end switch yys1511
	} // end for yyj1511
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1516 int
	var yyb1516 bool
	var yyhl1516 bool = l >= 0
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym1518 := z.DecBinary()
		_ = yym1518
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1516++
	if yyhl1516 {
		yyb1516 = yyj1516 > l
	} else {
		yyb1516 = r.CheckBreak()
	}
	if yyb1516 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(pkg2_v1.PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1516++
		if yyhl1516 {
			yyb1516 = yyj1516 > l
		} else {
			yyb1516 = r.CheckBreak()
		}
		if yyb1516 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1516-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1521 := z.EncBinary()
		_ = yym1521
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1522 := !z.EncBinary()
			yy2arr1522 := z.EncBasicHandle().StructToArray
			var yyq1522 [2]bool
			_, _, _ = yysep1522, yyq1522, yy2arr1522
			const yyr1522 bool = false
			yyq1522[1] = x.ObservedGeneration != 0
			var yynn1522 int
			if yyr1522 || yy2arr1522 {
				r.EncodeArrayStart(2)
			} else {
				yynn1522 = 1
				for _, b := range yyq1522 {
					if b {
						yynn1522++
					}
				}
				r.EncodeMapStart(yynn1522)
				yynn1522 = 0
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1524 := z.EncBinary()
				_ = yym1524
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1525 := z.EncBinary()
				_ = yym1525
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1522[1] {
					yym1527 := z.EncBinary()
					_ = yym1527
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1522[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1528 := z.EncBinary()
					_ = yym1528
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1522 || yy2arr1522 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1529 := z.DecBinary()
	_ = yym1529
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1530 := r.ContainerType()
		if yyct1530 == codecSelferValueTypeMap1234 {
			yyl1530 := r.ReadMapStart()
			if yyl1530 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1530, d)
			}
		} else if yyct1530 == codecSelferValueTypeArray1234 {
			yyl1530 := r.ReadArrayStart()
			if yyl1530 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1530, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1531Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1531Slc
	var yyhl1531 bool = l >= 0
	for yyj1531 := 0; ; yyj1531++ {
		if yyhl1531 {
			if yyj1531 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1531Slc = r.DecodeBytes(yys1531Slc, true, true)
		yys1531 := string(yys1531Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1531 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1531)
		} // end switch yys1531
	} // end for yyj1531
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1534 int
	var yyb1534 bool
	var yyhl1534 bool = l >= 0
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj1534++
	if yyhl1534 {
		yyb1534 = yyj1534 > l
	} else {
		yyb1534 = r.CheckBreak()
	}
	if yyb1534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1534++
		if yyhl1534 {
			yyb1534 = yyj1534 > l
		} else {
			yyb1534 = r.CheckBreak()
		}
		if yyb1534 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1534-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1537 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1538 := &yyv1537
		yy1538.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1539 := *v
	yyh1539, yyl1539 := z.DecSliceHelperStart()
	var yyc1539 bool
	if yyl1539 == 0 {
		if yyv1539 == nil {
			yyv1539 = []CustomMetricTarget{}
			yyc1539 = true
		} else if len(yyv1539) != 0 {
			yyv1539 = yyv1539[:0]
			yyc1539 = true
		}
	} else if yyl1539 > 0 {
		var yyrr1539, yyrl1539 int
		var yyrt1539 bool
		if yyl1539 > cap(yyv1539) {

			yyrg1539 := len(yyv1539) > 0
			yyv21539 := yyv1539
			yyrl1539, yyrt1539 = z.DecInferLen(yyl1539, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1539 {
				if yyrl1539 <= cap(yyv1539) {
					yyv1539 = yyv1539[:yyrl1539]
				} else {
					yyv1539 = make([]CustomMetricTarget, yyrl1539)
				}
			} else {
				yyv1539 = make([]CustomMetricTarget, yyrl1539)
			}
			yyc1539 = true
			yyrr1539 = len(yyv1539)
			if yyrg1539 {
				copy(yyv1539, yyv21539)
			}
		} else if yyl1539 != len(yyv1539) {
			yyv1539 = yyv1539[:yyl1539]
			yyc1539 = true
		}
		yyj1539 := 0
		for ; yyj1539 < yyrr1539; yyj1539++ {
			yyh1539.ElemContainerState(yyj1539)
			if r.TryDecodeAsNil() {
				yyv1539[yyj1539] = CustomMetricTarget{}
			} else {
				yyv1540 := &yyv1539[yyj1539]
				yyv1540.CodecDecodeSelf(d)
			}

		}
		if yyrt1539 {
			for ; yyj1539 < yyl1539; yyj1539++ {
				yyv1539 = append(yyv1539, CustomMetricTarget{})
				yyh1539.ElemContainerState(yyj1539)
				if r.TryDecodeAsNil() {
					yyv1539[yyj1539] = CustomMetricTarget{}
				} else {
					yyv1541 := &yyv1539[yyj1539]
					yyv1541.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1539 := 0
		for ; !r.CheckBreak(); yyj1539++ {

			if yyj1539 >= len(yyv1539) {
				yyv1539 = append(yyv1539, CustomMetricTarget{}) // var yyz1539 CustomMetricTarget
				yyc1539 = true
			}
			yyh1539.ElemContainerState(yyj1539)
			if yyj1539 < len(yyv1539) {
				if r.TryDecodeAsNil() {
					yyv1539[yyj1539] = CustomMetricTarget{}
				} else {
					yyv1542 := &yyv1539[yyj1539]
					yyv1542.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1539 < len(yyv1539) {
			yyv1539 = yyv1539[:yyj1539]
			yyc1539 = true
		} else if yyj1539 == 0 && yyv1539 == nil {
			yyv1539 = []CustomMetricTarget{}
			yyc1539 = true
		}
	}
	yyh1539.End()
	if yyc1539 {
		*v = yyv1539
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1543 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1544 := &yyv1543
		yy1544.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1545 := *v
	yyh1545, yyl1545 := z.DecSliceHelperStart()
	var yyc1545 bool
	if yyl1545 == 0 {
		if yyv1545 == nil {
			yyv1545 = []CustomMetricCurrentStatus{}
			yyc1545 = true
		} else if len(yyv1545) != 0 {
			yyv1545 = yyv1545[:0]
			yyc1545 = true
		}
	} else if yyl1545 > 0 {
		var yyrr1545, yyrl1545 int
		var yyrt1545 bool
		if yyl1545 > cap(yyv1545) {

			yyrg1545 := len(yyv1545) > 0
			yyv21545 := yyv1545
			yyrl1545, yyrt1545 = z.DecInferLen(yyl1545, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1545 {
				if yyrl1545 <= cap(yyv1545) {
					yyv1545 = yyv1545[:yyrl1545]
				} else {
					yyv1545 = make([]CustomMetricCurrentStatus, yyrl1545)
				}
			} else {
				yyv1545 = make([]CustomMetricCurrentStatus, yyrl1545)
			}
			yyc1545 = true
			yyrr1545 = len(yyv1545)
			if yyrg1545 {
				copy(yyv1545, yyv21545)
			}
		} else if yyl1545 != len(yyv1545) {
			yyv1545 = yyv1545[:yyl1545]
			yyc1545 = true
		}
		yyj1545 := 0
		for ; yyj1545 < yyrr1545; yyj1545++ {
			yyh1545.ElemContainerState(yyj1545)
			if r.TryDecodeAsNil() {
				yyv1545[yyj1545] = CustomMetricCurrentStatus{}
			} else {
				yyv1546 := &yyv1545[yyj1545]
				yyv1546.CodecDecodeSelf(d)
			}

		}
		if yyrt1545 {
			for ; yyj1545 < yyl1545; yyj1545++ {
				yyv1545 = append(yyv1545, CustomMetricCurrentStatus{})
				yyh1545.ElemContainerState(yyj1545)
				if r.TryDecodeAsNil() {
					yyv1545[yyj1545] = CustomMetricCurrentStatus{}
				} else {
					yyv1547 := &yyv1545[yyj1545]
					yyv1547.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1545 := 0
		for ; !r.CheckBreak(); yyj1545++ {

			if yyj1545 >= len(yyv1545) {
				yyv1545 = append(yyv1545, CustomMetricCurrentStatus{}) // var yyz1545 CustomMetricCurrentStatus
				yyc1545 = true
			}
			yyh1545.ElemContainerState(yyj1545)
			if yyj1545 < len(yyv1545) {
				if r.TryDecodeAsNil() {
					yyv1545[yyj1545] = CustomMetricCurrentStatus{}
				} else {
					yyv1548 := &yyv1545[yyj1545]
					yyv1548.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1545 < len(yyv1545) {
			yyv1545 = yyv1545[:yyj1545]
			yyc1545 = true
		} else if yyj1545 == 0 && yyv1545 == nil {
			yyv1545 = []CustomMetricCurrentStatus{}
			yyc1545 = true
		}
	}
	yyh1545.End()
	if yyc1545 {
		*v = yyv1545
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1549 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1550 := &yyv1549
		yy1550.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1551 := *v
	yyh1551, yyl1551 := z.DecSliceHelperStart()
	var yyc1551 bool
	if yyl1551 == 0 {
		if yyv1551 == nil {
			yyv1551 = []HorizontalPodAutoscaler{}
			yyc1551 = true
		} else if len(yyv1551) != 0 {
			yyv1551 = yyv1551[:0]
			yyc1551 = true
		}
	} else if yyl1551 > 0 {
		var yyrr1551, yyrl1551 int
		var yyrt1551 bool
		if yyl1551 > cap(yyv1551) {

			yyrg1551 := len(yyv1551) > 0
			yyv21551 := yyv1551
			yyrl1551, yyrt1551 = z.DecInferLen(yyl1551, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt1551 {
				if yyrl1551 <= cap(yyv1551) {
					yyv1551 = yyv1551[:yyrl1551]
				} else {
					yyv1551 = make([]HorizontalPodAutoscaler, yyrl1551)
				}
			} else {
				yyv1551 = make([]HorizontalPodAutoscaler, yyrl1551)
			}
			yyc1551 = true
			yyrr1551 = len(yyv1551)
			if yyrg1551 {
				copy(yyv1551, yyv21551)
			}
		} else if yyl1551 != len(yyv1551) {
			yyv1551 = yyv1551[:yyl1551]
			yyc1551 = true
		}
		yyj1551 := 0
		for ; yyj1551 < yyrr1551; yyj1551++ {
			yyh1551.ElemContainerState(yyj1551)
			if r.TryDecodeAsNil() {
				yyv1551[yyj1551] = HorizontalPodAutoscaler{}
			} else {
				yyv1552 := &yyv1551[yyj1551]
				yyv1552.CodecDecodeSelf(d)
			}

		}
		if yyrt1551 {
			for ; yyj1551 < yyl1551; yyj1551++ {
				yyv1551 = append(yyv1551, HorizontalPodAutoscaler{})
				yyh1551.ElemContainerState(yyj1551)
				if r.TryDecodeAsNil() {
					yyv1551[yyj1551] = HorizontalPodAutoscaler{}
				} else {
					yyv1553 := &yyv1551[yyj1551]
					yyv1553.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1551 := 0
		for ; !r.CheckBreak(); yyj1551++ {

			if yyj1551 >= len(yyv1551) {
				yyv1551 = append(yyv1551, HorizontalPodAutoscaler{}) // var yyz1551 HorizontalPodAutoscaler
				yyc1551 = true
			}
			yyh1551.ElemContainerState(yyj1551)
			if yyj1551 < len(yyv1551) {
				if r.TryDecodeAsNil() {
					yyv1551[yyj1551] = HorizontalPodAutoscaler{}
				} else {
					yyv1554 := &yyv1551[yyj1551]
					yyv1554.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1551 < len(yyv1551) {
			yyv1551 = yyv1551[:yyj1551]
			yyc1551 = true
		} else if yyj1551 == 0 && yyv1551 == nil {
			yyv1551 = []HorizontalPodAutoscaler{}
			yyc1551 = true
		}
	}
	yyh1551.End()
	if yyc1551 {
		*v = yyv1551
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1555 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1556 := &yyv1555
		yy1556.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1557 := *v
	yyh1557, yyl1557 := z.DecSliceHelperStart()
	var yyc1557 bool
	if yyl1557 == 0 {
		if yyv1557 == nil {
			yyv1557 = []APIVersion{}
			yyc1557 = true
		} else if len(yyv1557) != 0 {
			yyv1557 = yyv1557[:0]
			yyc1557 = true
		}
	} else if yyl1557 > 0 {
		var yyrr1557, yyrl1557 int
		var yyrt1557 bool
		if yyl1557 > cap(yyv1557) {

			yyrg1557 := len(yyv1557) > 0
			yyv21557 := yyv1557
			yyrl1557, yyrt1557 = z.DecInferLen(yyl1557, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt1557 {
				if yyrl1557 <= cap(yyv1557) {
					yyv1557 = yyv1557[:yyrl1557]
				} else {
					yyv1557 = make([]APIVersion, yyrl1557)
				}
			} else {
				yyv1557 = make([]APIVersion, yyrl1557)
			}
			yyc1557 = true
			yyrr1557 = len(yyv1557)
			if yyrg1557 {
				copy(yyv1557, yyv21557)
			}
		} else if yyl1557 != len(yyv1557) {
			yyv1557 = yyv1557[:yyl1557]
			yyc1557 = true
		}
		yyj1557 := 0
		for ; yyj1557 < yyrr1557; yyj1557++ {
			yyh1557.ElemContainerState(yyj1557)
			if r.TryDecodeAsNil() {
				yyv1557[yyj1557] = APIVersion{}
			} else {
				yyv1558 := &yyv1557[yyj1557]
				yyv1558.CodecDecodeSelf(d)
			}

		}
		if yyrt1557 {
			for ; yyj1557 < yyl1557; yyj1557++ {
				yyv1557 = append(yyv1557, APIVersion{})
				yyh1557.ElemContainerState(yyj1557)
				if r.TryDecodeAsNil() {
					yyv1557[yyj1557] = APIVersion{}
				} else {
					yyv1559 := &yyv1557[yyj1557]
					yyv1559.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1557 := 0
		for ; !r.CheckBreak(); yyj1557++ {

			if yyj1557 >= len(yyv1557) {
				yyv1557 = append(yyv1557, APIVersion{}) // var yyz1557 APIVersion
				yyc1557 = true
			}
			yyh1557.ElemContainerState(yyj1557)
			if yyj1557 < len(yyv1557) {
				if r.TryDecodeAsNil() {
					yyv1557[yyj1557] = APIVersion{}
				} else {
					yyv1560 := &yyv1557[yyj1557]
					yyv1560.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1557 < len(yyv1557) {
			yyv1557 = yyv1557[:yyj1557]
			yyc1557 = true
		} else if yyj1557 == 0 && yyv1557 == nil {
			yyv1557 = []APIVersion{}
			yyc1557 = true
		}
	}
	yyh1557.End()
	if yyc1557 {
		*v = yyv1557
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1561 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1562 := &yyv1561
		yy1562.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1563 := *v
	yyh1563, yyl1563 := z.DecSliceHelperStart()
	var yyc1563 bool
	if yyl1563 == 0 {
		if yyv1563 == nil {
			yyv1563 = []ThirdPartyResource{}
			yyc1563 = true
		} else if len(yyv1563) != 0 {
			yyv1563 = yyv1563[:0]
			yyc1563 = true
		}
	} else if yyl1563 > 0 {
		var yyrr1563, yyrl1563 int
		var yyrt1563 bool
		if yyl1563 > cap(yyv1563) {

			yyrg1563 := len(yyv1563) > 0
			yyv21563 := yyv1563
			yyrl1563, yyrt1563 = z.DecInferLen(yyl1563, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1563 {
				if yyrl1563 <= cap(yyv1563) {
					yyv1563 = yyv1563[:yyrl1563]
				} else {
					yyv1563 = make([]ThirdPartyResource, yyrl1563)
				}
			} else {
				yyv1563 = make([]ThirdPartyResource, yyrl1563)
			}
			yyc1563 = true
			yyrr1563 = len(yyv1563)
			if yyrg1563 {
				copy(yyv1563, yyv21563)
			}
		} else if yyl1563 != len(yyv1563) {
			yyv1563 = yyv1563[:yyl1563]
			yyc1563 = true
		}
		yyj1563 := 0
		for ; yyj1563 < yyrr1563; yyj1563++ {
			yyh1563.ElemContainerState(yyj1563)
			if r.TryDecodeAsNil() {
				yyv1563[yyj1563] = ThirdPartyResource{}
			} else {
				yyv1564 := &yyv1563[yyj1563]
				yyv1564.CodecDecodeSelf(d)
			}

		}
		if yyrt1563 {
			for ; yyj1563 < yyl1563; yyj1563++ {
				yyv1563 = append(yyv1563, ThirdPartyResource{})
				yyh1563.ElemContainerState(yyj1563)
				if r.TryDecodeAsNil() {
					yyv1563[yyj1563] = ThirdPartyResource{}
				} else {
					yyv1565 := &yyv1563[yyj1563]
					yyv1565.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1563 := 0
		for ; !r.CheckBreak(); yyj1563++ {

			if yyj1563 >= len(yyv1563) {
				yyv1563 = append(yyv1563, ThirdPartyResource{}) // var yyz1563 ThirdPartyResource
				yyc1563 = true
			}
			yyh1563.ElemContainerState(yyj1563)
			if yyj1563 < len(yyv1563) {
				if r.TryDecodeAsNil() {
					yyv1563[yyj1563] = ThirdPartyResource{}
				} else {
					yyv1566 := &yyv1563[yyj1563]
					yyv1566.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1563 < len(yyv1563) {
			yyv1563 = yyv1563[:yyj1563]
			yyc1563 = true
		} else if yyj1563 == 0 && yyv1563 == nil {
			yyv1563 = []ThirdPartyResource{}
			yyc1563 = true
		}
	}
	yyh1563.End()
	if yyc1563 {
		*v = yyv1563
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1567 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1568 := &yyv1567
		yy1568.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1569 := *v
	yyh1569, yyl1569 := z.DecSliceHelperStart()
	var yyc1569 bool
	if yyl1569 == 0 {
		if yyv1569 == nil {
			yyv1569 = []Deployment{}
			yyc1569 = true
		} else if len(yyv1569) != 0 {
			yyv1569 = yyv1569[:0]
			yyc1569 = true
		}
	} else if yyl1569 > 0 {
		var yyrr1569, yyrl1569 int
		var yyrt1569 bool
		if yyl1569 > cap(yyv1569) {

			yyrg1569 := len(yyv1569) > 0
			yyv21569 := yyv1569
			yyrl1569, yyrt1569 = z.DecInferLen(yyl1569, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt1569 {
				if yyrl1569 <= cap(yyv1569) {
					yyv1569 = yyv1569[:yyrl1569]
				} else {
					yyv1569 = make([]Deployment, yyrl1569)
				}
			} else {
				yyv1569 = make([]Deployment, yyrl1569)
			}
			yyc1569 = true
			yyrr1569 = len(yyv1569)
			if yyrg1569 {
				copy(yyv1569, yyv21569)
			}
		} else if yyl1569 != len(yyv1569) {
			yyv1569 = yyv1569[:yyl1569]
			yyc1569 = true
		}
		yyj1569 := 0
		for ; yyj1569 < yyrr1569; yyj1569++ {
			yyh1569.ElemContainerState(yyj1569)
			if r.TryDecodeAsNil() {
				yyv1569[yyj1569] = Deployment{}
			} else {
				yyv1570 := &yyv1569[yyj1569]
				yyv1570.CodecDecodeSelf(d)
			}

		}
		if yyrt1569 {
			for ; yyj1569 < yyl1569; yyj1569++ {
				yyv1569 = append(yyv1569, Deployment{})
				yyh1569.ElemContainerState(yyj1569)
				if r.TryDecodeAsNil() {
					yyv1569[yyj1569] = Deployment{}
				} else {
					yyv1571 := &yyv1569[yyj1569]
					yyv1571.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1569 := 0
		for ; !r.CheckBreak(); yyj1569++ {

			if yyj1569 >= len(yyv1569) {
				yyv1569 = append(yyv1569, Deployment{}) // var yyz1569 Deployment
				yyc1569 = true
			}
			yyh1569.ElemContainerState(yyj1569)
			if yyj1569 < len(yyv1569) {
				if r.TryDecodeAsNil() {
					yyv1569[yyj1569] = Deployment{}
				} else {
					yyv1572 := &yyv1569[yyj1569]
					yyv1572.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1569 < len(yyv1569) {
			yyv1569 = yyv1569[:yyj1569]
			yyc1569 = true
		} else if yyj1569 == 0 && yyv1569 == nil {
			yyv1569 = []Deployment{}
			yyc1569 = true
		}
	}
	yyh1569.End()
	if yyc1569 {
		*v = yyv1569
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1573 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1574 := &yyv1573
		yy1574.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1575 := *v
	yyh1575, yyl1575 := z.DecSliceHelperStart()
	var yyc1575 bool
	if yyl1575 == 0 {
		if yyv1575 == nil {
			yyv1575 = []DaemonSet{}
			yyc1575 = true
		} else if len(yyv1575) != 0 {
			yyv1575 = yyv1575[:0]
			yyc1575 = true
		}
	} else if yyl1575 > 0 {
		var yyrr1575, yyrl1575 int
		var yyrt1575 bool
		if yyl1575 > cap(yyv1575) {

			yyrg1575 := len(yyv1575) > 0
			yyv21575 := yyv1575
			yyrl1575, yyrt1575 = z.DecInferLen(yyl1575, z.DecBasicHandle().MaxInitLen, 600)
			if yyrt1575 {
				if yyrl1575 <= cap(yyv1575) {
					yyv1575 = yyv1575[:yyrl1575]
				} else {
					yyv1575 = make([]DaemonSet, yyrl1575)
				}
			} else {
				yyv1575 = make([]DaemonSet, yyrl1575)
			}
			yyc1575 = true
			yyrr1575 = len(yyv1575)
			if yyrg1575 {
				copy(yyv1575, yyv21575)
			}
		} else if yyl1575 != len(yyv1575) {
			yyv1575 = yyv1575[:yyl1575]
			yyc1575 = true
		}
		yyj1575 := 0
		for ; yyj1575 < yyrr1575; yyj1575++ {
			yyh1575.ElemContainerState(yyj1575)
			if r.TryDecodeAsNil() {
				yyv1575[yyj1575] = DaemonSet{}
			} else {
				yyv1576 := &yyv1575[yyj1575]
				yyv1576.CodecDecodeSelf(d)
			}

		}
		if yyrt1575 {
			for ; yyj1575 < yyl1575; yyj1575++ {
				yyv1575 = append(yyv1575, DaemonSet{})
				yyh1575.ElemContainerState(yyj1575)
				if r.TryDecodeAsNil() {
					yyv1575[yyj1575] = DaemonSet{}
				} else {
					yyv1577 := &yyv1575[yyj1575]
					yyv1577.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1575 := 0
		for ; !r.CheckBreak(); yyj1575++ {

			if yyj1575 >= len(yyv1575) {
				yyv1575 = append(yyv1575, DaemonSet{}) // var yyz1575 DaemonSet
				yyc1575 = true
			}
			yyh1575.ElemContainerState(yyj1575)
			if yyj1575 < len(yyv1575) {
				if r.TryDecodeAsNil() {
					yyv1575[yyj1575] = DaemonSet{}
				} else {
					yyv1578 := &yyv1575[yyj1575]
					yyv1578.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1575 < len(yyv1575) {
			yyv1575 = yyv1575[:yyj1575]
			yyc1575 = true
		} else if yyj1575 == 0 && yyv1575 == nil {
			yyv1575 = []DaemonSet{}
			yyc1575 = true
		}
	}
	yyh1575.End()
	if yyc1575 {
		*v = yyv1575
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1579 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1580 := &yyv1579
		yy1580.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1581 := *v
	yyh1581, yyl1581 := z.DecSliceHelperStart()
	var yyc1581 bool
	if yyl1581 == 0 {
		if yyv1581 == nil {
			yyv1581 = []ThirdPartyResourceData{}
			yyc1581 = true
		} else if len(yyv1581) != 0 {
			yyv1581 = yyv1581[:0]
			yyc1581 = true
		}
	} else if yyl1581 > 0 {
		var yyrr1581, yyrl1581 int
		var yyrt1581 bool
		if yyl1581 > cap(yyv1581) {

			yyrg1581 := len(yyv1581) > 0
			yyv21581 := yyv1581
			yyrl1581, yyrt1581 = z.DecInferLen(yyl1581, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt1581 {
				if yyrl1581 <= cap(yyv1581) {
					yyv1581 = yyv1581[:yyrl1581]
				} else {
					yyv1581 = make([]ThirdPartyResourceData, yyrl1581)
				}
			} else {
				yyv1581 = make([]ThirdPartyResourceData, yyrl1581)
			}
			yyc1581 = true
			yyrr1581 = len(yyv1581)
			if yyrg1581 {
				copy(yyv1581, yyv21581)
			}
		} else if yyl1581 != len(yyv1581) {
			yyv1581 = yyv1581[:yyl1581]
			yyc1581 = true
		}
		yyj1581 := 0
		for ; yyj1581 < yyrr1581; yyj1581++ {
			yyh1581.ElemContainerState(yyj1581)
			if r.TryDecodeAsNil() {
				yyv1581[yyj1581] = ThirdPartyResourceData{}
			} else {
				yyv1582 := &yyv1581[yyj1581]
				yyv1582.CodecDecodeSelf(d)
			}

		}
		if yyrt1581 {
			for ; yyj1581 < yyl1581; yyj1581++ {
				yyv1581 = append(yyv1581, ThirdPartyResourceData{})
				yyh1581.ElemContainerState(yyj1581)
				if r.TryDecodeAsNil() {
					yyv1581[yyj1581] = ThirdPartyResourceData{}
				} else {
					yyv1583 := &yyv1581[yyj1581]
					yyv1583.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1581 := 0
		for ; !r.CheckBreak(); yyj1581++ {

			if yyj1581 >= len(yyv1581) {
				yyv1581 = append(yyv1581, ThirdPartyResourceData{}) // var yyz1581 ThirdPartyResourceData
				yyc1581 = true
			}
			yyh1581.ElemContainerState(yyj1581)
			if yyj1581 < len(yyv1581) {
				if r.TryDecodeAsNil() {
					yyv1581[yyj1581] = ThirdPartyResourceData{}
				} else {
					yyv1584 := &yyv1581[yyj1581]
					yyv1584.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1581 < len(yyv1581) {
			yyv1581 = yyv1581[:yyj1581]
			yyc1581 = true
		} else if yyj1581 == 0 && yyv1581 == nil {
			yyv1581 = []ThirdPartyResourceData{}
			yyc1581 = true
		}
	}
	yyh1581.End()
	if yyc1581 {
		*v = yyv1581
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1585 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1586 := &yyv1585
		yy1586.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1587 := *v
	yyh1587, yyl1587 := z.DecSliceHelperStart()
	var yyc1587 bool
	if yyl1587 == 0 {
		if yyv1587 == nil {
			yyv1587 = []Job{}
			yyc1587 = true
		} else if len(yyv1587) != 0 {
			yyv1587 = yyv1587[:0]
			yyc1587 = true
		}
	} else if yyl1587 > 0 {
		var yyrr1587, yyrl1587 int
		var yyrt1587 bool
		if yyl1587 > cap(yyv1587) {

			yyrg1587 := len(yyv1587) > 0
			yyv21587 := yyv1587
			yyrl1587, yyrt1587 = z.DecInferLen(yyl1587, z.DecBasicHandle().MaxInitLen, 632)
			if yyrt1587 {
				if yyrl1587 <= cap(yyv1587) {
					yyv1587 = yyv1587[:yyrl1587]
				} else {
					yyv1587 = make([]Job, yyrl1587)
				}
			} else {
				yyv1587 = make([]Job, yyrl1587)
			}
			yyc1587 = true
			yyrr1587 = len(yyv1587)
			if yyrg1587 {
				copy(yyv1587, yyv21587)
			}
		} else if yyl1587 != len(yyv1587) {
			yyv1587 = yyv1587[:yyl1587]
			yyc1587 = true
		}
		yyj1587 := 0
		for ; yyj1587 < yyrr1587; yyj1587++ {
			yyh1587.ElemContainerState(yyj1587)
			if r.TryDecodeAsNil() {
				yyv1587[yyj1587] = Job{}
			} else {
				yyv1588 := &yyv1587[yyj1587]
				yyv1588.CodecDecodeSelf(d)
			}

		}
		if yyrt1587 {
			for ; yyj1587 < yyl1587; yyj1587++ {
				yyv1587 = append(yyv1587, Job{})
				yyh1587.ElemContainerState(yyj1587)
				if r.TryDecodeAsNil() {
					yyv1587[yyj1587] = Job{}
				} else {
					yyv1589 := &yyv1587[yyj1587]
					yyv1589.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1587 := 0
		for ; !r.CheckBreak(); yyj1587++ {

			if yyj1587 >= len(yyv1587) {
				yyv1587 = append(yyv1587, Job{}) // var yyz1587 Job
				yyc1587 = true
			}
			yyh1587.ElemContainerState(yyj1587)
			if yyj1587 < len(yyv1587) {
				if r.TryDecodeAsNil() {
					yyv1587[yyj1587] = Job{}
				} else {
					yyv1590 := &yyv1587[yyj1587]
					yyv1590.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1587 < len(yyv1587) {
			yyv1587 = yyv1587[:yyj1587]
			yyc1587 = true
		} else if yyj1587 == 0 && yyv1587 == nil {
			yyv1587 = []Job{}
			yyc1587 = true
		}
	}
	yyh1587.End()
	if yyc1587 {
		*v = yyv1587
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1591 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1592 := &yyv1591
		yy1592.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1593 := *v
	yyh1593, yyl1593 := z.DecSliceHelperStart()
	var yyc1593 bool
	if yyl1593 == 0 {
		if yyv1593 == nil {
			yyv1593 = []JobCondition{}
			yyc1593 = true
		} else if len(yyv1593) != 0 {
			yyv1593 = yyv1593[:0]
			yyc1593 = true
		}
	} else if yyl1593 > 0 {
		var yyrr1593, yyrl1593 int
		var yyrt1593 bool
		if yyl1593 > cap(yyv1593) {

			yyrg1593 := len(yyv1593) > 0
			yyv21593 := yyv1593
			yyrl1593, yyrt1593 = z.DecInferLen(yyl1593, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1593 {
				if yyrl1593 <= cap(yyv1593) {
					yyv1593 = yyv1593[:yyrl1593]
				} else {
					yyv1593 = make([]JobCondition, yyrl1593)
				}
			} else {
				yyv1593 = make([]JobCondition, yyrl1593)
			}
			yyc1593 = true
			yyrr1593 = len(yyv1593)
			if yyrg1593 {
				copy(yyv1593, yyv21593)
			}
		} else if yyl1593 != len(yyv1593) {
			yyv1593 = yyv1593[:yyl1593]
			yyc1593 = true
		}
		yyj1593 := 0
		for ; yyj1593 < yyrr1593; yyj1593++ {
			yyh1593.ElemContainerState(yyj1593)
			if r.TryDecodeAsNil() {
				yyv1593[yyj1593] = JobCondition{}
			} else {
				yyv1594 := &yyv1593[yyj1593]
				yyv1594.CodecDecodeSelf(d)
			}

		}
		if yyrt1593 {
			for ; yyj1593 < yyl1593; yyj1593++ {
				yyv1593 = append(yyv1593, JobCondition{})
				yyh1593.ElemContainerState(yyj1593)
				if r.TryDecodeAsNil() {
					yyv1593[yyj1593] = JobCondition{}
				} else {
					yyv1595 := &yyv1593[yyj1593]
					yyv1595.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1593 := 0
		for ; !r.CheckBreak(); yyj1593++ {

			if yyj1593 >= len(yyv1593) {
				yyv1593 = append(yyv1593, JobCondition{}) // var yyz1593 JobCondition
				yyc1593 = true
			}
			yyh1593.ElemContainerState(yyj1593)
			if yyj1593 < len(yyv1593) {
				if r.TryDecodeAsNil() {
					yyv1593[yyj1593] = JobCondition{}
				} else {
					yyv1596 := &yyv1593[yyj1593]
					yyv1596.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1593 < len(yyv1593) {
			yyv1593 = yyv1593[:yyj1593]
			yyc1593 = true
		} else if yyj1593 == 0 && yyv1593 == nil {
			yyv1593 = []JobCondition{}
			yyc1593 = true
		}
	}
	yyh1593.End()
	if yyc1593 {
		*v = yyv1593
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1597 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1598 := &yyv1597
		yy1598.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1599 := *v
	yyh1599, yyl1599 := z.DecSliceHelperStart()
	var yyc1599 bool
	if yyl1599 == 0 {
		if yyv1599 == nil {
			yyv1599 = []Ingress{}
			yyc1599 = true
		} else if len(yyv1599) != 0 {
			yyv1599 = yyv1599[:0]
			yyc1599 = true
		}
	} else if yyl1599 > 0 {
		var yyrr1599, yyrl1599 int
		var yyrt1599 bool
		if yyl1599 > cap(yyv1599) {

			yyrg1599 := len(yyv1599) > 0
			yyv21599 := yyv1599
			yyrl1599, yyrt1599 = z.DecInferLen(yyl1599, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt1599 {
				if yyrl1599 <= cap(yyv1599) {
					yyv1599 = yyv1599[:yyrl1599]
				} else {
					yyv1599 = make([]Ingress, yyrl1599)
				}
			} else {
				yyv1599 = make([]Ingress, yyrl1599)
			}
			yyc1599 = true
			yyrr1599 = len(yyv1599)
			if yyrg1599 {
				copy(yyv1599, yyv21599)
			}
		} else if yyl1599 != len(yyv1599) {
			yyv1599 = yyv1599[:yyl1599]
			yyc1599 = true
		}
		yyj1599 := 0
		for ; yyj1599 < yyrr1599; yyj1599++ {
			yyh1599.ElemContainerState(yyj1599)
			if r.TryDecodeAsNil() {
				yyv1599[yyj1599] = Ingress{}
			} else {
				yyv1600 := &yyv1599[yyj1599]
				yyv1600.CodecDecodeSelf(d)
			}

		}
		if yyrt1599 {
			for ; yyj1599 < yyl1599; yyj1599++ {
				yyv1599 = append(yyv1599, Ingress{})
				yyh1599.ElemContainerState(yyj1599)
				if r.TryDecodeAsNil() {
					yyv1599[yyj1599] = Ingress{}
				} else {
					yyv1601 := &yyv1599[yyj1599]
					yyv1601.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1599 := 0
		for ; !r.CheckBreak(); yyj1599++ {

			if yyj1599 >= len(yyv1599) {
				yyv1599 = append(yyv1599, Ingress{}) // var yyz1599 Ingress
				yyc1599 = true
			}
			yyh1599.ElemContainerState(yyj1599)
			if yyj1599 < len(yyv1599) {
				if r.TryDecodeAsNil() {
					yyv1599[yyj1599] = Ingress{}
				} else {
					yyv1602 := &yyv1599[yyj1599]
					yyv1602.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1599 < len(yyv1599) {
			yyv1599 = yyv1599[:yyj1599]
			yyc1599 = true
		} else if yyj1599 == 0 && yyv1599 == nil {
			yyv1599 = []Ingress{}
			yyc1599 = true
		}
	}
	yyh1599.End()
	if yyc1599 {
		*v = yyv1599
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1603 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1604 := &yyv1603
		yy1604.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1605 := *v
	yyh1605, yyl1605 := z.DecSliceHelperStart()
	var yyc1605 bool
	if yyl1605 == 0 {
		if yyv1605 == nil {
			yyv1605 = []IngressRule{}
			yyc1605 = true
		} else if len(yyv1605) != 0 {
			yyv1605 = yyv1605[:0]
			yyc1605 = true
		}
	} else if yyl1605 > 0 {
		var yyrr1605, yyrl1605 int
		var yyrt1605 bool
		if yyl1605 > cap(yyv1605) {

			yyrg1605 := len(yyv1605) > 0
			yyv21605 := yyv1605
			yyrl1605, yyrt1605 = z.DecInferLen(yyl1605, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1605 {
				if yyrl1605 <= cap(yyv1605) {
					yyv1605 = yyv1605[:yyrl1605]
				} else {
					yyv1605 = make([]IngressRule, yyrl1605)
				}
			} else {
				yyv1605 = make([]IngressRule, yyrl1605)
			}
			yyc1605 = true
			yyrr1605 = len(yyv1605)
			if yyrg1605 {
				copy(yyv1605, yyv21605)
			}
		} else if yyl1605 != len(yyv1605) {
			yyv1605 = yyv1605[:yyl1605]
			yyc1605 = true
		}
		yyj1605 := 0
		for ; yyj1605 < yyrr1605; yyj1605++ {
			yyh1605.ElemContainerState(yyj1605)
			if r.TryDecodeAsNil() {
				yyv1605[yyj1605] = IngressRule{}
			} else {
				yyv1606 := &yyv1605[yyj1605]
				yyv1606.CodecDecodeSelf(d)
			}

		}
		if yyrt1605 {
			for ; yyj1605 < yyl1605; yyj1605++ {
				yyv1605 = append(yyv1605, IngressRule{})
				yyh1605.ElemContainerState(yyj1605)
				if r.TryDecodeAsNil() {
					yyv1605[yyj1605] = IngressRule{}
				} else {
					yyv1607 := &yyv1605[yyj1605]
					yyv1607.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1605 := 0
		for ; !r.CheckBreak(); yyj1605++ {

			if yyj1605 >= len(yyv1605) {
				yyv1605 = append(yyv1605, IngressRule{}) // var yyz1605 IngressRule
				yyc1605 = true
			}
			yyh1605.ElemContainerState(yyj1605)
			if yyj1605 < len(yyv1605) {
				if r.TryDecodeAsNil() {
					yyv1605[yyj1605] = IngressRule{}
				} else {
					yyv1608 := &yyv1605[yyj1605]
					yyv1608.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1605 < len(yyv1605) {
			yyv1605 = yyv1605[:yyj1605]
			yyc1605 = true
		} else if yyj1605 == 0 && yyv1605 == nil {
			yyv1605 = []IngressRule{}
			yyc1605 = true
		}
	}
	yyh1605.End()
	if yyc1605 {
		*v = yyv1605
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1609 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1610 := &yyv1609
		yy1610.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1611 := *v
	yyh1611, yyl1611 := z.DecSliceHelperStart()
	var yyc1611 bool
	if yyl1611 == 0 {
		if yyv1611 == nil {
			yyv1611 = []HTTPIngressPath{}
			yyc1611 = true
		} else if len(yyv1611) != 0 {
			yyv1611 = yyv1611[:0]
			yyc1611 = true
		}
	} else if yyl1611 > 0 {
		var yyrr1611, yyrl1611 int
		var yyrt1611 bool
		if yyl1611 > cap(yyv1611) {

			yyrg1611 := len(yyv1611) > 0
			yyv21611 := yyv1611
			yyrl1611, yyrt1611 = z.DecInferLen(yyl1611, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1611 {
				if yyrl1611 <= cap(yyv1611) {
					yyv1611 = yyv1611[:yyrl1611]
				} else {
					yyv1611 = make([]HTTPIngressPath, yyrl1611)
				}
			} else {
				yyv1611 = make([]HTTPIngressPath, yyrl1611)
			}
			yyc1611 = true
			yyrr1611 = len(yyv1611)
			if yyrg1611 {
				copy(yyv1611, yyv21611)
			}
		} else if yyl1611 != len(yyv1611) {
			yyv1611 = yyv1611[:yyl1611]
			yyc1611 = true
		}
		yyj1611 := 0
		for ; yyj1611 < yyrr1611; yyj1611++ {
			yyh1611.ElemContainerState(yyj1611)
			if r.TryDecodeAsNil() {
				yyv1611[yyj1611] = HTTPIngressPath{}
			} else {
				yyv1612 := &yyv1611[yyj1611]
				yyv1612.CodecDecodeSelf(d)
			}

		}
		if yyrt1611 {
			for ; yyj1611 < yyl1611; yyj1611++ {
				yyv1611 = append(yyv1611, HTTPIngressPath{})
				yyh1611.ElemContainerState(yyj1611)
				if r.TryDecodeAsNil() {
					yyv1611[yyj1611] = HTTPIngressPath{}
				} else {
					yyv1613 := &yyv1611[yyj1611]
					yyv1613.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1611 := 0
		for ; !r.CheckBreak(); yyj1611++ {

			if yyj1611 >= len(yyv1611) {
				yyv1611 = append(yyv1611, HTTPIngressPath{}) // var yyz1611 HTTPIngressPath
				yyc1611 = true
			}
			yyh1611.ElemContainerState(yyj1611)
			if yyj1611 < len(yyv1611) {
				if r.TryDecodeAsNil() {
					yyv1611[yyj1611] = HTTPIngressPath{}
				} else {
					yyv1614 := &yyv1611[yyj1611]
					yyv1614.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1611 < len(yyv1611) {
			yyv1611 = yyv1611[:yyj1611]
			yyc1611 = true
		} else if yyj1611 == 0 && yyv1611 == nil {
			yyv1611 = []HTTPIngressPath{}
			yyc1611 = true
		}
	}
	yyh1611.End()
	if yyc1611 {
		*v = yyv1611
	}
}

func (x codecSelfer1234) encSliceNodeUtilization(v []NodeUtilization, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1615 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1616 := &yyv1615
		yy1616.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeUtilization(v *[]NodeUtilization, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1617 := *v
	yyh1617, yyl1617 := z.DecSliceHelperStart()
	var yyc1617 bool
	if yyl1617 == 0 {
		if yyv1617 == nil {
			yyv1617 = []NodeUtilization{}
			yyc1617 = true
		} else if len(yyv1617) != 0 {
			yyv1617 = yyv1617[:0]
			yyc1617 = true
		}
	} else if yyl1617 > 0 {
		var yyrr1617, yyrl1617 int
		var yyrt1617 bool
		if yyl1617 > cap(yyv1617) {

			yyrg1617 := len(yyv1617) > 0
			yyv21617 := yyv1617
			yyrl1617, yyrt1617 = z.DecInferLen(yyl1617, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1617 {
				if yyrl1617 <= cap(yyv1617) {
					yyv1617 = yyv1617[:yyrl1617]
				} else {
					yyv1617 = make([]NodeUtilization, yyrl1617)
				}
			} else {
				yyv1617 = make([]NodeUtilization, yyrl1617)
			}
			yyc1617 = true
			yyrr1617 = len(yyv1617)
			if yyrg1617 {
				copy(yyv1617, yyv21617)
			}
		} else if yyl1617 != len(yyv1617) {
			yyv1617 = yyv1617[:yyl1617]
			yyc1617 = true
		}
		yyj1617 := 0
		for ; yyj1617 < yyrr1617; yyj1617++ {
			yyh1617.ElemContainerState(yyj1617)
			if r.TryDecodeAsNil() {
				yyv1617[yyj1617] = NodeUtilization{}
			} else {
				yyv1618 := &yyv1617[yyj1617]
				yyv1618.CodecDecodeSelf(d)
			}

		}
		if yyrt1617 {
			for ; yyj1617 < yyl1617; yyj1617++ {
				yyv1617 = append(yyv1617, NodeUtilization{})
				yyh1617.ElemContainerState(yyj1617)
				if r.TryDecodeAsNil() {
					yyv1617[yyj1617] = NodeUtilization{}
				} else {
					yyv1619 := &yyv1617[yyj1617]
					yyv1619.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1617 := 0
		for ; !r.CheckBreak(); yyj1617++ {

			if yyj1617 >= len(yyv1617) {
				yyv1617 = append(yyv1617, NodeUtilization{}) // var yyz1617 NodeUtilization
				yyc1617 = true
			}
			yyh1617.ElemContainerState(yyj1617)
			if yyj1617 < len(yyv1617) {
				if r.TryDecodeAsNil() {
					yyv1617[yyj1617] = NodeUtilization{}
				} else {
					yyv1620 := &yyv1617[yyj1617]
					yyv1620.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1617 < len(yyv1617) {
			yyv1617 = yyv1617[:yyj1617]
			yyc1617 = true
		} else if yyj1617 == 0 && yyv1617 == nil {
			yyv1617 = []NodeUtilization{}
			yyc1617 = true
		}
	}
	yyh1617.End()
	if yyc1617 {
		*v = yyv1617
	}
}

func (x codecSelfer1234) encSliceClusterAutoscaler(v []ClusterAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1621 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1622 := &yyv1621
		yy1622.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterAutoscaler(v *[]ClusterAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1623 := *v
	yyh1623, yyl1623 := z.DecSliceHelperStart()
	var yyc1623 bool
	if yyl1623 == 0 {
		if yyv1623 == nil {
			yyv1623 = []ClusterAutoscaler{}
			yyc1623 = true
		} else if len(yyv1623) != 0 {
			yyv1623 = yyv1623[:0]
			yyc1623 = true
		}
	} else if yyl1623 > 0 {
		var yyrr1623, yyrl1623 int
		var yyrt1623 bool
		if yyl1623 > cap(yyv1623) {

			yyrg1623 := len(yyv1623) > 0
			yyv21623 := yyv1623
			yyrl1623, yyrt1623 = z.DecInferLen(yyl1623, z.DecBasicHandle().MaxInitLen, 224)
			if yyrt1623 {
				if yyrl1623 <= cap(yyv1623) {
					yyv1623 = yyv1623[:yyrl1623]
				} else {
					yyv1623 = make([]ClusterAutoscaler, yyrl1623)
				}
			} else {
				yyv1623 = make([]ClusterAutoscaler, yyrl1623)
			}
			yyc1623 = true
			yyrr1623 = len(yyv1623)
			if yyrg1623 {
				copy(yyv1623, yyv21623)
			}
		} else if yyl1623 != len(yyv1623) {
			yyv1623 = yyv1623[:yyl1623]
			yyc1623 = true
		}
		yyj1623 := 0
		for ; yyj1623 < yyrr1623; yyj1623++ {
			yyh1623.ElemContainerState(yyj1623)
			if r.TryDecodeAsNil() {
				yyv1623[yyj1623] = ClusterAutoscaler{}
			} else {
				yyv1624 := &yyv1623[yyj1623]
				yyv1624.CodecDecodeSelf(d)
			}

		}
		if yyrt1623 {
			for ; yyj1623 < yyl1623; yyj1623++ {
				yyv1623 = append(yyv1623, ClusterAutoscaler{})
				yyh1623.ElemContainerState(yyj1623)
				if r.TryDecodeAsNil() {
					yyv1623[yyj1623] = ClusterAutoscaler{}
				} else {
					yyv1625 := &yyv1623[yyj1623]
					yyv1625.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1623 := 0
		for ; !r.CheckBreak(); yyj1623++ {

			if yyj1623 >= len(yyv1623) {
				yyv1623 = append(yyv1623, ClusterAutoscaler{}) // var yyz1623 ClusterAutoscaler
				yyc1623 = true
			}
			yyh1623.ElemContainerState(yyj1623)
			if yyj1623 < len(yyv1623) {
				if r.TryDecodeAsNil() {
					yyv1623[yyj1623] = ClusterAutoscaler{}
				} else {
					yyv1626 := &yyv1623[yyj1623]
					yyv1626.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1623 < len(yyv1623) {
			yyv1623 = yyv1623[:yyj1623]
			yyc1623 = true
		} else if yyj1623 == 0 && yyv1623 == nil {
			yyv1623 = []ClusterAutoscaler{}
			yyc1623 = true
		}
	}
	yyh1623.End()
	if yyc1623 {
		*v = yyv1623
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1627 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1628 := &yyv1627
		yy1628.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1629 := *v
	yyh1629, yyl1629 := z.DecSliceHelperStart()
	var yyc1629 bool
	if yyl1629 == 0 {
		if yyv1629 == nil {
			yyv1629 = []LabelSelectorRequirement{}
			yyc1629 = true
		} else if len(yyv1629) != 0 {
			yyv1629 = yyv1629[:0]
			yyc1629 = true
		}
	} else if yyl1629 > 0 {
		var yyrr1629, yyrl1629 int
		var yyrt1629 bool
		if yyl1629 > cap(yyv1629) {

			yyrg1629 := len(yyv1629) > 0
			yyv21629 := yyv1629
			yyrl1629, yyrt1629 = z.DecInferLen(yyl1629, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1629 {
				if yyrl1629 <= cap(yyv1629) {
					yyv1629 = yyv1629[:yyrl1629]
				} else {
					yyv1629 = make([]LabelSelectorRequirement, yyrl1629)
				}
			} else {
				yyv1629 = make([]LabelSelectorRequirement, yyrl1629)
			}
			yyc1629 = true
			yyrr1629 = len(yyv1629)
			if yyrg1629 {
				copy(yyv1629, yyv21629)
			}
		} else if yyl1629 != len(yyv1629) {
			yyv1629 = yyv1629[:yyl1629]
			yyc1629 = true
		}
		yyj1629 := 0
		for ; yyj1629 < yyrr1629; yyj1629++ {
			yyh1629.ElemContainerState(yyj1629)
			if r.TryDecodeAsNil() {
				yyv1629[yyj1629] = LabelSelectorRequirement{}
			} else {
				yyv1630 := &yyv1629[yyj1629]
				yyv1630.CodecDecodeSelf(d)
			}

		}
		if yyrt1629 {
			for ; yyj1629 < yyl1629; yyj1629++ {
				yyv1629 = append(yyv1629, LabelSelectorRequirement{})
				yyh1629.ElemContainerState(yyj1629)
				if r.TryDecodeAsNil() {
					yyv1629[yyj1629] = LabelSelectorRequirement{}
				} else {
					yyv1631 := &yyv1629[yyj1629]
					yyv1631.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1629 := 0
		for ; !r.CheckBreak(); yyj1629++ {

			if yyj1629 >= len(yyv1629) {
				yyv1629 = append(yyv1629, LabelSelectorRequirement{}) // var yyz1629 LabelSelectorRequirement
				yyc1629 = true
			}
			yyh1629.ElemContainerState(yyj1629)
			if yyj1629 < len(yyv1629) {
				if r.TryDecodeAsNil() {
					yyv1629[yyj1629] = LabelSelectorRequirement{}
				} else {
					yyv1632 := &yyv1629[yyj1629]
					yyv1632.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1629 < len(yyv1629) {
			yyv1629 = yyv1629[:yyj1629]
			yyc1629 = true
		} else if yyj1629 == 0 && yyv1629 == nil {
			yyv1629 = []LabelSelectorRequirement{}
			yyc1629 = true
		}
	}
	yyh1629.End()
	if yyc1629 {
		*v = yyv1629
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1633 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1634 := &yyv1633
		yy1634.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1635 := *v
	yyh1635, yyl1635 := z.DecSliceHelperStart()
	var yyc1635 bool
	if yyl1635 == 0 {
		if yyv1635 == nil {
			yyv1635 = []ReplicaSet{}
			yyc1635 = true
		} else if len(yyv1635) != 0 {
			yyv1635 = yyv1635[:0]
			yyc1635 = true
		}
	} else if yyl1635 > 0 {
		var yyrr1635, yyrl1635 int
		var yyrt1635 bool
		if yyl1635 > cap(yyv1635) {

			yyrg1635 := len(yyv1635) > 0
			yyv21635 := yyv1635
			yyrl1635, yyrt1635 = z.DecInferLen(yyl1635, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt1635 {
				if yyrl1635 <= cap(yyv1635) {
					yyv1635 = yyv1635[:yyrl1635]
				} else {
					yyv1635 = make([]ReplicaSet, yyrl1635)
				}
			} else {
				yyv1635 = make([]ReplicaSet, yyrl1635)
			}
			yyc1635 = true
			yyrr1635 = len(yyv1635)
			if yyrg1635 {
				copy(yyv1635, yyv21635)
			}
		} else if yyl1635 != len(yyv1635) {
			yyv1635 = yyv1635[:yyl1635]
			yyc1635 = true
		}
		yyj1635 := 0
		for ; yyj1635 < yyrr1635; yyj1635++ {
			yyh1635.ElemContainerState(yyj1635)
			if r.TryDecodeAsNil() {
				yyv1635[yyj1635] = ReplicaSet{}
			} else {
				yyv1636 := &yyv1635[yyj1635]
				yyv1636.CodecDecodeSelf(d)
			}

		}
		if yyrt1635 {
			for ; yyj1635 < yyl1635; yyj1635++ {
				yyv1635 = append(yyv1635, ReplicaSet{})
				yyh1635.ElemContainerState(yyj1635)
				if r.TryDecodeAsNil() {
					yyv1635[yyj1635] = ReplicaSet{}
				} else {
					yyv1637 := &yyv1635[yyj1635]
					yyv1637.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1635 := 0
		for ; !r.CheckBreak(); yyj1635++ {

			if yyj1635 >= len(yyv1635) {
				yyv1635 = append(yyv1635, ReplicaSet{}) // var yyz1635 ReplicaSet
				yyc1635 = true
			}
			yyh1635.ElemContainerState(yyj1635)
			if yyj1635 < len(yyv1635) {
				if r.TryDecodeAsNil() {
					yyv1635[yyj1635] = ReplicaSet{}
				} else {
					yyv1638 := &yyv1635[yyj1635]
					yyv1638.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1635 < len(yyv1635) {
			yyv1635 = yyv1635[:yyj1635]
			yyc1635 = true
		} else if yyj1635 == 0 && yyv1635 == nil {
			yyv1635 = []ReplicaSet{}
			yyc1635 = true
		}
	}
	yyh1635.End()
	if yyc1635 {
		*v = yyv1635
	}
}
