// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *Configuration) DeepCopyInto(out *Configuration) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	if in.LimitedResources != nil {
		in, out := &in.LimitedResources, &out.LimitedResources
		*out = make([]LimitedResource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new Configuration.
func (x *Configuration) DeepCopy() *Configuration {
	if x == nil {
		return nil
	}
	out := new(Configuration)
	x.DeepCopyInto(out)
	return out
}

// DeepCopyObject will perform a deep copy of the receiver, creating a new object.
func (x *Configuration) DeepCopyObject() runtime.Object {
	if c := x.DeepCopy(); c != nil {
		return c
	} else {
		return nil
	}
}

// DeepCopyInto will perform a deep copy of the receiver, writing to out. in must be non-nil.
func (in *LimitedResource) DeepCopyInto(out *LimitedResource) {
	*out = *in
	if in.MatchContains != nil {
		in, out := &in.MatchContains, &out.MatchContains
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy will perform a deep copy of the receiver, creating a new LimitedResource.
func (x *LimitedResource) DeepCopy() *LimitedResource {
	if x == nil {
		return nil
	}
	out := new(LimitedResource)
	x.DeepCopyInto(out)
	return out
}
