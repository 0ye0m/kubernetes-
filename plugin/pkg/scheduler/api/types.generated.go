/*
Copyright 2014 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_api "k8s.io/kubernetes/pkg/api"
	"reflect"
	"runtime"
)

const (
	codecSelferC_UTF81234         = 1
	codecSelferC_RAW1234          = 0
	codecSelverValueTypeArray1234 = 10
	codecSelverValueTypeMap1234   = 9
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 2 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			2, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_api.TypeMeta
		_ = v0
	}
}

func (x *Policy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyfirst2 bool
			var yyq2 [4]bool
			_, _, _, _ = yysep2, yyfirst2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				var yynn2 int = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
			}
			if yyr2 || yy2arr2 {
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					yyfirst2 = true
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					if yysep2 {
						r.EncodeMapKVSeparator()
					}
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yysep2 {
					r.EncodeArrayEntrySeparator()
				}
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					if yyfirst2 {
						r.EncodeMapEntrySeparator()
					} else {
						yyfirst2 = true
					}
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					if yysep2 {
						r.EncodeMapKVSeparator()
					}
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yysep2 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Predicates == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSlicePredicatePolicy(([]PredicatePolicy)(x.Predicates), e)
					}
				}
			} else {
				if yyfirst2 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("predicates"))
				if yysep2 {
					r.EncodeMapKVSeparator()
				}
				if x.Predicates == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSlicePredicatePolicy(([]PredicatePolicy)(x.Predicates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				if yysep2 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Priorities == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePriorityPolicy(([]PriorityPolicy)(x.Priorities), e)
					}
				}
			} else {
				if yyfirst2 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst2 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("priorities"))
				if yysep2 {
					r.EncodeMapKVSeparator()
				}
				if x.Priorities == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePriorityPolicy(([]PriorityPolicy)(x.Priorities), e)
					}
				}
			}
			if yysep2 {
				if yyr2 || yy2arr2 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *Policy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym15 := z.DecBinary()
	_ = yym15
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl16 := r.ReadMapStart()
			if yyl16 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl16, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl16 := r.ReadArrayStart()
			if yyl16 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl16, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Policy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys17Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys17Slc
	var yyhl17 bool = l >= 0
	for yyj17 := 0; ; yyj17++ {
		if yyhl17 {
			if yyj17 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj17 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys17Slc = r.DecodeBytes(yys17Slc, true, true)
		yys17 := string(yys17Slc)
		if !yyhl17 {
			r.ReadMapKVSeparator()
		}
		switch yys17 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "predicates":
			if r.TryDecodeAsNil() {
				x.Predicates = nil
			} else {
				yyv20 := &x.Predicates
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					h.decSlicePredicatePolicy((*[]PredicatePolicy)(yyv20), d)
				}
			}
		case "priorities":
			if r.TryDecodeAsNil() {
				x.Priorities = nil
			} else {
				yyv22 := &x.Priorities
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					h.decSlicePriorityPolicy((*[]PriorityPolicy)(yyv22), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys17)
		} // end switch yys17
	} // end for yyj17
	if !yyhl17 {
		r.ReadMapEnd()
	}
}

func (x *Policy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Predicates = nil
	} else {
		yyv27 := &x.Predicates
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			h.decSlicePredicatePolicy((*[]PredicatePolicy)(yyv27), d)
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Priorities = nil
	} else {
		yyv29 := &x.Priorities
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			h.decSlicePriorityPolicy((*[]PriorityPolicy)(yyv29), d)
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		if yyj24 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PredicatePolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym31 := z.EncBinary()
		_ = yym31
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep32 := !z.EncBinary()
			yy2arr32 := z.EncBasicHandle().StructToArray
			var yyfirst32 bool
			var yyq32 [2]bool
			_, _, _, _ = yysep32, yyfirst32, yyq32, yy2arr32
			const yyr32 bool = false
			if yyr32 || yy2arr32 {
				r.EncodeArrayStart(2)
			} else {
				var yynn32 int = 2
				for _, b := range yyq32 {
					if b {
						yynn32++
					}
				}
				r.EncodeMapStart(yynn32)
			}
			if yyr32 || yy2arr32 {
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst32 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep32 {
					r.EncodeMapKVSeparator()
				}
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr32 || yy2arr32 {
				if yysep32 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Argument == nil {
					r.EncodeNil()
				} else {
					x.Argument.CodecEncodeSelf(e)
				}
			} else {
				if yyfirst32 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst32 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("argument"))
				if yysep32 {
					r.EncodeMapKVSeparator()
				}
				if x.Argument == nil {
					r.EncodeNil()
				} else {
					x.Argument.CodecEncodeSelf(e)
				}
			}
			if yysep32 {
				if yyr32 || yy2arr32 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PredicatePolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym37 := z.DecBinary()
	_ = yym37
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl38 := r.ReadMapStart()
			if yyl38 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl38, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl38 := r.ReadArrayStart()
			if yyl38 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl38, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PredicatePolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys39Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys39Slc
	var yyhl39 bool = l >= 0
	for yyj39 := 0; ; yyj39++ {
		if yyhl39 {
			if yyj39 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj39 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys39Slc = r.DecodeBytes(yys39Slc, true, true)
		yys39 := string(yys39Slc)
		if !yyhl39 {
			r.ReadMapKVSeparator()
		}
		switch yys39 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "argument":
			if r.TryDecodeAsNil() {
				if x.Argument != nil {
					x.Argument = nil
				}
			} else {
				if x.Argument == nil {
					x.Argument = new(PredicateArgument)
				}
				x.Argument.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys39)
		} // end switch yys39
	} // end for yyj39
	if !yyhl39 {
		r.ReadMapEnd()
	}
}

func (x *PredicatePolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj42 int
	var yyb42 bool
	var yyhl42 bool = l >= 0
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Argument != nil {
			x.Argument = nil
		}
	} else {
		if x.Argument == nil {
			x.Argument = new(PredicateArgument)
		}
		x.Argument.CodecDecodeSelf(d)
	}
	for {
		yyj42++
		if yyhl42 {
			yyb42 = yyj42 > l
		} else {
			yyb42 = r.CheckBreak()
		}
		if yyb42 {
			break
		}
		if yyj42 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj42-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PriorityPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym45 := z.EncBinary()
		_ = yym45
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep46 := !z.EncBinary()
			yy2arr46 := z.EncBasicHandle().StructToArray
			var yyfirst46 bool
			var yyq46 [3]bool
			_, _, _, _ = yysep46, yyfirst46, yyq46, yy2arr46
			const yyr46 bool = false
			if yyr46 || yy2arr46 {
				r.EncodeArrayStart(3)
			} else {
				var yynn46 int = 3
				for _, b := range yyq46 {
					if b {
						yynn46++
					}
				}
				r.EncodeMapStart(yynn46)
			}
			if yyr46 || yy2arr46 {
				yym48 := z.EncBinary()
				_ = yym48
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				yyfirst46 = true
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				if yysep46 {
					r.EncodeMapKVSeparator()
				}
				yym49 := z.EncBinary()
				_ = yym49
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr46 || yy2arr46 {
				if yysep46 {
					r.EncodeArrayEntrySeparator()
				}
				yym51 := z.EncBinary()
				_ = yym51
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				if yyfirst46 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst46 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				if yysep46 {
					r.EncodeMapKVSeparator()
				}
				yym52 := z.EncBinary()
				_ = yym52
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr46 || yy2arr46 {
				if yysep46 {
					r.EncodeArrayEntrySeparator()
				}
				if x.Argument == nil {
					r.EncodeNil()
				} else {
					x.Argument.CodecEncodeSelf(e)
				}
			} else {
				if yyfirst46 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst46 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("argument"))
				if yysep46 {
					r.EncodeMapKVSeparator()
				}
				if x.Argument == nil {
					r.EncodeNil()
				} else {
					x.Argument.CodecEncodeSelf(e)
				}
			}
			if yysep46 {
				if yyr46 || yy2arr46 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PriorityPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym54 := z.DecBinary()
	_ = yym54
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl55 := r.ReadMapStart()
			if yyl55 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl55, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl55 := r.ReadArrayStart()
			if yyl55 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl55, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PriorityPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys56Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys56Slc
	var yyhl56 bool = l >= 0
	for yyj56 := 0; ; yyj56++ {
		if yyhl56 {
			if yyj56 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj56 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys56Slc = r.DecodeBytes(yys56Slc, true, true)
		yys56 := string(yys56Slc)
		if !yyhl56 {
			r.ReadMapKVSeparator()
		}
		switch yys56 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "argument":
			if r.TryDecodeAsNil() {
				if x.Argument != nil {
					x.Argument = nil
				}
			} else {
				if x.Argument == nil {
					x.Argument = new(PriorityArgument)
				}
				x.Argument.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys56)
		} // end switch yys56
	} // end for yyj56
	if !yyhl56 {
		r.ReadMapEnd()
	}
}

func (x *PriorityPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj60 int
	var yyb60 bool
	var yyhl60 bool = l >= 0
	yyj60++
	if yyhl60 {
		yyb60 = yyj60 > l
	} else {
		yyb60 = r.CheckBreak()
	}
	if yyb60 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj60++
	if yyhl60 {
		yyb60 = yyj60 > l
	} else {
		yyb60 = r.CheckBreak()
	}
	if yyb60 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj60++
	if yyhl60 {
		yyb60 = yyj60 > l
	} else {
		yyb60 = r.CheckBreak()
	}
	if yyb60 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.Argument != nil {
			x.Argument = nil
		}
	} else {
		if x.Argument == nil {
			x.Argument = new(PriorityArgument)
		}
		x.Argument.CodecDecodeSelf(d)
	}
	for {
		yyj60++
		if yyhl60 {
			yyb60 = yyj60 > l
		} else {
			yyb60 = r.CheckBreak()
		}
		if yyb60 {
			break
		}
		if yyj60 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj60-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PredicateArgument) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym64 := z.EncBinary()
		_ = yym64
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep65 := !z.EncBinary()
			yy2arr65 := z.EncBasicHandle().StructToArray
			var yyfirst65 bool
			var yyq65 [2]bool
			_, _, _, _ = yysep65, yyfirst65, yyq65, yy2arr65
			const yyr65 bool = false
			if yyr65 || yy2arr65 {
				r.EncodeArrayStart(2)
			} else {
				var yynn65 int = 2
				for _, b := range yyq65 {
					if b {
						yynn65++
					}
				}
				r.EncodeMapStart(yynn65)
			}
			if yyr65 || yy2arr65 {
				if x.ServiceAffinity == nil {
					r.EncodeNil()
				} else {
					x.ServiceAffinity.CodecEncodeSelf(e)
				}
			} else {
				yyfirst65 = true
				r.EncodeString(codecSelferC_UTF81234, string("serviceAffinity"))
				if yysep65 {
					r.EncodeMapKVSeparator()
				}
				if x.ServiceAffinity == nil {
					r.EncodeNil()
				} else {
					x.ServiceAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr65 || yy2arr65 {
				if yysep65 {
					r.EncodeArrayEntrySeparator()
				}
				if x.LabelsPresence == nil {
					r.EncodeNil()
				} else {
					x.LabelsPresence.CodecEncodeSelf(e)
				}
			} else {
				if yyfirst65 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst65 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("labelsPresence"))
				if yysep65 {
					r.EncodeMapKVSeparator()
				}
				if x.LabelsPresence == nil {
					r.EncodeNil()
				} else {
					x.LabelsPresence.CodecEncodeSelf(e)
				}
			}
			if yysep65 {
				if yyr65 || yy2arr65 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PredicateArgument) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym68 := z.DecBinary()
	_ = yym68
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl69 := r.ReadMapStart()
			if yyl69 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl69, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl69 := r.ReadArrayStart()
			if yyl69 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl69, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PredicateArgument) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys70Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys70Slc
	var yyhl70 bool = l >= 0
	for yyj70 := 0; ; yyj70++ {
		if yyhl70 {
			if yyj70 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj70 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys70Slc = r.DecodeBytes(yys70Slc, true, true)
		yys70 := string(yys70Slc)
		if !yyhl70 {
			r.ReadMapKVSeparator()
		}
		switch yys70 {
		case "serviceAffinity":
			if r.TryDecodeAsNil() {
				if x.ServiceAffinity != nil {
					x.ServiceAffinity = nil
				}
			} else {
				if x.ServiceAffinity == nil {
					x.ServiceAffinity = new(ServiceAffinity)
				}
				x.ServiceAffinity.CodecDecodeSelf(d)
			}
		case "labelsPresence":
			if r.TryDecodeAsNil() {
				if x.LabelsPresence != nil {
					x.LabelsPresence = nil
				}
			} else {
				if x.LabelsPresence == nil {
					x.LabelsPresence = new(LabelsPresence)
				}
				x.LabelsPresence.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys70)
		} // end switch yys70
	} // end for yyj70
	if !yyhl70 {
		r.ReadMapEnd()
	}
}

func (x *PredicateArgument) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ServiceAffinity != nil {
			x.ServiceAffinity = nil
		}
	} else {
		if x.ServiceAffinity == nil {
			x.ServiceAffinity = new(ServiceAffinity)
		}
		x.ServiceAffinity.CodecDecodeSelf(d)
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.LabelsPresence != nil {
			x.LabelsPresence = nil
		}
	} else {
		if x.LabelsPresence == nil {
			x.LabelsPresence = new(LabelsPresence)
		}
		x.LabelsPresence.CodecDecodeSelf(d)
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		if yyj73 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PriorityArgument) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym76 := z.EncBinary()
		_ = yym76
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep77 := !z.EncBinary()
			yy2arr77 := z.EncBasicHandle().StructToArray
			var yyfirst77 bool
			var yyq77 [2]bool
			_, _, _, _ = yysep77, yyfirst77, yyq77, yy2arr77
			const yyr77 bool = false
			if yyr77 || yy2arr77 {
				r.EncodeArrayStart(2)
			} else {
				var yynn77 int = 2
				for _, b := range yyq77 {
					if b {
						yynn77++
					}
				}
				r.EncodeMapStart(yynn77)
			}
			if yyr77 || yy2arr77 {
				if x.ServiceAntiAffinity == nil {
					r.EncodeNil()
				} else {
					x.ServiceAntiAffinity.CodecEncodeSelf(e)
				}
			} else {
				yyfirst77 = true
				r.EncodeString(codecSelferC_UTF81234, string("serviceAntiAffinity"))
				if yysep77 {
					r.EncodeMapKVSeparator()
				}
				if x.ServiceAntiAffinity == nil {
					r.EncodeNil()
				} else {
					x.ServiceAntiAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr77 || yy2arr77 {
				if yysep77 {
					r.EncodeArrayEntrySeparator()
				}
				if x.LabelPreference == nil {
					r.EncodeNil()
				} else {
					x.LabelPreference.CodecEncodeSelf(e)
				}
			} else {
				if yyfirst77 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst77 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("labelPreference"))
				if yysep77 {
					r.EncodeMapKVSeparator()
				}
				if x.LabelPreference == nil {
					r.EncodeNil()
				} else {
					x.LabelPreference.CodecEncodeSelf(e)
				}
			}
			if yysep77 {
				if yyr77 || yy2arr77 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *PriorityArgument) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym80 := z.DecBinary()
	_ = yym80
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl81 := r.ReadMapStart()
			if yyl81 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl81, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl81 := r.ReadArrayStart()
			if yyl81 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl81, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PriorityArgument) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys82Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys82Slc
	var yyhl82 bool = l >= 0
	for yyj82 := 0; ; yyj82++ {
		if yyhl82 {
			if yyj82 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj82 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys82Slc = r.DecodeBytes(yys82Slc, true, true)
		yys82 := string(yys82Slc)
		if !yyhl82 {
			r.ReadMapKVSeparator()
		}
		switch yys82 {
		case "serviceAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.ServiceAntiAffinity != nil {
					x.ServiceAntiAffinity = nil
				}
			} else {
				if x.ServiceAntiAffinity == nil {
					x.ServiceAntiAffinity = new(ServiceAntiAffinity)
				}
				x.ServiceAntiAffinity.CodecDecodeSelf(d)
			}
		case "labelPreference":
			if r.TryDecodeAsNil() {
				if x.LabelPreference != nil {
					x.LabelPreference = nil
				}
			} else {
				if x.LabelPreference == nil {
					x.LabelPreference = new(LabelPreference)
				}
				x.LabelPreference.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys82)
		} // end switch yys82
	} // end for yyj82
	if !yyhl82 {
		r.ReadMapEnd()
	}
}

func (x *PriorityArgument) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj85 int
	var yyb85 bool
	var yyhl85 bool = l >= 0
	yyj85++
	if yyhl85 {
		yyb85 = yyj85 > l
	} else {
		yyb85 = r.CheckBreak()
	}
	if yyb85 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		if x.ServiceAntiAffinity != nil {
			x.ServiceAntiAffinity = nil
		}
	} else {
		if x.ServiceAntiAffinity == nil {
			x.ServiceAntiAffinity = new(ServiceAntiAffinity)
		}
		x.ServiceAntiAffinity.CodecDecodeSelf(d)
	}
	yyj85++
	if yyhl85 {
		yyb85 = yyj85 > l
	} else {
		yyb85 = r.CheckBreak()
	}
	if yyb85 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		if x.LabelPreference != nil {
			x.LabelPreference = nil
		}
	} else {
		if x.LabelPreference == nil {
			x.LabelPreference = new(LabelPreference)
		}
		x.LabelPreference.CodecDecodeSelf(d)
	}
	for {
		yyj85++
		if yyhl85 {
			yyb85 = yyj85 > l
		} else {
			yyb85 = r.CheckBreak()
		}
		if yyb85 {
			break
		}
		if yyj85 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj85-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym88 := z.EncBinary()
		_ = yym88
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep89 := !z.EncBinary()
			yy2arr89 := z.EncBasicHandle().StructToArray
			var yyfirst89 bool
			var yyq89 [1]bool
			_, _, _, _ = yysep89, yyfirst89, yyq89, yy2arr89
			const yyr89 bool = false
			if yyr89 || yy2arr89 {
				r.EncodeArrayStart(1)
			} else {
				var yynn89 int = 1
				for _, b := range yyq89 {
					if b {
						yynn89++
					}
				}
				r.EncodeMapStart(yynn89)
			}
			if yyr89 || yy2arr89 {
				if x.Labels == nil {
					r.EncodeNil()
				} else {
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						z.F.EncSliceStringV(x.Labels, false, e)
					}
				}
			} else {
				yyfirst89 = true
				r.EncodeString(codecSelferC_UTF81234, string("labels"))
				if yysep89 {
					r.EncodeMapKVSeparator()
				}
				if x.Labels == nil {
					r.EncodeNil()
				} else {
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						z.F.EncSliceStringV(x.Labels, false, e)
					}
				}
			}
			if yysep89 {
				if yyr89 || yy2arr89 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym93 := z.DecBinary()
	_ = yym93
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl94 := r.ReadMapStart()
			if yyl94 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl94, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl94 := r.ReadArrayStart()
			if yyl94 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl94, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys95Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys95Slc
	var yyhl95 bool = l >= 0
	for yyj95 := 0; ; yyj95++ {
		if yyhl95 {
			if yyj95 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj95 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys95Slc = r.DecodeBytes(yys95Slc, true, true)
		yys95 := string(yys95Slc)
		if !yyhl95 {
			r.ReadMapKVSeparator()
		}
		switch yys95 {
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv96 := &x.Labels
				yym97 := z.DecBinary()
				_ = yym97
				if false {
				} else {
					z.F.DecSliceStringX(yyv96, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys95)
		} // end switch yys95
	} // end for yyj95
	if !yyhl95 {
		r.ReadMapEnd()
	}
}

func (x *ServiceAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj98 int
	var yyb98 bool
	var yyhl98 bool = l >= 0
	yyj98++
	if yyhl98 {
		yyb98 = yyj98 > l
	} else {
		yyb98 = r.CheckBreak()
	}
	if yyb98 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv99 := &x.Labels
		yym100 := z.DecBinary()
		_ = yym100
		if false {
		} else {
			z.F.DecSliceStringX(yyv99, false, d)
		}
	}
	for {
		yyj98++
		if yyhl98 {
			yyb98 = yyj98 > l
		} else {
			yyb98 = r.CheckBreak()
		}
		if yyb98 {
			break
		}
		if yyj98 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj98-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LabelsPresence) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym101 := z.EncBinary()
		_ = yym101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep102 := !z.EncBinary()
			yy2arr102 := z.EncBasicHandle().StructToArray
			var yyfirst102 bool
			var yyq102 [2]bool
			_, _, _, _ = yysep102, yyfirst102, yyq102, yy2arr102
			const yyr102 bool = false
			if yyr102 || yy2arr102 {
				r.EncodeArrayStart(2)
			} else {
				var yynn102 int = 2
				for _, b := range yyq102 {
					if b {
						yynn102++
					}
				}
				r.EncodeMapStart(yynn102)
			}
			if yyr102 || yy2arr102 {
				if x.Labels == nil {
					r.EncodeNil()
				} else {
					yym104 := z.EncBinary()
					_ = yym104
					if false {
					} else {
						z.F.EncSliceStringV(x.Labels, false, e)
					}
				}
			} else {
				yyfirst102 = true
				r.EncodeString(codecSelferC_UTF81234, string("labels"))
				if yysep102 {
					r.EncodeMapKVSeparator()
				}
				if x.Labels == nil {
					r.EncodeNil()
				} else {
					yym105 := z.EncBinary()
					_ = yym105
					if false {
					} else {
						z.F.EncSliceStringV(x.Labels, false, e)
					}
				}
			}
			if yyr102 || yy2arr102 {
				if yysep102 {
					r.EncodeArrayEntrySeparator()
				}
				yym107 := z.EncBinary()
				_ = yym107
				if false {
				} else {
					r.EncodeBool(bool(x.Presence))
				}
			} else {
				if yyfirst102 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst102 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("presence"))
				if yysep102 {
					r.EncodeMapKVSeparator()
				}
				yym108 := z.EncBinary()
				_ = yym108
				if false {
				} else {
					r.EncodeBool(bool(x.Presence))
				}
			}
			if yysep102 {
				if yyr102 || yy2arr102 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LabelsPresence) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym109 := z.DecBinary()
	_ = yym109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl110 := r.ReadMapStart()
			if yyl110 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl110, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl110 := r.ReadArrayStart()
			if yyl110 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelsPresence) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys111Slc
	var yyhl111 bool = l >= 0
	for yyj111 := 0; ; yyj111++ {
		if yyhl111 {
			if yyj111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj111 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys111Slc = r.DecodeBytes(yys111Slc, true, true)
		yys111 := string(yys111Slc)
		if !yyhl111 {
			r.ReadMapKVSeparator()
		}
		switch yys111 {
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv112 := &x.Labels
				yym113 := z.DecBinary()
				_ = yym113
				if false {
				} else {
					z.F.DecSliceStringX(yyv112, false, d)
				}
			}
		case "presence":
			if r.TryDecodeAsNil() {
				x.Presence = false
			} else {
				x.Presence = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys111)
		} // end switch yys111
	} // end for yyj111
	if !yyhl111 {
		r.ReadMapEnd()
	}
}

func (x *LabelsPresence) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj115 int
	var yyb115 bool
	var yyhl115 bool = l >= 0
	yyj115++
	if yyhl115 {
		yyb115 = yyj115 > l
	} else {
		yyb115 = r.CheckBreak()
	}
	if yyb115 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv116 := &x.Labels
		yym117 := z.DecBinary()
		_ = yym117
		if false {
		} else {
			z.F.DecSliceStringX(yyv116, false, d)
		}
	}
	yyj115++
	if yyhl115 {
		yyb115 = yyj115 > l
	} else {
		yyb115 = r.CheckBreak()
	}
	if yyb115 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Presence = false
	} else {
		x.Presence = bool(r.DecodeBool())
	}
	for {
		yyj115++
		if yyhl115 {
			yyb115 = yyj115 > l
		} else {
			yyb115 = r.CheckBreak()
		}
		if yyb115 {
			break
		}
		if yyj115 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj115-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym119 := z.EncBinary()
		_ = yym119
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep120 := !z.EncBinary()
			yy2arr120 := z.EncBasicHandle().StructToArray
			var yyfirst120 bool
			var yyq120 [1]bool
			_, _, _, _ = yysep120, yyfirst120, yyq120, yy2arr120
			const yyr120 bool = false
			if yyr120 || yy2arr120 {
				r.EncodeArrayStart(1)
			} else {
				var yynn120 int = 1
				for _, b := range yyq120 {
					if b {
						yynn120++
					}
				}
				r.EncodeMapStart(yynn120)
			}
			if yyr120 || yy2arr120 {
				yym122 := z.EncBinary()
				_ = yym122
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Label))
				}
			} else {
				yyfirst120 = true
				r.EncodeString(codecSelferC_UTF81234, string("label"))
				if yysep120 {
					r.EncodeMapKVSeparator()
				}
				yym123 := z.EncBinary()
				_ = yym123
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Label))
				}
			}
			if yysep120 {
				if yyr120 || yy2arr120 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *ServiceAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym124 := z.DecBinary()
	_ = yym124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl125 := r.ReadMapStart()
			if yyl125 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl125, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl125 := r.ReadArrayStart()
			if yyl125 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys126Slc
	var yyhl126 bool = l >= 0
	for yyj126 := 0; ; yyj126++ {
		if yyhl126 {
			if yyj126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj126 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys126Slc = r.DecodeBytes(yys126Slc, true, true)
		yys126 := string(yys126Slc)
		if !yyhl126 {
			r.ReadMapKVSeparator()
		}
		switch yys126 {
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				x.Label = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys126)
		} // end switch yys126
	} // end for yyj126
	if !yyhl126 {
		r.ReadMapEnd()
	}
}

func (x *ServiceAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj128 int
	var yyb128 bool
	var yyhl128 bool = l >= 0
	yyj128++
	if yyhl128 {
		yyb128 = yyj128 > l
	} else {
		yyb128 = r.CheckBreak()
	}
	if yyb128 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		x.Label = string(r.DecodeString())
	}
	for {
		yyj128++
		if yyhl128 {
			yyb128 = yyj128 > l
		} else {
			yyb128 = r.CheckBreak()
		}
		if yyb128 {
			break
		}
		if yyj128 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj128-1, "")
	}
	r.ReadArrayEnd()
}

func (x *LabelPreference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym130 := z.EncBinary()
		_ = yym130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep131 := !z.EncBinary()
			yy2arr131 := z.EncBasicHandle().StructToArray
			var yyfirst131 bool
			var yyq131 [2]bool
			_, _, _, _ = yysep131, yyfirst131, yyq131, yy2arr131
			const yyr131 bool = false
			if yyr131 || yy2arr131 {
				r.EncodeArrayStart(2)
			} else {
				var yynn131 int = 2
				for _, b := range yyq131 {
					if b {
						yynn131++
					}
				}
				r.EncodeMapStart(yynn131)
			}
			if yyr131 || yy2arr131 {
				yym133 := z.EncBinary()
				_ = yym133
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Label))
				}
			} else {
				yyfirst131 = true
				r.EncodeString(codecSelferC_UTF81234, string("label"))
				if yysep131 {
					r.EncodeMapKVSeparator()
				}
				yym134 := z.EncBinary()
				_ = yym134
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Label))
				}
			}
			if yyr131 || yy2arr131 {
				if yysep131 {
					r.EncodeArrayEntrySeparator()
				}
				yym136 := z.EncBinary()
				_ = yym136
				if false {
				} else {
					r.EncodeBool(bool(x.Presence))
				}
			} else {
				if yyfirst131 {
					r.EncodeMapEntrySeparator()
				} else {
					yyfirst131 = true
				}
				r.EncodeString(codecSelferC_UTF81234, string("presence"))
				if yysep131 {
					r.EncodeMapKVSeparator()
				}
				yym137 := z.EncBinary()
				_ = yym137
				if false {
				} else {
					r.EncodeBool(bool(x.Presence))
				}
			}
			if yysep131 {
				if yyr131 || yy2arr131 {
					r.EncodeArrayEnd()
				} else {
					r.EncodeMapEnd()
				}
			}
		}
	}
}

func (x *LabelPreference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym138 := z.DecBinary()
	_ = yym138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		if r.IsContainerType(codecSelverValueTypeMap1234) {
			yyl139 := r.ReadMapStart()
			if yyl139 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl139, d)
			}
		} else if r.IsContainerType(codecSelverValueTypeArray1234) {
			yyl139 := r.ReadArrayStart()
			if yyl139 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelPreference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys140Slc
	var yyhl140 bool = l >= 0
	for yyj140 := 0; ; yyj140++ {
		if yyhl140 {
			if yyj140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
			if yyj140 > 0 {
				r.ReadMapEntrySeparator()
			}
		}
		yys140Slc = r.DecodeBytes(yys140Slc, true, true)
		yys140 := string(yys140Slc)
		if !yyhl140 {
			r.ReadMapKVSeparator()
		}
		switch yys140 {
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				x.Label = string(r.DecodeString())
			}
		case "presence":
			if r.TryDecodeAsNil() {
				x.Presence = false
			} else {
				x.Presence = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys140)
		} // end switch yys140
	} // end for yyj140
	if !yyhl140 {
		r.ReadMapEnd()
	}
}

func (x *LabelPreference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj143 int
	var yyb143 bool
	var yyhl143 bool = l >= 0
	yyj143++
	if yyhl143 {
		yyb143 = yyj143 > l
	} else {
		yyb143 = r.CheckBreak()
	}
	if yyb143 {
		r.ReadArrayEnd()
		return
	}
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		x.Label = string(r.DecodeString())
	}
	yyj143++
	if yyhl143 {
		yyb143 = yyj143 > l
	} else {
		yyb143 = r.CheckBreak()
	}
	if yyb143 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayEntrySeparator()
	if r.TryDecodeAsNil() {
		x.Presence = false
	} else {
		x.Presence = bool(r.DecodeBool())
	}
	for {
		yyj143++
		if yyhl143 {
			yyb143 = yyj143 > l
		} else {
			yyb143 = r.CheckBreak()
		}
		if yyb143 {
			break
		}
		if yyj143 > 1 {
			r.ReadArrayEntrySeparator()
		}
		z.DecStructFieldNotFound(yyj143-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer1234) encSlicePredicatePolicy(v []PredicatePolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys146 := !z.EncBinary()
	if yys146 {
		for yyi146, yyv146 := range v {
			if yyi146 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy147 := &yyv146
			yy147.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv146 := range v {
			yy148 := &yyv146
			yy148.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePredicatePolicy(v *[]PredicatePolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv149 := *v
	yyh149, yyl149 := z.DecSliceHelperStart()

	var yyc149 bool
	_ = yyc149

	if yyv149 == nil {
		if yyl149 <= 0 {
			yyv149 = make([]PredicatePolicy, 0)
		} else {
			yyv149 = make([]PredicatePolicy, yyl149)
		}
		yyc149 = true
	}

	if yyl149 == 0 {
		if len(yyv149) != 0 {
			yyv149 = yyv149[:0]
			yyc149 = true
		}
	} else if yyl149 > 0 {

		yyn149 := yyl149
		if yyl149 > cap(yyv149) {
			yyv149 = make([]PredicatePolicy, yyl149, yyl149)
			yyc149 = true

		} else if yyl149 != len(yyv149) {
			yyv149 = yyv149[:yyl149]
			yyc149 = true
		}
		yyj149 := 0
		for ; yyj149 < yyn149; yyj149++ {
			if r.TryDecodeAsNil() {
				yyv149[yyj149] = PredicatePolicy{}
			} else {
				yyv150 := &yyv149[yyj149]
				yyv150.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj149 := 0; !r.CheckBreak(); yyj149++ {
			if yyj149 >= len(yyv149) {
				yyv149 = append(yyv149, PredicatePolicy{}) // var yyz149 PredicatePolicy
				yyc149 = true
			}
			if yyj149 > 0 {
				yyh149.Sep(yyj149)
			}

			if yyj149 < len(yyv149) {
				if r.TryDecodeAsNil() {
					yyv149[yyj149] = PredicatePolicy{}
				} else {
					yyv151 := &yyv149[yyj149]
					yyv151.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh149.End()
	}
	if yyc149 {
		*v = yyv149
	}

}

func (x codecSelfer1234) encSlicePriorityPolicy(v []PriorityPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	yys152 := !z.EncBinary()
	if yys152 {
		for yyi152, yyv152 := range v {
			if yyi152 > 0 {
				r.EncodeArrayEntrySeparator()
			}
			yy153 := &yyv152
			yy153.CodecEncodeSelf(e)
		}
		r.EncodeArrayEnd()
	} else {
		for _, yyv152 := range v {
			yy154 := &yyv152
			yy154.CodecEncodeSelf(e)
		}
	}
}

func (x codecSelfer1234) decSlicePriorityPolicy(v *[]PriorityPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv155 := *v
	yyh155, yyl155 := z.DecSliceHelperStart()

	var yyc155 bool
	_ = yyc155

	if yyv155 == nil {
		if yyl155 <= 0 {
			yyv155 = make([]PriorityPolicy, 0)
		} else {
			yyv155 = make([]PriorityPolicy, yyl155)
		}
		yyc155 = true
	}

	if yyl155 == 0 {
		if len(yyv155) != 0 {
			yyv155 = yyv155[:0]
			yyc155 = true
		}
	} else if yyl155 > 0 {

		yyn155 := yyl155
		if yyl155 > cap(yyv155) {
			yyv155 = make([]PriorityPolicy, yyl155, yyl155)
			yyc155 = true

		} else if yyl155 != len(yyv155) {
			yyv155 = yyv155[:yyl155]
			yyc155 = true
		}
		yyj155 := 0
		for ; yyj155 < yyn155; yyj155++ {
			if r.TryDecodeAsNil() {
				yyv155[yyj155] = PriorityPolicy{}
			} else {
				yyv156 := &yyv155[yyj155]
				yyv156.CodecDecodeSelf(d)
			}

		}

	} else {
		for yyj155 := 0; !r.CheckBreak(); yyj155++ {
			if yyj155 >= len(yyv155) {
				yyv155 = append(yyv155, PriorityPolicy{}) // var yyz155 PriorityPolicy
				yyc155 = true
			}
			if yyj155 > 0 {
				yyh155.Sep(yyj155)
			}

			if yyj155 < len(yyv155) {
				if r.TryDecodeAsNil() {
					yyv155[yyj155] = PriorityPolicy{}
				} else {
					yyv157 := &yyv155[yyj155]
					yyv157.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		yyh155.End()
	}
	if yyc155 {
		*v = yyv155
	}

}
