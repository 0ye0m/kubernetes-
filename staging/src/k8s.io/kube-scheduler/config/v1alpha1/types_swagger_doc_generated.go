/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_KubeSchedulerConfiguration = map[string]string{
	"":                               "KubeSchedulerConfiguration configures a scheduler",
	"schedulerName":                  "SchedulerName is name of the scheduler, used to select which pods will be processed by this scheduler, based on pod's \"spec.SchedulerName\".",
	"algorithmSource":                "AlgorithmSource specifies the scheduler algorithm source.",
	"hardPodAffinitySymmetricWeight": "RequiredDuringScheduling affinity is not symmetric, but there is an implicit PreferredDuringScheduling affinity rule corresponding to every RequiredDuringScheduling affinity rule. HardPodAffinitySymmetricWeight represents the weight of implicit PreferredDuringScheduling affinity rule, in the range 0-100.",
	"leaderElection":                 "LeaderElection defines the configuration of leader election client.",
	"clientConnection":               "ClientConnection specifies the kubeconfig file and client connection settings for the proxy server to use when communicating with the apiserver.",
	"healthzBindAddress":             "HealthzBindAddress is the IP address and port for the health check server to serve on, defaulting to 0.0.0.0:10251",
	"metricsBindAddress":             "MetricsBindAddress is the IP address and port for the metrics server to serve on, defaulting to 0.0.0.0:10251.",
	"disablePreemption":              "DisablePreemption disables the pod preemption feature.",
	"percentageOfNodesToScore":       "PercentageOfNodeToScore is the percentage of all nodes that once found feasible for running a pod, the scheduler stops its search for more feasible nodes in the cluster. This helps improve scheduler's performance. Scheduler always tries to find at least \"minFeasibleNodesToFind\" feasible nodes no matter what the value of this flag is. Example: if the cluster size is 500 nodes and the value of this flag is 30, then scheduler stops finding further feasible nodes once it finds 150 feasible ones. When the value is 0, default percentage (5%--50% based on the size of the cluster) of the nodes will be scored.",
	"bindTimeoutSeconds":             "Duration to wait for a binding operation to complete before timing out Value must be non-negative integer. The value zero indicates no waiting. If this value is nil, the default value will be used.",
	"podInitialBackoffSeconds":       "PodInitialBackoffSeconds is the initial backoff for unschedulable pods. If specified, it must be greater than 0. If this value is null, the default value (1s) will be used.",
	"podMaxBackoffSeconds":           "PodMaxBackoffSeconds is the max backoff for unschedulable pods. If specified, it must be greater than podInitialBackoffSeconds. If this value is null, the default value (10s) will be used.",
	"plugins":                        "Plugins specify the set of plugins that should be enabled or disabled. Enabled plugins are the ones that should be enabled in addition to the default plugins. Disabled plugins are any of the default plugins that should be disabled. When no enabled or disabled plugin is specified for an extension point, default plugins for that extension point will be used if there is any.",
	"pluginConfig":                   "PluginConfig is an optional set of custom plugin arguments for each plugin. Omitting config args for a plugin is equivalent to using the default config for that plugin.",
}

func (KubeSchedulerConfiguration) SwaggerDoc() map[string]string {
	return map_KubeSchedulerConfiguration
}

var map_KubeSchedulerLeaderElectionConfiguration = map[string]string{
	"":                    "KubeSchedulerLeaderElectionConfiguration expands LeaderElectionConfiguration to include scheduler specific configuration.",
	"lockObjectNamespace": "LockObjectNamespace defines the namespace of the lock object DEPRECATED: will be removed in favor of resourceNamespace",
	"lockObjectName":      "LockObjectName defines the lock object name DEPRECATED: will be removed in favor of resourceName",
}

func (KubeSchedulerLeaderElectionConfiguration) SwaggerDoc() map[string]string {
	return map_KubeSchedulerLeaderElectionConfiguration
}

var map_Plugin = map[string]string{
	"":       "Plugin specifies a plugin name and its weight when applicable. Weight is used only for Score plugins.",
	"name":   "Name defines the name of plugin",
	"weight": "Weight defines the weight of plugin, only used for Score plugins.",
}

func (Plugin) SwaggerDoc() map[string]string {
	return map_Plugin
}

var map_PluginConfig = map[string]string{
	"":     "PluginConfig specifies arguments that should be passed to a plugin at the time of initialization. A plugin that is invoked at multiple extension points is initialized once. Args can have arbitrary structure. It is up to the plugin to process these Args.",
	"name": "Name defines the name of plugin being configured",
	"args": "Args defines the arguments passed to the plugins at the time of initialization. Args can have arbitrary structure.",
}

func (PluginConfig) SwaggerDoc() map[string]string {
	return map_PluginConfig
}

var map_PluginSet = map[string]string{
	"":         "PluginSet specifies enabled and disabled plugins for an extension point. If an array is empty, missing, or nil, default plugins at that extension point will be used.",
	"enabled":  "Enabled specifies plugins that should be enabled in addition to default plugins. These are called after default plugins and in the same order specified here.",
	"disabled": "Disabled specifies default plugins that should be disabled. When all default plugins need to be disabled, an array containing only one \"*\" should be provided.",
}

func (PluginSet) SwaggerDoc() map[string]string {
	return map_PluginSet
}

var map_Plugins = map[string]string{
	"":           "Plugins include multiple extension points. When specified, the list of plugins for a particular extension point are the only ones enabled. If an extension point is omitted from the config, then the default set of plugins is used for that extension point. Enabled plugins are called in the order specified here, after default plugins. If they need to be invoked before default plugins, default plugins must be disabled and re-enabled here in desired order.",
	"queueSort":  "QueueSort is a list of plugins that should be invoked when sorting pods in the scheduling queue.",
	"preFilter":  "PreFilter is a list of plugins that should be invoked at \"PreFilter\" extension point of the scheduling framework.",
	"filter":     "Filter is a list of plugins that should be invoked when filtering out nodes that cannot run the Pod.",
	"postFilter": "PostFilter is a list of plugins that are invoked after filtering out infeasible nodes.",
	"score":      "Score is a list of plugins that should be invoked when ranking nodes that have passed the filtering phase.",
	"reserve":    "Reserve is a list of plugins invoked when reserving a node to run the pod.",
	"permit":     "Permit is a list of plugins that control binding of a Pod. These plugins can prevent or delay binding of a Pod.",
	"preBind":    "PreBind is a list of plugins that should be invoked before a pod is bound.",
	"bind":       "Bind is a list of plugins that should be invoked at \"Bind\" extension point of the scheduling framework. The scheduler call these plugins in order. Scheduler skips the rest of these plugins as soon as one returns success.",
	"postBind":   "PostBind is a list of plugins that should be invoked after a pod is successfully bound.",
	"unreserve":  "Unreserve is a list of plugins invoked when a pod that was previously reserved is rejected in a later phase.",
}

func (Plugins) SwaggerDoc() map[string]string {
	return map_Plugins
}

var map_SchedulerAlgorithmSource = map[string]string{
	"":         "SchedulerAlgorithmSource is the source of a scheduler algorithm. One source field must be specified, and source fields are mutually exclusive.",
	"policy":   "Policy is a policy based algorithm source.",
	"provider": "Provider is the name of a scheduling algorithm provider to use.",
}

func (SchedulerAlgorithmSource) SwaggerDoc() map[string]string {
	return map_SchedulerAlgorithmSource
}

var map_SchedulerPolicyConfigMapSource = map[string]string{
	"":          "SchedulerPolicyConfigMapSource is a policy serialized into a config map value under the SchedulerPolicyConfigMapKey key.",
	"namespace": "Namespace is the namespace of the policy config map.",
	"name":      "Name is the name of hte policy config map.",
}

func (SchedulerPolicyConfigMapSource) SwaggerDoc() map[string]string {
	return map_SchedulerPolicyConfigMapSource
}

var map_SchedulerPolicyFileSource = map[string]string{
	"":     "SchedulerPolicyFileSource is a policy serialized to disk and accessed via path.",
	"path": "Path is the location of a serialized policy.",
}

func (SchedulerPolicyFileSource) SwaggerDoc() map[string]string {
	return map_SchedulerPolicyFileSource
}

var map_SchedulerPolicySource = map[string]string{
	"":          "SchedulerPolicySource configures a means to obtain a scheduler Policy. One source field must be specified, and source fields are mutually exclusive.",
	"file":      "File is a file policy source.",
	"configMap": "ConfigMap is a config map policy source.",
}

func (SchedulerPolicySource) SwaggerDoc() map[string]string {
	return map_SchedulerPolicySource
}

// AUTO-GENERATED FUNCTIONS END HERE
