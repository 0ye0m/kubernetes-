/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/code-generator/_examples/crd/apis/test1/v1"
)

// TLister helps list T.
type TLister interface {
	// List lists all T in the indexer.
	List(selector labels.Selector) (ret []*v1.T, err error)
	// T returns an object that can list and get T.
	T(namespace string) TNamespaceLister
	TListerExpansion
}

// tLister implements the TLister interface.
type tLister struct {
	indexer cache.Indexer
}

// NewTLister returns a new TLister.
func NewTLister(indexer cache.Indexer) TLister {
	return &tLister{indexer: indexer}
}

// List lists all T in the indexer.
func (s *tLister) List(selector labels.Selector) (ret []*v1.T, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.T))
	})
	return ret, err
}

// T returns an object that can list and get T.
func (s *tLister) T(namespace string) TNamespaceLister {
	return tNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TNamespaceLister helps list and get T.
type TNamespaceLister interface {
	// List lists all T in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.T, err error)
	// Get retrieves the T from the indexer for a given namespace and name.
	Get(name string) (*v1.T, error)
	TNamespaceListerExpansion
}

// tNamespaceLister implements the TNamespaceLister
// interface.
type tNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all T in the indexer for a given namespace.
func (s tNamespaceLister) List(selector labels.Selector) (ret []*v1.T, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.T))
	})
	return ret, err
}

// Get retrieves the T from the indexer for a given namespace and name.
func (s tNamespaceLister) Get(name string) (*v1.T, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("t"), name)
	}
	return obj.(*v1.T), nil
}
