// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v1

import (
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
	reflect "reflect"
)

// GetGeneratedDeepCopyFuncs returns the generated funcs, since we aren't registering them.
func GetGeneratedDeepCopyFuncs() []conversion.GeneratedDeepCopyFunc {
	return []conversion.GeneratedDeepCopyFunc{
		{Fn: DeepCopyv1APIGroup, InType: reflect.TypeOf(&APIGroup{})},
		{Fn: DeepCopyv1APIGroupList, InType: reflect.TypeOf(&APIGroupList{})},
		{Fn: DeepCopyv1APIResource, InType: reflect.TypeOf(&APIResource{})},
		{Fn: DeepCopyv1APIResourceList, InType: reflect.TypeOf(&APIResourceList{})},
		{Fn: DeepCopyv1APIVersions, InType: reflect.TypeOf(&APIVersions{})},
		{Fn: DeepCopyv1DeleteOptions, InType: reflect.TypeOf(&DeleteOptions{})},
		{Fn: DeepCopyv1Duration, InType: reflect.TypeOf(&Duration{})},
		{Fn: DeepCopyv1ExportOptions, InType: reflect.TypeOf(&ExportOptions{})},
		{Fn: DeepCopyv1GetOptions, InType: reflect.TypeOf(&GetOptions{})},
		{Fn: DeepCopyv1GroupKind, InType: reflect.TypeOf(&GroupKind{})},
		{Fn: DeepCopyv1GroupResource, InType: reflect.TypeOf(&GroupResource{})},
		{Fn: DeepCopyv1GroupVersion, InType: reflect.TypeOf(&GroupVersion{})},
		{Fn: DeepCopyv1GroupVersionForDiscovery, InType: reflect.TypeOf(&GroupVersionForDiscovery{})},
		{Fn: DeepCopyv1GroupVersionKind, InType: reflect.TypeOf(&GroupVersionKind{})},
		{Fn: DeepCopyv1GroupVersionResource, InType: reflect.TypeOf(&GroupVersionResource{})},
		{Fn: DeepCopyv1InternalEvent, InType: reflect.TypeOf(&InternalEvent{})},
		{Fn: DeepCopyv1LabelSelector, InType: reflect.TypeOf(&LabelSelector{})},
		{Fn: DeepCopyv1LabelSelectorRequirement, InType: reflect.TypeOf(&LabelSelectorRequirement{})},
		{Fn: DeepCopyv1ListMeta, InType: reflect.TypeOf(&ListMeta{})},
		{Fn: DeepCopyv1ListOptions, InType: reflect.TypeOf(&ListOptions{})},
		{Fn: DeepCopyv1ObjectMeta, InType: reflect.TypeOf(&ObjectMeta{})},
		{Fn: DeepCopyv1OwnerReference, InType: reflect.TypeOf(&OwnerReference{})},
		{Fn: DeepCopyv1Patch, InType: reflect.TypeOf(&Patch{})},
		{Fn: DeepCopyv1Preconditions, InType: reflect.TypeOf(&Preconditions{})},
		{Fn: DeepCopyv1RootPaths, InType: reflect.TypeOf(&RootPaths{})},
		{Fn: DeepCopyv1ServerAddressByClientCIDR, InType: reflect.TypeOf(&ServerAddressByClientCIDR{})},
		{Fn: DeepCopyv1Status, InType: reflect.TypeOf(&Status{})},
		{Fn: DeepCopyv1StatusCause, InType: reflect.TypeOf(&StatusCause{})},
		{Fn: DeepCopyv1StatusDetails, InType: reflect.TypeOf(&StatusDetails{})},
		{Fn: DeepCopyv1Time, InType: reflect.TypeOf(&Time{})},
		{Fn: DeepCopyv1Timestamp, InType: reflect.TypeOf(&Timestamp{})},
		{Fn: DeepCopyv1TypeMeta, InType: reflect.TypeOf(&TypeMeta{})},
		{Fn: DeepCopyv1WatchEvent, InType: reflect.TypeOf(&WatchEvent{})},
	}
}

// DeepCopyv1APIGroup ...
func DeepCopyv1APIGroup(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*APIGroup)
		out := out.(*APIGroup)
		*out = *in
		if in.Versions != nil {
			in, out := &in.Versions, &out.Versions
			*out = make([]GroupVersionForDiscovery, len(*in))
			copy(*out, *in)
		}
		if in.ServerAddressByClientCIDRs != nil {
			in, out := &in.ServerAddressByClientCIDRs, &out.ServerAddressByClientCIDRs
			*out = make([]ServerAddressByClientCIDR, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1APIGroupList ...
func DeepCopyv1APIGroupList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*APIGroupList)
		out := out.(*APIGroupList)
		*out = *in
		if in.Groups != nil {
			in, out := &in.Groups, &out.Groups
			*out = make([]APIGroup, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err == nil {
					(*out)[i] = *newVal.(*APIGroup)
				} else {
					return err
				}
			}
		}
		return nil
	}
}

// DeepCopyv1APIResource ...
func DeepCopyv1APIResource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*APIResource)
		out := out.(*APIResource)
		*out = *in
		if in.Verbs != nil {
			in, out := &in.Verbs, &out.Verbs
			*out = make(Verbs, len(*in))
			copy(*out, *in)
		}
		if in.ShortNames != nil {
			in, out := &in.ShortNames, &out.ShortNames
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1APIResourceList ...
func DeepCopyv1APIResourceList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*APIResourceList)
		out := out.(*APIResourceList)
		*out = *in
		if in.APIResources != nil {
			in, out := &in.APIResources, &out.APIResources
			*out = make([]APIResource, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err == nil {
					(*out)[i] = *newVal.(*APIResource)
				} else {
					return err
				}
			}
		}
		return nil
	}
}

// DeepCopyv1APIVersions ...
func DeepCopyv1APIVersions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*APIVersions)
		out := out.(*APIVersions)
		*out = *in
		if in.Versions != nil {
			in, out := &in.Versions, &out.Versions
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.ServerAddressByClientCIDRs != nil {
			in, out := &in.ServerAddressByClientCIDRs, &out.ServerAddressByClientCIDRs
			*out = make([]ServerAddressByClientCIDR, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1DeleteOptions ...
func DeepCopyv1DeleteOptions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*DeleteOptions)
		out := out.(*DeleteOptions)
		*out = *in
		if in.GracePeriodSeconds != nil {
			in, out := &in.GracePeriodSeconds, &out.GracePeriodSeconds
			*out = new(int64)
			**out = **in
		}
		if in.Preconditions != nil {
			in, out := &in.Preconditions, &out.Preconditions
			if newVal, err := c.DeepCopy(*in); err == nil {
				*out = newVal.(*Preconditions)
			} else {
				return err
			}
		}
		if in.OrphanDependents != nil {
			in, out := &in.OrphanDependents, &out.OrphanDependents
			*out = new(bool)
			**out = **in
		}
		return nil
	}
}

// DeepCopyv1Duration ...
func DeepCopyv1Duration(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Duration)
		out := out.(*Duration)
		*out = *in
		return nil
	}
}

// DeepCopyv1ExportOptions ...
func DeepCopyv1ExportOptions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ExportOptions)
		out := out.(*ExportOptions)
		*out = *in
		return nil
	}
}

// DeepCopyv1GetOptions ...
func DeepCopyv1GetOptions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GetOptions)
		out := out.(*GetOptions)
		*out = *in
		return nil
	}
}

// DeepCopyv1GroupKind ...
func DeepCopyv1GroupKind(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupKind)
		out := out.(*GroupKind)
		*out = *in
		return nil
	}
}

// DeepCopyv1GroupResource ...
func DeepCopyv1GroupResource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupResource)
		out := out.(*GroupResource)
		*out = *in
		return nil
	}
}

// DeepCopyv1GroupVersion ...
func DeepCopyv1GroupVersion(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupVersion)
		out := out.(*GroupVersion)
		*out = *in
		return nil
	}
}

// DeepCopyv1GroupVersionForDiscovery ...
func DeepCopyv1GroupVersionForDiscovery(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupVersionForDiscovery)
		out := out.(*GroupVersionForDiscovery)
		*out = *in
		return nil
	}
}

// DeepCopyv1GroupVersionKind ...
func DeepCopyv1GroupVersionKind(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupVersionKind)
		out := out.(*GroupVersionKind)
		*out = *in
		return nil
	}
}

// DeepCopyv1GroupVersionResource ...
func DeepCopyv1GroupVersionResource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupVersionResource)
		out := out.(*GroupVersionResource)
		*out = *in
		return nil
	}
}

// DeepCopyv1InternalEvent ...
func DeepCopyv1InternalEvent(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*InternalEvent)
		out := out.(*InternalEvent)
		*out = *in
		// in.Object is kind 'Interface'
		if in.Object != nil {
			if newVal, err := c.DeepCopy(&in.Object); err == nil {
				out.Object = *newVal.(*runtime.Object)
			} else {
				return err
			}
		}
		return nil
	}
}

// DeepCopyv1LabelSelector ...
func DeepCopyv1LabelSelector(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LabelSelector)
		out := out.(*LabelSelector)
		*out = *in
		if in.MatchLabels != nil {
			in, out := &in.MatchLabels, &out.MatchLabels
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		if in.MatchExpressions != nil {
			in, out := &in.MatchExpressions, &out.MatchExpressions
			*out = make([]LabelSelectorRequirement, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err == nil {
					(*out)[i] = *newVal.(*LabelSelectorRequirement)
				} else {
					return err
				}
			}
		}
		return nil
	}
}

// DeepCopyv1LabelSelectorRequirement ...
func DeepCopyv1LabelSelectorRequirement(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LabelSelectorRequirement)
		out := out.(*LabelSelectorRequirement)
		*out = *in
		if in.Values != nil {
			in, out := &in.Values, &out.Values
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1ListMeta ...
func DeepCopyv1ListMeta(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ListMeta)
		out := out.(*ListMeta)
		*out = *in
		return nil
	}
}

// DeepCopyv1ListOptions ...
func DeepCopyv1ListOptions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ListOptions)
		out := out.(*ListOptions)
		*out = *in
		if in.TimeoutSeconds != nil {
			in, out := &in.TimeoutSeconds, &out.TimeoutSeconds
			*out = new(int64)
			**out = **in
		}
		return nil
	}
}

// DeepCopyv1ObjectMeta ...
func DeepCopyv1ObjectMeta(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ObjectMeta)
		out := out.(*ObjectMeta)
		*out = *in
		out.CreationTimestamp = in.CreationTimestamp.DeepCopy()
		if in.DeletionTimestamp != nil {
			in, out := &in.DeletionTimestamp, &out.DeletionTimestamp
			*out = new(Time)
			**out = (*in).DeepCopy()
		}
		if in.DeletionGracePeriodSeconds != nil {
			in, out := &in.DeletionGracePeriodSeconds, &out.DeletionGracePeriodSeconds
			*out = new(int64)
			**out = **in
		}
		if in.Labels != nil {
			in, out := &in.Labels, &out.Labels
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		if in.Annotations != nil {
			in, out := &in.Annotations, &out.Annotations
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		if in.OwnerReferences != nil {
			in, out := &in.OwnerReferences, &out.OwnerReferences
			*out = make([]OwnerReference, len(*in))
			for i := range *in {
				if newVal, err := c.DeepCopy(&(*in)[i]); err == nil {
					(*out)[i] = *newVal.(*OwnerReference)
				} else {
					return err
				}
			}
		}
		if in.Finalizers != nil {
			in, out := &in.Finalizers, &out.Finalizers
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1OwnerReference ...
func DeepCopyv1OwnerReference(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*OwnerReference)
		out := out.(*OwnerReference)
		*out = *in
		if in.Controller != nil {
			in, out := &in.Controller, &out.Controller
			*out = new(bool)
			**out = **in
		}
		return nil
	}
}

// DeepCopyv1Patch ...
func DeepCopyv1Patch(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Patch)
		out := out.(*Patch)
		*out = *in
		return nil
	}
}

// DeepCopyv1Preconditions ...
func DeepCopyv1Preconditions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Preconditions)
		out := out.(*Preconditions)
		*out = *in
		if in.UID != nil {
			in, out := &in.UID, &out.UID
			*out = new(types.UID)
			**out = **in
		}
		return nil
	}
}

// DeepCopyv1RootPaths ...
func DeepCopyv1RootPaths(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*RootPaths)
		out := out.(*RootPaths)
		*out = *in
		if in.Paths != nil {
			in, out := &in.Paths, &out.Paths
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1ServerAddressByClientCIDR ...
func DeepCopyv1ServerAddressByClientCIDR(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ServerAddressByClientCIDR)
		out := out.(*ServerAddressByClientCIDR)
		*out = *in
		return nil
	}
}

// DeepCopyv1Status ...
func DeepCopyv1Status(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Status)
		out := out.(*Status)
		*out = *in
		if in.Details != nil {
			in, out := &in.Details, &out.Details
			if newVal, err := c.DeepCopy(*in); err == nil {
				*out = newVal.(*StatusDetails)
			} else {
				return err
			}
		}
		return nil
	}
}

// DeepCopyv1StatusCause ...
func DeepCopyv1StatusCause(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*StatusCause)
		out := out.(*StatusCause)
		*out = *in
		return nil
	}
}

// DeepCopyv1StatusDetails ...
func DeepCopyv1StatusDetails(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*StatusDetails)
		out := out.(*StatusDetails)
		*out = *in
		if in.Causes != nil {
			in, out := &in.Causes, &out.Causes
			*out = make([]StatusCause, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1Time ...
func DeepCopyv1Time(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Time)
		out := out.(*Time)
		*out = in.DeepCopy()
		return nil
	}
}

// DeepCopyv1Timestamp ...
func DeepCopyv1Timestamp(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Timestamp)
		out := out.(*Timestamp)
		*out = *in
		return nil
	}
}

// DeepCopyv1TypeMeta ...
func DeepCopyv1TypeMeta(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*TypeMeta)
		out := out.(*TypeMeta)
		*out = *in
		return nil
	}
}

// DeepCopyv1WatchEvent ...
func DeepCopyv1WatchEvent(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*WatchEvent)
		out := out.(*WatchEvent)
		*out = *in
		if newVal, err := c.DeepCopy(&in.Object); err == nil {
			out.Object = *newVal.(*runtime.RawExtension)
		} else {
			return err
		}
		return nil
	}
}
