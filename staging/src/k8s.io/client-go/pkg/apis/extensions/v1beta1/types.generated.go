/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/client-go/pkg/api/resource"
	pkg4_v1 "k8s.io/client-go/pkg/api/v1"
	pkg1_v1 "k8s.io/client-go/pkg/apis/meta/v1"
	pkg2_types "k8s.io/client-go/pkg/types"
	pkg5_intstr "k8s.io/client-go/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg4_v1.PodTemplateSpec
		var v2 pkg1_v1.TypeMeta
		var v3 pkg2_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [3]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			yyq13[2] = x.TargetSelector != ""
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(3)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[2] {
					yym21 := z.EncBinary()
					_ = yym21
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq13[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetSelector))
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym23 := z.DecBinary()
	_ = yym23
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct24 := r.ContainerType()
		if yyct24 == codecSelferValueTypeMap1234 {
			yyl24 := r.ReadMapStart()
			if yyl24 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl24, d)
			}
		} else if yyct24 == codecSelferValueTypeArray1234 {
			yyl24 := r.ReadArrayStart()
			if yyl24 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl24, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys25Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys25Slc
	var yyhl25 bool = l >= 0
	for yyj25 := 0; ; yyj25++ {
		if yyhl25 {
			if yyj25 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys25Slc = r.DecodeBytes(yys25Slc, true, true)
		yys25 := string(yys25Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys25 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv27 := &x.Selector
				yym28 := z.DecBinary()
				_ = yym28
				if false {
				} else {
					z.F.DecMapStringStringX(yyv27, false, d)
				}
			}
		case "targetSelector":
			if r.TryDecodeAsNil() {
				x.TargetSelector = ""
			} else {
				x.TargetSelector = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys25)
		} // end switch yys25
	} // end for yyj25
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv32 := &x.Selector
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			z.F.DecMapStringStringX(yyv32, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetSelector = ""
	} else {
		x.TargetSelector = string(r.DecodeString())
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym35 := z.EncBinary()
		_ = yym35
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep36 := !z.EncBinary()
			yy2arr36 := z.EncBasicHandle().StructToArray
			var yyq36 [5]bool
			_, _, _ = yysep36, yyq36, yy2arr36
			const yyr36 bool = false
			yyq36[0] = x.Kind != ""
			yyq36[1] = x.APIVersion != ""
			yyq36[2] = true
			yyq36[3] = true
			yyq36[4] = true
			var yynn36 int
			if yyr36 || yy2arr36 {
				r.EncodeArrayStart(5)
			} else {
				yynn36 = 0
				for _, b := range yyq36 {
					if b {
						yynn36++
					}
				}
				r.EncodeMapStart(yynn36)
				yynn36 = 0
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[0] {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq36[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[1] {
					yym41 := z.EncBinary()
					_ = yym41
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq36[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[2] {
					yy44 := &x.ObjectMeta
					yym45 := z.EncBinary()
					_ = yym45
					if false {
					} else if z.HasExtensions() && z.EncExt(yy44) {
					} else {
						z.EncFallback(yy44)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy46 := &x.ObjectMeta
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else if z.HasExtensions() && z.EncExt(yy46) {
					} else {
						z.EncFallback(yy46)
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[3] {
					yy49 := &x.Spec
					yy49.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy50 := &x.Spec
					yy50.CodecEncodeSelf(e)
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[4] {
					yy52 := &x.Status
					yy52.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy53 := &x.Status
					yy53.CodecEncodeSelf(e)
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym54 := z.DecBinary()
	_ = yym54
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct55 := r.ContainerType()
		if yyct55 == codecSelferValueTypeMap1234 {
			yyl55 := r.ReadMapStart()
			if yyl55 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl55, d)
			}
		} else if yyct55 == codecSelferValueTypeArray1234 {
			yyl55 := r.ReadArrayStart()
			if yyl55 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl55, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys56Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys56Slc
	var yyhl56 bool = l >= 0
	for yyj56 := 0; ; yyj56++ {
		if yyhl56 {
			if yyj56 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys56Slc = r.DecodeBytes(yys56Slc, true, true)
		yys56 := string(yys56Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys56 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv59 := &x.ObjectMeta
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv61 := &x.Spec
				yyv61.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv62 := &x.Status
				yyv62.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys56)
		} // end switch yys56
	} // end for yyj56
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv66 := &x.ObjectMeta
		yym67 := z.DecBinary()
		_ = yym67
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv66) {
		} else {
			z.DecFallback(yyv66, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv68 := &x.Spec
		yyv68.CodecDecodeSelf(d)
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv69 := &x.Status
		yyv69.CodecDecodeSelf(d)
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym70 := z.EncBinary()
		_ = yym70
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep71 := !z.EncBinary()
			yy2arr71 := z.EncBasicHandle().StructToArray
			var yyq71 [2]bool
			_, _, _ = yysep71, yyq71, yy2arr71
			const yyr71 bool = false
			yyq71[0] = x.Kind != ""
			yyq71[1] = x.APIVersion != ""
			var yynn71 int
			if yyr71 || yy2arr71 {
				r.EncodeArrayStart(2)
			} else {
				yynn71 = 0
				for _, b := range yyq71 {
					if b {
						yynn71++
					}
				}
				r.EncodeMapStart(yynn71)
				yynn71 = 0
			}
			if yyr71 || yy2arr71 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq71[0] {
					yym73 := z.EncBinary()
					_ = yym73
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq71[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym74 := z.EncBinary()
					_ = yym74
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr71 || yy2arr71 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq71[1] {
					yym76 := z.EncBinary()
					_ = yym76
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq71[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym77 := z.EncBinary()
					_ = yym77
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr71 || yy2arr71 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym78 := z.DecBinary()
	_ = yym78
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct79 := r.ContainerType()
		if yyct79 == codecSelferValueTypeMap1234 {
			yyl79 := r.ReadMapStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl79, d)
			}
		} else if yyct79 == codecSelferValueTypeArray1234 {
			yyl79 := r.ReadArrayStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl79, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys80Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys80Slc
	var yyhl80 bool = l >= 0
	for yyj80 := 0; ; yyj80++ {
		if yyhl80 {
			if yyj80 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys80Slc = r.DecodeBytes(yys80Slc, true, true)
		yys80 := string(yys80Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys80 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys80)
		} // end switch yys80
	} // end for yyj80
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj83 int
	var yyb83 bool
	var yyhl83 bool = l >= 0
	yyj83++
	if yyhl83 {
		yyb83 = yyj83 > l
	} else {
		yyb83 = r.CheckBreak()
	}
	if yyb83 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj83++
	if yyhl83 {
		yyb83 = yyj83 > l
	} else {
		yyb83 = r.CheckBreak()
	}
	if yyb83 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj83++
		if yyhl83 {
			yyb83 = yyj83 > l
		} else {
			yyb83 = r.CheckBreak()
		}
		if yyb83 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj83-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym86 := z.EncBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep87 := !z.EncBinary()
			yy2arr87 := z.EncBasicHandle().StructToArray
			var yyq87 [4]bool
			_, _, _ = yysep87, yyq87, yy2arr87
			const yyr87 bool = false
			yyq87[0] = x.Kind != ""
			yyq87[1] = x.Name != ""
			yyq87[2] = x.APIVersion != ""
			yyq87[3] = x.Subresource != ""
			var yynn87 int
			if yyr87 || yy2arr87 {
				r.EncodeArrayStart(4)
			} else {
				yynn87 = 0
				for _, b := range yyq87 {
					if b {
						yynn87++
					}
				}
				r.EncodeMapStart(yynn87)
				yynn87 = 0
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[0] {
					yym89 := z.EncBinary()
					_ = yym89
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[1] {
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[2] {
					yym95 := z.EncBinary()
					_ = yym95
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym96 := z.EncBinary()
					_ = yym96
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[3] {
					yym98 := z.EncBinary()
					_ = yym98
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym99 := z.EncBinary()
					_ = yym99
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym100 := z.DecBinary()
	_ = yym100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct101 := r.ContainerType()
		if yyct101 == codecSelferValueTypeMap1234 {
			yyl101 := r.ReadMapStart()
			if yyl101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl101, d)
			}
		} else if yyct101 == codecSelferValueTypeArray1234 {
			yyl101 := r.ReadArrayStart()
			if yyl101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys102Slc
	var yyhl102 bool = l >= 0
	for yyj102 := 0; ; yyj102++ {
		if yyhl102 {
			if yyj102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys102Slc = r.DecodeBytes(yys102Slc, true, true)
		yys102 := string(yys102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys102 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys102)
		} // end switch yys102
	} // end for yyj102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj107 int
	var yyb107 bool
	var yyhl107 bool = l >= 0
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj107++
		if yyhl107 {
			yyb107 = yyj107 > l
		} else {
			yyb107 = r.CheckBreak()
		}
		if yyb107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym112 := z.EncBinary()
		_ = yym112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep113 := !z.EncBinary()
			yy2arr113 := z.EncBasicHandle().StructToArray
			var yyq113 [1]bool
			_, _, _ = yysep113, yyq113, yy2arr113
			const yyr113 bool = false
			var yynn113 int
			if yyr113 || yy2arr113 {
				r.EncodeArrayStart(1)
			} else {
				yynn113 = 1
				for _, b := range yyq113 {
					if b {
						yynn113++
					}
				}
				r.EncodeMapStart(yynn113)
				yynn113 = 0
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym115 := z.EncBinary()
				_ = yym115
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym116 := z.EncBinary()
				_ = yym116
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym117 := z.DecBinary()
	_ = yym117
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct118 := r.ContainerType()
		if yyct118 == codecSelferValueTypeMap1234 {
			yyl118 := r.ReadMapStart()
			if yyl118 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl118, d)
			}
		} else if yyct118 == codecSelferValueTypeArray1234 {
			yyl118 := r.ReadArrayStart()
			if yyl118 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl118, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys119Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys119Slc
	var yyhl119 bool = l >= 0
	for yyj119 := 0; ; yyj119++ {
		if yyhl119 {
			if yyj119 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys119Slc = r.DecodeBytes(yys119Slc, true, true)
		yys119 := string(yys119Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys119 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys119)
		} // end switch yys119
	} // end for yyj119
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj121 int
	var yyb121 bool
	var yyhl121 bool = l >= 0
	yyj121++
	if yyhl121 {
		yyb121 = yyj121 > l
	} else {
		yyb121 = r.CheckBreak()
	}
	if yyb121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int32(r.DecodeInt(32))
	}
	for {
		yyj121++
		if yyhl121 {
			yyb121 = yyj121 > l
		} else {
			yyb121 = r.CheckBreak()
		}
		if yyb121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym123 := z.EncBinary()
		_ = yym123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep124 := !z.EncBinary()
			yy2arr124 := z.EncBasicHandle().StructToArray
			var yyq124 [2]bool
			_, _, _ = yysep124, yyq124, yy2arr124
			const yyr124 bool = false
			var yynn124 int
			if yyr124 || yy2arr124 {
				r.EncodeArrayStart(2)
			} else {
				yynn124 = 2
				for _, b := range yyq124 {
					if b {
						yynn124++
					}
				}
				r.EncodeMapStart(yynn124)
				yynn124 = 0
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym126 := z.EncBinary()
				_ = yym126
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym127 := z.EncBinary()
				_ = yym127
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy129 := &x.TargetValue
				yym130 := z.EncBinary()
				_ = yym130
				if false {
				} else if z.HasExtensions() && z.EncExt(yy129) {
				} else if !yym130 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy129)
				} else {
					z.EncFallback(yy129)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy131 := &x.TargetValue
				yym132 := z.EncBinary()
				_ = yym132
				if false {
				} else if z.HasExtensions() && z.EncExt(yy131) {
				} else if !yym132 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy131)
				} else {
					z.EncFallback(yy131)
				}
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym133 := z.DecBinary()
	_ = yym133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct134 := r.ContainerType()
		if yyct134 == codecSelferValueTypeMap1234 {
			yyl134 := r.ReadMapStart()
			if yyl134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl134, d)
			}
		} else if yyct134 == codecSelferValueTypeArray1234 {
			yyl134 := r.ReadArrayStart()
			if yyl134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys135Slc
	var yyhl135 bool = l >= 0
	for yyj135 := 0; ; yyj135++ {
		if yyhl135 {
			if yyj135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys135Slc = r.DecodeBytes(yys135Slc, true, true)
		yys135 := string(yys135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys135 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg3_resource.Quantity{}
			} else {
				yyv137 := &x.TargetValue
				yym138 := z.DecBinary()
				_ = yym138
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv137) {
				} else if !yym138 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv137)
				} else {
					z.DecFallback(yyv137, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys135)
		} // end switch yys135
	} // end for yyj135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj139 int
	var yyb139 bool
	var yyhl139 bool = l >= 0
	yyj139++
	if yyhl139 {
		yyb139 = yyj139 > l
	} else {
		yyb139 = r.CheckBreak()
	}
	if yyb139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj139++
	if yyhl139 {
		yyb139 = yyj139 > l
	} else {
		yyb139 = r.CheckBreak()
	}
	if yyb139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg3_resource.Quantity{}
	} else {
		yyv141 := &x.TargetValue
		yym142 := z.DecBinary()
		_ = yym142
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv141) {
		} else if !yym142 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv141)
		} else {
			z.DecFallback(yyv141, false)
		}
	}
	for {
		yyj139++
		if yyhl139 {
			yyb139 = yyj139 > l
		} else {
			yyb139 = r.CheckBreak()
		}
		if yyb139 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj139-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [1]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(1)
			} else {
				yynn144 = 1
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym148 := z.DecBinary()
	_ = yym148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct149 := r.ContainerType()
		if yyct149 == codecSelferValueTypeMap1234 {
			yyl149 := r.ReadMapStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl149, d)
			}
		} else if yyct149 == codecSelferValueTypeArray1234 {
			yyl149 := r.ReadArrayStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys150Slc
	var yyhl150 bool = l >= 0
	for yyj150 := 0; ; yyj150++ {
		if yyhl150 {
			if yyj150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys150Slc = r.DecodeBytes(yys150Slc, true, true)
		yys150 := string(yys150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys150 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv151 := &x.Items
				yym152 := z.DecBinary()
				_ = yym152
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv151), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys150)
		} // end switch yys150
	} // end for yyj150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj153 int
	var yyb153 bool
	var yyhl153 bool = l >= 0
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv154 := &x.Items
		yym155 := z.DecBinary()
		_ = yym155
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv154), d)
		}
	}
	for {
		yyj153++
		if yyhl153 {
			yyb153 = yyj153 > l
		} else {
			yyb153 = r.CheckBreak()
		}
		if yyb153 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj153-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym156 := z.EncBinary()
		_ = yym156
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep157 := !z.EncBinary()
			yy2arr157 := z.EncBasicHandle().StructToArray
			var yyq157 [2]bool
			_, _, _ = yysep157, yyq157, yy2arr157
			const yyr157 bool = false
			var yynn157 int
			if yyr157 || yy2arr157 {
				r.EncodeArrayStart(2)
			} else {
				yynn157 = 2
				for _, b := range yyq157 {
					if b {
						yynn157++
					}
				}
				r.EncodeMapStart(yynn157)
				yynn157 = 0
			}
			if yyr157 || yy2arr157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym159 := z.EncBinary()
				_ = yym159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym160 := z.EncBinary()
				_ = yym160
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr157 || yy2arr157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy162 := &x.CurrentValue
				yym163 := z.EncBinary()
				_ = yym163
				if false {
				} else if z.HasExtensions() && z.EncExt(yy162) {
				} else if !yym163 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy162)
				} else {
					z.EncFallback(yy162)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy164 := &x.CurrentValue
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else if z.HasExtensions() && z.EncExt(yy164) {
				} else if !yym165 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy164)
				} else {
					z.EncFallback(yy164)
				}
			}
			if yyr157 || yy2arr157 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym166 := z.DecBinary()
	_ = yym166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct167 := r.ContainerType()
		if yyct167 == codecSelferValueTypeMap1234 {
			yyl167 := r.ReadMapStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl167, d)
			}
		} else if yyct167 == codecSelferValueTypeArray1234 {
			yyl167 := r.ReadArrayStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys168Slc
	var yyhl168 bool = l >= 0
	for yyj168 := 0; ; yyj168++ {
		if yyhl168 {
			if yyj168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys168Slc = r.DecodeBytes(yys168Slc, true, true)
		yys168 := string(yys168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys168 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg3_resource.Quantity{}
			} else {
				yyv170 := &x.CurrentValue
				yym171 := z.DecBinary()
				_ = yym171
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv170) {
				} else if !yym171 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv170)
				} else {
					z.DecFallback(yyv170, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys168)
		} // end switch yys168
	} // end for yyj168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj172 int
	var yyb172 bool
	var yyhl172 bool = l >= 0
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg3_resource.Quantity{}
	} else {
		yyv174 := &x.CurrentValue
		yym175 := z.DecBinary()
		_ = yym175
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv174) {
		} else if !yym175 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv174)
		} else {
			z.DecFallback(yyv174, false)
		}
	}
	for {
		yyj172++
		if yyhl172 {
			yyb172 = yyj172 > l
		} else {
			yyb172 = r.CheckBreak()
		}
		if yyb172 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj172-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym176 := z.EncBinary()
		_ = yym176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep177 := !z.EncBinary()
			yy2arr177 := z.EncBasicHandle().StructToArray
			var yyq177 [1]bool
			_, _, _ = yysep177, yyq177, yy2arr177
			const yyr177 bool = false
			var yynn177 int
			if yyr177 || yy2arr177 {
				r.EncodeArrayStart(1)
			} else {
				yynn177 = 1
				for _, b := range yyq177 {
					if b {
						yynn177++
					}
				}
				r.EncodeMapStart(yynn177)
				yynn177 = 0
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym180 := z.EncBinary()
					_ = yym180
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym181 := z.DecBinary()
	_ = yym181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct182 := r.ContainerType()
		if yyct182 == codecSelferValueTypeMap1234 {
			yyl182 := r.ReadMapStart()
			if yyl182 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl182, d)
			}
		} else if yyct182 == codecSelferValueTypeArray1234 {
			yyl182 := r.ReadArrayStart()
			if yyl182 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl182, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys183Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys183Slc
	var yyhl183 bool = l >= 0
	for yyj183 := 0; ; yyj183++ {
		if yyhl183 {
			if yyj183 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys183Slc = r.DecodeBytes(yys183Slc, true, true)
		yys183 := string(yys183Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys183 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv184 := &x.Items
				yym185 := z.DecBinary()
				_ = yym185
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv184), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys183)
		} // end switch yys183
	} // end for yyj183
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj186 int
	var yyb186 bool
	var yyhl186 bool = l >= 0
	yyj186++
	if yyhl186 {
		yyb186 = yyj186 > l
	} else {
		yyb186 = r.CheckBreak()
	}
	if yyb186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv187 := &x.Items
		yym188 := z.DecBinary()
		_ = yym188
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv187), d)
		}
	}
	for {
		yyj186++
		if yyhl186 {
			yyb186 = yyj186 > l
		} else {
			yyb186 = r.CheckBreak()
		}
		if yyb186 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj186-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym189 := z.EncBinary()
		_ = yym189
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep190 := !z.EncBinary()
			yy2arr190 := z.EncBasicHandle().StructToArray
			var yyq190 [4]bool
			_, _, _ = yysep190, yyq190, yy2arr190
			const yyr190 bool = false
			yyq190[1] = x.MinReplicas != nil
			yyq190[3] = x.CPUUtilization != nil
			var yynn190 int
			if yyr190 || yy2arr190 {
				r.EncodeArrayStart(4)
			} else {
				yynn190 = 2
				for _, b := range yyq190 {
					if b {
						yynn190++
					}
				}
				r.EncodeMapStart(yynn190)
				yynn190 = 0
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy192 := &x.ScaleRef
				yy192.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy193 := &x.ScaleRef
				yy193.CodecEncodeSelf(e)
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq190[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy195 := *x.MinReplicas
						yym196 := z.EncBinary()
						_ = yym196
						if false {
						} else {
							r.EncodeInt(int64(yy195))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq190[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy197 := *x.MinReplicas
						yym198 := z.EncBinary()
						_ = yym198
						if false {
						} else {
							r.EncodeInt(int64(yy197))
						}
					}
				}
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym200 := z.EncBinary()
				_ = yym200
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym201 := z.EncBinary()
				_ = yym201
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq190[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq190[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym203 := z.DecBinary()
	_ = yym203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct204 := r.ContainerType()
		if yyct204 == codecSelferValueTypeMap1234 {
			yyl204 := r.ReadMapStart()
			if yyl204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl204, d)
			}
		} else if yyct204 == codecSelferValueTypeArray1234 {
			yyl204 := r.ReadArrayStart()
			if yyl204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys205Slc
	var yyhl205 bool = l >= 0
	for yyj205 := 0; ; yyj205++ {
		if yyhl205 {
			if yyj205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys205Slc = r.DecodeBytes(yys205Slc, true, true)
		yys205 := string(yys205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys205 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv206 := &x.ScaleRef
				yyv206.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int32)
				}
				yym208 := z.DecBinary()
				_ = yym208
				if false {
				} else {
					*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int32(r.DecodeInt(32))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys205)
		} // end switch yys205
	} // end for yyj205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj211 int
	var yyb211 bool
	var yyhl211 bool = l >= 0
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv212 := &x.ScaleRef
		yyv212.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int32)
		}
		yym214 := z.DecBinary()
		_ = yym214
		if false {
		} else {
			*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int32(r.DecodeInt(32))
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj211++
		if yyhl211 {
			yyb211 = yyj211 > l
		} else {
			yyb211 = r.CheckBreak()
		}
		if yyb211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym217 := z.EncBinary()
		_ = yym217
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep218 := !z.EncBinary()
			yy2arr218 := z.EncBasicHandle().StructToArray
			var yyq218 [5]bool
			_, _, _ = yysep218, yyq218, yy2arr218
			const yyr218 bool = false
			yyq218[0] = x.ObservedGeneration != nil
			yyq218[1] = x.LastScaleTime != nil
			yyq218[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn218 int
			if yyr218 || yy2arr218 {
				r.EncodeArrayStart(5)
			} else {
				yynn218 = 2
				for _, b := range yyq218 {
					if b {
						yynn218++
					}
				}
				r.EncodeMapStart(yynn218)
				yynn218 = 0
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq218[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy220 := *x.ObservedGeneration
						yym221 := z.EncBinary()
						_ = yym221
						if false {
						} else {
							r.EncodeInt(int64(yy220))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq218[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy222 := *x.ObservedGeneration
						yym223 := z.EncBinary()
						_ = yym223
						if false {
						} else {
							r.EncodeInt(int64(yy222))
						}
					}
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq218[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym225 := z.EncBinary()
						_ = yym225
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym225 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym225 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq218[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym226 := z.EncBinary()
						_ = yym226
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym226 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym226 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym228 := z.EncBinary()
				_ = yym228
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym229 := z.EncBinary()
				_ = yym229
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym231 := z.EncBinary()
				_ = yym231
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym232 := z.EncBinary()
				_ = yym232
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq218[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy234 := *x.CurrentCPUUtilizationPercentage
						yym235 := z.EncBinary()
						_ = yym235
						if false {
						} else {
							r.EncodeInt(int64(yy234))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq218[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy236 := *x.CurrentCPUUtilizationPercentage
						yym237 := z.EncBinary()
						_ = yym237
						if false {
						} else {
							r.EncodeInt(int64(yy236))
						}
					}
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym238 := z.DecBinary()
	_ = yym238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct239 := r.ContainerType()
		if yyct239 == codecSelferValueTypeMap1234 {
			yyl239 := r.ReadMapStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl239, d)
			}
		} else if yyct239 == codecSelferValueTypeArray1234 {
			yyl239 := r.ReadArrayStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys240Slc
	var yyhl240 bool = l >= 0
	for yyj240 := 0; ; yyj240++ {
		if yyhl240 {
			if yyj240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys240Slc = r.DecodeBytes(yys240Slc, true, true)
		yys240 := string(yys240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys240 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym242 := z.DecBinary()
				_ = yym242
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_v1.Time)
				}
				yym244 := z.DecBinary()
				_ = yym244
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym244 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym244 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int32(r.DecodeInt(32))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int32(r.DecodeInt(32))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int32)
				}
				yym248 := z.DecBinary()
				_ = yym248
				if false {
				} else {
					*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys240)
		} // end switch yys240
	} // end for yyj240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj249 int
	var yyb249 bool
	var yyhl249 bool = l >= 0
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym251 := z.DecBinary()
		_ = yym251
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_v1.Time)
		}
		yym253 := z.DecBinary()
		_ = yym253
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym253 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym253 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int32(r.DecodeInt(32))
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int32(r.DecodeInt(32))
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int32)
		}
		yym257 := z.DecBinary()
		_ = yym257
		if false {
		} else {
			*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj249++
		if yyhl249 {
			yyb249 = yyj249 > l
		} else {
			yyb249 = r.CheckBreak()
		}
		if yyb249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym258 := z.EncBinary()
		_ = yym258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep259 := !z.EncBinary()
			yy2arr259 := z.EncBasicHandle().StructToArray
			var yyq259 [5]bool
			_, _, _ = yysep259, yyq259, yy2arr259
			const yyr259 bool = false
			yyq259[0] = x.Kind != ""
			yyq259[1] = x.APIVersion != ""
			yyq259[2] = true
			yyq259[3] = true
			yyq259[4] = true
			var yynn259 int
			if yyr259 || yy2arr259 {
				r.EncodeArrayStart(5)
			} else {
				yynn259 = 0
				for _, b := range yyq259 {
					if b {
						yynn259++
					}
				}
				r.EncodeMapStart(yynn259)
				yynn259 = 0
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[0] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[1] {
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[2] {
					yy267 := &x.ObjectMeta
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else if z.HasExtensions() && z.EncExt(yy267) {
					} else {
						z.EncFallback(yy267)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy269 := &x.ObjectMeta
					yym270 := z.EncBinary()
					_ = yym270
					if false {
					} else if z.HasExtensions() && z.EncExt(yy269) {
					} else {
						z.EncFallback(yy269)
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[3] {
					yy272 := &x.Spec
					yy272.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy273 := &x.Spec
					yy273.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[4] {
					yy275 := &x.Status
					yy275.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy276 := &x.Status
					yy276.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym277 := z.DecBinary()
	_ = yym277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct278 := r.ContainerType()
		if yyct278 == codecSelferValueTypeMap1234 {
			yyl278 := r.ReadMapStart()
			if yyl278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl278, d)
			}
		} else if yyct278 == codecSelferValueTypeArray1234 {
			yyl278 := r.ReadArrayStart()
			if yyl278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys279Slc
	var yyhl279 bool = l >= 0
	for yyj279 := 0; ; yyj279++ {
		if yyhl279 {
			if yyj279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys279Slc = r.DecodeBytes(yys279Slc, true, true)
		yys279 := string(yys279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys279 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv282 := &x.ObjectMeta
				yym283 := z.DecBinary()
				_ = yym283
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv282) {
				} else {
					z.DecFallback(yyv282, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv284 := &x.Spec
				yyv284.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv285 := &x.Status
				yyv285.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys279)
		} // end switch yys279
	} // end for yyj279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj286 int
	var yyb286 bool
	var yyhl286 bool = l >= 0
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv289 := &x.ObjectMeta
		yym290 := z.DecBinary()
		_ = yym290
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv289) {
		} else {
			z.DecFallback(yyv289, false)
		}
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv291 := &x.Spec
		yyv291.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv292 := &x.Status
		yyv292.CodecDecodeSelf(d)
	}
	for {
		yyj286++
		if yyhl286 {
			yyb286 = yyj286 > l
		} else {
			yyb286 = r.CheckBreak()
		}
		if yyb286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym293 := z.EncBinary()
		_ = yym293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep294 := !z.EncBinary()
			yy2arr294 := z.EncBasicHandle().StructToArray
			var yyq294 [4]bool
			_, _, _ = yysep294, yyq294, yy2arr294
			const yyr294 bool = false
			yyq294[0] = x.Kind != ""
			yyq294[1] = x.APIVersion != ""
			yyq294[2] = true
			var yynn294 int
			if yyr294 || yy2arr294 {
				r.EncodeArrayStart(4)
			} else {
				yynn294 = 1
				for _, b := range yyq294 {
					if b {
						yynn294++
					}
				}
				r.EncodeMapStart(yynn294)
				yynn294 = 0
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq294[0] {
					yym296 := z.EncBinary()
					_ = yym296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym297 := z.EncBinary()
					_ = yym297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq294[1] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq294[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq294[2] {
					yy302 := &x.ListMeta
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy302) {
					} else {
						z.EncFallback(yy302)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq294[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy304 := &x.ListMeta
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy304) {
					} else {
						z.EncFallback(yy304)
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym307 := z.EncBinary()
					_ = yym307
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv314 := &x.ListMeta
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv314) {
				} else {
					z.DecFallback(yyv314, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv316 := &x.Items
				yym317 := z.DecBinary()
				_ = yym317
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv316), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv321 := &x.ListMeta
		yym322 := z.DecBinary()
		_ = yym322
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv321) {
		} else {
			z.DecFallback(yyv321, false)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv323 := &x.Items
		yym324 := z.DecBinary()
		_ = yym324
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv323), d)
		}
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym325 := z.EncBinary()
		_ = yym325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep326 := !z.EncBinary()
			yy2arr326 := z.EncBasicHandle().StructToArray
			var yyq326 [5]bool
			_, _, _ = yysep326, yyq326, yy2arr326
			const yyr326 bool = false
			yyq326[0] = x.Kind != ""
			yyq326[1] = x.APIVersion != ""
			yyq326[2] = true
			yyq326[3] = x.Description != ""
			yyq326[4] = len(x.Versions) != 0
			var yynn326 int
			if yyr326 || yy2arr326 {
				r.EncodeArrayStart(5)
			} else {
				yynn326 = 0
				for _, b := range yyq326 {
					if b {
						yynn326++
					}
				}
				r.EncodeMapStart(yynn326)
				yynn326 = 0
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[0] {
					yym328 := z.EncBinary()
					_ = yym328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym329 := z.EncBinary()
					_ = yym329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[1] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[2] {
					yy334 := &x.ObjectMeta
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else if z.HasExtensions() && z.EncExt(yy334) {
					} else {
						z.EncFallback(yy334)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq326[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy336 := &x.ObjectMeta
					yym337 := z.EncBinary()
					_ = yym337
					if false {
					} else if z.HasExtensions() && z.EncExt(yy336) {
					} else {
						z.EncFallback(yy336)
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[3] {
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym340 := z.EncBinary()
					_ = yym340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym342 := z.EncBinary()
						_ = yym342
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq326[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym343 := z.EncBinary()
						_ = yym343
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym344 := z.DecBinary()
	_ = yym344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct345 := r.ContainerType()
		if yyct345 == codecSelferValueTypeMap1234 {
			yyl345 := r.ReadMapStart()
			if yyl345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl345, d)
			}
		} else if yyct345 == codecSelferValueTypeArray1234 {
			yyl345 := r.ReadArrayStart()
			if yyl345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys346Slc
	var yyhl346 bool = l >= 0
	for yyj346 := 0; ; yyj346++ {
		if yyhl346 {
			if yyj346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys346Slc = r.DecodeBytes(yys346Slc, true, true)
		yys346 := string(yys346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys346 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv349 := &x.ObjectMeta
				yym350 := z.DecBinary()
				_ = yym350
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv349) {
				} else {
					z.DecFallback(yyv349, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv352 := &x.Versions
				yym353 := z.DecBinary()
				_ = yym353
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv352), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys346)
		} // end switch yys346
	} // end for yyj346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj354 int
	var yyb354 bool
	var yyhl354 bool = l >= 0
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv357 := &x.ObjectMeta
		yym358 := z.DecBinary()
		_ = yym358
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv357) {
		} else {
			z.DecFallback(yyv357, false)
		}
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv360 := &x.Versions
		yym361 := z.DecBinary()
		_ = yym361
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv360), d)
		}
	}
	for {
		yyj354++
		if yyhl354 {
			yyb354 = yyj354 > l
		} else {
			yyb354 = r.CheckBreak()
		}
		if yyb354 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj354-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym362 := z.EncBinary()
		_ = yym362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep363 := !z.EncBinary()
			yy2arr363 := z.EncBasicHandle().StructToArray
			var yyq363 [4]bool
			_, _, _ = yysep363, yyq363, yy2arr363
			const yyr363 bool = false
			yyq363[0] = x.Kind != ""
			yyq363[1] = x.APIVersion != ""
			yyq363[2] = true
			var yynn363 int
			if yyr363 || yy2arr363 {
				r.EncodeArrayStart(4)
			} else {
				yynn363 = 1
				for _, b := range yyq363 {
					if b {
						yynn363++
					}
				}
				r.EncodeMapStart(yynn363)
				yynn363 = 0
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq363[0] {
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq363[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq363[1] {
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq363[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq363[2] {
					yy371 := &x.ListMeta
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else if z.HasExtensions() && z.EncExt(yy371) {
					} else {
						z.EncFallback(yy371)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq363[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy373 := &x.ListMeta
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else if z.HasExtensions() && z.EncExt(yy373) {
					} else {
						z.EncFallback(yy373)
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym376 := z.EncBinary()
					_ = yym376
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym378 := z.DecBinary()
	_ = yym378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct379 := r.ContainerType()
		if yyct379 == codecSelferValueTypeMap1234 {
			yyl379 := r.ReadMapStart()
			if yyl379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl379, d)
			}
		} else if yyct379 == codecSelferValueTypeArray1234 {
			yyl379 := r.ReadArrayStart()
			if yyl379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys380Slc
	var yyhl380 bool = l >= 0
	for yyj380 := 0; ; yyj380++ {
		if yyhl380 {
			if yyj380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys380Slc = r.DecodeBytes(yys380Slc, true, true)
		yys380 := string(yys380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv383 := &x.ListMeta
				yym384 := z.DecBinary()
				_ = yym384
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv383) {
				} else {
					z.DecFallback(yyv383, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv385 := &x.Items
				yym386 := z.DecBinary()
				_ = yym386
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv385), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys380)
		} // end switch yys380
	} // end for yyj380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj387 int
	var yyb387 bool
	var yyhl387 bool = l >= 0
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv390 := &x.ListMeta
		yym391 := z.DecBinary()
		_ = yym391
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv390) {
		} else {
			z.DecFallback(yyv390, false)
		}
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv392 := &x.Items
		yym393 := z.DecBinary()
		_ = yym393
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv392), d)
		}
	}
	for {
		yyj387++
		if yyhl387 {
			yyb387 = yyj387 > l
		} else {
			yyb387 = r.CheckBreak()
		}
		if yyb387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym394 := z.EncBinary()
		_ = yym394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep395 := !z.EncBinary()
			yy2arr395 := z.EncBasicHandle().StructToArray
			var yyq395 [1]bool
			_, _, _ = yysep395, yyq395, yy2arr395
			const yyr395 bool = false
			yyq395[0] = x.Name != ""
			var yynn395 int
			if yyr395 || yy2arr395 {
				r.EncodeArrayStart(1)
			} else {
				yynn395 = 0
				for _, b := range yyq395 {
					if b {
						yynn395++
					}
				}
				r.EncodeMapStart(yynn395)
				yynn395 = 0
			}
			if yyr395 || yy2arr395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq395[0] {
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq395[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr395 || yy2arr395 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym399 := z.DecBinary()
	_ = yym399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct400 := r.ContainerType()
		if yyct400 == codecSelferValueTypeMap1234 {
			yyl400 := r.ReadMapStart()
			if yyl400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl400, d)
			}
		} else if yyct400 == codecSelferValueTypeArray1234 {
			yyl400 := r.ReadArrayStart()
			if yyl400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys401Slc
	var yyhl401 bool = l >= 0
	for yyj401 := 0; ; yyj401++ {
		if yyhl401 {
			if yyj401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys401Slc = r.DecodeBytes(yys401Slc, true, true)
		yys401 := string(yys401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys401 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys401)
		} // end switch yys401
	} // end for yyj401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj403 int
	var yyb403 bool
	var yyhl403 bool = l >= 0
	yyj403++
	if yyhl403 {
		yyb403 = yyj403 > l
	} else {
		yyb403 = r.CheckBreak()
	}
	if yyb403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj403++
		if yyhl403 {
			yyb403 = yyj403 > l
		} else {
			yyb403 = r.CheckBreak()
		}
		if yyb403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym405 := z.EncBinary()
		_ = yym405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep406 := !z.EncBinary()
			yy2arr406 := z.EncBasicHandle().StructToArray
			var yyq406 [4]bool
			_, _, _ = yysep406, yyq406, yy2arr406
			const yyr406 bool = false
			yyq406[0] = x.Kind != ""
			yyq406[1] = x.APIVersion != ""
			yyq406[2] = true
			yyq406[3] = len(x.Data) != 0
			var yynn406 int
			if yyr406 || yy2arr406 {
				r.EncodeArrayStart(4)
			} else {
				yynn406 = 0
				for _, b := range yyq406 {
					if b {
						yynn406++
					}
				}
				r.EncodeMapStart(yynn406)
				yynn406 = 0
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[0] {
					yym408 := z.EncBinary()
					_ = yym408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym409 := z.EncBinary()
					_ = yym409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[1] {
					yym411 := z.EncBinary()
					_ = yym411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym412 := z.EncBinary()
					_ = yym412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[2] {
					yy414 := &x.ObjectMeta
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else if z.HasExtensions() && z.EncExt(yy414) {
					} else {
						z.EncFallback(yy414)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.ObjectMeta
					yym417 := z.EncBinary()
					_ = yym417
					if false {
					} else if z.HasExtensions() && z.EncExt(yy416) {
					} else {
						z.EncFallback(yy416)
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym419 := z.EncBinary()
						_ = yym419
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq406[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym420 := z.EncBinary()
						_ = yym420
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym421 := z.DecBinary()
	_ = yym421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct422 := r.ContainerType()
		if yyct422 == codecSelferValueTypeMap1234 {
			yyl422 := r.ReadMapStart()
			if yyl422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl422, d)
			}
		} else if yyct422 == codecSelferValueTypeArray1234 {
			yyl422 := r.ReadArrayStart()
			if yyl422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys423Slc
	var yyhl423 bool = l >= 0
	for yyj423 := 0; ; yyj423++ {
		if yyhl423 {
			if yyj423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys423Slc = r.DecodeBytes(yys423Slc, true, true)
		yys423 := string(yys423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys423 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv426 := &x.ObjectMeta
				yym427 := z.DecBinary()
				_ = yym427
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv426) {
				} else {
					z.DecFallback(yyv426, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv428 := &x.Data
				yym429 := z.DecBinary()
				_ = yym429
				if false {
				} else {
					*yyv428 = r.DecodeBytes(*(*[]byte)(yyv428), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys423)
		} // end switch yys423
	} // end for yyj423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj430 int
	var yyb430 bool
	var yyhl430 bool = l >= 0
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv433 := &x.ObjectMeta
		yym434 := z.DecBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv433) {
		} else {
			z.DecFallback(yyv433, false)
		}
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv435 := &x.Data
		yym436 := z.DecBinary()
		_ = yym436
		if false {
		} else {
			*yyv435 = r.DecodeBytes(*(*[]byte)(yyv435), false, false)
		}
	}
	for {
		yyj430++
		if yyhl430 {
			yyb430 = yyj430 > l
		} else {
			yyb430 = r.CheckBreak()
		}
		if yyb430 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj430-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym437 := z.EncBinary()
		_ = yym437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep438 := !z.EncBinary()
			yy2arr438 := z.EncBasicHandle().StructToArray
			var yyq438 [5]bool
			_, _, _ = yysep438, yyq438, yy2arr438
			const yyr438 bool = false
			yyq438[0] = x.Kind != ""
			yyq438[1] = x.APIVersion != ""
			yyq438[2] = true
			yyq438[3] = true
			yyq438[4] = true
			var yynn438 int
			if yyr438 || yy2arr438 {
				r.EncodeArrayStart(5)
			} else {
				yynn438 = 0
				for _, b := range yyq438 {
					if b {
						yynn438++
					}
				}
				r.EncodeMapStart(yynn438)
				yynn438 = 0
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[0] {
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[1] {
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[2] {
					yy446 := &x.ObjectMeta
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy446) {
					} else {
						z.EncFallback(yy446)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy448 := &x.ObjectMeta
					yym449 := z.EncBinary()
					_ = yym449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy448) {
					} else {
						z.EncFallback(yy448)
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[3] {
					yy451 := &x.Spec
					yy451.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy452 := &x.Spec
					yy452.CodecEncodeSelf(e)
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[4] {
					yy454 := &x.Status
					yy454.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy455 := &x.Status
					yy455.CodecEncodeSelf(e)
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym456 := z.DecBinary()
	_ = yym456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct457 := r.ContainerType()
		if yyct457 == codecSelferValueTypeMap1234 {
			yyl457 := r.ReadMapStart()
			if yyl457 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl457, d)
			}
		} else if yyct457 == codecSelferValueTypeArray1234 {
			yyl457 := r.ReadArrayStart()
			if yyl457 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl457, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys458Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys458Slc
	var yyhl458 bool = l >= 0
	for yyj458 := 0; ; yyj458++ {
		if yyhl458 {
			if yyj458 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys458Slc = r.DecodeBytes(yys458Slc, true, true)
		yys458 := string(yys458Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys458 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv461 := &x.ObjectMeta
				yym462 := z.DecBinary()
				_ = yym462
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv461) {
				} else {
					z.DecFallback(yyv461, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv463 := &x.Spec
				yyv463.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv464 := &x.Status
				yyv464.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys458)
		} // end switch yys458
	} // end for yyj458
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj465 int
	var yyb465 bool
	var yyhl465 bool = l >= 0
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv468 := &x.ObjectMeta
		yym469 := z.DecBinary()
		_ = yym469
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv468) {
		} else {
			z.DecFallback(yyv468, false)
		}
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv470 := &x.Spec
		yyv470.CodecDecodeSelf(d)
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv471 := &x.Status
		yyv471.CodecDecodeSelf(d)
	}
	for {
		yyj465++
		if yyhl465 {
			yyb465 = yyj465 > l
		} else {
			yyb465 = r.CheckBreak()
		}
		if yyb465 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj465-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym472 := z.EncBinary()
		_ = yym472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep473 := !z.EncBinary()
			yy2arr473 := z.EncBasicHandle().StructToArray
			var yyq473 [9]bool
			_, _, _ = yysep473, yyq473, yy2arr473
			const yyr473 bool = false
			yyq473[0] = x.Replicas != nil
			yyq473[1] = x.Selector != nil
			yyq473[3] = true
			yyq473[4] = x.MinReadySeconds != 0
			yyq473[5] = x.RevisionHistoryLimit != nil
			yyq473[6] = x.Paused != false
			yyq473[7] = x.RollbackTo != nil
			yyq473[8] = x.ProgressDeadlineSeconds != nil
			var yynn473 int
			if yyr473 || yy2arr473 {
				r.EncodeArrayStart(9)
			} else {
				yynn473 = 1
				for _, b := range yyq473 {
					if b {
						yynn473++
					}
				}
				r.EncodeMapStart(yynn473)
				yynn473 = 0
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy475 := *x.Replicas
						yym476 := z.EncBinary()
						_ = yym476
						if false {
						} else {
							r.EncodeInt(int64(yy475))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy477 := *x.Replicas
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							r.EncodeInt(int64(yy477))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym480 := z.EncBinary()
						_ = yym480
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym481 := z.EncBinary()
						_ = yym481
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy483 := &x.Template
				yy483.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy484 := &x.Template
				yy484.CodecEncodeSelf(e)
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[3] {
					yy486 := &x.Strategy
					yy486.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy487 := &x.Strategy
					yy487.CodecEncodeSelf(e)
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[4] {
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq473[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[5] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy492 := *x.RevisionHistoryLimit
						yym493 := z.EncBinary()
						_ = yym493
						if false {
						} else {
							r.EncodeInt(int64(yy492))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy494 := *x.RevisionHistoryLimit
						yym495 := z.EncBinary()
						_ = yym495
						if false {
						} else {
							r.EncodeInt(int64(yy494))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[6] {
					yym497 := z.EncBinary()
					_ = yym497
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq473[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[8] {
					if x.ProgressDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy501 := *x.ProgressDeadlineSeconds
						yym502 := z.EncBinary()
						_ = yym502
						if false {
						} else {
							r.EncodeInt(int64(yy501))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("progressDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ProgressDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy503 := *x.ProgressDeadlineSeconds
						yym504 := z.EncBinary()
						_ = yym504
						if false {
						} else {
							r.EncodeInt(int64(yy503))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym505 := z.DecBinary()
	_ = yym505
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct506 := r.ContainerType()
		if yyct506 == codecSelferValueTypeMap1234 {
			yyl506 := r.ReadMapStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl506, d)
			}
		} else if yyct506 == codecSelferValueTypeArray1234 {
			yyl506 := r.ReadArrayStart()
			if yyl506 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl506, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys507Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys507Slc
	var yyhl507 bool = l >= 0
	for yyj507 := 0; ; yyj507++ {
		if yyhl507 {
			if yyj507 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys507Slc = r.DecodeBytes(yys507Slc, true, true)
		yys507 := string(yys507Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys507 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym509 := z.DecBinary()
				_ = yym509
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_v1.LabelSelector)
				}
				yym511 := z.DecBinary()
				_ = yym511
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg4_v1.PodTemplateSpec{}
			} else {
				yyv512 := &x.Template
				yyv512.CodecDecodeSelf(d)
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv513 := &x.Strategy
				yyv513.CodecDecodeSelf(d)
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int32)
				}
				yym516 := z.DecBinary()
				_ = yym516
				if false {
				} else {
					*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		case "progressDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ProgressDeadlineSeconds != nil {
					x.ProgressDeadlineSeconds = nil
				}
			} else {
				if x.ProgressDeadlineSeconds == nil {
					x.ProgressDeadlineSeconds = new(int32)
				}
				yym520 := z.DecBinary()
				_ = yym520
				if false {
				} else {
					*((*int32)(x.ProgressDeadlineSeconds)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys507)
		} // end switch yys507
	} // end for yyj507
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj521 int
	var yyb521 bool
	var yyhl521 bool = l >= 0
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym523 := z.DecBinary()
		_ = yym523
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_v1.LabelSelector)
		}
		yym525 := z.DecBinary()
		_ = yym525
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg4_v1.PodTemplateSpec{}
	} else {
		yyv526 := &x.Template
		yyv526.CodecDecodeSelf(d)
	}
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv527 := &x.Strategy
		yyv527.CodecDecodeSelf(d)
	}
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int32)
		}
		yym530 := z.DecBinary()
		_ = yym530
		if false {
		} else {
			*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
		}
	}
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	yyj521++
	if yyhl521 {
		yyb521 = yyj521 > l
	} else {
		yyb521 = r.CheckBreak()
	}
	if yyb521 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ProgressDeadlineSeconds != nil {
			x.ProgressDeadlineSeconds = nil
		}
	} else {
		if x.ProgressDeadlineSeconds == nil {
			x.ProgressDeadlineSeconds = new(int32)
		}
		yym534 := z.DecBinary()
		_ = yym534
		if false {
		} else {
			*((*int32)(x.ProgressDeadlineSeconds)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj521++
		if yyhl521 {
			yyb521 = yyj521 > l
		} else {
			yyb521 = r.CheckBreak()
		}
		if yyb521 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj521-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym535 := z.EncBinary()
		_ = yym535
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep536 := !z.EncBinary()
			yy2arr536 := z.EncBasicHandle().StructToArray
			var yyq536 [5]bool
			_, _, _ = yysep536, yyq536, yy2arr536
			const yyr536 bool = false
			yyq536[0] = x.Kind != ""
			yyq536[1] = x.APIVersion != ""
			yyq536[3] = len(x.UpdatedAnnotations) != 0
			var yynn536 int
			if yyr536 || yy2arr536 {
				r.EncodeArrayStart(5)
			} else {
				yynn536 = 2
				for _, b := range yyq536 {
					if b {
						yynn536++
					}
				}
				r.EncodeMapStart(yynn536)
				yynn536 = 0
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[0] {
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq536[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym539 := z.EncBinary()
					_ = yym539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[1] {
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq536[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym544 := z.EncBinary()
				_ = yym544
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym545 := z.EncBinary()
				_ = yym545
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq536[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym547 := z.EncBinary()
						_ = yym547
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq536[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym548 := z.EncBinary()
						_ = yym548
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy550 := &x.RollbackTo
				yy550.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy551 := &x.RollbackTo
				yy551.CodecEncodeSelf(e)
			}
			if yyr536 || yy2arr536 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym552 := z.DecBinary()
	_ = yym552
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct553 := r.ContainerType()
		if yyct553 == codecSelferValueTypeMap1234 {
			yyl553 := r.ReadMapStart()
			if yyl553 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl553, d)
			}
		} else if yyct553 == codecSelferValueTypeArray1234 {
			yyl553 := r.ReadArrayStart()
			if yyl553 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl553, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys554Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys554Slc
	var yyhl554 bool = l >= 0
	for yyj554 := 0; ; yyj554++ {
		if yyhl554 {
			if yyj554 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys554Slc = r.DecodeBytes(yys554Slc, true, true)
		yys554 := string(yys554Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys554 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv558 := &x.UpdatedAnnotations
				yym559 := z.DecBinary()
				_ = yym559
				if false {
				} else {
					z.F.DecMapStringStringX(yyv558, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv560 := &x.RollbackTo
				yyv560.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys554)
		} // end switch yys554
	} // end for yyj554
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj561 int
	var yyb561 bool
	var yyhl561 bool = l >= 0
	yyj561++
	if yyhl561 {
		yyb561 = yyj561 > l
	} else {
		yyb561 = r.CheckBreak()
	}
	if yyb561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj561++
	if yyhl561 {
		yyb561 = yyj561 > l
	} else {
		yyb561 = r.CheckBreak()
	}
	if yyb561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj561++
	if yyhl561 {
		yyb561 = yyj561 > l
	} else {
		yyb561 = r.CheckBreak()
	}
	if yyb561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj561++
	if yyhl561 {
		yyb561 = yyj561 > l
	} else {
		yyb561 = r.CheckBreak()
	}
	if yyb561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv565 := &x.UpdatedAnnotations
		yym566 := z.DecBinary()
		_ = yym566
		if false {
		} else {
			z.F.DecMapStringStringX(yyv565, false, d)
		}
	}
	yyj561++
	if yyhl561 {
		yyb561 = yyj561 > l
	} else {
		yyb561 = r.CheckBreak()
	}
	if yyb561 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv567 := &x.RollbackTo
		yyv567.CodecDecodeSelf(d)
	}
	for {
		yyj561++
		if yyhl561 {
			yyb561 = yyj561 > l
		} else {
			yyb561 = r.CheckBreak()
		}
		if yyb561 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj561-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym568 := z.EncBinary()
		_ = yym568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep569 := !z.EncBinary()
			yy2arr569 := z.EncBasicHandle().StructToArray
			var yyq569 [1]bool
			_, _, _ = yysep569, yyq569, yy2arr569
			const yyr569 bool = false
			yyq569[0] = x.Revision != 0
			var yynn569 int
			if yyr569 || yy2arr569 {
				r.EncodeArrayStart(1)
			} else {
				yynn569 = 0
				for _, b := range yyq569 {
					if b {
						yynn569++
					}
				}
				r.EncodeMapStart(yynn569)
				yynn569 = 0
			}
			if yyr569 || yy2arr569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq569[0] {
					yym571 := z.EncBinary()
					_ = yym571
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq569[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym572 := z.EncBinary()
					_ = yym572
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr569 || yy2arr569 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct574 := r.ContainerType()
		if yyct574 == codecSelferValueTypeMap1234 {
			yyl574 := r.ReadMapStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl574, d)
			}
		} else if yyct574 == codecSelferValueTypeArray1234 {
			yyl574 := r.ReadArrayStart()
			if yyl574 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl574, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys575Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys575Slc
	var yyhl575 bool = l >= 0
	for yyj575 := 0; ; yyj575++ {
		if yyhl575 {
			if yyj575 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys575Slc = r.DecodeBytes(yys575Slc, true, true)
		yys575 := string(yys575Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys575 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys575)
		} // end switch yys575
	} // end for yyj575
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj577 int
	var yyb577 bool
	var yyhl577 bool = l >= 0
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj577++
		if yyhl577 {
			yyb577 = yyj577 > l
		} else {
			yyb577 = r.CheckBreak()
		}
		if yyb577 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj577-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym579 := z.EncBinary()
		_ = yym579
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep580 := !z.EncBinary()
			yy2arr580 := z.EncBasicHandle().StructToArray
			var yyq580 [2]bool
			_, _, _ = yysep580, yyq580, yy2arr580
			const yyr580 bool = false
			yyq580[0] = x.Type != ""
			yyq580[1] = x.RollingUpdate != nil
			var yynn580 int
			if yyr580 || yy2arr580 {
				r.EncodeArrayStart(2)
			} else {
				yynn580 = 0
				for _, b := range yyq580 {
					if b {
						yynn580++
					}
				}
				r.EncodeMapStart(yynn580)
				yynn580 = 0
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq580[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq580[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq580[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq580[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr580 || yy2arr580 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym583 := z.DecBinary()
	_ = yym583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct584 := r.ContainerType()
		if yyct584 == codecSelferValueTypeMap1234 {
			yyl584 := r.ReadMapStart()
			if yyl584 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl584, d)
			}
		} else if yyct584 == codecSelferValueTypeArray1234 {
			yyl584 := r.ReadArrayStart()
			if yyl584 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl584, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys585Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys585Slc
	var yyhl585 bool = l >= 0
	for yyj585 := 0; ; yyj585++ {
		if yyhl585 {
			if yyj585 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys585Slc = r.DecodeBytes(yys585Slc, true, true)
		yys585 := string(yys585Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys585 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys585)
		} // end switch yys585
	} // end for yyj585
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj588 int
	var yyb588 bool
	var yyhl588 bool = l >= 0
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj588++
	if yyhl588 {
		yyb588 = yyj588 > l
	} else {
		yyb588 = r.CheckBreak()
	}
	if yyb588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj588++
		if yyhl588 {
			yyb588 = yyj588 > l
		} else {
			yyb588 = r.CheckBreak()
		}
		if yyb588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym591 := z.EncBinary()
	_ = yym591
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym592 := z.DecBinary()
	_ = yym592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym593 := z.EncBinary()
		_ = yym593
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep594 := !z.EncBinary()
			yy2arr594 := z.EncBasicHandle().StructToArray
			var yyq594 [2]bool
			_, _, _ = yysep594, yyq594, yy2arr594
			const yyr594 bool = false
			yyq594[0] = x.MaxUnavailable != nil
			yyq594[1] = x.MaxSurge != nil
			var yynn594 int
			if yyr594 || yy2arr594 {
				r.EncodeArrayStart(2)
			} else {
				yynn594 = 0
				for _, b := range yyq594 {
					if b {
						yynn594++
					}
				}
				r.EncodeMapStart(yynn594)
				yynn594 = 0
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq594[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym596 := z.EncBinary()
						_ = yym596
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym596 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq594[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym597 := z.EncBinary()
						_ = yym597
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym597 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq594[1] {
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym599 := z.EncBinary()
						_ = yym599
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym599 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq594[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym600 := z.EncBinary()
						_ = yym600
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym600 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				}
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym601 := z.DecBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct602 := r.ContainerType()
		if yyct602 == codecSelferValueTypeMap1234 {
			yyl602 := r.ReadMapStart()
			if yyl602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl602, d)
			}
		} else if yyct602 == codecSelferValueTypeArray1234 {
			yyl602 := r.ReadArrayStart()
			if yyl602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys603Slc
	var yyhl603 bool = l >= 0
	for yyj603 := 0; ; yyj603++ {
		if yyhl603 {
			if yyj603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys603Slc = r.DecodeBytes(yys603Slc, true, true)
		yys603 := string(yys603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys603 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg5_intstr.IntOrString)
				}
				yym605 := z.DecBinary()
				_ = yym605
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym605 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				if x.MaxSurge != nil {
					x.MaxSurge = nil
				}
			} else {
				if x.MaxSurge == nil {
					x.MaxSurge = new(pkg5_intstr.IntOrString)
				}
				yym607 := z.DecBinary()
				_ = yym607
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
				} else if !yym607 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxSurge)
				} else {
					z.DecFallback(x.MaxSurge, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys603)
		} // end switch yys603
	} // end for yyj603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj608 int
	var yyb608 bool
	var yyhl608 bool = l >= 0
	yyj608++
	if yyhl608 {
		yyb608 = yyj608 > l
	} else {
		yyb608 = r.CheckBreak()
	}
	if yyb608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg5_intstr.IntOrString)
		}
		yym610 := z.DecBinary()
		_ = yym610
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym610 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj608++
	if yyhl608 {
		yyb608 = yyj608 > l
	} else {
		yyb608 = r.CheckBreak()
	}
	if yyb608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxSurge != nil {
			x.MaxSurge = nil
		}
	} else {
		if x.MaxSurge == nil {
			x.MaxSurge = new(pkg5_intstr.IntOrString)
		}
		yym612 := z.DecBinary()
		_ = yym612
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
		} else if !yym612 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxSurge)
		} else {
			z.DecFallback(x.MaxSurge, false)
		}
	}
	for {
		yyj608++
		if yyhl608 {
			yyb608 = yyj608 > l
		} else {
			yyb608 = r.CheckBreak()
		}
		if yyb608 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj608-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym613 := z.EncBinary()
		_ = yym613
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep614 := !z.EncBinary()
			yy2arr614 := z.EncBasicHandle().StructToArray
			var yyq614 [7]bool
			_, _, _ = yysep614, yyq614, yy2arr614
			const yyr614 bool = false
			yyq614[0] = x.ObservedGeneration != 0
			yyq614[1] = x.Replicas != 0
			yyq614[2] = x.UpdatedReplicas != 0
			yyq614[3] = x.ReadyReplicas != 0
			yyq614[4] = x.AvailableReplicas != 0
			yyq614[5] = x.UnavailableReplicas != 0
			yyq614[6] = len(x.Conditions) != 0
			var yynn614 int
			if yyr614 || yy2arr614 {
				r.EncodeArrayStart(7)
			} else {
				yynn614 = 0
				for _, b := range yyq614 {
					if b {
						yynn614++
					}
				}
				r.EncodeMapStart(yynn614)
				yynn614 = 0
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[0] {
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq614[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym617 := z.EncBinary()
					_ = yym617
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[1] {
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq614[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[2] {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq614[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[3] {
					yym625 := z.EncBinary()
					_ = yym625
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq614[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[4] {
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq614[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[5] {
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq614[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym632 := z.EncBinary()
					_ = yym632
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq614[6] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym634 := z.EncBinary()
						_ = yym634
						if false {
						} else {
							h.encSliceDeploymentCondition(([]DeploymentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq614[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym635 := z.EncBinary()
						_ = yym635
						if false {
						} else {
							h.encSliceDeploymentCondition(([]DeploymentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr614 || yy2arr614 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym636 := z.DecBinary()
	_ = yym636
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct637 := r.ContainerType()
		if yyct637 == codecSelferValueTypeMap1234 {
			yyl637 := r.ReadMapStart()
			if yyl637 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl637, d)
			}
		} else if yyct637 == codecSelferValueTypeArray1234 {
			yyl637 := r.ReadArrayStart()
			if yyl637 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl637, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys638Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys638Slc
	var yyhl638 bool = l >= 0
	for yyj638 := 0; ; yyj638++ {
		if yyhl638 {
			if yyj638 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys638Slc = r.DecodeBytes(yys638Slc, true, true)
		yys638 := string(yys638Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys638 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv645 := &x.Conditions
				yym646 := z.DecBinary()
				_ = yym646
				if false {
				} else {
					h.decSliceDeploymentCondition((*[]DeploymentCondition)(yyv645), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys638)
		} // end switch yys638
	} // end for yyj638
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj647 int
	var yyb647 bool
	var yyhl647 bool = l >= 0
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	yyj647++
	if yyhl647 {
		yyb647 = yyj647 > l
	} else {
		yyb647 = r.CheckBreak()
	}
	if yyb647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv654 := &x.Conditions
		yym655 := z.DecBinary()
		_ = yym655
		if false {
		} else {
			h.decSliceDeploymentCondition((*[]DeploymentCondition)(yyv654), d)
		}
	}
	for {
		yyj647++
		if yyhl647 {
			yyb647 = yyj647 > l
		} else {
			yyb647 = r.CheckBreak()
		}
		if yyb647 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj647-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym656 := z.EncBinary()
	_ = yym656
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym657 := z.DecBinary()
	_ = yym657
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *DeploymentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym658 := z.EncBinary()
		_ = yym658
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep659 := !z.EncBinary()
			yy2arr659 := z.EncBasicHandle().StructToArray
			var yyq659 [6]bool
			_, _, _ = yysep659, yyq659, yy2arr659
			const yyr659 bool = false
			yyq659[2] = true
			yyq659[3] = true
			yyq659[4] = x.Reason != ""
			yyq659[5] = x.Message != ""
			var yynn659 int
			if yyr659 || yy2arr659 {
				r.EncodeArrayStart(6)
			} else {
				yynn659 = 2
				for _, b := range yyq659 {
					if b {
						yynn659++
					}
				}
				r.EncodeMapStart(yynn659)
				yynn659 = 0
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym662 := z.EncBinary()
				_ = yym662
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq659[2] {
					yy665 := &x.LastUpdateTime
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else if z.HasExtensions() && z.EncExt(yy665) {
					} else if yym666 {
						z.EncBinaryMarshal(yy665)
					} else if !yym666 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy665)
					} else {
						z.EncFallback(yy665)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq659[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastUpdateTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy667 := &x.LastUpdateTime
					yym668 := z.EncBinary()
					_ = yym668
					if false {
					} else if z.HasExtensions() && z.EncExt(yy667) {
					} else if yym668 {
						z.EncBinaryMarshal(yy667)
					} else if !yym668 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy667)
					} else {
						z.EncFallback(yy667)
					}
				}
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq659[3] {
					yy670 := &x.LastTransitionTime
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else if z.HasExtensions() && z.EncExt(yy670) {
					} else if yym671 {
						z.EncBinaryMarshal(yy670)
					} else if !yym671 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy670)
					} else {
						z.EncFallback(yy670)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq659[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy672 := &x.LastTransitionTime
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else if z.HasExtensions() && z.EncExt(yy672) {
					} else if yym673 {
						z.EncBinaryMarshal(yy672)
					} else if !yym673 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy672)
					} else {
						z.EncFallback(yy672)
					}
				}
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq659[4] {
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq659[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym676 := z.EncBinary()
					_ = yym676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq659[5] {
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq659[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr659 || yy2arr659 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym680 := z.DecBinary()
	_ = yym680
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct681 := r.ContainerType()
		if yyct681 == codecSelferValueTypeMap1234 {
			yyl681 := r.ReadMapStart()
			if yyl681 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl681, d)
			}
		} else if yyct681 == codecSelferValueTypeArray1234 {
			yyl681 := r.ReadArrayStart()
			if yyl681 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl681, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys682Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys682Slc
	var yyhl682 bool = l >= 0
	for yyj682 := 0; ; yyj682++ {
		if yyhl682 {
			if yyj682 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys682Slc = r.DecodeBytes(yys682Slc, true, true)
		yys682 := string(yys682Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys682 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg4_v1.ConditionStatus(r.DecodeString())
			}
		case "lastUpdateTime":
			if r.TryDecodeAsNil() {
				x.LastUpdateTime = pkg1_v1.Time{}
			} else {
				yyv685 := &x.LastUpdateTime
				yym686 := z.DecBinary()
				_ = yym686
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv685) {
				} else if yym686 {
					z.DecBinaryUnmarshal(yyv685)
				} else if !yym686 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv685)
				} else {
					z.DecFallback(yyv685, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_v1.Time{}
			} else {
				yyv687 := &x.LastTransitionTime
				yym688 := z.DecBinary()
				_ = yym688
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv687) {
				} else if yym688 {
					z.DecBinaryUnmarshal(yyv687)
				} else if !yym688 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv687)
				} else {
					z.DecFallback(yyv687, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys682)
		} // end switch yys682
	} // end for yyj682
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj691 int
	var yyb691 bool
	var yyhl691 bool = l >= 0
	yyj691++
	if yyhl691 {
		yyb691 = yyj691 > l
	} else {
		yyb691 = r.CheckBreak()
	}
	if yyb691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentConditionType(r.DecodeString())
	}
	yyj691++
	if yyhl691 {
		yyb691 = yyj691 > l
	} else {
		yyb691 = r.CheckBreak()
	}
	if yyb691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg4_v1.ConditionStatus(r.DecodeString())
	}
	yyj691++
	if yyhl691 {
		yyb691 = yyj691 > l
	} else {
		yyb691 = r.CheckBreak()
	}
	if yyb691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastUpdateTime = pkg1_v1.Time{}
	} else {
		yyv694 := &x.LastUpdateTime
		yym695 := z.DecBinary()
		_ = yym695
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv694) {
		} else if yym695 {
			z.DecBinaryUnmarshal(yyv694)
		} else if !yym695 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv694)
		} else {
			z.DecFallback(yyv694, false)
		}
	}
	yyj691++
	if yyhl691 {
		yyb691 = yyj691 > l
	} else {
		yyb691 = r.CheckBreak()
	}
	if yyb691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_v1.Time{}
	} else {
		yyv696 := &x.LastTransitionTime
		yym697 := z.DecBinary()
		_ = yym697
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv696) {
		} else if yym697 {
			z.DecBinaryUnmarshal(yyv696)
		} else if !yym697 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv696)
		} else {
			z.DecFallback(yyv696, false)
		}
	}
	yyj691++
	if yyhl691 {
		yyb691 = yyj691 > l
	} else {
		yyb691 = r.CheckBreak()
	}
	if yyb691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj691++
	if yyhl691 {
		yyb691 = yyj691 > l
	} else {
		yyb691 = r.CheckBreak()
	}
	if yyb691 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj691++
		if yyhl691 {
			yyb691 = yyj691 > l
		} else {
			yyb691 = r.CheckBreak()
		}
		if yyb691 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj691-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym700 := z.EncBinary()
		_ = yym700
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep701 := !z.EncBinary()
			yy2arr701 := z.EncBasicHandle().StructToArray
			var yyq701 [4]bool
			_, _, _ = yysep701, yyq701, yy2arr701
			const yyr701 bool = false
			yyq701[0] = x.Kind != ""
			yyq701[1] = x.APIVersion != ""
			yyq701[2] = true
			var yynn701 int
			if yyr701 || yy2arr701 {
				r.EncodeArrayStart(4)
			} else {
				yynn701 = 1
				for _, b := range yyq701 {
					if b {
						yynn701++
					}
				}
				r.EncodeMapStart(yynn701)
				yynn701 = 0
			}
			if yyr701 || yy2arr701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq701[0] {
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq701[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym704 := z.EncBinary()
					_ = yym704
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr701 || yy2arr701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq701[1] {
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq701[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym707 := z.EncBinary()
					_ = yym707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr701 || yy2arr701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq701[2] {
					yy709 := &x.ListMeta
					yym710 := z.EncBinary()
					_ = yym710
					if false {
					} else if z.HasExtensions() && z.EncExt(yy709) {
					} else {
						z.EncFallback(yy709)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq701[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy711 := &x.ListMeta
					yym712 := z.EncBinary()
					_ = yym712
					if false {
					} else if z.HasExtensions() && z.EncExt(yy711) {
					} else {
						z.EncFallback(yy711)
					}
				}
			}
			if yyr701 || yy2arr701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr701 || yy2arr701 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym716 := z.DecBinary()
	_ = yym716
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct717 := r.ContainerType()
		if yyct717 == codecSelferValueTypeMap1234 {
			yyl717 := r.ReadMapStart()
			if yyl717 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl717, d)
			}
		} else if yyct717 == codecSelferValueTypeArray1234 {
			yyl717 := r.ReadArrayStart()
			if yyl717 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl717, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys718Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys718Slc
	var yyhl718 bool = l >= 0
	for yyj718 := 0; ; yyj718++ {
		if yyhl718 {
			if yyj718 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys718Slc = r.DecodeBytes(yys718Slc, true, true)
		yys718 := string(yys718Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys718 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv721 := &x.ListMeta
				yym722 := z.DecBinary()
				_ = yym722
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv721) {
				} else {
					z.DecFallback(yyv721, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv723 := &x.Items
				yym724 := z.DecBinary()
				_ = yym724
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv723), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys718)
		} // end switch yys718
	} // end for yyj718
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj725 int
	var yyb725 bool
	var yyhl725 bool = l >= 0
	yyj725++
	if yyhl725 {
		yyb725 = yyj725 > l
	} else {
		yyb725 = r.CheckBreak()
	}
	if yyb725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj725++
	if yyhl725 {
		yyb725 = yyj725 > l
	} else {
		yyb725 = r.CheckBreak()
	}
	if yyb725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj725++
	if yyhl725 {
		yyb725 = yyj725 > l
	} else {
		yyb725 = r.CheckBreak()
	}
	if yyb725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv728 := &x.ListMeta
		yym729 := z.DecBinary()
		_ = yym729
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv728) {
		} else {
			z.DecFallback(yyv728, false)
		}
	}
	yyj725++
	if yyhl725 {
		yyb725 = yyj725 > l
	} else {
		yyb725 = r.CheckBreak()
	}
	if yyb725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv730 := &x.Items
		yym731 := z.DecBinary()
		_ = yym731
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv730), d)
		}
	}
	for {
		yyj725++
		if yyhl725 {
			yyb725 = yyj725 > l
		} else {
			yyb725 = r.CheckBreak()
		}
		if yyb725 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj725-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym732 := z.EncBinary()
		_ = yym732
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep733 := !z.EncBinary()
			yy2arr733 := z.EncBasicHandle().StructToArray
			var yyq733 [2]bool
			_, _, _ = yysep733, yyq733, yy2arr733
			const yyr733 bool = false
			yyq733[0] = x.Selector != nil
			var yynn733 int
			if yyr733 || yy2arr733 {
				r.EncodeArrayStart(2)
			} else {
				yynn733 = 1
				for _, b := range yyq733 {
					if b {
						yynn733++
					}
				}
				r.EncodeMapStart(yynn733)
				yynn733 = 0
			}
			if yyr733 || yy2arr733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq733[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym735 := z.EncBinary()
						_ = yym735
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq733[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym736 := z.EncBinary()
						_ = yym736
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr733 || yy2arr733 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy738 := &x.Template
				yy738.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy739 := &x.Template
				yy739.CodecEncodeSelf(e)
			}
			if yyr733 || yy2arr733 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym740 := z.DecBinary()
	_ = yym740
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct741 := r.ContainerType()
		if yyct741 == codecSelferValueTypeMap1234 {
			yyl741 := r.ReadMapStart()
			if yyl741 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl741, d)
			}
		} else if yyct741 == codecSelferValueTypeArray1234 {
			yyl741 := r.ReadArrayStart()
			if yyl741 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl741, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys742Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys742Slc
	var yyhl742 bool = l >= 0
	for yyj742 := 0; ; yyj742++ {
		if yyhl742 {
			if yyj742 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys742Slc = r.DecodeBytes(yys742Slc, true, true)
		yys742 := string(yys742Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys742 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_v1.LabelSelector)
				}
				yym744 := z.DecBinary()
				_ = yym744
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg4_v1.PodTemplateSpec{}
			} else {
				yyv745 := &x.Template
				yyv745.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys742)
		} // end switch yys742
	} // end for yyj742
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj746 int
	var yyb746 bool
	var yyhl746 bool = l >= 0
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_v1.LabelSelector)
		}
		yym748 := z.DecBinary()
		_ = yym748
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj746++
	if yyhl746 {
		yyb746 = yyj746 > l
	} else {
		yyb746 = r.CheckBreak()
	}
	if yyb746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg4_v1.PodTemplateSpec{}
	} else {
		yyv749 := &x.Template
		yyv749.CodecDecodeSelf(d)
	}
	for {
		yyj746++
		if yyhl746 {
			yyb746 = yyj746 > l
		} else {
			yyb746 = r.CheckBreak()
		}
		if yyb746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym750 := z.EncBinary()
		_ = yym750
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep751 := !z.EncBinary()
			yy2arr751 := z.EncBasicHandle().StructToArray
			var yyq751 [5]bool
			_, _, _ = yysep751, yyq751, yy2arr751
			const yyr751 bool = false
			yyq751[4] = x.ObservedGeneration != 0
			var yynn751 int
			if yyr751 || yy2arr751 {
				r.EncodeArrayStart(5)
			} else {
				yynn751 = 4
				for _, b := range yyq751 {
					if b {
						yynn751++
					}
				}
				r.EncodeMapStart(yynn751)
				yynn751 = 0
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym753 := z.EncBinary()
				_ = yym753
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym754 := z.EncBinary()
				_ = yym754
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym759 := z.EncBinary()
				_ = yym759
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym760 := z.EncBinary()
				_ = yym760
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym762 := z.EncBinary()
				_ = yym762
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberReady"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym763 := z.EncBinary()
				_ = yym763
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq751[4] {
					yym765 := z.EncBinary()
					_ = yym765
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq751[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym766 := z.EncBinary()
					_ = yym766
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr751 || yy2arr751 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym767 := z.DecBinary()
	_ = yym767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct768 := r.ContainerType()
		if yyct768 == codecSelferValueTypeMap1234 {
			yyl768 := r.ReadMapStart()
			if yyl768 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl768, d)
			}
		} else if yyct768 == codecSelferValueTypeArray1234 {
			yyl768 := r.ReadArrayStart()
			if yyl768 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl768, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys769Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys769Slc
	var yyhl769 bool = l >= 0
	for yyj769 := 0; ; yyj769++ {
		if yyhl769 {
			if yyj769 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys769Slc = r.DecodeBytes(yys769Slc, true, true)
		yys769 := string(yys769Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys769 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberReady":
			if r.TryDecodeAsNil() {
				x.NumberReady = 0
			} else {
				x.NumberReady = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys769)
		} // end switch yys769
	} // end for yyj769
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj775 int
	var yyb775 bool
	var yyhl775 bool = l >= 0
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberReady = 0
	} else {
		x.NumberReady = int32(r.DecodeInt(32))
	}
	yyj775++
	if yyhl775 {
		yyb775 = yyj775 > l
	} else {
		yyb775 = r.CheckBreak()
	}
	if yyb775 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj775++
		if yyhl775 {
			yyb775 = yyj775 > l
		} else {
			yyb775 = r.CheckBreak()
		}
		if yyb775 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj775-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym781 := z.EncBinary()
		_ = yym781
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep782 := !z.EncBinary()
			yy2arr782 := z.EncBasicHandle().StructToArray
			var yyq782 [5]bool
			_, _, _ = yysep782, yyq782, yy2arr782
			const yyr782 bool = false
			yyq782[0] = x.Kind != ""
			yyq782[1] = x.APIVersion != ""
			yyq782[2] = true
			yyq782[3] = true
			yyq782[4] = true
			var yynn782 int
			if yyr782 || yy2arr782 {
				r.EncodeArrayStart(5)
			} else {
				yynn782 = 0
				for _, b := range yyq782 {
					if b {
						yynn782++
					}
				}
				r.EncodeMapStart(yynn782)
				yynn782 = 0
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[0] {
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq782[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[1] {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq782[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[2] {
					yy790 := &x.ObjectMeta
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else if z.HasExtensions() && z.EncExt(yy790) {
					} else {
						z.EncFallback(yy790)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq782[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy792 := &x.ObjectMeta
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else if z.HasExtensions() && z.EncExt(yy792) {
					} else {
						z.EncFallback(yy792)
					}
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[3] {
					yy795 := &x.Spec
					yy795.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq782[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy796 := &x.Spec
					yy796.CodecEncodeSelf(e)
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq782[4] {
					yy798 := &x.Status
					yy798.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq782[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy799 := &x.Status
					yy799.CodecEncodeSelf(e)
				}
			}
			if yyr782 || yy2arr782 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym800 := z.DecBinary()
	_ = yym800
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct801 := r.ContainerType()
		if yyct801 == codecSelferValueTypeMap1234 {
			yyl801 := r.ReadMapStart()
			if yyl801 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl801, d)
			}
		} else if yyct801 == codecSelferValueTypeArray1234 {
			yyl801 := r.ReadArrayStart()
			if yyl801 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl801, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys802Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys802Slc
	var yyhl802 bool = l >= 0
	for yyj802 := 0; ; yyj802++ {
		if yyhl802 {
			if yyj802 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys802Slc = r.DecodeBytes(yys802Slc, true, true)
		yys802 := string(yys802Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys802 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv805 := &x.ObjectMeta
				yym806 := z.DecBinary()
				_ = yym806
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv805) {
				} else {
					z.DecFallback(yyv805, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv807 := &x.Spec
				yyv807.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv808 := &x.Status
				yyv808.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys802)
		} // end switch yys802
	} // end for yyj802
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj809 int
	var yyb809 bool
	var yyhl809 bool = l >= 0
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv812 := &x.ObjectMeta
		yym813 := z.DecBinary()
		_ = yym813
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv812) {
		} else {
			z.DecFallback(yyv812, false)
		}
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv814 := &x.Spec
		yyv814.CodecDecodeSelf(d)
	}
	yyj809++
	if yyhl809 {
		yyb809 = yyj809 > l
	} else {
		yyb809 = r.CheckBreak()
	}
	if yyb809 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv815 := &x.Status
		yyv815.CodecDecodeSelf(d)
	}
	for {
		yyj809++
		if yyhl809 {
			yyb809 = yyj809 > l
		} else {
			yyb809 = r.CheckBreak()
		}
		if yyb809 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj809-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym816 := z.EncBinary()
		_ = yym816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep817 := !z.EncBinary()
			yy2arr817 := z.EncBasicHandle().StructToArray
			var yyq817 [4]bool
			_, _, _ = yysep817, yyq817, yy2arr817
			const yyr817 bool = false
			yyq817[0] = x.Kind != ""
			yyq817[1] = x.APIVersion != ""
			yyq817[2] = true
			var yynn817 int
			if yyr817 || yy2arr817 {
				r.EncodeArrayStart(4)
			} else {
				yynn817 = 1
				for _, b := range yyq817 {
					if b {
						yynn817++
					}
				}
				r.EncodeMapStart(yynn817)
				yynn817 = 0
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq817[0] {
					yym819 := z.EncBinary()
					_ = yym819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq817[1] {
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq817[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym823 := z.EncBinary()
					_ = yym823
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq817[2] {
					yy825 := &x.ListMeta
					yym826 := z.EncBinary()
					_ = yym826
					if false {
					} else if z.HasExtensions() && z.EncExt(yy825) {
					} else {
						z.EncFallback(yy825)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq817[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy827 := &x.ListMeta
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else if z.HasExtensions() && z.EncExt(yy827) {
					} else {
						z.EncFallback(yy827)
					}
				}
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr817 || yy2arr817 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym832 := z.DecBinary()
	_ = yym832
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct833 := r.ContainerType()
		if yyct833 == codecSelferValueTypeMap1234 {
			yyl833 := r.ReadMapStart()
			if yyl833 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl833, d)
			}
		} else if yyct833 == codecSelferValueTypeArray1234 {
			yyl833 := r.ReadArrayStart()
			if yyl833 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl833, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys834Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys834Slc
	var yyhl834 bool = l >= 0
	for yyj834 := 0; ; yyj834++ {
		if yyhl834 {
			if yyj834 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys834Slc = r.DecodeBytes(yys834Slc, true, true)
		yys834 := string(yys834Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys834 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv837 := &x.ListMeta
				yym838 := z.DecBinary()
				_ = yym838
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv837) {
				} else {
					z.DecFallback(yyv837, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv839 := &x.Items
				yym840 := z.DecBinary()
				_ = yym840
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv839), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys834)
		} // end switch yys834
	} // end for yyj834
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj841 int
	var yyb841 bool
	var yyhl841 bool = l >= 0
	yyj841++
	if yyhl841 {
		yyb841 = yyj841 > l
	} else {
		yyb841 = r.CheckBreak()
	}
	if yyb841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj841++
	if yyhl841 {
		yyb841 = yyj841 > l
	} else {
		yyb841 = r.CheckBreak()
	}
	if yyb841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj841++
	if yyhl841 {
		yyb841 = yyj841 > l
	} else {
		yyb841 = r.CheckBreak()
	}
	if yyb841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv844 := &x.ListMeta
		yym845 := z.DecBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv844) {
		} else {
			z.DecFallback(yyv844, false)
		}
	}
	yyj841++
	if yyhl841 {
		yyb841 = yyj841 > l
	} else {
		yyb841 = r.CheckBreak()
	}
	if yyb841 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv846 := &x.Items
		yym847 := z.DecBinary()
		_ = yym847
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv846), d)
		}
	}
	for {
		yyj841++
		if yyhl841 {
			yyb841 = yyj841 > l
		} else {
			yyb841 = r.CheckBreak()
		}
		if yyb841 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj841-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym848 := z.EncBinary()
		_ = yym848
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep849 := !z.EncBinary()
			yy2arr849 := z.EncBasicHandle().StructToArray
			var yyq849 [4]bool
			_, _, _ = yysep849, yyq849, yy2arr849
			const yyr849 bool = false
			yyq849[0] = x.Kind != ""
			yyq849[1] = x.APIVersion != ""
			yyq849[2] = true
			var yynn849 int
			if yyr849 || yy2arr849 {
				r.EncodeArrayStart(4)
			} else {
				yynn849 = 1
				for _, b := range yyq849 {
					if b {
						yynn849++
					}
				}
				r.EncodeMapStart(yynn849)
				yynn849 = 0
			}
			if yyr849 || yy2arr849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq849[0] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq849[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr849 || yy2arr849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq849[1] {
					yym854 := z.EncBinary()
					_ = yym854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq849[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr849 || yy2arr849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq849[2] {
					yy857 := &x.ListMeta
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else if z.HasExtensions() && z.EncExt(yy857) {
					} else {
						z.EncFallback(yy857)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq849[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy859 := &x.ListMeta
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else if z.HasExtensions() && z.EncExt(yy859) {
					} else {
						z.EncFallback(yy859)
					}
				}
			}
			if yyr849 || yy2arr849 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym863 := z.EncBinary()
					_ = yym863
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr849 || yy2arr849 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym864 := z.DecBinary()
	_ = yym864
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct865 := r.ContainerType()
		if yyct865 == codecSelferValueTypeMap1234 {
			yyl865 := r.ReadMapStart()
			if yyl865 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl865, d)
			}
		} else if yyct865 == codecSelferValueTypeArray1234 {
			yyl865 := r.ReadArrayStart()
			if yyl865 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl865, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys866Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys866Slc
	var yyhl866 bool = l >= 0
	for yyj866 := 0; ; yyj866++ {
		if yyhl866 {
			if yyj866 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys866Slc = r.DecodeBytes(yys866Slc, true, true)
		yys866 := string(yys866Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys866 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv869 := &x.ListMeta
				yym870 := z.DecBinary()
				_ = yym870
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv869) {
				} else {
					z.DecFallback(yyv869, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv871 := &x.Items
				yym872 := z.DecBinary()
				_ = yym872
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv871), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys866)
		} // end switch yys866
	} // end for yyj866
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj873 int
	var yyb873 bool
	var yyhl873 bool = l >= 0
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv876 := &x.ListMeta
		yym877 := z.DecBinary()
		_ = yym877
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv876) {
		} else {
			z.DecFallback(yyv876, false)
		}
	}
	yyj873++
	if yyhl873 {
		yyb873 = yyj873 > l
	} else {
		yyb873 = r.CheckBreak()
	}
	if yyb873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv878 := &x.Items
		yym879 := z.DecBinary()
		_ = yym879
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv878), d)
		}
	}
	for {
		yyj873++
		if yyhl873 {
			yyb873 = yyj873 > l
		} else {
			yyb873 = r.CheckBreak()
		}
		if yyb873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym880 := z.EncBinary()
		_ = yym880
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep881 := !z.EncBinary()
			yy2arr881 := z.EncBasicHandle().StructToArray
			var yyq881 [5]bool
			_, _, _ = yysep881, yyq881, yy2arr881
			const yyr881 bool = false
			yyq881[0] = x.Kind != ""
			yyq881[1] = x.APIVersion != ""
			yyq881[2] = true
			yyq881[3] = true
			yyq881[4] = true
			var yynn881 int
			if yyr881 || yy2arr881 {
				r.EncodeArrayStart(5)
			} else {
				yynn881 = 0
				for _, b := range yyq881 {
					if b {
						yynn881++
					}
				}
				r.EncodeMapStart(yynn881)
				yynn881 = 0
			}
			if yyr881 || yy2arr881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq881[0] {
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq881[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym884 := z.EncBinary()
					_ = yym884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr881 || yy2arr881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq881[1] {
					yym886 := z.EncBinary()
					_ = yym886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq881[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr881 || yy2arr881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq881[2] {
					yy889 := &x.ObjectMeta
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else if z.HasExtensions() && z.EncExt(yy889) {
					} else {
						z.EncFallback(yy889)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq881[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy891 := &x.ObjectMeta
					yym892 := z.EncBinary()
					_ = yym892
					if false {
					} else if z.HasExtensions() && z.EncExt(yy891) {
					} else {
						z.EncFallback(yy891)
					}
				}
			}
			if yyr881 || yy2arr881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq881[3] {
					yy894 := &x.Spec
					yy894.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq881[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy895 := &x.Spec
					yy895.CodecEncodeSelf(e)
				}
			}
			if yyr881 || yy2arr881 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq881[4] {
					yy897 := &x.Status
					yy897.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq881[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy898 := &x.Status
					yy898.CodecEncodeSelf(e)
				}
			}
			if yyr881 || yy2arr881 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym899 := z.DecBinary()
	_ = yym899
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct900 := r.ContainerType()
		if yyct900 == codecSelferValueTypeMap1234 {
			yyl900 := r.ReadMapStart()
			if yyl900 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl900, d)
			}
		} else if yyct900 == codecSelferValueTypeArray1234 {
			yyl900 := r.ReadArrayStart()
			if yyl900 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl900, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys901Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys901Slc
	var yyhl901 bool = l >= 0
	for yyj901 := 0; ; yyj901++ {
		if yyhl901 {
			if yyj901 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys901Slc = r.DecodeBytes(yys901Slc, true, true)
		yys901 := string(yys901Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys901 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv904 := &x.ObjectMeta
				yym905 := z.DecBinary()
				_ = yym905
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv904) {
				} else {
					z.DecFallback(yyv904, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv906 := &x.Spec
				yyv906.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv907 := &x.Status
				yyv907.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys901)
		} // end switch yys901
	} // end for yyj901
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj908 int
	var yyb908 bool
	var yyhl908 bool = l >= 0
	yyj908++
	if yyhl908 {
		yyb908 = yyj908 > l
	} else {
		yyb908 = r.CheckBreak()
	}
	if yyb908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj908++
	if yyhl908 {
		yyb908 = yyj908 > l
	} else {
		yyb908 = r.CheckBreak()
	}
	if yyb908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj908++
	if yyhl908 {
		yyb908 = yyj908 > l
	} else {
		yyb908 = r.CheckBreak()
	}
	if yyb908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv911 := &x.ObjectMeta
		yym912 := z.DecBinary()
		_ = yym912
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv911) {
		} else {
			z.DecFallback(yyv911, false)
		}
	}
	yyj908++
	if yyhl908 {
		yyb908 = yyj908 > l
	} else {
		yyb908 = r.CheckBreak()
	}
	if yyb908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv913 := &x.Spec
		yyv913.CodecDecodeSelf(d)
	}
	yyj908++
	if yyhl908 {
		yyb908 = yyj908 > l
	} else {
		yyb908 = r.CheckBreak()
	}
	if yyb908 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv914 := &x.Status
		yyv914.CodecDecodeSelf(d)
	}
	for {
		yyj908++
		if yyhl908 {
			yyb908 = yyj908 > l
		} else {
			yyb908 = r.CheckBreak()
		}
		if yyb908 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj908-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym915 := z.EncBinary()
		_ = yym915
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep916 := !z.EncBinary()
			yy2arr916 := z.EncBasicHandle().StructToArray
			var yyq916 [4]bool
			_, _, _ = yysep916, yyq916, yy2arr916
			const yyr916 bool = false
			yyq916[0] = x.Kind != ""
			yyq916[1] = x.APIVersion != ""
			yyq916[2] = true
			var yynn916 int
			if yyr916 || yy2arr916 {
				r.EncodeArrayStart(4)
			} else {
				yynn916 = 1
				for _, b := range yyq916 {
					if b {
						yynn916++
					}
				}
				r.EncodeMapStart(yynn916)
				yynn916 = 0
			}
			if yyr916 || yy2arr916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq916[0] {
					yym918 := z.EncBinary()
					_ = yym918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq916[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym919 := z.EncBinary()
					_ = yym919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr916 || yy2arr916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq916[1] {
					yym921 := z.EncBinary()
					_ = yym921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq916[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr916 || yy2arr916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq916[2] {
					yy924 := &x.ListMeta
					yym925 := z.EncBinary()
					_ = yym925
					if false {
					} else if z.HasExtensions() && z.EncExt(yy924) {
					} else {
						z.EncFallback(yy924)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq916[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy926 := &x.ListMeta
					yym927 := z.EncBinary()
					_ = yym927
					if false {
					} else if z.HasExtensions() && z.EncExt(yy926) {
					} else {
						z.EncFallback(yy926)
					}
				}
			}
			if yyr916 || yy2arr916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym929 := z.EncBinary()
					_ = yym929
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym930 := z.EncBinary()
					_ = yym930
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr916 || yy2arr916 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym931 := z.DecBinary()
	_ = yym931
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct932 := r.ContainerType()
		if yyct932 == codecSelferValueTypeMap1234 {
			yyl932 := r.ReadMapStart()
			if yyl932 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl932, d)
			}
		} else if yyct932 == codecSelferValueTypeArray1234 {
			yyl932 := r.ReadArrayStart()
			if yyl932 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl932, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys933Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys933Slc
	var yyhl933 bool = l >= 0
	for yyj933 := 0; ; yyj933++ {
		if yyhl933 {
			if yyj933 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys933Slc = r.DecodeBytes(yys933Slc, true, true)
		yys933 := string(yys933Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys933 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv936 := &x.ListMeta
				yym937 := z.DecBinary()
				_ = yym937
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv936) {
				} else {
					z.DecFallback(yyv936, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv938 := &x.Items
				yym939 := z.DecBinary()
				_ = yym939
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv938), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys933)
		} // end switch yys933
	} // end for yyj933
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj940 int
	var yyb940 bool
	var yyhl940 bool = l >= 0
	yyj940++
	if yyhl940 {
		yyb940 = yyj940 > l
	} else {
		yyb940 = r.CheckBreak()
	}
	if yyb940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj940++
	if yyhl940 {
		yyb940 = yyj940 > l
	} else {
		yyb940 = r.CheckBreak()
	}
	if yyb940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj940++
	if yyhl940 {
		yyb940 = yyj940 > l
	} else {
		yyb940 = r.CheckBreak()
	}
	if yyb940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv943 := &x.ListMeta
		yym944 := z.DecBinary()
		_ = yym944
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv943) {
		} else {
			z.DecFallback(yyv943, false)
		}
	}
	yyj940++
	if yyhl940 {
		yyb940 = yyj940 > l
	} else {
		yyb940 = r.CheckBreak()
	}
	if yyb940 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv945 := &x.Items
		yym946 := z.DecBinary()
		_ = yym946
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv945), d)
		}
	}
	for {
		yyj940++
		if yyhl940 {
			yyb940 = yyj940 > l
		} else {
			yyb940 = r.CheckBreak()
		}
		if yyb940 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj940-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym947 := z.EncBinary()
		_ = yym947
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep948 := !z.EncBinary()
			yy2arr948 := z.EncBasicHandle().StructToArray
			var yyq948 [3]bool
			_, _, _ = yysep948, yyq948, yy2arr948
			const yyr948 bool = false
			yyq948[0] = x.Backend != nil
			yyq948[1] = len(x.TLS) != 0
			yyq948[2] = len(x.Rules) != 0
			var yynn948 int
			if yyr948 || yy2arr948 {
				r.EncodeArrayStart(3)
			} else {
				yynn948 = 0
				for _, b := range yyq948 {
					if b {
						yynn948++
					}
				}
				r.EncodeMapStart(yynn948)
				yynn948 = 0
			}
			if yyr948 || yy2arr948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq948[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq948[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr948 || yy2arr948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq948[1] {
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym951 := z.EncBinary()
						_ = yym951
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq948[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tls"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym952 := z.EncBinary()
						_ = yym952
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				}
			}
			if yyr948 || yy2arr948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq948[2] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym954 := z.EncBinary()
						_ = yym954
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq948[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym955 := z.EncBinary()
						_ = yym955
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr948 || yy2arr948 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym956 := z.DecBinary()
	_ = yym956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct957 := r.ContainerType()
		if yyct957 == codecSelferValueTypeMap1234 {
			yyl957 := r.ReadMapStart()
			if yyl957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl957, d)
			}
		} else if yyct957 == codecSelferValueTypeArray1234 {
			yyl957 := r.ReadArrayStart()
			if yyl957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys958Slc
	var yyhl958 bool = l >= 0
	for yyj958 := 0; ; yyj958++ {
		if yyhl958 {
			if yyj958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys958Slc = r.DecodeBytes(yys958Slc, true, true)
		yys958 := string(yys958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys958 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "tls":
			if r.TryDecodeAsNil() {
				x.TLS = nil
			} else {
				yyv960 := &x.TLS
				yym961 := z.DecBinary()
				_ = yym961
				if false {
				} else {
					h.decSliceIngressTLS((*[]IngressTLS)(yyv960), d)
				}
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv962 := &x.Rules
				yym963 := z.DecBinary()
				_ = yym963
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv962), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys958)
		} // end switch yys958
	} // end for yyj958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj964 int
	var yyb964 bool
	var yyhl964 bool = l >= 0
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TLS = nil
	} else {
		yyv966 := &x.TLS
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			h.decSliceIngressTLS((*[]IngressTLS)(yyv966), d)
		}
	}
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv968 := &x.Rules
		yym969 := z.DecBinary()
		_ = yym969
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv968), d)
		}
	}
	for {
		yyj964++
		if yyhl964 {
			yyb964 = yyj964 > l
		} else {
			yyb964 = r.CheckBreak()
		}
		if yyb964 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj964-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressTLS) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym970 := z.EncBinary()
		_ = yym970
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep971 := !z.EncBinary()
			yy2arr971 := z.EncBasicHandle().StructToArray
			var yyq971 [2]bool
			_, _, _ = yysep971, yyq971, yy2arr971
			const yyr971 bool = false
			yyq971[0] = len(x.Hosts) != 0
			yyq971[1] = x.SecretName != ""
			var yynn971 int
			if yyr971 || yy2arr971 {
				r.EncodeArrayStart(2)
			} else {
				yynn971 = 0
				for _, b := range yyq971 {
					if b {
						yynn971++
					}
				}
				r.EncodeMapStart(yynn971)
				yynn971 = 0
			}
			if yyr971 || yy2arr971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq971[0] {
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym973 := z.EncBinary()
						_ = yym973
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq971[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hosts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym974 := z.EncBinary()
						_ = yym974
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				}
			}
			if yyr971 || yy2arr971 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq971[1] {
					yym976 := z.EncBinary()
					_ = yym976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq971[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym977 := z.EncBinary()
					_ = yym977
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr971 || yy2arr971 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressTLS) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym978 := z.DecBinary()
	_ = yym978
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct979 := r.ContainerType()
		if yyct979 == codecSelferValueTypeMap1234 {
			yyl979 := r.ReadMapStart()
			if yyl979 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl979, d)
			}
		} else if yyct979 == codecSelferValueTypeArray1234 {
			yyl979 := r.ReadArrayStart()
			if yyl979 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl979, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressTLS) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys980Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys980Slc
	var yyhl980 bool = l >= 0
	for yyj980 := 0; ; yyj980++ {
		if yyhl980 {
			if yyj980 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys980Slc = r.DecodeBytes(yys980Slc, true, true)
		yys980 := string(yys980Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys980 {
		case "hosts":
			if r.TryDecodeAsNil() {
				x.Hosts = nil
			} else {
				yyv981 := &x.Hosts
				yym982 := z.DecBinary()
				_ = yym982
				if false {
				} else {
					z.F.DecSliceStringX(yyv981, false, d)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys980)
		} // end switch yys980
	} // end for yyj980
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressTLS) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj984 int
	var yyb984 bool
	var yyhl984 bool = l >= 0
	yyj984++
	if yyhl984 {
		yyb984 = yyj984 > l
	} else {
		yyb984 = r.CheckBreak()
	}
	if yyb984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hosts = nil
	} else {
		yyv985 := &x.Hosts
		yym986 := z.DecBinary()
		_ = yym986
		if false {
		} else {
			z.F.DecSliceStringX(yyv985, false, d)
		}
	}
	yyj984++
	if yyhl984 {
		yyb984 = yyj984 > l
	} else {
		yyb984 = r.CheckBreak()
	}
	if yyb984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj984++
		if yyhl984 {
			yyb984 = yyj984 > l
		} else {
			yyb984 = r.CheckBreak()
		}
		if yyb984 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj984-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym988 := z.EncBinary()
		_ = yym988
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep989 := !z.EncBinary()
			yy2arr989 := z.EncBasicHandle().StructToArray
			var yyq989 [1]bool
			_, _, _ = yysep989, yyq989, yy2arr989
			const yyr989 bool = false
			yyq989[0] = true
			var yynn989 int
			if yyr989 || yy2arr989 {
				r.EncodeArrayStart(1)
			} else {
				yynn989 = 0
				for _, b := range yyq989 {
					if b {
						yynn989++
					}
				}
				r.EncodeMapStart(yynn989)
				yynn989 = 0
			}
			if yyr989 || yy2arr989 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq989[0] {
					yy991 := &x.LoadBalancer
					yy991.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq989[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy992 := &x.LoadBalancer
					yy992.CodecEncodeSelf(e)
				}
			}
			if yyr989 || yy2arr989 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym993 := z.DecBinary()
	_ = yym993
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct994 := r.ContainerType()
		if yyct994 == codecSelferValueTypeMap1234 {
			yyl994 := r.ReadMapStart()
			if yyl994 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl994, d)
			}
		} else if yyct994 == codecSelferValueTypeArray1234 {
			yyl994 := r.ReadArrayStart()
			if yyl994 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl994, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys995Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys995Slc
	var yyhl995 bool = l >= 0
	for yyj995 := 0; ; yyj995++ {
		if yyhl995 {
			if yyj995 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys995Slc = r.DecodeBytes(yys995Slc, true, true)
		yys995 := string(yys995Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys995 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg4_v1.LoadBalancerStatus{}
			} else {
				yyv996 := &x.LoadBalancer
				yyv996.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys995)
		} // end switch yys995
	} // end for yyj995
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj997 int
	var yyb997 bool
	var yyhl997 bool = l >= 0
	yyj997++
	if yyhl997 {
		yyb997 = yyj997 > l
	} else {
		yyb997 = r.CheckBreak()
	}
	if yyb997 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg4_v1.LoadBalancerStatus{}
	} else {
		yyv998 := &x.LoadBalancer
		yyv998.CodecDecodeSelf(d)
	}
	for {
		yyj997++
		if yyhl997 {
			yyb997 = yyj997 > l
		} else {
			yyb997 = r.CheckBreak()
		}
		if yyb997 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj997-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym999 := z.EncBinary()
		_ = yym999
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1000 := !z.EncBinary()
			yy2arr1000 := z.EncBasicHandle().StructToArray
			var yyq1000 [2]bool
			_, _, _ = yysep1000, yyq1000, yy2arr1000
			const yyr1000 bool = false
			yyq1000[0] = x.Host != ""
			yyq1000[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1000 int
			if yyr1000 || yy2arr1000 {
				r.EncodeArrayStart(2)
			} else {
				yynn1000 = 0
				for _, b := range yyq1000 {
					if b {
						yynn1000++
					}
				}
				r.EncodeMapStart(yynn1000)
				yynn1000 = 0
			}
			if yyr1000 || yy2arr1000 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1000[0] {
					yym1002 := z.EncBinary()
					_ = yym1002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1000[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1003 := z.EncBinary()
					_ = yym1003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1004 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1004 = true
				goto LABEL1004
			}
		LABEL1004:
			if yyr1000 || yy2arr1000 {
				if yyn1004 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1000[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1000[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1004 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1000 || yy2arr1000 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1005 := z.DecBinary()
	_ = yym1005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1006 := r.ContainerType()
		if yyct1006 == codecSelferValueTypeMap1234 {
			yyl1006 := r.ReadMapStart()
			if yyl1006 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1006, d)
			}
		} else if yyct1006 == codecSelferValueTypeArray1234 {
			yyl1006 := r.ReadArrayStart()
			if yyl1006 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1007Slc
	var yyhl1007 bool = l >= 0
	for yyj1007 := 0; ; yyj1007++ {
		if yyhl1007 {
			if yyj1007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1007Slc = r.DecodeBytes(yys1007Slc, true, true)
		yys1007 := string(yys1007Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1007 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1007)
		} // end switch yys1007
	} // end for yyj1007
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1010 int
	var yyb1010 bool
	var yyhl1010 bool = l >= 0
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1010++
	if yyhl1010 {
		yyb1010 = yyj1010 > l
	} else {
		yyb1010 = r.CheckBreak()
	}
	if yyb1010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1010++
		if yyhl1010 {
			yyb1010 = yyj1010 > l
		} else {
			yyb1010 = r.CheckBreak()
		}
		if yyb1010 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1010-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1013 := z.EncBinary()
		_ = yym1013
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1014 := !z.EncBinary()
			yy2arr1014 := z.EncBasicHandle().StructToArray
			var yyq1014 [1]bool
			_, _, _ = yysep1014, yyq1014, yy2arr1014
			const yyr1014 bool = false
			yyq1014[0] = x.HTTP != nil
			var yynn1014 int
			if yyr1014 || yy2arr1014 {
				r.EncodeArrayStart(1)
			} else {
				yynn1014 = 0
				for _, b := range yyq1014 {
					if b {
						yynn1014++
					}
				}
				r.EncodeMapStart(yynn1014)
				yynn1014 = 0
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1014[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1014[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1014 || yy2arr1014 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1016 := z.DecBinary()
	_ = yym1016
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1017 := r.ContainerType()
		if yyct1017 == codecSelferValueTypeMap1234 {
			yyl1017 := r.ReadMapStart()
			if yyl1017 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1017, d)
			}
		} else if yyct1017 == codecSelferValueTypeArray1234 {
			yyl1017 := r.ReadArrayStart()
			if yyl1017 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1017, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1018Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1018Slc
	var yyhl1018 bool = l >= 0
	for yyj1018 := 0; ; yyj1018++ {
		if yyhl1018 {
			if yyj1018 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1018Slc = r.DecodeBytes(yys1018Slc, true, true)
		yys1018 := string(yys1018Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1018 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1018)
		} // end switch yys1018
	} // end for yyj1018
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1020 int
	var yyb1020 bool
	var yyhl1020 bool = l >= 0
	yyj1020++
	if yyhl1020 {
		yyb1020 = yyj1020 > l
	} else {
		yyb1020 = r.CheckBreak()
	}
	if yyb1020 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1020++
		if yyhl1020 {
			yyb1020 = yyj1020 > l
		} else {
			yyb1020 = r.CheckBreak()
		}
		if yyb1020 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1020-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1022 := z.EncBinary()
		_ = yym1022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1023 := !z.EncBinary()
			yy2arr1023 := z.EncBasicHandle().StructToArray
			var yyq1023 [1]bool
			_, _, _ = yysep1023, yyq1023, yy2arr1023
			const yyr1023 bool = false
			var yynn1023 int
			if yyr1023 || yy2arr1023 {
				r.EncodeArrayStart(1)
			} else {
				yynn1023 = 1
				for _, b := range yyq1023 {
					if b {
						yynn1023++
					}
				}
				r.EncodeMapStart(yynn1023)
				yynn1023 = 0
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1027 := z.DecBinary()
	_ = yym1027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1028 := r.ContainerType()
		if yyct1028 == codecSelferValueTypeMap1234 {
			yyl1028 := r.ReadMapStart()
			if yyl1028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1028, d)
			}
		} else if yyct1028 == codecSelferValueTypeArray1234 {
			yyl1028 := r.ReadArrayStart()
			if yyl1028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1029Slc
	var yyhl1029 bool = l >= 0
	for yyj1029 := 0; ; yyj1029++ {
		if yyhl1029 {
			if yyj1029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1029Slc = r.DecodeBytes(yys1029Slc, true, true)
		yys1029 := string(yys1029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1029 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1030 := &x.Paths
				yym1031 := z.DecBinary()
				_ = yym1031
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1030), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1029)
		} // end switch yys1029
	} // end for yyj1029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1032 int
	var yyb1032 bool
	var yyhl1032 bool = l >= 0
	yyj1032++
	if yyhl1032 {
		yyb1032 = yyj1032 > l
	} else {
		yyb1032 = r.CheckBreak()
	}
	if yyb1032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1033 := &x.Paths
		yym1034 := z.DecBinary()
		_ = yym1034
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1033), d)
		}
	}
	for {
		yyj1032++
		if yyhl1032 {
			yyb1032 = yyj1032 > l
		} else {
			yyb1032 = r.CheckBreak()
		}
		if yyb1032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1035 := z.EncBinary()
		_ = yym1035
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1036 := !z.EncBinary()
			yy2arr1036 := z.EncBasicHandle().StructToArray
			var yyq1036 [2]bool
			_, _, _ = yysep1036, yyq1036, yy2arr1036
			const yyr1036 bool = false
			yyq1036[0] = x.Path != ""
			var yynn1036 int
			if yyr1036 || yy2arr1036 {
				r.EncodeArrayStart(2)
			} else {
				yynn1036 = 1
				for _, b := range yyq1036 {
					if b {
						yynn1036++
					}
				}
				r.EncodeMapStart(yynn1036)
				yynn1036 = 0
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1036[0] {
					yym1038 := z.EncBinary()
					_ = yym1038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1036[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1039 := z.EncBinary()
					_ = yym1039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1041 := &x.Backend
				yy1041.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1042 := &x.Backend
				yy1042.CodecEncodeSelf(e)
			}
			if yyr1036 || yy2arr1036 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1043 := z.DecBinary()
	_ = yym1043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1044 := r.ContainerType()
		if yyct1044 == codecSelferValueTypeMap1234 {
			yyl1044 := r.ReadMapStart()
			if yyl1044 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1044, d)
			}
		} else if yyct1044 == codecSelferValueTypeArray1234 {
			yyl1044 := r.ReadArrayStart()
			if yyl1044 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1044, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1045Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1045Slc
	var yyhl1045 bool = l >= 0
	for yyj1045 := 0; ; yyj1045++ {
		if yyhl1045 {
			if yyj1045 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1045Slc = r.DecodeBytes(yys1045Slc, true, true)
		yys1045 := string(yys1045Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1045 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1047 := &x.Backend
				yyv1047.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1045)
		} // end switch yys1045
	} // end for yyj1045
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1048 int
	var yyb1048 bool
	var yyhl1048 bool = l >= 0
	yyj1048++
	if yyhl1048 {
		yyb1048 = yyj1048 > l
	} else {
		yyb1048 = r.CheckBreak()
	}
	if yyb1048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1048++
	if yyhl1048 {
		yyb1048 = yyj1048 > l
	} else {
		yyb1048 = r.CheckBreak()
	}
	if yyb1048 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1050 := &x.Backend
		yyv1050.CodecDecodeSelf(d)
	}
	for {
		yyj1048++
		if yyhl1048 {
			yyb1048 = yyj1048 > l
		} else {
			yyb1048 = r.CheckBreak()
		}
		if yyb1048 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1048-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1051 := z.EncBinary()
		_ = yym1051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1052 := !z.EncBinary()
			yy2arr1052 := z.EncBasicHandle().StructToArray
			var yyq1052 [2]bool
			_, _, _ = yysep1052, yyq1052, yy2arr1052
			const yyr1052 bool = false
			var yynn1052 int
			if yyr1052 || yy2arr1052 {
				r.EncodeArrayStart(2)
			} else {
				yynn1052 = 2
				for _, b := range yyq1052 {
					if b {
						yynn1052++
					}
				}
				r.EncodeMapStart(yynn1052)
				yynn1052 = 0
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1054 := z.EncBinary()
				_ = yym1054
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1055 := z.EncBinary()
				_ = yym1055
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1057 := &x.ServicePort
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1057) {
				} else if !yym1058 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1057)
				} else {
					z.EncFallback(yy1057)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1059 := &x.ServicePort
				yym1060 := z.EncBinary()
				_ = yym1060
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1059) {
				} else if !yym1060 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1059)
				} else {
					z.EncFallback(yy1059)
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1061 := z.DecBinary()
	_ = yym1061
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1062 := r.ContainerType()
		if yyct1062 == codecSelferValueTypeMap1234 {
			yyl1062 := r.ReadMapStart()
			if yyl1062 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1062, d)
			}
		} else if yyct1062 == codecSelferValueTypeArray1234 {
			yyl1062 := r.ReadArrayStart()
			if yyl1062 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1062, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1063Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1063Slc
	var yyhl1063 bool = l >= 0
	for yyj1063 := 0; ; yyj1063++ {
		if yyhl1063 {
			if yyj1063 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1063Slc = r.DecodeBytes(yys1063Slc, true, true)
		yys1063 := string(yys1063Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1063 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg5_intstr.IntOrString{}
			} else {
				yyv1065 := &x.ServicePort
				yym1066 := z.DecBinary()
				_ = yym1066
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1065) {
				} else if !yym1066 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1065)
				} else {
					z.DecFallback(yyv1065, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1063)
		} // end switch yys1063
	} // end for yyj1063
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1067 int
	var yyb1067 bool
	var yyhl1067 bool = l >= 0
	yyj1067++
	if yyhl1067 {
		yyb1067 = yyj1067 > l
	} else {
		yyb1067 = r.CheckBreak()
	}
	if yyb1067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1067++
	if yyhl1067 {
		yyb1067 = yyj1067 > l
	} else {
		yyb1067 = r.CheckBreak()
	}
	if yyb1067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg5_intstr.IntOrString{}
	} else {
		yyv1069 := &x.ServicePort
		yym1070 := z.DecBinary()
		_ = yym1070
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1069) {
		} else if !yym1070 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1069)
		} else {
			z.DecFallback(yyv1069, false)
		}
	}
	for {
		yyj1067++
		if yyhl1067 {
			yyb1067 = yyj1067 > l
		} else {
			yyb1067 = r.CheckBreak()
		}
		if yyb1067 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1067-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1071 := z.EncBinary()
		_ = yym1071
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1072 := !z.EncBinary()
			yy2arr1072 := z.EncBasicHandle().StructToArray
			var yyq1072 [5]bool
			_, _, _ = yysep1072, yyq1072, yy2arr1072
			const yyr1072 bool = false
			yyq1072[0] = x.Kind != ""
			yyq1072[1] = x.APIVersion != ""
			yyq1072[2] = true
			yyq1072[3] = true
			yyq1072[4] = true
			var yynn1072 int
			if yyr1072 || yy2arr1072 {
				r.EncodeArrayStart(5)
			} else {
				yynn1072 = 0
				for _, b := range yyq1072 {
					if b {
						yynn1072++
					}
				}
				r.EncodeMapStart(yynn1072)
				yynn1072 = 0
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1072[0] {
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1072[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1075 := z.EncBinary()
					_ = yym1075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1072[1] {
					yym1077 := z.EncBinary()
					_ = yym1077
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1072[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1078 := z.EncBinary()
					_ = yym1078
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1072[2] {
					yy1080 := &x.ObjectMeta
					yym1081 := z.EncBinary()
					_ = yym1081
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1080) {
					} else {
						z.EncFallback(yy1080)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1072[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1082 := &x.ObjectMeta
					yym1083 := z.EncBinary()
					_ = yym1083
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1082) {
					} else {
						z.EncFallback(yy1082)
					}
				}
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1072[3] {
					yy1085 := &x.Spec
					yy1085.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1072[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1086 := &x.Spec
					yy1086.CodecEncodeSelf(e)
				}
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1072[4] {
					yy1088 := &x.Status
					yy1088.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1072[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1089 := &x.Status
					yy1089.CodecEncodeSelf(e)
				}
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1090 := z.DecBinary()
	_ = yym1090
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1091 := r.ContainerType()
		if yyct1091 == codecSelferValueTypeMap1234 {
			yyl1091 := r.ReadMapStart()
			if yyl1091 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1091, d)
			}
		} else if yyct1091 == codecSelferValueTypeArray1234 {
			yyl1091 := r.ReadArrayStart()
			if yyl1091 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1091, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1092Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1092Slc
	var yyhl1092 bool = l >= 0
	for yyj1092 := 0; ; yyj1092++ {
		if yyhl1092 {
			if yyj1092 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1092Slc = r.DecodeBytes(yys1092Slc, true, true)
		yys1092 := string(yys1092Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1092 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv1095 := &x.ObjectMeta
				yym1096 := z.DecBinary()
				_ = yym1096
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1095) {
				} else {
					z.DecFallback(yyv1095, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1097 := &x.Spec
				yyv1097.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1098 := &x.Status
				yyv1098.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1092)
		} // end switch yys1092
	} // end for yyj1092
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1099 int
	var yyb1099 bool
	var yyhl1099 bool = l >= 0
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv1102 := &x.ObjectMeta
		yym1103 := z.DecBinary()
		_ = yym1103
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1102) {
		} else {
			z.DecFallback(yyv1102, false)
		}
	}
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1104 := &x.Spec
		yyv1104.CodecDecodeSelf(d)
	}
	yyj1099++
	if yyhl1099 {
		yyb1099 = yyj1099 > l
	} else {
		yyb1099 = r.CheckBreak()
	}
	if yyb1099 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1105 := &x.Status
		yyv1105.CodecDecodeSelf(d)
	}
	for {
		yyj1099++
		if yyhl1099 {
			yyb1099 = yyj1099 > l
		} else {
			yyb1099 = r.CheckBreak()
		}
		if yyb1099 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1099-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1106 := z.EncBinary()
		_ = yym1106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1107 := !z.EncBinary()
			yy2arr1107 := z.EncBasicHandle().StructToArray
			var yyq1107 [4]bool
			_, _, _ = yysep1107, yyq1107, yy2arr1107
			const yyr1107 bool = false
			yyq1107[0] = x.Kind != ""
			yyq1107[1] = x.APIVersion != ""
			yyq1107[2] = true
			var yynn1107 int
			if yyr1107 || yy2arr1107 {
				r.EncodeArrayStart(4)
			} else {
				yynn1107 = 1
				for _, b := range yyq1107 {
					if b {
						yynn1107++
					}
				}
				r.EncodeMapStart(yynn1107)
				yynn1107 = 0
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1107[0] {
					yym1109 := z.EncBinary()
					_ = yym1109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1107[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1110 := z.EncBinary()
					_ = yym1110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1107[1] {
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1107[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1113 := z.EncBinary()
					_ = yym1113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1107[2] {
					yy1115 := &x.ListMeta
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1115) {
					} else {
						z.EncFallback(yy1115)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1107[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1117 := &x.ListMeta
					yym1118 := z.EncBinary()
					_ = yym1118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1117) {
					} else {
						z.EncFallback(yy1117)
					}
				}
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1120 := z.EncBinary()
					_ = yym1120
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1107 || yy2arr1107 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1122 := z.DecBinary()
	_ = yym1122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1123 := r.ContainerType()
		if yyct1123 == codecSelferValueTypeMap1234 {
			yyl1123 := r.ReadMapStart()
			if yyl1123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1123, d)
			}
		} else if yyct1123 == codecSelferValueTypeArray1234 {
			yyl1123 := r.ReadArrayStart()
			if yyl1123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1124Slc
	var yyhl1124 bool = l >= 0
	for yyj1124 := 0; ; yyj1124++ {
		if yyhl1124 {
			if yyj1124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1124Slc = r.DecodeBytes(yys1124Slc, true, true)
		yys1124 := string(yys1124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1124 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv1127 := &x.ListMeta
				yym1128 := z.DecBinary()
				_ = yym1128
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1127) {
				} else {
					z.DecFallback(yyv1127, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1129 := &x.Items
				yym1130 := z.DecBinary()
				_ = yym1130
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1129), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1124)
		} // end switch yys1124
	} // end for yyj1124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1131 int
	var yyb1131 bool
	var yyhl1131 bool = l >= 0
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv1134 := &x.ListMeta
		yym1135 := z.DecBinary()
		_ = yym1135
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1134) {
		} else {
			z.DecFallback(yyv1134, false)
		}
	}
	yyj1131++
	if yyhl1131 {
		yyb1131 = yyj1131 > l
	} else {
		yyb1131 = r.CheckBreak()
	}
	if yyb1131 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1136 := &x.Items
		yym1137 := z.DecBinary()
		_ = yym1137
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1136), d)
		}
	}
	for {
		yyj1131++
		if yyhl1131 {
			yyb1131 = yyj1131 > l
		} else {
			yyb1131 = r.CheckBreak()
		}
		if yyb1131 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1131-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1138 := z.EncBinary()
		_ = yym1138
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1139 := !z.EncBinary()
			yy2arr1139 := z.EncBasicHandle().StructToArray
			var yyq1139 [4]bool
			_, _, _ = yysep1139, yyq1139, yy2arr1139
			const yyr1139 bool = false
			yyq1139[0] = x.Replicas != nil
			yyq1139[1] = x.MinReadySeconds != 0
			yyq1139[2] = x.Selector != nil
			yyq1139[3] = true
			var yynn1139 int
			if yyr1139 || yy2arr1139 {
				r.EncodeArrayStart(4)
			} else {
				yynn1139 = 0
				for _, b := range yyq1139 {
					if b {
						yynn1139++
					}
				}
				r.EncodeMapStart(yynn1139)
				yynn1139 = 0
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1139[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1141 := *x.Replicas
						yym1142 := z.EncBinary()
						_ = yym1142
						if false {
						} else {
							r.EncodeInt(int64(yy1141))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1139[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1143 := *x.Replicas
						yym1144 := z.EncBinary()
						_ = yym1144
						if false {
						} else {
							r.EncodeInt(int64(yy1143))
						}
					}
				}
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1139[1] {
					yym1146 := z.EncBinary()
					_ = yym1146
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1139[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1147 := z.EncBinary()
					_ = yym1147
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1139[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1149 := z.EncBinary()
						_ = yym1149
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1139[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym1150 := z.EncBinary()
						_ = yym1150
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1139[3] {
					yy1152 := &x.Template
					yy1152.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1139[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1153 := &x.Template
					yy1153.CodecEncodeSelf(e)
				}
			}
			if yyr1139 || yy2arr1139 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1154 := z.DecBinary()
	_ = yym1154
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1155 := r.ContainerType()
		if yyct1155 == codecSelferValueTypeMap1234 {
			yyl1155 := r.ReadMapStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1155, d)
			}
		} else if yyct1155 == codecSelferValueTypeArray1234 {
			yyl1155 := r.ReadArrayStart()
			if yyl1155 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1155, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1156Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1156Slc
	var yyhl1156 bool = l >= 0
	for yyj1156 := 0; ; yyj1156++ {
		if yyhl1156 {
			if yyj1156 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1156Slc = r.DecodeBytes(yys1156Slc, true, true)
		yys1156 := string(yys1156Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1156 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym1158 := z.DecBinary()
				_ = yym1158
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_v1.LabelSelector)
				}
				yym1161 := z.DecBinary()
				_ = yym1161
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg4_v1.PodTemplateSpec{}
			} else {
				yyv1162 := &x.Template
				yyv1162.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1156)
		} // end switch yys1156
	} // end for yyj1156
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1163 int
	var yyb1163 bool
	var yyhl1163 bool = l >= 0
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym1165 := z.DecBinary()
		_ = yym1165
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_v1.LabelSelector)
		}
		yym1168 := z.DecBinary()
		_ = yym1168
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj1163++
	if yyhl1163 {
		yyb1163 = yyj1163 > l
	} else {
		yyb1163 = r.CheckBreak()
	}
	if yyb1163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg4_v1.PodTemplateSpec{}
	} else {
		yyv1169 := &x.Template
		yyv1169.CodecDecodeSelf(d)
	}
	for {
		yyj1163++
		if yyhl1163 {
			yyb1163 = yyj1163 > l
		} else {
			yyb1163 = r.CheckBreak()
		}
		if yyb1163 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1163-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1170 := z.EncBinary()
		_ = yym1170
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1171 := !z.EncBinary()
			yy2arr1171 := z.EncBasicHandle().StructToArray
			var yyq1171 [6]bool
			_, _, _ = yysep1171, yyq1171, yy2arr1171
			const yyr1171 bool = false
			yyq1171[1] = x.FullyLabeledReplicas != 0
			yyq1171[2] = x.ReadyReplicas != 0
			yyq1171[3] = x.AvailableReplicas != 0
			yyq1171[4] = x.ObservedGeneration != 0
			yyq1171[5] = len(x.Conditions) != 0
			var yynn1171 int
			if yyr1171 || yy2arr1171 {
				r.EncodeArrayStart(6)
			} else {
				yynn1171 = 1
				for _, b := range yyq1171 {
					if b {
						yynn1171++
					}
				}
				r.EncodeMapStart(yynn1171)
				yynn1171 = 0
			}
			if yyr1171 || yy2arr1171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1173 := z.EncBinary()
				_ = yym1173
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1174 := z.EncBinary()
				_ = yym1174
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1171 || yy2arr1171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1171[1] {
					yym1176 := z.EncBinary()
					_ = yym1176
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1171[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1177 := z.EncBinary()
					_ = yym1177
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr1171 || yy2arr1171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1171[2] {
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1171[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr1171 || yy2arr1171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1171[3] {
					yym1182 := z.EncBinary()
					_ = yym1182
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1171[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1183 := z.EncBinary()
					_ = yym1183
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr1171 || yy2arr1171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1171[4] {
					yym1185 := z.EncBinary()
					_ = yym1185
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1171[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1186 := z.EncBinary()
					_ = yym1186
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1171 || yy2arr1171 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1171[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1188 := z.EncBinary()
						_ = yym1188
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1171[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1189 := z.EncBinary()
						_ = yym1189
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1171 || yy2arr1171 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1190 := z.DecBinary()
	_ = yym1190
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1191 := r.ContainerType()
		if yyct1191 == codecSelferValueTypeMap1234 {
			yyl1191 := r.ReadMapStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1191, d)
			}
		} else if yyct1191 == codecSelferValueTypeArray1234 {
			yyl1191 := r.ReadArrayStart()
			if yyl1191 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1191, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1192Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1192Slc
	var yyhl1192 bool = l >= 0
	for yyj1192 := 0; ; yyj1192++ {
		if yyhl1192 {
			if yyj1192 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1192Slc = r.DecodeBytes(yys1192Slc, true, true)
		yys1192 := string(yys1192Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1192 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1198 := &x.Conditions
				yym1199 := z.DecBinary()
				_ = yym1199
				if false {
				} else {
					h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv1198), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1192)
		} // end switch yys1192
	} // end for yyj1192
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1200 int
	var yyb1200 bool
	var yyhl1200 bool = l >= 0
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj1200++
	if yyhl1200 {
		yyb1200 = yyj1200 > l
	} else {
		yyb1200 = r.CheckBreak()
	}
	if yyb1200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1206 := &x.Conditions
		yym1207 := z.DecBinary()
		_ = yym1207
		if false {
		} else {
			h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv1206), d)
		}
	}
	for {
		yyj1200++
		if yyhl1200 {
			yyb1200 = yyj1200 > l
		} else {
			yyb1200 = r.CheckBreak()
		}
		if yyb1200 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1200-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicaSetConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1208 := z.EncBinary()
	_ = yym1208
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicaSetConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1209 := z.DecBinary()
	_ = yym1209
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSetCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1210 := z.EncBinary()
		_ = yym1210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1211 := !z.EncBinary()
			yy2arr1211 := z.EncBasicHandle().StructToArray
			var yyq1211 [5]bool
			_, _, _ = yysep1211, yyq1211, yy2arr1211
			const yyr1211 bool = false
			yyq1211[2] = true
			yyq1211[3] = x.Reason != ""
			yyq1211[4] = x.Message != ""
			var yynn1211 int
			if yyr1211 || yy2arr1211 {
				r.EncodeArrayStart(5)
			} else {
				yynn1211 = 2
				for _, b := range yyq1211 {
					if b {
						yynn1211++
					}
				}
				r.EncodeMapStart(yynn1211)
				yynn1211 = 0
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1214 := z.EncBinary()
				_ = yym1214
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1215 := z.EncBinary()
				_ = yym1215
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[2] {
					yy1217 := &x.LastTransitionTime
					yym1218 := z.EncBinary()
					_ = yym1218
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1217) {
					} else if yym1218 {
						z.EncBinaryMarshal(yy1217)
					} else if !yym1218 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1217)
					} else {
						z.EncFallback(yy1217)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1211[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1219 := &x.LastTransitionTime
					yym1220 := z.EncBinary()
					_ = yym1220
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1219) {
					} else if yym1220 {
						z.EncBinaryMarshal(yy1219)
					} else if !yym1220 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1219)
					} else {
						z.EncFallback(yy1219)
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[3] {
					yym1222 := z.EncBinary()
					_ = yym1222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1211[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1223 := z.EncBinary()
					_ = yym1223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1211[4] {
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1211[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1226 := z.EncBinary()
					_ = yym1226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1211 || yy2arr1211 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1227 := z.DecBinary()
	_ = yym1227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1228 := r.ContainerType()
		if yyct1228 == codecSelferValueTypeMap1234 {
			yyl1228 := r.ReadMapStart()
			if yyl1228 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1228, d)
			}
		} else if yyct1228 == codecSelferValueTypeArray1234 {
			yyl1228 := r.ReadArrayStart()
			if yyl1228 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1228, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1229Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1229Slc
	var yyhl1229 bool = l >= 0
	for yyj1229 := 0; ; yyj1229++ {
		if yyhl1229 {
			if yyj1229 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1229Slc = r.DecodeBytes(yys1229Slc, true, true)
		yys1229 := string(yys1229Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1229 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicaSetConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg4_v1.ConditionStatus(r.DecodeString())
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_v1.Time{}
			} else {
				yyv1232 := &x.LastTransitionTime
				yym1233 := z.DecBinary()
				_ = yym1233
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1232) {
				} else if yym1233 {
					z.DecBinaryUnmarshal(yyv1232)
				} else if !yym1233 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1232)
				} else {
					z.DecFallback(yyv1232, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1229)
		} // end switch yys1229
	} // end for yyj1229
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1236 int
	var yyb1236 bool
	var yyhl1236 bool = l >= 0
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicaSetConditionType(r.DecodeString())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg4_v1.ConditionStatus(r.DecodeString())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_v1.Time{}
	} else {
		yyv1239 := &x.LastTransitionTime
		yym1240 := z.DecBinary()
		_ = yym1240
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1239) {
		} else if yym1240 {
			z.DecBinaryUnmarshal(yyv1239)
		} else if !yym1240 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1239)
		} else {
			z.DecFallback(yyv1239, false)
		}
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1236++
		if yyhl1236 {
			yyb1236 = yyj1236 > l
		} else {
			yyb1236 = r.CheckBreak()
		}
		if yyb1236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1243 := z.EncBinary()
		_ = yym1243
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1244 := !z.EncBinary()
			yy2arr1244 := z.EncBasicHandle().StructToArray
			var yyq1244 [4]bool
			_, _, _ = yysep1244, yyq1244, yy2arr1244
			const yyr1244 bool = false
			yyq1244[0] = x.Kind != ""
			yyq1244[1] = x.APIVersion != ""
			yyq1244[2] = true
			yyq1244[3] = true
			var yynn1244 int
			if yyr1244 || yy2arr1244 {
				r.EncodeArrayStart(4)
			} else {
				yynn1244 = 0
				for _, b := range yyq1244 {
					if b {
						yynn1244++
					}
				}
				r.EncodeMapStart(yynn1244)
				yynn1244 = 0
			}
			if yyr1244 || yy2arr1244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1244[0] {
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1244[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1247 := z.EncBinary()
					_ = yym1247
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1244 || yy2arr1244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1244[1] {
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1244[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1250 := z.EncBinary()
					_ = yym1250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1244 || yy2arr1244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1244[2] {
					yy1252 := &x.ObjectMeta
					yym1253 := z.EncBinary()
					_ = yym1253
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1252) {
					} else {
						z.EncFallback(yy1252)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1244[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1254 := &x.ObjectMeta
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1254) {
					} else {
						z.EncFallback(yy1254)
					}
				}
			}
			if yyr1244 || yy2arr1244 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1244[3] {
					yy1257 := &x.Spec
					yy1257.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1244[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1258 := &x.Spec
					yy1258.CodecEncodeSelf(e)
				}
			}
			if yyr1244 || yy2arr1244 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1259 := z.DecBinary()
	_ = yym1259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1260 := r.ContainerType()
		if yyct1260 == codecSelferValueTypeMap1234 {
			yyl1260 := r.ReadMapStart()
			if yyl1260 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1260, d)
			}
		} else if yyct1260 == codecSelferValueTypeArray1234 {
			yyl1260 := r.ReadArrayStart()
			if yyl1260 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1260, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1261Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1261Slc
	var yyhl1261 bool = l >= 0
	for yyj1261 := 0; ; yyj1261++ {
		if yyhl1261 {
			if yyj1261 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1261Slc = r.DecodeBytes(yys1261Slc, true, true)
		yys1261 := string(yys1261Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1261 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv1264 := &x.ObjectMeta
				yym1265 := z.DecBinary()
				_ = yym1265
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1264) {
				} else {
					z.DecFallback(yyv1264, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSecurityPolicySpec{}
			} else {
				yyv1266 := &x.Spec
				yyv1266.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1261)
		} // end switch yys1261
	} // end for yyj1261
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1267 int
	var yyb1267 bool
	var yyhl1267 bool = l >= 0
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv1270 := &x.ObjectMeta
		yym1271 := z.DecBinary()
		_ = yym1271
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1270) {
		} else {
			z.DecFallback(yyv1270, false)
		}
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSecurityPolicySpec{}
	} else {
		yyv1272 := &x.Spec
		yyv1272.CodecDecodeSelf(d)
	}
	for {
		yyj1267++
		if yyhl1267 {
			yyb1267 = yyj1267 > l
		} else {
			yyb1267 = r.CheckBreak()
		}
		if yyb1267 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1267-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1273 := z.EncBinary()
		_ = yym1273
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1274 := !z.EncBinary()
			yy2arr1274 := z.EncBasicHandle().StructToArray
			var yyq1274 [14]bool
			_, _, _ = yysep1274, yyq1274, yy2arr1274
			const yyr1274 bool = false
			yyq1274[0] = x.Privileged != false
			yyq1274[1] = len(x.DefaultAddCapabilities) != 0
			yyq1274[2] = len(x.RequiredDropCapabilities) != 0
			yyq1274[3] = len(x.AllowedCapabilities) != 0
			yyq1274[4] = len(x.Volumes) != 0
			yyq1274[5] = x.HostNetwork != false
			yyq1274[6] = len(x.HostPorts) != 0
			yyq1274[7] = x.HostPID != false
			yyq1274[8] = x.HostIPC != false
			yyq1274[13] = x.ReadOnlyRootFilesystem != false
			var yynn1274 int
			if yyr1274 || yy2arr1274 {
				r.EncodeArrayStart(14)
			} else {
				yynn1274 = 4
				for _, b := range yyq1274 {
					if b {
						yynn1274++
					}
				}
				r.EncodeMapStart(yynn1274)
				yynn1274 = 0
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[0] {
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1274[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1277 := z.EncBinary()
					_ = yym1277
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[1] {
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1279 := z.EncBinary()
						_ = yym1279
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg4_v1.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1274[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultAddCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1280 := z.EncBinary()
						_ = yym1280
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg4_v1.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[2] {
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1282 := z.EncBinary()
						_ = yym1282
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg4_v1.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1274[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDropCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1283 := z.EncBinary()
						_ = yym1283
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg4_v1.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[3] {
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1285 := z.EncBinary()
						_ = yym1285
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg4_v1.Capability)(x.AllowedCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1274[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allowedCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1286 := z.EncBinary()
						_ = yym1286
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg4_v1.Capability)(x.AllowedCapabilities), e)
						}
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[4] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1288 := z.EncBinary()
						_ = yym1288
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1274[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1289 := z.EncBinary()
						_ = yym1289
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[5] {
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1274[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1292 := z.EncBinary()
					_ = yym1292
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[6] {
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1294 := z.EncBinary()
						_ = yym1294
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1274[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPorts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1295 := z.EncBinary()
						_ = yym1295
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[7] {
					yym1297 := z.EncBinary()
					_ = yym1297
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1274[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1298 := z.EncBinary()
					_ = yym1298
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[8] {
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1274[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1303 := &x.SELinux
				yy1303.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("seLinux"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1304 := &x.SELinux
				yy1304.CodecEncodeSelf(e)
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1306 := &x.RunAsUser
				yy1306.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1307 := &x.RunAsUser
				yy1307.CodecEncodeSelf(e)
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1309 := &x.SupplementalGroups
				yy1309.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1310 := &x.SupplementalGroups
				yy1310.CodecEncodeSelf(e)
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1312 := &x.FSGroup
				yy1312.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1313 := &x.FSGroup
				yy1313.CodecEncodeSelf(e)
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1274[13] {
					yym1315 := z.EncBinary()
					_ = yym1315
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1274[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1316 := z.EncBinary()
					_ = yym1316
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				}
			}
			if yyr1274 || yy2arr1274 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1317 := z.DecBinary()
	_ = yym1317
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1318 := r.ContainerType()
		if yyct1318 == codecSelferValueTypeMap1234 {
			yyl1318 := r.ReadMapStart()
			if yyl1318 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1318, d)
			}
		} else if yyct1318 == codecSelferValueTypeArray1234 {
			yyl1318 := r.ReadArrayStart()
			if yyl1318 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1318, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1319Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1319Slc
	var yyhl1319 bool = l >= 0
	for yyj1319 := 0; ; yyj1319++ {
		if yyhl1319 {
			if yyj1319 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1319Slc = r.DecodeBytes(yys1319Slc, true, true)
		yys1319 := string(yys1319Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1319 {
		case "privileged":
			if r.TryDecodeAsNil() {
				x.Privileged = false
			} else {
				x.Privileged = bool(r.DecodeBool())
			}
		case "defaultAddCapabilities":
			if r.TryDecodeAsNil() {
				x.DefaultAddCapabilities = nil
			} else {
				yyv1321 := &x.DefaultAddCapabilities
				yym1322 := z.DecBinary()
				_ = yym1322
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg4_v1.Capability)(yyv1321), d)
				}
			}
		case "requiredDropCapabilities":
			if r.TryDecodeAsNil() {
				x.RequiredDropCapabilities = nil
			} else {
				yyv1323 := &x.RequiredDropCapabilities
				yym1324 := z.DecBinary()
				_ = yym1324
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg4_v1.Capability)(yyv1323), d)
				}
			}
		case "allowedCapabilities":
			if r.TryDecodeAsNil() {
				x.AllowedCapabilities = nil
			} else {
				yyv1325 := &x.AllowedCapabilities
				yym1326 := z.DecBinary()
				_ = yym1326
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg4_v1.Capability)(yyv1325), d)
				}
			}
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1327 := &x.Volumes
				yym1328 := z.DecBinary()
				_ = yym1328
				if false {
				} else {
					h.decSliceFSType((*[]FSType)(yyv1327), d)
				}
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPorts":
			if r.TryDecodeAsNil() {
				x.HostPorts = nil
			} else {
				yyv1330 := &x.HostPorts
				yym1331 := z.DecBinary()
				_ = yym1331
				if false {
				} else {
					h.decSliceHostPortRange((*[]HostPortRange)(yyv1330), d)
				}
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinux":
			if r.TryDecodeAsNil() {
				x.SELinux = SELinuxStrategyOptions{}
			} else {
				yyv1334 := &x.SELinux
				yyv1334.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				x.RunAsUser = RunAsUserStrategyOptions{}
			} else {
				yyv1335 := &x.RunAsUser
				yyv1335.CodecDecodeSelf(d)
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
			} else {
				yyv1336 := &x.SupplementalGroups
				yyv1336.CodecDecodeSelf(d)
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				x.FSGroup = FSGroupStrategyOptions{}
			} else {
				yyv1337 := &x.FSGroup
				yyv1337.CodecDecodeSelf(d)
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				x.ReadOnlyRootFilesystem = false
			} else {
				x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1319)
		} // end switch yys1319
	} // end for yyj1319
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1339 int
	var yyb1339 bool
	var yyhl1339 bool = l >= 0
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Privileged = false
	} else {
		x.Privileged = bool(r.DecodeBool())
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultAddCapabilities = nil
	} else {
		yyv1341 := &x.DefaultAddCapabilities
		yym1342 := z.DecBinary()
		_ = yym1342
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg4_v1.Capability)(yyv1341), d)
		}
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDropCapabilities = nil
	} else {
		yyv1343 := &x.RequiredDropCapabilities
		yym1344 := z.DecBinary()
		_ = yym1344
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg4_v1.Capability)(yyv1343), d)
		}
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AllowedCapabilities = nil
	} else {
		yyv1345 := &x.AllowedCapabilities
		yym1346 := z.DecBinary()
		_ = yym1346
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg4_v1.Capability)(yyv1345), d)
		}
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1347 := &x.Volumes
		yym1348 := z.DecBinary()
		_ = yym1348
		if false {
		} else {
			h.decSliceFSType((*[]FSType)(yyv1347), d)
		}
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPorts = nil
	} else {
		yyv1350 := &x.HostPorts
		yym1351 := z.DecBinary()
		_ = yym1351
		if false {
		} else {
			h.decSliceHostPortRange((*[]HostPortRange)(yyv1350), d)
		}
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SELinux = SELinuxStrategyOptions{}
	} else {
		yyv1354 := &x.SELinux
		yyv1354.CodecDecodeSelf(d)
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RunAsUser = RunAsUserStrategyOptions{}
	} else {
		yyv1355 := &x.RunAsUser
		yyv1355.CodecDecodeSelf(d)
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
	} else {
		yyv1356 := &x.SupplementalGroups
		yyv1356.CodecDecodeSelf(d)
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSGroup = FSGroupStrategyOptions{}
	} else {
		yyv1357 := &x.FSGroup
		yyv1357.CodecDecodeSelf(d)
	}
	yyj1339++
	if yyhl1339 {
		yyb1339 = yyj1339 > l
	} else {
		yyb1339 = r.CheckBreak()
	}
	if yyb1339 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnlyRootFilesystem = false
	} else {
		x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
	}
	for {
		yyj1339++
		if yyhl1339 {
			yyb1339 = yyj1339 > l
		} else {
			yyb1339 = r.CheckBreak()
		}
		if yyb1339 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1339-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1359 := z.EncBinary()
	_ = yym1359
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1360 := z.DecBinary()
	_ = yym1360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPortRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1361 := z.EncBinary()
		_ = yym1361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1362 := !z.EncBinary()
			yy2arr1362 := z.EncBasicHandle().StructToArray
			var yyq1362 [2]bool
			_, _, _ = yysep1362, yyq1362, yy2arr1362
			const yyr1362 bool = false
			var yynn1362 int
			if yyr1362 || yy2arr1362 {
				r.EncodeArrayStart(2)
			} else {
				yynn1362 = 2
				for _, b := range yyq1362 {
					if b {
						yynn1362++
					}
				}
				r.EncodeMapStart(yynn1362)
				yynn1362 = 0
			}
			if yyr1362 || yy2arr1362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1364 := z.EncBinary()
				_ = yym1364
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1365 := z.EncBinary()
				_ = yym1365
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1362 || yy2arr1362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1367 := z.EncBinary()
				_ = yym1367
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1368 := z.EncBinary()
				_ = yym1368
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1362 || yy2arr1362 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPortRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1369 := z.DecBinary()
	_ = yym1369
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1370 := r.ContainerType()
		if yyct1370 == codecSelferValueTypeMap1234 {
			yyl1370 := r.ReadMapStart()
			if yyl1370 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1370, d)
			}
		} else if yyct1370 == codecSelferValueTypeArray1234 {
			yyl1370 := r.ReadArrayStart()
			if yyl1370 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1370, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPortRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1371Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1371Slc
	var yyhl1371 bool = l >= 0
	for yyj1371 := 0; ; yyj1371++ {
		if yyhl1371 {
			if yyj1371 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1371Slc = r.DecodeBytes(yys1371Slc, true, true)
		yys1371 := string(yys1371Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1371 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int32(r.DecodeInt(32))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1371)
		} // end switch yys1371
	} // end for yyj1371
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPortRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1374 int
	var yyb1374 bool
	var yyhl1374 bool = l >= 0
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int32(r.DecodeInt(32))
	}
	yyj1374++
	if yyhl1374 {
		yyb1374 = yyj1374 > l
	} else {
		yyb1374 = r.CheckBreak()
	}
	if yyb1374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int32(r.DecodeInt(32))
	}
	for {
		yyj1374++
		if yyhl1374 {
			yyb1374 = yyj1374 > l
		} else {
			yyb1374 = r.CheckBreak()
		}
		if yyb1374 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1374-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1377 := z.EncBinary()
		_ = yym1377
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1378 := !z.EncBinary()
			yy2arr1378 := z.EncBasicHandle().StructToArray
			var yyq1378 [2]bool
			_, _, _ = yysep1378, yyq1378, yy2arr1378
			const yyr1378 bool = false
			yyq1378[1] = x.SELinuxOptions != nil
			var yynn1378 int
			if yyr1378 || yy2arr1378 {
				r.EncodeArrayStart(2)
			} else {
				yynn1378 = 1
				for _, b := range yyq1378 {
					if b {
						yynn1378++
					}
				}
				r.EncodeMapStart(yynn1378)
				yynn1378 = 0
			}
			if yyr1378 || yy2arr1378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1378 || yy2arr1378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1378[1] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1378[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1378 || yy2arr1378 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1381 := z.DecBinary()
	_ = yym1381
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1382 := r.ContainerType()
		if yyct1382 == codecSelferValueTypeMap1234 {
			yyl1382 := r.ReadMapStart()
			if yyl1382 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1382, d)
			}
		} else if yyct1382 == codecSelferValueTypeArray1234 {
			yyl1382 := r.ReadArrayStart()
			if yyl1382 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1382, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1383Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1383Slc
	var yyhl1383 bool = l >= 0
	for yyj1383 := 0; ; yyj1383++ {
		if yyhl1383 {
			if yyj1383 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1383Slc = r.DecodeBytes(yys1383Slc, true, true)
		yys1383 := string(yys1383Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1383 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SELinuxStrategy(r.DecodeString())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(pkg4_v1.SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1383)
		} // end switch yys1383
	} // end for yyj1383
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1386 int
	var yyb1386 bool
	var yyhl1386 bool = l >= 0
	yyj1386++
	if yyhl1386 {
		yyb1386 = yyj1386 > l
	} else {
		yyb1386 = r.CheckBreak()
	}
	if yyb1386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SELinuxStrategy(r.DecodeString())
	}
	yyj1386++
	if yyhl1386 {
		yyb1386 = yyj1386 > l
	} else {
		yyb1386 = r.CheckBreak()
	}
	if yyb1386 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(pkg4_v1.SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	for {
		yyj1386++
		if yyhl1386 {
			yyb1386 = yyj1386 > l
		} else {
			yyb1386 = r.CheckBreak()
		}
		if yyb1386 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1386-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SELinuxStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1389 := z.EncBinary()
	_ = yym1389
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SELinuxStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1390 := z.DecBinary()
	_ = yym1390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RunAsUserStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1391 := z.EncBinary()
		_ = yym1391
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1392 := !z.EncBinary()
			yy2arr1392 := z.EncBasicHandle().StructToArray
			var yyq1392 [2]bool
			_, _, _ = yysep1392, yyq1392, yy2arr1392
			const yyr1392 bool = false
			yyq1392[1] = len(x.Ranges) != 0
			var yynn1392 int
			if yyr1392 || yy2arr1392 {
				r.EncodeArrayStart(2)
			} else {
				yynn1392 = 1
				for _, b := range yyq1392 {
					if b {
						yynn1392++
					}
				}
				r.EncodeMapStart(yynn1392)
				yynn1392 = 0
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1392[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1395 := z.EncBinary()
						_ = yym1395
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1392[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1396 := z.EncBinary()
						_ = yym1396
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1392 || yy2arr1392 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RunAsUserStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1397 := z.DecBinary()
	_ = yym1397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1398 := r.ContainerType()
		if yyct1398 == codecSelferValueTypeMap1234 {
			yyl1398 := r.ReadMapStart()
			if yyl1398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1398, d)
			}
		} else if yyct1398 == codecSelferValueTypeArray1234 {
			yyl1398 := r.ReadArrayStart()
			if yyl1398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1399Slc
	var yyhl1399 bool = l >= 0
	for yyj1399 := 0; ; yyj1399++ {
		if yyhl1399 {
			if yyj1399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1399Slc = r.DecodeBytes(yys1399Slc, true, true)
		yys1399 := string(yys1399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1399 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = RunAsUserStrategy(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1401 := &x.Ranges
				yym1402 := z.DecBinary()
				_ = yym1402
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1401), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1399)
		} // end switch yys1399
	} // end for yyj1399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1403 int
	var yyb1403 bool
	var yyhl1403 bool = l >= 0
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = RunAsUserStrategy(r.DecodeString())
	}
	yyj1403++
	if yyhl1403 {
		yyb1403 = yyj1403 > l
	} else {
		yyb1403 = r.CheckBreak()
	}
	if yyb1403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1405 := &x.Ranges
		yym1406 := z.DecBinary()
		_ = yym1406
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1405), d)
		}
	}
	for {
		yyj1403++
		if yyhl1403 {
			yyb1403 = yyj1403 > l
		} else {
			yyb1403 = r.CheckBreak()
		}
		if yyb1403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IDRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1407 := z.EncBinary()
		_ = yym1407
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1408 := !z.EncBinary()
			yy2arr1408 := z.EncBasicHandle().StructToArray
			var yyq1408 [2]bool
			_, _, _ = yysep1408, yyq1408, yy2arr1408
			const yyr1408 bool = false
			var yynn1408 int
			if yyr1408 || yy2arr1408 {
				r.EncodeArrayStart(2)
			} else {
				yynn1408 = 2
				for _, b := range yyq1408 {
					if b {
						yynn1408++
					}
				}
				r.EncodeMapStart(yynn1408)
				yynn1408 = 0
			}
			if yyr1408 || yy2arr1408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1410 := z.EncBinary()
				_ = yym1410
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1411 := z.EncBinary()
				_ = yym1411
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1408 || yy2arr1408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1413 := z.EncBinary()
				_ = yym1413
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1414 := z.EncBinary()
				_ = yym1414
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1408 || yy2arr1408 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IDRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1415 := z.DecBinary()
	_ = yym1415
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1416 := r.ContainerType()
		if yyct1416 == codecSelferValueTypeMap1234 {
			yyl1416 := r.ReadMapStart()
			if yyl1416 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1416, d)
			}
		} else if yyct1416 == codecSelferValueTypeArray1234 {
			yyl1416 := r.ReadArrayStart()
			if yyl1416 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1416, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IDRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1417Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1417Slc
	var yyhl1417 bool = l >= 0
	for yyj1417 := 0; ; yyj1417++ {
		if yyhl1417 {
			if yyj1417 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1417Slc = r.DecodeBytes(yys1417Slc, true, true)
		yys1417 := string(yys1417Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1417 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int64(r.DecodeInt(64))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1417)
		} // end switch yys1417
	} // end for yyj1417
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IDRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1420 int
	var yyb1420 bool
	var yyhl1420 bool = l >= 0
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int64(r.DecodeInt(64))
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int64(r.DecodeInt(64))
	}
	for {
		yyj1420++
		if yyhl1420 {
			yyb1420 = yyj1420 > l
		} else {
			yyb1420 = r.CheckBreak()
		}
		if yyb1420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RunAsUserStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1423 := z.EncBinary()
	_ = yym1423
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RunAsUserStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1424 := z.DecBinary()
	_ = yym1424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *FSGroupStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1425 := z.EncBinary()
		_ = yym1425
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1426 := !z.EncBinary()
			yy2arr1426 := z.EncBasicHandle().StructToArray
			var yyq1426 [2]bool
			_, _, _ = yysep1426, yyq1426, yy2arr1426
			const yyr1426 bool = false
			yyq1426[0] = x.Rule != ""
			yyq1426[1] = len(x.Ranges) != 0
			var yynn1426 int
			if yyr1426 || yy2arr1426 {
				r.EncodeArrayStart(2)
			} else {
				yynn1426 = 0
				for _, b := range yyq1426 {
					if b {
						yynn1426++
					}
				}
				r.EncodeMapStart(yynn1426)
				yynn1426 = 0
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1426[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1426[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1426[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1429 := z.EncBinary()
						_ = yym1429
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1426[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1430 := z.EncBinary()
						_ = yym1430
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1426 || yy2arr1426 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FSGroupStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1431 := z.DecBinary()
	_ = yym1431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1432 := r.ContainerType()
		if yyct1432 == codecSelferValueTypeMap1234 {
			yyl1432 := r.ReadMapStart()
			if yyl1432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1432, d)
			}
		} else if yyct1432 == codecSelferValueTypeArray1234 {
			yyl1432 := r.ReadArrayStart()
			if yyl1432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1433Slc
	var yyhl1433 bool = l >= 0
	for yyj1433 := 0; ; yyj1433++ {
		if yyhl1433 {
			if yyj1433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1433Slc = r.DecodeBytes(yys1433Slc, true, true)
		yys1433 := string(yys1433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1433 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = FSGroupStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1435 := &x.Ranges
				yym1436 := z.DecBinary()
				_ = yym1436
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1435), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1433)
		} // end switch yys1433
	} // end for yyj1433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1437 int
	var yyb1437 bool
	var yyhl1437 bool = l >= 0
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = FSGroupStrategyType(r.DecodeString())
	}
	yyj1437++
	if yyhl1437 {
		yyb1437 = yyj1437 > l
	} else {
		yyb1437 = r.CheckBreak()
	}
	if yyb1437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1439 := &x.Ranges
		yym1440 := z.DecBinary()
		_ = yym1440
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1439), d)
		}
	}
	for {
		yyj1437++
		if yyhl1437 {
			yyb1437 = yyj1437 > l
		} else {
			yyb1437 = r.CheckBreak()
		}
		if yyb1437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSGroupStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1441 := z.EncBinary()
	_ = yym1441
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSGroupStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1442 := z.DecBinary()
	_ = yym1442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1443 := z.EncBinary()
		_ = yym1443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1444 := !z.EncBinary()
			yy2arr1444 := z.EncBasicHandle().StructToArray
			var yyq1444 [2]bool
			_, _, _ = yysep1444, yyq1444, yy2arr1444
			const yyr1444 bool = false
			yyq1444[0] = x.Rule != ""
			yyq1444[1] = len(x.Ranges) != 0
			var yynn1444 int
			if yyr1444 || yy2arr1444 {
				r.EncodeArrayStart(2)
			} else {
				yynn1444 = 0
				for _, b := range yyq1444 {
					if b {
						yynn1444++
					}
				}
				r.EncodeMapStart(yynn1444)
				yynn1444 = 0
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1447 := z.EncBinary()
						_ = yym1447
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1448 := z.EncBinary()
						_ = yym1448
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1449 := z.DecBinary()
	_ = yym1449
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1450 := r.ContainerType()
		if yyct1450 == codecSelferValueTypeMap1234 {
			yyl1450 := r.ReadMapStart()
			if yyl1450 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1450, d)
			}
		} else if yyct1450 == codecSelferValueTypeArray1234 {
			yyl1450 := r.ReadArrayStart()
			if yyl1450 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1450, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1451Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1451Slc
	var yyhl1451 bool = l >= 0
	for yyj1451 := 0; ; yyj1451++ {
		if yyhl1451 {
			if yyj1451 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1451Slc = r.DecodeBytes(yys1451Slc, true, true)
		yys1451 := string(yys1451Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1451 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1453 := &x.Ranges
				yym1454 := z.DecBinary()
				_ = yym1454
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1453), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1451)
		} // end switch yys1451
	} // end for yyj1451
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1455 int
	var yyb1455 bool
	var yyhl1455 bool = l >= 0
	yyj1455++
	if yyhl1455 {
		yyb1455 = yyj1455 > l
	} else {
		yyb1455 = r.CheckBreak()
	}
	if yyb1455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
	}
	yyj1455++
	if yyhl1455 {
		yyb1455 = yyj1455 > l
	} else {
		yyb1455 = r.CheckBreak()
	}
	if yyb1455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1457 := &x.Ranges
		yym1458 := z.DecBinary()
		_ = yym1458
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1457), d)
		}
	}
	for {
		yyj1455++
		if yyhl1455 {
			yyb1455 = yyj1455 > l
		} else {
			yyb1455 = r.CheckBreak()
		}
		if yyb1455 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1455-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SupplementalGroupsStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1459 := z.EncBinary()
	_ = yym1459
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SupplementalGroupsStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1460 := z.DecBinary()
	_ = yym1460
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSecurityPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1461 := z.EncBinary()
		_ = yym1461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1462 := !z.EncBinary()
			yy2arr1462 := z.EncBasicHandle().StructToArray
			var yyq1462 [4]bool
			_, _, _ = yysep1462, yyq1462, yy2arr1462
			const yyr1462 bool = false
			yyq1462[0] = x.Kind != ""
			yyq1462[1] = x.APIVersion != ""
			yyq1462[2] = true
			var yynn1462 int
			if yyr1462 || yy2arr1462 {
				r.EncodeArrayStart(4)
			} else {
				yynn1462 = 1
				for _, b := range yyq1462 {
					if b {
						yynn1462++
					}
				}
				r.EncodeMapStart(yynn1462)
				yynn1462 = 0
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1462[0] {
					yym1464 := z.EncBinary()
					_ = yym1464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1462[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1465 := z.EncBinary()
					_ = yym1465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1462[1] {
					yym1467 := z.EncBinary()
					_ = yym1467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1462[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1468 := z.EncBinary()
					_ = yym1468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1462[2] {
					yy1470 := &x.ListMeta
					yym1471 := z.EncBinary()
					_ = yym1471
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1470) {
					} else {
						z.EncFallback(yy1470)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1462[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1472 := &x.ListMeta
					yym1473 := z.EncBinary()
					_ = yym1473
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1472) {
					} else {
						z.EncFallback(yy1472)
					}
				}
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1475 := z.EncBinary()
					_ = yym1475
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1476 := z.EncBinary()
					_ = yym1476
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			}
			if yyr1462 || yy2arr1462 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1477 := z.DecBinary()
	_ = yym1477
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1478 := r.ContainerType()
		if yyct1478 == codecSelferValueTypeMap1234 {
			yyl1478 := r.ReadMapStart()
			if yyl1478 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1478, d)
			}
		} else if yyct1478 == codecSelferValueTypeArray1234 {
			yyl1478 := r.ReadArrayStart()
			if yyl1478 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1478, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1479Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1479Slc
	var yyhl1479 bool = l >= 0
	for yyj1479 := 0; ; yyj1479++ {
		if yyhl1479 {
			if yyj1479 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1479Slc = r.DecodeBytes(yys1479Slc, true, true)
		yys1479 := string(yys1479Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1479 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv1482 := &x.ListMeta
				yym1483 := z.DecBinary()
				_ = yym1483
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1482) {
				} else {
					z.DecFallback(yyv1482, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1484 := &x.Items
				yym1485 := z.DecBinary()
				_ = yym1485
				if false {
				} else {
					h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1484), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1479)
		} // end switch yys1479
	} // end for yyj1479
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1486 int
	var yyb1486 bool
	var yyhl1486 bool = l >= 0
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv1489 := &x.ListMeta
		yym1490 := z.DecBinary()
		_ = yym1490
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1489) {
		} else {
			z.DecFallback(yyv1489, false)
		}
	}
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1491 := &x.Items
		yym1492 := z.DecBinary()
		_ = yym1492
		if false {
		} else {
			h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1491), d)
		}
	}
	for {
		yyj1486++
		if yyhl1486 {
			yyb1486 = yyj1486 > l
		} else {
			yyb1486 = r.CheckBreak()
		}
		if yyb1486 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1486-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1493 := z.EncBinary()
		_ = yym1493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1494 := !z.EncBinary()
			yy2arr1494 := z.EncBasicHandle().StructToArray
			var yyq1494 [4]bool
			_, _, _ = yysep1494, yyq1494, yy2arr1494
			const yyr1494 bool = false
			yyq1494[0] = x.Kind != ""
			yyq1494[1] = x.APIVersion != ""
			yyq1494[2] = true
			yyq1494[3] = true
			var yynn1494 int
			if yyr1494 || yy2arr1494 {
				r.EncodeArrayStart(4)
			} else {
				yynn1494 = 0
				for _, b := range yyq1494 {
					if b {
						yynn1494++
					}
				}
				r.EncodeMapStart(yynn1494)
				yynn1494 = 0
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[0] {
					yym1496 := z.EncBinary()
					_ = yym1496
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1494[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1497 := z.EncBinary()
					_ = yym1497
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[1] {
					yym1499 := z.EncBinary()
					_ = yym1499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1494[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1500 := z.EncBinary()
					_ = yym1500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[2] {
					yy1502 := &x.ObjectMeta
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1502) {
					} else {
						z.EncFallback(yy1502)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1504 := &x.ObjectMeta
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1504) {
					} else {
						z.EncFallback(yy1504)
					}
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1494[3] {
					yy1507 := &x.Spec
					yy1507.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1494[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1508 := &x.Spec
					yy1508.CodecEncodeSelf(e)
				}
			}
			if yyr1494 || yy2arr1494 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1509 := z.DecBinary()
	_ = yym1509
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1510 := r.ContainerType()
		if yyct1510 == codecSelferValueTypeMap1234 {
			yyl1510 := r.ReadMapStart()
			if yyl1510 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1510, d)
			}
		} else if yyct1510 == codecSelferValueTypeArray1234 {
			yyl1510 := r.ReadArrayStart()
			if yyl1510 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1510, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1511Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1511Slc
	var yyhl1511 bool = l >= 0
	for yyj1511 := 0; ; yyj1511++ {
		if yyhl1511 {
			if yyj1511 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1511Slc = r.DecodeBytes(yys1511Slc, true, true)
		yys1511 := string(yys1511Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1511 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv1514 := &x.ObjectMeta
				yym1515 := z.DecBinary()
				_ = yym1515
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1514) {
				} else {
					z.DecFallback(yyv1514, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkPolicySpec{}
			} else {
				yyv1516 := &x.Spec
				yyv1516.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1511)
		} // end switch yys1511
	} // end for yyj1511
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1517 int
	var yyb1517 bool
	var yyhl1517 bool = l >= 0
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv1520 := &x.ObjectMeta
		yym1521 := z.DecBinary()
		_ = yym1521
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1520) {
		} else {
			z.DecFallback(yyv1520, false)
		}
	}
	yyj1517++
	if yyhl1517 {
		yyb1517 = yyj1517 > l
	} else {
		yyb1517 = r.CheckBreak()
	}
	if yyb1517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NetworkPolicySpec{}
	} else {
		yyv1522 := &x.Spec
		yyv1522.CodecDecodeSelf(d)
	}
	for {
		yyj1517++
		if yyhl1517 {
			yyb1517 = yyj1517 > l
		} else {
			yyb1517 = r.CheckBreak()
		}
		if yyb1517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1523 := z.EncBinary()
		_ = yym1523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1524 := !z.EncBinary()
			yy2arr1524 := z.EncBasicHandle().StructToArray
			var yyq1524 [2]bool
			_, _, _ = yysep1524, yyq1524, yy2arr1524
			const yyr1524 bool = false
			yyq1524[1] = len(x.Ingress) != 0
			var yynn1524 int
			if yyr1524 || yy2arr1524 {
				r.EncodeArrayStart(2)
			} else {
				yynn1524 = 1
				for _, b := range yyq1524 {
					if b {
						yynn1524++
					}
				}
				r.EncodeMapStart(yynn1524)
				yynn1524 = 0
			}
			if yyr1524 || yy2arr1524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1526 := &x.PodSelector
				yym1527 := z.EncBinary()
				_ = yym1527
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1526) {
				} else {
					z.EncFallback(yy1526)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1528 := &x.PodSelector
				yym1529 := z.EncBinary()
				_ = yym1529
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1528) {
				} else {
					z.EncFallback(yy1528)
				}
			}
			if yyr1524 || yy2arr1524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1524[1] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1531 := z.EncBinary()
						_ = yym1531
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1532 := z.EncBinary()
						_ = yym1532
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1524 || yy2arr1524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1533 := z.DecBinary()
	_ = yym1533
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1534 := r.ContainerType()
		if yyct1534 == codecSelferValueTypeMap1234 {
			yyl1534 := r.ReadMapStart()
			if yyl1534 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1534, d)
			}
		} else if yyct1534 == codecSelferValueTypeArray1234 {
			yyl1534 := r.ReadArrayStart()
			if yyl1534 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1534, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1535Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1535Slc
	var yyhl1535 bool = l >= 0
	for yyj1535 := 0; ; yyj1535++ {
		if yyhl1535 {
			if yyj1535 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1535Slc = r.DecodeBytes(yys1535Slc, true, true)
		yys1535 := string(yys1535Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1535 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				x.PodSelector = pkg1_v1.LabelSelector{}
			} else {
				yyv1536 := &x.PodSelector
				yym1537 := z.DecBinary()
				_ = yym1537
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1536) {
				} else {
					z.DecFallback(yyv1536, false)
				}
			}
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1538 := &x.Ingress
				yym1539 := z.DecBinary()
				_ = yym1539
				if false {
				} else {
					h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1538), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1535)
		} // end switch yys1535
	} // end for yyj1535
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1540 int
	var yyb1540 bool
	var yyhl1540 bool = l >= 0
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSelector = pkg1_v1.LabelSelector{}
	} else {
		yyv1541 := &x.PodSelector
		yym1542 := z.DecBinary()
		_ = yym1542
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1541) {
		} else {
			z.DecFallback(yyv1541, false)
		}
	}
	yyj1540++
	if yyhl1540 {
		yyb1540 = yyj1540 > l
	} else {
		yyb1540 = r.CheckBreak()
	}
	if yyb1540 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1543 := &x.Ingress
		yym1544 := z.DecBinary()
		_ = yym1544
		if false {
		} else {
			h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1543), d)
		}
	}
	for {
		yyj1540++
		if yyhl1540 {
			yyb1540 = yyj1540 > l
		} else {
			yyb1540 = r.CheckBreak()
		}
		if yyb1540 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1540-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyIngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1545 := z.EncBinary()
		_ = yym1545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1546 := !z.EncBinary()
			yy2arr1546 := z.EncBasicHandle().StructToArray
			var yyq1546 [2]bool
			_, _, _ = yysep1546, yyq1546, yy2arr1546
			const yyr1546 bool = false
			yyq1546[0] = len(x.Ports) != 0
			yyq1546[1] = len(x.From) != 0
			var yynn1546 int
			if yyr1546 || yy2arr1546 {
				r.EncodeArrayStart(2)
			} else {
				yynn1546 = 0
				for _, b := range yyq1546 {
					if b {
						yynn1546++
					}
				}
				r.EncodeMapStart(yynn1546)
				yynn1546 = 0
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1546[0] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1548 := z.EncBinary()
						_ = yym1548
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1546[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1549 := z.EncBinary()
						_ = yym1549
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1546[1] {
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1551 := z.EncBinary()
						_ = yym1551
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1546[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("from"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1552 := z.EncBinary()
						_ = yym1552
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				}
			}
			if yyr1546 || yy2arr1546 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyIngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1553 := z.DecBinary()
	_ = yym1553
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1554 := r.ContainerType()
		if yyct1554 == codecSelferValueTypeMap1234 {
			yyl1554 := r.ReadMapStart()
			if yyl1554 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1554, d)
			}
		} else if yyct1554 == codecSelferValueTypeArray1234 {
			yyl1554 := r.ReadArrayStart()
			if yyl1554 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1554, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1555Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1555Slc
	var yyhl1555 bool = l >= 0
	for yyj1555 := 0; ; yyj1555++ {
		if yyhl1555 {
			if yyj1555 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1555Slc = r.DecodeBytes(yys1555Slc, true, true)
		yys1555 := string(yys1555Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1555 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1556 := &x.Ports
				yym1557 := z.DecBinary()
				_ = yym1557
				if false {
				} else {
					h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1556), d)
				}
			}
		case "from":
			if r.TryDecodeAsNil() {
				x.From = nil
			} else {
				yyv1558 := &x.From
				yym1559 := z.DecBinary()
				_ = yym1559
				if false {
				} else {
					h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1558), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1555)
		} // end switch yys1555
	} // end for yyj1555
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1560 int
	var yyb1560 bool
	var yyhl1560 bool = l >= 0
	yyj1560++
	if yyhl1560 {
		yyb1560 = yyj1560 > l
	} else {
		yyb1560 = r.CheckBreak()
	}
	if yyb1560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1561 := &x.Ports
		yym1562 := z.DecBinary()
		_ = yym1562
		if false {
		} else {
			h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1561), d)
		}
	}
	yyj1560++
	if yyhl1560 {
		yyb1560 = yyj1560 > l
	} else {
		yyb1560 = r.CheckBreak()
	}
	if yyb1560 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.From = nil
	} else {
		yyv1563 := &x.From
		yym1564 := z.DecBinary()
		_ = yym1564
		if false {
		} else {
			h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1563), d)
		}
	}
	for {
		yyj1560++
		if yyhl1560 {
			yyb1560 = yyj1560 > l
		} else {
			yyb1560 = r.CheckBreak()
		}
		if yyb1560 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1560-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1565 := z.EncBinary()
		_ = yym1565
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1566 := !z.EncBinary()
			yy2arr1566 := z.EncBasicHandle().StructToArray
			var yyq1566 [2]bool
			_, _, _ = yysep1566, yyq1566, yy2arr1566
			const yyr1566 bool = false
			yyq1566[0] = x.Protocol != nil
			yyq1566[1] = x.Port != nil
			var yynn1566 int
			if yyr1566 || yy2arr1566 {
				r.EncodeArrayStart(2)
			} else {
				yynn1566 = 0
				for _, b := range yyq1566 {
					if b {
						yynn1566++
					}
				}
				r.EncodeMapStart(yynn1566)
				yynn1566 = 0
			}
			if yyr1566 || yy2arr1566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1566[0] {
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1568 := *x.Protocol
						yym1569 := z.EncBinary()
						_ = yym1569
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1568) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1568))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1566[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1570 := *x.Protocol
						yym1571 := z.EncBinary()
						_ = yym1571
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1570) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1570))
						}
					}
				}
			}
			if yyr1566 || yy2arr1566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1566[1] {
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1573 := z.EncBinary()
						_ = yym1573
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1573 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1566[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1574 := z.EncBinary()
						_ = yym1574
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1574 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				}
			}
			if yyr1566 || yy2arr1566 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1575 := z.DecBinary()
	_ = yym1575
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1576 := r.ContainerType()
		if yyct1576 == codecSelferValueTypeMap1234 {
			yyl1576 := r.ReadMapStart()
			if yyl1576 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1576, d)
			}
		} else if yyct1576 == codecSelferValueTypeArray1234 {
			yyl1576 := r.ReadArrayStart()
			if yyl1576 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1576, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1577Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1577Slc
	var yyhl1577 bool = l >= 0
	for yyj1577 := 0; ; yyj1577++ {
		if yyhl1577 {
			if yyj1577 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1577Slc = r.DecodeBytes(yys1577Slc, true, true)
		yys1577 := string(yys1577Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1577 {
		case "protocol":
			if r.TryDecodeAsNil() {
				if x.Protocol != nil {
					x.Protocol = nil
				}
			} else {
				if x.Protocol == nil {
					x.Protocol = new(pkg4_v1.Protocol)
				}
				x.Protocol.CodecDecodeSelf(d)
			}
		case "port":
			if r.TryDecodeAsNil() {
				if x.Port != nil {
					x.Port = nil
				}
			} else {
				if x.Port == nil {
					x.Port = new(pkg5_intstr.IntOrString)
				}
				yym1580 := z.DecBinary()
				_ = yym1580
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Port) {
				} else if !yym1580 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Port)
				} else {
					z.DecFallback(x.Port, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1577)
		} // end switch yys1577
	} // end for yyj1577
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1581 int
	var yyb1581 bool
	var yyhl1581 bool = l >= 0
	yyj1581++
	if yyhl1581 {
		yyb1581 = yyj1581 > l
	} else {
		yyb1581 = r.CheckBreak()
	}
	if yyb1581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Protocol != nil {
			x.Protocol = nil
		}
	} else {
		if x.Protocol == nil {
			x.Protocol = new(pkg4_v1.Protocol)
		}
		x.Protocol.CodecDecodeSelf(d)
	}
	yyj1581++
	if yyhl1581 {
		yyb1581 = yyj1581 > l
	} else {
		yyb1581 = r.CheckBreak()
	}
	if yyb1581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Port != nil {
			x.Port = nil
		}
	} else {
		if x.Port == nil {
			x.Port = new(pkg5_intstr.IntOrString)
		}
		yym1584 := z.DecBinary()
		_ = yym1584
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Port) {
		} else if !yym1584 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Port)
		} else {
			z.DecFallback(x.Port, false)
		}
	}
	for {
		yyj1581++
		if yyhl1581 {
			yyb1581 = yyj1581 > l
		} else {
			yyb1581 = r.CheckBreak()
		}
		if yyb1581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPeer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1585 := z.EncBinary()
		_ = yym1585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1586 := !z.EncBinary()
			yy2arr1586 := z.EncBasicHandle().StructToArray
			var yyq1586 [2]bool
			_, _, _ = yysep1586, yyq1586, yy2arr1586
			const yyr1586 bool = false
			yyq1586[0] = x.PodSelector != nil
			yyq1586[1] = x.NamespaceSelector != nil
			var yynn1586 int
			if yyr1586 || yy2arr1586 {
				r.EncodeArrayStart(2)
			} else {
				yynn1586 = 0
				for _, b := range yyq1586 {
					if b {
						yynn1586++
					}
				}
				r.EncodeMapStart(yynn1586)
				yynn1586 = 0
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1586[0] {
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1588 := z.EncBinary()
						_ = yym1588
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1586[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1589 := z.EncBinary()
						_ = yym1589
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1586[1] {
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1591 := z.EncBinary()
						_ = yym1591
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1586[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespaceSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1592 := z.EncBinary()
						_ = yym1592
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				}
			}
			if yyr1586 || yy2arr1586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPeer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1593 := z.DecBinary()
	_ = yym1593
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1594 := r.ContainerType()
		if yyct1594 == codecSelferValueTypeMap1234 {
			yyl1594 := r.ReadMapStart()
			if yyl1594 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1594, d)
			}
		} else if yyct1594 == codecSelferValueTypeArray1234 {
			yyl1594 := r.ReadArrayStart()
			if yyl1594 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1594, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1595Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1595Slc
	var yyhl1595 bool = l >= 0
	for yyj1595 := 0; ; yyj1595++ {
		if yyhl1595 {
			if yyj1595 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1595Slc = r.DecodeBytes(yys1595Slc, true, true)
		yys1595 := string(yys1595Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1595 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				if x.PodSelector != nil {
					x.PodSelector = nil
				}
			} else {
				if x.PodSelector == nil {
					x.PodSelector = new(pkg1_v1.LabelSelector)
				}
				yym1597 := z.DecBinary()
				_ = yym1597
				if false {
				} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
				} else {
					z.DecFallback(x.PodSelector, false)
				}
			}
		case "namespaceSelector":
			if r.TryDecodeAsNil() {
				if x.NamespaceSelector != nil {
					x.NamespaceSelector = nil
				}
			} else {
				if x.NamespaceSelector == nil {
					x.NamespaceSelector = new(pkg1_v1.LabelSelector)
				}
				yym1599 := z.DecBinary()
				_ = yym1599
				if false {
				} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
				} else {
					z.DecFallback(x.NamespaceSelector, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1595)
		} // end switch yys1595
	} // end for yyj1595
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1600 int
	var yyb1600 bool
	var yyhl1600 bool = l >= 0
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodSelector != nil {
			x.PodSelector = nil
		}
	} else {
		if x.PodSelector == nil {
			x.PodSelector = new(pkg1_v1.LabelSelector)
		}
		yym1602 := z.DecBinary()
		_ = yym1602
		if false {
		} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
		} else {
			z.DecFallback(x.PodSelector, false)
		}
	}
	yyj1600++
	if yyhl1600 {
		yyb1600 = yyj1600 > l
	} else {
		yyb1600 = r.CheckBreak()
	}
	if yyb1600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NamespaceSelector != nil {
			x.NamespaceSelector = nil
		}
	} else {
		if x.NamespaceSelector == nil {
			x.NamespaceSelector = new(pkg1_v1.LabelSelector)
		}
		yym1604 := z.DecBinary()
		_ = yym1604
		if false {
		} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
		} else {
			z.DecFallback(x.NamespaceSelector, false)
		}
	}
	for {
		yyj1600++
		if yyhl1600 {
			yyb1600 = yyj1600 > l
		} else {
			yyb1600 = r.CheckBreak()
		}
		if yyb1600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1605 := z.EncBinary()
		_ = yym1605
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1606 := !z.EncBinary()
			yy2arr1606 := z.EncBasicHandle().StructToArray
			var yyq1606 [4]bool
			_, _, _ = yysep1606, yyq1606, yy2arr1606
			const yyr1606 bool = false
			yyq1606[0] = x.Kind != ""
			yyq1606[1] = x.APIVersion != ""
			yyq1606[2] = true
			var yynn1606 int
			if yyr1606 || yy2arr1606 {
				r.EncodeArrayStart(4)
			} else {
				yynn1606 = 1
				for _, b := range yyq1606 {
					if b {
						yynn1606++
					}
				}
				r.EncodeMapStart(yynn1606)
				yynn1606 = 0
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[0] {
					yym1608 := z.EncBinary()
					_ = yym1608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1606[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1609 := z.EncBinary()
					_ = yym1609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[1] {
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1606[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1606[2] {
					yy1614 := &x.ListMeta
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1614) {
					} else {
						z.EncFallback(yy1614)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1606[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1616 := &x.ListMeta
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1616) {
					} else {
						z.EncFallback(yy1616)
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1619 := z.EncBinary()
					_ = yym1619
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			}
			if yyr1606 || yy2arr1606 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1621 := z.DecBinary()
	_ = yym1621
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1622 := r.ContainerType()
		if yyct1622 == codecSelferValueTypeMap1234 {
			yyl1622 := r.ReadMapStart()
			if yyl1622 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1622, d)
			}
		} else if yyct1622 == codecSelferValueTypeArray1234 {
			yyl1622 := r.ReadArrayStart()
			if yyl1622 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1622, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1623Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1623Slc
	var yyhl1623 bool = l >= 0
	for yyj1623 := 0; ; yyj1623++ {
		if yyhl1623 {
			if yyj1623 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1623Slc = r.DecodeBytes(yys1623Slc, true, true)
		yys1623 := string(yys1623Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1623 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv1626 := &x.ListMeta
				yym1627 := z.DecBinary()
				_ = yym1627
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1626) {
				} else {
					z.DecFallback(yyv1626, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1628 := &x.Items
				yym1629 := z.DecBinary()
				_ = yym1629
				if false {
				} else {
					h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1628), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1623)
		} // end switch yys1623
	} // end for yyj1623
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1630 int
	var yyb1630 bool
	var yyhl1630 bool = l >= 0
	yyj1630++
	if yyhl1630 {
		yyb1630 = yyj1630 > l
	} else {
		yyb1630 = r.CheckBreak()
	}
	if yyb1630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1630++
	if yyhl1630 {
		yyb1630 = yyj1630 > l
	} else {
		yyb1630 = r.CheckBreak()
	}
	if yyb1630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1630++
	if yyhl1630 {
		yyb1630 = yyj1630 > l
	} else {
		yyb1630 = r.CheckBreak()
	}
	if yyb1630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv1633 := &x.ListMeta
		yym1634 := z.DecBinary()
		_ = yym1634
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1633) {
		} else {
			z.DecFallback(yyv1633, false)
		}
	}
	yyj1630++
	if yyhl1630 {
		yyb1630 = yyj1630 > l
	} else {
		yyb1630 = r.CheckBreak()
	}
	if yyb1630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1635 := &x.Items
		yym1636 := z.DecBinary()
		_ = yym1636
		if false {
		} else {
			h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1635), d)
		}
	}
	for {
		yyj1630++
		if yyhl1630 {
			yyb1630 = yyj1630 > l
		} else {
			yyb1630 = r.CheckBreak()
		}
		if yyb1630 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1630-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1637 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1638 := &yyv1637
		yy1638.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1639 := *v
	yyh1639, yyl1639 := z.DecSliceHelperStart()
	var yyc1639 bool
	if yyl1639 == 0 {
		if yyv1639 == nil {
			yyv1639 = []CustomMetricTarget{}
			yyc1639 = true
		} else if len(yyv1639) != 0 {
			yyv1639 = yyv1639[:0]
			yyc1639 = true
		}
	} else if yyl1639 > 0 {
		var yyrr1639, yyrl1639 int
		var yyrt1639 bool
		if yyl1639 > cap(yyv1639) {

			yyrg1639 := len(yyv1639) > 0
			yyv21639 := yyv1639
			yyrl1639, yyrt1639 = z.DecInferLen(yyl1639, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1639 {
				if yyrl1639 <= cap(yyv1639) {
					yyv1639 = yyv1639[:yyrl1639]
				} else {
					yyv1639 = make([]CustomMetricTarget, yyrl1639)
				}
			} else {
				yyv1639 = make([]CustomMetricTarget, yyrl1639)
			}
			yyc1639 = true
			yyrr1639 = len(yyv1639)
			if yyrg1639 {
				copy(yyv1639, yyv21639)
			}
		} else if yyl1639 != len(yyv1639) {
			yyv1639 = yyv1639[:yyl1639]
			yyc1639 = true
		}
		yyj1639 := 0
		for ; yyj1639 < yyrr1639; yyj1639++ {
			yyh1639.ElemContainerState(yyj1639)
			if r.TryDecodeAsNil() {
				yyv1639[yyj1639] = CustomMetricTarget{}
			} else {
				yyv1640 := &yyv1639[yyj1639]
				yyv1640.CodecDecodeSelf(d)
			}

		}
		if yyrt1639 {
			for ; yyj1639 < yyl1639; yyj1639++ {
				yyv1639 = append(yyv1639, CustomMetricTarget{})
				yyh1639.ElemContainerState(yyj1639)
				if r.TryDecodeAsNil() {
					yyv1639[yyj1639] = CustomMetricTarget{}
				} else {
					yyv1641 := &yyv1639[yyj1639]
					yyv1641.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1639 := 0
		for ; !r.CheckBreak(); yyj1639++ {

			if yyj1639 >= len(yyv1639) {
				yyv1639 = append(yyv1639, CustomMetricTarget{}) // var yyz1639 CustomMetricTarget
				yyc1639 = true
			}
			yyh1639.ElemContainerState(yyj1639)
			if yyj1639 < len(yyv1639) {
				if r.TryDecodeAsNil() {
					yyv1639[yyj1639] = CustomMetricTarget{}
				} else {
					yyv1642 := &yyv1639[yyj1639]
					yyv1642.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1639 < len(yyv1639) {
			yyv1639 = yyv1639[:yyj1639]
			yyc1639 = true
		} else if yyj1639 == 0 && yyv1639 == nil {
			yyv1639 = []CustomMetricTarget{}
			yyc1639 = true
		}
	}
	yyh1639.End()
	if yyc1639 {
		*v = yyv1639
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1643 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1644 := &yyv1643
		yy1644.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1645 := *v
	yyh1645, yyl1645 := z.DecSliceHelperStart()
	var yyc1645 bool
	if yyl1645 == 0 {
		if yyv1645 == nil {
			yyv1645 = []CustomMetricCurrentStatus{}
			yyc1645 = true
		} else if len(yyv1645) != 0 {
			yyv1645 = yyv1645[:0]
			yyc1645 = true
		}
	} else if yyl1645 > 0 {
		var yyrr1645, yyrl1645 int
		var yyrt1645 bool
		if yyl1645 > cap(yyv1645) {

			yyrg1645 := len(yyv1645) > 0
			yyv21645 := yyv1645
			yyrl1645, yyrt1645 = z.DecInferLen(yyl1645, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1645 {
				if yyrl1645 <= cap(yyv1645) {
					yyv1645 = yyv1645[:yyrl1645]
				} else {
					yyv1645 = make([]CustomMetricCurrentStatus, yyrl1645)
				}
			} else {
				yyv1645 = make([]CustomMetricCurrentStatus, yyrl1645)
			}
			yyc1645 = true
			yyrr1645 = len(yyv1645)
			if yyrg1645 {
				copy(yyv1645, yyv21645)
			}
		} else if yyl1645 != len(yyv1645) {
			yyv1645 = yyv1645[:yyl1645]
			yyc1645 = true
		}
		yyj1645 := 0
		for ; yyj1645 < yyrr1645; yyj1645++ {
			yyh1645.ElemContainerState(yyj1645)
			if r.TryDecodeAsNil() {
				yyv1645[yyj1645] = CustomMetricCurrentStatus{}
			} else {
				yyv1646 := &yyv1645[yyj1645]
				yyv1646.CodecDecodeSelf(d)
			}

		}
		if yyrt1645 {
			for ; yyj1645 < yyl1645; yyj1645++ {
				yyv1645 = append(yyv1645, CustomMetricCurrentStatus{})
				yyh1645.ElemContainerState(yyj1645)
				if r.TryDecodeAsNil() {
					yyv1645[yyj1645] = CustomMetricCurrentStatus{}
				} else {
					yyv1647 := &yyv1645[yyj1645]
					yyv1647.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1645 := 0
		for ; !r.CheckBreak(); yyj1645++ {

			if yyj1645 >= len(yyv1645) {
				yyv1645 = append(yyv1645, CustomMetricCurrentStatus{}) // var yyz1645 CustomMetricCurrentStatus
				yyc1645 = true
			}
			yyh1645.ElemContainerState(yyj1645)
			if yyj1645 < len(yyv1645) {
				if r.TryDecodeAsNil() {
					yyv1645[yyj1645] = CustomMetricCurrentStatus{}
				} else {
					yyv1648 := &yyv1645[yyj1645]
					yyv1648.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1645 < len(yyv1645) {
			yyv1645 = yyv1645[:yyj1645]
			yyc1645 = true
		} else if yyj1645 == 0 && yyv1645 == nil {
			yyv1645 = []CustomMetricCurrentStatus{}
			yyc1645 = true
		}
	}
	yyh1645.End()
	if yyc1645 {
		*v = yyv1645
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1649 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1650 := &yyv1649
		yy1650.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1651 := *v
	yyh1651, yyl1651 := z.DecSliceHelperStart()
	var yyc1651 bool
	if yyl1651 == 0 {
		if yyv1651 == nil {
			yyv1651 = []HorizontalPodAutoscaler{}
			yyc1651 = true
		} else if len(yyv1651) != 0 {
			yyv1651 = yyv1651[:0]
			yyc1651 = true
		}
	} else if yyl1651 > 0 {
		var yyrr1651, yyrl1651 int
		var yyrt1651 bool
		if yyl1651 > cap(yyv1651) {

			yyrg1651 := len(yyv1651) > 0
			yyv21651 := yyv1651
			yyrl1651, yyrt1651 = z.DecInferLen(yyl1651, z.DecBasicHandle().MaxInitLen, 376)
			if yyrt1651 {
				if yyrl1651 <= cap(yyv1651) {
					yyv1651 = yyv1651[:yyrl1651]
				} else {
					yyv1651 = make([]HorizontalPodAutoscaler, yyrl1651)
				}
			} else {
				yyv1651 = make([]HorizontalPodAutoscaler, yyrl1651)
			}
			yyc1651 = true
			yyrr1651 = len(yyv1651)
			if yyrg1651 {
				copy(yyv1651, yyv21651)
			}
		} else if yyl1651 != len(yyv1651) {
			yyv1651 = yyv1651[:yyl1651]
			yyc1651 = true
		}
		yyj1651 := 0
		for ; yyj1651 < yyrr1651; yyj1651++ {
			yyh1651.ElemContainerState(yyj1651)
			if r.TryDecodeAsNil() {
				yyv1651[yyj1651] = HorizontalPodAutoscaler{}
			} else {
				yyv1652 := &yyv1651[yyj1651]
				yyv1652.CodecDecodeSelf(d)
			}

		}
		if yyrt1651 {
			for ; yyj1651 < yyl1651; yyj1651++ {
				yyv1651 = append(yyv1651, HorizontalPodAutoscaler{})
				yyh1651.ElemContainerState(yyj1651)
				if r.TryDecodeAsNil() {
					yyv1651[yyj1651] = HorizontalPodAutoscaler{}
				} else {
					yyv1653 := &yyv1651[yyj1651]
					yyv1653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1651 := 0
		for ; !r.CheckBreak(); yyj1651++ {

			if yyj1651 >= len(yyv1651) {
				yyv1651 = append(yyv1651, HorizontalPodAutoscaler{}) // var yyz1651 HorizontalPodAutoscaler
				yyc1651 = true
			}
			yyh1651.ElemContainerState(yyj1651)
			if yyj1651 < len(yyv1651) {
				if r.TryDecodeAsNil() {
					yyv1651[yyj1651] = HorizontalPodAutoscaler{}
				} else {
					yyv1654 := &yyv1651[yyj1651]
					yyv1654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1651 < len(yyv1651) {
			yyv1651 = yyv1651[:yyj1651]
			yyc1651 = true
		} else if yyj1651 == 0 && yyv1651 == nil {
			yyv1651 = []HorizontalPodAutoscaler{}
			yyc1651 = true
		}
	}
	yyh1651.End()
	if yyc1651 {
		*v = yyv1651
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1655 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1656 := &yyv1655
		yy1656.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1657 := *v
	yyh1657, yyl1657 := z.DecSliceHelperStart()
	var yyc1657 bool
	if yyl1657 == 0 {
		if yyv1657 == nil {
			yyv1657 = []APIVersion{}
			yyc1657 = true
		} else if len(yyv1657) != 0 {
			yyv1657 = yyv1657[:0]
			yyc1657 = true
		}
	} else if yyl1657 > 0 {
		var yyrr1657, yyrl1657 int
		var yyrt1657 bool
		if yyl1657 > cap(yyv1657) {

			yyrg1657 := len(yyv1657) > 0
			yyv21657 := yyv1657
			yyrl1657, yyrt1657 = z.DecInferLen(yyl1657, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1657 {
				if yyrl1657 <= cap(yyv1657) {
					yyv1657 = yyv1657[:yyrl1657]
				} else {
					yyv1657 = make([]APIVersion, yyrl1657)
				}
			} else {
				yyv1657 = make([]APIVersion, yyrl1657)
			}
			yyc1657 = true
			yyrr1657 = len(yyv1657)
			if yyrg1657 {
				copy(yyv1657, yyv21657)
			}
		} else if yyl1657 != len(yyv1657) {
			yyv1657 = yyv1657[:yyl1657]
			yyc1657 = true
		}
		yyj1657 := 0
		for ; yyj1657 < yyrr1657; yyj1657++ {
			yyh1657.ElemContainerState(yyj1657)
			if r.TryDecodeAsNil() {
				yyv1657[yyj1657] = APIVersion{}
			} else {
				yyv1658 := &yyv1657[yyj1657]
				yyv1658.CodecDecodeSelf(d)
			}

		}
		if yyrt1657 {
			for ; yyj1657 < yyl1657; yyj1657++ {
				yyv1657 = append(yyv1657, APIVersion{})
				yyh1657.ElemContainerState(yyj1657)
				if r.TryDecodeAsNil() {
					yyv1657[yyj1657] = APIVersion{}
				} else {
					yyv1659 := &yyv1657[yyj1657]
					yyv1659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1657 := 0
		for ; !r.CheckBreak(); yyj1657++ {

			if yyj1657 >= len(yyv1657) {
				yyv1657 = append(yyv1657, APIVersion{}) // var yyz1657 APIVersion
				yyc1657 = true
			}
			yyh1657.ElemContainerState(yyj1657)
			if yyj1657 < len(yyv1657) {
				if r.TryDecodeAsNil() {
					yyv1657[yyj1657] = APIVersion{}
				} else {
					yyv1660 := &yyv1657[yyj1657]
					yyv1660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1657 < len(yyv1657) {
			yyv1657 = yyv1657[:yyj1657]
			yyc1657 = true
		} else if yyj1657 == 0 && yyv1657 == nil {
			yyv1657 = []APIVersion{}
			yyc1657 = true
		}
	}
	yyh1657.End()
	if yyc1657 {
		*v = yyv1657
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1661 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1662 := &yyv1661
		yy1662.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1663 := *v
	yyh1663, yyl1663 := z.DecSliceHelperStart()
	var yyc1663 bool
	if yyl1663 == 0 {
		if yyv1663 == nil {
			yyv1663 = []ThirdPartyResource{}
			yyc1663 = true
		} else if len(yyv1663) != 0 {
			yyv1663 = yyv1663[:0]
			yyc1663 = true
		}
	} else if yyl1663 > 0 {
		var yyrr1663, yyrl1663 int
		var yyrt1663 bool
		if yyl1663 > cap(yyv1663) {

			yyrg1663 := len(yyv1663) > 0
			yyv21663 := yyv1663
			yyrl1663, yyrt1663 = z.DecInferLen(yyl1663, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt1663 {
				if yyrl1663 <= cap(yyv1663) {
					yyv1663 = yyv1663[:yyrl1663]
				} else {
					yyv1663 = make([]ThirdPartyResource, yyrl1663)
				}
			} else {
				yyv1663 = make([]ThirdPartyResource, yyrl1663)
			}
			yyc1663 = true
			yyrr1663 = len(yyv1663)
			if yyrg1663 {
				copy(yyv1663, yyv21663)
			}
		} else if yyl1663 != len(yyv1663) {
			yyv1663 = yyv1663[:yyl1663]
			yyc1663 = true
		}
		yyj1663 := 0
		for ; yyj1663 < yyrr1663; yyj1663++ {
			yyh1663.ElemContainerState(yyj1663)
			if r.TryDecodeAsNil() {
				yyv1663[yyj1663] = ThirdPartyResource{}
			} else {
				yyv1664 := &yyv1663[yyj1663]
				yyv1664.CodecDecodeSelf(d)
			}

		}
		if yyrt1663 {
			for ; yyj1663 < yyl1663; yyj1663++ {
				yyv1663 = append(yyv1663, ThirdPartyResource{})
				yyh1663.ElemContainerState(yyj1663)
				if r.TryDecodeAsNil() {
					yyv1663[yyj1663] = ThirdPartyResource{}
				} else {
					yyv1665 := &yyv1663[yyj1663]
					yyv1665.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1663 := 0
		for ; !r.CheckBreak(); yyj1663++ {

			if yyj1663 >= len(yyv1663) {
				yyv1663 = append(yyv1663, ThirdPartyResource{}) // var yyz1663 ThirdPartyResource
				yyc1663 = true
			}
			yyh1663.ElemContainerState(yyj1663)
			if yyj1663 < len(yyv1663) {
				if r.TryDecodeAsNil() {
					yyv1663[yyj1663] = ThirdPartyResource{}
				} else {
					yyv1666 := &yyv1663[yyj1663]
					yyv1666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1663 < len(yyv1663) {
			yyv1663 = yyv1663[:yyj1663]
			yyc1663 = true
		} else if yyj1663 == 0 && yyv1663 == nil {
			yyv1663 = []ThirdPartyResource{}
			yyc1663 = true
		}
	}
	yyh1663.End()
	if yyc1663 {
		*v = yyv1663
	}
}

func (x codecSelfer1234) encSliceDeploymentCondition(v []DeploymentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1667 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1668 := &yyv1667
		yy1668.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeploymentCondition(v *[]DeploymentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1669 := *v
	yyh1669, yyl1669 := z.DecSliceHelperStart()
	var yyc1669 bool
	if yyl1669 == 0 {
		if yyv1669 == nil {
			yyv1669 = []DeploymentCondition{}
			yyc1669 = true
		} else if len(yyv1669) != 0 {
			yyv1669 = yyv1669[:0]
			yyc1669 = true
		}
	} else if yyl1669 > 0 {
		var yyrr1669, yyrl1669 int
		var yyrt1669 bool
		if yyl1669 > cap(yyv1669) {

			yyrg1669 := len(yyv1669) > 0
			yyv21669 := yyv1669
			yyrl1669, yyrt1669 = z.DecInferLen(yyl1669, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1669 {
				if yyrl1669 <= cap(yyv1669) {
					yyv1669 = yyv1669[:yyrl1669]
				} else {
					yyv1669 = make([]DeploymentCondition, yyrl1669)
				}
			} else {
				yyv1669 = make([]DeploymentCondition, yyrl1669)
			}
			yyc1669 = true
			yyrr1669 = len(yyv1669)
			if yyrg1669 {
				copy(yyv1669, yyv21669)
			}
		} else if yyl1669 != len(yyv1669) {
			yyv1669 = yyv1669[:yyl1669]
			yyc1669 = true
		}
		yyj1669 := 0
		for ; yyj1669 < yyrr1669; yyj1669++ {
			yyh1669.ElemContainerState(yyj1669)
			if r.TryDecodeAsNil() {
				yyv1669[yyj1669] = DeploymentCondition{}
			} else {
				yyv1670 := &yyv1669[yyj1669]
				yyv1670.CodecDecodeSelf(d)
			}

		}
		if yyrt1669 {
			for ; yyj1669 < yyl1669; yyj1669++ {
				yyv1669 = append(yyv1669, DeploymentCondition{})
				yyh1669.ElemContainerState(yyj1669)
				if r.TryDecodeAsNil() {
					yyv1669[yyj1669] = DeploymentCondition{}
				} else {
					yyv1671 := &yyv1669[yyj1669]
					yyv1671.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1669 := 0
		for ; !r.CheckBreak(); yyj1669++ {

			if yyj1669 >= len(yyv1669) {
				yyv1669 = append(yyv1669, DeploymentCondition{}) // var yyz1669 DeploymentCondition
				yyc1669 = true
			}
			yyh1669.ElemContainerState(yyj1669)
			if yyj1669 < len(yyv1669) {
				if r.TryDecodeAsNil() {
					yyv1669[yyj1669] = DeploymentCondition{}
				} else {
					yyv1672 := &yyv1669[yyj1669]
					yyv1672.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1669 < len(yyv1669) {
			yyv1669 = yyv1669[:yyj1669]
			yyc1669 = true
		} else if yyj1669 == 0 && yyv1669 == nil {
			yyv1669 = []DeploymentCondition{}
			yyc1669 = true
		}
	}
	yyh1669.End()
	if yyc1669 {
		*v = yyv1669
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1673 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1674 := &yyv1673
		yy1674.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1675 := *v
	yyh1675, yyl1675 := z.DecSliceHelperStart()
	var yyc1675 bool
	if yyl1675 == 0 {
		if yyv1675 == nil {
			yyv1675 = []Deployment{}
			yyc1675 = true
		} else if len(yyv1675) != 0 {
			yyv1675 = yyv1675[:0]
			yyc1675 = true
		}
	} else if yyl1675 > 0 {
		var yyrr1675, yyrl1675 int
		var yyrt1675 bool
		if yyl1675 > cap(yyv1675) {

			yyrg1675 := len(yyv1675) > 0
			yyv21675 := yyv1675
			yyrl1675, yyrt1675 = z.DecInferLen(yyl1675, z.DecBasicHandle().MaxInitLen, 872)
			if yyrt1675 {
				if yyrl1675 <= cap(yyv1675) {
					yyv1675 = yyv1675[:yyrl1675]
				} else {
					yyv1675 = make([]Deployment, yyrl1675)
				}
			} else {
				yyv1675 = make([]Deployment, yyrl1675)
			}
			yyc1675 = true
			yyrr1675 = len(yyv1675)
			if yyrg1675 {
				copy(yyv1675, yyv21675)
			}
		} else if yyl1675 != len(yyv1675) {
			yyv1675 = yyv1675[:yyl1675]
			yyc1675 = true
		}
		yyj1675 := 0
		for ; yyj1675 < yyrr1675; yyj1675++ {
			yyh1675.ElemContainerState(yyj1675)
			if r.TryDecodeAsNil() {
				yyv1675[yyj1675] = Deployment{}
			} else {
				yyv1676 := &yyv1675[yyj1675]
				yyv1676.CodecDecodeSelf(d)
			}

		}
		if yyrt1675 {
			for ; yyj1675 < yyl1675; yyj1675++ {
				yyv1675 = append(yyv1675, Deployment{})
				yyh1675.ElemContainerState(yyj1675)
				if r.TryDecodeAsNil() {
					yyv1675[yyj1675] = Deployment{}
				} else {
					yyv1677 := &yyv1675[yyj1675]
					yyv1677.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1675 := 0
		for ; !r.CheckBreak(); yyj1675++ {

			if yyj1675 >= len(yyv1675) {
				yyv1675 = append(yyv1675, Deployment{}) // var yyz1675 Deployment
				yyc1675 = true
			}
			yyh1675.ElemContainerState(yyj1675)
			if yyj1675 < len(yyv1675) {
				if r.TryDecodeAsNil() {
					yyv1675[yyj1675] = Deployment{}
				} else {
					yyv1678 := &yyv1675[yyj1675]
					yyv1678.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1675 < len(yyv1675) {
			yyv1675 = yyv1675[:yyj1675]
			yyc1675 = true
		} else if yyj1675 == 0 && yyv1675 == nil {
			yyv1675 = []Deployment{}
			yyc1675 = true
		}
	}
	yyh1675.End()
	if yyc1675 {
		*v = yyv1675
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1679 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1680 := &yyv1679
		yy1680.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1681 := *v
	yyh1681, yyl1681 := z.DecSliceHelperStart()
	var yyc1681 bool
	if yyl1681 == 0 {
		if yyv1681 == nil {
			yyv1681 = []DaemonSet{}
			yyc1681 = true
		} else if len(yyv1681) != 0 {
			yyv1681 = yyv1681[:0]
			yyc1681 = true
		}
	} else if yyl1681 > 0 {
		var yyrr1681, yyrl1681 int
		var yyrt1681 bool
		if yyl1681 > cap(yyv1681) {

			yyrg1681 := len(yyv1681) > 0
			yyv21681 := yyv1681
			yyrl1681, yyrt1681 = z.DecInferLen(yyl1681, z.DecBasicHandle().MaxInitLen, 768)
			if yyrt1681 {
				if yyrl1681 <= cap(yyv1681) {
					yyv1681 = yyv1681[:yyrl1681]
				} else {
					yyv1681 = make([]DaemonSet, yyrl1681)
				}
			} else {
				yyv1681 = make([]DaemonSet, yyrl1681)
			}
			yyc1681 = true
			yyrr1681 = len(yyv1681)
			if yyrg1681 {
				copy(yyv1681, yyv21681)
			}
		} else if yyl1681 != len(yyv1681) {
			yyv1681 = yyv1681[:yyl1681]
			yyc1681 = true
		}
		yyj1681 := 0
		for ; yyj1681 < yyrr1681; yyj1681++ {
			yyh1681.ElemContainerState(yyj1681)
			if r.TryDecodeAsNil() {
				yyv1681[yyj1681] = DaemonSet{}
			} else {
				yyv1682 := &yyv1681[yyj1681]
				yyv1682.CodecDecodeSelf(d)
			}

		}
		if yyrt1681 {
			for ; yyj1681 < yyl1681; yyj1681++ {
				yyv1681 = append(yyv1681, DaemonSet{})
				yyh1681.ElemContainerState(yyj1681)
				if r.TryDecodeAsNil() {
					yyv1681[yyj1681] = DaemonSet{}
				} else {
					yyv1683 := &yyv1681[yyj1681]
					yyv1683.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1681 := 0
		for ; !r.CheckBreak(); yyj1681++ {

			if yyj1681 >= len(yyv1681) {
				yyv1681 = append(yyv1681, DaemonSet{}) // var yyz1681 DaemonSet
				yyc1681 = true
			}
			yyh1681.ElemContainerState(yyj1681)
			if yyj1681 < len(yyv1681) {
				if r.TryDecodeAsNil() {
					yyv1681[yyj1681] = DaemonSet{}
				} else {
					yyv1684 := &yyv1681[yyj1681]
					yyv1684.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1681 < len(yyv1681) {
			yyv1681 = yyv1681[:yyj1681]
			yyc1681 = true
		} else if yyj1681 == 0 && yyv1681 == nil {
			yyv1681 = []DaemonSet{}
			yyc1681 = true
		}
	}
	yyh1681.End()
	if yyc1681 {
		*v = yyv1681
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1685 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1686 := &yyv1685
		yy1686.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1687 := *v
	yyh1687, yyl1687 := z.DecSliceHelperStart()
	var yyc1687 bool
	if yyl1687 == 0 {
		if yyv1687 == nil {
			yyv1687 = []ThirdPartyResourceData{}
			yyc1687 = true
		} else if len(yyv1687) != 0 {
			yyv1687 = yyv1687[:0]
			yyc1687 = true
		}
	} else if yyl1687 > 0 {
		var yyrr1687, yyrl1687 int
		var yyrt1687 bool
		if yyl1687 > cap(yyv1687) {

			yyrg1687 := len(yyv1687) > 0
			yyv21687 := yyv1687
			yyrl1687, yyrt1687 = z.DecInferLen(yyl1687, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt1687 {
				if yyrl1687 <= cap(yyv1687) {
					yyv1687 = yyv1687[:yyrl1687]
				} else {
					yyv1687 = make([]ThirdPartyResourceData, yyrl1687)
				}
			} else {
				yyv1687 = make([]ThirdPartyResourceData, yyrl1687)
			}
			yyc1687 = true
			yyrr1687 = len(yyv1687)
			if yyrg1687 {
				copy(yyv1687, yyv21687)
			}
		} else if yyl1687 != len(yyv1687) {
			yyv1687 = yyv1687[:yyl1687]
			yyc1687 = true
		}
		yyj1687 := 0
		for ; yyj1687 < yyrr1687; yyj1687++ {
			yyh1687.ElemContainerState(yyj1687)
			if r.TryDecodeAsNil() {
				yyv1687[yyj1687] = ThirdPartyResourceData{}
			} else {
				yyv1688 := &yyv1687[yyj1687]
				yyv1688.CodecDecodeSelf(d)
			}

		}
		if yyrt1687 {
			for ; yyj1687 < yyl1687; yyj1687++ {
				yyv1687 = append(yyv1687, ThirdPartyResourceData{})
				yyh1687.ElemContainerState(yyj1687)
				if r.TryDecodeAsNil() {
					yyv1687[yyj1687] = ThirdPartyResourceData{}
				} else {
					yyv1689 := &yyv1687[yyj1687]
					yyv1689.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1687 := 0
		for ; !r.CheckBreak(); yyj1687++ {

			if yyj1687 >= len(yyv1687) {
				yyv1687 = append(yyv1687, ThirdPartyResourceData{}) // var yyz1687 ThirdPartyResourceData
				yyc1687 = true
			}
			yyh1687.ElemContainerState(yyj1687)
			if yyj1687 < len(yyv1687) {
				if r.TryDecodeAsNil() {
					yyv1687[yyj1687] = ThirdPartyResourceData{}
				} else {
					yyv1690 := &yyv1687[yyj1687]
					yyv1690.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1687 < len(yyv1687) {
			yyv1687 = yyv1687[:yyj1687]
			yyc1687 = true
		} else if yyj1687 == 0 && yyv1687 == nil {
			yyv1687 = []ThirdPartyResourceData{}
			yyc1687 = true
		}
	}
	yyh1687.End()
	if yyc1687 {
		*v = yyv1687
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1691 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1692 := &yyv1691
		yy1692.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1693 := *v
	yyh1693, yyl1693 := z.DecSliceHelperStart()
	var yyc1693 bool
	if yyl1693 == 0 {
		if yyv1693 == nil {
			yyv1693 = []Ingress{}
			yyc1693 = true
		} else if len(yyv1693) != 0 {
			yyv1693 = yyv1693[:0]
			yyc1693 = true
		}
	} else if yyl1693 > 0 {
		var yyrr1693, yyrl1693 int
		var yyrt1693 bool
		if yyl1693 > cap(yyv1693) {

			yyrg1693 := len(yyv1693) > 0
			yyv21693 := yyv1693
			yyrl1693, yyrt1693 = z.DecInferLen(yyl1693, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt1693 {
				if yyrl1693 <= cap(yyv1693) {
					yyv1693 = yyv1693[:yyrl1693]
				} else {
					yyv1693 = make([]Ingress, yyrl1693)
				}
			} else {
				yyv1693 = make([]Ingress, yyrl1693)
			}
			yyc1693 = true
			yyrr1693 = len(yyv1693)
			if yyrg1693 {
				copy(yyv1693, yyv21693)
			}
		} else if yyl1693 != len(yyv1693) {
			yyv1693 = yyv1693[:yyl1693]
			yyc1693 = true
		}
		yyj1693 := 0
		for ; yyj1693 < yyrr1693; yyj1693++ {
			yyh1693.ElemContainerState(yyj1693)
			if r.TryDecodeAsNil() {
				yyv1693[yyj1693] = Ingress{}
			} else {
				yyv1694 := &yyv1693[yyj1693]
				yyv1694.CodecDecodeSelf(d)
			}

		}
		if yyrt1693 {
			for ; yyj1693 < yyl1693; yyj1693++ {
				yyv1693 = append(yyv1693, Ingress{})
				yyh1693.ElemContainerState(yyj1693)
				if r.TryDecodeAsNil() {
					yyv1693[yyj1693] = Ingress{}
				} else {
					yyv1695 := &yyv1693[yyj1693]
					yyv1695.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1693 := 0
		for ; !r.CheckBreak(); yyj1693++ {

			if yyj1693 >= len(yyv1693) {
				yyv1693 = append(yyv1693, Ingress{}) // var yyz1693 Ingress
				yyc1693 = true
			}
			yyh1693.ElemContainerState(yyj1693)
			if yyj1693 < len(yyv1693) {
				if r.TryDecodeAsNil() {
					yyv1693[yyj1693] = Ingress{}
				} else {
					yyv1696 := &yyv1693[yyj1693]
					yyv1696.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1693 < len(yyv1693) {
			yyv1693 = yyv1693[:yyj1693]
			yyc1693 = true
		} else if yyj1693 == 0 && yyv1693 == nil {
			yyv1693 = []Ingress{}
			yyc1693 = true
		}
	}
	yyh1693.End()
	if yyc1693 {
		*v = yyv1693
	}
}

func (x codecSelfer1234) encSliceIngressTLS(v []IngressTLS, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1697 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1698 := &yyv1697
		yy1698.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressTLS(v *[]IngressTLS, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1699 := *v
	yyh1699, yyl1699 := z.DecSliceHelperStart()
	var yyc1699 bool
	if yyl1699 == 0 {
		if yyv1699 == nil {
			yyv1699 = []IngressTLS{}
			yyc1699 = true
		} else if len(yyv1699) != 0 {
			yyv1699 = yyv1699[:0]
			yyc1699 = true
		}
	} else if yyl1699 > 0 {
		var yyrr1699, yyrl1699 int
		var yyrt1699 bool
		if yyl1699 > cap(yyv1699) {

			yyrg1699 := len(yyv1699) > 0
			yyv21699 := yyv1699
			yyrl1699, yyrt1699 = z.DecInferLen(yyl1699, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1699 {
				if yyrl1699 <= cap(yyv1699) {
					yyv1699 = yyv1699[:yyrl1699]
				} else {
					yyv1699 = make([]IngressTLS, yyrl1699)
				}
			} else {
				yyv1699 = make([]IngressTLS, yyrl1699)
			}
			yyc1699 = true
			yyrr1699 = len(yyv1699)
			if yyrg1699 {
				copy(yyv1699, yyv21699)
			}
		} else if yyl1699 != len(yyv1699) {
			yyv1699 = yyv1699[:yyl1699]
			yyc1699 = true
		}
		yyj1699 := 0
		for ; yyj1699 < yyrr1699; yyj1699++ {
			yyh1699.ElemContainerState(yyj1699)
			if r.TryDecodeAsNil() {
				yyv1699[yyj1699] = IngressTLS{}
			} else {
				yyv1700 := &yyv1699[yyj1699]
				yyv1700.CodecDecodeSelf(d)
			}

		}
		if yyrt1699 {
			for ; yyj1699 < yyl1699; yyj1699++ {
				yyv1699 = append(yyv1699, IngressTLS{})
				yyh1699.ElemContainerState(yyj1699)
				if r.TryDecodeAsNil() {
					yyv1699[yyj1699] = IngressTLS{}
				} else {
					yyv1701 := &yyv1699[yyj1699]
					yyv1701.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1699 := 0
		for ; !r.CheckBreak(); yyj1699++ {

			if yyj1699 >= len(yyv1699) {
				yyv1699 = append(yyv1699, IngressTLS{}) // var yyz1699 IngressTLS
				yyc1699 = true
			}
			yyh1699.ElemContainerState(yyj1699)
			if yyj1699 < len(yyv1699) {
				if r.TryDecodeAsNil() {
					yyv1699[yyj1699] = IngressTLS{}
				} else {
					yyv1702 := &yyv1699[yyj1699]
					yyv1702.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1699 < len(yyv1699) {
			yyv1699 = yyv1699[:yyj1699]
			yyc1699 = true
		} else if yyj1699 == 0 && yyv1699 == nil {
			yyv1699 = []IngressTLS{}
			yyc1699 = true
		}
	}
	yyh1699.End()
	if yyc1699 {
		*v = yyv1699
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1703 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1704 := &yyv1703
		yy1704.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1705 := *v
	yyh1705, yyl1705 := z.DecSliceHelperStart()
	var yyc1705 bool
	if yyl1705 == 0 {
		if yyv1705 == nil {
			yyv1705 = []IngressRule{}
			yyc1705 = true
		} else if len(yyv1705) != 0 {
			yyv1705 = yyv1705[:0]
			yyc1705 = true
		}
	} else if yyl1705 > 0 {
		var yyrr1705, yyrl1705 int
		var yyrt1705 bool
		if yyl1705 > cap(yyv1705) {

			yyrg1705 := len(yyv1705) > 0
			yyv21705 := yyv1705
			yyrl1705, yyrt1705 = z.DecInferLen(yyl1705, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1705 {
				if yyrl1705 <= cap(yyv1705) {
					yyv1705 = yyv1705[:yyrl1705]
				} else {
					yyv1705 = make([]IngressRule, yyrl1705)
				}
			} else {
				yyv1705 = make([]IngressRule, yyrl1705)
			}
			yyc1705 = true
			yyrr1705 = len(yyv1705)
			if yyrg1705 {
				copy(yyv1705, yyv21705)
			}
		} else if yyl1705 != len(yyv1705) {
			yyv1705 = yyv1705[:yyl1705]
			yyc1705 = true
		}
		yyj1705 := 0
		for ; yyj1705 < yyrr1705; yyj1705++ {
			yyh1705.ElemContainerState(yyj1705)
			if r.TryDecodeAsNil() {
				yyv1705[yyj1705] = IngressRule{}
			} else {
				yyv1706 := &yyv1705[yyj1705]
				yyv1706.CodecDecodeSelf(d)
			}

		}
		if yyrt1705 {
			for ; yyj1705 < yyl1705; yyj1705++ {
				yyv1705 = append(yyv1705, IngressRule{})
				yyh1705.ElemContainerState(yyj1705)
				if r.TryDecodeAsNil() {
					yyv1705[yyj1705] = IngressRule{}
				} else {
					yyv1707 := &yyv1705[yyj1705]
					yyv1707.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1705 := 0
		for ; !r.CheckBreak(); yyj1705++ {

			if yyj1705 >= len(yyv1705) {
				yyv1705 = append(yyv1705, IngressRule{}) // var yyz1705 IngressRule
				yyc1705 = true
			}
			yyh1705.ElemContainerState(yyj1705)
			if yyj1705 < len(yyv1705) {
				if r.TryDecodeAsNil() {
					yyv1705[yyj1705] = IngressRule{}
				} else {
					yyv1708 := &yyv1705[yyj1705]
					yyv1708.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1705 < len(yyv1705) {
			yyv1705 = yyv1705[:yyj1705]
			yyc1705 = true
		} else if yyj1705 == 0 && yyv1705 == nil {
			yyv1705 = []IngressRule{}
			yyc1705 = true
		}
	}
	yyh1705.End()
	if yyc1705 {
		*v = yyv1705
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1709 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1710 := &yyv1709
		yy1710.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1711 := *v
	yyh1711, yyl1711 := z.DecSliceHelperStart()
	var yyc1711 bool
	if yyl1711 == 0 {
		if yyv1711 == nil {
			yyv1711 = []HTTPIngressPath{}
			yyc1711 = true
		} else if len(yyv1711) != 0 {
			yyv1711 = yyv1711[:0]
			yyc1711 = true
		}
	} else if yyl1711 > 0 {
		var yyrr1711, yyrl1711 int
		var yyrt1711 bool
		if yyl1711 > cap(yyv1711) {

			yyrg1711 := len(yyv1711) > 0
			yyv21711 := yyv1711
			yyrl1711, yyrt1711 = z.DecInferLen(yyl1711, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1711 {
				if yyrl1711 <= cap(yyv1711) {
					yyv1711 = yyv1711[:yyrl1711]
				} else {
					yyv1711 = make([]HTTPIngressPath, yyrl1711)
				}
			} else {
				yyv1711 = make([]HTTPIngressPath, yyrl1711)
			}
			yyc1711 = true
			yyrr1711 = len(yyv1711)
			if yyrg1711 {
				copy(yyv1711, yyv21711)
			}
		} else if yyl1711 != len(yyv1711) {
			yyv1711 = yyv1711[:yyl1711]
			yyc1711 = true
		}
		yyj1711 := 0
		for ; yyj1711 < yyrr1711; yyj1711++ {
			yyh1711.ElemContainerState(yyj1711)
			if r.TryDecodeAsNil() {
				yyv1711[yyj1711] = HTTPIngressPath{}
			} else {
				yyv1712 := &yyv1711[yyj1711]
				yyv1712.CodecDecodeSelf(d)
			}

		}
		if yyrt1711 {
			for ; yyj1711 < yyl1711; yyj1711++ {
				yyv1711 = append(yyv1711, HTTPIngressPath{})
				yyh1711.ElemContainerState(yyj1711)
				if r.TryDecodeAsNil() {
					yyv1711[yyj1711] = HTTPIngressPath{}
				} else {
					yyv1713 := &yyv1711[yyj1711]
					yyv1713.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1711 := 0
		for ; !r.CheckBreak(); yyj1711++ {

			if yyj1711 >= len(yyv1711) {
				yyv1711 = append(yyv1711, HTTPIngressPath{}) // var yyz1711 HTTPIngressPath
				yyc1711 = true
			}
			yyh1711.ElemContainerState(yyj1711)
			if yyj1711 < len(yyv1711) {
				if r.TryDecodeAsNil() {
					yyv1711[yyj1711] = HTTPIngressPath{}
				} else {
					yyv1714 := &yyv1711[yyj1711]
					yyv1714.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1711 < len(yyv1711) {
			yyv1711 = yyv1711[:yyj1711]
			yyc1711 = true
		} else if yyj1711 == 0 && yyv1711 == nil {
			yyv1711 = []HTTPIngressPath{}
			yyc1711 = true
		}
	}
	yyh1711.End()
	if yyc1711 {
		*v = yyv1711
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1715 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1716 := &yyv1715
		yy1716.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1717 := *v
	yyh1717, yyl1717 := z.DecSliceHelperStart()
	var yyc1717 bool
	if yyl1717 == 0 {
		if yyv1717 == nil {
			yyv1717 = []ReplicaSet{}
			yyc1717 = true
		} else if len(yyv1717) != 0 {
			yyv1717 = yyv1717[:0]
			yyc1717 = true
		}
	} else if yyl1717 > 0 {
		var yyrr1717, yyrl1717 int
		var yyrt1717 bool
		if yyl1717 > cap(yyv1717) {

			yyrg1717 := len(yyv1717) > 0
			yyv21717 := yyv1717
			yyrl1717, yyrt1717 = z.DecInferLen(yyl1717, z.DecBasicHandle().MaxInitLen, 808)
			if yyrt1717 {
				if yyrl1717 <= cap(yyv1717) {
					yyv1717 = yyv1717[:yyrl1717]
				} else {
					yyv1717 = make([]ReplicaSet, yyrl1717)
				}
			} else {
				yyv1717 = make([]ReplicaSet, yyrl1717)
			}
			yyc1717 = true
			yyrr1717 = len(yyv1717)
			if yyrg1717 {
				copy(yyv1717, yyv21717)
			}
		} else if yyl1717 != len(yyv1717) {
			yyv1717 = yyv1717[:yyl1717]
			yyc1717 = true
		}
		yyj1717 := 0
		for ; yyj1717 < yyrr1717; yyj1717++ {
			yyh1717.ElemContainerState(yyj1717)
			if r.TryDecodeAsNil() {
				yyv1717[yyj1717] = ReplicaSet{}
			} else {
				yyv1718 := &yyv1717[yyj1717]
				yyv1718.CodecDecodeSelf(d)
			}

		}
		if yyrt1717 {
			for ; yyj1717 < yyl1717; yyj1717++ {
				yyv1717 = append(yyv1717, ReplicaSet{})
				yyh1717.ElemContainerState(yyj1717)
				if r.TryDecodeAsNil() {
					yyv1717[yyj1717] = ReplicaSet{}
				} else {
					yyv1719 := &yyv1717[yyj1717]
					yyv1719.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1717 := 0
		for ; !r.CheckBreak(); yyj1717++ {

			if yyj1717 >= len(yyv1717) {
				yyv1717 = append(yyv1717, ReplicaSet{}) // var yyz1717 ReplicaSet
				yyc1717 = true
			}
			yyh1717.ElemContainerState(yyj1717)
			if yyj1717 < len(yyv1717) {
				if r.TryDecodeAsNil() {
					yyv1717[yyj1717] = ReplicaSet{}
				} else {
					yyv1720 := &yyv1717[yyj1717]
					yyv1720.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1717 < len(yyv1717) {
			yyv1717 = yyv1717[:yyj1717]
			yyc1717 = true
		} else if yyj1717 == 0 && yyv1717 == nil {
			yyv1717 = []ReplicaSet{}
			yyc1717 = true
		}
	}
	yyh1717.End()
	if yyc1717 {
		*v = yyv1717
	}
}

func (x codecSelfer1234) encSliceReplicaSetCondition(v []ReplicaSetCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1721 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1722 := &yyv1721
		yy1722.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSetCondition(v *[]ReplicaSetCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1723 := *v
	yyh1723, yyl1723 := z.DecSliceHelperStart()
	var yyc1723 bool
	if yyl1723 == 0 {
		if yyv1723 == nil {
			yyv1723 = []ReplicaSetCondition{}
			yyc1723 = true
		} else if len(yyv1723) != 0 {
			yyv1723 = yyv1723[:0]
			yyc1723 = true
		}
	} else if yyl1723 > 0 {
		var yyrr1723, yyrl1723 int
		var yyrt1723 bool
		if yyl1723 > cap(yyv1723) {

			yyrg1723 := len(yyv1723) > 0
			yyv21723 := yyv1723
			yyrl1723, yyrt1723 = z.DecInferLen(yyl1723, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt1723 {
				if yyrl1723 <= cap(yyv1723) {
					yyv1723 = yyv1723[:yyrl1723]
				} else {
					yyv1723 = make([]ReplicaSetCondition, yyrl1723)
				}
			} else {
				yyv1723 = make([]ReplicaSetCondition, yyrl1723)
			}
			yyc1723 = true
			yyrr1723 = len(yyv1723)
			if yyrg1723 {
				copy(yyv1723, yyv21723)
			}
		} else if yyl1723 != len(yyv1723) {
			yyv1723 = yyv1723[:yyl1723]
			yyc1723 = true
		}
		yyj1723 := 0
		for ; yyj1723 < yyrr1723; yyj1723++ {
			yyh1723.ElemContainerState(yyj1723)
			if r.TryDecodeAsNil() {
				yyv1723[yyj1723] = ReplicaSetCondition{}
			} else {
				yyv1724 := &yyv1723[yyj1723]
				yyv1724.CodecDecodeSelf(d)
			}

		}
		if yyrt1723 {
			for ; yyj1723 < yyl1723; yyj1723++ {
				yyv1723 = append(yyv1723, ReplicaSetCondition{})
				yyh1723.ElemContainerState(yyj1723)
				if r.TryDecodeAsNil() {
					yyv1723[yyj1723] = ReplicaSetCondition{}
				} else {
					yyv1725 := &yyv1723[yyj1723]
					yyv1725.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1723 := 0
		for ; !r.CheckBreak(); yyj1723++ {

			if yyj1723 >= len(yyv1723) {
				yyv1723 = append(yyv1723, ReplicaSetCondition{}) // var yyz1723 ReplicaSetCondition
				yyc1723 = true
			}
			yyh1723.ElemContainerState(yyj1723)
			if yyj1723 < len(yyv1723) {
				if r.TryDecodeAsNil() {
					yyv1723[yyj1723] = ReplicaSetCondition{}
				} else {
					yyv1726 := &yyv1723[yyj1723]
					yyv1726.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1723 < len(yyv1723) {
			yyv1723 = yyv1723[:yyj1723]
			yyc1723 = true
		} else if yyj1723 == 0 && yyv1723 == nil {
			yyv1723 = []ReplicaSetCondition{}
			yyc1723 = true
		}
	}
	yyh1723.End()
	if yyc1723 {
		*v = yyv1723
	}
}

func (x codecSelfer1234) encSlicev1_Capability(v []pkg4_v1.Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1727 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yym1728 := z.EncBinary()
		_ = yym1728
		if false {
		} else if z.HasExtensions() && z.EncExt(yyv1727) {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyv1727))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicev1_Capability(v *[]pkg4_v1.Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1729 := *v
	yyh1729, yyl1729 := z.DecSliceHelperStart()
	var yyc1729 bool
	if yyl1729 == 0 {
		if yyv1729 == nil {
			yyv1729 = []pkg4_v1.Capability{}
			yyc1729 = true
		} else if len(yyv1729) != 0 {
			yyv1729 = yyv1729[:0]
			yyc1729 = true
		}
	} else if yyl1729 > 0 {
		var yyrr1729, yyrl1729 int
		var yyrt1729 bool
		if yyl1729 > cap(yyv1729) {

			yyrl1729, yyrt1729 = z.DecInferLen(yyl1729, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1729 {
				if yyrl1729 <= cap(yyv1729) {
					yyv1729 = yyv1729[:yyrl1729]
				} else {
					yyv1729 = make([]pkg4_v1.Capability, yyrl1729)
				}
			} else {
				yyv1729 = make([]pkg4_v1.Capability, yyrl1729)
			}
			yyc1729 = true
			yyrr1729 = len(yyv1729)
		} else if yyl1729 != len(yyv1729) {
			yyv1729 = yyv1729[:yyl1729]
			yyc1729 = true
		}
		yyj1729 := 0
		for ; yyj1729 < yyrr1729; yyj1729++ {
			yyh1729.ElemContainerState(yyj1729)
			if r.TryDecodeAsNil() {
				yyv1729[yyj1729] = ""
			} else {
				yyv1729[yyj1729] = pkg4_v1.Capability(r.DecodeString())
			}

		}
		if yyrt1729 {
			for ; yyj1729 < yyl1729; yyj1729++ {
				yyv1729 = append(yyv1729, "")
				yyh1729.ElemContainerState(yyj1729)
				if r.TryDecodeAsNil() {
					yyv1729[yyj1729] = ""
				} else {
					yyv1729[yyj1729] = pkg4_v1.Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj1729 := 0
		for ; !r.CheckBreak(); yyj1729++ {

			if yyj1729 >= len(yyv1729) {
				yyv1729 = append(yyv1729, "") // var yyz1729 pkg4_v1.Capability
				yyc1729 = true
			}
			yyh1729.ElemContainerState(yyj1729)
			if yyj1729 < len(yyv1729) {
				if r.TryDecodeAsNil() {
					yyv1729[yyj1729] = ""
				} else {
					yyv1729[yyj1729] = pkg4_v1.Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1729 < len(yyv1729) {
			yyv1729 = yyv1729[:yyj1729]
			yyc1729 = true
		} else if yyj1729 == 0 && yyv1729 == nil {
			yyv1729 = []pkg4_v1.Capability{}
			yyc1729 = true
		}
	}
	yyh1729.End()
	if yyc1729 {
		*v = yyv1729
	}
}

func (x codecSelfer1234) encSliceFSType(v []FSType, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1733 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv1733.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFSType(v *[]FSType, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1734 := *v
	yyh1734, yyl1734 := z.DecSliceHelperStart()
	var yyc1734 bool
	if yyl1734 == 0 {
		if yyv1734 == nil {
			yyv1734 = []FSType{}
			yyc1734 = true
		} else if len(yyv1734) != 0 {
			yyv1734 = yyv1734[:0]
			yyc1734 = true
		}
	} else if yyl1734 > 0 {
		var yyrr1734, yyrl1734 int
		var yyrt1734 bool
		if yyl1734 > cap(yyv1734) {

			yyrl1734, yyrt1734 = z.DecInferLen(yyl1734, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1734 {
				if yyrl1734 <= cap(yyv1734) {
					yyv1734 = yyv1734[:yyrl1734]
				} else {
					yyv1734 = make([]FSType, yyrl1734)
				}
			} else {
				yyv1734 = make([]FSType, yyrl1734)
			}
			yyc1734 = true
			yyrr1734 = len(yyv1734)
		} else if yyl1734 != len(yyv1734) {
			yyv1734 = yyv1734[:yyl1734]
			yyc1734 = true
		}
		yyj1734 := 0
		for ; yyj1734 < yyrr1734; yyj1734++ {
			yyh1734.ElemContainerState(yyj1734)
			if r.TryDecodeAsNil() {
				yyv1734[yyj1734] = ""
			} else {
				yyv1734[yyj1734] = FSType(r.DecodeString())
			}

		}
		if yyrt1734 {
			for ; yyj1734 < yyl1734; yyj1734++ {
				yyv1734 = append(yyv1734, "")
				yyh1734.ElemContainerState(yyj1734)
				if r.TryDecodeAsNil() {
					yyv1734[yyj1734] = ""
				} else {
					yyv1734[yyj1734] = FSType(r.DecodeString())
				}

			}
		}

	} else {
		yyj1734 := 0
		for ; !r.CheckBreak(); yyj1734++ {

			if yyj1734 >= len(yyv1734) {
				yyv1734 = append(yyv1734, "") // var yyz1734 FSType
				yyc1734 = true
			}
			yyh1734.ElemContainerState(yyj1734)
			if yyj1734 < len(yyv1734) {
				if r.TryDecodeAsNil() {
					yyv1734[yyj1734] = ""
				} else {
					yyv1734[yyj1734] = FSType(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1734 < len(yyv1734) {
			yyv1734 = yyv1734[:yyj1734]
			yyc1734 = true
		} else if yyj1734 == 0 && yyv1734 == nil {
			yyv1734 = []FSType{}
			yyc1734 = true
		}
	}
	yyh1734.End()
	if yyc1734 {
		*v = yyv1734
	}
}

func (x codecSelfer1234) encSliceHostPortRange(v []HostPortRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1738 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1739 := &yyv1738
		yy1739.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHostPortRange(v *[]HostPortRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1740 := *v
	yyh1740, yyl1740 := z.DecSliceHelperStart()
	var yyc1740 bool
	if yyl1740 == 0 {
		if yyv1740 == nil {
			yyv1740 = []HostPortRange{}
			yyc1740 = true
		} else if len(yyv1740) != 0 {
			yyv1740 = yyv1740[:0]
			yyc1740 = true
		}
	} else if yyl1740 > 0 {
		var yyrr1740, yyrl1740 int
		var yyrt1740 bool
		if yyl1740 > cap(yyv1740) {

			yyrg1740 := len(yyv1740) > 0
			yyv21740 := yyv1740
			yyrl1740, yyrt1740 = z.DecInferLen(yyl1740, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1740 {
				if yyrl1740 <= cap(yyv1740) {
					yyv1740 = yyv1740[:yyrl1740]
				} else {
					yyv1740 = make([]HostPortRange, yyrl1740)
				}
			} else {
				yyv1740 = make([]HostPortRange, yyrl1740)
			}
			yyc1740 = true
			yyrr1740 = len(yyv1740)
			if yyrg1740 {
				copy(yyv1740, yyv21740)
			}
		} else if yyl1740 != len(yyv1740) {
			yyv1740 = yyv1740[:yyl1740]
			yyc1740 = true
		}
		yyj1740 := 0
		for ; yyj1740 < yyrr1740; yyj1740++ {
			yyh1740.ElemContainerState(yyj1740)
			if r.TryDecodeAsNil() {
				yyv1740[yyj1740] = HostPortRange{}
			} else {
				yyv1741 := &yyv1740[yyj1740]
				yyv1741.CodecDecodeSelf(d)
			}

		}
		if yyrt1740 {
			for ; yyj1740 < yyl1740; yyj1740++ {
				yyv1740 = append(yyv1740, HostPortRange{})
				yyh1740.ElemContainerState(yyj1740)
				if r.TryDecodeAsNil() {
					yyv1740[yyj1740] = HostPortRange{}
				} else {
					yyv1742 := &yyv1740[yyj1740]
					yyv1742.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1740 := 0
		for ; !r.CheckBreak(); yyj1740++ {

			if yyj1740 >= len(yyv1740) {
				yyv1740 = append(yyv1740, HostPortRange{}) // var yyz1740 HostPortRange
				yyc1740 = true
			}
			yyh1740.ElemContainerState(yyj1740)
			if yyj1740 < len(yyv1740) {
				if r.TryDecodeAsNil() {
					yyv1740[yyj1740] = HostPortRange{}
				} else {
					yyv1743 := &yyv1740[yyj1740]
					yyv1743.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1740 < len(yyv1740) {
			yyv1740 = yyv1740[:yyj1740]
			yyc1740 = true
		} else if yyj1740 == 0 && yyv1740 == nil {
			yyv1740 = []HostPortRange{}
			yyc1740 = true
		}
	}
	yyh1740.End()
	if yyc1740 {
		*v = yyv1740
	}
}

func (x codecSelfer1234) encSliceIDRange(v []IDRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1744 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1745 := &yyv1744
		yy1745.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIDRange(v *[]IDRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1746 := *v
	yyh1746, yyl1746 := z.DecSliceHelperStart()
	var yyc1746 bool
	if yyl1746 == 0 {
		if yyv1746 == nil {
			yyv1746 = []IDRange{}
			yyc1746 = true
		} else if len(yyv1746) != 0 {
			yyv1746 = yyv1746[:0]
			yyc1746 = true
		}
	} else if yyl1746 > 0 {
		var yyrr1746, yyrl1746 int
		var yyrt1746 bool
		if yyl1746 > cap(yyv1746) {

			yyrg1746 := len(yyv1746) > 0
			yyv21746 := yyv1746
			yyrl1746, yyrt1746 = z.DecInferLen(yyl1746, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1746 {
				if yyrl1746 <= cap(yyv1746) {
					yyv1746 = yyv1746[:yyrl1746]
				} else {
					yyv1746 = make([]IDRange, yyrl1746)
				}
			} else {
				yyv1746 = make([]IDRange, yyrl1746)
			}
			yyc1746 = true
			yyrr1746 = len(yyv1746)
			if yyrg1746 {
				copy(yyv1746, yyv21746)
			}
		} else if yyl1746 != len(yyv1746) {
			yyv1746 = yyv1746[:yyl1746]
			yyc1746 = true
		}
		yyj1746 := 0
		for ; yyj1746 < yyrr1746; yyj1746++ {
			yyh1746.ElemContainerState(yyj1746)
			if r.TryDecodeAsNil() {
				yyv1746[yyj1746] = IDRange{}
			} else {
				yyv1747 := &yyv1746[yyj1746]
				yyv1747.CodecDecodeSelf(d)
			}

		}
		if yyrt1746 {
			for ; yyj1746 < yyl1746; yyj1746++ {
				yyv1746 = append(yyv1746, IDRange{})
				yyh1746.ElemContainerState(yyj1746)
				if r.TryDecodeAsNil() {
					yyv1746[yyj1746] = IDRange{}
				} else {
					yyv1748 := &yyv1746[yyj1746]
					yyv1748.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1746 := 0
		for ; !r.CheckBreak(); yyj1746++ {

			if yyj1746 >= len(yyv1746) {
				yyv1746 = append(yyv1746, IDRange{}) // var yyz1746 IDRange
				yyc1746 = true
			}
			yyh1746.ElemContainerState(yyj1746)
			if yyj1746 < len(yyv1746) {
				if r.TryDecodeAsNil() {
					yyv1746[yyj1746] = IDRange{}
				} else {
					yyv1749 := &yyv1746[yyj1746]
					yyv1749.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1746 < len(yyv1746) {
			yyv1746 = yyv1746[:yyj1746]
			yyc1746 = true
		} else if yyj1746 == 0 && yyv1746 == nil {
			yyv1746 = []IDRange{}
			yyc1746 = true
		}
	}
	yyh1746.End()
	if yyc1746 {
		*v = yyv1746
	}
}

func (x codecSelfer1234) encSlicePodSecurityPolicy(v []PodSecurityPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1750 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1751 := &yyv1750
		yy1751.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodSecurityPolicy(v *[]PodSecurityPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1752 := *v
	yyh1752, yyl1752 := z.DecSliceHelperStart()
	var yyc1752 bool
	if yyl1752 == 0 {
		if yyv1752 == nil {
			yyv1752 = []PodSecurityPolicy{}
			yyc1752 = true
		} else if len(yyv1752) != 0 {
			yyv1752 = yyv1752[:0]
			yyc1752 = true
		}
	} else if yyl1752 > 0 {
		var yyrr1752, yyrl1752 int
		var yyrt1752 bool
		if yyl1752 > cap(yyv1752) {

			yyrg1752 := len(yyv1752) > 0
			yyv21752 := yyv1752
			yyrl1752, yyrt1752 = z.DecInferLen(yyl1752, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt1752 {
				if yyrl1752 <= cap(yyv1752) {
					yyv1752 = yyv1752[:yyrl1752]
				} else {
					yyv1752 = make([]PodSecurityPolicy, yyrl1752)
				}
			} else {
				yyv1752 = make([]PodSecurityPolicy, yyrl1752)
			}
			yyc1752 = true
			yyrr1752 = len(yyv1752)
			if yyrg1752 {
				copy(yyv1752, yyv21752)
			}
		} else if yyl1752 != len(yyv1752) {
			yyv1752 = yyv1752[:yyl1752]
			yyc1752 = true
		}
		yyj1752 := 0
		for ; yyj1752 < yyrr1752; yyj1752++ {
			yyh1752.ElemContainerState(yyj1752)
			if r.TryDecodeAsNil() {
				yyv1752[yyj1752] = PodSecurityPolicy{}
			} else {
				yyv1753 := &yyv1752[yyj1752]
				yyv1753.CodecDecodeSelf(d)
			}

		}
		if yyrt1752 {
			for ; yyj1752 < yyl1752; yyj1752++ {
				yyv1752 = append(yyv1752, PodSecurityPolicy{})
				yyh1752.ElemContainerState(yyj1752)
				if r.TryDecodeAsNil() {
					yyv1752[yyj1752] = PodSecurityPolicy{}
				} else {
					yyv1754 := &yyv1752[yyj1752]
					yyv1754.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1752 := 0
		for ; !r.CheckBreak(); yyj1752++ {

			if yyj1752 >= len(yyv1752) {
				yyv1752 = append(yyv1752, PodSecurityPolicy{}) // var yyz1752 PodSecurityPolicy
				yyc1752 = true
			}
			yyh1752.ElemContainerState(yyj1752)
			if yyj1752 < len(yyv1752) {
				if r.TryDecodeAsNil() {
					yyv1752[yyj1752] = PodSecurityPolicy{}
				} else {
					yyv1755 := &yyv1752[yyj1752]
					yyv1755.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1752 < len(yyv1752) {
			yyv1752 = yyv1752[:yyj1752]
			yyc1752 = true
		} else if yyj1752 == 0 && yyv1752 == nil {
			yyv1752 = []PodSecurityPolicy{}
			yyc1752 = true
		}
	}
	yyh1752.End()
	if yyc1752 {
		*v = yyv1752
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyIngressRule(v []NetworkPolicyIngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1756 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1757 := &yyv1756
		yy1757.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyIngressRule(v *[]NetworkPolicyIngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1758 := *v
	yyh1758, yyl1758 := z.DecSliceHelperStart()
	var yyc1758 bool
	if yyl1758 == 0 {
		if yyv1758 == nil {
			yyv1758 = []NetworkPolicyIngressRule{}
			yyc1758 = true
		} else if len(yyv1758) != 0 {
			yyv1758 = yyv1758[:0]
			yyc1758 = true
		}
	} else if yyl1758 > 0 {
		var yyrr1758, yyrl1758 int
		var yyrt1758 bool
		if yyl1758 > cap(yyv1758) {

			yyrg1758 := len(yyv1758) > 0
			yyv21758 := yyv1758
			yyrl1758, yyrt1758 = z.DecInferLen(yyl1758, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt1758 {
				if yyrl1758 <= cap(yyv1758) {
					yyv1758 = yyv1758[:yyrl1758]
				} else {
					yyv1758 = make([]NetworkPolicyIngressRule, yyrl1758)
				}
			} else {
				yyv1758 = make([]NetworkPolicyIngressRule, yyrl1758)
			}
			yyc1758 = true
			yyrr1758 = len(yyv1758)
			if yyrg1758 {
				copy(yyv1758, yyv21758)
			}
		} else if yyl1758 != len(yyv1758) {
			yyv1758 = yyv1758[:yyl1758]
			yyc1758 = true
		}
		yyj1758 := 0
		for ; yyj1758 < yyrr1758; yyj1758++ {
			yyh1758.ElemContainerState(yyj1758)
			if r.TryDecodeAsNil() {
				yyv1758[yyj1758] = NetworkPolicyIngressRule{}
			} else {
				yyv1759 := &yyv1758[yyj1758]
				yyv1759.CodecDecodeSelf(d)
			}

		}
		if yyrt1758 {
			for ; yyj1758 < yyl1758; yyj1758++ {
				yyv1758 = append(yyv1758, NetworkPolicyIngressRule{})
				yyh1758.ElemContainerState(yyj1758)
				if r.TryDecodeAsNil() {
					yyv1758[yyj1758] = NetworkPolicyIngressRule{}
				} else {
					yyv1760 := &yyv1758[yyj1758]
					yyv1760.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1758 := 0
		for ; !r.CheckBreak(); yyj1758++ {

			if yyj1758 >= len(yyv1758) {
				yyv1758 = append(yyv1758, NetworkPolicyIngressRule{}) // var yyz1758 NetworkPolicyIngressRule
				yyc1758 = true
			}
			yyh1758.ElemContainerState(yyj1758)
			if yyj1758 < len(yyv1758) {
				if r.TryDecodeAsNil() {
					yyv1758[yyj1758] = NetworkPolicyIngressRule{}
				} else {
					yyv1761 := &yyv1758[yyj1758]
					yyv1761.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1758 < len(yyv1758) {
			yyv1758 = yyv1758[:yyj1758]
			yyc1758 = true
		} else if yyj1758 == 0 && yyv1758 == nil {
			yyv1758 = []NetworkPolicyIngressRule{}
			yyc1758 = true
		}
	}
	yyh1758.End()
	if yyc1758 {
		*v = yyv1758
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPort(v []NetworkPolicyPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1762 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1763 := &yyv1762
		yy1763.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPort(v *[]NetworkPolicyPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1764 := *v
	yyh1764, yyl1764 := z.DecSliceHelperStart()
	var yyc1764 bool
	if yyl1764 == 0 {
		if yyv1764 == nil {
			yyv1764 = []NetworkPolicyPort{}
			yyc1764 = true
		} else if len(yyv1764) != 0 {
			yyv1764 = yyv1764[:0]
			yyc1764 = true
		}
	} else if yyl1764 > 0 {
		var yyrr1764, yyrl1764 int
		var yyrt1764 bool
		if yyl1764 > cap(yyv1764) {

			yyrg1764 := len(yyv1764) > 0
			yyv21764 := yyv1764
			yyrl1764, yyrt1764 = z.DecInferLen(yyl1764, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1764 {
				if yyrl1764 <= cap(yyv1764) {
					yyv1764 = yyv1764[:yyrl1764]
				} else {
					yyv1764 = make([]NetworkPolicyPort, yyrl1764)
				}
			} else {
				yyv1764 = make([]NetworkPolicyPort, yyrl1764)
			}
			yyc1764 = true
			yyrr1764 = len(yyv1764)
			if yyrg1764 {
				copy(yyv1764, yyv21764)
			}
		} else if yyl1764 != len(yyv1764) {
			yyv1764 = yyv1764[:yyl1764]
			yyc1764 = true
		}
		yyj1764 := 0
		for ; yyj1764 < yyrr1764; yyj1764++ {
			yyh1764.ElemContainerState(yyj1764)
			if r.TryDecodeAsNil() {
				yyv1764[yyj1764] = NetworkPolicyPort{}
			} else {
				yyv1765 := &yyv1764[yyj1764]
				yyv1765.CodecDecodeSelf(d)
			}

		}
		if yyrt1764 {
			for ; yyj1764 < yyl1764; yyj1764++ {
				yyv1764 = append(yyv1764, NetworkPolicyPort{})
				yyh1764.ElemContainerState(yyj1764)
				if r.TryDecodeAsNil() {
					yyv1764[yyj1764] = NetworkPolicyPort{}
				} else {
					yyv1766 := &yyv1764[yyj1764]
					yyv1766.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1764 := 0
		for ; !r.CheckBreak(); yyj1764++ {

			if yyj1764 >= len(yyv1764) {
				yyv1764 = append(yyv1764, NetworkPolicyPort{}) // var yyz1764 NetworkPolicyPort
				yyc1764 = true
			}
			yyh1764.ElemContainerState(yyj1764)
			if yyj1764 < len(yyv1764) {
				if r.TryDecodeAsNil() {
					yyv1764[yyj1764] = NetworkPolicyPort{}
				} else {
					yyv1767 := &yyv1764[yyj1764]
					yyv1767.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1764 < len(yyv1764) {
			yyv1764 = yyv1764[:yyj1764]
			yyc1764 = true
		} else if yyj1764 == 0 && yyv1764 == nil {
			yyv1764 = []NetworkPolicyPort{}
			yyc1764 = true
		}
	}
	yyh1764.End()
	if yyc1764 {
		*v = yyv1764
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPeer(v []NetworkPolicyPeer, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1768 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1769 := &yyv1768
		yy1769.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPeer(v *[]NetworkPolicyPeer, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1770 := *v
	yyh1770, yyl1770 := z.DecSliceHelperStart()
	var yyc1770 bool
	if yyl1770 == 0 {
		if yyv1770 == nil {
			yyv1770 = []NetworkPolicyPeer{}
			yyc1770 = true
		} else if len(yyv1770) != 0 {
			yyv1770 = yyv1770[:0]
			yyc1770 = true
		}
	} else if yyl1770 > 0 {
		var yyrr1770, yyrl1770 int
		var yyrt1770 bool
		if yyl1770 > cap(yyv1770) {

			yyrg1770 := len(yyv1770) > 0
			yyv21770 := yyv1770
			yyrl1770, yyrt1770 = z.DecInferLen(yyl1770, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1770 {
				if yyrl1770 <= cap(yyv1770) {
					yyv1770 = yyv1770[:yyrl1770]
				} else {
					yyv1770 = make([]NetworkPolicyPeer, yyrl1770)
				}
			} else {
				yyv1770 = make([]NetworkPolicyPeer, yyrl1770)
			}
			yyc1770 = true
			yyrr1770 = len(yyv1770)
			if yyrg1770 {
				copy(yyv1770, yyv21770)
			}
		} else if yyl1770 != len(yyv1770) {
			yyv1770 = yyv1770[:yyl1770]
			yyc1770 = true
		}
		yyj1770 := 0
		for ; yyj1770 < yyrr1770; yyj1770++ {
			yyh1770.ElemContainerState(yyj1770)
			if r.TryDecodeAsNil() {
				yyv1770[yyj1770] = NetworkPolicyPeer{}
			} else {
				yyv1771 := &yyv1770[yyj1770]
				yyv1771.CodecDecodeSelf(d)
			}

		}
		if yyrt1770 {
			for ; yyj1770 < yyl1770; yyj1770++ {
				yyv1770 = append(yyv1770, NetworkPolicyPeer{})
				yyh1770.ElemContainerState(yyj1770)
				if r.TryDecodeAsNil() {
					yyv1770[yyj1770] = NetworkPolicyPeer{}
				} else {
					yyv1772 := &yyv1770[yyj1770]
					yyv1772.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1770 := 0
		for ; !r.CheckBreak(); yyj1770++ {

			if yyj1770 >= len(yyv1770) {
				yyv1770 = append(yyv1770, NetworkPolicyPeer{}) // var yyz1770 NetworkPolicyPeer
				yyc1770 = true
			}
			yyh1770.ElemContainerState(yyj1770)
			if yyj1770 < len(yyv1770) {
				if r.TryDecodeAsNil() {
					yyv1770[yyj1770] = NetworkPolicyPeer{}
				} else {
					yyv1773 := &yyv1770[yyj1770]
					yyv1773.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1770 < len(yyv1770) {
			yyv1770 = yyv1770[:yyj1770]
			yyc1770 = true
		} else if yyj1770 == 0 && yyv1770 == nil {
			yyv1770 = []NetworkPolicyPeer{}
			yyc1770 = true
		}
	}
	yyh1770.End()
	if yyc1770 {
		*v = yyv1770
	}
}

func (x codecSelfer1234) encSliceNetworkPolicy(v []NetworkPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1774 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1775 := &yyv1774
		yy1775.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicy(v *[]NetworkPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1776 := *v
	yyh1776, yyl1776 := z.DecSliceHelperStart()
	var yyc1776 bool
	if yyl1776 == 0 {
		if yyv1776 == nil {
			yyv1776 = []NetworkPolicy{}
			yyc1776 = true
		} else if len(yyv1776) != 0 {
			yyv1776 = yyv1776[:0]
			yyc1776 = true
		}
	} else if yyl1776 > 0 {
		var yyrr1776, yyrl1776 int
		var yyrt1776 bool
		if yyl1776 > cap(yyv1776) {

			yyrg1776 := len(yyv1776) > 0
			yyv21776 := yyv1776
			yyrl1776, yyrt1776 = z.DecInferLen(yyl1776, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt1776 {
				if yyrl1776 <= cap(yyv1776) {
					yyv1776 = yyv1776[:yyrl1776]
				} else {
					yyv1776 = make([]NetworkPolicy, yyrl1776)
				}
			} else {
				yyv1776 = make([]NetworkPolicy, yyrl1776)
			}
			yyc1776 = true
			yyrr1776 = len(yyv1776)
			if yyrg1776 {
				copy(yyv1776, yyv21776)
			}
		} else if yyl1776 != len(yyv1776) {
			yyv1776 = yyv1776[:yyl1776]
			yyc1776 = true
		}
		yyj1776 := 0
		for ; yyj1776 < yyrr1776; yyj1776++ {
			yyh1776.ElemContainerState(yyj1776)
			if r.TryDecodeAsNil() {
				yyv1776[yyj1776] = NetworkPolicy{}
			} else {
				yyv1777 := &yyv1776[yyj1776]
				yyv1777.CodecDecodeSelf(d)
			}

		}
		if yyrt1776 {
			for ; yyj1776 < yyl1776; yyj1776++ {
				yyv1776 = append(yyv1776, NetworkPolicy{})
				yyh1776.ElemContainerState(yyj1776)
				if r.TryDecodeAsNil() {
					yyv1776[yyj1776] = NetworkPolicy{}
				} else {
					yyv1778 := &yyv1776[yyj1776]
					yyv1778.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1776 := 0
		for ; !r.CheckBreak(); yyj1776++ {

			if yyj1776 >= len(yyv1776) {
				yyv1776 = append(yyv1776, NetworkPolicy{}) // var yyz1776 NetworkPolicy
				yyc1776 = true
			}
			yyh1776.ElemContainerState(yyj1776)
			if yyj1776 < len(yyv1776) {
				if r.TryDecodeAsNil() {
					yyv1776[yyj1776] = NetworkPolicy{}
				} else {
					yyv1779 := &yyv1776[yyj1776]
					yyv1779.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1776 < len(yyv1776) {
			yyv1776 = yyv1776[:yyj1776]
			yyc1776 = true
		} else if yyj1776 == 0 && yyv1776 == nil {
			yyv1776 = []NetworkPolicy{}
			yyc1776 = true
		}
	}
	yyh1776.End()
	if yyc1776 {
		*v = yyv1776
	}
}
