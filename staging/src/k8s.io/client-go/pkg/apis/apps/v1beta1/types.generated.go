/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/client-go/pkg/api/resource"
	pkg3_v1 "k8s.io/client-go/pkg/api/v1"
	pkg1_v1 "k8s.io/client-go/pkg/apis/meta/v1"
	pkg2_types "k8s.io/client-go/pkg/types"
	pkg5_intstr "k8s.io/client-go/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg3_v1.PodTemplateSpec
		var v2 pkg1_v1.TypeMeta
		var v3 pkg2_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *StatefulSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			yyq2[3] = true
			yyq2[4] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else if z.HasExtensions() && z.EncExt(yy10) {
					} else {
						z.EncFallback(yy10)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy12 := &x.ObjectMeta
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else if z.HasExtensions() && z.EncExt(yy12) {
					} else {
						z.EncFallback(yy12)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yy15 := &x.Spec
					yy15.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy16 := &x.Spec
					yy16.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yy18 := &x.Status
					yy18.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy19 := &x.Status
					yy19.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *StatefulSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *StatefulSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv25 := &x.ObjectMeta
				yym26 := z.DecBinary()
				_ = yym26
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv25) {
				} else {
					z.DecFallback(yyv25, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = StatefulSetSpec{}
			} else {
				yyv27 := &x.Spec
				yyv27.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = StatefulSetStatus{}
			} else {
				yyv28 := &x.Status
				yyv28.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *StatefulSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj29 int
	var yyb29 bool
	var yyhl29 bool = l >= 0
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv32 := &x.ObjectMeta
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv32) {
		} else {
			z.DecFallback(yyv32, false)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = StatefulSetSpec{}
	} else {
		yyv34 := &x.Spec
		yyv34.CodecDecodeSelf(d)
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = StatefulSetStatus{}
	} else {
		yyv35 := &x.Status
		yyv35.CodecDecodeSelf(d)
	}
	for {
		yyj29++
		if yyhl29 {
			yyb29 = yyj29 > l
		} else {
			yyb29 = r.CheckBreak()
		}
		if yyb29 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj29-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *StatefulSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym36 := z.EncBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep37 := !z.EncBinary()
			yy2arr37 := z.EncBasicHandle().StructToArray
			var yyq37 [5]bool
			_, _, _ = yysep37, yyq37, yy2arr37
			const yyr37 bool = false
			yyq37[0] = x.Replicas != nil
			yyq37[1] = x.Selector != nil
			yyq37[3] = len(x.VolumeClaimTemplates) != 0
			var yynn37 int
			if yyr37 || yy2arr37 {
				r.EncodeArrayStart(5)
			} else {
				yynn37 = 2
				for _, b := range yyq37 {
					if b {
						yynn37++
					}
				}
				r.EncodeMapStart(yynn37)
				yynn37 = 0
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy39 := *x.Replicas
						yym40 := z.EncBinary()
						_ = yym40
						if false {
						} else {
							r.EncodeInt(int64(yy39))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq37[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy41 := *x.Replicas
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							r.EncodeInt(int64(yy41))
						}
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq37[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy47 := &x.Template
				yy47.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy48 := &x.Template
				yy48.CodecEncodeSelf(e)
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[3] {
					if x.VolumeClaimTemplates == nil {
						r.EncodeNil()
					} else {
						yym50 := z.EncBinary()
						_ = yym50
						if false {
						} else {
							h.encSlicev1_PersistentVolumeClaim(([]pkg3_v1.PersistentVolumeClaim)(x.VolumeClaimTemplates), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq37[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeClaimTemplates"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeClaimTemplates == nil {
						r.EncodeNil()
					} else {
						yym51 := z.EncBinary()
						_ = yym51
						if false {
						} else {
							h.encSlicev1_PersistentVolumeClaim(([]pkg3_v1.PersistentVolumeClaim)(x.VolumeClaimTemplates), e)
						}
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym53 := z.EncBinary()
				_ = yym53
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym54 := z.EncBinary()
				_ = yym54
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *StatefulSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym55 := z.DecBinary()
	_ = yym55
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct56 := r.ContainerType()
		if yyct56 == codecSelferValueTypeMap1234 {
			yyl56 := r.ReadMapStart()
			if yyl56 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl56, d)
			}
		} else if yyct56 == codecSelferValueTypeArray1234 {
			yyl56 := r.ReadArrayStart()
			if yyl56 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl56, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *StatefulSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys57Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys57Slc
	var yyhl57 bool = l >= 0
	for yyj57 := 0; ; yyj57++ {
		if yyhl57 {
			if yyj57 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys57Slc = r.DecodeBytes(yys57Slc, true, true)
		yys57 := string(yys57Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys57 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym59 := z.DecBinary()
				_ = yym59
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_v1.LabelSelector)
				}
				yym61 := z.DecBinary()
				_ = yym61
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg3_v1.PodTemplateSpec{}
			} else {
				yyv62 := &x.Template
				yyv62.CodecDecodeSelf(d)
			}
		case "volumeClaimTemplates":
			if r.TryDecodeAsNil() {
				x.VolumeClaimTemplates = nil
			} else {
				yyv63 := &x.VolumeClaimTemplates
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					h.decSlicev1_PersistentVolumeClaim((*[]pkg3_v1.PersistentVolumeClaim)(yyv63), d)
				}
			}
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys57)
		} // end switch yys57
	} // end for yyj57
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *StatefulSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj66 int
	var yyb66 bool
	var yyhl66 bool = l >= 0
	yyj66++
	if yyhl66 {
		yyb66 = yyj66 > l
	} else {
		yyb66 = r.CheckBreak()
	}
	if yyb66 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj66++
	if yyhl66 {
		yyb66 = yyj66 > l
	} else {
		yyb66 = r.CheckBreak()
	}
	if yyb66 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_v1.LabelSelector)
		}
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj66++
	if yyhl66 {
		yyb66 = yyj66 > l
	} else {
		yyb66 = r.CheckBreak()
	}
	if yyb66 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg3_v1.PodTemplateSpec{}
	} else {
		yyv71 := &x.Template
		yyv71.CodecDecodeSelf(d)
	}
	yyj66++
	if yyhl66 {
		yyb66 = yyj66 > l
	} else {
		yyb66 = r.CheckBreak()
	}
	if yyb66 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeClaimTemplates = nil
	} else {
		yyv72 := &x.VolumeClaimTemplates
		yym73 := z.DecBinary()
		_ = yym73
		if false {
		} else {
			h.decSlicev1_PersistentVolumeClaim((*[]pkg3_v1.PersistentVolumeClaim)(yyv72), d)
		}
	}
	yyj66++
	if yyhl66 {
		yyb66 = yyj66 > l
	} else {
		yyb66 = r.CheckBreak()
	}
	if yyb66 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	for {
		yyj66++
		if yyhl66 {
			yyb66 = yyj66 > l
		} else {
			yyb66 = r.CheckBreak()
		}
		if yyb66 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj66-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *StatefulSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym75 := z.EncBinary()
		_ = yym75
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep76 := !z.EncBinary()
			yy2arr76 := z.EncBasicHandle().StructToArray
			var yyq76 [2]bool
			_, _, _ = yysep76, yyq76, yy2arr76
			const yyr76 bool = false
			yyq76[0] = x.ObservedGeneration != nil
			var yynn76 int
			if yyr76 || yy2arr76 {
				r.EncodeArrayStart(2)
			} else {
				yynn76 = 1
				for _, b := range yyq76 {
					if b {
						yynn76++
					}
				}
				r.EncodeMapStart(yynn76)
				yynn76 = 0
			}
			if yyr76 || yy2arr76 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq76[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy78 := *x.ObservedGeneration
						yym79 := z.EncBinary()
						_ = yym79
						if false {
						} else {
							r.EncodeInt(int64(yy78))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq76[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy80 := *x.ObservedGeneration
						yym81 := z.EncBinary()
						_ = yym81
						if false {
						} else {
							r.EncodeInt(int64(yy80))
						}
					}
				}
			}
			if yyr76 || yy2arr76 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym83 := z.EncBinary()
				_ = yym83
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr76 || yy2arr76 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *StatefulSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym85 := z.DecBinary()
	_ = yym85
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct86 := r.ContainerType()
		if yyct86 == codecSelferValueTypeMap1234 {
			yyl86 := r.ReadMapStart()
			if yyl86 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl86, d)
			}
		} else if yyct86 == codecSelferValueTypeArray1234 {
			yyl86 := r.ReadArrayStart()
			if yyl86 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl86, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *StatefulSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys87Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys87Slc
	var yyhl87 bool = l >= 0
	for yyj87 := 0; ; yyj87++ {
		if yyhl87 {
			if yyj87 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys87Slc = r.DecodeBytes(yys87Slc, true, true)
		yys87 := string(yys87Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys87 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym89 := z.DecBinary()
				_ = yym89
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys87)
		} // end switch yys87
	} // end for yyj87
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *StatefulSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj91 int
	var yyb91 bool
	var yyhl91 bool = l >= 0
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = r.CheckBreak()
	}
	if yyb91 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym93 := z.DecBinary()
		_ = yym93
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj91++
	if yyhl91 {
		yyb91 = yyj91 > l
	} else {
		yyb91 = r.CheckBreak()
	}
	if yyb91 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj91++
		if yyhl91 {
			yyb91 = yyj91 > l
		} else {
			yyb91 = r.CheckBreak()
		}
		if yyb91 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj91-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *StatefulSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [4]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[0] = x.Kind != ""
			yyq96[1] = x.APIVersion != ""
			yyq96[2] = true
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(4)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq96[0] {
					yym98 := z.EncBinary()
					_ = yym98
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq96[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym99 := z.EncBinary()
					_ = yym99
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq96[1] {
					yym101 := z.EncBinary()
					_ = yym101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym102 := z.EncBinary()
					_ = yym102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq96[2] {
					yy104 := &x.ListMeta
					yym105 := z.EncBinary()
					_ = yym105
					if false {
					} else if z.HasExtensions() && z.EncExt(yy104) {
					} else {
						z.EncFallback(yy104)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy106 := &x.ListMeta
					yym107 := z.EncBinary()
					_ = yym107
					if false {
					} else if z.HasExtensions() && z.EncExt(yy106) {
					} else {
						z.EncFallback(yy106)
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym109 := z.EncBinary()
					_ = yym109
					if false {
					} else {
						h.encSliceStatefulSet(([]StatefulSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym110 := z.EncBinary()
					_ = yym110
					if false {
					} else {
						h.encSliceStatefulSet(([]StatefulSet)(x.Items), e)
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *StatefulSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym111 := z.DecBinary()
	_ = yym111
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct112 := r.ContainerType()
		if yyct112 == codecSelferValueTypeMap1234 {
			yyl112 := r.ReadMapStart()
			if yyl112 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl112, d)
			}
		} else if yyct112 == codecSelferValueTypeArray1234 {
			yyl112 := r.ReadArrayStart()
			if yyl112 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl112, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *StatefulSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys113Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys113Slc
	var yyhl113 bool = l >= 0
	for yyj113 := 0; ; yyj113++ {
		if yyhl113 {
			if yyj113 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys113Slc = r.DecodeBytes(yys113Slc, true, true)
		yys113 := string(yys113Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys113 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv116 := &x.ListMeta
				yym117 := z.DecBinary()
				_ = yym117
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv116) {
				} else {
					z.DecFallback(yyv116, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv118 := &x.Items
				yym119 := z.DecBinary()
				_ = yym119
				if false {
				} else {
					h.decSliceStatefulSet((*[]StatefulSet)(yyv118), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys113)
		} // end switch yys113
	} // end for yyj113
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *StatefulSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj120 int
	var yyb120 bool
	var yyhl120 bool = l >= 0
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv123 := &x.ListMeta
		yym124 := z.DecBinary()
		_ = yym124
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv123) {
		} else {
			z.DecFallback(yyv123, false)
		}
	}
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv125 := &x.Items
		yym126 := z.DecBinary()
		_ = yym126
		if false {
		} else {
			h.decSliceStatefulSet((*[]StatefulSet)(yyv125), d)
		}
	}
	for {
		yyj120++
		if yyhl120 {
			yyb120 = yyj120 > l
		} else {
			yyb120 = r.CheckBreak()
		}
		if yyb120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicev1_PersistentVolumeClaim(v []pkg3_v1.PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv127 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy128 := &yyv127
		yy128.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicev1_PersistentVolumeClaim(v *[]pkg3_v1.PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv129 := *v
	yyh129, yyl129 := z.DecSliceHelperStart()
	var yyc129 bool
	if yyl129 == 0 {
		if yyv129 == nil {
			yyv129 = []pkg3_v1.PersistentVolumeClaim{}
			yyc129 = true
		} else if len(yyv129) != 0 {
			yyv129 = yyv129[:0]
			yyc129 = true
		}
	} else if yyl129 > 0 {
		var yyrr129, yyrl129 int
		var yyrt129 bool
		if yyl129 > cap(yyv129) {

			yyrg129 := len(yyv129) > 0
			yyv2129 := yyv129
			yyrl129, yyrt129 = z.DecInferLen(yyl129, z.DecBasicHandle().MaxInitLen, 368)
			if yyrt129 {
				if yyrl129 <= cap(yyv129) {
					yyv129 = yyv129[:yyrl129]
				} else {
					yyv129 = make([]pkg3_v1.PersistentVolumeClaim, yyrl129)
				}
			} else {
				yyv129 = make([]pkg3_v1.PersistentVolumeClaim, yyrl129)
			}
			yyc129 = true
			yyrr129 = len(yyv129)
			if yyrg129 {
				copy(yyv129, yyv2129)
			}
		} else if yyl129 != len(yyv129) {
			yyv129 = yyv129[:yyl129]
			yyc129 = true
		}
		yyj129 := 0
		for ; yyj129 < yyrr129; yyj129++ {
			yyh129.ElemContainerState(yyj129)
			if r.TryDecodeAsNil() {
				yyv129[yyj129] = pkg3_v1.PersistentVolumeClaim{}
			} else {
				yyv130 := &yyv129[yyj129]
				yyv130.CodecDecodeSelf(d)
			}

		}
		if yyrt129 {
			for ; yyj129 < yyl129; yyj129++ {
				yyv129 = append(yyv129, pkg3_v1.PersistentVolumeClaim{})
				yyh129.ElemContainerState(yyj129)
				if r.TryDecodeAsNil() {
					yyv129[yyj129] = pkg3_v1.PersistentVolumeClaim{}
				} else {
					yyv131 := &yyv129[yyj129]
					yyv131.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj129 := 0
		for ; !r.CheckBreak(); yyj129++ {

			if yyj129 >= len(yyv129) {
				yyv129 = append(yyv129, pkg3_v1.PersistentVolumeClaim{}) // var yyz129 pkg3_v1.PersistentVolumeClaim
				yyc129 = true
			}
			yyh129.ElemContainerState(yyj129)
			if yyj129 < len(yyv129) {
				if r.TryDecodeAsNil() {
					yyv129[yyj129] = pkg3_v1.PersistentVolumeClaim{}
				} else {
					yyv132 := &yyv129[yyj129]
					yyv132.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj129 < len(yyv129) {
			yyv129 = yyv129[:yyj129]
			yyc129 = true
		} else if yyj129 == 0 && yyv129 == nil {
			yyv129 = []pkg3_v1.PersistentVolumeClaim{}
			yyc129 = true
		}
	}
	yyh129.End()
	if yyc129 {
		*v = yyv129
	}
}

func (x codecSelfer1234) encSliceStatefulSet(v []StatefulSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv133 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy134 := &yyv133
		yy134.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceStatefulSet(v *[]StatefulSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv135 := *v
	yyh135, yyl135 := z.DecSliceHelperStart()
	var yyc135 bool
	if yyl135 == 0 {
		if yyv135 == nil {
			yyv135 = []StatefulSet{}
			yyc135 = true
		} else if len(yyv135) != 0 {
			yyv135 = yyv135[:0]
			yyc135 = true
		}
	} else if yyl135 > 0 {
		var yyrr135, yyrl135 int
		var yyrt135 bool
		if yyl135 > cap(yyv135) {

			yyrg135 := len(yyv135) > 0
			yyv2135 := yyv135
			yyrl135, yyrt135 = z.DecInferLen(yyl135, z.DecBasicHandle().MaxInitLen, 808)
			if yyrt135 {
				if yyrl135 <= cap(yyv135) {
					yyv135 = yyv135[:yyrl135]
				} else {
					yyv135 = make([]StatefulSet, yyrl135)
				}
			} else {
				yyv135 = make([]StatefulSet, yyrl135)
			}
			yyc135 = true
			yyrr135 = len(yyv135)
			if yyrg135 {
				copy(yyv135, yyv2135)
			}
		} else if yyl135 != len(yyv135) {
			yyv135 = yyv135[:yyl135]
			yyc135 = true
		}
		yyj135 := 0
		for ; yyj135 < yyrr135; yyj135++ {
			yyh135.ElemContainerState(yyj135)
			if r.TryDecodeAsNil() {
				yyv135[yyj135] = StatefulSet{}
			} else {
				yyv136 := &yyv135[yyj135]
				yyv136.CodecDecodeSelf(d)
			}

		}
		if yyrt135 {
			for ; yyj135 < yyl135; yyj135++ {
				yyv135 = append(yyv135, StatefulSet{})
				yyh135.ElemContainerState(yyj135)
				if r.TryDecodeAsNil() {
					yyv135[yyj135] = StatefulSet{}
				} else {
					yyv137 := &yyv135[yyj135]
					yyv137.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj135 := 0
		for ; !r.CheckBreak(); yyj135++ {

			if yyj135 >= len(yyv135) {
				yyv135 = append(yyv135, StatefulSet{}) // var yyz135 StatefulSet
				yyc135 = true
			}
			yyh135.ElemContainerState(yyj135)
			if yyj135 < len(yyv135) {
				if r.TryDecodeAsNil() {
					yyv135[yyj135] = StatefulSet{}
				} else {
					yyv138 := &yyv135[yyj135]
					yyv138.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj135 < len(yyv135) {
			yyv135 = yyv135[:yyj135]
			yyc135 = true
		} else if yyj135 == 0 && yyv135 == nil {
			yyv135 = []StatefulSet{}
			yyc135 = true
		}
	}
	yyh135.End()
	if yyc135 {
		*v = yyv135
	}
}
